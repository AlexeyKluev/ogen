// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func encodeMetaRootResponse(response MetaRoot, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeAppsGetAuthenticatedResponse(response Integration, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeAppsDeleteInstallationResponse(response AppsDeleteInstallationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AppsDeleteInstallationNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/app/installations/{installation_id}: unexpected response type for method: %T", response)
	}
}

func encodeAppsSuspendInstallationResponse(response AppsSuspendInstallationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AppsSuspendInstallationNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/app/installations/{installation_id}/suspended: unexpected response type for method: %T", response)
	}
}

func encodeAppsUnsuspendInstallationResponse(response AppsUnsuspendInstallationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AppsUnsuspendInstallationNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/app/installations/{installation_id}/suspended: unexpected response type for method: %T", response)
	}
}

func encodeOAuthAuthorizationsListGrantsResponse(response OAuthAuthorizationsListGrantsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OAuthAuthorizationsListGrantsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsListGrantsApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OAuthAuthorizationsListGrantsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OAuthAuthorizationsListGrantsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/applications/grants: unexpected response type for method: %T", response)
	}
}

func encodeOAuthAuthorizationsGetGrantResponse(response OAuthAuthorizationsGetGrantResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ApplicationGrant:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsGetGrantApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OAuthAuthorizationsGetGrantApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/applications/grants/{grant_id}: unexpected response type for method: %T", response)
	}
}

func encodeOAuthAuthorizationsDeleteGrantResponse(response OAuthAuthorizationsDeleteGrantResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OAuthAuthorizationsDeleteGrantNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OAuthAuthorizationsDeleteGrantApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/applications/grants/{grant_id}: unexpected response type for method: %T", response)
	}
}

func encodeAppsGetBySlugResponse(response AppsGetBySlugResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Integration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsGetBySlugApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsGetBySlugApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/apps/{app_slug}: unexpected response type for method: %T", response)
	}
}

func encodeOAuthAuthorizationsListAuthorizationsResponse(response OAuthAuthorizationsListAuthorizationsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OAuthAuthorizationsListAuthorizationsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/authorizations: unexpected response type for method: %T", response)
	}
}

func encodeOAuthAuthorizationsGetAuthorizationResponse(response OAuthAuthorizationsGetAuthorizationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Authorization:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/authorizations/{authorization_id}: unexpected response type for method: %T", response)
	}
}

func encodeOAuthAuthorizationsDeleteAuthorizationResponse(response OAuthAuthorizationsDeleteAuthorizationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OAuthAuthorizationsDeleteAuthorizationNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/authorizations/{authorization_id}: unexpected response type for method: %T", response)
	}
}

func encodeCodesOfConductGetAllCodesOfConductResponse(response CodesOfConductGetAllCodesOfConductResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CodesOfConductGetAllCodesOfConductOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/codes_of_conduct: unexpected response type for method: %T", response)
	}
}

func encodeCodesOfConductGetConductCodeResponse(response CodesOfConductGetConductCodeResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CodeOfConduct:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/codes_of_conduct/{key}: unexpected response type for method: %T", response)
	}
}

func encodeEmojisGetResponse(response EmojisGetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *EmojisGetOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/emojis: unexpected response type for method: %T", response)
	}
}

func encodeEnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse(response ActionsEnterprisePermissions, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse(response EnterpriseAdminSetGithubActionsPermissionsEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(response EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(response EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse(response EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse(response EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminGetAllowedActionsEnterpriseResponse(response SelectedActions, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminSetAllowedActionsEnterpriseResponse(response EnterpriseAdminSetAllowedActionsEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse(response EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse(response RunnerGroupsEnterprise, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse(response RunnerGroupsEnterprise, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse(response EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse(response RunnerGroupsEnterprise, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(response EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse(response EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse(response EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse(response EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse(response EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminListSelfHostedRunnersForEnterpriseResponse(response EnterpriseAdminListSelfHostedRunnersForEnterprise, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminListRunnerApplicationsForEnterpriseResponse(response []RunnerApplication, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminCreateRegistrationTokenForEnterpriseResponse(response AuthenticationToken, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminCreateRemoveTokenForEnterpriseResponse(response AuthenticationToken, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse(response Runner, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse(response EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeBillingGetGithubActionsBillingGheResponse(response ActionsBillingUsage, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeBillingGetGithubPackagesBillingGheResponse(response PackagesBillingUsage, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeBillingGetSharedStorageBillingGheResponse(response CombinedBillingUsage, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActivityListPublicEventsResponse(response ActivityListPublicEventsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActivityListPublicEventsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/events: unexpected response type for method: %T", response)
	}
}

func encodeActivityGetFeedsResponse(response Feed, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeGistsListResponse(response GistsListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistsListOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists: unexpected response type for method: %T", response)
	}
}

func encodeGistsListStarredResponse(response GistsListStarredResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistsListStarredOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsListStarredApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GistsListStarredApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/starred: unexpected response type for method: %T", response)
	}
}

func encodeGistsGetResponse(response GistsGetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ForbiddenGist:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}: unexpected response type for method: %T", response)
	}
}

func encodeGistsDeleteResponse(response GistsDeleteResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistsDeleteNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsDeleteApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GistsDeleteApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}: unexpected response type for method: %T", response)
	}
}

func encodeGistsListCommentsResponse(response GistsListCommentsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistsListCommentsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsListCommentsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GistsListCommentsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/comments: unexpected response type for method: %T", response)
	}
}

func encodeGistsCreateCommentResponse(response GistsCreateCommentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsCreateCommentApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GistsCreateCommentApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/comments: unexpected response type for method: %T", response)
	}
}

func encodeGistsGetCommentResponse(response GistsGetCommentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ForbiddenGist:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/comments/{comment_id}: unexpected response type for method: %T", response)
	}
}

func encodeGistsDeleteCommentResponse(response GistsDeleteCommentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistsDeleteCommentNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsDeleteCommentApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GistsDeleteCommentApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/comments/{comment_id}: unexpected response type for method: %T", response)
	}
}

func encodeGistsUpdateCommentResponse(response GistsUpdateCommentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/comments/{comment_id}: unexpected response type for method: %T", response)
	}
}

func encodeGistsListCommitsResponse(response GistsListCommitsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistsListCommitsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsListCommitsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GistsListCommitsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/commits: unexpected response type for method: %T", response)
	}
}

func encodeGistsListForksResponse(response GistsListForksResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistsListForksOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsListForksApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GistsListForksApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/forks: unexpected response type for method: %T", response)
	}
}

func encodeGistsCheckIsStarredResponse(response GistsCheckIsStarredResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistsCheckIsStarredNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GistsCheckIsStarredNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/star: unexpected response type for method: %T", response)
	}
}

func encodeGistsStarResponse(response GistsStarResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistsStarNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsStarApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GistsStarApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/star: unexpected response type for method: %T", response)
	}
}

func encodeGistsUnstarResponse(response GistsUnstarResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GistsUnstarNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *GistsUnstarApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *GistsUnstarApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/gists/{gist_id}/star: unexpected response type for method: %T", response)
	}
}

func encodeGitignoreGetAllTemplatesResponse(response GitignoreGetAllTemplatesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GitignoreGetAllTemplatesOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/gitignore/templates: unexpected response type for method: %T", response)
	}
}

func encodeGitignoreGetTemplateResponse(response GitignoreGetTemplateResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GitignoreTemplate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/gitignore/templates/{name}: unexpected response type for method: %T", response)
	}
}

func encodeAppsListReposAccessibleToInstallationResponse(response AppsListReposAccessibleToInstallationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AppsListReposAccessibleToInstallationOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *AppsListReposAccessibleToInstallationApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsListReposAccessibleToInstallationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/installation/repositories: unexpected response type for method: %T", response)
	}
}

func encodeAppsRevokeInstallationAccessTokenResponse(response AppsRevokeInstallationAccessToken, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeLicensesGetAllCommonlyUsedResponse(response LicensesGetAllCommonlyUsedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *LicensesGetAllCommonlyUsedOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/licenses: unexpected response type for method: %T", response)
	}
}

func encodeLicensesGetResponse(response LicensesGetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *License:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *LicensesGetApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *LicensesGetApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/licenses/{license}: unexpected response type for method: %T", response)
	}
}

func encodeMarkdownRenderResponse(response MarkdownRenderResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MarkdownRenderOK:
		w.Header().Set("Content-Type", "text/html")
		w.WriteHeader(200)
		return fmt.Errorf("text/html encoder not implemented")
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/markdown: unexpected response type for method: %T", response)
	}
}

func encodeMarkdownRenderRawResponse(response MarkdownRenderRawResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MarkdownRenderRawOK:
		w.Header().Set("Content-Type", "text/html")
		w.WriteHeader(200)
		return fmt.Errorf("text/html encoder not implemented")
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/markdown/raw: unexpected response type for method: %T", response)
	}
}

func encodeAppsGetSubscriptionPlanForAccountResponse(response AppsGetSubscriptionPlanForAccountResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MarketplacePurchase:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsGetSubscriptionPlanForAccountApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/marketplace_listing/accounts/{account_id}: unexpected response type for method: %T", response)
	}
}

func encodeAppsListPlansResponse(response AppsListPlansResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AppsListPlansOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsListPlansApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsListPlansApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/marketplace_listing/plans: unexpected response type for method: %T", response)
	}
}

func encodeAppsGetSubscriptionPlanForAccountStubbedResponse(response AppsGetSubscriptionPlanForAccountStubbedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MarketplacePurchase:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsGetSubscriptionPlanForAccountStubbedNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/marketplace_listing/stubbed/accounts/{account_id}: unexpected response type for method: %T", response)
	}
}

func encodeAppsListPlansStubbedResponse(response AppsListPlansStubbedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AppsListPlansStubbedOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/marketplace_listing/stubbed/plans: unexpected response type for method: %T", response)
	}
}

func encodeMetaGetResponse(response MetaGetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *APIOverview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/meta: unexpected response type for method: %T", response)
	}
}

func encodeActivityListPublicEventsForRepoNetworkResponse(response ActivityListPublicEventsForRepoNetworkResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActivityListPublicEventsForRepoNetworkOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(301)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/networks/{owner}/{repo}/events: unexpected response type for method: %T", response)
	}
}

func encodeActivityMarkNotificationsAsReadResponse(response ActivityMarkNotificationsAsReadResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActivityMarkNotificationsAsReadAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityMarkNotificationsAsReadResetContent:
		w.WriteHeader(205)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityMarkNotificationsAsReadApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityMarkNotificationsAsReadApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/notifications: unexpected response type for method: %T", response)
	}
}

func encodeActivityGetThreadResponse(response ActivityGetThreadResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Thread:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityGetThreadApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityGetThreadApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/notifications/threads/{thread_id}: unexpected response type for method: %T", response)
	}
}

func encodeActivityMarkThreadAsReadResponse(response ActivityMarkThreadAsReadResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActivityMarkThreadAsReadResetContent:
		w.WriteHeader(205)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/notifications/threads/{thread_id}: unexpected response type for method: %T", response)
	}
}

func encodeActivityGetThreadSubscriptionForAuthenticatedUserResponse(response ActivityGetThreadSubscriptionForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ThreadSubscription:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/notifications/threads/{thread_id}/subscription: unexpected response type for method: %T", response)
	}
}

func encodeActivitySetThreadSubscriptionResponse(response ActivitySetThreadSubscriptionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ThreadSubscription:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivitySetThreadSubscriptionApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivitySetThreadSubscriptionApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/notifications/threads/{thread_id}/subscription: unexpected response type for method: %T", response)
	}
}

func encodeActivityDeleteThreadSubscriptionResponse(response ActivityDeleteThreadSubscriptionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActivityDeleteThreadSubscriptionNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityDeleteThreadSubscriptionApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/notifications/threads/{thread_id}/subscription: unexpected response type for method: %T", response)
	}
}

func encodeMetaGetOctocatResponse(response string, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octocat-stream")
	w.WriteHeader(200)
	return fmt.Errorf("application/octocat-stream encoder not implemented")
}

func encodeOrgsListResponse(response OrgsListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsListOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/organizations: unexpected response type for method: %T", response)
	}
}

func encodeOrgsGetResponse(response OrgsGetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrganizationFull:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}: unexpected response type for method: %T", response)
	}
}

func encodeActionsGetGithubActionsPermissionsOrganizationResponse(response ActionsOrganizationPermissions, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsSetGithubActionsPermissionsOrganizationResponse(response ActionsSetGithubActionsPermissionsOrganization, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse(response ActionsListSelectedRepositoriesEnabledGithubActionsOrganization, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse(response ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsEnableSelectedRepositoryGithubActionsOrganizationResponse(response ActionsEnableSelectedRepositoryGithubActionsOrganization, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDisableSelectedRepositoryGithubActionsOrganizationResponse(response ActionsDisableSelectedRepositoryGithubActionsOrganization, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsGetAllowedActionsOrganizationResponse(response SelectedActions, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsSetAllowedActionsOrganizationResponse(response ActionsSetAllowedActionsOrganization, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsListSelfHostedRunnerGroupsForOrgResponse(response ActionsListSelfHostedRunnerGroupsForOrg, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsCreateSelfHostedRunnerGroupForOrgResponse(response RunnerGroupsOrg, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsGetSelfHostedRunnerGroupForOrgResponse(response RunnerGroupsOrg, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsDeleteSelfHostedRunnerGroupFromOrgResponse(response ActionsDeleteSelfHostedRunnerGroupFromOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsUpdateSelfHostedRunnerGroupForOrgResponse(response RunnerGroupsOrg, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse(response ActionsListRepoAccessToSelfHostedRunnerGroupInOrg, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponse(response ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse(response ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponse(response ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsListSelfHostedRunnersInGroupForOrgResponse(response ActionsListSelfHostedRunnersInGroupForOrg, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsSetSelfHostedRunnersInGroupForOrgResponse(response ActionsSetSelfHostedRunnersInGroupForOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsAddSelfHostedRunnerToGroupForOrgResponse(response ActionsAddSelfHostedRunnerToGroupForOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsRemoveSelfHostedRunnerFromGroupForOrgResponse(response ActionsRemoveSelfHostedRunnerFromGroupForOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsListSelfHostedRunnersForOrgResponse(response ActionsListSelfHostedRunnersForOrg, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsListRunnerApplicationsForOrgResponse(response []RunnerApplication, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsCreateRegistrationTokenForOrgResponse(response AuthenticationToken, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsCreateRemoveTokenForOrgResponse(response AuthenticationToken, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsGetSelfHostedRunnerForOrgResponse(response Runner, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsDeleteSelfHostedRunnerFromOrgResponse(response ActionsDeleteSelfHostedRunnerFromOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsListOrgSecretsResponse(response ActionsListOrgSecrets, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsGetOrgPublicKeyResponse(response ActionsPublicKey, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsGetOrgSecretResponse(response OrganizationActionsSecret, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsCreateOrUpdateOrgSecretResponse(response ActionsCreateOrUpdateOrgSecretResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *EmptyObject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActionsCreateOrUpdateOrgSecretNoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/actions/secrets/{secret_name}: unexpected response type for method: %T", response)
	}
}

func encodeActionsDeleteOrgSecretResponse(response ActionsDeleteOrgSecret, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsListSelectedReposForOrgSecretResponse(response ActionsListSelectedReposForOrgSecret, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsSetSelectedReposForOrgSecretResponse(response ActionsSetSelectedReposForOrgSecret, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsAddSelectedRepoToOrgSecretResponse(response ActionsAddSelectedRepoToOrgSecretResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActionsAddSelectedRepoToOrgSecretNoContent:
		w.WriteHeader(204)
		return nil
	case *ActionsAddSelectedRepoToOrgSecretConflict:
		w.WriteHeader(409)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}: unexpected response type for method: %T", response)
	}
}

func encodeActionsRemoveSelectedRepoFromOrgSecretResponse(response ActionsRemoveSelectedRepoFromOrgSecretResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActionsRemoveSelectedRepoFromOrgSecretNoContent:
		w.WriteHeader(204)
		return nil
	case *ActionsRemoveSelectedRepoFromOrgSecretConflict:
		w.WriteHeader(409)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}: unexpected response type for method: %T", response)
	}
}

func encodeOrgsListBlockedUsersResponse(response OrgsListBlockedUsersResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsListBlockedUsersOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/blocks: unexpected response type for method: %T", response)
	}
}

func encodeOrgsCheckBlockedUserResponse(response OrgsCheckBlockedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsCheckBlockedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/blocks/{username}: unexpected response type for method: %T", response)
	}
}

func encodeOrgsUnblockUserResponse(response OrgsUnblockUser, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeOrgsListSamlSSOAuthorizationsResponse(response []CredentialAuthorization, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeOrgsRemoveSamlSSOAuthorizationResponse(response OrgsRemoveSamlSSOAuthorizationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsRemoveSamlSSOAuthorizationNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/credential-authorizations/{credential_id}: unexpected response type for method: %T", response)
	}
}

func encodeActivityListPublicOrgEventsResponse(response []Event, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeOrgsListFailedInvitationsResponse(response OrgsListFailedInvitationsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsListFailedInvitationsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/failed_invitations: unexpected response type for method: %T", response)
	}
}

func encodeOrgsListWebhooksResponse(response OrgsListWebhooksResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsListWebhooksOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/hooks: unexpected response type for method: %T", response)
	}
}

func encodeOrgsGetWebhookResponse(response OrgsGetWebhookResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgHook:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/hooks/{hook_id}: unexpected response type for method: %T", response)
	}
}

func encodeOrgsDeleteWebhookResponse(response OrgsDeleteWebhookResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsDeleteWebhookNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/hooks/{hook_id}: unexpected response type for method: %T", response)
	}
}

func encodeOrgsPingWebhookResponse(response OrgsPingWebhookResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsPingWebhookNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/hooks/{hook_id}/pings: unexpected response type for method: %T", response)
	}
}

func encodeInteractionsRemoveRestrictionsForOrgResponse(response InteractionsRemoveRestrictionsForOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeOrgsListPendingInvitationsResponse(response OrgsListPendingInvitationsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsListPendingInvitationsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/invitations: unexpected response type for method: %T", response)
	}
}

func encodeOrgsListInvitationTeamsResponse(response OrgsListInvitationTeamsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsListInvitationTeamsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/invitations/{invitation_id}/teams: unexpected response type for method: %T", response)
	}
}

func encodeOrgsCheckMembershipForUserResponse(response OrgsCheckMembershipForUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsCheckMembershipForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *OrgsCheckMembershipForUserFound:
		w.WriteHeader(302)
		return nil
	case *OrgsCheckMembershipForUserNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/members/{username}: unexpected response type for method: %T", response)
	}
}

func encodeOrgsRemoveMemberResponse(response OrgsRemoveMemberResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsRemoveMemberNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/members/{username}: unexpected response type for method: %T", response)
	}
}

func encodeOrgsGetMembershipForUserResponse(response OrgsGetMembershipForUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OrgsGetMembershipForUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OrgsGetMembershipForUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/memberships/{username}: unexpected response type for method: %T", response)
	}
}

func encodeOrgsRemoveMembershipForUserResponse(response OrgsRemoveMembershipForUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsRemoveMembershipForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *OrgsRemoveMembershipForUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OrgsRemoveMembershipForUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/memberships/{username}: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsDownloadArchiveForOrgResponse(response MigrationsDownloadArchiveForOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MigrationsDownloadArchiveForOrgFound:
		w.WriteHeader(302)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/migrations/{migration_id}/archive: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsDeleteArchiveForOrgResponse(response MigrationsDeleteArchiveForOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MigrationsDeleteArchiveForOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/migrations/{migration_id}/archive: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsUnlockRepoForOrgResponse(response MigrationsUnlockRepoForOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MigrationsUnlockRepoForOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsListReposForOrgResponse(response MigrationsListReposForOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MigrationsListReposForOrgOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/migrations/{migration_id}/repositories: unexpected response type for method: %T", response)
	}
}

func encodeOrgsConvertMemberToOutsideCollaboratorResponse(response OrgsConvertMemberToOutsideCollaboratorResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsConvertMemberToOutsideCollaboratorAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OrgsConvertMemberToOutsideCollaboratorNoContent:
		w.WriteHeader(204)
		return nil
	case *OrgsConvertMemberToOutsideCollaboratorForbidden:
		w.WriteHeader(403)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/outside_collaborators/{username}: unexpected response type for method: %T", response)
	}
}

func encodeOrgsRemoveOutsideCollaboratorResponse(response OrgsRemoveOutsideCollaboratorResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsRemoveOutsideCollaboratorNoContent:
		w.WriteHeader(204)
		return nil
	case *OrgsRemoveOutsideCollaboratorUnprocessableEntity:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/outside_collaborators/{username}: unexpected response type for method: %T", response)
	}
}

func encodeProjectsCreateForOrgResponse(response ProjectsCreateForOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Project:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsCreateForOrgApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsCreateForOrgApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsCreateForOrgApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsCreateForOrgApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/projects: unexpected response type for method: %T", response)
	}
}

func encodeOrgsListPublicMembersResponse(response []SimpleUser, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeOrgsCheckPublicMembershipForUserResponse(response OrgsCheckPublicMembershipForUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsCheckPublicMembershipForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *OrgsCheckPublicMembershipForUserNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/public_members/{username}: unexpected response type for method: %T", response)
	}
}

func encodeOrgsSetPublicMembershipForAuthenticatedUserResponse(response OrgsSetPublicMembershipForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsSetPublicMembershipForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/public_members/{username}: unexpected response type for method: %T", response)
	}
}

func encodeOrgsRemovePublicMembershipForAuthenticatedUserResponse(response OrgsRemovePublicMembershipForAuthenticatedUser, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeBillingGetGithubActionsBillingOrgResponse(response ActionsBillingUsage, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeBillingGetGithubPackagesBillingOrgResponse(response PackagesBillingUsage, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeBillingGetSharedStorageBillingOrgResponse(response CombinedBillingUsage, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsListIdpGroupsForOrgResponse(response GroupMapping, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsListResponse(response TeamsListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamsListOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams: unexpected response type for method: %T", response)
	}
}

func encodeTeamsGetByNameResponse(response TeamsGetByNameResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamFull:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsDeleteInOrgResponse(response TeamsDeleteInOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsUpdateInOrgResponse(response TeamFull, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsCreateDiscussionInOrgResponse(response TeamDiscussion, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsGetDiscussionInOrgResponse(response TeamDiscussion, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsDeleteDiscussionInOrgResponse(response TeamsDeleteDiscussionInOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsUpdateDiscussionInOrgResponse(response TeamDiscussion, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsCreateDiscussionCommentInOrgResponse(response TeamDiscussionComment, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsGetDiscussionCommentInOrgResponse(response TeamDiscussionComment, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsDeleteDiscussionCommentInOrgResponse(response TeamsDeleteDiscussionCommentInOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsUpdateDiscussionCommentInOrgResponse(response TeamDiscussionComment, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReactionsCreateForTeamDiscussionCommentInOrgResponse(response ReactionsCreateForTeamDiscussionCommentInOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions: unexpected response type for method: %T", response)
	}
}

func encodeReactionsDeleteForTeamDiscussionCommentResponse(response ReactionsDeleteForTeamDiscussionComment, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReactionsCreateForTeamDiscussionInOrgResponse(response ReactionsCreateForTeamDiscussionInOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions: unexpected response type for method: %T", response)
	}
}

func encodeReactionsDeleteForTeamDiscussionResponse(response ReactionsDeleteForTeamDiscussion, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsListPendingInvitationsInOrgResponse(response []OrganizationInvitation, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsGetMembershipForUserInOrgResponse(response TeamsGetMembershipForUserInOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsGetMembershipForUserInOrgNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/memberships/{username}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsAddOrUpdateMembershipForUserInOrgResponse(response TeamsAddOrUpdateMembershipForUserInOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsAddOrUpdateMembershipForUserInOrgForbidden:
		w.WriteHeader(403)
		return nil
	case *TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/memberships/{username}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsRemoveMembershipForUserInOrgResponse(response TeamsRemoveMembershipForUserInOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamsRemoveMembershipForUserInOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsRemoveMembershipForUserInOrgForbidden:
		w.WriteHeader(403)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/memberships/{username}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsListProjectsInOrgResponse(response []TeamProject, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsCheckPermissionsForProjectInOrgResponse(response TeamsCheckPermissionsForProjectInOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamProject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsCheckPermissionsForProjectInOrgNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/projects/{project_id}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsAddOrUpdateProjectPermissionsInOrgResponse(response TeamsAddOrUpdateProjectPermissionsInOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamsAddOrUpdateProjectPermissionsInOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsAddOrUpdateProjectPermissionsInOrgForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/projects/{project_id}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsRemoveProjectInOrgResponse(response TeamsRemoveProjectInOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsListReposInOrgResponse(response []MinimalRepository, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsCheckPermissionsForRepoInOrgResponse(response TeamsCheckPermissionsForRepoInOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamRepository:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsCheckPermissionsForRepoInOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsCheckPermissionsForRepoInOrgNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsAddOrUpdateRepoPermissionsInOrgResponse(response TeamsAddOrUpdateRepoPermissionsInOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsRemoveRepoInOrgResponse(response TeamsRemoveRepoInOrg, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsListIdpGroupsInOrgResponse(response GroupMapping, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponse(response GroupMapping, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsListChildInOrgResponse(response []Team, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeProjectsGetCardResponse(response ProjectsGetCardResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProjectCard:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsGetCardApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsGetCardApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsGetCardApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/columns/cards/{card_id}: unexpected response type for method: %T", response)
	}
}

func encodeProjectsDeleteCardResponse(response ProjectsDeleteCardResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProjectsDeleteCardNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsDeleteCardApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsDeleteCardForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsDeleteCardApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/columns/cards/{card_id}: unexpected response type for method: %T", response)
	}
}

func encodeProjectsUpdateCardResponse(response ProjectsUpdateCardResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProjectCard:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsUpdateCardApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsUpdateCardApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsUpdateCardApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/columns/cards/{card_id}: unexpected response type for method: %T", response)
	}
}

func encodeProjectsGetColumnResponse(response ProjectsGetColumnResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProjectColumn:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsGetColumnApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsGetColumnApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsGetColumnApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/columns/{column_id}: unexpected response type for method: %T", response)
	}
}

func encodeProjectsDeleteColumnResponse(response ProjectsDeleteColumnResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProjectsDeleteColumnNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsDeleteColumnApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsDeleteColumnApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/columns/{column_id}: unexpected response type for method: %T", response)
	}
}

func encodeProjectsUpdateColumnResponse(response ProjectsUpdateColumnResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProjectColumn:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsUpdateColumnApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsUpdateColumnApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/columns/{column_id}: unexpected response type for method: %T", response)
	}
}

func encodeProjectsMoveColumnResponse(response ProjectsMoveColumnResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProjectsMoveColumnCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsMoveColumnApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsMoveColumnApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/columns/{column_id}/moves: unexpected response type for method: %T", response)
	}
}

func encodeProjectsGetResponse(response ProjectsGetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Project:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsGetApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsGetApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/{project_id}: unexpected response type for method: %T", response)
	}
}

func encodeProjectsDeleteResponse(response ProjectsDeleteResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProjectsDeleteNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsDeleteApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsDeleteForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsDeleteApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsDeleteApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/{project_id}: unexpected response type for method: %T", response)
	}
}

func encodeProjectsUpdateResponse(response ProjectsUpdateResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Project:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsUpdateApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsUpdateForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsUpdateNotFound:
		w.WriteHeader(404)
		return nil
	case *ProjectsUpdateApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/{project_id}: unexpected response type for method: %T", response)
	}
}

func encodeProjectsListColumnsResponse(response ProjectsListColumnsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProjectsListColumnsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsListColumnsApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsListColumnsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/{project_id}/columns: unexpected response type for method: %T", response)
	}
}

func encodeProjectsCreateColumnResponse(response ProjectsCreateColumnResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProjectColumn:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsCreateColumnApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsCreateColumnApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/projects/{project_id}/columns: unexpected response type for method: %T", response)
	}
}

func encodeRateLimitGetResponse(response RateLimitGetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *RateLimitOverview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/rate_limit: unexpected response type for method: %T", response)
	}
}

func encodeReactionsDeleteLegacyResponse(response ReactionsDeleteLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReactionsDeleteLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ReactionsDeleteLegacyApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReactionsDeleteLegacyApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReactionsDeleteLegacyApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/reactions/{reaction_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposGetResponse(response ReposGetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *FullRepository:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposGetApplicationJSONMovedPermanently:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(301)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposGetApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposGetApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteResponse(response ReposDeleteResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposDeleteNoContent:
		w.WriteHeader(204)
		return nil
	case *ReposDeleteApplicationJSONTemporaryRedirect:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(307)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposDeleteForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposDeleteApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}: unexpected response type for method: %T", response)
	}
}

func encodeActionsListArtifactsForRepoResponse(response ActionsListArtifactsForRepo, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsGetArtifactResponse(response Artifact, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsDeleteArtifactResponse(response ActionsDeleteArtifact, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsDownloadArtifactResponse(response ActionsDownloadArtifact, w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

func encodeActionsGetJobForWorkflowRunResponse(response Job, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsDownloadJobLogsForWorkflowRunResponse(response ActionsDownloadJobLogsForWorkflowRun, w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

func encodeActionsGetGithubActionsPermissionsRepositoryResponse(response ActionsRepositoryPermissions, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsSetGithubActionsPermissionsRepositoryResponse(response ActionsSetGithubActionsPermissionsRepository, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsGetAllowedActionsRepositoryResponse(response SelectedActions, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsSetAllowedActionsRepositoryResponse(response ActionsSetAllowedActionsRepository, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsListSelfHostedRunnersForRepoResponse(response ActionsListSelfHostedRunnersForRepo, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsListRunnerApplicationsForRepoResponse(response []RunnerApplication, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsCreateRegistrationTokenForRepoResponse(response AuthenticationToken, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsCreateRemoveTokenForRepoResponse(response AuthenticationToken, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsGetSelfHostedRunnerForRepoResponse(response Runner, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsDeleteSelfHostedRunnerFromRepoResponse(response ActionsDeleteSelfHostedRunnerFromRepo, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsGetWorkflowRunResponse(response WorkflowRun, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsDeleteWorkflowRunResponse(response ActionsDeleteWorkflowRun, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsGetReviewsForRunResponse(response []EnvironmentApprovals, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsApproveWorkflowRunResponse(response ActionsApproveWorkflowRunResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *EmptyObject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActionsApproveWorkflowRunApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActionsApproveWorkflowRunApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/actions/runs/{run_id}/approve: unexpected response type for method: %T", response)
	}
}

func encodeActionsListWorkflowRunArtifactsResponse(response ActionsListWorkflowRunArtifacts, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsCancelWorkflowRunResponse(response ActionsCancelWorkflowRun, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsDownloadWorkflowRunLogsResponse(response ActionsDownloadWorkflowRunLogs, w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

func encodeActionsDeleteWorkflowRunLogsResponse(response ActionsDeleteWorkflowRunLogs, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsReRunWorkflowResponse(response ActionsReRunWorkflow, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsRetryWorkflowResponse(response ActionsRetryWorkflow, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsGetWorkflowRunUsageResponse(response WorkflowRunUsage, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsListRepoSecretsResponse(response ActionsListRepoSecrets, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsGetRepoPublicKeyResponse(response ActionsPublicKey, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsGetRepoSecretResponse(response ActionsSecret, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsCreateOrUpdateRepoSecretResponse(response ActionsCreateOrUpdateRepoSecretResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActionsCreateOrUpdateRepoSecretCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActionsCreateOrUpdateRepoSecretNoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/actions/secrets/{secret_name}: unexpected response type for method: %T", response)
	}
}

func encodeActionsDeleteRepoSecretResponse(response ActionsDeleteRepoSecret, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActionsListRepoWorkflowsResponse(response ActionsListRepoWorkflows, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeIssuesListAssigneesResponse(response IssuesListAssigneesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IssuesListAssigneesOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/assignees: unexpected response type for method: %T", response)
	}
}

func encodeIssuesCheckUserCanBeAssignedResponse(response IssuesCheckUserCanBeAssignedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IssuesCheckUserCanBeAssignedNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/assignees/{assignee}: unexpected response type for method: %T", response)
	}
}

func encodeReposListAutolinksResponse(response []Autolink, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposGetAutolinkResponse(response ReposGetAutolinkResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Autolink:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/autolinks/{autolink_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteAutolinkResponse(response ReposDeleteAutolinkResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposDeleteAutolinkNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/autolinks/{autolink_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposEnableAutomatedSecurityFixesResponse(response ReposEnableAutomatedSecurityFixes, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDisableAutomatedSecurityFixesResponse(response ReposDisableAutomatedSecurityFixes, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposListBranchesResponse(response ReposListBranchesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposListBranchesOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches: unexpected response type for method: %T", response)
	}
}

func encodeReposGetBranchResponse(response ReposGetBranchResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *BranchWithProtection:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposGetBranchApplicationJSONMovedPermanently:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(301)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposGetBranchApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}: unexpected response type for method: %T", response)
	}
}

func encodeReposGetBranchProtectionResponse(response ReposGetBranchProtectionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *BranchProtection:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection: unexpected response type for method: %T", response)
	}
}

func encodeReposUpdateBranchProtectionResponse(response ReposUpdateBranchProtectionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProtectedBranch:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposUpdateBranchProtectionApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposUpdateBranchProtectionApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteBranchProtectionResponse(response ReposDeleteBranchProtectionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposDeleteBranchProtectionNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection: unexpected response type for method: %T", response)
	}
}

func encodeReposGetAdminBranchProtectionResponse(response ProtectedBranchAdminEnforced, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposSetAdminBranchProtectionResponse(response ProtectedBranchAdminEnforced, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposDeleteAdminBranchProtectionResponse(response ReposDeleteAdminBranchProtectionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposDeleteAdminBranchProtectionNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins: unexpected response type for method: %T", response)
	}
}

func encodeReposGetPullRequestReviewProtectionResponse(response ProtectedBranchPullRequestReview, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposDeletePullRequestReviewProtectionResponse(response ReposDeletePullRequestReviewProtectionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposDeletePullRequestReviewProtectionNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews: unexpected response type for method: %T", response)
	}
}

func encodeReposGetCommitSignatureProtectionResponse(response ReposGetCommitSignatureProtectionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProtectedBranchAdminEnforced:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures: unexpected response type for method: %T", response)
	}
}

func encodeReposCreateCommitSignatureProtectionResponse(response ReposCreateCommitSignatureProtectionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ProtectedBranchAdminEnforced:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteCommitSignatureProtectionResponse(response ReposDeleteCommitSignatureProtectionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposDeleteCommitSignatureProtectionNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures: unexpected response type for method: %T", response)
	}
}

func encodeReposGetStatusChecksProtectionResponse(response ReposGetStatusChecksProtectionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *StatusCheckPolicy:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks: unexpected response type for method: %T", response)
	}
}

func encodeReposRemoveStatusCheckProtectionResponse(response ReposRemoveStatusCheckProtection, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposGetAllStatusCheckContextsResponse(response ReposGetAllStatusCheckContextsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposGetAllStatusCheckContextsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts: unexpected response type for method: %T", response)
	}
}

func encodeReposGetAccessRestrictionsResponse(response ReposGetAccessRestrictionsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *BranchRestrictionPolicy:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteAccessRestrictionsResponse(response ReposDeleteAccessRestrictions, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposGetAppsWithAccessToProtectedBranchResponse(response ReposGetAppsWithAccessToProtectedBranchResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposGetAppsWithAccessToProtectedBranchOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps: unexpected response type for method: %T", response)
	}
}

func encodeReposGetTeamsWithAccessToProtectedBranchResponse(response ReposGetTeamsWithAccessToProtectedBranchResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposGetTeamsWithAccessToProtectedBranchOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams: unexpected response type for method: %T", response)
	}
}

func encodeReposGetUsersWithAccessToProtectedBranchResponse(response ReposGetUsersWithAccessToProtectedBranchResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposGetUsersWithAccessToProtectedBranchOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users: unexpected response type for method: %T", response)
	}
}

func encodeChecksGetResponse(response CheckRun, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeChecksListAnnotationsResponse(response []CheckAnnotation, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeChecksCreateSuiteResponse(response ChecksCreateSuiteResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ChecksCreateSuiteApplicationJSONOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ChecksCreateSuiteApplicationJSONCreated:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/check-suites: unexpected response type for method: %T", response)
	}
}

func encodeChecksSetSuitesPreferencesResponse(response CheckSuitePreference, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeChecksGetSuiteResponse(response CheckSuite, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeChecksRerequestSuiteResponse(response ChecksRerequestSuite, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeCodeScanningGetAlertResponse(response CodeScanningGetAlertResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CodeScanningAlert:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningGetAlertApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningGetAlertApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}: unexpected response type for method: %T", response)
	}
}

func encodeCodeScanningUpdateAlertResponse(response CodeScanningUpdateAlertResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CodeScanningAlert:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningUpdateAlertApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningUpdateAlertApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}: unexpected response type for method: %T", response)
	}
}

func encodeCodeScanningListAlertInstancesResponse(response CodeScanningListAlertInstancesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CodeScanningListAlertInstancesOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningListAlertInstancesApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningListAlertInstancesApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances: unexpected response type for method: %T", response)
	}
}

func encodeCodeScanningListRecentAnalysesResponse(response CodeScanningListRecentAnalysesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CodeScanningListRecentAnalysesOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningListRecentAnalysesApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningListRecentAnalysesApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/analyses: unexpected response type for method: %T", response)
	}
}

func encodeCodeScanningGetAnalysisResponse(response CodeScanningGetAnalysisResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CodeScanningAnalysis:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningGetAnalysisOKApplicationJSONSarif:
		w.Header().Set("Content-Type", "application/json+sarif")
		w.WriteHeader(200)
		return fmt.Errorf("application/json+sarif encoder not implemented")
	case *CodeScanningGetAnalysisApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningGetAnalysisApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}: unexpected response type for method: %T", response)
	}
}

func encodeCodeScanningDeleteAnalysisResponse(response CodeScanningDeleteAnalysisResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CodeScanningAnalysisDeletion:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningDeleteAnalysisApplicationJSONBadRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ScimError:
		w.Header().Set("Content-Type", "application/scim+json")
		w.WriteHeader(400)
		return fmt.Errorf("application/scim+json encoder not implemented")
	case *CodeScanningDeleteAnalysisApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningDeleteAnalysisApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}: unexpected response type for method: %T", response)
	}
}

func encodeCodeScanningUploadSarifResponse(response CodeScanningUploadSarifResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CodeScanningSarifsReceipt:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningUploadSarifBadRequest:
		w.WriteHeader(400)
		return nil
	case *CodeScanningUploadSarifApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningUploadSarifApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningUploadSarifRequestEntityTooLarge:
		w.WriteHeader(413)
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/sarifs: unexpected response type for method: %T", response)
	}
}

func encodeCodeScanningGetSarifResponse(response CodeScanningGetSarifResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CodeScanningSarifsStatus:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *CodeScanningGetSarifNotFound:
		w.WriteHeader(404)
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposCheckCollaboratorResponse(response ReposCheckCollaboratorResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposCheckCollaboratorNoContent:
		w.WriteHeader(204)
		return nil
	case *ReposCheckCollaboratorNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/collaborators/{username}: unexpected response type for method: %T", response)
	}
}

func encodeReposRemoveCollaboratorResponse(response ReposRemoveCollaborator, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposGetCollaboratorPermissionLevelResponse(response ReposGetCollaboratorPermissionLevelResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *RepositoryCollaboratorPermission:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/collaborators/{username}/permission: unexpected response type for method: %T", response)
	}
}

func encodeReposListCommitCommentsForRepoResponse(response []CommitComment, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposGetCommitCommentResponse(response ReposGetCommitCommentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CommitComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/comments/{comment_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteCommitCommentResponse(response ReposDeleteCommitCommentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposDeleteCommitCommentNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/comments/{comment_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposUpdateCommitCommentResponse(response ReposUpdateCommitCommentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CommitComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/comments/{comment_id}: unexpected response type for method: %T", response)
	}
}

func encodeReactionsDeleteForCommitCommentResponse(response ReactionsDeleteForCommitComment, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposListCommitsResponse(response ReposListCommitsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposListCommitsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposListCommitsApplicationJSONBadRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ScimError:
		w.Header().Set("Content-Type", "application/scim+json")
		w.WriteHeader(400)
		return fmt.Errorf("application/scim+json encoder not implemented")
	case *ReposListCommitsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposListCommitsApplicationJSONConflict:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposListCommitsApplicationJSONInternalServerError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/commits: unexpected response type for method: %T", response)
	}
}

func encodeReposListCommentsForCommitResponse(response []CommitComment, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposListPullRequestsAssociatedWithCommitResponse(response []PullRequestSimple, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeChecksListSuitesForRefResponse(response ChecksListSuitesForRef, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposGetCombinedStatusForRefResponse(response ReposGetCombinedStatusForRefResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CombinedCommitStatus:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/commits/{ref}/status: unexpected response type for method: %T", response)
	}
}

func encodeReposListCommitStatusesForRefResponse(response ReposListCommitStatusesForRefResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposListCommitStatusesForRefOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(301)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/commits/{ref}/statuses: unexpected response type for method: %T", response)
	}
}

func encodeReposGetCommunityProfileMetricsResponse(response CommunityProfile, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposCompareCommitsResponse(response ReposCompareCommitsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *CommitComparison:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposCompareCommitsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposCompareCommitsApplicationJSONInternalServerError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/compare/{basehead}: unexpected response type for method: %T", response)
	}
}

func encodeReposListContributorsResponse(response ReposListContributorsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposListContributorsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposListContributorsNoContent:
		w.WriteHeader(204)
		return nil
	case *ReposListContributorsApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposListContributorsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/contributors: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteDeploymentResponse(response ReposDeleteDeploymentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposDeleteDeploymentNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/deployments/{deployment_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposListDeploymentStatusesResponse(response ReposListDeploymentStatusesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposListDeploymentStatusesOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/deployments/{deployment_id}/statuses: unexpected response type for method: %T", response)
	}
}

func encodeReposGetDeploymentStatusResponse(response ReposGetDeploymentStatusResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *DeploymentStatus:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteAnEnvironmentResponse(response ReposDeleteAnEnvironment, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeActivityListRepoEventsResponse(response []Event, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeGitGetCommitResponse(response GitGetCommitResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GitCommit:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/git/commits/{commit_sha}: unexpected response type for method: %T", response)
	}
}

func encodeGitListMatchingRefsResponse(response []GitRef, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeGitGetRefResponse(response GitGetRefResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GitRef:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/git/ref/{ref}: unexpected response type for method: %T", response)
	}
}

func encodeGitGetTagResponse(response GitGetTagResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GitTag:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/git/tags/{tag_sha}: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteWebhookResponse(response ReposDeleteWebhookResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposDeleteWebhookNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/hooks/{hook_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposPingWebhookResponse(response ReposPingWebhookResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposPingWebhookNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/hooks/{hook_id}/pings: unexpected response type for method: %T", response)
	}
}

func encodeReposTestPushWebhookResponse(response ReposTestPushWebhookResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposTestPushWebhookNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/hooks/{hook_id}/tests: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsGetImportStatusResponse(response MigrationsGetImportStatusResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Import:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/import: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsCancelImportResponse(response MigrationsCancelImport, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeMigrationsUpdateImportResponse(response Import, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeMigrationsGetCommitAuthorsResponse(response MigrationsGetCommitAuthorsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MigrationsGetCommitAuthorsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/import/authors: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsGetLargeFilesResponse(response []PorterLargeFile, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeInteractionsSetRestrictionsForRepoResponse(response InteractionsSetRestrictionsForRepoResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *InteractionLimitResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *InteractionsSetRestrictionsForRepoConflict:
		w.WriteHeader(409)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/interaction-limits: unexpected response type for method: %T", response)
	}
}

func encodeInteractionsRemoveRestrictionsForRepoResponse(response InteractionsRemoveRestrictionsForRepoResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *InteractionsRemoveRestrictionsForRepoNoContent:
		w.WriteHeader(204)
		return nil
	case *InteractionsRemoveRestrictionsForRepoConflict:
		w.WriteHeader(409)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/interaction-limits: unexpected response type for method: %T", response)
	}
}

func encodeReposListInvitationsResponse(response []RepositoryInvitation, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposDeleteInvitationResponse(response ReposDeleteInvitation, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposUpdateInvitationResponse(response RepositoryInvitation, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeIssuesGetCommentResponse(response IssuesGetCommentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IssueComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/comments/{comment_id}: unexpected response type for method: %T", response)
	}
}

func encodeIssuesDeleteCommentResponse(response IssuesDeleteComment, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReactionsDeleteForIssueCommentResponse(response ReactionsDeleteForIssueComment, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeIssuesGetEventResponse(response IssuesGetEventResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IssueEvent:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IssuesGetEventApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IssuesGetEventApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IssuesGetEventApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/events/{event_id}: unexpected response type for method: %T", response)
	}
}

func encodeIssuesAddAssigneesResponse(response IssueSimple, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeIssuesRemoveAssigneesResponse(response IssueSimple, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeIssuesListCommentsResponse(response IssuesListCommentsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IssuesListCommentsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IssuesListCommentsApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IssuesListCommentsApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/{issue_number}/comments: unexpected response type for method: %T", response)
	}
}

func encodeIssuesListLabelsOnIssueResponse(response IssuesListLabelsOnIssueResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IssuesListLabelsOnIssueOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/{issue_number}/labels: unexpected response type for method: %T", response)
	}
}

func encodeIssuesRemoveAllLabelsResponse(response IssuesRemoveAllLabelsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IssuesRemoveAllLabelsNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/{issue_number}/labels: unexpected response type for method: %T", response)
	}
}

func encodeIssuesRemoveLabelResponse(response IssuesRemoveLabelResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IssuesRemoveLabelOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IssuesRemoveLabelApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IssuesRemoveLabelApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}: unexpected response type for method: %T", response)
	}
}

func encodeIssuesUnlockResponse(response IssuesUnlockResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IssuesUnlockNoContent:
		w.WriteHeader(204)
		return nil
	case *IssuesUnlockApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *IssuesUnlockApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/issues/{issue_number}/lock: unexpected response type for method: %T", response)
	}
}

func encodeReactionsDeleteForIssueResponse(response ReactionsDeleteForIssue, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposListDeployKeysResponse(response []DeployKey, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposGetDeployKeyResponse(response ReposGetDeployKeyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *DeployKey:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/keys/{key_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteDeployKeyResponse(response ReposDeleteDeployKey, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeIssuesListLabelsForRepoResponse(response IssuesListLabelsForRepoResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IssuesListLabelsForRepoOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/labels: unexpected response type for method: %T", response)
	}
}

func encodeIssuesGetLabelResponse(response IssuesGetLabelResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Label:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/labels/{name}: unexpected response type for method: %T", response)
	}
}

func encodeIssuesDeleteLabelResponse(response IssuesDeleteLabel, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeIssuesUpdateLabelResponse(response Label, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposListLanguagesResponse(response Language, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposEnableLfsForRepoResponse(response ReposEnableLfsForRepoResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Accepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposEnableLfsForRepoForbidden:
		w.WriteHeader(403)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/lfs: unexpected response type for method: %T", response)
	}
}

func encodeReposDisableLfsForRepoResponse(response ReposDisableLfsForRepo, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeLicensesGetForRepoResponse(response LicenseContent, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposMergeUpstreamResponse(response ReposMergeUpstreamResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MergedUpstream:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposMergeUpstreamConflict:
		w.WriteHeader(409)
		return nil
	case *ReposMergeUpstreamUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/merge-upstream: unexpected response type for method: %T", response)
	}
}

func encodeIssuesGetMilestoneResponse(response IssuesGetMilestoneResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Milestone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/milestones/{milestone_number}: unexpected response type for method: %T", response)
	}
}

func encodeIssuesDeleteMilestoneResponse(response IssuesDeleteMilestoneResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *IssuesDeleteMilestoneNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/milestones/{milestone_number}: unexpected response type for method: %T", response)
	}
}

func encodeIssuesUpdateMilestoneResponse(response Milestone, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeIssuesListLabelsForMilestoneResponse(response []Label, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActivityListRepoNotificationsForAuthenticatedUserResponse(response []Thread, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActivityMarkRepoNotificationsAsReadResponse(response ActivityMarkRepoNotificationsAsReadResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActivityMarkRepoNotificationsAsReadAccepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityMarkRepoNotificationsAsReadResetContent:
		w.WriteHeader(205)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/notifications: unexpected response type for method: %T", response)
	}
}

func encodeReposGetPagesResponse(response ReposGetPagesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Page:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pages: unexpected response type for method: %T", response)
	}
}

func encodeReposListPagesBuildsResponse(response []PageBuild, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposRequestPagesBuildResponse(response PageBuildStatus, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposGetLatestPagesBuildResponse(response PageBuild, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposGetPagesBuildResponse(response PageBuild, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposGetPagesHealthCheckResponse(response ReposGetPagesHealthCheckResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PagesHealthCheck:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *EmptyObject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposGetPagesHealthCheckBadRequest:
		w.WriteHeader(400)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposGetPagesHealthCheckUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pages/health: unexpected response type for method: %T", response)
	}
}

func encodeProjectsCreateForRepoResponse(response ProjectsCreateForRepoResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Project:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsCreateForRepoApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsCreateForRepoApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsCreateForRepoApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsCreateForRepoApplicationJSONGone:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(410)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/projects: unexpected response type for method: %T", response)
	}
}

func encodePullsGetReviewCommentResponse(response PullsGetReviewCommentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullRequestReviewComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/comments/{comment_id}: unexpected response type for method: %T", response)
	}
}

func encodePullsDeleteReviewCommentResponse(response PullsDeleteReviewCommentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullsDeleteReviewCommentNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/comments/{comment_id}: unexpected response type for method: %T", response)
	}
}

func encodePullsUpdateReviewCommentResponse(response PullRequestReviewComment, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReactionsDeleteForPullRequestCommentResponse(response ReactionsDeleteForPullRequestComment, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodePullsGetResponse(response PullsGetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullRequest:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *PullsGetApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PullsGetApplicationJSONInternalServerError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}: unexpected response type for method: %T", response)
	}
}

func encodePullsCreateReplyForReviewCommentResponse(response PullsCreateReplyForReviewCommentResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullRequestReviewComment:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies: unexpected response type for method: %T", response)
	}
}

func encodePullsListCommitsResponse(response []Commit, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodePullsCheckIfMergedResponse(response PullsCheckIfMergedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullsCheckIfMergedNoContent:
		w.WriteHeader(204)
		return nil
	case *PullsCheckIfMergedNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/merge: unexpected response type for method: %T", response)
	}
}

func encodePullsListRequestedReviewersResponse(response PullRequestReviewRequest, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodePullsListReviewsResponse(response []PullRequestReview, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodePullsCreateReviewResponse(response PullsCreateReviewResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews: unexpected response type for method: %T", response)
	}
}

func encodePullsGetReviewResponse(response PullsGetReviewResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}: unexpected response type for method: %T", response)
	}
}

func encodePullsUpdateReviewResponse(response PullsUpdateReviewResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}: unexpected response type for method: %T", response)
	}
}

func encodePullsDeletePendingReviewResponse(response PullsDeletePendingReviewResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}: unexpected response type for method: %T", response)
	}
}

func encodePullsListCommentsForReviewResponse(response PullsListCommentsForReviewResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullsListCommentsForReviewOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments: unexpected response type for method: %T", response)
	}
}

func encodePullsDismissReviewResponse(response PullsDismissReviewResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals: unexpected response type for method: %T", response)
	}
}

func encodePullsSubmitReviewResponse(response PullsSubmitReviewResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *PullRequestReview:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PullsSubmitReviewApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PullsSubmitReviewApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events: unexpected response type for method: %T", response)
	}
}

func encodeReposListReleasesResponse(response ReposListReleasesResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposListReleasesOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/releases: unexpected response type for method: %T", response)
	}
}

func encodeReposGetReleaseAssetResponse(response ReposGetReleaseAssetResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReleaseAsset:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *Found:
		w.WriteHeader(302)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/releases/assets/{asset_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteReleaseAssetResponse(response ReposDeleteReleaseAsset, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposUpdateReleaseAssetResponse(response ReleaseAsset, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposGetLatestReleaseResponse(response Release, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposGetReleaseByTagResponse(response ReposGetReleaseByTagResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Release:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/releases/tags/{tag}: unexpected response type for method: %T", response)
	}
}

func encodeReposGetReleaseResponse(response ReposGetReleaseResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Release:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/releases/{release_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposDeleteReleaseResponse(response ReposDeleteRelease, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposUpdateReleaseResponse(response ReposUpdateReleaseResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Release:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/releases/{release_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposListReleaseAssetsResponse(response []ReleaseAsset, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposUploadReleaseAssetResponse(response ReleaseAsset, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeSecretScanningGetAlertResponse(response SecretScanningGetAlertResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *SecretScanningAlert:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *SecretScanningGetAlertNotFound:
		w.WriteHeader(404)
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}: unexpected response type for method: %T", response)
	}
}

func encodeSecretScanningUpdateAlertResponse(response SecretScanningUpdateAlertResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *SecretScanningAlert:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *SecretScanningUpdateAlertNotFound:
		w.WriteHeader(404)
		return nil
	case *SecretScanningUpdateAlertUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	case *ServiceUnavailable:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(503)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}: unexpected response type for method: %T", response)
	}
}

func encodeReposGetCodeFrequencyStatsResponse(response ReposGetCodeFrequencyStatsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposGetCodeFrequencyStatsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *Accepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/stats/code_frequency: unexpected response type for method: %T", response)
	}
}

func encodeReposGetCommitActivityStatsResponse(response ReposGetCommitActivityStatsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposGetCommitActivityStatsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *Accepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/stats/commit_activity: unexpected response type for method: %T", response)
	}
}

func encodeReposGetContributorsStatsResponse(response ReposGetContributorsStatsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposGetContributorsStatsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *Accepted:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(202)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/stats/contributors: unexpected response type for method: %T", response)
	}
}

func encodeReposGetParticipationStatsResponse(response ReposGetParticipationStatsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ParticipationStats:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/stats/participation: unexpected response type for method: %T", response)
	}
}

func encodeReposGetPunchCardStatsResponse(response ReposGetPunchCardStatsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposGetPunchCardStatsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/stats/punch_card: unexpected response type for method: %T", response)
	}
}

func encodeReposCreateCommitStatusResponse(response Status, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActivityListWatchersForRepoResponse(response []SimpleUser, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActivityGetRepoSubscriptionResponse(response ActivityGetRepoSubscriptionResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *RepositorySubscription:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityGetRepoSubscriptionNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/subscription: unexpected response type for method: %T", response)
	}
}

func encodeActivitySetRepoSubscriptionResponse(response RepositorySubscription, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActivityDeleteRepoSubscriptionResponse(response ActivityDeleteRepoSubscription, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposListTagsResponse(response []Tag, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposDownloadTarballArchiveResponse(response ReposDownloadTarballArchive, w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

func encodeReposListTeamsResponse(response []Team, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposGetAllTopicsResponse(response ReposGetAllTopicsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Topic:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/topics: unexpected response type for method: %T", response)
	}
}

func encodeReposReplaceAllTopicsResponse(response ReposReplaceAllTopicsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Topic:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/topics: unexpected response type for method: %T", response)
	}
}

func encodeReposGetTopPathsResponse(response ReposGetTopPathsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposGetTopPathsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/traffic/popular/paths: unexpected response type for method: %T", response)
	}
}

func encodeReposGetTopReferrersResponse(response ReposGetTopReferrersResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposGetTopReferrersOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/traffic/popular/referrers: unexpected response type for method: %T", response)
	}
}

func encodeReposTransferResponse(response MinimalRepository, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReposCheckVulnerabilityAlertsResponse(response ReposCheckVulnerabilityAlertsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposCheckVulnerabilityAlertsNoContent:
		w.WriteHeader(204)
		return nil
	case *ReposCheckVulnerabilityAlertsNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/repos/{owner}/{repo}/vulnerability-alerts: unexpected response type for method: %T", response)
	}
}

func encodeReposEnableVulnerabilityAlertsResponse(response ReposEnableVulnerabilityAlerts, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDisableVulnerabilityAlertsResponse(response ReposDisableVulnerabilityAlerts, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeReposDownloadZipballArchiveResponse(response ReposDownloadZipballArchive, w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

func encodeReposCreateUsingTemplateResponse(response Repository, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsListEnvironmentSecretsResponse(response ActionsListEnvironmentSecrets, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsGetEnvironmentPublicKeyResponse(response ActionsPublicKey, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsGetEnvironmentSecretResponse(response ActionsSecret, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActionsCreateOrUpdateEnvironmentSecretResponse(response ActionsCreateOrUpdateEnvironmentSecretResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *EmptyObject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActionsCreateOrUpdateEnvironmentSecretNoContent:
		w.WriteHeader(204)
		return nil
	default:
		return fmt.Errorf("/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}: unexpected response type for method: %T", response)
	}
}

func encodeActionsDeleteEnvironmentSecretResponse(response ActionsDeleteEnvironmentSecret, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminListProvisionedGroupsEnterpriseResponse(response ScimGroupListEnterprise, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminProvisionAndInviteEnterpriseGroupResponse(response ScimEnterpriseGroup, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse(response ScimEnterpriseGroup, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponse(response ScimEnterpriseGroup, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminDeleteScimGroupFromEnterpriseResponse(response EnterpriseAdminDeleteScimGroupFromEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminListProvisionedIdentitiesEnterpriseResponse(response ScimUserListEnterprise, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminProvisionAndInviteEnterpriseUserResponse(response ScimEnterpriseUser, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse(response ScimEnterpriseUser, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserResponse(response ScimEnterpriseUser, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeEnterpriseAdminDeleteUserFromEnterpriseResponse(response EnterpriseAdminDeleteUserFromEnterprise, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeEnterpriseAdminUpdateAttributeForEnterpriseUserResponse(response ScimEnterpriseUser, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeScimDeleteUserFromOrgResponse(response ScimDeleteUserFromOrgResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ScimDeleteUserFromOrgNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ScimDeleteUserFromOrgApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ScimDeleteUserFromOrgApplicationScimJSONForbidden:
		w.Header().Set("Content-Type", "application/scim+json")
		w.WriteHeader(403)
		return fmt.Errorf("application/scim+json encoder not implemented")
	case *ScimDeleteUserFromOrgApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ScimDeleteUserFromOrgApplicationScimJSONNotFound:
		w.Header().Set("Content-Type", "application/scim+json")
		w.WriteHeader(404)
		return fmt.Errorf("application/scim+json encoder not implemented")
	default:
		return fmt.Errorf("/scim/v2/organizations/{org}/Users/{scim_user_id}: unexpected response type for method: %T", response)
	}
}

func encodeSearchTopicsResponse(response SearchTopicsResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *SearchTopicsOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/search/topics: unexpected response type for method: %T", response)
	}
}

func encodeTeamsGetLegacyResponse(response TeamsGetLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamFull:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsCreateDiscussionLegacyResponse(response TeamDiscussion, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsGetDiscussionLegacyResponse(response TeamDiscussion, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsDeleteDiscussionLegacyResponse(response TeamsDeleteDiscussionLegacy, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsUpdateDiscussionLegacyResponse(response TeamDiscussion, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsCreateDiscussionCommentLegacyResponse(response TeamDiscussionComment, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsGetDiscussionCommentLegacyResponse(response TeamDiscussionComment, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsDeleteDiscussionCommentLegacyResponse(response TeamsDeleteDiscussionCommentLegacy, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsUpdateDiscussionCommentLegacyResponse(response TeamDiscussionComment, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReactionsCreateForTeamDiscussionCommentLegacyResponse(response Reaction, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeReactionsCreateForTeamDiscussionLegacyResponse(response Reaction, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsListPendingInvitationsLegacyResponse(response []OrganizationInvitation, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeTeamsGetMemberLegacyResponse(response TeamsGetMemberLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamsGetMemberLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsGetMemberLegacyNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/members/{username}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsAddMemberLegacyResponse(response TeamsAddMemberLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamsAddMemberLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsAddMemberLegacyNotFound:
		w.WriteHeader(404)
		return nil
	case *TeamsAddMemberLegacyUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/members/{username}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsRemoveMemberLegacyResponse(response TeamsRemoveMemberLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamsRemoveMemberLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsRemoveMemberLegacyNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/members/{username}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsGetMembershipForUserLegacyResponse(response TeamsGetMembershipForUserLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/memberships/{username}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsAddOrUpdateMembershipForUserLegacyResponse(response TeamsAddOrUpdateMembershipForUserLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsAddOrUpdateMembershipForUserLegacyForbidden:
		w.WriteHeader(403)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity:
		w.WriteHeader(422)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/memberships/{username}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsRemoveMembershipForUserLegacyResponse(response TeamsRemoveMembershipForUserLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamsRemoveMembershipForUserLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsRemoveMembershipForUserLegacyForbidden:
		w.WriteHeader(403)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/memberships/{username}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsListProjectsLegacyResponse(response TeamsListProjectsLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamsListProjectsLegacyOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/projects: unexpected response type for method: %T", response)
	}
}

func encodeTeamsCheckPermissionsForProjectLegacyResponse(response TeamsCheckPermissionsForProjectLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamProject:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsCheckPermissionsForProjectLegacyNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/projects/{project_id}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsListReposLegacyResponse(response TeamsListReposLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamsListReposLegacyOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/repos: unexpected response type for method: %T", response)
	}
}

func encodeTeamsCheckPermissionsForRepoLegacyResponse(response TeamsCheckPermissionsForRepoLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamRepository:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsCheckPermissionsForRepoLegacyNoContent:
		w.WriteHeader(204)
		return nil
	case *TeamsCheckPermissionsForRepoLegacyNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/repos/{owner}/{repo}: unexpected response type for method: %T", response)
	}
}

func encodeTeamsRemoveRepoLegacyResponse(response TeamsRemoveRepoLegacy, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeTeamsListIdpGroupsForLegacyResponse(response TeamsListIdpGroupsForLegacyResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GroupMapping:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsListIdpGroupsForLegacyApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsListIdpGroupsForLegacyApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/teams/{team_id}/team-sync/group-mappings: unexpected response type for method: %T", response)
	}
}

func encodeUsersListBlockedByAuthenticatedResponse(response UsersListBlockedByAuthenticatedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersListBlockedByAuthenticatedOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListBlockedByAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListBlockedByAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListBlockedByAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/blocks: unexpected response type for method: %T", response)
	}
}

func encodeUsersCheckBlockedResponse(response UsersCheckBlockedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersCheckBlockedNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersCheckBlockedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersCheckBlockedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersCheckBlockedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/blocks/{username}: unexpected response type for method: %T", response)
	}
}

func encodeUsersUnblockResponse(response UsersUnblockResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersUnblockNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersUnblockApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersUnblockApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersUnblockApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/blocks/{username}: unexpected response type for method: %T", response)
	}
}

func encodeUsersListEmailsForAuthenticatedResponse(response UsersListEmailsForAuthenticatedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersListEmailsForAuthenticatedOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListEmailsForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListEmailsForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListEmailsForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/emails: unexpected response type for method: %T", response)
	}
}

func encodeUsersListFollowersForAuthenticatedUserResponse(response UsersListFollowersForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersListFollowersForAuthenticatedUserOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListFollowersForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/followers: unexpected response type for method: %T", response)
	}
}

func encodeUsersListFollowedByAuthenticatedResponse(response UsersListFollowedByAuthenticatedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersListFollowedByAuthenticatedOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListFollowedByAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListFollowedByAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/following: unexpected response type for method: %T", response)
	}
}

func encodeUsersCheckPersonIsFollowedByAuthenticatedResponse(response UsersCheckPersonIsFollowedByAuthenticatedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersCheckPersonIsFollowedByAuthenticatedNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/following/{username}: unexpected response type for method: %T", response)
	}
}

func encodeUsersFollowResponse(response UsersFollowResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersFollowNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersFollowApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersFollowApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersFollowApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/following/{username}: unexpected response type for method: %T", response)
	}
}

func encodeUsersUnfollowResponse(response UsersUnfollowResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersUnfollowNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersUnfollowApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersUnfollowApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersUnfollowApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/following/{username}: unexpected response type for method: %T", response)
	}
}

func encodeUsersListGpgKeysForAuthenticatedResponse(response UsersListGpgKeysForAuthenticatedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersListGpgKeysForAuthenticatedOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListGpgKeysForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListGpgKeysForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/gpg_keys: unexpected response type for method: %T", response)
	}
}

func encodeUsersGetGpgKeyForAuthenticatedResponse(response UsersGetGpgKeyForAuthenticatedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *GpgKey:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/gpg_keys/{gpg_key_id}: unexpected response type for method: %T", response)
	}
}

func encodeAppsListInstallationReposForAuthenticatedUserResponse(response AppsListInstallationReposForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AppsListInstallationReposForAuthenticatedUserOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/installations/{installation_id}/repositories: unexpected response type for method: %T", response)
	}
}

func encodeAppsAddRepoToInstallationResponse(response AppsAddRepoToInstallationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AppsAddRepoToInstallationNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *AppsAddRepoToInstallationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsAddRepoToInstallationApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/installations/{installation_id}/repositories/{repository_id}: unexpected response type for method: %T", response)
	}
}

func encodeAppsRemoveRepoFromInstallationResponse(response AppsRemoveRepoFromInstallationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AppsRemoveRepoFromInstallationNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *AppsRemoveRepoFromInstallationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsRemoveRepoFromInstallationApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/installations/{installation_id}/repositories/{repository_id}: unexpected response type for method: %T", response)
	}
}

func encodeInteractionsRemoveRestrictionsForAuthenticatedUserResponse(response InteractionsRemoveRestrictionsForAuthenticatedUser, w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

func encodeUsersListPublicSSHKeysForAuthenticatedResponse(response UsersListPublicSSHKeysForAuthenticatedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersListPublicSSHKeysForAuthenticatedOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/keys: unexpected response type for method: %T", response)
	}
}

func encodeUsersGetPublicSSHKeyForAuthenticatedResponse(response UsersGetPublicSSHKeyForAuthenticatedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Key:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/keys/{key_id}: unexpected response type for method: %T", response)
	}
}

func encodeUsersDeletePublicSSHKeyForAuthenticatedResponse(response UsersDeletePublicSSHKeyForAuthenticatedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersDeletePublicSSHKeyForAuthenticatedNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/keys/{key_id}: unexpected response type for method: %T", response)
	}
}

func encodeAppsListSubscriptionsForAuthenticatedUserResponse(response AppsListSubscriptionsForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AppsListSubscriptionsForAuthenticatedUserOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/marketplace_purchases: unexpected response type for method: %T", response)
	}
}

func encodeAppsListSubscriptionsForAuthenticatedUserStubbedResponse(response AppsListSubscriptionsForAuthenticatedUserStubbedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *AppsListSubscriptionsForAuthenticatedUserStubbedOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/marketplace_purchases/stubbed: unexpected response type for method: %T", response)
	}
}

func encodeOrgsGetMembershipForAuthenticatedUserResponse(response OrgsGetMembershipForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgMembership:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/memberships/orgs/{org}: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsListForAuthenticatedUserResponse(response MigrationsListForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MigrationsListForAuthenticatedUserOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *MigrationsListForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *MigrationsListForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/migrations: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsGetStatusForAuthenticatedUserResponse(response MigrationsGetStatusForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Migration:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/migrations/{migration_id}: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsGetArchiveForAuthenticatedUserResponse(response MigrationsGetArchiveForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MigrationsGetArchiveForAuthenticatedUserFound:
		w.WriteHeader(302)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/migrations/{migration_id}/archive: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsDeleteArchiveForAuthenticatedUserResponse(response MigrationsDeleteArchiveForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MigrationsDeleteArchiveForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/migrations/{migration_id}/archive: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsUnlockRepoForAuthenticatedUserResponse(response MigrationsUnlockRepoForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MigrationsUnlockRepoForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/migrations/{migration_id}/repos/{repo_name}/lock: unexpected response type for method: %T", response)
	}
}

func encodeMigrationsListReposForUserResponse(response MigrationsListReposForUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *MigrationsListReposForUserOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *BasicError:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/migrations/{migration_id}/repositories: unexpected response type for method: %T", response)
	}
}

func encodeOrgsListForAuthenticatedUserResponse(response OrgsListForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *OrgsListForAuthenticatedUserOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *OrgsListForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *OrgsListForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/orgs: unexpected response type for method: %T", response)
	}
}

func encodeProjectsCreateForAuthenticatedUserResponse(response ProjectsCreateForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Project:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ProjectsCreateForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *PreviewHeaderMissing:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(415)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ValidationErrorSimple:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(422)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/projects: unexpected response type for method: %T", response)
	}
}

func encodeUsersListPublicEmailsForAuthenticatedResponse(response UsersListPublicEmailsForAuthenticatedResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersListPublicEmailsForAuthenticatedOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/public_emails: unexpected response type for method: %T", response)
	}
}

func encodeReposListInvitationsForAuthenticatedUserResponse(response ReposListInvitationsForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposListInvitationsForAuthenticatedUserOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/repository_invitations: unexpected response type for method: %T", response)
	}
}

func encodeReposDeclineInvitationResponse(response ReposDeclineInvitationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposDeclineInvitationNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ReposDeclineInvitationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposDeclineInvitationApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposDeclineInvitationApplicationJSONConflict:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/repository_invitations/{invitation_id}: unexpected response type for method: %T", response)
	}
}

func encodeReposAcceptInvitationResponse(response ReposAcceptInvitationResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ReposAcceptInvitationNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ReposAcceptInvitationApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposAcceptInvitationApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ReposAcceptInvitationApplicationJSONConflict:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/repository_invitations/{invitation_id}: unexpected response type for method: %T", response)
	}
}

func encodeActivityCheckRepoIsStarredByAuthenticatedUserResponse(response ActivityCheckRepoIsStarredByAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActivityCheckRepoIsStarredByAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/starred/{owner}/{repo}: unexpected response type for method: %T", response)
	}
}

func encodeActivityStarRepoForAuthenticatedUserResponse(response ActivityStarRepoForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActivityStarRepoForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/starred/{owner}/{repo}: unexpected response type for method: %T", response)
	}
}

func encodeActivityUnstarRepoForAuthenticatedUserResponse(response ActivityUnstarRepoForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActivityUnstarRepoForAuthenticatedUserNoContent:
		w.WriteHeader(204)
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/starred/{owner}/{repo}: unexpected response type for method: %T", response)
	}
}

func encodeActivityListWatchedReposForAuthenticatedUserResponse(response ActivityListWatchedReposForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ActivityListWatchedReposForAuthenticatedUserOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(401)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/subscriptions: unexpected response type for method: %T", response)
	}
}

func encodeTeamsListForAuthenticatedUserResponse(response TeamsListForAuthenticatedUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *TeamsListForAuthenticatedUserOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	case *TeamsListForAuthenticatedUserApplicationJSONForbidden:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(403)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *TeamsListForAuthenticatedUserApplicationJSONNotFound:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/user/teams: unexpected response type for method: %T", response)
	}
}

func encodeUsersListResponse(response UsersListResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersListOK:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		data, err := json.Marshal(response)
		if err != nil {
			return err
		}
		if _, err := w.Write(data); err != nil {
			return err
		}
		return nil
	case *NotModified:
		w.WriteHeader(304)
		return nil
	default:
		return fmt.Errorf("/users: unexpected response type for method: %T", response)
	}
}

func encodeActivityListEventsForAuthenticatedUserResponse(response []Event, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActivityListOrgEventsForAuthenticatedUserResponse(response []Event, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActivityListPublicEventsForUserResponse(response []Event, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeUsersListFollowersForUserResponse(response []SimpleUser, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeUsersListFollowingForUserResponse(response []SimpleUser, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeUsersCheckFollowingForUserResponse(response UsersCheckFollowingForUserResponse, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *UsersCheckFollowingForUserNoContent:
		w.WriteHeader(204)
		return nil
	case *UsersCheckFollowingForUserNotFound:
		w.WriteHeader(404)
		return nil
	default:
		return fmt.Errorf("/users/{username}/following/{target_user}: unexpected response type for method: %T", response)
	}
}

func encodeUsersListGpgKeysForUserResponse(response []GpgKey, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeUsersListPublicKeysForUserResponse(response []KeySimple, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeOrgsListForUserResponse(response []OrganizationSimple, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActivityListReceivedEventsForUserResponse(response []Event, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActivityListReceivedPublicEventsForUserResponse(response []Event, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeBillingGetGithubActionsBillingUserResponse(response ActionsBillingUsage, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeBillingGetGithubPackagesBillingUserResponse(response PackagesBillingUsage, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeBillingGetSharedStorageBillingUserResponse(response CombinedBillingUsage, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeActivityListReposWatchedByUserResponse(response []MinimalRepository, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)
	data, err := json.Marshal(response)
	if err != nil {
		return err
	}
	if _, err := w.Write(data); err != nil {
		return err
	}
	return nil
}

func encodeMetaGetZenResponse(response string, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)
	return fmt.Errorf("text/plain encoder not implemented")
}
