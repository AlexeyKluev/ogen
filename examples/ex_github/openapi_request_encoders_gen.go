// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/encoding/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func encodeAppsCreateFromManifestRequest(req *AppsCreateFromManifestApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeAppsUpdateWebhookConfigForAppRequest(req AppsUpdateWebhookConfigForAppRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeAppsCreateInstallationAccessTokenRequest(req *AppsCreateInstallationAccessTokenApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeAppsDeleteAuthorizationRequest(req AppsDeleteAuthorizationApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeAppsCheckTokenRequest(req AppsCheckTokenApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeAppsDeleteTokenRequest(req AppsDeleteTokenApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeAppsResetTokenRequest(req AppsResetTokenApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeAppsScopeTokenRequest(req AppsScopeTokenApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeOAuthAuthorizationsCreateAuthorizationRequest(req *OAuthAuthorizationsCreateAuthorizationApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeOAuthAuthorizationsGetOrCreateAuthorizationForAppRequest(req OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeOAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequest(req OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeOAuthAuthorizationsUpdateAuthorizationRequest(req *OAuthAuthorizationsUpdateAuthorizationApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest(req EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest(req EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminSetAllowedActionsEnterpriseRequest(req SelectedActions) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(req EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest(req *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(req EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest(req EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeGistsCreateRequest(req GistsCreateRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeGistsUpdateRequest(req GistsUpdateApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeGistsCreateCommentRequest(req GistsCreateCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeGistsUpdateCommentRequest(req GistsUpdateCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeMarkdownRenderRequest(req MarkdownRenderApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeMarkdownRenderRawRequest(req MarkdownRenderRawRequest) ([]byte, string, error) {
	switch req := req.(type) {
	case *MarkdownRenderRawTextPlainRequest:
		return nil, "", fmt.Errorf("text/plain encoder not implemented")
	case *MarkdownRenderRawTextXMarkdownRequest:
		return nil, "", fmt.Errorf("text/x-markdown encoder not implemented")
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeActivityMarkNotificationsAsReadRequest(req *ActivityMarkNotificationsAsReadApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActivitySetThreadSubscriptionRequest(req *ActivitySetThreadSubscriptionApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeOrgsUpdateRequest(req *OrgsUpdateApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsSetGithubActionsPermissionsOrganizationRequest(req ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest(req ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsSetAllowedActionsOrganizationRequest(req *SelectedActions) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsCreateSelfHostedRunnerGroupForOrgRequest(req ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsUpdateSelfHostedRunnerGroupForOrgRequest(req ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest(req ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsSetSelfHostedRunnersInGroupForOrgRequest(req ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsCreateOrUpdateOrgSecretRequest(req ActionsCreateOrUpdateOrgSecretApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsSetSelectedReposForOrgSecretRequest(req ActionsSetSelectedReposForOrgSecretApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeOrgsCreateWebhookRequest(req OrgsCreateWebhookRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeOrgsUpdateWebhookRequest(req OrgsUpdateWebhookRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeOrgsUpdateWebhookConfigForOrgRequest(req OrgsUpdateWebhookConfigForOrgRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeInteractionsSetRestrictionsForOrgRequest(req InteractionLimit) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeOrgsCreateInvitationRequest(req *OrgsCreateInvitationApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeOrgsSetMembershipForUserRequest(req *OrgsSetMembershipForUserApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeMigrationsStartForOrgRequest(req MigrationsStartForOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeProjectsCreateForOrgRequest(req ProjectsCreateForOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateInOrgRequest(req ReposCreateInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsCreateRequest(req TeamsCreateApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsUpdateInOrgRequest(req *TeamsUpdateInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsCreateDiscussionInOrgRequest(req TeamsCreateDiscussionInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsUpdateDiscussionInOrgRequest(req *TeamsUpdateDiscussionInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsCreateDiscussionCommentInOrgRequest(req TeamsCreateDiscussionCommentInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsUpdateDiscussionCommentInOrgRequest(req TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReactionsCreateForTeamDiscussionCommentInOrgRequest(req ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReactionsCreateForTeamDiscussionInOrgRequest(req ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsAddOrUpdateMembershipForUserInOrgRequest(req *TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsAddOrUpdateProjectPermissionsInOrgRequest(req *TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsAddOrUpdateRepoPermissionsInOrgRequest(req *TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgRequest(req TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeProjectsUpdateCardRequest(req *ProjectsUpdateCardApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeProjectsMoveCardRequest(req ProjectsMoveCardApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeProjectsUpdateColumnRequest(req ProjectsUpdateColumnApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeProjectsCreateCardRequest(req ProjectsCreateCardRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeProjectsMoveColumnRequest(req ProjectsMoveColumnApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeProjectsUpdateRequest(req *ProjectsUpdateApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeProjectsAddCollaboratorRequest(req *ProjectsAddCollaboratorApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeProjectsCreateColumnRequest(req ProjectsCreateColumnApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposUpdateRequest(req *ReposUpdateApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsSetGithubActionsPermissionsRepositoryRequest(req ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsSetAllowedActionsRepositoryRequest(req *SelectedActions) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsReviewPendingDeploymentsForRunRequest(req ActionsReviewPendingDeploymentsForRunApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsCreateOrUpdateRepoSecretRequest(req ActionsCreateOrUpdateRepoSecretApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateAutolinkRequest(req ReposCreateAutolinkApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposUpdateBranchProtectionRequest(req ReposUpdateBranchProtectionApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposUpdatePullRequestReviewProtectionRequest(req *ReposUpdatePullRequestReviewProtectionApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposUpdateStatusCheckProtectionRequest(req *ReposUpdateStatusCheckProtectionApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposSetStatusCheckContextsRequest(req ReposSetStatusCheckContextsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposAddStatusCheckContextsRequest(req ReposAddStatusCheckContextsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposRemoveStatusCheckContextsRequest(req ReposRemoveStatusCheckContextsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposSetAppAccessRestrictionsRequest(req ReposSetAppAccessRestrictionsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposAddAppAccessRestrictionsRequest(req ReposAddAppAccessRestrictionsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposRemoveAppAccessRestrictionsRequest(req ReposRemoveAppAccessRestrictionsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposSetTeamAccessRestrictionsRequest(req ReposSetTeamAccessRestrictionsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposAddTeamAccessRestrictionsRequest(req ReposAddTeamAccessRestrictionsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposRemoveTeamAccessRestrictionsRequest(req ReposRemoveTeamAccessRestrictionsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposSetUserAccessRestrictionsRequest(req ReposSetUserAccessRestrictionsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposAddUserAccessRestrictionsRequest(req ReposAddUserAccessRestrictionsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposRemoveUserAccessRestrictionsRequest(req ReposRemoveUserAccessRestrictionsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposRenameBranchRequest(req *ReposRenameBranchApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeChecksCreateRequest(req ChecksCreateApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeChecksUpdateRequest(req *ChecksUpdateApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeChecksCreateSuiteRequest(req ChecksCreateSuiteApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeChecksSetSuitesPreferencesRequest(req ChecksSetSuitesPreferencesApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeCodeScanningUpdateAlertRequest(req CodeScanningUpdateAlertApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeCodeScanningUploadSarifRequest(req CodeScanningUploadSarifApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposAddCollaboratorRequest(req *ReposAddCollaboratorApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposUpdateCommitCommentRequest(req ReposUpdateCommitCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReactionsCreateForCommitCommentRequest(req ReactionsCreateForCommitCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateCommitCommentRequest(req ReposCreateCommitCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeAppsCreateContentAttachmentRequest(req AppsCreateContentAttachmentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateOrUpdateFileContentsRequest(req ReposCreateOrUpdateFileContentsApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposDeleteFileRequest(req ReposDeleteFileApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateDeploymentRequest(req ReposCreateDeploymentRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposCreateDeploymentStatusRequest(req ReposCreateDeploymentStatusApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateDispatchEventRequest(req ReposCreateDispatchEventApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateOrUpdateEnvironmentRequest(req *ReposCreateOrUpdateEnvironmentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateForkRequest(req *ReposCreateForkApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeGitCreateBlobRequest(req GitCreateBlobApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeGitCreateCommitRequest(req GitCreateCommitApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeGitCreateRefRequest(req GitCreateRefApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeGitUpdateRefRequest(req GitUpdateRefApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeGitCreateTagRequest(req GitCreateTagApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeGitCreateTreeRequest(req GitCreateTreeApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateWebhookRequest(req ReposCreateWebhookRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposUpdateWebhookRequest(req ReposUpdateWebhookRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposUpdateWebhookConfigForRepoRequest(req ReposUpdateWebhookConfigForRepoRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeMigrationsStartImportRequest(req MigrationsStartImportApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeMigrationsUpdateImportRequest(req *MigrationsUpdateImportApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeMigrationsMapCommitAuthorRequest(req *MigrationsMapCommitAuthorApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeMigrationsSetLfsPreferenceRequest(req MigrationsSetLfsPreferenceApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeInteractionsSetRestrictionsForRepoRequest(req InteractionLimit) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposUpdateInvitationRequest(req *ReposUpdateInvitationApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeIssuesCreateRequest(req IssuesCreateRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeIssuesUpdateCommentRequest(req IssuesUpdateCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReactionsCreateForIssueCommentRequest(req ReactionsCreateForIssueCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeIssuesUpdateRequest(req IssuesUpdateRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeIssuesAddAssigneesRequest(req *IssuesAddAssigneesApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeIssuesRemoveAssigneesRequest(req *IssuesRemoveAssigneesApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeIssuesCreateCommentRequest(req IssuesCreateCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeIssuesSetLabelsRequest(req IssuesSetLabelsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeIssuesAddLabelsRequest(req IssuesAddLabelsRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeIssuesLockRequest(req *IssuesLockApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReactionsCreateForIssueRequest(req ReactionsCreateForIssueApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateDeployKeyRequest(req ReposCreateDeployKeyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeIssuesCreateLabelRequest(req IssuesCreateLabelApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeIssuesUpdateLabelRequest(req *IssuesUpdateLabelApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposMergeUpstreamRequest(req ReposMergeUpstreamApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposMergeRequest(req ReposMergeApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeIssuesCreateMilestoneRequest(req IssuesCreateMilestoneApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeIssuesUpdateMilestoneRequest(req *IssuesUpdateMilestoneApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActivityMarkRepoNotificationsAsReadRequest(req *ActivityMarkRepoNotificationsAsReadApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposUpdateInformationAboutPagesSiteRequest(req ReposUpdateInformationAboutPagesSiteRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeReposCreatePagesSiteRequest(req ReposCreatePagesSiteApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeProjectsCreateForRepoRequest(req ProjectsCreateForRepoApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsCreateRequest(req PullsCreateApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsUpdateReviewCommentRequest(req PullsUpdateReviewCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReactionsCreateForPullRequestReviewCommentRequest(req ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsUpdateRequest(req *PullsUpdateApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsCreateReviewCommentRequest(req PullsCreateReviewCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsCreateReplyForReviewCommentRequest(req PullsCreateReplyForReviewCommentApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsMergeRequest(req *PullsMergeApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsRequestReviewersRequest(req *PullsRequestReviewersApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsRemoveRequestedReviewersRequest(req PullsRemoveRequestedReviewersApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsCreateReviewRequest(req *PullsCreateReviewApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsUpdateReviewRequest(req PullsUpdateReviewApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsDismissReviewRequest(req PullsDismissReviewApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsSubmitReviewRequest(req PullsSubmitReviewApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodePullsUpdateBranchRequest(req *PullsUpdateBranchApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateReleaseRequest(req ReposCreateReleaseApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposUpdateReleaseAssetRequest(req *ReposUpdateReleaseAssetApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposUpdateReleaseRequest(req *ReposUpdateReleaseApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposUploadReleaseAssetRequest(req *string) ([]byte, string, error) {
	return nil, "", fmt.Errorf("*/* encoder not implemented")
}

func encodeReactionsCreateForReleaseRequest(req ReactionsCreateForReleaseApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeSecretScanningUpdateAlertRequest(req SecretScanningUpdateAlertApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateCommitStatusRequest(req ReposCreateCommitStatusApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActivitySetRepoSubscriptionRequest(req *ActivitySetRepoSubscriptionApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposReplaceAllTopicsRequest(req ReposReplaceAllTopicsApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposTransferRequest(req ReposTransferApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateUsingTemplateRequest(req ReposCreateUsingTemplateApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeActionsCreateOrUpdateEnvironmentSecretRequest(req ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(req EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest(req EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminUpdateAttributeForEnterpriseGroupRequest(req EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeEnterpriseAdminProvisionAndInviteEnterpriseUserRequest(req EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest(req EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeEnterpriseAdminUpdateAttributeForEnterpriseUserRequest(req EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeScimProvisionAndInviteUserRequest(req ScimProvisionAndInviteUserApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeScimSetInformationForProvisionedUserRequest(req ScimSetInformationForProvisionedUserApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeScimUpdateAttributeForUserRequest(req ScimUpdateAttributeForUserRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeTeamsUpdateLegacyRequest(req TeamsUpdateLegacyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsCreateDiscussionLegacyRequest(req TeamsCreateDiscussionLegacyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsUpdateDiscussionLegacyRequest(req *TeamsUpdateDiscussionLegacyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsCreateDiscussionCommentLegacyRequest(req TeamsCreateDiscussionCommentLegacyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsUpdateDiscussionCommentLegacyRequest(req TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReactionsCreateForTeamDiscussionCommentLegacyRequest(req ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReactionsCreateForTeamDiscussionLegacyRequest(req ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsAddOrUpdateMembershipForUserLegacyRequest(req *TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsAddOrUpdateProjectPermissionsLegacyRequest(req *TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsAddOrUpdateRepoPermissionsLegacyRequest(req *TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeTeamsCreateOrUpdateIdpGroupConnectionsLegacyRequest(req TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeUsersUpdateAuthenticatedRequest(req *UsersUpdateAuthenticatedApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeUsersSetPrimaryEmailVisibilityForAuthenticatedRequest(req UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeUsersAddEmailForAuthenticatedRequest(req UsersAddEmailForAuthenticatedRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeUsersDeleteEmailForAuthenticatedRequest(req UsersDeleteEmailForAuthenticatedRequest) ([]byte, string, error) {
	switch req := req.(type) {
	default:
		return nil, "", fmt.Errorf("unexpected request type: %T", req)
	}
}

func encodeUsersCreateGpgKeyForAuthenticatedRequest(req UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeInteractionsSetRestrictionsForAuthenticatedUserRequest(req InteractionLimit) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeUsersCreatePublicSSHKeyForAuthenticatedRequest(req UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeOrgsUpdateMembershipForAuthenticatedUserRequest(req OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeMigrationsStartForAuthenticatedUserRequest(req MigrationsStartForAuthenticatedUserApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeProjectsCreateForAuthenticatedUserRequest(req ProjectsCreateForAuthenticatedUserApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}

func encodeReposCreateForAuthenticatedUserRequest(req ReposCreateForAuthenticatedUserApplicationJSONRequest) ([]byte, string, error) {
	b, err := json.Marshal(req)
	if err != nil {
		return nil, "", err
	}

	return b, "application/json", nil
}
