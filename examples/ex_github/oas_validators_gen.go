// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func (s *ActionsCreateOrUpdateOrgSecretApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListArtifactsForRepo) Validate() error {
	var failures []validate.FieldError
	if s.Artifacts == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "artifacts",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListEnvironmentSecrets) Validate() error {
	var failures []validate.FieldError
	if s.Secrets == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "secrets",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListOrgSecrets) Validate() error {
	var failures []validate.FieldError
	if s.Secrets == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "secrets",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListRepoAccessToSelfHostedRunnerGroupInOrg) Validate() error {
	var failures []validate.FieldError
	if s.Repositories == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "repositories",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListRepoSecrets) Validate() error {
	var failures []validate.FieldError
	if s.Secrets == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "secrets",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListRepoWorkflows) Validate() error {
	var failures []validate.FieldError
	if s.Workflows == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "workflows",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListSelectedReposForOrgSecret) Validate() error {
	var failures []validate.FieldError
	if s.Repositories == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "repositories",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListSelectedRepositoriesEnabledGithubActionsOrganization) Validate() error {
	var failures []validate.FieldError
	if s.Repositories == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "repositories",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListSelfHostedRunnerGroupsForOrg) Validate() error {
	var failures []validate.FieldError
	if s.RunnerGroups == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "runner_groups",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListSelfHostedRunnersForOrg) Validate() error {
	var failures []validate.FieldError
	if s.Runners == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "runners",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListSelfHostedRunnersForRepo) Validate() error {
	var failures []validate.FieldError
	if s.Runners == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "runners",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListSelfHostedRunnersInGroupForOrg) Validate() error {
	var failures []validate.FieldError
	if s.Runners == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "runners",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsListWorkflowRunArtifacts) Validate() error {
	var failures []validate.FieldError
	if s.Artifacts == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "artifacts",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsReviewPendingDeploymentsForRunApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.EnvironmentIds == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "environment_ids",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.SelectedRepositoryIds == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "selected_repository_ids",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsSetSelectedReposForOrgSecretApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.SelectedRepositoryIds == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "selected_repository_ids",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.SelectedRepositoryIds == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "selected_repository_ids",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Runners == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "runners",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *AppsCreateContentAttachmentApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	{
		// Validate 'body' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    262144,
			MaxLengthSet: true,
		}
		if err := validator.Validate(string(s.Body)); err != nil {
			failures = append(failures, validate.FieldError{Name: "body", Error: err})
		}
	}
	{
		// Validate 'title' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    1024,
			MaxLengthSet: true,
		}
		if err := validator.Validate(string(s.Title)); err != nil {
			failures = append(failures, validate.FieldError{Name: "title", Error: err})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *AppsCreateInstallationAccessTokenApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *AppsListInstallationReposForAuthenticatedUserOK) Validate() error {
	var failures []validate.FieldError
	if s.Repositories == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "repositories",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *AppsListReposAccessibleToInstallationOK) Validate() error {
	var failures []validate.FieldError
	if s.Repositories == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "repositories",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *AppsScopeTokenApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *BranchProtectionRequiredStatusChecks) Validate() error {
	var failures []validate.FieldError
	if s.Contexts == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "contexts",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ChecksListSuitesForRef) Validate() error {
	var failures []validate.FieldError
	if s.CheckSuites == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "check_suites",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CodeScanningUpdateAlertApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CodeScanningUploadSarifApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise) Validate() error {
	var failures []validate.FieldError
	if s.Organizations == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "organizations",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise) Validate() error {
	var failures []validate.FieldError
	if s.Organizations == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "organizations",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise) Validate() error {
	var failures []validate.FieldError
	if s.RunnerGroups == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "runner_groups",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminListSelfHostedRunnersForEnterprise) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise) Validate() error {
	var failures []validate.FieldError
	if s.Runners == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "runners",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Schemas == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "schemas",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Emails == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "emails",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Schemas == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "schemas",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Schemas == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "schemas",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Emails == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "emails",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Schemas == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "schemas",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.SelectedOrganizationIds == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "selected_organization_ids",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.SelectedOrganizationIds == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "selected_organization_ids",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Runners == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "runners",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Operations == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "Operations",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Schemas == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "schemas",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *FullRepositorySecurityAndAnalysis) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurity) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *FullRepositorySecurityAndAnalysisSecretScanning) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GistsCreateCommentApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	{
		// Validate 'body' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
		}
		if err := validator.Validate(string(s.Body)); err != nil {
			failures = append(failures, validate.FieldError{Name: "body", Error: err})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GistsUpdateCommentApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	{
		// Validate 'body' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
		}
		if err := validator.Validate(string(s.Body)); err != nil {
			failures = append(failures, validate.FieldError{Name: "body", Error: err})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GitCreateTagApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GitCreateTreeApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Tree == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "tree",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GitCreateTreeApplicationJSONRequestTreeItem) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GitRefObject) Validate() error {
	var failures []validate.FieldError
	{
		// Validate 'sha' field.
		validator := validate.String{
			MinLength:    40,
			MinLengthSet: true,
			MaxLength:    40,
			MaxLengthSet: true,
		}
		if err := validator.Validate(string(s.Sha)); err != nil {
			failures = append(failures, validate.FieldError{Name: "sha", Error: err})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IssuesCreateMilestoneApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IssuesLockApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IssuesUpdateMilestoneApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *JobStepsItem) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MarkdownRenderApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MarketplacePurchaseMarketplacePendingChange) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MarketplacePurchaseMarketplacePurchase) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MigrationsSetLfsPreferenceApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MigrationsStartForAuthenticatedUserApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Repositories == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "repositories",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MigrationsStartForOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Repositories == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "repositories",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MigrationsStartImportApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *OrgsCreateInvitationApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *OrgsSetMembershipForUserApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *OrgsUpdateApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ProjectsAddCollaboratorApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ProjectsUpdateApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ProtectedBranchRequiredPullRequestReviews) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) Validate() error {
	var failures []validate.FieldError
	if s.Teams == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "teams",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Users == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "users",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PullsCreateReviewApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PullsCreateReviewCommentApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PullsMergeApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PullsRemoveRequestedReviewersApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Reviewers == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "reviewers",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PullsSubmitReviewApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PullsUpdateApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReactionsCreateForCommitCommentApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReactionsCreateForIssueApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReactionsCreateForIssueCommentApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReactionsCreateForReleaseApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposAddCollaboratorApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposCreateCommitStatusApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposCreateDeploymentStatusApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposCreateDispatchEventApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	{
		// Validate 'event_type' field.
		validator := validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
		}
		if err := validator.Validate(string(s.EventType)); err != nil {
			failures = append(failures, validate.FieldError{Name: "event_type", Error: err})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposCreateInOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposCreatePagesSiteApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposCreatePagesSiteApplicationJSONRequestSource) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposReplaceAllTopicsApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Names == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "names",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposUpdateApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposUpdateBranchProtectionApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks) Validate() error {
	var failures []validate.FieldError
	if s.Contexts == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "contexts",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposUpdateBranchProtectionApplicationJSONRequestRestrictions) Validate() error {
	var failures []validate.FieldError
	if s.Teams == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "teams",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Users == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "users",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReposUpdateInvitationApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *RunnerLabelsItem) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ScimGroupListEnterpriseResourcesItem) Validate() error {
	var failures []validate.FieldError
	if s.Schemas == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "schemas",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ScimProvisionAndInviteUserApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Emails == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "emails",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ScimSetInformationForProvisionedUserApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Emails == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "emails",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ScimUserListEnterpriseResourcesItem) Validate() error {
	var failures []validate.FieldError
	if s.Schemas == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "schemas",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SecretScanningUpdateAlertApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamsCreateApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if s.Groups == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "groups",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamsUpdateInOrgApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamsUpdateLegacyApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsEnterprisePermissions) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsOrganizationPermissions) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ActionsRepositoryPermissions) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *AppPermissions) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ApplicationGrant) Validate() error {
	var failures []validate.FieldError
	if s.Scopes == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "scopes",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *AuthenticationToken) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Authorization) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *BranchProtection) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *BranchRestrictionPolicy) Validate() error {
	var failures []validate.FieldError
	if s.Apps == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "apps",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Teams == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "teams",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Users == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "users",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *BranchWithProtection) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CheckRun) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CheckSuite) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CodeScanningAlertInstance) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CodeScanningAnalysis) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CodeScanningSarifsStatus) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CombinedCommitStatus) Validate() error {
	var failures []validate.FieldError
	if s.Statuses == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "statuses",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Commit) Validate() error {
	var failures []validate.FieldError
	if s.Parents == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "parents",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CommitActivity) Validate() error {
	var failures []validate.FieldError
	if s.Days == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "days",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CommitComment) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *CommitComparison) Validate() error {
	var failures []validate.FieldError
	if s.Commits == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "commits",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ContentReferenceAttachment) Validate() error {
	var failures []validate.FieldError
	{
		// Validate 'body' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    262144,
			MaxLengthSet: true,
		}
		if err := validator.Validate(string(s.Body)); err != nil {
			failures = append(failures, validate.FieldError{Name: "body", Error: err})
		}
	}
	{
		// Validate 'title' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    1024,
			MaxLengthSet: true,
		}
		if err := validator.Validate(string(s.Title)); err != nil {
			failures = append(failures, validate.FieldError{Name: "title", Error: err})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ContributorActivity) Validate() error {
	var failures []validate.FieldError
	if s.Weeks == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "weeks",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DeploymentSimple) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DeploymentStatus) Validate() error {
	var failures []validate.FieldError
	{
		// Validate 'description' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    140,
			MaxLengthSet: true,
		}
		if err := validator.Validate(string(s.Description)); err != nil {
			failures = append(failures, validate.FieldError{Name: "description", Error: err})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *DiffEntry) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *EnvironmentApprovals) Validate() error {
	var failures []validate.FieldError
	if s.Environments == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "environments",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *FullRepository) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GistComment) Validate() error {
	var failures []validate.FieldError
	{
		// Validate 'body' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
		}
		if err := validator.Validate(string(s.Body)); err != nil {
			failures = append(failures, validate.FieldError{Name: "body", Error: err})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GitCommit) Validate() error {
	var failures []validate.FieldError
	if s.Parents == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "parents",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GitRef) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GitTree) Validate() error {
	var failures []validate.FieldError
	if s.Tree == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "tree",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *GpgKey) Validate() error {
	var failures []validate.FieldError
	if s.Emails == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "emails",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Subkeys == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "subkeys",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Import) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *InstallationToken) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Integration) Validate() error {
	var failures []validate.FieldError
	if s.Events == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "events",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *InteractionLimit) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *InteractionLimitResponse) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *IssueComment) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Job) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *License) Validate() error {
	var failures []validate.FieldError
	if s.Conditions == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "conditions",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Limitations == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "limitations",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Permissions == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "permissions",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MarketplaceListingPlan) Validate() error {
	var failures []validate.FieldError
	if s.Bullets == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "bullets",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MarketplacePurchase) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *MergedUpstream) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Migration) Validate() error {
	var failures []validate.FieldError
	if s.Repositories == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "repositories",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Milestone) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *NullableIntegration) Validate() error {
	var failures []validate.FieldError
	if s.Events == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "events",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *NullableScopedInstallation) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *OrgHook) Validate() error {
	var failures []validate.FieldError
	if s.Events == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "events",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *OrgMembership) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *OrganizationActionsSecret) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Page) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PagesHTTPSCertificate) Validate() error {
	var failures []validate.FieldError
	if s.Domains == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "domains",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ParticipationStats) Validate() error {
	var failures []validate.FieldError
	if s.All == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "all",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Owner == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "owner",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Project) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ProtectedBranch) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ProtectedBranchPullRequestReview) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PullRequestReview) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PullRequestReviewComment) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *PullRequestReviewRequest) Validate() error {
	var failures []validate.FieldError
	if s.Teams == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "teams",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Users == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "users",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Reaction) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Release) Validate() error {
	var failures []validate.FieldError
	if s.Assets == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "assets",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReleaseAsset) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *RepositoryInvitation) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ReviewComment) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Runner) Validate() error {
	var failures []validate.FieldError
	if s.Labels == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "labels",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ScimEnterpriseGroup) Validate() error {
	var failures []validate.FieldError
	if s.Schemas == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "schemas",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ScimEnterpriseUser) Validate() error {
	var failures []validate.FieldError
	if s.Schemas == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "schemas",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ScimGroupListEnterprise) Validate() error {
	var failures []validate.FieldError
	if s.Resources == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "Resources",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Schemas == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "schemas",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ScimUserListEnterprise) Validate() error {
	var failures []validate.FieldError
	if s.Resources == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "Resources",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if s.Schemas == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "schemas",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SecretScanningAlert) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *ShortBranch) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *StatusCheckPolicy) Validate() error {
	var failures []validate.FieldError
	if s.Contexts == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "contexts",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamFull) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *TeamMembership) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Topic) Validate() error {
	var failures []validate.FieldError
	if s.Names == nil {
		return &validate.Error{
			Fields: append(failures, validate.FieldError{
				Name:  "names",
				Error: fmt.Errorf("required, can't be nil"),
			}),
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *UserMarketplacePurchase) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Workflow) Validate() error {
	var failures []validate.FieldError
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
