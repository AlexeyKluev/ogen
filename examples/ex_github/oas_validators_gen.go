// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-faster/errors"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func (s ActionsCreateOrUpdateEnvironmentSecretReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexp.MustCompile(`^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$`),
		}).Validate(string(s.EncryptedValue)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "encrypted_value",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsCreateOrUpdateOrgSecretReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.EncryptedValue // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "encrypted_value",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Visibility // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsCreateOrUpdateRepoSecretReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.EncryptedValue // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "encrypted_value",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsCreateSelfHostedRunnerGroupForOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Visibility // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsEnterprisePermissions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.EnabledOrganizations // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enabled_organizations",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AllowedActions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListArtifactsForRepoOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Artifacts == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Artifacts // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "artifacts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListEnvironmentSecretsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Secrets == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Secrets // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secrets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListJobsForWorkflowRunOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Jobs == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Jobs {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "jobs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListOrgSecretsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Secrets == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Secrets {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secrets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Repositories // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListRepoSecretsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Secrets == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Secrets // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secrets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListRepoWorkflowsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Workflows == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Workflows {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "workflows",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelectedReposForOrgSecretOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Repositories // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Repositories // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelfHostedRunnerGroupsForOrgOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.RunnerGroups == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.RunnerGroups // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runner_groups",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelfHostedRunnersForOrgOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Runners == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Runners {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelfHostedRunnersForRepoOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Runners == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Runners {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListSelfHostedRunnersInGroupForOrgOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Runners == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Runners {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListWorkflowRunArtifactsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Artifacts == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Artifacts // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "artifacts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsListWorkflowRunsForRepoOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.WorkflowRuns == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.WorkflowRuns // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "workflow_runs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsOrganizationPermissions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.EnabledRepositories // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enabled_repositories",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AllowedActions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsRepositoryPermissions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.AllowedActions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsReviewPendingDeploymentsForRunReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.EnvironmentIds == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.EnvironmentIds // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "environment_ids",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsSetGithubActionsPermissionsOrganizationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.EnabledRepositories // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enabled_repositories",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AllowedActions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsSetGithubActionsPermissionsRepositoryReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.AllowedActions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SelectedRepositoryIds == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.SelectedRepositoryIds // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selected_repository_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsSetSelectedReposForOrgSecretReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SelectedRepositoryIds == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.SelectedRepositoryIds // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selected_repository_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SelectedRepositoryIds == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.SelectedRepositoryIds // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selected_repository_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsSetSelfHostedRunnersInGroupForOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Runners == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Runners // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActionsUpdateSelfHostedRunnerGroupForOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Visibility // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ActivityListPublicEventsForRepoNetworkOKApplicationJSON) Validate() error {
	return nil
}
func (s ActivityListPublicEventsOKApplicationJSON) Validate() error {
	return nil
}
func (s ActivityListReposStarredByAuthenticatedUserOKApplicationJSON) Validate() error {
	return nil
}
func (s ActivityListWatchedReposForAuthenticatedUserOKApplicationJSON) Validate() error {
	return nil
}
func (s AppPermissions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Actions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "actions",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Administration // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "administration",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Checks // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "checks",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.ContentReferences // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_references",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Contents // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contents",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Deployments // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deployments",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Environments // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "environments",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Issues // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issues",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Metadata // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "metadata",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Packages // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "packages",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Pages // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pages",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.PullRequests // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pull_requests",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.RepositoryHooks // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repository_hooks",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.RepositoryProjects // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repository_projects",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.SecretScanningAlerts // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secret_scanning_alerts",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Secrets // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secrets",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.SecurityEvents // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "security_events",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.SingleFile // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "single_file",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Statuses // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "statuses",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.VulnerabilityAlerts // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vulnerability_alerts",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Workflows // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "workflows",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Members // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "members",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.OrganizationAdministration // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_administration",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.OrganizationHooks // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_hooks",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.OrganizationPlan // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_plan",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.OrganizationProjects // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_projects",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.OrganizationPackages // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_packages",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.OrganizationSecrets // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_secrets",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.OrganizationSelfHostedRunners // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_self_hosted_runners",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.OrganizationUserBlocking // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_user_blocking",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.TeamDiscussions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "team_discussions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ApplicationGrant) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Scopes == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Scopes // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppsCreateContentAttachmentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    1024,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Title)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "title",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    262144,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Body)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "body",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppsCreateInstallationAccessTokenReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Permissions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppsListAccountsForPlanStubbedOKApplicationJSON) Validate() error {
	return nil
}
func (s AppsListInstallationReposForAuthenticatedUserOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Repositories // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppsListPlansOKApplicationJSON) Validate() error {
	return nil
}
func (s AppsListPlansStubbedOKApplicationJSON) Validate() error {
	return nil
}
func (s AppsListReposAccessibleToInstallationOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Repositories // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AppsListSubscriptionsForAuthenticatedUserOKApplicationJSON) Validate() error {
	return nil
}
func (s AppsListSubscriptionsForAuthenticatedUserStubbedOKApplicationJSON) Validate() error {
	return nil
}
func (s AppsScopeTokenReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Permissions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AuthenticationToken) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.RepositorySelection // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repository_selection",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Authorization) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Installation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "installation",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s AutoMerge) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.MergeMethod // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merge_method",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s BranchProtection) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.RequiredStatusChecks // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_status_checks",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.RequiredPullRequestReviews // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_pull_request_reviews",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Restrictions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "restrictions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s BranchProtectionRequiredStatusChecks) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Contexts == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Contexts // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contexts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s BranchRestrictionPolicy) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Users // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if err := func() error {
		if s.Teams == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Teams // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if err := func() error {
		if s.Apps == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Apps // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apps",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s BranchWithProtection) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Commit.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commit",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Protection.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "protection",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CheckRun) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Conclusion // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "conclusion",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.App // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "app",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Deployment // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deployment",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CheckSuite) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Conclusion // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "conclusion",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.App // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ChecksCreateSuiteApplicationJSONCreated) Validate() error {
	return nil
}
func (s ChecksCreateSuiteApplicationJSONOK) Validate() error {
	return nil
}
func (s ChecksListForRefOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.CheckRuns == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.CheckRuns {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "check_runs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ChecksListForSuiteOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.CheckRuns == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.CheckRuns {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "check_runs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ChecksListSuitesForRefOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.CheckSuites == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.CheckSuites {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "check_suites",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CloneTraffic) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Clones == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Clones // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "clones",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeFrequencyStat) Validate() error {
	return nil
}
func (s CodeScanningAlert) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.DismissedReason // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dismissed_reason",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Rule.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.MostRecentInstance.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "most_recent_instance",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAlertInstance) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Classifications {
			if err := func() error {
				_ = elem // validation expected, but not supported
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "classifications",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAlertItems) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.DismissedReason // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dismissed_reason",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Rule.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.MostRecentInstance.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "most_recent_instance",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAlertRule) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Severity // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "severity",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.SecuritySeverityLevel // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "security_severity_level",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Tags // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tags",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAlertRuleSummary) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Severity // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "severity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAnalysis) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.CommitSha.Validate(); err != nil {
			return err
		}
		if err := (validate.String{
			MinLength:    40,
			MinLengthSet: true,
			MaxLength:    40,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        regexp.MustCompile(`^[0-9a-fA-F]+$`),
		}).Validate(string(s.CommitSha)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commit_sha",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningAnalysisCommitSha) Validate() error {
	return nil
}
func (s CodeScanningListAlertInstancesOKApplicationJSON) Validate() error {
	return nil
}
func (s CodeScanningListAlertsForRepoOKApplicationJSON) Validate() error {
	return nil
}
func (s CodeScanningListRecentAnalysesOKApplicationJSON) Validate() error {
	return nil
}
func (s CodeScanningSarifsStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.ProcessingStatus // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "processing_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningUpdateAlertReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.DismissedReason // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dismissed_reason",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeScanningUploadSarifReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.CommitSha.Validate(); err != nil {
			return err
		}
		if err := (validate.String{
			MinLength:    40,
			MinLengthSet: true,
			MaxLength:    40,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        regexp.MustCompile(`^[0-9a-fA-F]+$`),
		}).Validate(string(s.CommitSha)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commit_sha",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodeSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.TextMatches // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CodesOfConductGetAllCodesOfConductOKApplicationJSON) Validate() error {
	return nil
}
func (s CombinedCommitStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Statuses == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Statuses // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "statuses",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Commit) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Parents == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Parents // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "parents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CommitActivity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Days == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Days // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "days",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CommitComment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.AuthorAssociation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CommitComparison) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.BaseCommit.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "base_commit",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.MergeBaseCommit.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merge_base_commit",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Status // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if s.Commits == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Commits {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commits",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Files {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "files",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CommitSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Parents == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Parents // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "parents",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.TextMatches // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ContentReferenceAttachment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    1024,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Title)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "title",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    262144,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Body)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "body",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ContributorActivity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Weeks == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Weeks // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "weeks",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DeploymentSimple) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.PerformedViaGithubApp // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DeploymentStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    140,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Description)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.PerformedViaGithubApp // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s DiffEntry) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Email) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        true,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Email)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Visibility // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Organizations == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Organizations // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organizations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Organizations == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Organizations // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organizations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.RunnerGroups == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.RunnerGroups // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runner_groups",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminListSelfHostedRunnersForEnterpriseOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Runners {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Runners == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Runners {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminProvisionAndInviteEnterpriseGroupReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Schemas // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminProvisionAndInviteEnterpriseUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Schemas // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if err := func() error {
		if s.Emails == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Emails // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emails",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.EnabledOrganizations // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enabled_organizations",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AllowedActions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "allowed_actions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Schemas // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Schemas // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if err := func() error {
		if s.Emails == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Emails // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emails",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SelectedOrganizationIds == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.SelectedOrganizationIds // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selected_organization_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.SelectedOrganizationIds == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.SelectedOrganizationIds // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "selected_organization_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Runners == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Runners // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "runners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminUpdateAttributeForEnterpriseUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Schemas // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if err := func() error {
		if s.Operations == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Operations // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Operations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Visibility // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnvironmentApprovals) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Environments == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Environments // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "environments",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Event) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Payload.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payload",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EventPayload) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Issue // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issue",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Comment // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "comment",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FullRepository) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.SecurityAndAnalysis // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "security_and_analysis",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FullRepositorySecurityAndAnalysis) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.AdvancedSecurity // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "advanced_security",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.SecretScanning // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secret_scanning",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FullRepositorySecurityAndAnalysisAdvancedSecurity) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FullRepositorySecurityAndAnalysisSecretScanning) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GistComment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Body)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "body",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AuthorAssociation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GistSimple) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Forks // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forks",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.History // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "history",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GistSimpleForksItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.User // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "user",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GistsCreateCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Body)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "body",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GistsListCommentsOKApplicationJSON) Validate() error {
	return nil
}
func (s GistsListCommitsOKApplicationJSON) Validate() error {
	return nil
}
func (s GistsListForksOKApplicationJSON) Validate() error {
	return nil
}
func (s GistsListOKApplicationJSON) Validate() error {
	return nil
}
func (s GistsListStarredOKApplicationJSON) Validate() error {
	return nil
}
func (s GistsUpdateCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Body)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "body",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitCommit) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Parents == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Parents // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "parents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitCreateTagReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Type // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitCreateTreeReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Tree == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Tree {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tree",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitCreateTreeReqTreeItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Mode // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mode",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Type // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitRef) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Object.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "object",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitRefObject) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    40,
			MinLengthSet: true,
			MaxLength:    40,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Sha)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sha",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitTree) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Tree == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Tree // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tree",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GitignoreGetAllTemplatesOKApplicationJSON) Validate() error {
	return nil
}
func (s GpgKey) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Emails == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Emails // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emails",
			Error: err,
		})
	}
	if err := func() error {
		if s.Subkeys == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Subkeys // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subkeys",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Hook) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Events == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Events // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Hovercard) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Contexts == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Contexts // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contexts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Import) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s InstallationToken) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Permissions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.RepositorySelection // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repository_selection",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Integration) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Events == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Events // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s InteractionLimit) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Limit // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Expiry // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expiry",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s InteractionLimitResponse) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Limit // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssueComment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.AuthorAssociation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.PerformedViaGithubApp // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssueEvent) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Issue // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issue",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AuthorAssociation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.PerformedViaGithubApp // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssueSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Assignees // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if err := func() error {
		if s.Labels == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Labels // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "labels",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Milestone // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "milestone",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.TextMatches // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AuthorAssociation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.PerformedViaGithubApp // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssueSimple) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Labels == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Labels // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "labels",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Assignees // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Milestone // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "milestone",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AuthorAssociation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.PerformedViaGithubApp // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "performed_via_github_app",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssuesCreateMilestoneReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssuesListAssigneesOKApplicationJSON) Validate() error {
	return nil
}
func (s IssuesListCommentsOKApplicationJSON) Validate() error {
	return nil
}
func (s IssuesListLabelsForRepoOKApplicationJSON) Validate() error {
	return nil
}
func (s IssuesListLabelsOnIssueOKApplicationJSON) Validate() error {
	return nil
}
func (s IssuesListMilestonesOKApplicationJSON) Validate() error {
	return nil
}
func (s IssuesLockReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.LockReason // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lock_reason",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s IssuesRemoveLabelOKApplicationJSON) Validate() error {
	return nil
}
func (s IssuesUpdateMilestoneReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Job) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Steps {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "steps",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s JobStepsItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s LabelSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.TextMatches // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s License) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Permissions == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Permissions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if err := func() error {
		if s.Conditions == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Conditions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "conditions",
			Error: err,
		})
	}
	if err := func() error {
		if s.Limitations == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Limitations // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limitations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s LicensesGetAllCommonlyUsedOKApplicationJSON) Validate() error {
	return nil
}
func (s MarkdownRenderReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Mode // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mode",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MarketplaceAccount) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Email // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.OrganizationBillingEmail // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_billing_email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MarketplaceListingPlan) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Bullets == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Bullets // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bullets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MarketplacePurchase) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.MarketplacePendingChange // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "marketplace_pending_change",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.MarketplacePurchase.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "marketplace_purchase",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MarketplacePurchaseMarketplacePendingChange) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Plan // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MarketplacePurchaseMarketplacePurchase) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Plan // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MergedUpstream) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.MergeType // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merge_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Migration) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Repositories // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MigrationsGetCommitAuthorsOKApplicationJSON) Validate() error {
	return nil
}
func (s MigrationsListForAuthenticatedUserOKApplicationJSON) Validate() error {
	return nil
}
func (s MigrationsListReposForOrgOKApplicationJSON) Validate() error {
	return nil
}
func (s MigrationsListReposForUserOKApplicationJSON) Validate() error {
	return nil
}
func (s MigrationsSetLfsPreferenceReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.UseLfs // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "use_lfs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MigrationsStartForAuthenticatedUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Exclude {
			if err := func() error {
				_ = elem // validation expected, but not supported
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exclude",
			Error: err,
		})
	}
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Repositories // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MigrationsStartForOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Repositories == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Repositories // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repositories",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Exclude {
			if err := func() error {
				_ = elem // validation expected, but not supported
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exclude",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s MigrationsStartImportReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Vcs // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vcs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Milestone) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NullableIntegration) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Events == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Events // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NullableMilestone) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s NullableScopedInstallation) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Permissions.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.RepositorySelection // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "repository_selection",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OAuthAuthorizationsCreateAuthorizationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Scopes // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.ClientID // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_id",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.ClientSecret // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_secret",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    40,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ClientSecret)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_secret",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Scopes // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OAuthAuthorizationsGetOrCreateAuthorizationForAppReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    40,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ClientSecret)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_secret",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Scopes // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OAuthAuthorizationsListAuthorizationsOKApplicationJSON) Validate() error {
	return nil
}
func (s OAuthAuthorizationsListGrantsOKApplicationJSON) Validate() error {
	return nil
}
func (s OAuthAuthorizationsUpdateAuthorizationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Scopes // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "scopes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgHook) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Events == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Events // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgMembership) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Role // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrganizationActionsSecret) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Visibility // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrganizationFull) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Email // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.BillingEmail // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "billing_email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrganizationSecretScanningAlert) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Resolution // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resolution",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsCreateInvitationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Role // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsListBlockedUsersOKApplicationJSON) Validate() error {
	return nil
}
func (s OrgsListFailedInvitationsOKApplicationJSON) Validate() error {
	return nil
}
func (s OrgsListForAuthenticatedUserOKApplicationJSON) Validate() error {
	return nil
}
func (s OrgsListInvitationTeamsOKApplicationJSON) Validate() error {
	return nil
}
func (s OrgsListOKApplicationJSON) Validate() error {
	return nil
}
func (s OrgsListPendingInvitationsOKApplicationJSON) Validate() error {
	return nil
}
func (s OrgsListWebhooksOKApplicationJSON) Validate() error {
	return nil
}
func (s OrgsSetMembershipForUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Role // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsUpdateMembershipForAuthenticatedUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OrgsUpdateReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.DefaultRepositoryPermission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_repository_permission",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.MembersAllowedRepositoryCreationType // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "members_allowed_repository_creation_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Package) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.PackageType // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "package_type",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Visibility // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PackageVersion) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Metadata // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "metadata",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PackageVersionMetadata) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.PackageType // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "package_type",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Container // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "container",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PackageVersionMetadataContainer) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Tags == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Tags // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tags",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOKApplicationJSON) Validate() error {
	return nil
}
func (s PackagesGetAllPackageVersionsForPackageOwnedByOrgOKApplicationJSON) Validate() error {
	return nil
}
func (s PackagesGetAllPackageVersionsForPackageOwnedByUserOKApplicationJSON) Validate() error {
	return nil
}
func (s PackagesListPackagesForOrganizationOKApplicationJSON) Validate() error {
	return nil
}
func (s PackagesListPackagesForUserOKApplicationJSON) Validate() error {
	return nil
}
func (s Page) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Status // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.ProtectedDomainState // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "protected_domain_state",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.HTTPSCertificate // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "https_certificate",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PagesHTTPSCertificate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Domains == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Domains // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "domains",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ParticipationStats) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.All == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.All // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "all",
			Error: err,
		})
	}
	if err := func() error {
		if s.Owner == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Owner // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "owner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PrivateUser) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Email // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Project) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.OrganizationPermission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProjectsAddCollaboratorReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Permission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProjectsListCardsOKApplicationJSON) Validate() error {
	return nil
}
func (s ProjectsListColumnsOKApplicationJSON) Validate() error {
	return nil
}
func (s ProjectsListForOrgOKApplicationJSON) Validate() error {
	return nil
}
func (s ProjectsListForRepoOKApplicationJSON) Validate() error {
	return nil
}
func (s ProjectsMoveCardReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexp.MustCompile(`^(?:top|bottom|after:\d+)$`),
		}).Validate(string(s.Position)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "position",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProjectsMoveColumnReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexp.MustCompile(`^(?:first|last|after:\d+)$`),
		}).Validate(string(s.Position)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "position",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProjectsUpdateReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.OrganizationPermission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization_permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProtectedBranch) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.RequiredStatusChecks // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_status_checks",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.RequiredPullRequestReviews // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_pull_request_reviews",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Restrictions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "restrictions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProtectedBranchPullRequestReview) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.RequiredApprovingReviewCount // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_approving_review_count",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProtectedBranchRequiredPullRequestReviews) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.DismissalRestrictions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dismissal_restrictions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Users // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if err := func() error {
		if s.Teams == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Teams // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PublicUser) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Email // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Labels == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Labels // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "labels",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Milestone // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "milestone",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Assignees // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.RequestedReviewers // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requested_reviewers",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.RequestedTeams // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requested_teams",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AuthorAssociation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AutoMerge // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_merge",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullRequestReview) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.AuthorAssociation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullRequestReviewComment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.AuthorAssociation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.StartSide // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start_side",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Side // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "side",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullRequestReviewRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Users // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if err := func() error {
		if s.Teams == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Teams // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullRequestSimple) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Labels == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Labels // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "labels",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Milestone // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "milestone",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Assignees // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assignees",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.RequestedReviewers // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requested_reviewers",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.RequestedTeams // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "requested_teams",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AuthorAssociation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.AutoMerge // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auto_merge",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsCreateReviewCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Side // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "side",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.StartSide // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start_side",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsCreateReviewReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Event // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsListCommentsForReviewOKApplicationJSON) Validate() error {
	return nil
}
func (s PullsMergeReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.MergeMethod // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merge_method",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsRemoveRequestedReviewersReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Reviewers == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Reviewers // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reviewers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsSubmitReviewReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Event // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s PullsUpdateReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Reaction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Content // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForCommitCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Content // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForIssueCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Content // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForIssueReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Content // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForPullRequestReviewCommentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Content // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForReleaseReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Content // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated) Validate() error {
	return nil
}
func (s ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK) Validate() error {
	return nil
}
func (s ReactionsCreateForTeamDiscussionCommentInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Content // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForTeamDiscussionCommentLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Content // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated) Validate() error {
	return nil
}
func (s ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK) Validate() error {
	return nil
}
func (s ReactionsCreateForTeamDiscussionInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Content // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsCreateForTeamDiscussionLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Content // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReactionsListForCommitCommentOKApplicationJSON) Validate() error {
	return nil
}
func (s ReactionsListForIssueCommentOKApplicationJSON) Validate() error {
	return nil
}
func (s ReactionsListForIssueOKApplicationJSON) Validate() error {
	return nil
}
func (s ReactionsListForPullRequestReviewCommentOKApplicationJSON) Validate() error {
	return nil
}
func (s Release) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Assets == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Assets {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReleaseAsset) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RepoSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.TextMatches // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposAddCollaboratorReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Permission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateCommitStatusReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateDeploymentStatusReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Environment // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "environment",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateDispatchEventReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.EventType)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Visibility // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateOrUpdateEnvironmentReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Reviewers // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reviewers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreateOrUpdateEnvironmentReqReviewersItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Type // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreatePagesSiteReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Source.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "source",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposCreatePagesSiteReqSource) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Path // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "path",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposGetAllStatusCheckContextsOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposGetAppsWithAccessToProtectedBranchOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposGetCodeFrequencyStatsOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposGetCommitActivityStatsOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposGetContributorsStatsOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposGetPunchCardStatsOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposGetTeamsWithAccessToProtectedBranchOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposGetTopPathsOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposGetTopReferrersOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposGetUsersWithAccessToProtectedBranchOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposListBranchesOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposListCollaboratorsOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposListCommitStatusesForRefOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposListCommitsOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposListContributorsOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposListDeploymentStatusesOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposListForksOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposListInvitationsForAuthenticatedUserOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposListReleasesOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposListWebhooksOKApplicationJSON) Validate() error {
	return nil
}
func (s ReposReplaceAllTopicsReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Names == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Names // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "names",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateBranchProtectionReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.RequiredStatusChecks // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_status_checks",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Restrictions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "restrictions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateBranchProtectionReqRequiredStatusChecks) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Contexts == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Contexts // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contexts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateBranchProtectionReqRestrictions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Users // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "users",
			Error: err,
		})
	}
	if err := func() error {
		if s.Teams == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Teams // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "teams",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateInvitationReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Permissions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReposUpdateReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Visibility // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RepositoryInvitation) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Permissions // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permissions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ReviewComment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.AuthorAssociation // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "author_association",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Side // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "side",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.StartSide // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "start_side",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Runner) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Labels == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Labels {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "labels",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RunnerLabelsItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Type // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimEnterpriseGroup) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Schemas // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimEnterpriseUser) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Schemas // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimGroupListEnterprise) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Schemas // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if err := func() error {
		if s.Resources == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Resources {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Resources",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimGroupListEnterpriseResourcesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Schemas // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimProvisionAndInviteUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Emails == nil {
			return errors.New("required, can't be nil")
		}
		if err := (validate.Array{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    0,
			MaxLengthSet: false,
		}).ValidateLength(len(s.Emails)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emails",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimSetInformationForProvisionedUserReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Emails == nil {
			return errors.New("required, can't be nil")
		}
		if err := (validate.Array{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    0,
			MaxLengthSet: false,
		}).ValidateLength(len(s.Emails)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "emails",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimUserListEnterprise) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Schemas // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if err := func() error {
		if s.Resources == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Resources {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Resources",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScimUserListEnterpriseResourcesItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Schemas == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Schemas // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchCodeOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchCommitsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchIssuesAndPullRequestsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchLabelsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchReposOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchResultTextMatches) Validate() error {
	return nil
}
func (s SearchTopicsOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SearchUsersOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Items == nil {
			return errors.New("required, can't be nil")
		}
		var failures []validate.FieldError
		for i, elem := range s.Items {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "items",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SecretScanningAlert) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Resolution // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resolution",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SecretScanningListAlertsForOrgOKApplicationJSON) Validate() error {
	return nil
}
func (s SecretScanningListAlertsForRepoOKApplicationJSON) Validate() error {
	return nil
}
func (s SecretScanningUpdateAlertReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Resolution // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "resolution",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ShortBranch) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Protection // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "protection",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s StatusCheckPolicy) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Contexts == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Contexts // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contexts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamFull) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Privacy // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privacy",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Organization.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "organization",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamMembership) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Role // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateMembershipForUserInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Role // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateMembershipForUserLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Role // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateProjectPermissionsInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Permission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateProjectPermissionsLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Permission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateRepoPermissionsInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Permission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsAddOrUpdateRepoPermissionsLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Permission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Groups == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Groups // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "groups",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsCreateReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Privacy // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privacy",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Permission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsListForAuthenticatedUserOKApplicationJSON) Validate() error {
	return nil
}
func (s TeamsListMembersLegacyOKApplicationJSON) Validate() error {
	return nil
}
func (s TeamsListOKApplicationJSON) Validate() error {
	return nil
}
func (s TeamsListProjectsLegacyOKApplicationJSON) Validate() error {
	return nil
}
func (s TeamsListReposLegacyOKApplicationJSON) Validate() error {
	return nil
}
func (s TeamsUpdateInOrgReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Privacy // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privacy",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Permission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TeamsUpdateLegacyReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Privacy // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "privacy",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Permission // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "permission",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Topic) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Names == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Names // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "names",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TopicSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.TextMatches // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Related // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "related",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.Aliases // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "aliases",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UserMarketplacePurchase) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Account.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Plan.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UserSearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Email // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		_ = s.TextMatches // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "text_matches",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UsersCreatePublicSSHKeyForAuthenticatedReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexp.MustCompile(`^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) `),
		}).Validate(string(s.Key)); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "key",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UsersListBlockedByAuthenticatedOKApplicationJSON) Validate() error {
	return nil
}
func (s UsersListEmailsForAuthenticatedOKApplicationJSON) Validate() error {
	return nil
}
func (s UsersListFollowedByAuthenticatedOKApplicationJSON) Validate() error {
	return nil
}
func (s UsersListFollowersForAuthenticatedUserOKApplicationJSON) Validate() error {
	return nil
}
func (s UsersListGpgKeysForAuthenticatedOKApplicationJSON) Validate() error {
	return nil
}
func (s UsersListOKApplicationJSON) Validate() error {
	return nil
}
func (s UsersListPublicEmailsForAuthenticatedOKApplicationJSON) Validate() error {
	return nil
}
func (s UsersListPublicSSHKeysForAuthenticatedOKApplicationJSON) Validate() error {
	return nil
}
func (s UsersSetPrimaryEmailVisibilityForAuthenticatedReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.Visibility // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ViewTraffic) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Views == nil {
			return errors.New("required, can't be nil")
		}
		_ = s.Views // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "views",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Workflow) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		_ = s.State // validation expected, but not supported
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
