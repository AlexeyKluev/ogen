// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = math.Mod
	_ = validate.Int{}
)

func (s *ActionsCreateOrUpdateOrgSecretApplicationJSONRequest) validate() error {
	return nil
}
func (s *ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest) validate() error {
	return nil
}
func (s *ActionsEnterprisePermissions) validate() error {
	return nil
}
func (s *ActionsListOrgSecrets) validate() error {
	return nil
}
func (s *ActionsListRepoWorkflows) validate() error {
	return nil
}
func (s *ActionsListSelfHostedRunnersForOrg) validate() error {
	return nil
}
func (s *ActionsListSelfHostedRunnersForRepo) validate() error {
	return nil
}
func (s *ActionsListSelfHostedRunnersInGroupForOrg) validate() error {
	return nil
}
func (s *ActionsOrganizationPermissions) validate() error {
	return nil
}
func (s *ActionsRepositoryPermissions) validate() error {
	return nil
}
func (s *ActionsReviewPendingDeploymentsForRunApplicationJSONRequest) validate() error {
	return nil
}
func (s *ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest) validate() error {
	return nil
}
func (s *ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest) validate() error {
	return nil
}
func (s *ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest) validate() error {
	return nil
}
func (s *AppPermissions) validate() error {
	return nil
}
func (s *AppsCreateContentAttachmentApplicationJSONRequest) validate() error {
	{
		// Validate 'Body' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    262144,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.Body); err != nil {
			return err
		}
	}
	{
		// Validate 'Title' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    1024,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.Title); err != nil {
			return err
		}
	}
	return nil
}
func (s *AppsCreateInstallationAccessTokenApplicationJSONRequest) validate() error {
	return nil
}
func (s *AppsScopeTokenApplicationJSONRequest) validate() error {
	return nil
}
func (s *AuthenticationToken) validate() error {
	return nil
}
func (s *Authorization) validate() error {
	return nil
}
func (s *AutoMerge) validate() error {
	return nil
}
func (s *CheckRun) validate() error {
	return nil
}
func (s *CheckSuite) validate() error {
	return nil
}
func (s *ChecksListSuitesForRef) validate() error {
	return nil
}
func (s *CodeScanningAlert) validate() error {
	return nil
}
func (s *CodeScanningAlertInstance) validate() error {
	return nil
}
func (s *CodeScanningAlertRule) validate() error {
	return nil
}
func (s *CodeScanningAnalysis) validate() error {
	return nil
}
func (s *CodeScanningSarifsStatus) validate() error {
	return nil
}
func (s *CodeScanningUpdateAlertApplicationJSONRequest) validate() error {
	return nil
}
func (s *CodeScanningUploadSarifApplicationJSONRequest) validate() error {
	return nil
}
func (s *CommitComment) validate() error {
	return nil
}
func (s *CommitComparison) validate() error {
	return nil
}
func (s *ContentReferenceAttachment) validate() error {
	{
		// Validate 'Body' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    262144,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.Body); err != nil {
			return err
		}
	}
	{
		// Validate 'Title' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    1024,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.Title); err != nil {
			return err
		}
	}
	return nil
}
func (s *DeploymentStatus) validate() error {
	{
		// Validate 'Description' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    140,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.Description); err != nil {
			return err
		}
	}
	return nil
}
func (s *DiffEntry) validate() error {
	return nil
}
func (s *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) validate() error {
	return nil
}
func (s *EnterpriseAdminListSelfHostedRunnersForEnterprise) validate() error {
	return nil
}
func (s *EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise) validate() error {
	return nil
}
func (s *EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest) validate() error {
	return nil
}
func (s *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest) validate() error {
	return nil
}
func (s *EnvironmentApprovals) validate() error {
	return nil
}
func (s *Event) validate() error {
	return nil
}
func (s *EventPayload) validate() error {
	return nil
}
func (s *FullRepository) validate() error {
	return nil
}
func (s *FullRepositorySecurityAndAnalysis) validate() error {
	return nil
}
func (s *FullRepositorySecurityAndAnalysisAdvancedSecurity) validate() error {
	return nil
}
func (s *FullRepositorySecurityAndAnalysisSecretScanning) validate() error {
	return nil
}
func (s *GistComment) validate() error {
	{
		// Validate 'Body' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.Body); err != nil {
			return err
		}
	}
	return nil
}
func (s *GistsCreateCommentApplicationJSONRequest) validate() error {
	{
		// Validate 'Body' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.Body); err != nil {
			return err
		}
	}
	return nil
}
func (s *GistsUpdateCommentApplicationJSONRequest) validate() error {
	{
		// Validate 'Body' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    65535,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.Body); err != nil {
			return err
		}
	}
	return nil
}
func (s *GitCreateTagApplicationJSONRequest) validate() error {
	return nil
}
func (s *GitCreateTreeApplicationJSONRequest) validate() error {
	return nil
}
func (s *GitCreateTreeApplicationJSONRequestTreeItem) validate() error {
	return nil
}
func (s *GitRef) validate() error {
	return nil
}
func (s *GitRefObject) validate() error {
	{
		// Validate 'Sha' field.
		validator := validate.String{
			MinLength:    40,
			MinLengthSet: true,
			MaxLength:    40,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.Sha); err != nil {
			return err
		}
	}
	return nil
}
func (s *Import) validate() error {
	return nil
}
func (s *InstallationToken) validate() error {
	return nil
}
func (s *InteractionLimit) validate() error {
	return nil
}
func (s *InteractionLimitResponse) validate() error {
	return nil
}
func (s *IssueComment) validate() error {
	return nil
}
func (s *IssueEvent) validate() error {
	return nil
}
func (s *IssueSimple) validate() error {
	return nil
}
func (s *IssuesCreateMilestoneApplicationJSONRequest) validate() error {
	return nil
}
func (s *IssuesLockApplicationJSONRequest) validate() error {
	return nil
}
func (s *IssuesUpdateMilestoneApplicationJSONRequest) validate() error {
	return nil
}
func (s *Job) validate() error {
	return nil
}
func (s *JobStepsItem) validate() error {
	return nil
}
func (s *MarkdownRenderApplicationJSONRequest) validate() error {
	return nil
}
func (s *MergedUpstream) validate() error {
	return nil
}
func (s *MigrationsSetLfsPreferenceApplicationJSONRequest) validate() error {
	return nil
}
func (s *MigrationsStartForAuthenticatedUserApplicationJSONRequest) validate() error {
	return nil
}
func (s *MigrationsStartForOrgApplicationJSONRequest) validate() error {
	return nil
}
func (s *MigrationsStartImportApplicationJSONRequest) validate() error {
	return nil
}
func (s *Milestone) validate() error {
	return nil
}
func (s *NullableMilestone) validate() error {
	return nil
}
func (s *NullableScopedInstallation) validate() error {
	return nil
}
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONRequest) validate() error {
	{
		// Validate 'ClientSecret' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    40,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.ClientSecret); err != nil {
			return err
		}
	}
	return nil
}
func (s *OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONRequest) validate() error {
	{
		// Validate 'ClientSecret' field.
		validator := validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    40,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.ClientSecret); err != nil {
			return err
		}
	}
	return nil
}
func (s *OrgMembership) validate() error {
	return nil
}
func (s *OrganizationActionsSecret) validate() error {
	return nil
}
func (s *OrgsCreateInvitationApplicationJSONRequest) validate() error {
	return nil
}
func (s *OrgsSetMembershipForUserApplicationJSONRequest) validate() error {
	return nil
}
func (s *OrgsUpdateApplicationJSONRequest) validate() error {
	return nil
}
func (s *OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest) validate() error {
	return nil
}
func (s *Page) validate() error {
	return nil
}
func (s *PagesHTTPSCertificate) validate() error {
	return nil
}
func (s *Project) validate() error {
	return nil
}
func (s *ProjectsAddCollaboratorApplicationJSONRequest) validate() error {
	return nil
}
func (s *ProjectsUpdateApplicationJSONRequest) validate() error {
	return nil
}
func (s *PullRequest) validate() error {
	return nil
}
func (s *PullRequestReview) validate() error {
	return nil
}
func (s *PullRequestReviewComment) validate() error {
	return nil
}
func (s *PullRequestSimple) validate() error {
	return nil
}
func (s *PullsCreateReviewApplicationJSONRequest) validate() error {
	return nil
}
func (s *PullsCreateReviewCommentApplicationJSONRequest) validate() error {
	return nil
}
func (s *PullsMergeApplicationJSONRequest) validate() error {
	return nil
}
func (s *PullsSubmitReviewApplicationJSONRequest) validate() error {
	return nil
}
func (s *PullsUpdateApplicationJSONRequest) validate() error {
	return nil
}
func (s *Reaction) validate() error {
	return nil
}
func (s *ReactionsCreateForCommitCommentApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReactionsCreateForIssueApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReactionsCreateForIssueCommentApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReactionsCreateForReleaseApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest) validate() error {
	return nil
}
func (s *Release) validate() error {
	return nil
}
func (s *ReleaseAsset) validate() error {
	return nil
}
func (s *ReposAddCollaboratorApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReposCreateCommitStatusApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReposCreateDeploymentStatusApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReposCreateDispatchEventApplicationJSONRequest) validate() error {
	{
		// Validate 'EventType' field.
		validator := validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
		}
		if err := validator.Validate(s.EventType); err != nil {
			return err
		}
	}
	return nil
}
func (s *ReposCreateInOrgApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReposCreateOrUpdateEnvironmentApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReposCreateOrUpdateEnvironmentApplicationJSONRequestReviewersItem) validate() error {
	return nil
}
func (s *ReposCreatePagesSiteApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReposCreatePagesSiteApplicationJSONRequestSource) validate() error {
	return nil
}
func (s *ReposUpdateApplicationJSONRequest) validate() error {
	return nil
}
func (s *ReposUpdateInvitationApplicationJSONRequest) validate() error {
	return nil
}
func (s *RepositoryInvitation) validate() error {
	return nil
}
func (s *ReviewComment) validate() error {
	return nil
}
func (s *Runner) validate() error {
	return nil
}
func (s *RunnerLabelsItem) validate() error {
	return nil
}
func (s *ScimProvisionAndInviteUserApplicationJSONRequest) validate() error {
	return nil
}
func (s *ScimSetInformationForProvisionedUserApplicationJSONRequest) validate() error {
	return nil
}
func (s *SecretScanningAlert) validate() error {
	return nil
}
func (s *SecretScanningUpdateAlertApplicationJSONRequest) validate() error {
	return nil
}
func (s *TeamFull) validate() error {
	return nil
}
func (s *TeamMembership) validate() error {
	return nil
}
func (s *TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest) validate() error {
	return nil
}
func (s *TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest) validate() error {
	return nil
}
func (s *TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest) validate() error {
	return nil
}
func (s *TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest) validate() error {
	return nil
}
func (s *TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest) validate() error {
	return nil
}
func (s *TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest) validate() error {
	return nil
}
func (s *TeamsCreateApplicationJSONRequest) validate() error {
	return nil
}
func (s *TeamsUpdateInOrgApplicationJSONRequest) validate() error {
	return nil
}
func (s *TeamsUpdateLegacyApplicationJSONRequest) validate() error {
	return nil
}
func (s *UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest) validate() error {
	return nil
}
func (s *Workflow) validate() error {
	return nil
}
