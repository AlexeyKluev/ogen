// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/encoding/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

type APIOverview struct {
	API                              []string                      `json:"api"`
	Actions                          []string                      `json:"actions"`
	Dependabot                       []string                      `json:"dependabot"`
	Git                              []string                      `json:"git"`
	Hooks                            []string                      `json:"hooks"`
	Importer                         []string                      `json:"importer"`
	Packages                         []string                      `json:"packages"`
	Pages                            []string                      `json:"pages"`
	SSHKeyFingerprints               APIOverviewSSHKeyFingerprints `json:"ssh_key_fingerprints"`
	VerifiablePasswordAuthentication bool                          `json:"verifiable_password_authentication"`
	Web                              []string                      `json:"web"`
}

func (*APIOverview) metaGetResponse() {}

type APIOverviewSSHKeyFingerprints struct {
	SHA256DSA     string `json:"SHA256_DSA"`
	SHA256ECDSA   string `json:"SHA256_ECDSA"`
	SHA256ED25519 string `json:"SHA256_ED25519"`
	SHA256RSA     string `json:"SHA256_RSA"`
}

type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg struct{}

type ActionsAddSelectedRepoToOrgSecretConflict struct{}

func (*ActionsAddSelectedRepoToOrgSecretConflict) actionsAddSelectedRepoToOrgSecretResponse() {}

type ActionsAddSelectedRepoToOrgSecretNoContent struct{}

func (*ActionsAddSelectedRepoToOrgSecretNoContent) actionsAddSelectedRepoToOrgSecretResponse() {}

type ActionsAddSelfHostedRunnerToGroupForOrg struct{}

type ActionsApproveWorkflowRunCreated struct{}

func (*ActionsApproveWorkflowRunCreated) actionsApproveWorkflowRunResponse() {}

type ActionsBillingUsage struct {
	IncludedMinutes      int                                     `json:"included_minutes"`
	MinutesUsedBreakdown ActionsBillingUsageMinutesUsedBreakdown `json:"minutes_used_breakdown"`
	TotalMinutesUsed     int                                     `json:"total_minutes_used"`
	TotalPaidMinutesUsed int                                     `json:"total_paid_minutes_used"`
}

type ActionsBillingUsageMinutesUsedBreakdown struct {
	MACOS   int `json:"MACOS"`
	UBUNTU  int `json:"UBUNTU"`
	WINDOWS int `json:"WINDOWS"`
}

type ActionsCancelWorkflowRun struct{}

type ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest struct {
	EncryptedValue string `json:"encrypted_value"`
	KeyID          string `json:"key_id"`
}

type ActionsCreateOrUpdateEnvironmentSecretCreated struct{}

func (*ActionsCreateOrUpdateEnvironmentSecretCreated) actionsCreateOrUpdateEnvironmentSecretResponse() {
}

type ActionsCreateOrUpdateEnvironmentSecretNoContent struct{}

func (*ActionsCreateOrUpdateEnvironmentSecretNoContent) actionsCreateOrUpdateEnvironmentSecretResponse() {
}

type ActionsCreateOrUpdateOrgSecretApplicationJSONRequest struct {
	EncryptedValue        string   `json:"encrypted_value"`
	KeyID                 string   `json:"key_id"`
	SelectedRepositoryIds []string `json:"selected_repository_ids"`
	Visibility            string   `json:"visibility"`
}

type ActionsCreateOrUpdateOrgSecretCreated struct{}

func (*ActionsCreateOrUpdateOrgSecretCreated) actionsCreateOrUpdateOrgSecretResponse() {}

type ActionsCreateOrUpdateOrgSecretNoContent struct{}

func (*ActionsCreateOrUpdateOrgSecretNoContent) actionsCreateOrUpdateOrgSecretResponse() {}

type ActionsCreateOrUpdateRepoSecretApplicationJSONRequest struct {
	EncryptedValue string `json:"encrypted_value"`
	KeyID          string `json:"key_id"`
}

type ActionsCreateOrUpdateRepoSecretCreated struct{}

func (*ActionsCreateOrUpdateRepoSecretCreated) actionsCreateOrUpdateRepoSecretResponse() {}

type ActionsCreateOrUpdateRepoSecretNoContent struct{}

func (*ActionsCreateOrUpdateRepoSecretNoContent) actionsCreateOrUpdateRepoSecretResponse() {}

type ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest struct {
	Name                  string `json:"name"`
	Runners               []int  `json:"runners"`
	SelectedRepositoryIds []int  `json:"selected_repository_ids"`
	Visibility            string `json:"visibility"`
}

type ActionsDeleteArtifact struct{}

type ActionsDeleteEnvironmentSecret struct{}

type ActionsDeleteOrgSecret struct{}

type ActionsDeleteRepoSecret struct{}

type ActionsDeleteSelfHostedRunnerFromOrg struct{}

type ActionsDeleteSelfHostedRunnerFromRepo struct{}

type ActionsDeleteSelfHostedRunnerGroupFromOrg struct{}

type ActionsDeleteWorkflowRun struct{}

type ActionsDeleteWorkflowRunLogs struct{}

type ActionsDisableSelectedRepositoryGithubActionsOrganization struct{}

type ActionsDownloadArtifact struct{}

type ActionsDownloadJobLogsForWorkflowRun struct{}

type ActionsDownloadWorkflowRunLogs struct{}

type ActionsEnableSelectedRepositoryGithubActionsOrganization struct{}

type ActionsEnterprisePermissions struct {
	AllowedActions           string `json:"allowed_actions"`
	EnabledOrganizations     string `json:"enabled_organizations"`
	SelectedActionsURL       string `json:"selected_actions_url"`
	SelectedOrganizationsURL string `json:"selected_organizations_url"`
}

type ActionsListArtifactsForRepo struct {
	Artifacts  []Artifact `json:"artifacts"`
	TotalCount int        `json:"total_count"`
}

type ActionsListEnvironmentSecrets struct {
	Secrets    []ActionsSecret `json:"secrets"`
	TotalCount int             `json:"total_count"`
}

type ActionsListJobsForWorkflowRun struct {
	Jobs       []Job `json:"jobs"`
	TotalCount int   `json:"total_count"`
}

type ActionsListOrgSecrets struct {
	Secrets    []OrganizationActionsSecret `json:"secrets"`
	TotalCount int                         `json:"total_count"`
}

type ActionsListRepoAccessToSelfHostedRunnerGroupInOrg struct {
	Repositories []MinimalRepository `json:"repositories"`
	TotalCount   float               `json:"total_count"`
}

type ActionsListRepoSecrets struct {
	Secrets    []ActionsSecret `json:"secrets"`
	TotalCount int             `json:"total_count"`
}

type ActionsListRepoWorkflows struct {
	TotalCount int        `json:"total_count"`
	Workflows  []Workflow `json:"workflows"`
}

type ActionsListSelectedReposForOrgSecret struct {
	Repositories []MinimalRepository `json:"repositories"`
	TotalCount   int                 `json:"total_count"`
}

type ActionsListSelectedRepositoriesEnabledGithubActionsOrganization struct {
	Repositories []Repository `json:"repositories"`
	TotalCount   float        `json:"total_count"`
}

type ActionsListSelfHostedRunnerGroupsForOrg struct {
	RunnerGroups []RunnerGroupsOrg `json:"runner_groups"`
	TotalCount   float             `json:"total_count"`
}

type ActionsListSelfHostedRunnersForOrg struct {
	Runners    []Runner `json:"runners"`
	TotalCount int      `json:"total_count"`
}

type ActionsListSelfHostedRunnersForRepo struct {
	Runners    []Runner `json:"runners"`
	TotalCount int      `json:"total_count"`
}

type ActionsListSelfHostedRunnersInGroupForOrg struct {
	Runners    []Runner `json:"runners"`
	TotalCount float    `json:"total_count"`
}

type ActionsListWorkflowRunArtifacts struct {
	Artifacts  []Artifact `json:"artifacts"`
	TotalCount int        `json:"total_count"`
}

type ActionsListWorkflowRunsForRepo struct {
	TotalCount   int           `json:"total_count"`
	WorkflowRuns []WorkflowRun `json:"workflow_runs"`
}

type ActionsOrganizationPermissions struct {
	AllowedActions          string `json:"allowed_actions"`
	EnabledRepositories     string `json:"enabled_repositories"`
	SelectedActionsURL      string `json:"selected_actions_url"`
	SelectedRepositoriesURL string `json:"selected_repositories_url"`
}

type ActionsPublicKey struct {
	CreatedAt string `json:"created_at"`
	ID        int    `json:"id"`
	Key       string `json:"key"`
	KeyID     string `json:"key_id"`
	Title     string `json:"title"`
	URL       string `json:"url"`
}

type ActionsReRunWorkflow struct{}

type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg struct{}

type ActionsRemoveSelectedRepoFromOrgSecretConflict struct{}

func (*ActionsRemoveSelectedRepoFromOrgSecretConflict) actionsRemoveSelectedRepoFromOrgSecretResponse() {
}

type ActionsRemoveSelectedRepoFromOrgSecretNoContent struct{}

func (*ActionsRemoveSelectedRepoFromOrgSecretNoContent) actionsRemoveSelectedRepoFromOrgSecretResponse() {
}

type ActionsRemoveSelfHostedRunnerFromGroupForOrg struct{}

type ActionsRepositoryPermissions struct {
	AllowedActions     string `json:"allowed_actions"`
	Enabled            bool   `json:"enabled"`
	SelectedActionsURL string `json:"selected_actions_url"`
}

type ActionsRetryWorkflow struct{}

type ActionsReviewPendingDeploymentsForRunApplicationJSONRequest struct {
	Comment        string `json:"comment"`
	EnvironmentIds []int  `json:"environment_ids"`
	State          string `json:"state"`
}

type ActionsSecret struct {
	CreatedAt time.Time `json:"created_at"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

type ActionsSetAllowedActionsOrganization struct{}

type ActionsSetAllowedActionsRepository struct{}

type ActionsSetGithubActionsPermissionsOrganization struct{}

type ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest struct {
	AllowedActions      string `json:"allowed_actions"`
	EnabledRepositories string `json:"enabled_repositories"`
}

type ActionsSetGithubActionsPermissionsRepository struct{}

type ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest struct {
	AllowedActions string `json:"allowed_actions"`
	Enabled        bool   `json:"enabled"`
}

type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg struct{}

type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest struct {
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

type ActionsSetSelectedReposForOrgSecret struct{}

type ActionsSetSelectedReposForOrgSecretApplicationJSONRequest struct {
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization struct{}

type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest struct {
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

type ActionsSetSelfHostedRunnersInGroupForOrg struct{}

type ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest struct {
	Runners []int `json:"runners"`
}

type ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest struct {
	Name       string `json:"name"`
	Visibility string `json:"visibility"`
}

type ActivityCheckRepoIsStarredByAuthenticatedUserNoContent struct{}

func (*ActivityCheckRepoIsStarredByAuthenticatedUserNoContent) activityCheckRepoIsStarredByAuthenticatedUserResponse() {
}

type ActivityDeleteRepoSubscription struct{}

type ActivityDeleteThreadSubscriptionNoContent struct{}

func (*ActivityDeleteThreadSubscriptionNoContent) activityDeleteThreadSubscriptionResponse() {}

type ActivityGetRepoSubscriptionNotFound struct{}

func (*ActivityGetRepoSubscriptionNotFound) activityGetRepoSubscriptionResponse() {}

type ActivityListNotificationsForAuthenticatedUserOK []Thread

func (*ActivityListNotificationsForAuthenticatedUserOK) activityListNotificationsForAuthenticatedUserResponse() {
}

type ActivityListPublicEventsForRepoNetworkOK []Event

func (*ActivityListPublicEventsForRepoNetworkOK) activityListPublicEventsForRepoNetworkResponse() {}

type ActivityListPublicEventsOK []Event

func (*ActivityListPublicEventsOK) activityListPublicEventsResponse() {}

type ActivityListReposStarredByAuthenticatedUserOKApplicationJSON []Repository

func (*ActivityListReposStarredByAuthenticatedUserOKApplicationJSON) activityListReposStarredByAuthenticatedUserResponse() {
}

type ActivityListReposStarredByAuthenticatedUserOKApplicationVndGithubV3StarJSON []StarredRepository

func (*ActivityListReposStarredByAuthenticatedUserOKApplicationVndGithubV3StarJSON) activityListReposStarredByAuthenticatedUserResponse() {
}

type ActivityListWatchedReposForAuthenticatedUserOK []MinimalRepository

func (*ActivityListWatchedReposForAuthenticatedUserOK) activityListWatchedReposForAuthenticatedUserResponse() {
}

type ActivityMarkNotificationsAsReadAccepted struct {
	Message string `json:"message"`
}

func (*ActivityMarkNotificationsAsReadAccepted) activityMarkNotificationsAsReadResponse() {}

type ActivityMarkNotificationsAsReadApplicationJSONRequest struct {
	LastReadAt time.Time `json:"last_read_at"`
	Read       bool      `json:"read"`
}

type ActivityMarkNotificationsAsReadResetContent struct{}

func (*ActivityMarkNotificationsAsReadResetContent) activityMarkNotificationsAsReadResponse() {}

type ActivityMarkRepoNotificationsAsReadAccepted struct {
	Message string `json:"message"`
	URL     string `json:"url"`
}

func (*ActivityMarkRepoNotificationsAsReadAccepted) activityMarkRepoNotificationsAsReadResponse() {}

type ActivityMarkRepoNotificationsAsReadApplicationJSONRequest struct {
	LastReadAt time.Time `json:"last_read_at"`
}

type ActivityMarkRepoNotificationsAsReadResetContent struct{}

func (*ActivityMarkRepoNotificationsAsReadResetContent) activityMarkRepoNotificationsAsReadResponse() {
}

type ActivityMarkThreadAsReadResetContent struct{}

func (*ActivityMarkThreadAsReadResetContent) activityMarkThreadAsReadResponse() {}

type ActivitySetRepoSubscriptionApplicationJSONRequest struct {
	Ignored    bool `json:"ignored"`
	Subscribed bool `json:"subscribed"`
}

type ActivitySetThreadSubscriptionApplicationJSONRequest struct {
	Ignored bool `json:"ignored"`
}

type ActivityStarRepoForAuthenticatedUserNoContent struct{}

func (*ActivityStarRepoForAuthenticatedUserNoContent) activityStarRepoForAuthenticatedUserResponse() {
}

type ActivityUnstarRepoForAuthenticatedUserNoContent struct{}

func (*ActivityUnstarRepoForAuthenticatedUserNoContent) activityUnstarRepoForAuthenticatedUserResponse() {
}

type Actor struct {
	AvatarURL    string `json:"avatar_url"`
	DisplayLogin string `json:"display_login"`
	GravatarID   string `json:"gravatar_id"`
	ID           int    `json:"id"`
	Login        string `json:"login"`
	URL          string `json:"url"`
}

type AppPermissions struct {
	Actions                       string `json:"actions"`
	Administration                string `json:"administration"`
	Checks                        string `json:"checks"`
	ContentReferences             string `json:"content_references"`
	Contents                      string `json:"contents"`
	Deployments                   string `json:"deployments"`
	Environments                  string `json:"environments"`
	Issues                        string `json:"issues"`
	Members                       string `json:"members"`
	Metadata                      string `json:"metadata"`
	OrganizationAdministration    string `json:"organization_administration"`
	OrganizationHooks             string `json:"organization_hooks"`
	OrganizationPackages          string `json:"organization_packages"`
	OrganizationPlan              string `json:"organization_plan"`
	OrganizationProjects          string `json:"organization_projects"`
	OrganizationSecrets           string `json:"organization_secrets"`
	OrganizationSelfHostedRunners string `json:"organization_self_hosted_runners"`
	OrganizationUserBlocking      string `json:"organization_user_blocking"`
	Packages                      string `json:"packages"`
	Pages                         string `json:"pages"`
	PullRequests                  string `json:"pull_requests"`
	RepositoryHooks               string `json:"repository_hooks"`
	RepositoryProjects            string `json:"repository_projects"`
	SecretScanningAlerts          string `json:"secret_scanning_alerts"`
	Secrets                       string `json:"secrets"`
	SecurityEvents                string `json:"security_events"`
	SingleFile                    string `json:"single_file"`
	Statuses                      string `json:"statuses"`
	TeamDiscussions               string `json:"team_discussions"`
	VulnerabilityAlerts           string `json:"vulnerability_alerts"`
	Workflows                     string `json:"workflows"`
}

type ApplicationGrant struct {
	App       ApplicationGrantApp `json:"app"`
	CreatedAt time.Time           `json:"created_at"`
	ID        int                 `json:"id"`
	Scopes    []string            `json:"scopes"`
	URL       string              `json:"url"`
	UpdatedAt time.Time           `json:"updated_at"`
	User      NullableSimpleUser  `json:"user"`
}

func (*ApplicationGrant) oAuthAuthorizationsGetGrantResponse() {}

type ApplicationGrantApp struct {
	ClientID string `json:"client_id"`
	Name     string `json:"name"`
	URL      string `json:"url"`
}

type AppsAddRepoToInstallationNoContent struct{}

func (*AppsAddRepoToInstallationNoContent) appsAddRepoToInstallationResponse() {}

type AppsCheckTokenApplicationJSONRequest struct {
	AccessToken string `json:"access_token"`
}

type AppsCreateContentAttachmentApplicationJSONRequest struct {
	Body  string `json:"body"`
	Title string `json:"title"`
}

type AppsCreateFromManifestApplicationJSONRequest struct{}

type AppsCreateInstallationAccessTokenApplicationJSONRequest struct {
	Permissions   AppPermissions `json:"permissions"`
	Repositories  []string       `json:"repositories"`
	RepositoryIds []int          `json:"repository_ids"`
}

type AppsDeleteAuthorizationApplicationJSONRequest struct {
	AccessToken string `json:"access_token"`
}

type AppsDeleteAuthorizationNoContent struct{}

func (*AppsDeleteAuthorizationNoContent) appsDeleteAuthorizationResponse() {}

type AppsDeleteInstallationNoContent struct{}

func (*AppsDeleteInstallationNoContent) appsDeleteInstallationResponse() {}

type AppsDeleteTokenApplicationJSONRequest struct {
	AccessToken string `json:"access_token"`
}

type AppsDeleteTokenNoContent struct{}

func (*AppsDeleteTokenNoContent) appsDeleteTokenResponse() {}

type AppsGetSubscriptionPlanForAccountStubbedNotFound struct{}

func (*AppsGetSubscriptionPlanForAccountStubbedNotFound) appsGetSubscriptionPlanForAccountStubbedResponse() {
}

type AppsListAccountsForPlanOK []MarketplacePurchase

func (*AppsListAccountsForPlanOK) appsListAccountsForPlanResponse() {}

type AppsListAccountsForPlanStubbedOK []MarketplacePurchase

func (*AppsListAccountsForPlanStubbedOK) appsListAccountsForPlanStubbedResponse() {}

type AppsListInstallationReposForAuthenticatedUserOK struct {
	Repositories        []Repository `json:"repositories"`
	RepositorySelection string       `json:"repository_selection"`
	TotalCount          int          `json:"total_count"`
}

func (*AppsListInstallationReposForAuthenticatedUserOK) appsListInstallationReposForAuthenticatedUserResponse() {
}

type AppsListInstallationsForAuthenticatedUserOK struct {
	Installations []Installation `json:"installations"`
	TotalCount    int            `json:"total_count"`
}

func (*AppsListInstallationsForAuthenticatedUserOK) appsListInstallationsForAuthenticatedUserResponse() {
}

type AppsListPlansOK []MarketplaceListingPlan

func (*AppsListPlansOK) appsListPlansResponse() {}

type AppsListPlansStubbedOK []MarketplaceListingPlan

func (*AppsListPlansStubbedOK) appsListPlansStubbedResponse() {}

type AppsListReposAccessibleToInstallationOK struct {
	Repositories        []Repository `json:"repositories"`
	RepositorySelection string       `json:"repository_selection"`
	TotalCount          int          `json:"total_count"`
}

func (*AppsListReposAccessibleToInstallationOK) appsListReposAccessibleToInstallationResponse() {}

type AppsListSubscriptionsForAuthenticatedUserOK []UserMarketplacePurchase

func (*AppsListSubscriptionsForAuthenticatedUserOK) appsListSubscriptionsForAuthenticatedUserResponse() {
}

type AppsListSubscriptionsForAuthenticatedUserStubbedOK []UserMarketplacePurchase

func (*AppsListSubscriptionsForAuthenticatedUserStubbedOK) appsListSubscriptionsForAuthenticatedUserStubbedResponse() {
}

type AppsListWebhookDeliveriesOK []HookDeliveryItem

func (*AppsListWebhookDeliveriesOK) appsListWebhookDeliveriesResponse() {}

type AppsRemoveRepoFromInstallationNoContent struct{}

func (*AppsRemoveRepoFromInstallationNoContent) appsRemoveRepoFromInstallationResponse() {}

type AppsResetTokenApplicationJSONRequest struct {
	AccessToken string `json:"access_token"`
}

type AppsRevokeInstallationAccessToken struct{}

type AppsScopeTokenApplicationJSONRequest struct {
	AccessToken   string         `json:"access_token"`
	Permissions   AppPermissions `json:"permissions"`
	Repositories  []string       `json:"repositories"`
	RepositoryIds []int          `json:"repository_ids"`
	Target        string         `json:"target"`
	TargetID      int            `json:"target_id"`
}

type AppsSuspendInstallationNoContent struct{}

func (*AppsSuspendInstallationNoContent) appsSuspendInstallationResponse() {}

type AppsUnsuspendInstallationNoContent struct{}

func (*AppsUnsuspendInstallationNoContent) appsUnsuspendInstallationResponse() {}

type AppsUpdateWebhookConfigForAppApplicationJSONRequest struct {
	URL         string `json:"url"`
	ContentType string `json:"content_type"`
	Secret      string `json:"secret"`
}

type Artifact struct {
	ArchiveDownloadURL string    `json:"archive_download_url"`
	CreatedAt          time.Time `json:"created_at"`
	Expired            bool      `json:"expired"`
	ExpiresAt          time.Time `json:"expires_at"`
	ID                 int       `json:"id"`
	Name               string    `json:"name"`
	NodeID             string    `json:"node_id"`
	SizeInBytes        int       `json:"size_in_bytes"`
	URL                string    `json:"url"`
	UpdatedAt          time.Time `json:"updated_at"`
}

type AuditLogEvent struct {
	Repository string `json:"repository"`
	Actor      string `json:"actor"`
}

type AuthenticationToken struct {
	ExpiresAt           time.Time    `json:"expires_at"`
	Permissions         struct{}     `json:"permissions"`
	Repositories        []Repository `json:"repositories"`
	RepositorySelection string       `json:"repository_selection"`
	SingleFile          string       `json:"single_file"`
	Token               string       `json:"token"`
}

type Authorization struct {
	App            AuthorizationApp           `json:"app"`
	CreatedAt      time.Time                  `json:"created_at"`
	ExpiresAt      time.Time                  `json:"expires_at"`
	Fingerprint    string                     `json:"fingerprint"`
	HashedToken    string                     `json:"hashed_token"`
	ID             int                        `json:"id"`
	Installation   NullableScopedInstallation `json:"installation"`
	Note           string                     `json:"note"`
	NoteURL        string                     `json:"note_url"`
	Scopes         []string                   `json:"scopes"`
	Token          string                     `json:"token"`
	TokenLastEight string                     `json:"token_last_eight"`
	URL            string                     `json:"url"`
	UpdatedAt      time.Time                  `json:"updated_at"`
	User           NullableSimpleUser         `json:"user"`
}

func (*Authorization) appsCheckTokenResponse()                                                  {}
func (*Authorization) appsResetTokenResponse()                                                  {}
func (*Authorization) appsScopeTokenResponse()                                                  {}
func (*Authorization) oAuthAuthorizationsCreateAuthorizationResponse()                          {}
func (*Authorization) oAuthAuthorizationsGetAuthorizationResponse()                             {}
func (*Authorization) oAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponse() {}
func (*Authorization) oAuthAuthorizationsGetOrCreateAuthorizationForAppResponse()               {}
func (*Authorization) oAuthAuthorizationsUpdateAuthorizationResponse()                          {}

type AuthorizationApp struct {
	ClientID string `json:"client_id"`
	Name     string `json:"name"`
	URL      string `json:"url"`
}

type AutoMerge struct {
	CommitMessage string     `json:"commit_message"`
	CommitTitle   string     `json:"commit_title"`
	EnabledBy     SimpleUser `json:"enabled_by"`
	MergeMethod   string     `json:"merge_method"`
}

type Autolink struct {
	ID          int    `json:"id"`
	KeyPrefix   string `json:"key_prefix"`
	URLTemplate string `json:"url_template"`
}

func (*Autolink) reposCreateAutolinkResponse() {}
func (*Autolink) reposGetAutolinkResponse()    {}

type BaseGist struct {
	HTMLURL     string             `json:"html_url"`
	Public      bool               `json:"public"`
	UpdatedAt   time.Time          `json:"updated_at"`
	Comments    int                `json:"comments"`
	CommentsURL string             `json:"comments_url"`
	Owner       SimpleUser         `json:"owner"`
	CommitsURL  string             `json:"commits_url"`
	GitPushURL  string             `json:"git_push_url"`
	Files       struct{}           `json:"files"`
	ForksURL    string             `json:"forks_url"`
	NodeID      string             `json:"node_id"`
	User        NullableSimpleUser `json:"user"`
}

type BasicError struct {
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
	Status           string `json:"status"`
	URL              string `json:"url"`
}

func (*BasicError) actionsApproveWorkflowRunResponse()                                       {}
func (*BasicError) activityCheckRepoIsStarredByAuthenticatedUserResponse()                   {}
func (*BasicError) activityDeleteThreadSubscriptionResponse()                                {}
func (*BasicError) activityGetRepoSubscriptionResponse()                                     {}
func (*BasicError) activityGetThreadResponse()                                               {}
func (*BasicError) activityGetThreadSubscriptionForAuthenticatedUserResponse()               {}
func (*BasicError) activityListNotificationsForAuthenticatedUserResponse()                   {}
func (*BasicError) activityListPublicEventsForRepoNetworkResponse()                          {}
func (*BasicError) activityListPublicEventsResponse()                                        {}
func (*BasicError) activityListReposStarredByAuthenticatedUserResponse()                     {}
func (*BasicError) activityListWatchedReposForAuthenticatedUserResponse()                    {}
func (*BasicError) activityMarkNotificationsAsReadResponse()                                 {}
func (*BasicError) activityMarkThreadAsReadResponse()                                        {}
func (*BasicError) activitySetThreadSubscriptionResponse()                                   {}
func (*BasicError) activityStarRepoForAuthenticatedUserResponse()                            {}
func (*BasicError) activityUnstarRepoForAuthenticatedUserResponse()                          {}
func (*BasicError) appsAddRepoToInstallationResponse()                                       {}
func (*BasicError) appsCheckTokenResponse()                                                  {}
func (*BasicError) appsCreateContentAttachmentResponse()                                     {}
func (*BasicError) appsCreateFromManifestResponse()                                          {}
func (*BasicError) appsCreateInstallationAccessTokenResponse()                               {}
func (*BasicError) appsDeleteInstallationResponse()                                          {}
func (*BasicError) appsGetBySlugResponse()                                                   {}
func (*BasicError) appsGetInstallationResponse()                                             {}
func (*BasicError) appsGetRepoInstallationResponse()                                         {}
func (*BasicError) appsGetSubscriptionPlanForAccountResponse()                               {}
func (*BasicError) appsGetSubscriptionPlanForAccountStubbedResponse()                        {}
func (*BasicError) appsGetWebhookDeliveryResponse()                                          {}
func (*BasicError) appsListAccountsForPlanResponse()                                         {}
func (*BasicError) appsListAccountsForPlanStubbedResponse()                                  {}
func (*BasicError) appsListInstallationReposForAuthenticatedUserResponse()                   {}
func (*BasicError) appsListInstallationsForAuthenticatedUserResponse()                       {}
func (*BasicError) appsListPlansResponse()                                                   {}
func (*BasicError) appsListPlansStubbedResponse()                                            {}
func (*BasicError) appsListReposAccessibleToInstallationResponse()                           {}
func (*BasicError) appsListSubscriptionsForAuthenticatedUserResponse()                       {}
func (*BasicError) appsListSubscriptionsForAuthenticatedUserStubbedResponse()                {}
func (*BasicError) appsListWebhookDeliveriesResponse()                                       {}
func (*BasicError) appsRedeliverWebhookDeliveryResponse()                                    {}
func (*BasicError) appsRemoveRepoFromInstallationResponse()                                  {}
func (*BasicError) appsScopeTokenResponse()                                                  {}
func (*BasicError) appsSuspendInstallationResponse()                                         {}
func (*BasicError) appsUnsuspendInstallationResponse()                                       {}
func (*BasicError) codeScanningDeleteAnalysisResponse()                                      {}
func (*BasicError) codeScanningGetAlertResponse()                                            {}
func (*BasicError) codeScanningGetAnalysisResponse()                                         {}
func (*BasicError) codeScanningGetSarifResponse()                                            {}
func (*BasicError) codeScanningListAlertInstancesResponse()                                  {}
func (*BasicError) codeScanningListAlertsForRepoResponse()                                   {}
func (*BasicError) codeScanningListRecentAnalysesResponse()                                  {}
func (*BasicError) codeScanningUpdateAlertResponse()                                         {}
func (*BasicError) codeScanningUploadSarifResponse()                                         {}
func (*BasicError) codesOfConductGetConductCodeResponse()                                    {}
func (*BasicError) gistsCheckIsStarredResponse()                                             {}
func (*BasicError) gistsCreateCommentResponse()                                              {}
func (*BasicError) gistsCreateResponse()                                                     {}
func (*BasicError) gistsDeleteCommentResponse()                                              {}
func (*BasicError) gistsDeleteResponse()                                                     {}
func (*BasicError) gistsForkResponse()                                                       {}
func (*BasicError) gistsGetCommentResponse()                                                 {}
func (*BasicError) gistsGetResponse()                                                        {}
func (*BasicError) gistsGetRevisionResponse()                                                {}
func (*BasicError) gistsListCommentsResponse()                                               {}
func (*BasicError) gistsListCommitsResponse()                                                {}
func (*BasicError) gistsListForksResponse()                                                  {}
func (*BasicError) gistsListPublicResponse()                                                 {}
func (*BasicError) gistsListResponse()                                                       {}
func (*BasicError) gistsListStarredResponse()                                                {}
func (*BasicError) gistsStarResponse()                                                       {}
func (*BasicError) gistsUnstarResponse()                                                     {}
func (*BasicError) gistsUpdateCommentResponse()                                              {}
func (*BasicError) gistsUpdateResponse()                                                     {}
func (*BasicError) gitCreateBlobResponse()                                                   {}
func (*BasicError) gitCreateCommitResponse()                                                 {}
func (*BasicError) gitCreateTreeResponse()                                                   {}
func (*BasicError) gitGetBlobResponse()                                                      {}
func (*BasicError) gitGetCommitResponse()                                                    {}
func (*BasicError) gitGetRefResponse()                                                       {}
func (*BasicError) gitGetTagResponse()                                                       {}
func (*BasicError) gitGetTreeResponse()                                                      {}
func (*BasicError) issuesAddLabelsResponse()                                                 {}
func (*BasicError) issuesCheckUserCanBeAssignedResponse()                                    {}
func (*BasicError) issuesCreateCommentResponse()                                             {}
func (*BasicError) issuesCreateLabelResponse()                                               {}
func (*BasicError) issuesCreateMilestoneResponse()                                           {}
func (*BasicError) issuesCreateResponse()                                                    {}
func (*BasicError) issuesDeleteMilestoneResponse()                                           {}
func (*BasicError) issuesGetCommentResponse()                                                {}
func (*BasicError) issuesGetEventResponse()                                                  {}
func (*BasicError) issuesGetLabelResponse()                                                  {}
func (*BasicError) issuesGetMilestoneResponse()                                              {}
func (*BasicError) issuesGetResponse()                                                       {}
func (*BasicError) issuesListAssigneesResponse()                                             {}
func (*BasicError) issuesListCommentsForRepoResponse()                                       {}
func (*BasicError) issuesListCommentsResponse()                                              {}
func (*BasicError) issuesListEventsForTimelineResponse()                                     {}
func (*BasicError) issuesListEventsResponse()                                                {}
func (*BasicError) issuesListForAuthenticatedUserResponse()                                  {}
func (*BasicError) issuesListForOrgResponse()                                                {}
func (*BasicError) issuesListForRepoResponse()                                               {}
func (*BasicError) issuesListLabelsForRepoResponse()                                         {}
func (*BasicError) issuesListLabelsOnIssueResponse()                                         {}
func (*BasicError) issuesListMilestonesResponse()                                            {}
func (*BasicError) issuesListResponse()                                                      {}
func (*BasicError) issuesLockResponse()                                                      {}
func (*BasicError) issuesRemoveAllLabelsResponse()                                           {}
func (*BasicError) issuesRemoveLabelResponse()                                               {}
func (*BasicError) issuesSetLabelsResponse()                                                 {}
func (*BasicError) issuesUnlockResponse()                                                    {}
func (*BasicError) issuesUpdateResponse()                                                    {}
func (*BasicError) licensesGetResponse()                                                     {}
func (*BasicError) migrationsDeleteArchiveForAuthenticatedUserResponse()                     {}
func (*BasicError) migrationsDeleteArchiveForOrgResponse()                                   {}
func (*BasicError) migrationsDownloadArchiveForOrgResponse()                                 {}
func (*BasicError) migrationsGetArchiveForAuthenticatedUserResponse()                        {}
func (*BasicError) migrationsGetCommitAuthorsResponse()                                      {}
func (*BasicError) migrationsGetImportStatusResponse()                                       {}
func (*BasicError) migrationsGetStatusForAuthenticatedUserResponse()                         {}
func (*BasicError) migrationsGetStatusForOrgResponse()                                       {}
func (*BasicError) migrationsListForAuthenticatedUserResponse()                              {}
func (*BasicError) migrationsListReposForOrgResponse()                                       {}
func (*BasicError) migrationsListReposForUserResponse()                                      {}
func (*BasicError) migrationsMapCommitAuthorResponse()                                       {}
func (*BasicError) migrationsStartForAuthenticatedUserResponse()                             {}
func (*BasicError) migrationsStartForOrgResponse()                                           {}
func (*BasicError) migrationsStartImportResponse()                                           {}
func (*BasicError) migrationsUnlockRepoForAuthenticatedUserResponse()                        {}
func (*BasicError) migrationsUnlockRepoForOrgResponse()                                      {}
func (*BasicError) oAuthAuthorizationsCreateAuthorizationResponse()                          {}
func (*BasicError) oAuthAuthorizationsDeleteAuthorizationResponse()                          {}
func (*BasicError) oAuthAuthorizationsDeleteGrantResponse()                                  {}
func (*BasicError) oAuthAuthorizationsGetAuthorizationResponse()                             {}
func (*BasicError) oAuthAuthorizationsGetGrantResponse()                                     {}
func (*BasicError) oAuthAuthorizationsGetOrCreateAuthorizationForAppResponse()               {}
func (*BasicError) oAuthAuthorizationsListAuthorizationsResponse()                           {}
func (*BasicError) oAuthAuthorizationsListGrantsResponse()                                   {}
func (*BasicError) orgsCancelInvitationResponse()                                            {}
func (*BasicError) orgsCheckBlockedUserResponse()                                            {}
func (*BasicError) orgsConvertMemberToOutsideCollaboratorResponse()                          {}
func (*BasicError) orgsCreateInvitationResponse()                                            {}
func (*BasicError) orgsCreateWebhookResponse()                                               {}
func (*BasicError) orgsDeleteWebhookResponse()                                               {}
func (*BasicError) orgsGetMembershipForAuthenticatedUserResponse()                           {}
func (*BasicError) orgsGetMembershipForUserResponse()                                        {}
func (*BasicError) orgsGetResponse()                                                         {}
func (*BasicError) orgsGetWebhookDeliveryResponse()                                          {}
func (*BasicError) orgsGetWebhookResponse()                                                  {}
func (*BasicError) orgsListFailedInvitationsResponse()                                       {}
func (*BasicError) orgsListForAuthenticatedUserResponse()                                    {}
func (*BasicError) orgsListInvitationTeamsResponse()                                         {}
func (*BasicError) orgsListMembershipsForAuthenticatedUserResponse()                         {}
func (*BasicError) orgsListPendingInvitationsResponse()                                      {}
func (*BasicError) orgsListWebhookDeliveriesResponse()                                       {}
func (*BasicError) orgsListWebhooksResponse()                                                {}
func (*BasicError) orgsPingWebhookResponse()                                                 {}
func (*BasicError) orgsRedeliverWebhookDeliveryResponse()                                    {}
func (*BasicError) orgsRemoveMemberResponse()                                                {}
func (*BasicError) orgsRemoveMembershipForUserResponse()                                     {}
func (*BasicError) orgsRemoveSamlSSOAuthorizationResponse()                                  {}
func (*BasicError) orgsSetMembershipForUserResponse()                                        {}
func (*BasicError) orgsSetPublicMembershipForAuthenticatedUserResponse()                     {}
func (*BasicError) orgsUpdateMembershipForAuthenticatedUserResponse()                        {}
func (*BasicError) orgsUpdateResponse()                                                      {}
func (*BasicError) orgsUpdateWebhookResponse()                                               {}
func (*BasicError) packagesDeletePackageForAuthenticatedUserResponse()                       {}
func (*BasicError) packagesDeletePackageForOrgResponse()                                     {}
func (*BasicError) packagesDeletePackageForUserResponse()                                    {}
func (*BasicError) packagesDeletePackageVersionForAuthenticatedUserResponse()                {}
func (*BasicError) packagesDeletePackageVersionForOrgResponse()                              {}
func (*BasicError) packagesDeletePackageVersionForUserResponse()                             {}
func (*BasicError) packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse() {}
func (*BasicError) packagesGetAllPackageVersionsForPackageOwnedByOrgResponse()               {}
func (*BasicError) packagesGetAllPackageVersionsForPackageOwnedByUserResponse()              {}
func (*BasicError) packagesListPackagesForOrganizationResponse()                             {}
func (*BasicError) packagesListPackagesForUserResponse()                                     {}
func (*BasicError) packagesRestorePackageForAuthenticatedUserResponse()                      {}
func (*BasicError) packagesRestorePackageForOrgResponse()                                    {}
func (*BasicError) packagesRestorePackageForUserResponse()                                   {}
func (*BasicError) packagesRestorePackageVersionForAuthenticatedUserResponse()               {}
func (*BasicError) packagesRestorePackageVersionForOrgResponse()                             {}
func (*BasicError) packagesRestorePackageVersionForUserResponse()                            {}
func (*BasicError) projectsAddCollaboratorResponse()                                         {}
func (*BasicError) projectsCreateCardResponse()                                              {}
func (*BasicError) projectsCreateColumnResponse()                                            {}
func (*BasicError) projectsCreateForAuthenticatedUserResponse()                              {}
func (*BasicError) projectsCreateForOrgResponse()                                            {}
func (*BasicError) projectsCreateForRepoResponse()                                           {}
func (*BasicError) projectsDeleteCardResponse()                                              {}
func (*BasicError) projectsDeleteColumnResponse()                                            {}
func (*BasicError) projectsDeleteResponse()                                                  {}
func (*BasicError) projectsGetCardResponse()                                                 {}
func (*BasicError) projectsGetColumnResponse()                                               {}
func (*BasicError) projectsGetPermissionForUserResponse()                                    {}
func (*BasicError) projectsGetResponse()                                                     {}
func (*BasicError) projectsListCardsResponse()                                               {}
func (*BasicError) projectsListCollaboratorsResponse()                                       {}
func (*BasicError) projectsListColumnsResponse()                                             {}
func (*BasicError) projectsListForRepoResponse()                                             {}
func (*BasicError) projectsMoveCardResponse()                                                {}
func (*BasicError) projectsMoveColumnResponse()                                              {}
func (*BasicError) projectsRemoveCollaboratorResponse()                                      {}
func (*BasicError) projectsUpdateCardResponse()                                              {}
func (*BasicError) projectsUpdateColumnResponse()                                            {}
func (*BasicError) projectsUpdateResponse()                                                  {}
func (*BasicError) pullsCreateReplyForReviewCommentResponse()                                {}
func (*BasicError) pullsCreateResponse()                                                     {}
func (*BasicError) pullsCreateReviewCommentResponse()                                        {}
func (*BasicError) pullsCreateReviewResponse()                                               {}
func (*BasicError) pullsDeletePendingReviewResponse()                                        {}
func (*BasicError) pullsDeleteReviewCommentResponse()                                        {}
func (*BasicError) pullsDismissReviewResponse()                                              {}
func (*BasicError) pullsGetResponse()                                                        {}
func (*BasicError) pullsGetReviewCommentResponse()                                           {}
func (*BasicError) pullsGetReviewResponse()                                                  {}
func (*BasicError) pullsListCommentsForReviewResponse()                                      {}
func (*BasicError) pullsListFilesResponse()                                                  {}
func (*BasicError) pullsMergeResponse()                                                      {}
func (*BasicError) pullsRequestReviewersResponse()                                           {}
func (*BasicError) pullsSubmitReviewResponse()                                               {}
func (*BasicError) pullsUpdateBranchResponse()                                               {}
func (*BasicError) pullsUpdateResponse()                                                     {}
func (*BasicError) rateLimitGetResponse()                                                    {}
func (*BasicError) reactionsDeleteLegacyResponse()                                           {}
func (*BasicError) reactionsListForCommitCommentResponse()                                   {}
func (*BasicError) reactionsListForIssueCommentResponse()                                    {}
func (*BasicError) reactionsListForIssueResponse()                                           {}
func (*BasicError) reactionsListForPullRequestReviewCommentResponse()                        {}
func (*BasicError) reposAcceptInvitationResponse()                                           {}
func (*BasicError) reposAddCollaboratorResponse()                                            {}
func (*BasicError) reposAddStatusCheckContextsResponse()                                     {}
func (*BasicError) reposCompareCommitsResponse()                                             {}
func (*BasicError) reposCreateCommitCommentResponse()                                        {}
func (*BasicError) reposCreateCommitSignatureProtectionResponse()                            {}
func (*BasicError) reposCreateForAuthenticatedUserResponse()                                 {}
func (*BasicError) reposCreateForkResponse()                                                 {}
func (*BasicError) reposCreateInOrgResponse()                                                {}
func (*BasicError) reposCreateOrUpdateEnvironmentResponse()                                  {}
func (*BasicError) reposCreateOrUpdateFileContentsResponse()                                 {}
func (*BasicError) reposCreatePagesSiteResponse()                                            {}
func (*BasicError) reposCreateReleaseResponse()                                              {}
func (*BasicError) reposCreateWebhookResponse()                                              {}
func (*BasicError) reposDeclineInvitationResponse()                                          {}
func (*BasicError) reposDeleteAdminBranchProtectionResponse()                                {}
func (*BasicError) reposDeleteAutolinkResponse()                                             {}
func (*BasicError) reposDeleteBranchProtectionResponse()                                     {}
func (*BasicError) reposDeleteCommitCommentResponse()                                        {}
func (*BasicError) reposDeleteCommitSignatureProtectionResponse()                            {}
func (*BasicError) reposDeleteDeploymentResponse()                                           {}
func (*BasicError) reposDeleteFileResponse()                                                 {}
func (*BasicError) reposDeletePagesSiteResponse()                                            {}
func (*BasicError) reposDeletePullRequestReviewProtectionResponse()                          {}
func (*BasicError) reposDeleteResponse()                                                     {}
func (*BasicError) reposDeleteWebhookResponse()                                              {}
func (*BasicError) reposGetAccessRestrictionsResponse()                                      {}
func (*BasicError) reposGetAllStatusCheckContextsResponse()                                  {}
func (*BasicError) reposGetAllTopicsResponse()                                               {}
func (*BasicError) reposGetAppsWithAccessToProtectedBranchResponse()                         {}
func (*BasicError) reposGetAutolinkResponse()                                                {}
func (*BasicError) reposGetBranchProtectionResponse()                                        {}
func (*BasicError) reposGetBranchResponse()                                                  {}
func (*BasicError) reposGetClonesResponse()                                                  {}
func (*BasicError) reposGetCollaboratorPermissionLevelResponse()                             {}
func (*BasicError) reposGetCombinedStatusForRefResponse()                                    {}
func (*BasicError) reposGetCommitCommentResponse()                                           {}
func (*BasicError) reposGetCommitResponse()                                                  {}
func (*BasicError) reposGetCommitSignatureProtectionResponse()                               {}
func (*BasicError) reposGetContentResponse()                                                 {}
func (*BasicError) reposGetDeployKeyResponse()                                               {}
func (*BasicError) reposGetDeploymentResponse()                                              {}
func (*BasicError) reposGetDeploymentStatusResponse()                                        {}
func (*BasicError) reposGetPagesHealthCheckResponse()                                        {}
func (*BasicError) reposGetPagesResponse()                                                   {}
func (*BasicError) reposGetParticipationStatsResponse()                                      {}
func (*BasicError) reposGetReadmeInDirectoryResponse()                                       {}
func (*BasicError) reposGetReadmeResponse()                                                  {}
func (*BasicError) reposGetReleaseAssetResponse()                                            {}
func (*BasicError) reposGetReleaseByTagResponse()                                            {}
func (*BasicError) reposGetReleaseResponse()                                                 {}
func (*BasicError) reposGetResponse()                                                        {}
func (*BasicError) reposGetStatusChecksProtectionResponse()                                  {}
func (*BasicError) reposGetTeamsWithAccessToProtectedBranchResponse()                        {}
func (*BasicError) reposGetTopPathsResponse()                                                {}
func (*BasicError) reposGetTopReferrersResponse()                                            {}
func (*BasicError) reposGetUsersWithAccessToProtectedBranchResponse()                        {}
func (*BasicError) reposGetViewsResponse()                                                   {}
func (*BasicError) reposGetWebhookDeliveryResponse()                                         {}
func (*BasicError) reposGetWebhookResponse()                                                 {}
func (*BasicError) reposListBranchesResponse()                                               {}
func (*BasicError) reposListCollaboratorsResponse()                                          {}
func (*BasicError) reposListCommitStatusesForRefResponse()                                   {}
func (*BasicError) reposListCommitsResponse()                                                {}
func (*BasicError) reposListContributorsResponse()                                           {}
func (*BasicError) reposListDeploymentStatusesResponse()                                     {}
func (*BasicError) reposListForAuthenticatedUserResponse()                                   {}
func (*BasicError) reposListForksResponse()                                                  {}
func (*BasicError) reposListInvitationsForAuthenticatedUserResponse()                        {}
func (*BasicError) reposListReleasesResponse()                                               {}
func (*BasicError) reposListWebhookDeliveriesResponse()                                      {}
func (*BasicError) reposListWebhooksResponse()                                               {}
func (*BasicError) reposMergeResponse()                                                      {}
func (*BasicError) reposPingWebhookResponse()                                                {}
func (*BasicError) reposRedeliverWebhookDeliveryResponse()                                   {}
func (*BasicError) reposRemoveStatusCheckContextsResponse()                                  {}
func (*BasicError) reposRenameBranchResponse()                                               {}
func (*BasicError) reposReplaceAllTopicsResponse()                                           {}
func (*BasicError) reposSetStatusCheckContextsResponse()                                     {}
func (*BasicError) reposTestPushWebhookResponse()                                            {}
func (*BasicError) reposUpdateBranchProtectionResponse()                                     {}
func (*BasicError) reposUpdateCommitCommentResponse()                                        {}
func (*BasicError) reposUpdateInformationAboutPagesSiteResponse()                            {}
func (*BasicError) reposUpdateReleaseResponse()                                              {}
func (*BasicError) reposUpdateResponse()                                                     {}
func (*BasicError) reposUpdateStatusCheckProtectionResponse()                                {}
func (*BasicError) reposUpdateWebhookResponse()                                              {}
func (*BasicError) scimUpdateAttributeForUserResponse()                                      {}
func (*BasicError) searchCodeResponse()                                                      {}
func (*BasicError) searchIssuesAndPullRequestsResponse()                                     {}
func (*BasicError) searchLabelsResponse()                                                    {}
func (*BasicError) secretScanningListAlertsForOrgResponse()                                  {}
func (*BasicError) teamsAddMemberLegacyResponse()                                            {}
func (*BasicError) teamsAddOrUpdateMembershipForUserLegacyResponse()                         {}
func (*BasicError) teamsAddOrUpdateProjectPermissionsLegacyResponse()                        {}
func (*BasicError) teamsAddOrUpdateRepoPermissionsLegacyResponse()                           {}
func (*BasicError) teamsCreateOrUpdateIdpGroupConnectionsLegacyResponse()                    {}
func (*BasicError) teamsCreateResponse()                                                     {}
func (*BasicError) teamsDeleteLegacyResponse()                                               {}
func (*BasicError) teamsGetByNameResponse()                                                  {}
func (*BasicError) teamsGetLegacyResponse()                                                  {}
func (*BasicError) teamsGetMembershipForUserLegacyResponse()                                 {}
func (*BasicError) teamsListChildLegacyResponse()                                            {}
func (*BasicError) teamsListForAuthenticatedUserResponse()                                   {}
func (*BasicError) teamsListIdpGroupsForLegacyResponse()                                     {}
func (*BasicError) teamsListMembersLegacyResponse()                                          {}
func (*BasicError) teamsListProjectsLegacyResponse()                                         {}
func (*BasicError) teamsListReposLegacyResponse()                                            {}
func (*BasicError) teamsListResponse()                                                       {}
func (*BasicError) teamsRemoveProjectLegacyResponse()                                        {}
func (*BasicError) teamsUpdateLegacyResponse()                                               {}
func (*BasicError) usersAddEmailForAuthenticatedResponse()                                   {}
func (*BasicError) usersBlockResponse()                                                      {}
func (*BasicError) usersCheckBlockedResponse()                                               {}
func (*BasicError) usersCheckPersonIsFollowedByAuthenticatedResponse()                       {}
func (*BasicError) usersCreateGpgKeyForAuthenticatedResponse()                               {}
func (*BasicError) usersCreatePublicSSHKeyForAuthenticatedResponse()                         {}
func (*BasicError) usersDeleteEmailForAuthenticatedResponse()                                {}
func (*BasicError) usersDeleteGpgKeyForAuthenticatedResponse()                               {}
func (*BasicError) usersDeletePublicSSHKeyForAuthenticatedResponse()                         {}
func (*BasicError) usersFollowResponse()                                                     {}
func (*BasicError) usersGetAuthenticatedResponse()                                           {}
func (*BasicError) usersGetByUsernameResponse()                                              {}
func (*BasicError) usersGetContextForUserResponse()                                          {}
func (*BasicError) usersGetGpgKeyForAuthenticatedResponse()                                  {}
func (*BasicError) usersGetPublicSSHKeyForAuthenticatedResponse()                            {}
func (*BasicError) usersListBlockedByAuthenticatedResponse()                                 {}
func (*BasicError) usersListEmailsForAuthenticatedResponse()                                 {}
func (*BasicError) usersListFollowedByAuthenticatedResponse()                                {}
func (*BasicError) usersListFollowersForAuthenticatedUserResponse()                          {}
func (*BasicError) usersListGpgKeysForAuthenticatedResponse()                                {}
func (*BasicError) usersListPublicEmailsForAuthenticatedResponse()                           {}
func (*BasicError) usersListPublicSSHKeysForAuthenticatedResponse()                          {}
func (*BasicError) usersSetPrimaryEmailVisibilityForAuthenticatedResponse()                  {}
func (*BasicError) usersUnblockResponse()                                                    {}
func (*BasicError) usersUnfollowResponse()                                                   {}
func (*BasicError) usersUpdateAuthenticatedResponse()                                        {}

type Blob struct {
	Content            string `json:"content"`
	Encoding           string `json:"encoding"`
	HighlightedContent string `json:"highlighted_content"`
	NodeID             string `json:"node_id"`
	Sha                string `json:"sha"`
	Size               int    `json:"size"`
	URL                string `json:"url"`
}

func (*Blob) gitGetBlobResponse() {}

type BranchProtection struct {
	AllowDeletions                 BranchProtectionAllowDeletions                 `json:"allow_deletions"`
	AllowForcePushes               BranchProtectionAllowForcePushes               `json:"allow_force_pushes"`
	Enabled                        bool                                           `json:"enabled"`
	EnforceAdmins                  ProtectedBranchAdminEnforced                   `json:"enforce_admins"`
	Name                           string                                         `json:"name"`
	ProtectionURL                  string                                         `json:"protection_url"`
	RequiredConversationResolution BranchProtectionRequiredConversationResolution `json:"required_conversation_resolution"`
	RequiredLinearHistory          BranchProtectionRequiredLinearHistory          `json:"required_linear_history"`
	RequiredPullRequestReviews     ProtectedBranchPullRequestReview               `json:"required_pull_request_reviews"`
	RequiredSignatures             BranchProtectionRequiredSignatures             `json:"required_signatures"`
	RequiredStatusChecks           BranchProtectionRequiredStatusChecks           `json:"required_status_checks"`
	Restrictions                   BranchRestrictionPolicy                        `json:"restrictions"`
	URL                            string                                         `json:"url"`
}

func (*BranchProtection) reposGetBranchProtectionResponse() {}

type BranchProtectionAllowDeletions struct {
	Enabled bool `json:"enabled"`
}

type BranchProtectionAllowForcePushes struct {
	Enabled bool `json:"enabled"`
}

type BranchProtectionRequiredConversationResolution struct {
	Enabled bool `json:"enabled"`
}

type BranchProtectionRequiredLinearHistory struct {
	Enabled bool `json:"enabled"`
}

type BranchProtectionRequiredSignatures struct {
	Enabled bool   `json:"enabled"`
	URL     string `json:"url"`
}

type BranchProtectionRequiredStatusChecks struct {
	Contexts         []string `json:"contexts"`
	ContextsURL      string   `json:"contexts_url"`
	EnforcementLevel string   `json:"enforcement_level"`
	Strict           bool     `json:"strict"`
	URL              string   `json:"url"`
}

type BranchRestrictionPolicy struct {
	Apps     []BranchRestrictionPolicyAppsItem  `json:"apps"`
	AppsURL  string                             `json:"apps_url"`
	Teams    []BranchRestrictionPolicyTeamsItem `json:"teams"`
	TeamsURL string                             `json:"teams_url"`
	URL      string                             `json:"url"`
	Users    []BranchRestrictionPolicyUsersItem `json:"users"`
	UsersURL string                             `json:"users_url"`
}

func (*BranchRestrictionPolicy) reposGetAccessRestrictionsResponse() {}

type BranchRestrictionPolicyAppsItem struct {
	CreatedAt   string                                     `json:"created_at"`
	Description string                                     `json:"description"`
	Events      []string                                   `json:"events"`
	ExternalURL string                                     `json:"external_url"`
	HTMLURL     string                                     `json:"html_url"`
	ID          int                                        `json:"id"`
	Name        string                                     `json:"name"`
	NodeID      string                                     `json:"node_id"`
	Owner       BranchRestrictionPolicyAppsItemOwner       `json:"owner"`
	Permissions BranchRestrictionPolicyAppsItemPermissions `json:"permissions"`
	Slug        string                                     `json:"slug"`
	UpdatedAt   string                                     `json:"updated_at"`
}

type BranchRestrictionPolicyAppsItemOwner struct {
	AvatarURL         string `json:"avatar_url"`
	Description       string `json:"description"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	HooksURL          string `json:"hooks_url"`
	ID                int    `json:"id"`
	IssuesURL         string `json:"issues_url"`
	Login             string `json:"login"`
	MembersURL        string `json:"members_url"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	PublicMembersURL  string `json:"public_members_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type BranchRestrictionPolicyAppsItemPermissions struct {
	Contents   string `json:"contents"`
	Issues     string `json:"issues"`
	Metadata   string `json:"metadata"`
	SingleFile string `json:"single_file"`
}

type BranchRestrictionPolicyTeamsItem struct {
	Description     string `json:"description"`
	HTMLURL         string `json:"html_url"`
	ID              int    `json:"id"`
	MembersURL      string `json:"members_url"`
	Name            string `json:"name"`
	NodeID          string `json:"node_id"`
	Parent          string `json:"parent"`
	Permission      string `json:"permission"`
	Privacy         string `json:"privacy"`
	RepositoriesURL string `json:"repositories_url"`
	Slug            string `json:"slug"`
	URL             string `json:"url"`
}

type BranchRestrictionPolicyUsersItem struct {
	AvatarURL         string `json:"avatar_url"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type BranchShort struct {
	Commit    BranchShortCommit `json:"commit"`
	Name      string            `json:"name"`
	Protected bool              `json:"protected"`
}

type BranchShortCommit struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type BranchWithProtection struct {
	Commit                       Commit                    `json:"commit"`
	Links                        BranchWithProtectionLinks `json:"_links"`
	Name                         string                    `json:"name"`
	Pattern                      string                    `json:"pattern"`
	Protected                    bool                      `json:"protected"`
	Protection                   BranchProtection          `json:"protection"`
	ProtectionURL                string                    `json:"protection_url"`
	RequiredApprovingReviewCount int                       `json:"required_approving_review_count"`
}

func (*BranchWithProtection) reposGetBranchResponse()    {}
func (*BranchWithProtection) reposRenameBranchResponse() {}

type BranchWithProtectionLinks struct {
	HTML string `json:"html"`
	Self string `json:"self"`
}

type CheckAnnotation struct {
	AnnotationLevel string `json:"annotation_level"`
	BlobHref        string `json:"blob_href"`
	EndColumn       int    `json:"end_column"`
	EndLine         int    `json:"end_line"`
	Message         string `json:"message"`
	Path            string `json:"path"`
	RawDetails      string `json:"raw_details"`
	StartColumn     int    `json:"start_column"`
	StartLine       int    `json:"start_line"`
	Title           string `json:"title"`
}

type CheckRun struct {
	HeadSha    string              `json:"head_sha"`
	NodeID     string              `json:"node_id"`
	DetailsURL string              `json:"details_url"`
	App        NullableIntegration `json:"app"`
	ID         int                 `json:"id"`
	URL        string              `json:"url"`
	Name       string              `json:"name"`
	Output     CheckRunOutput      `json:"output"`
	CheckSuite CheckRunCheckSuite  `json:"check_suite"`
}

type CheckRunCheckSuite struct {
	ID int `json:"id"`
}

type CheckRunOutput struct {
	AnnotationsCount int    `json:"annotations_count"`
	AnnotationsURL   string `json:"annotations_url"`
	Summary          string `json:"summary"`
	Text             string `json:"text"`
	Title            string `json:"title"`
}

type CheckSuite struct {
	After                string               `json:"after"`
	App                  NullableIntegration  `json:"app"`
	Before               string               `json:"before"`
	CheckRunsURL         string               `json:"check_runs_url"`
	Conclusion           string               `json:"conclusion"`
	CreatedAt            time.Time            `json:"created_at"`
	HeadBranch           string               `json:"head_branch"`
	HeadCommit           SimpleCommit         `json:"head_commit"`
	HeadSha              string               `json:"head_sha"`
	ID                   int                  `json:"id"`
	LatestCheckRunsCount int                  `json:"latest_check_runs_count"`
	NodeID               string               `json:"node_id"`
	PullRequests         []PullRequestMinimal `json:"pull_requests"`
	Repository           MinimalRepository    `json:"repository"`
	Status               string               `json:"status"`
	URL                  string               `json:"url"`
	UpdatedAt            time.Time            `json:"updated_at"`
}

func (*CheckSuite) checksCreateSuiteResponse() {}

type CheckSuitePreference struct {
	Preferences CheckSuitePreferencePreferences `json:"preferences"`
	Repository  MinimalRepository               `json:"repository"`
}

type CheckSuitePreferencePreferences struct {
	AutoTriggerChecks []CheckSuitePreferencePreferencesAutoTriggerChecksItem `json:"auto_trigger_checks"`
}

type CheckSuitePreferencePreferencesAutoTriggerChecksItem struct {
	AppID   int  `json:"app_id"`
	Setting bool `json:"setting"`
}

type ChecksCreateApplicationJSONRequest struct {
	Actions     []ChecksCreateApplicationJSONRequestActionsItem `json:"actions"`
	CompletedAt time.Time                                       `json:"completed_at"`
	Conclusion  string                                          `json:"conclusion"`
	DetailsURL  string                                          `json:"details_url"`
	ExternalID  string                                          `json:"external_id"`
	HeadSha     string                                          `json:"head_sha"`
	Name        string                                          `json:"name"`
	Output      ChecksCreateApplicationJSONRequestOutput        `json:"output"`
	StartedAt   time.Time                                       `json:"started_at"`
	Status      string                                          `json:"status"`
}

type ChecksCreateApplicationJSONRequestActionsItem struct {
	Description string `json:"description"`
	Identifier  string `json:"identifier"`
	Label       string `json:"label"`
}

type ChecksCreateApplicationJSONRequestOutput struct {
	Annotations []ChecksCreateApplicationJSONRequestOutputAnnotationsItem `json:"annotations"`
	Images      []ChecksCreateApplicationJSONRequestOutputImagesItem      `json:"images"`
	Summary     string                                                    `json:"summary"`
	Text        string                                                    `json:"text"`
	Title       string                                                    `json:"title"`
}

type ChecksCreateApplicationJSONRequestOutputAnnotationsItem struct {
	AnnotationLevel string `json:"annotation_level"`
	EndColumn       int    `json:"end_column"`
	EndLine         int    `json:"end_line"`
	Message         string `json:"message"`
	Path            string `json:"path"`
	RawDetails      string `json:"raw_details"`
	StartColumn     int    `json:"start_column"`
	StartLine       int    `json:"start_line"`
	Title           string `json:"title"`
}

type ChecksCreateApplicationJSONRequestOutputImagesItem struct {
	Alt      string `json:"alt"`
	Caption  string `json:"caption"`
	ImageURL string `json:"image_url"`
}

type ChecksCreateSuiteApplicationJSONRequest struct {
	HeadSha string `json:"head_sha"`
}

type ChecksListForRef struct {
	TotalCount int `json:"total_count"`
}

type ChecksListForSuite struct {
	CheckRuns  []CheckRun `json:"check_runs"`
	TotalCount int        `json:"total_count"`
}

type ChecksListSuitesForRef struct {
	CheckSuites []CheckSuite `json:"check_suites"`
	TotalCount  int          `json:"total_count"`
}

type ChecksRerequestSuite struct{}

type ChecksSetSuitesPreferencesApplicationJSONRequest struct {
	AutoTriggerChecks []ChecksSetSuitesPreferencesApplicationJSONRequestAutoTriggerChecksItem `json:"auto_trigger_checks"`
}

type ChecksSetSuitesPreferencesApplicationJSONRequestAutoTriggerChecksItem struct {
	AppID   int  `json:"app_id"`
	Setting bool `json:"setting"`
}

type ChecksUpdateApplicationJSONRequest struct {
	Actions     []ChecksUpdateApplicationJSONRequestActionsItem `json:"actions"`
	CompletedAt time.Time                                       `json:"completed_at"`
	Conclusion  string                                          `json:"conclusion"`
	DetailsURL  string                                          `json:"details_url"`
	ExternalID  string                                          `json:"external_id"`
	Name        string                                          `json:"name"`
	Output      ChecksUpdateApplicationJSONRequestOutput        `json:"output"`
	StartedAt   time.Time                                       `json:"started_at"`
	Status      string                                          `json:"status"`
}

type ChecksUpdateApplicationJSONRequestActionsItem struct {
	Description string `json:"description"`
	Identifier  string `json:"identifier"`
	Label       string `json:"label"`
}

type ChecksUpdateApplicationJSONRequestOutput struct {
	Annotations []ChecksUpdateApplicationJSONRequestOutputAnnotationsItem `json:"annotations"`
	Images      []ChecksUpdateApplicationJSONRequestOutputImagesItem      `json:"images"`
	Summary     string                                                    `json:"summary"`
	Text        string                                                    `json:"text"`
	Title       string                                                    `json:"title"`
}

type ChecksUpdateApplicationJSONRequestOutputAnnotationsItem struct {
	AnnotationLevel string `json:"annotation_level"`
	EndColumn       int    `json:"end_column"`
	EndLine         int    `json:"end_line"`
	Message         string `json:"message"`
	Path            string `json:"path"`
	RawDetails      string `json:"raw_details"`
	StartColumn     int    `json:"start_column"`
	StartLine       int    `json:"start_line"`
	Title           string `json:"title"`
}

type ChecksUpdateApplicationJSONRequestOutputImagesItem struct {
	Alt      string `json:"alt"`
	Caption  string `json:"caption"`
	ImageURL string `json:"image_url"`
}

type CloneTraffic struct {
	Clones  []Traffic `json:"clones"`
	Count   int       `json:"count"`
	Uniques int       `json:"uniques"`
}

func (*CloneTraffic) reposGetClonesResponse() {}

type CodeOfConduct struct {
	Body    string `json:"body"`
	HTMLURL string `json:"html_url"`
	Key     string `json:"key"`
	Name    string `json:"name"`
	URL     string `json:"url"`
}

func (*CodeOfConduct) codesOfConductGetConductCodeResponse() {}

type CodeOfConductSimple struct {
	HTMLURL string `json:"html_url"`
	Key     string `json:"key"`
	Name    string `json:"name"`
	URL     string `json:"url"`
}

type CodeScanningAlert struct {
	Tool               CodeScanningAnalysisTool  `json:"tool"`
	Number             int                       `json:"number"`
	CreatedAt          time.Time                 `json:"created_at"`
	InstancesURL       string                    `json:"instances_url"`
	State              string                    `json:"state"`
	DismissedBy        NullableSimpleUser        `json:"dismissed_by"`
	Rule               CodeScanningAlertRule     `json:"rule"`
	MostRecentInstance CodeScanningAlertInstance `json:"most_recent_instance"`
	URL                string                    `json:"url"`
	HTMLURL            string                    `json:"html_url"`
}

func (*CodeScanningAlert) codeScanningUpdateAlertResponse() {}

type CodeScanningAlertInstance struct {
	AnalysisKey     string                           `json:"analysis_key"`
	Category        string                           `json:"category"`
	Classifications []string                         `json:"classifications"`
	CommitSha       string                           `json:"commit_sha"`
	Environment     string                           `json:"environment"`
	HTMLURL         string                           `json:"html_url"`
	Location        CodeScanningAlertLocation        `json:"location"`
	Message         CodeScanningAlertInstanceMessage `json:"message"`
	Ref             string                           `json:"ref"`
	State           string                           `json:"state"`
}

type CodeScanningAlertInstanceMessage struct {
	Text string `json:"text"`
}

type CodeScanningAlertItems struct {
	CreatedAt          time.Time                    `json:"created_at"`
	DismissedAt        time.Time                    `json:"dismissed_at"`
	DismissedBy        NullableSimpleUser           `json:"dismissed_by"`
	DismissedReason    string                       `json:"dismissed_reason"`
	HTMLURL            string                       `json:"html_url"`
	InstancesURL       string                       `json:"instances_url"`
	MostRecentInstance CodeScanningAlertInstance    `json:"most_recent_instance"`
	Number             int                          `json:"number"`
	Rule               CodeScanningAlertRuleSummary `json:"rule"`
	State              string                       `json:"state"`
	Tool               CodeScanningAnalysisTool     `json:"tool"`
	URL                string                       `json:"url"`
}

type CodeScanningAlertLocation struct {
	EndColumn   int    `json:"end_column"`
	EndLine     int    `json:"end_line"`
	Path        string `json:"path"`
	StartColumn int    `json:"start_column"`
	StartLine   int    `json:"start_line"`
}

type CodeScanningAlertRule struct {
	Description           string   `json:"description"`
	FullDescription       string   `json:"full_description"`
	Help                  string   `json:"help"`
	ID                    string   `json:"id"`
	Name                  string   `json:"name"`
	SecuritySeverityLevel string   `json:"security_severity_level"`
	Severity              string   `json:"severity"`
	Tags                  []string `json:"tags"`
}

type CodeScanningAlertRuleSummary struct {
	Description string `json:"description"`
	ID          string `json:"id"`
	Name        string `json:"name"`
	Severity    string `json:"severity"`
}

type CodeScanningAnalysis struct {
	AnalysisKey  string                   `json:"analysis_key"`
	Category     string                   `json:"category"`
	CommitSha    string                   `json:"commit_sha"`
	CreatedAt    time.Time                `json:"created_at"`
	Deletable    bool                     `json:"deletable"`
	Environment  string                   `json:"environment"`
	Error        string                   `json:"error"`
	ID           int                      `json:"id"`
	Ref          string                   `json:"ref"`
	ResultsCount int                      `json:"results_count"`
	RulesCount   int                      `json:"rules_count"`
	SarifID      string                   `json:"sarif_id"`
	Tool         CodeScanningAnalysisTool `json:"tool"`
	ToolName     string                   `json:"tool_name"`
	URL          string                   `json:"url"`
	Warning      string                   `json:"warning"`
}

func (*CodeScanningAnalysis) codeScanningGetAnalysisResponse() {}

type CodeScanningAnalysisDeletion struct {
	ConfirmDeleteURL string `json:"confirm_delete_url"`
	NextAnalysisURL  string `json:"next_analysis_url"`
}

func (*CodeScanningAnalysisDeletion) codeScanningDeleteAnalysisResponse() {}

type CodeScanningAnalysisTool struct {
	GUID    string `json:"guid"`
	Name    string `json:"name"`
	Version string `json:"version"`
}

type CodeScanningGetAnalysisOKApplicationJSONSarif string

func (*CodeScanningGetAnalysisOKApplicationJSONSarif) codeScanningGetAnalysisResponse() {}

type CodeScanningGetSarifNotFound struct{}

func (*CodeScanningGetSarifNotFound) codeScanningGetSarifResponse() {}

type CodeScanningListAlertInstancesOK []CodeScanningAlertInstance

func (*CodeScanningListAlertInstancesOK) codeScanningListAlertInstancesResponse() {}

type CodeScanningListAlertsForRepoOK []CodeScanningAlertItems

func (*CodeScanningListAlertsForRepoOK) codeScanningListAlertsForRepoResponse() {}

type CodeScanningListRecentAnalysesOK []CodeScanningAnalysis

func (*CodeScanningListRecentAnalysesOK) codeScanningListRecentAnalysesResponse() {}

type CodeScanningSarifsReceipt struct {
	ID  string `json:"id"`
	URL string `json:"url"`
}

func (*CodeScanningSarifsReceipt) codeScanningUploadSarifResponse() {}

type CodeScanningSarifsStatus struct {
	AnalysesURL      string `json:"analyses_url"`
	ProcessingStatus string `json:"processing_status"`
}

func (*CodeScanningSarifsStatus) codeScanningGetSarifResponse() {}

type CodeScanningUpdateAlertApplicationJSONRequest struct {
	DismissedReason string `json:"dismissed_reason"`
	State           string `json:"state"`
}

type CodeScanningUploadSarifApplicationJSONRequest struct {
	CheckoutURI string    `json:"checkout_uri"`
	CommitSha   string    `json:"commit_sha"`
	Ref         string    `json:"ref"`
	Sarif       string    `json:"sarif"`
	StartedAt   time.Time `json:"started_at"`
	ToolName    string    `json:"tool_name"`
}

type CodeScanningUploadSarifBadRequest struct{}

func (*CodeScanningUploadSarifBadRequest) codeScanningUploadSarifResponse() {}

type CodeScanningUploadSarifRequestEntityTooLarge struct{}

func (*CodeScanningUploadSarifRequestEntityTooLarge) codeScanningUploadSarifResponse() {}

type CodeSearchResultItem struct {
	FileSize       int                           `json:"file_size"`
	GitURL         string                        `json:"git_url"`
	HTMLURL        string                        `json:"html_url"`
	Language       string                        `json:"language"`
	LastModifiedAt time.Time                     `json:"last_modified_at"`
	LineNumbers    []string                      `json:"line_numbers"`
	Name           string                        `json:"name"`
	Path           string                        `json:"path"`
	Repository     MinimalRepository             `json:"repository"`
	Score          float                         `json:"score"`
	Sha            string                        `json:"sha"`
	TextMatches    []SearchResultTextMatchesItem `json:"text_matches"`
	URL            string                        `json:"url"`
}

type CodesOfConductGetAllCodesOfConductOK []CodeOfConduct

func (*CodesOfConductGetAllCodesOfConductOK) codesOfConductGetAllCodesOfConductResponse() {}

type Collaborator struct {
	AvatarURL         string                  `json:"avatar_url"`
	Email             string                  `json:"email"`
	EventsURL         string                  `json:"events_url"`
	FollowersURL      string                  `json:"followers_url"`
	FollowingURL      string                  `json:"following_url"`
	GistsURL          string                  `json:"gists_url"`
	GravatarID        string                  `json:"gravatar_id"`
	HTMLURL           string                  `json:"html_url"`
	ID                int                     `json:"id"`
	Login             string                  `json:"login"`
	Name              string                  `json:"name"`
	NodeID            string                  `json:"node_id"`
	OrganizationsURL  string                  `json:"organizations_url"`
	Permissions       CollaboratorPermissions `json:"permissions"`
	ReceivedEventsURL string                  `json:"received_events_url"`
	ReposURL          string                  `json:"repos_url"`
	SiteAdmin         bool                    `json:"site_admin"`
	StarredURL        string                  `json:"starred_url"`
	SubscriptionsURL  string                  `json:"subscriptions_url"`
	Type              string                  `json:"type"`
	URL               string                  `json:"url"`
}

type CollaboratorPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type CombinedBillingUsage struct {
	DaysLeftInBillingCycle       int `json:"days_left_in_billing_cycle"`
	EstimatedPaidStorageForMonth int `json:"estimated_paid_storage_for_month"`
	EstimatedStorageForMonth     int `json:"estimated_storage_for_month"`
}

type CombinedCommitStatus struct {
	CommitURL  string               `json:"commit_url"`
	Repository MinimalRepository    `json:"repository"`
	Sha        string               `json:"sha"`
	State      string               `json:"state"`
	Statuses   []SimpleCommitStatus `json:"statuses"`
	TotalCount int                  `json:"total_count"`
	URL        string               `json:"url"`
}

func (*CombinedCommitStatus) reposGetCombinedStatusForRefResponse() {}

type Commit struct {
	Author      NullableSimpleUser  `json:"author"`
	CommentsURL string              `json:"comments_url"`
	Commit      CommitCommit        `json:"commit"`
	Committer   NullableSimpleUser  `json:"committer"`
	Files       []CommitFilesItem   `json:"files"`
	HTMLURL     string              `json:"html_url"`
	NodeID      string              `json:"node_id"`
	Parents     []CommitParentsItem `json:"parents"`
	Sha         string              `json:"sha"`
	Stats       CommitStats         `json:"stats"`
	URL         string              `json:"url"`
}

func (*Commit) reposGetCommitResponse() {}
func (*Commit) reposMergeResponse()     {}

type CommitActivity struct {
	Days  []int `json:"days"`
	Total int   `json:"total"`
	Week  int   `json:"week"`
}

type CommitComment struct {
	AuthorAssociation string             `json:"author_association"`
	Body              string             `json:"body"`
	CommitID          string             `json:"commit_id"`
	CreatedAt         time.Time          `json:"created_at"`
	HTMLURL           string             `json:"html_url"`
	ID                int                `json:"id"`
	Line              int                `json:"line"`
	NodeID            string             `json:"node_id"`
	Path              string             `json:"path"`
	Position          int                `json:"position"`
	Reactions         ReactionRollup     `json:"reactions"`
	URL               string             `json:"url"`
	UpdatedAt         time.Time          `json:"updated_at"`
	User              NullableSimpleUser `json:"user"`
}

func (*CommitComment) reposCreateCommitCommentResponse() {}
func (*CommitComment) reposGetCommitCommentResponse()    {}
func (*CommitComment) reposUpdateCommitCommentResponse() {}

type CommitCommit struct {
	Author       NullableGitUser  `json:"author"`
	CommentCount int              `json:"comment_count"`
	Committer    NullableGitUser  `json:"committer"`
	Message      string           `json:"message"`
	Tree         CommitCommitTree `json:"tree"`
	URL          string           `json:"url"`
	Verification Verification     `json:"verification"`
}

type CommitCommitTree struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type CommitComparison struct {
	AheadBy         int         `json:"ahead_by"`
	BaseCommit      Commit      `json:"base_commit"`
	BehindBy        int         `json:"behind_by"`
	Commits         []Commit    `json:"commits"`
	DiffURL         string      `json:"diff_url"`
	Files           []DiffEntry `json:"files"`
	HTMLURL         string      `json:"html_url"`
	MergeBaseCommit Commit      `json:"merge_base_commit"`
	PatchURL        string      `json:"patch_url"`
	PermalinkURL    string      `json:"permalink_url"`
	Status          string      `json:"status"`
	TotalCommits    int         `json:"total_commits"`
	URL             string      `json:"url"`
}

func (*CommitComparison) reposCompareCommitsResponse() {}

type CommitFilesItem struct {
	Additions        int    `json:"additions"`
	BlobURL          string `json:"blob_url"`
	Changes          int    `json:"changes"`
	ContentsURL      string `json:"contents_url"`
	Deletions        int    `json:"deletions"`
	Filename         string `json:"filename"`
	Patch            string `json:"patch"`
	PreviousFilename string `json:"previous_filename"`
	RawURL           string `json:"raw_url"`
	Sha              string `json:"sha"`
	Status           string `json:"status"`
}

type CommitParentsItem struct {
	HTMLURL string `json:"html_url"`
	Sha     string `json:"sha"`
	URL     string `json:"url"`
}

type CommitSearchResultItem struct {
	Author      NullableSimpleUser                  `json:"author"`
	CommentsURL string                              `json:"comments_url"`
	Commit      CommitSearchResultItemCommit        `json:"commit"`
	Committer   NullableGitUser                     `json:"committer"`
	HTMLURL     string                              `json:"html_url"`
	NodeID      string                              `json:"node_id"`
	Parents     []CommitSearchResultItemParentsItem `json:"parents"`
	Repository  MinimalRepository                   `json:"repository"`
	Score       float                               `json:"score"`
	Sha         string                              `json:"sha"`
	TextMatches []SearchResultTextMatchesItem       `json:"text_matches"`
	URL         string                              `json:"url"`
}

type CommitSearchResultItemCommit struct {
	Author       CommitSearchResultItemCommitAuthor `json:"author"`
	CommentCount int                                `json:"comment_count"`
	Committer    NullableGitUser                    `json:"committer"`
	Message      string                             `json:"message"`
	Tree         CommitSearchResultItemCommitTree   `json:"tree"`
	URL          string                             `json:"url"`
	Verification Verification                       `json:"verification"`
}

type CommitSearchResultItemCommitAuthor struct {
	Date  time.Time `json:"date"`
	Email string    `json:"email"`
	Name  string    `json:"name"`
}

type CommitSearchResultItemCommitTree struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type CommitSearchResultItemParentsItem struct {
	HTMLURL string `json:"html_url"`
	Sha     string `json:"sha"`
	URL     string `json:"url"`
}

type CommitStats struct {
	Additions int `json:"additions"`
	Deletions int `json:"deletions"`
	Total     int `json:"total"`
}

type CommunityProfile struct {
	ContentReportsEnabled bool                  `json:"content_reports_enabled"`
	Description           string                `json:"description"`
	Documentation         string                `json:"documentation"`
	Files                 CommunityProfileFiles `json:"files"`
	HealthPercentage      int                   `json:"health_percentage"`
	UpdatedAt             time.Time             `json:"updated_at"`
}

type CommunityProfileFiles struct {
	CodeOfConduct       NullableCodeOfConductSimple `json:"code_of_conduct"`
	CodeOfConductFile   NullableCommunityHealthFile `json:"code_of_conduct_file"`
	Contributing        NullableCommunityHealthFile `json:"contributing"`
	IssueTemplate       NullableCommunityHealthFile `json:"issue_template"`
	License             NullableLicenseSimple       `json:"license"`
	PullRequestTemplate NullableCommunityHealthFile `json:"pull_request_template"`
	Readme              NullableCommunityHealthFile `json:"readme"`
}

type ContentFile struct {
	Content         string           `json:"content"`
	DownloadURL     string           `json:"download_url"`
	Encoding        string           `json:"encoding"`
	GitURL          string           `json:"git_url"`
	HTMLURL         string           `json:"html_url"`
	Links           ContentFileLinks `json:"_links"`
	Name            string           `json:"name"`
	Path            string           `json:"path"`
	Sha             string           `json:"sha"`
	Size            int              `json:"size"`
	SubmoduleGitURL string           `json:"submodule_git_url"`
	Target          string           `json:"target"`
	Type            string           `json:"type"`
	URL             string           `json:"url"`
}

func (*ContentFile) reposGetReadmeInDirectoryResponse() {}
func (*ContentFile) reposGetReadmeResponse()            {}

type ContentFileLinks struct {
	Git  string `json:"git"`
	HTML string `json:"html"`
	Self string `json:"self"`
}

type ContentReferenceAttachment struct {
	Body   string `json:"body"`
	ID     int    `json:"id"`
	NodeID string `json:"node_id"`
	Title  string `json:"title"`
}

func (*ContentReferenceAttachment) appsCreateContentAttachmentResponse() {}

type ContentTraffic struct {
	Count   int    `json:"count"`
	Path    string `json:"path"`
	Title   string `json:"title"`
	Uniques int    `json:"uniques"`
}

type ContentTree struct {
	DownloadURL string                   `json:"download_url"`
	Entries     []ContentTreeEntriesItem `json:"entries"`
	GitURL      string                   `json:"git_url"`
	HTMLURL     string                   `json:"html_url"`
	Links       ContentTreeLinks         `json:"_links"`
	Name        string                   `json:"name"`
	Path        string                   `json:"path"`
	Sha         string                   `json:"sha"`
	Size        int                      `json:"size"`
	Type        string                   `json:"type"`
	URL         string                   `json:"url"`
}

func (*ContentTree) reposGetContentResponse() {}

type ContentTreeEntriesItem struct {
	Content     string                      `json:"content"`
	DownloadURL string                      `json:"download_url"`
	GitURL      string                      `json:"git_url"`
	HTMLURL     string                      `json:"html_url"`
	Links       ContentTreeEntriesItemLinks `json:"_links"`
	Name        string                      `json:"name"`
	Path        string                      `json:"path"`
	Sha         string                      `json:"sha"`
	Size        int                         `json:"size"`
	Type        string                      `json:"type"`
	URL         string                      `json:"url"`
}

type ContentTreeEntriesItemLinks struct {
	Git  string `json:"git"`
	HTML string `json:"html"`
	Self string `json:"self"`
}

type ContentTreeLinks struct {
	Git  string `json:"git"`
	HTML string `json:"html"`
	Self string `json:"self"`
}

type Contributor struct {
	AvatarURL         string `json:"avatar_url"`
	Contributions     int    `json:"contributions"`
	Email             string `json:"email"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	Name              string `json:"name"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type ContributorActivity struct {
	Author NullableSimpleUser             `json:"author"`
	Total  int                            `json:"total"`
	Weeks  []ContributorActivityWeeksItem `json:"weeks"`
}

type ContributorActivityWeeksItem struct {
	A int `json:"a"`
	C int `json:"c"`
	D int `json:"d"`
	W int `json:"w"`
}

type CredentialAuthorization struct {
	AuthorizedCredentialID    int       `json:"authorized_credential_id"`
	AuthorizedCredentialNote  string    `json:"authorized_credential_note"`
	AuthorizedCredentialTitle string    `json:"authorized_credential_title"`
	CredentialAccessedAt      time.Time `json:"credential_accessed_at"`
	CredentialAuthorizedAt    time.Time `json:"credential_authorized_at"`
	CredentialID              int       `json:"credential_id"`
	CredentialType            string    `json:"credential_type"`
	Fingerprint               string    `json:"fingerprint"`
	Login                     string    `json:"login"`
	Scopes                    []string  `json:"scopes"`
	TokenLastEight            string    `json:"token_last_eight"`
}

type DeployKey struct {
	CreatedAt string `json:"created_at"`
	ID        int    `json:"id"`
	Key       string `json:"key"`
	ReadOnly  bool   `json:"read_only"`
	Title     string `json:"title"`
	URL       string `json:"url"`
	Verified  bool   `json:"verified"`
}

func (*DeployKey) reposCreateDeployKeyResponse() {}
func (*DeployKey) reposGetDeployKeyResponse()    {}

type Deployment struct {
	ID                    int                 `json:"id"`
	Ref                   string              `json:"ref"`
	OriginalEnvironment   string              `json:"original_environment"`
	Description           string              `json:"description"`
	ProductionEnvironment bool                `json:"production_environment"`
	CreatedAt             time.Time           `json:"created_at"`
	StatusesURL           string              `json:"statuses_url"`
	PerformedViaGithubApp NullableIntegration `json:"performed_via_github_app"`
	URL                   string              `json:"url"`
	NodeID                string              `json:"node_id"`
}

func (*Deployment) reposCreateDeploymentResponse() {}

type DeploymentBranchPolicy struct {
	CustomBranchPolicies bool `json:"custom_branch_policies"`
	ProtectedBranches    bool `json:"protected_branches"`
}

type DeploymentStatus struct {
	CreatedAt             time.Time           `json:"created_at"`
	Creator               NullableSimpleUser  `json:"creator"`
	DeploymentURL         string              `json:"deployment_url"`
	Description           string              `json:"description"`
	Environment           string              `json:"environment"`
	EnvironmentURL        string              `json:"environment_url"`
	ID                    int                 `json:"id"`
	LogURL                string              `json:"log_url"`
	NodeID                string              `json:"node_id"`
	PerformedViaGithubApp NullableIntegration `json:"performed_via_github_app"`
	RepositoryURL         string              `json:"repository_url"`
	State                 string              `json:"state"`
	TargetURL             string              `json:"target_url"`
	URL                   string              `json:"url"`
	UpdatedAt             time.Time           `json:"updated_at"`
}

func (*DeploymentStatus) reposCreateDeploymentStatusResponse() {}
func (*DeploymentStatus) reposGetDeploymentStatusResponse()    {}

type DiffEntry struct {
	Additions        int    `json:"additions"`
	BlobURL          string `json:"blob_url"`
	Changes          int    `json:"changes"`
	ContentsURL      string `json:"contents_url"`
	Deletions        int    `json:"deletions"`
	Filename         string `json:"filename"`
	Patch            string `json:"patch"`
	PreviousFilename string `json:"previous_filename"`
	RawURL           string `json:"raw_url"`
	Sha              string `json:"sha"`
	Status           string `json:"status"`
}

type Email struct {
	Email      string `json:"email"`
	Primary    bool   `json:"primary"`
	Verified   bool   `json:"verified"`
	Visibility string `json:"visibility"`
}

type EmojisGetOK struct{}

func (*EmojisGetOK) emojisGetResponse() {}

type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise struct{}

type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise struct{}

type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest struct {
	Name                    string `json:"name"`
	Runners                 []int  `json:"runners"`
	SelectedOrganizationIds []int  `json:"selected_organization_ids"`
	Visibility              string `json:"visibility"`
}

type EnterpriseAdminDeleteScimGroupFromEnterprise struct{}

type EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise struct{}

type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise struct{}

type EnterpriseAdminDeleteUserFromEnterprise struct{}

type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise struct{}

type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise struct{}

type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise struct {
	Organizations []OrganizationSimple `json:"organizations"`
	TotalCount    float                `json:"total_count"`
}

type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise struct {
	Organizations []OrganizationSimple `json:"organizations"`
	TotalCount    float                `json:"total_count"`
}

type EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise struct {
	RunnerGroups []RunnerGroupsEnterprise `json:"runner_groups"`
	TotalCount   float                    `json:"total_count"`
}

type EnterpriseAdminListSelfHostedRunnersForEnterprise struct {
	Runners    []Runner `json:"runners"`
	TotalCount float    `json:"total_count"`
}

type EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise struct {
	Runners    []Runner `json:"runners"`
	TotalCount float    `json:"total_count"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest struct {
	DisplayName string                                                                              `json:"displayName"`
	Members     []EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequestMembersItem `json:"members"`
	Schemas     []string                                                                            `json:"schemas"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequestMembersItem struct {
	Value string `json:"value"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest struct {
	Emails   []EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestEmailsItem `json:"emails"`
	Groups   []EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestGroupsItem `json:"groups"`
	Name     EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestName         `json:"name"`
	Schemas  []string                                                                          `json:"schemas"`
	UserName string                                                                            `json:"userName"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestEmailsItem struct {
	Primary bool   `json:"primary"`
	Type    string `json:"type"`
	Value   string `json:"value"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestGroupsItem struct {
	Value string `json:"value"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestName struct {
	FamilyName string `json:"familyName"`
	GivenName  string `json:"givenName"`
}

type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise struct{}

type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise struct{}

type EnterpriseAdminSetAllowedActionsEnterprise struct{}

type EnterpriseAdminSetGithubActionsPermissionsEnterprise struct{}

type EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest struct {
	AllowedActions       string `json:"allowed_actions"`
	EnabledOrganizations string `json:"enabled_organizations"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest struct {
	DisplayName string                                                                                        `json:"displayName"`
	Members     []EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequestMembersItem `json:"members"`
	Schemas     []string                                                                                      `json:"schemas"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequestMembersItem struct {
	Value string `json:"value"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest struct {
	Emails   []EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestEmailsItem `json:"emails"`
	Groups   []EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestGroupsItem `json:"groups"`
	Name     EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestName         `json:"name"`
	Schemas  []string                                                                                    `json:"schemas"`
	UserName string                                                                                      `json:"userName"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestEmailsItem struct {
	Primary bool   `json:"primary"`
	Type    string `json:"type"`
	Value   string `json:"value"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestGroupsItem struct {
	Value string `json:"value"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestName struct {
	FamilyName string `json:"familyName"`
	GivenName  string `json:"givenName"`
}

type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise struct{}

type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest struct {
	SelectedOrganizationIds []int `json:"selected_organization_ids"`
}

type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise struct{}

type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest struct {
	SelectedOrganizationIds []int `json:"selected_organization_ids"`
}

type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise struct{}

type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest struct {
	Runners []int `json:"runners"`
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupApplicationJSONRequest struct {
}

type EnterpriseAdminUpdateAttributeForEnterpriseGroupApplicationJSONRequestOperationsItem struct {
}

type EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest struct {
	Operations []struct{} `json:"Operations"`
	Schemas    []string   `json:"schemas"`
}

type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest struct {
	Name       string `json:"name"`
	Visibility string `json:"visibility"`
}

type Environment struct {
	ID        int       `json:"id"`
	Name      string    `json:"name"`
	URL       string    `json:"url"`
	HTMLURL   string    `json:"html_url"`
	UpdatedAt time.Time `json:"updated_at"`
	NodeID    string    `json:"node_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (*Environment) reposCreateOrUpdateEnvironmentResponse() {}

type EnvironmentApprovals struct {
	Comment      string                                 `json:"comment"`
	Environments []EnvironmentApprovalsEnvironmentsItem `json:"environments"`
	State        string                                 `json:"state"`
	User         SimpleUser                             `json:"user"`
}

type EnvironmentApprovalsEnvironmentsItem struct {
	CreatedAt time.Time `json:"created_at"`
	HTMLURL   string    `json:"html_url"`
	ID        int       `json:"id"`
	Name      string    `json:"name"`
	NodeID    string    `json:"node_id"`
	URL       string    `json:"url"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Event struct {
	Actor     Actor        `json:"actor"`
	CreatedAt time.Time    `json:"created_at"`
	ID        string       `json:"id"`
	Org       Actor        `json:"org"`
	Payload   EventPayload `json:"payload"`
	Public    bool         `json:"public"`
	Repo      EventRepo    `json:"repo"`
	Type      string       `json:"type"`
}

type EventPayload struct {
	Action  string                  `json:"action"`
	Comment IssueComment            `json:"comment"`
	Issue   IssueSimple             `json:"issue"`
	Pages   []EventPayloadPagesItem `json:"pages"`
}

type EventPayloadPagesItem struct {
	Action   string `json:"action"`
	HTMLURL  string `json:"html_url"`
	PageName string `json:"page_name"`
	Sha      string `json:"sha"`
	Summary  string `json:"summary"`
	Title    string `json:"title"`
}

type EventRepo struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	URL  string `json:"url"`
}

type Feed struct {
	CurrentUserActorURL         string    `json:"current_user_actor_url"`
	CurrentUserOrganizationURL  string    `json:"current_user_organization_url"`
	CurrentUserOrganizationUrls []string  `json:"current_user_organization_urls"`
	CurrentUserPublicURL        string    `json:"current_user_public_url"`
	CurrentUserURL              string    `json:"current_user_url"`
	Links                       FeedLinks `json:"_links"`
	SecurityAdvisoriesURL       string    `json:"security_advisories_url"`
	TimelineURL                 string    `json:"timeline_url"`
	UserURL                     string    `json:"user_url"`
}

type FeedLinks struct {
	CurrentUser              LinkWithType   `json:"current_user"`
	CurrentUserActor         LinkWithType   `json:"current_user_actor"`
	CurrentUserOrganization  LinkWithType   `json:"current_user_organization"`
	CurrentUserOrganizations []LinkWithType `json:"current_user_organizations"`
	CurrentUserPublic        LinkWithType   `json:"current_user_public"`
	SecurityAdvisories       LinkWithType   `json:"security_advisories"`
	Timeline                 LinkWithType   `json:"timeline"`
	User                     LinkWithType   `json:"user"`
}

type FileCommit struct {
	Commit  FileCommitCommit  `json:"commit"`
	Content FileCommitContent `json:"content"`
}

func (*FileCommit) reposCreateOrUpdateFileContentsResponse() {}
func (*FileCommit) reposDeleteFileResponse()                 {}

type FileCommitCommit struct {
	Author       FileCommitCommitAuthor        `json:"author"`
	Committer    FileCommitCommitCommitter     `json:"committer"`
	HTMLURL      string                        `json:"html_url"`
	Message      string                        `json:"message"`
	NodeID       string                        `json:"node_id"`
	Parents      []FileCommitCommitParentsItem `json:"parents"`
	Sha          string                        `json:"sha"`
	Tree         FileCommitCommitTree          `json:"tree"`
	URL          string                        `json:"url"`
	Verification FileCommitCommitVerification  `json:"verification"`
}

type FileCommitCommitAuthor struct {
	Date  string `json:"date"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

type FileCommitCommitCommitter struct {
	Date  string `json:"date"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

type FileCommitCommitParentsItem struct {
	HTMLURL string `json:"html_url"`
	Sha     string `json:"sha"`
	URL     string `json:"url"`
}

type FileCommitCommitTree struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type FileCommitCommitVerification struct {
	Payload   string `json:"payload"`
	Reason    string `json:"reason"`
	Signature string `json:"signature"`
	Verified  bool   `json:"verified"`
}

type FileCommitContent struct {
	DownloadURL string                 `json:"download_url"`
	GitURL      string                 `json:"git_url"`
	HTMLURL     string                 `json:"html_url"`
	Links       FileCommitContentLinks `json:"_links"`
	Name        string                 `json:"name"`
	Path        string                 `json:"path"`
	Sha         string                 `json:"sha"`
	Size        int                    `json:"size"`
	Type        string                 `json:"type"`
	URL         string                 `json:"url"`
}

type FileCommitContentLinks struct {
	Git  string `json:"git"`
	HTML string `json:"html"`
	Self string `json:"self"`
}

type FullRepository struct {
	AllowAutoMerge         bool                              `json:"allow_auto_merge"`
	AllowForking           bool                              `json:"allow_forking"`
	AllowMergeCommit       bool                              `json:"allow_merge_commit"`
	AllowRebaseMerge       bool                              `json:"allow_rebase_merge"`
	AllowSquashMerge       bool                              `json:"allow_squash_merge"`
	AnonymousAccessEnabled bool                              `json:"anonymous_access_enabled"`
	ArchiveURL             string                            `json:"archive_url"`
	Archived               bool                              `json:"archived"`
	AssigneesURL           string                            `json:"assignees_url"`
	BlobsURL               string                            `json:"blobs_url"`
	BranchesURL            string                            `json:"branches_url"`
	CloneURL               string                            `json:"clone_url"`
	CodeOfConduct          CodeOfConductSimple               `json:"code_of_conduct"`
	CollaboratorsURL       string                            `json:"collaborators_url"`
	CommentsURL            string                            `json:"comments_url"`
	CommitsURL             string                            `json:"commits_url"`
	CompareURL             string                            `json:"compare_url"`
	ContentsURL            string                            `json:"contents_url"`
	ContributorsURL        string                            `json:"contributors_url"`
	CreatedAt              time.Time                         `json:"created_at"`
	DefaultBranch          string                            `json:"default_branch"`
	DeleteBranchOnMerge    bool                              `json:"delete_branch_on_merge"`
	DeploymentsURL         string                            `json:"deployments_url"`
	Description            string                            `json:"description"`
	Disabled               bool                              `json:"disabled"`
	DownloadsURL           string                            `json:"downloads_url"`
	EventsURL              string                            `json:"events_url"`
	Fork                   bool                              `json:"fork"`
	Forks                  int                               `json:"forks"`
	ForksCount             int                               `json:"forks_count"`
	ForksURL               string                            `json:"forks_url"`
	FullName               string                            `json:"full_name"`
	GitCommitsURL          string                            `json:"git_commits_url"`
	GitRefsURL             string                            `json:"git_refs_url"`
	GitTagsURL             string                            `json:"git_tags_url"`
	GitURL                 string                            `json:"git_url"`
	HTMLURL                string                            `json:"html_url"`
	HasDownloads           bool                              `json:"has_downloads"`
	HasIssues              bool                              `json:"has_issues"`
	HasPages               bool                              `json:"has_pages"`
	HasProjects            bool                              `json:"has_projects"`
	HasWiki                bool                              `json:"has_wiki"`
	Homepage               string                            `json:"homepage"`
	HooksURL               string                            `json:"hooks_url"`
	ID                     int                               `json:"id"`
	IsTemplate             bool                              `json:"is_template"`
	IssueCommentURL        string                            `json:"issue_comment_url"`
	IssueEventsURL         string                            `json:"issue_events_url"`
	IssuesURL              string                            `json:"issues_url"`
	KeysURL                string                            `json:"keys_url"`
	LabelsURL              string                            `json:"labels_url"`
	Language               string                            `json:"language"`
	LanguagesURL           string                            `json:"languages_url"`
	License                NullableLicenseSimple             `json:"license"`
	MasterBranch           string                            `json:"master_branch"`
	MergesURL              string                            `json:"merges_url"`
	MilestonesURL          string                            `json:"milestones_url"`
	MirrorURL              string                            `json:"mirror_url"`
	Name                   string                            `json:"name"`
	NetworkCount           int                               `json:"network_count"`
	NodeID                 string                            `json:"node_id"`
	NotificationsURL       string                            `json:"notifications_url"`
	OpenIssues             int                               `json:"open_issues"`
	OpenIssuesCount        int                               `json:"open_issues_count"`
	Organization           NullableSimpleUser                `json:"organization"`
	Owner                  SimpleUser                        `json:"owner"`
	Parent                 Repository                        `json:"parent"`
	Permissions            FullRepositoryPermissions         `json:"permissions"`
	Private                bool                              `json:"private"`
	PullsURL               string                            `json:"pulls_url"`
	PushedAt               time.Time                         `json:"pushed_at"`
	ReleasesURL            string                            `json:"releases_url"`
	SSHURL                 string                            `json:"ssh_url"`
	SecurityAndAnalysis    FullRepositorySecurityAndAnalysis `json:"security_and_analysis"`
	Size                   int                               `json:"size"`
	Source                 Repository                        `json:"source"`
	StargazersCount        int                               `json:"stargazers_count"`
	StargazersURL          string                            `json:"stargazers_url"`
	StatusesURL            string                            `json:"statuses_url"`
	SubscribersCount       int                               `json:"subscribers_count"`
	SubscribersURL         string                            `json:"subscribers_url"`
	SubscriptionURL        string                            `json:"subscription_url"`
	SvnURL                 string                            `json:"svn_url"`
	TagsURL                string                            `json:"tags_url"`
	TeamsURL               string                            `json:"teams_url"`
	TempCloneToken         string                            `json:"temp_clone_token"`
	TemplateRepository     NullableRepository                `json:"template_repository"`
	Topics                 []string                          `json:"topics"`
	TreesURL               string                            `json:"trees_url"`
	URL                    string                            `json:"url"`
	UpdatedAt              time.Time                         `json:"updated_at"`
	Visibility             string                            `json:"visibility"`
	Watchers               int                               `json:"watchers"`
	WatchersCount          int                               `json:"watchers_count"`
}

func (*FullRepository) reposCreateForkResponse() {}
func (*FullRepository) reposGetResponse()        {}
func (*FullRepository) reposUpdateResponse()     {}

type FullRepositoryPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type FullRepositorySecurityAndAnalysis struct {
	AdvancedSecurity FullRepositorySecurityAndAnalysisAdvancedSecurity `json:"advanced_security"`
	SecretScanning   FullRepositorySecurityAndAnalysisSecretScanning   `json:"secret_scanning"`
}

type FullRepositorySecurityAndAnalysisAdvancedSecurity struct {
	Status string `json:"status"`
}

type FullRepositorySecurityAndAnalysisSecretScanning struct {
	Status string `json:"status"`
}

type GistComment struct {
	AuthorAssociation string             `json:"author_association"`
	Body              string             `json:"body"`
	CreatedAt         time.Time          `json:"created_at"`
	ID                int                `json:"id"`
	NodeID            string             `json:"node_id"`
	URL               string             `json:"url"`
	UpdatedAt         time.Time          `json:"updated_at"`
	User              NullableSimpleUser `json:"user"`
}

func (*GistComment) gistsCreateCommentResponse() {}
func (*GistComment) gistsGetCommentResponse()    {}
func (*GistComment) gistsUpdateCommentResponse() {}

type GistCommit struct {
	ChangeStatus GistCommitChangeStatus `json:"change_status"`
	CommittedAt  time.Time              `json:"committed_at"`
	URL          string                 `json:"url"`
	User         NullableSimpleUser     `json:"user"`
	Version      string                 `json:"version"`
}

type GistCommitChangeStatus struct {
	Additions int `json:"additions"`
	Deletions int `json:"deletions"`
	Total     int `json:"total"`
}

type GistHistory struct {
	ChangeStatus GistHistoryChangeStatus `json:"change_status"`
	CommittedAt  time.Time               `json:"committed_at"`
	URL          string                  `json:"url"`
	User         NullableSimpleUser      `json:"user"`
	Version      string                  `json:"version"`
}

type GistHistoryChangeStatus struct {
	Additions int `json:"additions"`
	Deletions int `json:"deletions"`
	Total     int `json:"total"`
}

type GistSimple struct {
	Files       struct{}      `json:"files"`
	Description string        `json:"description"`
	CommentsURL string        `json:"comments_url"`
	CommitsURL  string        `json:"commits_url"`
	GitPullURL  string        `json:"git_pull_url"`
	GitPushURL  string        `json:"git_push_url"`
	ID          string        `json:"id"`
	UpdatedAt   string        `json:"updated_at"`
	User        string        `json:"user"`
	Truncated   bool          `json:"truncated"`
	History     []GistHistory `json:"history"`
}

func (*GistSimple) gistsCreateResponse()      {}
func (*GistSimple) gistsGetResponse()         {}
func (*GistSimple) gistsGetRevisionResponse() {}
func (*GistSimple) gistsUpdateResponse()      {}

type GistSimpleForkOf struct {
	GitPushURL  string             `json:"git_push_url"`
	HTMLURL     string             `json:"html_url"`
	CommentsURL string             `json:"comments_url"`
	Owner       NullableSimpleUser `json:"owner"`
	Truncated   bool               `json:"truncated"`
	URL         string             `json:"url"`
	ID          string             `json:"id"`
	GitPullURL  string             `json:"git_pull_url"`
	Description string             `json:"description"`
}

type GistsCheckIsStarredNoContent struct{}

func (*GistsCheckIsStarredNoContent) gistsCheckIsStarredResponse() {}

type GistsCheckIsStarredNotFound struct{}

func (*GistsCheckIsStarredNotFound) gistsCheckIsStarredResponse() {}

type GistsCreateApplicationJSONRequest struct {
	Description string   `json:"description"`
	Files       struct{} `json:"files"`
}

type GistsCreateCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type GistsDeleteCommentNoContent struct{}

func (*GistsDeleteCommentNoContent) gistsDeleteCommentResponse() {}

type GistsDeleteNoContent struct{}

func (*GistsDeleteNoContent) gistsDeleteResponse() {}

type GistsListCommentsOK []GistComment

func (*GistsListCommentsOK) gistsListCommentsResponse() {}

type GistsListCommitsOK []GistCommit

func (*GistsListCommitsOK) gistsListCommitsResponse() {}

type GistsListForUserOK []BaseGist

func (*GistsListForUserOK) gistsListForUserResponse() {}

type GistsListOK []BaseGist

func (*GistsListOK) gistsListResponse() {}

type GistsListPublicOK []BaseGist

func (*GistsListPublicOK) gistsListPublicResponse() {}

type GistsListStarredOK []BaseGist

func (*GistsListStarredOK) gistsListStarredResponse() {}

type GistsStarNoContent struct{}

func (*GistsStarNoContent) gistsStarResponse() {}

type GistsUnstarNoContent struct{}

func (*GistsUnstarNoContent) gistsUnstarResponse() {}

type GistsUpdateApplicationJSONRequest struct {
	Description string   `json:"description"`
	Files       struct{} `json:"files"`
}

type GistsUpdateCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type GitCommit struct {
	Author       GitCommitAuthor        `json:"author"`
	Committer    GitCommitCommitter     `json:"committer"`
	HTMLURL      string                 `json:"html_url"`
	Message      string                 `json:"message"`
	NodeID       string                 `json:"node_id"`
	Parents      []GitCommitParentsItem `json:"parents"`
	Sha          string                 `json:"sha"`
	Tree         GitCommitTree          `json:"tree"`
	URL          string                 `json:"url"`
	Verification GitCommitVerification  `json:"verification"`
}

func (*GitCommit) gitCreateCommitResponse() {}
func (*GitCommit) gitGetCommitResponse()    {}

type GitCommitAuthor struct {
	Date  time.Time `json:"date"`
	Email string    `json:"email"`
	Name  string    `json:"name"`
}

type GitCommitCommitter struct {
	Date  time.Time `json:"date"`
	Email string    `json:"email"`
	Name  string    `json:"name"`
}

type GitCommitParentsItem struct {
	HTMLURL string `json:"html_url"`
	Sha     string `json:"sha"`
	URL     string `json:"url"`
}

type GitCommitTree struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type GitCommitVerification struct {
	Payload   string `json:"payload"`
	Reason    string `json:"reason"`
	Signature string `json:"signature"`
	Verified  bool   `json:"verified"`
}

type GitCreateBlobApplicationJSONRequest struct {
	Content  string `json:"content"`
	Encoding string `json:"encoding"`
}

type GitCreateCommitApplicationJSONRequest struct {
	Author    GitCreateCommitApplicationJSONRequestAuthor    `json:"author"`
	Committer GitCreateCommitApplicationJSONRequestCommitter `json:"committer"`
	Message   string                                         `json:"message"`
	Parents   []string                                       `json:"parents"`
	Signature string                                         `json:"signature"`
	Tree      string                                         `json:"tree"`
}

type GitCreateCommitApplicationJSONRequestAuthor struct {
	Date  time.Time `json:"date"`
	Email string    `json:"email"`
	Name  string    `json:"name"`
}

type GitCreateCommitApplicationJSONRequestCommitter struct {
	Date  time.Time `json:"date"`
	Email string    `json:"email"`
	Name  string    `json:"name"`
}

type GitCreateRefApplicationJSONRequest struct {
	Key string `json:"key"`
	Ref string `json:"ref"`
	Sha string `json:"sha"`
}

type GitCreateTagApplicationJSONRequest struct {
	Message string                                   `json:"message"`
	Object  string                                   `json:"object"`
	Tag     string                                   `json:"tag"`
	Tagger  GitCreateTagApplicationJSONRequestTagger `json:"tagger"`
	Type    string                                   `json:"type"`
}

type GitCreateTagApplicationJSONRequestTagger struct {
	Date  time.Time `json:"date"`
	Email string    `json:"email"`
	Name  string    `json:"name"`
}

type GitCreateTreeApplicationJSONRequest struct {
	BaseTree string                                        `json:"base_tree"`
	Tree     []GitCreateTreeApplicationJSONRequestTreeItem `json:"tree"`
}

type GitCreateTreeApplicationJSONRequestTreeItem struct {
	Content string `json:"content"`
	Mode    string `json:"mode"`
	Path    string `json:"path"`
	Sha     string `json:"sha"`
	Type    string `json:"type"`
}

type GitDeleteRefNoContent struct{}

func (*GitDeleteRefNoContent) gitDeleteRefResponse() {}

type GitRef struct {
	NodeID string       `json:"node_id"`
	Object GitRefObject `json:"object"`
	Ref    string       `json:"ref"`
	URL    string       `json:"url"`
}

func (*GitRef) gitCreateRefResponse() {}
func (*GitRef) gitGetRefResponse()    {}
func (*GitRef) gitUpdateRefResponse() {}

type GitRefObject struct {
	Sha  string `json:"sha"`
	Type string `json:"type"`
	URL  string `json:"url"`
}

type GitTag struct {
	Message      string       `json:"message"`
	NodeID       string       `json:"node_id"`
	Object       GitTagObject `json:"object"`
	Sha          string       `json:"sha"`
	Tag          string       `json:"tag"`
	Tagger       GitTagTagger `json:"tagger"`
	URL          string       `json:"url"`
	Verification Verification `json:"verification"`
}

func (*GitTag) gitCreateTagResponse() {}
func (*GitTag) gitGetTagResponse()    {}

type GitTagObject struct {
	Sha  string `json:"sha"`
	Type string `json:"type"`
	URL  string `json:"url"`
}

type GitTagTagger struct {
	Date  string `json:"date"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

type GitTree struct {
	Sha       string            `json:"sha"`
	Tree      []GitTreeTreeItem `json:"tree"`
	Truncated bool              `json:"truncated"`
	URL       string            `json:"url"`
}

func (*GitTree) gitCreateTreeResponse() {}
func (*GitTree) gitGetTreeResponse()    {}

type GitTreeTreeItem struct {
	Mode string `json:"mode"`
	Path string `json:"path"`
	Sha  string `json:"sha"`
	Size int    `json:"size"`
	Type string `json:"type"`
	URL  string `json:"url"`
}

type GitUpdateRefApplicationJSONRequest struct {
	Force bool   `json:"force"`
	Sha   string `json:"sha"`
}

type GitignoreGetAllTemplatesOK []string

func (*GitignoreGetAllTemplatesOK) gitignoreGetAllTemplatesResponse() {}

type GitignoreTemplate struct {
	Name   string `json:"name"`
	Source string `json:"source"`
}

func (*GitignoreTemplate) gitignoreGetTemplateResponse() {}

type GpgKey struct {
	ID                int                `json:"id"`
	Emails            []GpgKeyEmailsItem `json:"emails"`
	CanEncryptComms   bool               `json:"can_encrypt_comms"`
	CanEncryptStorage bool               `json:"can_encrypt_storage"`
	CreatedAt         time.Time          `json:"created_at"`
	CanCertify        bool               `json:"can_certify"`
	ExpiresAt         time.Time          `json:"expires_at"`
	RawKey            string             `json:"raw_key"`
	PrimaryKeyID      int                `json:"primary_key_id"`
	KeyID             string             `json:"key_id"`
	PublicKey         string             `json:"public_key"`
}

func (*GpgKey) usersCreateGpgKeyForAuthenticatedResponse() {}
func (*GpgKey) usersGetGpgKeyForAuthenticatedResponse()    {}

type GpgKeyEmailsItem struct {
	Email    string `json:"email"`
	Verified bool   `json:"verified"`
}

type GpgKeySubkeysItem struct {
	CanEncryptComms   bool   `json:"can_encrypt_comms"`
	CanEncryptStorage bool   `json:"can_encrypt_storage"`
	PrimaryKeyID      int    `json:"primary_key_id"`
	KeyID             string `json:"key_id"`
	PublicKey         string `json:"public_key"`
}

type GroupMapping struct {
	Groups []GroupMappingGroupsItem `json:"groups"`
}

func (*GroupMapping) teamsCreateOrUpdateIdpGroupConnectionsLegacyResponse() {}
func (*GroupMapping) teamsListIdpGroupsForLegacyResponse()                  {}

type GroupMappingGroupsItem struct {
	GroupDescription string `json:"group_description"`
	GroupID          string `json:"group_id"`
	GroupName        string `json:"group_name"`
	Status           string `json:"status"`
	SyncedAt         string `json:"synced_at"`
}

type Hook struct {
	Type         string       `json:"type"`
	ID           int          `json:"id"`
	CreatedAt    time.Time    `json:"created_at"`
	LastResponse HookResponse `json:"last_response"`
	PingURL      string       `json:"ping_url"`
	Name         string       `json:"name"`
	Active       bool         `json:"active"`
	Events       []string     `json:"events"`
}

func (*Hook) reposCreateWebhookResponse() {}
func (*Hook) reposGetWebhookResponse()    {}
func (*Hook) reposUpdateWebhookResponse() {}

type HookConfig struct {
	Room      string `json:"room"`
	Subdomain string `json:"subdomain"`
	URL       string `json:"url"`
}

type HookDelivery struct {
	Action         string               `json:"action"`
	DeliveredAt    time.Time            `json:"delivered_at"`
	Duration       float                `json:"duration"`
	Event          string               `json:"event"`
	GUID           string               `json:"guid"`
	ID             int                  `json:"id"`
	InstallationID int                  `json:"installation_id"`
	Redelivery     bool                 `json:"redelivery"`
	RepositoryID   int                  `json:"repository_id"`
	Request        HookDeliveryRequest  `json:"request"`
	Response       HookDeliveryResponse `json:"response"`
	Status         string               `json:"status"`
	StatusCode     int                  `json:"status_code"`
	URL            string               `json:"url"`
}

func (*HookDelivery) appsGetWebhookDeliveryResponse()  {}
func (*HookDelivery) orgsGetWebhookDeliveryResponse()  {}
func (*HookDelivery) reposGetWebhookDeliveryResponse() {}

type HookDeliveryItem struct {
	Action         string    `json:"action"`
	DeliveredAt    time.Time `json:"delivered_at"`
	Duration       float     `json:"duration"`
	Event          string    `json:"event"`
	GUID           string    `json:"guid"`
	ID             int       `json:"id"`
	InstallationID int       `json:"installation_id"`
	Redelivery     bool      `json:"redelivery"`
	RepositoryID   int       `json:"repository_id"`
	Status         string    `json:"status"`
	StatusCode     int       `json:"status_code"`
}

type HookDeliveryRequest struct {
	Headers struct{} `json:"headers"`
	Payload struct{} `json:"payload"`
}

type HookDeliveryResponse struct {
	Headers struct{} `json:"headers"`
	Payload string   `json:"payload"`
}

type HookResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Status  string `json:"status"`
}

type Hovercard struct {
	Contexts []HovercardContextsItem `json:"contexts"`
}

func (*Hovercard) usersGetContextForUserResponse() {}

type HovercardContextsItem struct {
	Message string `json:"message"`
	Octicon string `json:"octicon"`
}

type Import struct {
	AuthorsCount    int                        `json:"authors_count"`
	AuthorsURL      string                     `json:"authors_url"`
	CommitCount     int                        `json:"commit_count"`
	ErrorMessage    string                     `json:"error_message"`
	FailedStep      string                     `json:"failed_step"`
	HTMLURL         string                     `json:"html_url"`
	HasLargeFiles   bool                       `json:"has_large_files"`
	ImportPercent   int                        `json:"import_percent"`
	LargeFilesCount int                        `json:"large_files_count"`
	LargeFilesSize  int                        `json:"large_files_size"`
	Message         string                     `json:"message"`
	ProjectChoices  []ImportProjectChoicesItem `json:"project_choices"`
	PushPercent     int                        `json:"push_percent"`
	RepositoryURL   string                     `json:"repository_url"`
	Status          string                     `json:"status"`
	StatusText      string                     `json:"status_text"`
	SvcRoot         string                     `json:"svc_root"`
	SvnRoot         string                     `json:"svn_root"`
	TfvcProject     string                     `json:"tfvc_project"`
	URL             string                     `json:"url"`
	UseLfs          bool                       `json:"use_lfs"`
	Vcs             string                     `json:"vcs"`
	VcsURL          string                     `json:"vcs_url"`
}

func (*Import) migrationsGetImportStatusResponse()  {}
func (*Import) migrationsSetLfsPreferenceResponse() {}
func (*Import) migrationsStartImportResponse()      {}

type ImportProjectChoicesItem struct {
	HumanName   string `json:"human_name"`
	TfvcProject string `json:"tfvc_project"`
	Vcs         string `json:"vcs"`
}

type Installation struct {
	RepositoriesURL        string             `json:"repositories_url"`
	AppID                  int                `json:"app_id"`
	Permissions            AppPermissions     `json:"permissions"`
	Events                 []string           `json:"events"`
	SuspendedBy            NullableSimpleUser `json:"suspended_by"`
	AccessTokensURL        string             `json:"access_tokens_url"`
	TargetID               int                `json:"target_id"`
	TargetType             string             `json:"target_type"`
	SuspendedAt            time.Time          `json:"suspended_at"`
	CreatedAt              time.Time          `json:"created_at"`
	UpdatedAt              time.Time          `json:"updated_at"`
	HasMultipleSingleFiles bool               `json:"has_multiple_single_files"`
	SingleFilePaths        []string           `json:"single_file_paths"`
	ContactEmail           string             `json:"contact_email"`
	ID                     int                `json:"id"`
}

func (*Installation) appsGetInstallationResponse()     {}
func (*Installation) appsGetRepoInstallationResponse() {}

type InstallationToken struct {
	ExpiresAt              string         `json:"expires_at"`
	HasMultipleSingleFiles bool           `json:"has_multiple_single_files"`
	Permissions            AppPermissions `json:"permissions"`
	Repositories           []Repository   `json:"repositories"`
	RepositorySelection    string         `json:"repository_selection"`
	SingleFile             string         `json:"single_file"`
	SingleFilePaths        []string       `json:"single_file_paths"`
	Token                  string         `json:"token"`
}

func (*InstallationToken) appsCreateInstallationAccessTokenResponse() {}

type Integration struct {
	ClientID           string                 `json:"client_id"`
	ClientSecret       string                 `json:"client_secret"`
	CreatedAt          time.Time              `json:"created_at"`
	Description        string                 `json:"description"`
	Events             []string               `json:"events"`
	ExternalURL        string                 `json:"external_url"`
	HTMLURL            string                 `json:"html_url"`
	ID                 int                    `json:"id"`
	InstallationsCount int                    `json:"installations_count"`
	Name               string                 `json:"name"`
	NodeID             string                 `json:"node_id"`
	Owner              NullableSimpleUser     `json:"owner"`
	Pem                string                 `json:"pem"`
	Permissions        IntegrationPermissions `json:"permissions"`
	Slug               string                 `json:"slug"`
	UpdatedAt          time.Time              `json:"updated_at"`
	WebhookSecret      string                 `json:"webhook_secret"`
}

func (*Integration) appsGetBySlugResponse() {}

type IntegrationPermissions struct {
	Checks      string `json:"checks"`
	Contents    string `json:"contents"`
	Deployments string `json:"deployments"`
	Issues      string `json:"issues"`
	Metadata    string `json:"metadata"`
}

type InteractionLimit struct {
	Expiry string `json:"expiry"`
	Limit  string `json:"limit"`
}

type InteractionLimitResponse struct {
	ExpiresAt time.Time `json:"expires_at"`
	Limit     string    `json:"limit"`
	Origin    string    `json:"origin"`
}

func (*InteractionLimitResponse) interactionsSetRestrictionsForAuthenticatedUserResponse() {}
func (*InteractionLimitResponse) interactionsSetRestrictionsForOrgResponse()               {}
func (*InteractionLimitResponse) interactionsSetRestrictionsForRepoResponse()              {}

type InteractionsGetRestrictionsForAuthenticatedUserNoContent struct{}

func (*InteractionsGetRestrictionsForAuthenticatedUserNoContent) interactionsGetRestrictionsForAuthenticatedUserResponse() {
}

type InteractionsRemoveRestrictionsForAuthenticatedUser struct{}

type InteractionsRemoveRestrictionsForOrg struct{}

type InteractionsRemoveRestrictionsForRepoConflict struct{}

func (*InteractionsRemoveRestrictionsForRepoConflict) interactionsRemoveRestrictionsForRepoResponse() {
}

type InteractionsRemoveRestrictionsForRepoNoContent struct{}

func (*InteractionsRemoveRestrictionsForRepoNoContent) interactionsRemoveRestrictionsForRepoResponse() {
}

type InteractionsSetRestrictionsForRepoConflict struct{}

func (*InteractionsSetRestrictionsForRepoConflict) interactionsSetRestrictionsForRepoResponse() {}

type Issue struct {
	CommentsURL string             `json:"comments_url"`
	Title       string             `json:"title"`
	Assignee    NullableSimpleUser `json:"assignee"`
	UpdatedAt   time.Time          `json:"updated_at"`
	User        NullableSimpleUser `json:"user"`
	NodeID      string             `json:"node_id"`
	HTMLURL     string             `json:"html_url"`
	State       string             `json:"state"`
	Body        string             `json:"body"`
	Locked      bool               `json:"locked"`
	CreatedAt   time.Time          `json:"created_at"`
	BodyText    string             `json:"body_text"`
	EventsURL   string             `json:"events_url"`
}

func (*Issue) issuesCreateResponse() {}
func (*Issue) issuesGetResponse()    {}
func (*Issue) issuesUpdateResponse() {}

type IssueComment struct {
	AuthorAssociation     string              `json:"author_association"`
	Body                  string              `json:"body"`
	BodyHTML              string              `json:"body_html"`
	BodyText              string              `json:"body_text"`
	CreatedAt             time.Time           `json:"created_at"`
	HTMLURL               string              `json:"html_url"`
	ID                    int                 `json:"id"`
	IssueURL              string              `json:"issue_url"`
	NodeID                string              `json:"node_id"`
	PerformedViaGithubApp NullableIntegration `json:"performed_via_github_app"`
	Reactions             ReactionRollup      `json:"reactions"`
	URL                   string              `json:"url"`
	UpdatedAt             time.Time           `json:"updated_at"`
	User                  NullableSimpleUser  `json:"user"`
}

func (*IssueComment) issuesCreateCommentResponse() {}
func (*IssueComment) issuesGetCommentResponse()    {}
func (*IssueComment) issuesUpdateCommentResponse() {}

type IssueEvent struct {
	Actor                 NullableSimpleUser        `json:"actor"`
	Assignee              NullableSimpleUser        `json:"assignee"`
	Assigner              NullableSimpleUser        `json:"assigner"`
	AuthorAssociation     string                    `json:"author_association"`
	CommitID              string                    `json:"commit_id"`
	CommitURL             string                    `json:"commit_url"`
	CreatedAt             time.Time                 `json:"created_at"`
	DismissedReview       IssueEventDismissedReview `json:"dismissed_review"`
	Event                 string                    `json:"event"`
	ID                    int                       `json:"id"`
	Issue                 IssueSimple               `json:"issue"`
	Label                 IssueEventLabel           `json:"label"`
	LockReason            string                    `json:"lock_reason"`
	Milestone             IssueEventMilestone       `json:"milestone"`
	NodeID                string                    `json:"node_id"`
	PerformedViaGithubApp NullableIntegration       `json:"performed_via_github_app"`
	ProjectCard           IssueEventProjectCard     `json:"project_card"`
	Rename                IssueEventRename          `json:"rename"`
	RequestedReviewer     NullableSimpleUser        `json:"requested_reviewer"`
	RequestedTeam         Team                      `json:"requested_team"`
	ReviewRequester       NullableSimpleUser        `json:"review_requester"`
	URL                   string                    `json:"url"`
}

func (*IssueEvent) issuesGetEventResponse() {}

type IssueEventDismissedReview struct {
	DismissalCommitID string `json:"dismissal_commit_id"`
	DismissalMessage  string `json:"dismissal_message"`
	ReviewID          int    `json:"review_id"`
	State             string `json:"state"`
}

type IssueEventLabel struct {
	Color string `json:"color"`
	Name  string `json:"name"`
}

type IssueEventMilestone struct {
	Title string `json:"title"`
}

type IssueEventProjectCard struct {
	ColumnName         string `json:"column_name"`
	ID                 int    `json:"id"`
	PreviousColumnName string `json:"previous_column_name"`
	ProjectID          int    `json:"project_id"`
	ProjectURL         string `json:"project_url"`
	URL                string `json:"url"`
}

type IssueEventRename struct {
	From string `json:"from"`
	To   string `json:"to"`
}

type IssueSearchResultItem struct {
	ActiveLockReason      string                            `json:"active_lock_reason"`
	Assignee              NullableSimpleUser                `json:"assignee"`
	Assignees             []SimpleUser                      `json:"assignees"`
	AuthorAssociation     string                            `json:"author_association"`
	Body                  string                            `json:"body"`
	BodyHTML              string                            `json:"body_html"`
	BodyText              string                            `json:"body_text"`
	ClosedAt              time.Time                         `json:"closed_at"`
	Comments              int                               `json:"comments"`
	CommentsURL           string                            `json:"comments_url"`
	CreatedAt             time.Time                         `json:"created_at"`
	Draft                 bool                              `json:"draft"`
	EventsURL             string                            `json:"events_url"`
	HTMLURL               string                            `json:"html_url"`
	ID                    int                               `json:"id"`
	Labels                []IssueSearchResultItemLabelsItem `json:"labels"`
	LabelsURL             string                            `json:"labels_url"`
	Locked                bool                              `json:"locked"`
	Milestone             NullableMilestone                 `json:"milestone"`
	NodeID                string                            `json:"node_id"`
	Number                int                               `json:"number"`
	PerformedViaGithubApp NullableIntegration               `json:"performed_via_github_app"`
	PullRequest           IssueSearchResultItemPullRequest  `json:"pull_request"`
	Repository            Repository                        `json:"repository"`
	RepositoryURL         string                            `json:"repository_url"`
	Score                 float                             `json:"score"`
	State                 string                            `json:"state"`
	TextMatches           []SearchResultTextMatchesItem     `json:"text_matches"`
	TimelineURL           string                            `json:"timeline_url"`
	Title                 string                            `json:"title"`
	URL                   string                            `json:"url"`
	UpdatedAt             time.Time                         `json:"updated_at"`
	User                  NullableSimpleUser                `json:"user"`
}

type IssueSearchResultItemLabelsItem struct {
	Color       string `json:"color"`
	Default     bool   `json:"default"`
	Description string `json:"description"`
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	NodeID      string `json:"node_id"`
	URL         string `json:"url"`
}

type IssueSearchResultItemPullRequest struct {
	DiffURL  string    `json:"diff_url"`
	HTMLURL  string    `json:"html_url"`
	MergedAt time.Time `json:"merged_at"`
	PatchURL string    `json:"patch_url"`
	URL      string    `json:"url"`
}

type IssueSimple struct {
	ActiveLockReason      string                 `json:"active_lock_reason"`
	Assignee              NullableSimpleUser     `json:"assignee"`
	Assignees             []SimpleUser           `json:"assignees"`
	AuthorAssociation     string                 `json:"author_association"`
	Body                  string                 `json:"body"`
	BodyHTML              string                 `json:"body_html"`
	BodyText              string                 `json:"body_text"`
	ClosedAt              time.Time              `json:"closed_at"`
	Comments              int                    `json:"comments"`
	CommentsURL           string                 `json:"comments_url"`
	CreatedAt             time.Time              `json:"created_at"`
	EventsURL             string                 `json:"events_url"`
	HTMLURL               string                 `json:"html_url"`
	ID                    int                    `json:"id"`
	Labels                []Label                `json:"labels"`
	LabelsURL             string                 `json:"labels_url"`
	Locked                bool                   `json:"locked"`
	Milestone             NullableMilestone      `json:"milestone"`
	NodeID                string                 `json:"node_id"`
	Number                int                    `json:"number"`
	PerformedViaGithubApp NullableIntegration    `json:"performed_via_github_app"`
	PullRequest           IssueSimplePullRequest `json:"pull_request"`
	Repository            Repository             `json:"repository"`
	RepositoryURL         string                 `json:"repository_url"`
	State                 string                 `json:"state"`
	TimelineURL           string                 `json:"timeline_url"`
	Title                 string                 `json:"title"`
	URL                   string                 `json:"url"`
	UpdatedAt             time.Time              `json:"updated_at"`
	User                  NullableSimpleUser     `json:"user"`
}

type IssueSimplePullRequest struct {
	DiffURL  string    `json:"diff_url"`
	HTMLURL  string    `json:"html_url"`
	MergedAt time.Time `json:"merged_at"`
	PatchURL string    `json:"patch_url"`
	URL      string    `json:"url"`
}

type IssuesAddAssigneesApplicationJSONRequest struct {
	Assignees []string `json:"assignees"`
}

type IssuesAddLabelsOK []Label

func (*IssuesAddLabelsOK) issuesAddLabelsResponse() {}

type IssuesCheckUserCanBeAssignedNoContent struct{}

func (*IssuesCheckUserCanBeAssignedNoContent) issuesCheckUserCanBeAssignedResponse() {}

type IssuesCreateApplicationJSONRequest struct {
	Assignees []string `json:"assignees"`
}

type IssuesCreateCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type IssuesCreateLabelApplicationJSONRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	Name        string `json:"name"`
}

type IssuesCreateMilestoneApplicationJSONRequest struct {
	Description string    `json:"description"`
	DueOn       time.Time `json:"due_on"`
	State       string    `json:"state"`
	Title       string    `json:"title"`
}

type IssuesDeleteComment struct{}

type IssuesDeleteLabel struct{}

type IssuesDeleteMilestoneNoContent struct{}

func (*IssuesDeleteMilestoneNoContent) issuesDeleteMilestoneResponse() {}

type IssuesListAssigneesOK []SimpleUser

func (*IssuesListAssigneesOK) issuesListAssigneesResponse() {}

type IssuesListCommentsForRepoOK []IssueComment

func (*IssuesListCommentsForRepoOK) issuesListCommentsForRepoResponse() {}

type IssuesListCommentsOK []IssueComment

func (*IssuesListCommentsOK) issuesListCommentsResponse() {}

type IssuesListEventsForRepoOK []IssueEvent

func (*IssuesListEventsForRepoOK) issuesListEventsForRepoResponse() {}

type IssuesListEventsForTimelineOK []struct{}

func (*IssuesListEventsForTimelineOK) issuesListEventsForTimelineResponse() {}

type IssuesListForAuthenticatedUserOK []Issue

func (*IssuesListForAuthenticatedUserOK) issuesListForAuthenticatedUserResponse() {}

type IssuesListForOrgOK []Issue

func (*IssuesListForOrgOK) issuesListForOrgResponse() {}

type IssuesListForRepoOK []IssueSimple

func (*IssuesListForRepoOK) issuesListForRepoResponse() {}

type IssuesListLabelsForRepoOK []Label

func (*IssuesListLabelsForRepoOK) issuesListLabelsForRepoResponse() {}

type IssuesListLabelsOnIssueOK []Label

func (*IssuesListLabelsOnIssueOK) issuesListLabelsOnIssueResponse() {}

type IssuesListMilestonesOK []Milestone

func (*IssuesListMilestonesOK) issuesListMilestonesResponse() {}

type IssuesLockApplicationJSONRequest struct {
	LockReason string `json:"lock_reason"`
}

type IssuesLockNoContent struct{}

func (*IssuesLockNoContent) issuesLockResponse() {}

type IssuesRemoveAllLabelsNoContent struct{}

func (*IssuesRemoveAllLabelsNoContent) issuesRemoveAllLabelsResponse() {}

type IssuesRemoveAssigneesApplicationJSONRequest struct {
	Assignees []string `json:"assignees"`
}

type IssuesRemoveLabelOK []Label

func (*IssuesRemoveLabelOK) issuesRemoveLabelResponse() {}

type IssuesSetLabelsOK []Label

func (*IssuesSetLabelsOK) issuesSetLabelsResponse() {}

type IssuesUnlockNoContent struct{}

func (*IssuesUnlockNoContent) issuesUnlockResponse() {}

type IssuesUpdateApplicationJSONRequest struct {
}

type IssuesUpdateCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type IssuesUpdateLabelApplicationJSONRequest struct {
	Color       string `json:"color"`
	Description string `json:"description"`
	NewName     string `json:"new_name"`
}

type IssuesUpdateMilestoneApplicationJSONRequest struct {
	Description string    `json:"description"`
	DueOn       time.Time `json:"due_on"`
	State       string    `json:"state"`
	Title       string    `json:"title"`
}

type Job struct {
	CheckRunURL string         `json:"check_run_url"`
	CompletedAt time.Time      `json:"completed_at"`
	Conclusion  string         `json:"conclusion"`
	HTMLURL     string         `json:"html_url"`
	HeadSha     string         `json:"head_sha"`
	ID          int            `json:"id"`
	Name        string         `json:"name"`
	NodeID      string         `json:"node_id"`
	RunID       int            `json:"run_id"`
	RunURL      string         `json:"run_url"`
	StartedAt   time.Time      `json:"started_at"`
	Status      string         `json:"status"`
	Steps       []JobStepsItem `json:"steps"`
	URL         string         `json:"url"`
}

type JobStepsItem struct {
	CompletedAt time.Time `json:"completed_at"`
	Conclusion  string    `json:"conclusion"`
	Name        string    `json:"name"`
	Number      int       `json:"number"`
	StartedAt   time.Time `json:"started_at"`
	Status      string    `json:"status"`
}

type Key struct {
	CreatedAt time.Time `json:"created_at"`
	ID        int       `json:"id"`
	Key       string    `json:"key"`
	ReadOnly  bool      `json:"read_only"`
	Title     string    `json:"title"`
	URL       string    `json:"url"`
	Verified  bool      `json:"verified"`
}

func (*Key) usersCreatePublicSSHKeyForAuthenticatedResponse() {}
func (*Key) usersGetPublicSSHKeyForAuthenticatedResponse()    {}

type KeySimple struct {
	ID  int    `json:"id"`
	Key string `json:"key"`
}

type Label struct {
	Color       string `json:"color"`
	Default     bool   `json:"default"`
	Description string `json:"description"`
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	NodeID      string `json:"node_id"`
	URL         string `json:"url"`
}

func (*Label) issuesCreateLabelResponse() {}
func (*Label) issuesGetLabelResponse()    {}

type LabelSearchResultItem struct {
	Color       string                        `json:"color"`
	Default     bool                          `json:"default"`
	Description string                        `json:"description"`
	ID          int                           `json:"id"`
	Name        string                        `json:"name"`
	NodeID      string                        `json:"node_id"`
	Score       float                         `json:"score"`
	TextMatches []SearchResultTextMatchesItem `json:"text_matches"`
	URL         string                        `json:"url"`
}

type License struct {
	Body           string   `json:"body"`
	Conditions     []string `json:"conditions"`
	Description    string   `json:"description"`
	Featured       bool     `json:"featured"`
	HTMLURL        string   `json:"html_url"`
	Implementation string   `json:"implementation"`
	Key            string   `json:"key"`
	Limitations    []string `json:"limitations"`
	Name           string   `json:"name"`
	NodeID         string   `json:"node_id"`
	Permissions    []string `json:"permissions"`
	SpdxID         string   `json:"spdx_id"`
	URL            string   `json:"url"`
}

func (*License) licensesGetResponse() {}

type LicenseContent struct {
	Content     string                `json:"content"`
	DownloadURL string                `json:"download_url"`
	Encoding    string                `json:"encoding"`
	GitURL      string                `json:"git_url"`
	HTMLURL     string                `json:"html_url"`
	License     NullableLicenseSimple `json:"license"`
	Links       LicenseContentLinks   `json:"_links"`
	Name        string                `json:"name"`
	Path        string                `json:"path"`
	Sha         string                `json:"sha"`
	Size        int                   `json:"size"`
	Type        string                `json:"type"`
	URL         string                `json:"url"`
}

type LicenseContentLinks struct {
	Git  string `json:"git"`
	HTML string `json:"html"`
	Self string `json:"self"`
}

type LicenseSimple struct {
	HTMLURL string `json:"html_url"`
	Key     string `json:"key"`
	Name    string `json:"name"`
	NodeID  string `json:"node_id"`
	SpdxID  string `json:"spdx_id"`
	URL     string `json:"url"`
}

type LicensesGetAllCommonlyUsedOK []LicenseSimple

func (*LicensesGetAllCommonlyUsedOK) licensesGetAllCommonlyUsedResponse() {}

type Link struct {
	Href string `json:"href"`
}

type LinkWithType struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

type MarkdownRenderApplicationJSONRequest struct {
	Context string `json:"context"`
	Mode    string `json:"mode"`
	Text    string `json:"text"`
}

type MarkdownRenderOK string

func (*MarkdownRenderOK) markdownRenderResponse() {}

type MarkdownRenderRawOK string

func (*MarkdownRenderRawOK) markdownRenderRawResponse() {}

type MarkdownRenderRawTextPlainRequest string

func (*MarkdownRenderRawTextPlainRequest) markdownRenderRawRequest() {}

type MarkdownRenderRawTextXMarkdownRequest string

func (*MarkdownRenderRawTextXMarkdownRequest) markdownRenderRawRequest() {}

type MarketplaceAccount struct {
	Email                    string `json:"email"`
	ID                       int    `json:"id"`
	Login                    string `json:"login"`
	NodeID                   string `json:"node_id"`
	OrganizationBillingEmail string `json:"organization_billing_email"`
	Type                     string `json:"type"`
	URL                      string `json:"url"`
}

type MarketplaceListingPlan struct {
	AccountsURL         string   `json:"accounts_url"`
	Bullets             []string `json:"bullets"`
	Description         string   `json:"description"`
	HasFreeTrial        bool     `json:"has_free_trial"`
	ID                  int      `json:"id"`
	MonthlyPriceInCents int      `json:"monthly_price_in_cents"`
	Name                string   `json:"name"`
	Number              int      `json:"number"`
	PriceModel          string   `json:"price_model"`
	State               string   `json:"state"`
	URL                 string   `json:"url"`
	UnitName            string   `json:"unit_name"`
	YearlyPriceInCents  int      `json:"yearly_price_in_cents"`
}

type MarketplacePurchase struct {
	Email                    string                                      `json:"email"`
	ID                       int                                         `json:"id"`
	Login                    string                                      `json:"login"`
	MarketplacePendingChange MarketplacePurchaseMarketplacePendingChange `json:"marketplace_pending_change"`
	MarketplacePurchase      MarketplacePurchaseMarketplacePurchase      `json:"marketplace_purchase"`
	OrganizationBillingEmail string                                      `json:"organization_billing_email"`
	Type                     string                                      `json:"type"`
	URL                      string                                      `json:"url"`
}

func (*MarketplacePurchase) appsGetSubscriptionPlanForAccountResponse()        {}
func (*MarketplacePurchase) appsGetSubscriptionPlanForAccountStubbedResponse() {}

type MarketplacePurchaseMarketplacePendingChange struct {
	EffectiveDate string                 `json:"effective_date"`
	ID            int                    `json:"id"`
	IsInstalled   bool                   `json:"is_installed"`
	Plan          MarketplaceListingPlan `json:"plan"`
	UnitCount     int                    `json:"unit_count"`
}

type MarketplacePurchaseMarketplacePurchase struct {
	BillingCycle    string                 `json:"billing_cycle"`
	FreeTrialEndsOn string                 `json:"free_trial_ends_on"`
	IsInstalled     bool                   `json:"is_installed"`
	NextBillingDate string                 `json:"next_billing_date"`
	OnFreeTrial     bool                   `json:"on_free_trial"`
	Plan            MarketplaceListingPlan `json:"plan"`
	UnitCount       int                    `json:"unit_count"`
	UpdatedAt       string                 `json:"updated_at"`
}

type MergedUpstream struct {
	BaseBranch string `json:"base_branch"`
	MergeType  string `json:"merge_type"`
	Message    string `json:"message"`
}

func (*MergedUpstream) reposMergeUpstreamResponse() {}

type MetaRoot struct {
	AuthorizationsURL                string `json:"authorizations_url"`
	CodeSearchURL                    string `json:"code_search_url"`
	CommitSearchURL                  string `json:"commit_search_url"`
	CurrentUserAuthorizationsHTMLURL string `json:"current_user_authorizations_html_url"`
	CurrentUserRepositoriesURL       string `json:"current_user_repositories_url"`
	CurrentUserURL                   string `json:"current_user_url"`
	EmailsURL                        string `json:"emails_url"`
	EmojisURL                        string `json:"emojis_url"`
	EventsURL                        string `json:"events_url"`
	FeedsURL                         string `json:"feeds_url"`
	FollowersURL                     string `json:"followers_url"`
	FollowingURL                     string `json:"following_url"`
	GistsURL                         string `json:"gists_url"`
	HubURL                           string `json:"hub_url"`
	IssueSearchURL                   string `json:"issue_search_url"`
	IssuesURL                        string `json:"issues_url"`
	KeysURL                          string `json:"keys_url"`
	LabelSearchURL                   string `json:"label_search_url"`
	NotificationsURL                 string `json:"notifications_url"`
	OrganizationRepositoriesURL      string `json:"organization_repositories_url"`
	OrganizationTeamsURL             string `json:"organization_teams_url"`
	OrganizationURL                  string `json:"organization_url"`
	PublicGistsURL                   string `json:"public_gists_url"`
	RateLimitURL                     string `json:"rate_limit_url"`
	RepositorySearchURL              string `json:"repository_search_url"`
	RepositoryURL                    string `json:"repository_url"`
	StarredGistsURL                  string `json:"starred_gists_url"`
	StarredURL                       string `json:"starred_url"`
	TopicSearchURL                   string `json:"topic_search_url"`
	UserOrganizationsURL             string `json:"user_organizations_url"`
	UserRepositoriesURL              string `json:"user_repositories_url"`
	UserSearchURL                    string `json:"user_search_url"`
	UserURL                          string `json:"user_url"`
}

type Migration struct {
	ID                   int       `json:"id"`
	ExcludeGitData       bool      `json:"exclude_git_data"`
	ExcludeReleases      bool      `json:"exclude_releases"`
	ExcludeOwnerProjects bool      `json:"exclude_owner_projects"`
	CreatedAt            time.Time `json:"created_at"`
	State                string    `json:"state"`
	ExcludeMetadata      bool      `json:"exclude_metadata"`
}

func (*Migration) migrationsGetStatusForAuthenticatedUserResponse() {}
func (*Migration) migrationsStartForAuthenticatedUserResponse()     {}
func (*Migration) migrationsStartForOrgResponse()                   {}

type MigrationsCancelImport struct{}

type MigrationsDeleteArchiveForAuthenticatedUserNoContent struct{}

func (*MigrationsDeleteArchiveForAuthenticatedUserNoContent) migrationsDeleteArchiveForAuthenticatedUserResponse() {
}

type MigrationsDeleteArchiveForOrgNoContent struct{}

func (*MigrationsDeleteArchiveForOrgNoContent) migrationsDeleteArchiveForOrgResponse() {}

type MigrationsDownloadArchiveForOrgFound struct{}

func (*MigrationsDownloadArchiveForOrgFound) migrationsDownloadArchiveForOrgResponse() {}

type MigrationsGetArchiveForAuthenticatedUserFound struct{}

func (*MigrationsGetArchiveForAuthenticatedUserFound) migrationsGetArchiveForAuthenticatedUserResponse() {
}

type MigrationsGetCommitAuthorsOK []PorterAuthor

func (*MigrationsGetCommitAuthorsOK) migrationsGetCommitAuthorsResponse() {}

type MigrationsListForAuthenticatedUserOK []Migration

func (*MigrationsListForAuthenticatedUserOK) migrationsListForAuthenticatedUserResponse() {}

type MigrationsListReposForOrgOK []MinimalRepository

func (*MigrationsListReposForOrgOK) migrationsListReposForOrgResponse() {}

type MigrationsListReposForUserOK []MinimalRepository

func (*MigrationsListReposForUserOK) migrationsListReposForUserResponse() {}

type MigrationsMapCommitAuthorApplicationJSONRequest struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type MigrationsSetLfsPreferenceApplicationJSONRequest struct {
	UseLfs string `json:"use_lfs"`
}

type MigrationsStartForAuthenticatedUserApplicationJSONRequest struct {
	Exclude              []string `json:"exclude"`
	ExcludeAttachments   bool     `json:"exclude_attachments"`
	ExcludeOwnerProjects bool     `json:"exclude_owner_projects"`
	ExcludeReleases      bool     `json:"exclude_releases"`
	LockRepositories     bool     `json:"lock_repositories"`
	Repositories         []string `json:"repositories"`
}

type MigrationsStartForOrgApplicationJSONRequest struct {
	Exclude              []string `json:"exclude"`
	ExcludeAttachments   bool     `json:"exclude_attachments"`
	ExcludeOwnerProjects bool     `json:"exclude_owner_projects"`
	ExcludeReleases      bool     `json:"exclude_releases"`
	LockRepositories     bool     `json:"lock_repositories"`
	Repositories         []string `json:"repositories"`
}

type MigrationsStartImportApplicationJSONRequest struct {
	TfvcProject string `json:"tfvc_project"`
	Vcs         string `json:"vcs"`
	VcsPassword string `json:"vcs_password"`
	VcsURL      string `json:"vcs_url"`
	VcsUsername string `json:"vcs_username"`
}

type MigrationsUnlockRepoForAuthenticatedUserNoContent struct{}

func (*MigrationsUnlockRepoForAuthenticatedUserNoContent) migrationsUnlockRepoForAuthenticatedUserResponse() {
}

type MigrationsUnlockRepoForOrgNoContent struct{}

func (*MigrationsUnlockRepoForOrgNoContent) migrationsUnlockRepoForOrgResponse() {}

type MigrationsUpdateImportApplicationJSONRequest struct {
	TfvcProject string `json:"tfvc_project"`
	Vcs         string `json:"vcs"`
	VcsPassword string `json:"vcs_password"`
	VcsUsername string `json:"vcs_username"`
}

type Milestone struct {
	ClosedAt     time.Time          `json:"closed_at"`
	ClosedIssues int                `json:"closed_issues"`
	CreatedAt    time.Time          `json:"created_at"`
	Creator      NullableSimpleUser `json:"creator"`
	Description  string             `json:"description"`
	DueOn        time.Time          `json:"due_on"`
	HTMLURL      string             `json:"html_url"`
	ID           int                `json:"id"`
	LabelsURL    string             `json:"labels_url"`
	NodeID       string             `json:"node_id"`
	Number       int                `json:"number"`
	OpenIssues   int                `json:"open_issues"`
	State        string             `json:"state"`
	Title        string             `json:"title"`
	URL          string             `json:"url"`
	UpdatedAt    time.Time          `json:"updated_at"`
}

func (*Milestone) issuesCreateMilestoneResponse() {}
func (*Milestone) issuesGetMilestoneResponse()    {}

type MinimalRepository struct {
	AllowForking        bool                         `json:"allow_forking"`
	ArchiveURL          string                       `json:"archive_url"`
	Archived            bool                         `json:"archived"`
	AssigneesURL        string                       `json:"assignees_url"`
	BlobsURL            string                       `json:"blobs_url"`
	BranchesURL         string                       `json:"branches_url"`
	CloneURL            string                       `json:"clone_url"`
	CodeOfConduct       CodeOfConduct                `json:"code_of_conduct"`
	CollaboratorsURL    string                       `json:"collaborators_url"`
	CommentsURL         string                       `json:"comments_url"`
	CommitsURL          string                       `json:"commits_url"`
	CompareURL          string                       `json:"compare_url"`
	ContentsURL         string                       `json:"contents_url"`
	ContributorsURL     string                       `json:"contributors_url"`
	CreatedAt           time.Time                    `json:"created_at"`
	DefaultBranch       string                       `json:"default_branch"`
	DeleteBranchOnMerge bool                         `json:"delete_branch_on_merge"`
	DeploymentsURL      string                       `json:"deployments_url"`
	Description         string                       `json:"description"`
	Disabled            bool                         `json:"disabled"`
	DownloadsURL        string                       `json:"downloads_url"`
	EventsURL           string                       `json:"events_url"`
	Fork                bool                         `json:"fork"`
	Forks               int                          `json:"forks"`
	ForksCount          int                          `json:"forks_count"`
	ForksURL            string                       `json:"forks_url"`
	FullName            string                       `json:"full_name"`
	GitCommitsURL       string                       `json:"git_commits_url"`
	GitRefsURL          string                       `json:"git_refs_url"`
	GitTagsURL          string                       `json:"git_tags_url"`
	GitURL              string                       `json:"git_url"`
	HTMLURL             string                       `json:"html_url"`
	HasDownloads        bool                         `json:"has_downloads"`
	HasIssues           bool                         `json:"has_issues"`
	HasPages            bool                         `json:"has_pages"`
	HasProjects         bool                         `json:"has_projects"`
	HasWiki             bool                         `json:"has_wiki"`
	Homepage            string                       `json:"homepage"`
	HooksURL            string                       `json:"hooks_url"`
	ID                  int                          `json:"id"`
	IsTemplate          bool                         `json:"is_template"`
	IssueCommentURL     string                       `json:"issue_comment_url"`
	IssueEventsURL      string                       `json:"issue_events_url"`
	IssuesURL           string                       `json:"issues_url"`
	KeysURL             string                       `json:"keys_url"`
	LabelsURL           string                       `json:"labels_url"`
	Language            string                       `json:"language"`
	LanguagesURL        string                       `json:"languages_url"`
	License             MinimalRepositoryLicense     `json:"license"`
	MergesURL           string                       `json:"merges_url"`
	MilestonesURL       string                       `json:"milestones_url"`
	MirrorURL           string                       `json:"mirror_url"`
	Name                string                       `json:"name"`
	NetworkCount        int                          `json:"network_count"`
	NodeID              string                       `json:"node_id"`
	NotificationsURL    string                       `json:"notifications_url"`
	OpenIssues          int                          `json:"open_issues"`
	OpenIssuesCount     int                          `json:"open_issues_count"`
	Owner               SimpleUser                   `json:"owner"`
	Permissions         MinimalRepositoryPermissions `json:"permissions"`
	Private             bool                         `json:"private"`
	PullsURL            string                       `json:"pulls_url"`
	PushedAt            time.Time                    `json:"pushed_at"`
	ReleasesURL         string                       `json:"releases_url"`
	SSHURL              string                       `json:"ssh_url"`
	Size                int                          `json:"size"`
	StargazersCount     int                          `json:"stargazers_count"`
	StargazersURL       string                       `json:"stargazers_url"`
	StatusesURL         string                       `json:"statuses_url"`
	SubscribersCount    int                          `json:"subscribers_count"`
	SubscribersURL      string                       `json:"subscribers_url"`
	SubscriptionURL     string                       `json:"subscription_url"`
	SvnURL              string                       `json:"svn_url"`
	TagsURL             string                       `json:"tags_url"`
	TeamsURL            string                       `json:"teams_url"`
	TempCloneToken      string                       `json:"temp_clone_token"`
	TemplateRepository  NullableRepository           `json:"template_repository"`
	Topics              []string                     `json:"topics"`
	TreesURL            string                       `json:"trees_url"`
	URL                 string                       `json:"url"`
	UpdatedAt           time.Time                    `json:"updated_at"`
	Visibility          string                       `json:"visibility"`
	Watchers            int                          `json:"watchers"`
	WatchersCount       int                          `json:"watchers_count"`
}

type MinimalRepositoryLicense struct {
	Key    string `json:"key"`
	Name   string `json:"name"`
	NodeID string `json:"node_id"`
	SpdxID string `json:"spdx_id"`
	URL    string `json:"url"`
}

type MinimalRepositoryPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type NullableCodeOfConductSimple struct {
	HTMLURL string `json:"html_url"`
	Key     string `json:"key"`
	Name    string `json:"name"`
	URL     string `json:"url"`
}

type NullableCommunityHealthFile struct {
	HTMLURL string `json:"html_url"`
	URL     string `json:"url"`
}

type NullableGitUser struct {
	Date  string `json:"date"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

type NullableIntegration struct {
	ClientID           string                         `json:"client_id"`
	ClientSecret       string                         `json:"client_secret"`
	CreatedAt          time.Time                      `json:"created_at"`
	Description        string                         `json:"description"`
	Events             []string                       `json:"events"`
	ExternalURL        string                         `json:"external_url"`
	HTMLURL            string                         `json:"html_url"`
	ID                 int                            `json:"id"`
	InstallationsCount int                            `json:"installations_count"`
	Name               string                         `json:"name"`
	NodeID             string                         `json:"node_id"`
	Owner              NullableSimpleUser             `json:"owner"`
	Pem                string                         `json:"pem"`
	Permissions        NullableIntegrationPermissions `json:"permissions"`
	Slug               string                         `json:"slug"`
	UpdatedAt          time.Time                      `json:"updated_at"`
	WebhookSecret      string                         `json:"webhook_secret"`
}

type NullableIntegrationPermissions struct {
	Checks      string `json:"checks"`
	Contents    string `json:"contents"`
	Deployments string `json:"deployments"`
	Issues      string `json:"issues"`
	Metadata    string `json:"metadata"`
}

type NullableLicenseSimple struct {
	HTMLURL string `json:"html_url"`
	Key     string `json:"key"`
	Name    string `json:"name"`
	NodeID  string `json:"node_id"`
	SpdxID  string `json:"spdx_id"`
	URL     string `json:"url"`
}

type NullableMilestone struct {
	ClosedAt     time.Time          `json:"closed_at"`
	ClosedIssues int                `json:"closed_issues"`
	CreatedAt    time.Time          `json:"created_at"`
	Creator      NullableSimpleUser `json:"creator"`
	Description  string             `json:"description"`
	DueOn        time.Time          `json:"due_on"`
	HTMLURL      string             `json:"html_url"`
	ID           int                `json:"id"`
	LabelsURL    string             `json:"labels_url"`
	NodeID       string             `json:"node_id"`
	Number       int                `json:"number"`
	OpenIssues   int                `json:"open_issues"`
	State        string             `json:"state"`
	Title        string             `json:"title"`
	URL          string             `json:"url"`
	UpdatedAt    time.Time          `json:"updated_at"`
}

type NullableMinimalRepository struct {
	AllowForking        bool                                 `json:"allow_forking"`
	ArchiveURL          string                               `json:"archive_url"`
	Archived            bool                                 `json:"archived"`
	AssigneesURL        string                               `json:"assignees_url"`
	BlobsURL            string                               `json:"blobs_url"`
	BranchesURL         string                               `json:"branches_url"`
	CloneURL            string                               `json:"clone_url"`
	CodeOfConduct       CodeOfConduct                        `json:"code_of_conduct"`
	CollaboratorsURL    string                               `json:"collaborators_url"`
	CommentsURL         string                               `json:"comments_url"`
	CommitsURL          string                               `json:"commits_url"`
	CompareURL          string                               `json:"compare_url"`
	ContentsURL         string                               `json:"contents_url"`
	ContributorsURL     string                               `json:"contributors_url"`
	CreatedAt           time.Time                            `json:"created_at"`
	DefaultBranch       string                               `json:"default_branch"`
	DeleteBranchOnMerge bool                                 `json:"delete_branch_on_merge"`
	DeploymentsURL      string                               `json:"deployments_url"`
	Description         string                               `json:"description"`
	Disabled            bool                                 `json:"disabled"`
	DownloadsURL        string                               `json:"downloads_url"`
	EventsURL           string                               `json:"events_url"`
	Fork                bool                                 `json:"fork"`
	Forks               int                                  `json:"forks"`
	ForksCount          int                                  `json:"forks_count"`
	ForksURL            string                               `json:"forks_url"`
	FullName            string                               `json:"full_name"`
	GitCommitsURL       string                               `json:"git_commits_url"`
	GitRefsURL          string                               `json:"git_refs_url"`
	GitTagsURL          string                               `json:"git_tags_url"`
	GitURL              string                               `json:"git_url"`
	HTMLURL             string                               `json:"html_url"`
	HasDownloads        bool                                 `json:"has_downloads"`
	HasIssues           bool                                 `json:"has_issues"`
	HasPages            bool                                 `json:"has_pages"`
	HasProjects         bool                                 `json:"has_projects"`
	HasWiki             bool                                 `json:"has_wiki"`
	Homepage            string                               `json:"homepage"`
	HooksURL            string                               `json:"hooks_url"`
	ID                  int                                  `json:"id"`
	IsTemplate          bool                                 `json:"is_template"`
	IssueCommentURL     string                               `json:"issue_comment_url"`
	IssueEventsURL      string                               `json:"issue_events_url"`
	IssuesURL           string                               `json:"issues_url"`
	KeysURL             string                               `json:"keys_url"`
	LabelsURL           string                               `json:"labels_url"`
	Language            string                               `json:"language"`
	LanguagesURL        string                               `json:"languages_url"`
	License             NullableMinimalRepositoryLicense     `json:"license"`
	MergesURL           string                               `json:"merges_url"`
	MilestonesURL       string                               `json:"milestones_url"`
	MirrorURL           string                               `json:"mirror_url"`
	Name                string                               `json:"name"`
	NetworkCount        int                                  `json:"network_count"`
	NodeID              string                               `json:"node_id"`
	NotificationsURL    string                               `json:"notifications_url"`
	OpenIssues          int                                  `json:"open_issues"`
	OpenIssuesCount     int                                  `json:"open_issues_count"`
	Owner               SimpleUser                           `json:"owner"`
	Permissions         NullableMinimalRepositoryPermissions `json:"permissions"`
	Private             bool                                 `json:"private"`
	PullsURL            string                               `json:"pulls_url"`
	PushedAt            time.Time                            `json:"pushed_at"`
	ReleasesURL         string                               `json:"releases_url"`
	SSHURL              string                               `json:"ssh_url"`
	Size                int                                  `json:"size"`
	StargazersCount     int                                  `json:"stargazers_count"`
	StargazersURL       string                               `json:"stargazers_url"`
	StatusesURL         string                               `json:"statuses_url"`
	SubscribersCount    int                                  `json:"subscribers_count"`
	SubscribersURL      string                               `json:"subscribers_url"`
	SubscriptionURL     string                               `json:"subscription_url"`
	SvnURL              string                               `json:"svn_url"`
	TagsURL             string                               `json:"tags_url"`
	TeamsURL            string                               `json:"teams_url"`
	TempCloneToken      string                               `json:"temp_clone_token"`
	TemplateRepository  NullableRepository                   `json:"template_repository"`
	Topics              []string                             `json:"topics"`
	TreesURL            string                               `json:"trees_url"`
	URL                 string                               `json:"url"`
	UpdatedAt           time.Time                            `json:"updated_at"`
	Visibility          string                               `json:"visibility"`
	Watchers            int                                  `json:"watchers"`
	WatchersCount       int                                  `json:"watchers_count"`
}

type NullableMinimalRepositoryLicense struct {
	Key    string `json:"key"`
	Name   string `json:"name"`
	NodeID string `json:"node_id"`
	SpdxID string `json:"spdx_id"`
	URL    string `json:"url"`
}

type NullableMinimalRepositoryPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type NullableRepository struct {
	AllowAutoMerge      bool                                 `json:"allow_auto_merge"`
	AllowForking        bool                                 `json:"allow_forking"`
	AllowMergeCommit    bool                                 `json:"allow_merge_commit"`
	AllowRebaseMerge    bool                                 `json:"allow_rebase_merge"`
	AllowSquashMerge    bool                                 `json:"allow_squash_merge"`
	ArchiveURL          string                               `json:"archive_url"`
	Archived            bool                                 `json:"archived"`
	AssigneesURL        string                               `json:"assignees_url"`
	BlobsURL            string                               `json:"blobs_url"`
	BranchesURL         string                               `json:"branches_url"`
	CloneURL            string                               `json:"clone_url"`
	CollaboratorsURL    string                               `json:"collaborators_url"`
	CommentsURL         string                               `json:"comments_url"`
	CommitsURL          string                               `json:"commits_url"`
	CompareURL          string                               `json:"compare_url"`
	ContentsURL         string                               `json:"contents_url"`
	ContributorsURL     string                               `json:"contributors_url"`
	CreatedAt           time.Time                            `json:"created_at"`
	DefaultBranch       string                               `json:"default_branch"`
	DeleteBranchOnMerge bool                                 `json:"delete_branch_on_merge"`
	DeploymentsURL      string                               `json:"deployments_url"`
	Description         string                               `json:"description"`
	Disabled            bool                                 `json:"disabled"`
	DownloadsURL        string                               `json:"downloads_url"`
	EventsURL           string                               `json:"events_url"`
	Fork                bool                                 `json:"fork"`
	Forks               int                                  `json:"forks"`
	ForksCount          int                                  `json:"forks_count"`
	ForksURL            string                               `json:"forks_url"`
	FullName            string                               `json:"full_name"`
	GitCommitsURL       string                               `json:"git_commits_url"`
	GitRefsURL          string                               `json:"git_refs_url"`
	GitTagsURL          string                               `json:"git_tags_url"`
	GitURL              string                               `json:"git_url"`
	HTMLURL             string                               `json:"html_url"`
	HasDownloads        bool                                 `json:"has_downloads"`
	HasIssues           bool                                 `json:"has_issues"`
	HasPages            bool                                 `json:"has_pages"`
	HasProjects         bool                                 `json:"has_projects"`
	HasWiki             bool                                 `json:"has_wiki"`
	Homepage            string                               `json:"homepage"`
	HooksURL            string                               `json:"hooks_url"`
	ID                  int                                  `json:"id"`
	IsTemplate          bool                                 `json:"is_template"`
	IssueCommentURL     string                               `json:"issue_comment_url"`
	IssueEventsURL      string                               `json:"issue_events_url"`
	IssuesURL           string                               `json:"issues_url"`
	KeysURL             string                               `json:"keys_url"`
	LabelsURL           string                               `json:"labels_url"`
	Language            string                               `json:"language"`
	LanguagesURL        string                               `json:"languages_url"`
	License             NullableLicenseSimple                `json:"license"`
	MasterBranch        string                               `json:"master_branch"`
	MergesURL           string                               `json:"merges_url"`
	MilestonesURL       string                               `json:"milestones_url"`
	MirrorURL           string                               `json:"mirror_url"`
	Name                string                               `json:"name"`
	NetworkCount        int                                  `json:"network_count"`
	NodeID              string                               `json:"node_id"`
	NotificationsURL    string                               `json:"notifications_url"`
	OpenIssues          int                                  `json:"open_issues"`
	OpenIssuesCount     int                                  `json:"open_issues_count"`
	Organization        NullableSimpleUser                   `json:"organization"`
	Owner               SimpleUser                           `json:"owner"`
	Permissions         NullableRepositoryPermissions        `json:"permissions"`
	Private             bool                                 `json:"private"`
	PullsURL            string                               `json:"pulls_url"`
	PushedAt            time.Time                            `json:"pushed_at"`
	ReleasesURL         string                               `json:"releases_url"`
	SSHURL              string                               `json:"ssh_url"`
	Size                int                                  `json:"size"`
	StargazersCount     int                                  `json:"stargazers_count"`
	StargazersURL       string                               `json:"stargazers_url"`
	StarredAt           string                               `json:"starred_at"`
	StatusesURL         string                               `json:"statuses_url"`
	SubscribersCount    int                                  `json:"subscribers_count"`
	SubscribersURL      string                               `json:"subscribers_url"`
	SubscriptionURL     string                               `json:"subscription_url"`
	SvnURL              string                               `json:"svn_url"`
	TagsURL             string                               `json:"tags_url"`
	TeamsURL            string                               `json:"teams_url"`
	TempCloneToken      string                               `json:"temp_clone_token"`
	TemplateRepository  NullableRepositoryTemplateRepository `json:"template_repository"`
	Topics              []string                             `json:"topics"`
	TreesURL            string                               `json:"trees_url"`
	URL                 string                               `json:"url"`
	UpdatedAt           time.Time                            `json:"updated_at"`
	Visibility          string                               `json:"visibility"`
	Watchers            int                                  `json:"watchers"`
	WatchersCount       int                                  `json:"watchers_count"`
}

type NullableRepositoryPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type NullableRepositoryTemplateRepository struct {
	AllowAutoMerge      bool                                            `json:"allow_auto_merge"`
	AllowMergeCommit    bool                                            `json:"allow_merge_commit"`
	AllowRebaseMerge    bool                                            `json:"allow_rebase_merge"`
	AllowSquashMerge    bool                                            `json:"allow_squash_merge"`
	ArchiveURL          string                                          `json:"archive_url"`
	Archived            bool                                            `json:"archived"`
	AssigneesURL        string                                          `json:"assignees_url"`
	BlobsURL            string                                          `json:"blobs_url"`
	BranchesURL         string                                          `json:"branches_url"`
	CloneURL            string                                          `json:"clone_url"`
	CollaboratorsURL    string                                          `json:"collaborators_url"`
	CommentsURL         string                                          `json:"comments_url"`
	CommitsURL          string                                          `json:"commits_url"`
	CompareURL          string                                          `json:"compare_url"`
	ContentsURL         string                                          `json:"contents_url"`
	ContributorsURL     string                                          `json:"contributors_url"`
	CreatedAt           string                                          `json:"created_at"`
	DefaultBranch       string                                          `json:"default_branch"`
	DeleteBranchOnMerge bool                                            `json:"delete_branch_on_merge"`
	DeploymentsURL      string                                          `json:"deployments_url"`
	Description         string                                          `json:"description"`
	Disabled            bool                                            `json:"disabled"`
	DownloadsURL        string                                          `json:"downloads_url"`
	EventsURL           string                                          `json:"events_url"`
	Fork                bool                                            `json:"fork"`
	ForksCount          int                                             `json:"forks_count"`
	ForksURL            string                                          `json:"forks_url"`
	FullName            string                                          `json:"full_name"`
	GitCommitsURL       string                                          `json:"git_commits_url"`
	GitRefsURL          string                                          `json:"git_refs_url"`
	GitTagsURL          string                                          `json:"git_tags_url"`
	GitURL              string                                          `json:"git_url"`
	HTMLURL             string                                          `json:"html_url"`
	HasDownloads        bool                                            `json:"has_downloads"`
	HasIssues           bool                                            `json:"has_issues"`
	HasPages            bool                                            `json:"has_pages"`
	HasProjects         bool                                            `json:"has_projects"`
	HasWiki             bool                                            `json:"has_wiki"`
	Homepage            string                                          `json:"homepage"`
	HooksURL            string                                          `json:"hooks_url"`
	ID                  int                                             `json:"id"`
	IsTemplate          bool                                            `json:"is_template"`
	IssueCommentURL     string                                          `json:"issue_comment_url"`
	IssueEventsURL      string                                          `json:"issue_events_url"`
	IssuesURL           string                                          `json:"issues_url"`
	KeysURL             string                                          `json:"keys_url"`
	LabelsURL           string                                          `json:"labels_url"`
	Language            string                                          `json:"language"`
	LanguagesURL        string                                          `json:"languages_url"`
	MergesURL           string                                          `json:"merges_url"`
	MilestonesURL       string                                          `json:"milestones_url"`
	MirrorURL           string                                          `json:"mirror_url"`
	Name                string                                          `json:"name"`
	NetworkCount        int                                             `json:"network_count"`
	NodeID              string                                          `json:"node_id"`
	NotificationsURL    string                                          `json:"notifications_url"`
	OpenIssuesCount     int                                             `json:"open_issues_count"`
	Owner               NullableRepositoryTemplateRepositoryOwner       `json:"owner"`
	Permissions         NullableRepositoryTemplateRepositoryPermissions `json:"permissions"`
	Private             bool                                            `json:"private"`
	PullsURL            string                                          `json:"pulls_url"`
	PushedAt            string                                          `json:"pushed_at"`
	ReleasesURL         string                                          `json:"releases_url"`
	SSHURL              string                                          `json:"ssh_url"`
	Size                int                                             `json:"size"`
	StargazersCount     int                                             `json:"stargazers_count"`
	StargazersURL       string                                          `json:"stargazers_url"`
	StatusesURL         string                                          `json:"statuses_url"`
	SubscribersCount    int                                             `json:"subscribers_count"`
	SubscribersURL      string                                          `json:"subscribers_url"`
	SubscriptionURL     string                                          `json:"subscription_url"`
	SvnURL              string                                          `json:"svn_url"`
	TagsURL             string                                          `json:"tags_url"`
	TeamsURL            string                                          `json:"teams_url"`
	TempCloneToken      string                                          `json:"temp_clone_token"`
	Topics              []string                                        `json:"topics"`
	TreesURL            string                                          `json:"trees_url"`
	URL                 string                                          `json:"url"`
	UpdatedAt           string                                          `json:"updated_at"`
	Visibility          string                                          `json:"visibility"`
	WatchersCount       int                                             `json:"watchers_count"`
}

type NullableRepositoryTemplateRepositoryOwner struct {
	AvatarURL         string `json:"avatar_url"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type NullableRepositoryTemplateRepositoryPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type NullableScopedInstallation struct {
	Account                SimpleUser     `json:"account"`
	HasMultipleSingleFiles bool           `json:"has_multiple_single_files"`
	Permissions            AppPermissions `json:"permissions"`
	RepositoriesURL        string         `json:"repositories_url"`
	RepositorySelection    string         `json:"repository_selection"`
	SingleFileName         string         `json:"single_file_name"`
	SingleFilePaths        []string       `json:"single_file_paths"`
}

type NullableSimpleCommit struct {
	Author    NullableSimpleCommitAuthor    `json:"author"`
	Committer NullableSimpleCommitCommitter `json:"committer"`
	ID        string                        `json:"id"`
	Message   string                        `json:"message"`
	Timestamp time.Time                     `json:"timestamp"`
	TreeID    string                        `json:"tree_id"`
}

type NullableSimpleCommitAuthor struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type NullableSimpleCommitCommitter struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type NullableSimpleUser struct {
	AvatarURL         string `json:"avatar_url"`
	Email             string `json:"email"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	Name              string `json:"name"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredAt         string `json:"starred_at"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type NullableTeamSimple struct {
	Description     string `json:"description"`
	HTMLURL         string `json:"html_url"`
	ID              int    `json:"id"`
	LdapDn          string `json:"ldap_dn"`
	MembersURL      string `json:"members_url"`
	Name            string `json:"name"`
	NodeID          string `json:"node_id"`
	Permission      string `json:"permission"`
	Privacy         string `json:"privacy"`
	RepositoriesURL string `json:"repositories_url"`
	Slug            string `json:"slug"`
	URL             string `json:"url"`
}

type OAuthAuthorizationsCreateAuthorizationApplicationJSONRequest struct {
	ClientID     string   `json:"client_id"`
	ClientSecret string   `json:"client_secret"`
	Fingerprint  string   `json:"fingerprint"`
	Note         string   `json:"note"`
	NoteURL      string   `json:"note_url"`
	Scopes       []string `json:"scopes"`
}

type OAuthAuthorizationsDeleteAuthorizationNoContent struct{}

func (*OAuthAuthorizationsDeleteAuthorizationNoContent) oAuthAuthorizationsDeleteAuthorizationResponse() {
}

type OAuthAuthorizationsDeleteGrantNoContent struct{}

func (*OAuthAuthorizationsDeleteGrantNoContent) oAuthAuthorizationsDeleteGrantResponse() {}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONRequest struct {
	ClientSecret string   `json:"client_secret"`
	Note         string   `json:"note"`
	NoteURL      string   `json:"note_url"`
	Scopes       []string `json:"scopes"`
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONRequest struct {
	ClientSecret string   `json:"client_secret"`
	Fingerprint  string   `json:"fingerprint"`
	Note         string   `json:"note"`
	NoteURL      string   `json:"note_url"`
	Scopes       []string `json:"scopes"`
}

type OAuthAuthorizationsListAuthorizationsOK []Authorization

func (*OAuthAuthorizationsListAuthorizationsOK) oAuthAuthorizationsListAuthorizationsResponse() {}

type OAuthAuthorizationsListGrantsOK []ApplicationGrant

func (*OAuthAuthorizationsListGrantsOK) oAuthAuthorizationsListGrantsResponse() {}

type OAuthAuthorizationsUpdateAuthorizationApplicationJSONRequest struct {
	AddScopes    []string `json:"add_scopes"`
	Fingerprint  string   `json:"fingerprint"`
	Note         string   `json:"note"`
	NoteURL      string   `json:"note_url"`
	RemoveScopes []string `json:"remove_scopes"`
	Scopes       []string `json:"scopes"`
}

type OrgHook struct {
	Active        bool          `json:"active"`
	Config        OrgHookConfig `json:"config"`
	CreatedAt     time.Time     `json:"created_at"`
	DeliveriesURL string        `json:"deliveries_url"`
	Events        []string      `json:"events"`
	ID            int           `json:"id"`
	Name          string        `json:"name"`
	PingURL       string        `json:"ping_url"`
	Type          string        `json:"type"`
	URL           string        `json:"url"`
	UpdatedAt     time.Time     `json:"updated_at"`
}

func (*OrgHook) orgsCreateWebhookResponse() {}
func (*OrgHook) orgsGetWebhookResponse()    {}
func (*OrgHook) orgsUpdateWebhookResponse() {}

type OrgHookConfig struct {
	ContentType string `json:"content_type"`
	InsecureSsl string `json:"insecure_ssl"`
	Secret      string `json:"secret"`
	URL         string `json:"url"`
}

type OrgMembership struct {
	Organization    OrganizationSimple       `json:"organization"`
	OrganizationURL string                   `json:"organization_url"`
	Permissions     OrgMembershipPermissions `json:"permissions"`
	Role            string                   `json:"role"`
	State           string                   `json:"state"`
	URL             string                   `json:"url"`
	User            NullableSimpleUser       `json:"user"`
}

func (*OrgMembership) orgsGetMembershipForAuthenticatedUserResponse()    {}
func (*OrgMembership) orgsGetMembershipForUserResponse()                 {}
func (*OrgMembership) orgsSetMembershipForUserResponse()                 {}
func (*OrgMembership) orgsUpdateMembershipForAuthenticatedUserResponse() {}

type OrgMembershipPermissions struct {
	CanCreateRepository bool `json:"can_create_repository"`
}

type OrganizationActionsSecret struct {
	CreatedAt               time.Time `json:"created_at"`
	Name                    string    `json:"name"`
	SelectedRepositoriesURL string    `json:"selected_repositories_url"`
	UpdatedAt               time.Time `json:"updated_at"`
	Visibility              string    `json:"visibility"`
}

type OrganizationFull struct {
	AvatarURL                            string               `json:"avatar_url"`
	BillingEmail                         string               `json:"billing_email"`
	Blog                                 string               `json:"blog"`
	Collaborators                        int                  `json:"collaborators"`
	Company                              string               `json:"company"`
	CreatedAt                            time.Time            `json:"created_at"`
	DefaultRepositoryPermission          string               `json:"default_repository_permission"`
	Description                          string               `json:"description"`
	DiskUsage                            int                  `json:"disk_usage"`
	Email                                string               `json:"email"`
	EventsURL                            string               `json:"events_url"`
	Followers                            int                  `json:"followers"`
	Following                            int                  `json:"following"`
	HTMLURL                              string               `json:"html_url"`
	HasOrganizationProjects              bool                 `json:"has_organization_projects"`
	HasRepositoryProjects                bool                 `json:"has_repository_projects"`
	HooksURL                             string               `json:"hooks_url"`
	ID                                   int                  `json:"id"`
	IsVerified                           bool                 `json:"is_verified"`
	IssuesURL                            string               `json:"issues_url"`
	Location                             string               `json:"location"`
	Login                                string               `json:"login"`
	MembersAllowedRepositoryCreationType string               `json:"members_allowed_repository_creation_type"`
	MembersCanCreateInternalRepositories bool                 `json:"members_can_create_internal_repositories"`
	MembersCanCreatePages                bool                 `json:"members_can_create_pages"`
	MembersCanCreatePrivatePages         bool                 `json:"members_can_create_private_pages"`
	MembersCanCreatePrivateRepositories  bool                 `json:"members_can_create_private_repositories"`
	MembersCanCreatePublicPages          bool                 `json:"members_can_create_public_pages"`
	MembersCanCreatePublicRepositories   bool                 `json:"members_can_create_public_repositories"`
	MembersCanCreateRepositories         bool                 `json:"members_can_create_repositories"`
	MembersURL                           string               `json:"members_url"`
	Name                                 string               `json:"name"`
	NodeID                               string               `json:"node_id"`
	OwnedPrivateRepos                    int                  `json:"owned_private_repos"`
	Plan                                 OrganizationFullPlan `json:"plan"`
	PrivateGists                         int                  `json:"private_gists"`
	PublicGists                          int                  `json:"public_gists"`
	PublicMembersURL                     string               `json:"public_members_url"`
	PublicRepos                          int                  `json:"public_repos"`
	ReposURL                             string               `json:"repos_url"`
	TotalPrivateRepos                    int                  `json:"total_private_repos"`
	TwitterUsername                      string               `json:"twitter_username"`
	TwoFactorRequirementEnabled          bool                 `json:"two_factor_requirement_enabled"`
	Type                                 string               `json:"type"`
	URL                                  string               `json:"url"`
	UpdatedAt                            time.Time            `json:"updated_at"`
}

func (*OrganizationFull) orgsGetResponse()    {}
func (*OrganizationFull) orgsUpdateResponse() {}

type OrganizationFullPlan struct {
	FilledSeats  int    `json:"filled_seats"`
	Name         string `json:"name"`
	PrivateRepos int    `json:"private_repos"`
	Seats        int    `json:"seats"`
	Space        int    `json:"space"`
}

type OrganizationInvitation struct {
	CreatedAt          string     `json:"created_at"`
	Email              string     `json:"email"`
	FailedAt           string     `json:"failed_at"`
	FailedReason       string     `json:"failed_reason"`
	ID                 int        `json:"id"`
	InvitationTeamsURL string     `json:"invitation_teams_url"`
	Inviter            SimpleUser `json:"inviter"`
	Login              string     `json:"login"`
	NodeID             string     `json:"node_id"`
	Role               string     `json:"role"`
	TeamCount          int        `json:"team_count"`
}

func (*OrganizationInvitation) orgsCreateInvitationResponse() {}

type OrganizationSecretScanningAlert struct {
	CreatedAt    time.Time          `json:"created_at"`
	HTMLURL      string             `json:"html_url"`
	LocationsURL string             `json:"locations_url"`
	Number       int                `json:"number"`
	Repository   MinimalRepository  `json:"repository"`
	Resolution   string             `json:"resolution"`
	ResolvedAt   time.Time          `json:"resolved_at"`
	ResolvedBy   NullableSimpleUser `json:"resolved_by"`
	Secret       string             `json:"secret"`
	SecretType   string             `json:"secret_type"`
	State        string             `json:"state"`
	URL          string             `json:"url"`
}

type OrganizationSimple struct {
	AvatarURL        string `json:"avatar_url"`
	Description      string `json:"description"`
	EventsURL        string `json:"events_url"`
	HooksURL         string `json:"hooks_url"`
	ID               int    `json:"id"`
	IssuesURL        string `json:"issues_url"`
	Login            string `json:"login"`
	MembersURL       string `json:"members_url"`
	NodeID           string `json:"node_id"`
	PublicMembersURL string `json:"public_members_url"`
	ReposURL         string `json:"repos_url"`
	URL              string `json:"url"`
}

type OrgsBlockUserNoContent struct{}

func (*OrgsBlockUserNoContent) orgsBlockUserResponse() {}

type OrgsCancelInvitationNoContent struct{}

func (*OrgsCancelInvitationNoContent) orgsCancelInvitationResponse() {}

type OrgsCheckBlockedUserNoContent struct{}

func (*OrgsCheckBlockedUserNoContent) orgsCheckBlockedUserResponse() {}

type OrgsCheckMembershipForUserFound struct{}

func (*OrgsCheckMembershipForUserFound) orgsCheckMembershipForUserResponse() {}

type OrgsCheckMembershipForUserNoContent struct{}

func (*OrgsCheckMembershipForUserNoContent) orgsCheckMembershipForUserResponse() {}

type OrgsCheckMembershipForUserNotFound struct{}

func (*OrgsCheckMembershipForUserNotFound) orgsCheckMembershipForUserResponse() {}

type OrgsCheckPublicMembershipForUserNoContent struct{}

func (*OrgsCheckPublicMembershipForUserNoContent) orgsCheckPublicMembershipForUserResponse() {}

type OrgsCheckPublicMembershipForUserNotFound struct{}

func (*OrgsCheckPublicMembershipForUserNotFound) orgsCheckPublicMembershipForUserResponse() {}

type OrgsConvertMemberToOutsideCollaboratorAccepted struct{}

func (*OrgsConvertMemberToOutsideCollaboratorAccepted) orgsConvertMemberToOutsideCollaboratorResponse() {
}

type OrgsConvertMemberToOutsideCollaboratorForbidden struct{}

func (*OrgsConvertMemberToOutsideCollaboratorForbidden) orgsConvertMemberToOutsideCollaboratorResponse() {
}

type OrgsConvertMemberToOutsideCollaboratorNoContent struct{}

func (*OrgsConvertMemberToOutsideCollaboratorNoContent) orgsConvertMemberToOutsideCollaboratorResponse() {
}

type OrgsCreateInvitationApplicationJSONRequest struct {
	Email     string `json:"email"`
	InviteeID int    `json:"invitee_id"`
	Role      string `json:"role"`
	TeamIds   []int  `json:"team_ids"`
}

type OrgsCreateWebhookApplicationJSONRequest struct {
	Name string `json:"name"`
}

type OrgsCreateWebhookApplicationJSONRequestConfig struct {
}

type OrgsDeleteWebhookNoContent struct{}

func (*OrgsDeleteWebhookNoContent) orgsDeleteWebhookResponse() {}

type OrgsListAppInstallations struct {
	Installations []Installation `json:"installations"`
	TotalCount    int            `json:"total_count"`
}

type OrgsListBlockedUsersOK []SimpleUser

func (*OrgsListBlockedUsersOK) orgsListBlockedUsersResponse() {}

type OrgsListFailedInvitationsOK []OrganizationInvitation

func (*OrgsListFailedInvitationsOK) orgsListFailedInvitationsResponse() {}

type OrgsListForAuthenticatedUserOK []OrganizationSimple

func (*OrgsListForAuthenticatedUserOK) orgsListForAuthenticatedUserResponse() {}

type OrgsListInvitationTeamsOK []Team

func (*OrgsListInvitationTeamsOK) orgsListInvitationTeamsResponse() {}

type OrgsListMembersFound struct{}

func (*OrgsListMembersFound) orgsListMembersResponse() {}

type OrgsListMembersOK []SimpleUser

func (*OrgsListMembersOK) orgsListMembersResponse() {}

type OrgsListMembershipsForAuthenticatedUserOK []OrgMembership

func (*OrgsListMembershipsForAuthenticatedUserOK) orgsListMembershipsForAuthenticatedUserResponse() {}

type OrgsListOK []OrganizationSimple

func (*OrgsListOK) orgsListResponse() {}

type OrgsListPendingInvitationsOK []OrganizationInvitation

func (*OrgsListPendingInvitationsOK) orgsListPendingInvitationsResponse() {}

type OrgsListWebhookDeliveriesOK []HookDeliveryItem

func (*OrgsListWebhookDeliveriesOK) orgsListWebhookDeliveriesResponse() {}

type OrgsListWebhooksOK []OrgHook

func (*OrgsListWebhooksOK) orgsListWebhooksResponse() {}

type OrgsPingWebhookNoContent struct{}

func (*OrgsPingWebhookNoContent) orgsPingWebhookResponse() {}

type OrgsRemoveMemberNoContent struct{}

func (*OrgsRemoveMemberNoContent) orgsRemoveMemberResponse() {}

type OrgsRemoveMembershipForUserNoContent struct{}

func (*OrgsRemoveMembershipForUserNoContent) orgsRemoveMembershipForUserResponse() {}

type OrgsRemoveOutsideCollaboratorNoContent struct{}

func (*OrgsRemoveOutsideCollaboratorNoContent) orgsRemoveOutsideCollaboratorResponse() {}

type OrgsRemoveOutsideCollaboratorUnprocessableEntity struct {
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
}

func (*OrgsRemoveOutsideCollaboratorUnprocessableEntity) orgsRemoveOutsideCollaboratorResponse() {}

type OrgsRemovePublicMembershipForAuthenticatedUser struct{}

type OrgsRemoveSamlSSOAuthorizationNoContent struct{}

func (*OrgsRemoveSamlSSOAuthorizationNoContent) orgsRemoveSamlSSOAuthorizationResponse() {}

type OrgsSetMembershipForUserApplicationJSONRequest struct {
	Role string `json:"role"`
}

type OrgsSetPublicMembershipForAuthenticatedUserNoContent struct{}

func (*OrgsSetPublicMembershipForAuthenticatedUserNoContent) orgsSetPublicMembershipForAuthenticatedUserResponse() {
}

type OrgsUnblockUser struct{}

type OrgsUpdateApplicationJSONRequest struct {
	BillingEmail                         string `json:"billing_email"`
	Blog                                 string `json:"blog"`
	Company                              string `json:"company"`
	DefaultRepositoryPermission          string `json:"default_repository_permission"`
	Description                          string `json:"description"`
	Email                                string `json:"email"`
	HasOrganizationProjects              bool   `json:"has_organization_projects"`
	HasRepositoryProjects                bool   `json:"has_repository_projects"`
	Location                             string `json:"location"`
	MembersAllowedRepositoryCreationType string `json:"members_allowed_repository_creation_type"`
	MembersCanCreateInternalRepositories bool   `json:"members_can_create_internal_repositories"`
	MembersCanCreatePages                bool   `json:"members_can_create_pages"`
	MembersCanCreatePrivatePages         bool   `json:"members_can_create_private_pages"`
	MembersCanCreatePrivateRepositories  bool   `json:"members_can_create_private_repositories"`
	MembersCanCreatePublicPages          bool   `json:"members_can_create_public_pages"`
	MembersCanCreatePublicRepositories   bool   `json:"members_can_create_public_repositories"`
	MembersCanCreateRepositories         bool   `json:"members_can_create_repositories"`
	Name                                 string `json:"name"`
	TwitterUsername                      string `json:"twitter_username"`
}

type OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest struct {
	State string `json:"state"`
}

type OrgsUpdateWebhookApplicationJSONRequest struct {
}

type OrgsUpdateWebhookApplicationJSONRequestConfig struct {
	URL         string `json:"url"`
	ContentType string `json:"content_type"`
	Secret      string `json:"secret"`
}

type OrgsUpdateWebhookConfigForOrgApplicationJSONRequest struct {
	URL         string `json:"url"`
	ContentType string `json:"content_type"`
	Secret      string `json:"secret"`
}

type Package struct {
	CreatedAt    time.Time                 `json:"created_at"`
	HTMLURL      string                    `json:"html_url"`
	ID           int                       `json:"id"`
	Name         string                    `json:"name"`
	Owner        NullableSimpleUser        `json:"owner"`
	PackageType  string                    `json:"package_type"`
	Repository   NullableMinimalRepository `json:"repository"`
	URL          string                    `json:"url"`
	UpdatedAt    time.Time                 `json:"updated_at"`
	VersionCount int                       `json:"version_count"`
	Visibility   string                    `json:"visibility"`
}

type PackageVersion struct {
	HTMLURL        string    `json:"html_url"`
	License        string    `json:"license"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	DeletedAt      time.Time `json:"deleted_at"`
	Name           string    `json:"name"`
	URL            string    `json:"url"`
	PackageHTMLURL string    `json:"package_html_url"`
	ID             int       `json:"id"`
	Description    string    `json:"description"`
}

type PackageVersionMetadata struct {
}

type PackageVersionMetadataContainer struct {
}

type PackagesBillingUsage struct {
	IncludedGigabytesBandwidth      int `json:"included_gigabytes_bandwidth"`
	TotalGigabytesBandwidthUsed     int `json:"total_gigabytes_bandwidth_used"`
	TotalPaidGigabytesBandwidthUsed int `json:"total_paid_gigabytes_bandwidth_used"`
}

type PackagesDeletePackageForAuthenticatedUserNoContent struct{}

func (*PackagesDeletePackageForAuthenticatedUserNoContent) packagesDeletePackageForAuthenticatedUserResponse() {
}

type PackagesDeletePackageForOrgNoContent struct{}

func (*PackagesDeletePackageForOrgNoContent) packagesDeletePackageForOrgResponse() {}

type PackagesDeletePackageForUserNoContent struct{}

func (*PackagesDeletePackageForUserNoContent) packagesDeletePackageForUserResponse() {}

type PackagesDeletePackageVersionForAuthenticatedUserNoContent struct{}

func (*PackagesDeletePackageVersionForAuthenticatedUserNoContent) packagesDeletePackageVersionForAuthenticatedUserResponse() {
}

type PackagesDeletePackageVersionForOrgNoContent struct{}

func (*PackagesDeletePackageVersionForOrgNoContent) packagesDeletePackageVersionForOrgResponse() {}

type PackagesDeletePackageVersionForUserNoContent struct{}

func (*PackagesDeletePackageVersionForUserNoContent) packagesDeletePackageVersionForUserResponse() {}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOK []PackageVersion

func (*PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOK) packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByOrgOK []PackageVersion

func (*PackagesGetAllPackageVersionsForPackageOwnedByOrgOK) packagesGetAllPackageVersionsForPackageOwnedByOrgResponse() {
}

type PackagesGetAllPackageVersionsForPackageOwnedByUserOK []PackageVersion

func (*PackagesGetAllPackageVersionsForPackageOwnedByUserOK) packagesGetAllPackageVersionsForPackageOwnedByUserResponse() {
}

type PackagesListPackagesForOrganizationOK []Package

func (*PackagesListPackagesForOrganizationOK) packagesListPackagesForOrganizationResponse() {}

type PackagesListPackagesForUserOK []Package

func (*PackagesListPackagesForUserOK) packagesListPackagesForUserResponse() {}

type PackagesRestorePackageForAuthenticatedUserNoContent struct{}

func (*PackagesRestorePackageForAuthenticatedUserNoContent) packagesRestorePackageForAuthenticatedUserResponse() {
}

type PackagesRestorePackageForOrgNoContent struct{}

func (*PackagesRestorePackageForOrgNoContent) packagesRestorePackageForOrgResponse() {}

type PackagesRestorePackageForUserNoContent struct{}

func (*PackagesRestorePackageForUserNoContent) packagesRestorePackageForUserResponse() {}

type PackagesRestorePackageVersionForAuthenticatedUserNoContent struct{}

func (*PackagesRestorePackageVersionForAuthenticatedUserNoContent) packagesRestorePackageVersionForAuthenticatedUserResponse() {
}

type PackagesRestorePackageVersionForOrgNoContent struct{}

func (*PackagesRestorePackageVersionForOrgNoContent) packagesRestorePackageVersionForOrgResponse() {}

type PackagesRestorePackageVersionForUserNoContent struct{}

func (*PackagesRestorePackageVersionForUserNoContent) packagesRestorePackageVersionForUserResponse() {
}

type Page struct {
	Status                    string          `json:"status"`
	Cname                     string          `json:"cname"`
	PendingDomainUnverifiedAt time.Time       `json:"pending_domain_unverified_at"`
	Custom404                 bool            `json:"custom_404"`
	HTMLURL                   string          `json:"html_url"`
	Source                    PagesSourceHash `json:"source"`
	Public                    bool            `json:"public"`
}

func (*Page) reposCreatePagesSiteResponse() {}

type PageBuild struct {
	Commit    string             `json:"commit"`
	CreatedAt time.Time          `json:"created_at"`
	Duration  int                `json:"duration"`
	Error     PageBuildError     `json:"error"`
	Pusher    NullableSimpleUser `json:"pusher"`
	Status    string             `json:"status"`
	URL       string             `json:"url"`
	UpdatedAt time.Time          `json:"updated_at"`
}

type PageBuildError struct {
	Message string `json:"message"`
}

type PageBuildStatus struct {
	Status string `json:"status"`
	URL    string `json:"url"`
}

type PagesHTTPSCertificate struct {
}

type PagesHealthCheck struct {
	AltDomain PagesHealthCheckAltDomain `json:"alt_domain"`
	Domain    PagesHealthCheckDomain    `json:"domain"`
}

func (*PagesHealthCheck) reposGetPagesHealthCheckResponse() {}

type PagesHealthCheckAltDomain struct {
	CaaError                      string `json:"caa_error"`
	DNSResolves                   bool   `json:"dns_resolves"`
	EnforcesHTTPS                 bool   `json:"enforces_https"`
	HTTPSError                    string `json:"https_error"`
	HasCnameRecord                bool   `json:"has_cname_record"`
	HasMxRecordsPresent           bool   `json:"has_mx_records_present"`
	Host                          string `json:"host"`
	IsARecord                     bool   `json:"is_a_record"`
	IsApexDomain                  bool   `json:"is_apex_domain"`
	IsCloudflareIP                bool   `json:"is_cloudflare_ip"`
	IsCnameToFastly               bool   `json:"is_cname_to_fastly"`
	IsCnameToGithubUserDomain     bool   `json:"is_cname_to_github_user_domain"`
	IsCnameToPagesDotGithubDotCom bool   `json:"is_cname_to_pages_dot_github_dot_com"`
	IsFastlyIP                    bool   `json:"is_fastly_ip"`
	IsHTTPSEligible               bool   `json:"is_https_eligible"`
	IsNonGithubPagesIPPresent     bool   `json:"is_non_github_pages_ip_present"`
	IsOldIPAddress                bool   `json:"is_old_ip_address"`
	IsPagesDomain                 bool   `json:"is_pages_domain"`
	IsPointedToGithubPagesIP      bool   `json:"is_pointed_to_github_pages_ip"`
	IsProxied                     bool   `json:"is_proxied"`
	IsServedByPages               bool   `json:"is_served_by_pages"`
	IsValid                       bool   `json:"is_valid"`
	IsValidDomain                 bool   `json:"is_valid_domain"`
	Nameservers                   string `json:"nameservers"`
	Reason                        string `json:"reason"`
	RespondsToHTTPS               bool   `json:"responds_to_https"`
	ShouldBeARecord               bool   `json:"should_be_a_record"`
	URI                           string `json:"uri"`
}

type PagesHealthCheckDomain struct {
	CaaError                      string `json:"caa_error"`
	DNSResolves                   bool   `json:"dns_resolves"`
	EnforcesHTTPS                 bool   `json:"enforces_https"`
	HTTPSError                    string `json:"https_error"`
	HasCnameRecord                bool   `json:"has_cname_record"`
	HasMxRecordsPresent           bool   `json:"has_mx_records_present"`
	Host                          string `json:"host"`
	IsARecord                     bool   `json:"is_a_record"`
	IsApexDomain                  bool   `json:"is_apex_domain"`
	IsCloudflareIP                bool   `json:"is_cloudflare_ip"`
	IsCnameToFastly               bool   `json:"is_cname_to_fastly"`
	IsCnameToGithubUserDomain     bool   `json:"is_cname_to_github_user_domain"`
	IsCnameToPagesDotGithubDotCom bool   `json:"is_cname_to_pages_dot_github_dot_com"`
	IsFastlyIP                    bool   `json:"is_fastly_ip"`
	IsHTTPSEligible               bool   `json:"is_https_eligible"`
	IsNonGithubPagesIPPresent     bool   `json:"is_non_github_pages_ip_present"`
	IsOldIPAddress                bool   `json:"is_old_ip_address"`
	IsPagesDomain                 bool   `json:"is_pages_domain"`
	IsPointedToGithubPagesIP      bool   `json:"is_pointed_to_github_pages_ip"`
	IsProxied                     bool   `json:"is_proxied"`
	IsServedByPages               bool   `json:"is_served_by_pages"`
	IsValid                       bool   `json:"is_valid"`
	IsValidDomain                 bool   `json:"is_valid_domain"`
	Nameservers                   string `json:"nameservers"`
	Reason                        string `json:"reason"`
	RespondsToHTTPS               bool   `json:"responds_to_https"`
	ShouldBeARecord               bool   `json:"should_be_a_record"`
	URI                           string `json:"uri"`
}

type PagesSourceHash struct {
	Branch string `json:"branch"`
	Path   string `json:"path"`
}

type ParticipationStats struct {
	All   []int `json:"all"`
	Owner []int `json:"owner"`
}

func (*ParticipationStats) reposGetParticipationStatsResponse() {}

type PendingDeployment struct {
	CurrentUserCanApprove bool `json:"current_user_can_approve"`
}

type PendingDeploymentReviewersItem struct {
	Type string `json:"type"`
}

type PorterAuthor struct {
	Email      string `json:"email"`
	ID         int    `json:"id"`
	ImportURL  string `json:"import_url"`
	Name       string `json:"name"`
	RemoteID   string `json:"remote_id"`
	RemoteName string `json:"remote_name"`
	URL        string `json:"url"`
}

func (*PorterAuthor) migrationsMapCommitAuthorResponse() {}

type PorterLargeFile struct {
	Oid     string `json:"oid"`
	Path    string `json:"path"`
	RefName string `json:"ref_name"`
	Size    int    `json:"size"`
}

type PrivateUser struct {
	AvatarURL               string          `json:"avatar_url"`
	Bio                     string          `json:"bio"`
	Blog                    string          `json:"blog"`
	BusinessPlus            bool            `json:"business_plus"`
	Collaborators           int             `json:"collaborators"`
	Company                 string          `json:"company"`
	CreatedAt               time.Time       `json:"created_at"`
	DiskUsage               int             `json:"disk_usage"`
	Email                   string          `json:"email"`
	EventsURL               string          `json:"events_url"`
	Followers               int             `json:"followers"`
	FollowersURL            string          `json:"followers_url"`
	Following               int             `json:"following"`
	FollowingURL            string          `json:"following_url"`
	GistsURL                string          `json:"gists_url"`
	GravatarID              string          `json:"gravatar_id"`
	HTMLURL                 string          `json:"html_url"`
	Hireable                bool            `json:"hireable"`
	ID                      int             `json:"id"`
	LdapDn                  string          `json:"ldap_dn"`
	Location                string          `json:"location"`
	Login                   string          `json:"login"`
	Name                    string          `json:"name"`
	NodeID                  string          `json:"node_id"`
	OrganizationsURL        string          `json:"organizations_url"`
	OwnedPrivateRepos       int             `json:"owned_private_repos"`
	Plan                    PrivateUserPlan `json:"plan"`
	PrivateGists            int             `json:"private_gists"`
	PublicGists             int             `json:"public_gists"`
	PublicRepos             int             `json:"public_repos"`
	ReceivedEventsURL       string          `json:"received_events_url"`
	ReposURL                string          `json:"repos_url"`
	SiteAdmin               bool            `json:"site_admin"`
	StarredURL              string          `json:"starred_url"`
	SubscriptionsURL        string          `json:"subscriptions_url"`
	SuspendedAt             time.Time       `json:"suspended_at"`
	TotalPrivateRepos       int             `json:"total_private_repos"`
	TwitterUsername         string          `json:"twitter_username"`
	TwoFactorAuthentication bool            `json:"two_factor_authentication"`
	Type                    string          `json:"type"`
	URL                     string          `json:"url"`
	UpdatedAt               time.Time       `json:"updated_at"`
}

func (*PrivateUser) usersUpdateAuthenticatedResponse() {}

type PrivateUserPlan struct {
	Collaborators int    `json:"collaborators"`
	Name          string `json:"name"`
	PrivateRepos  int    `json:"private_repos"`
	Space         int    `json:"space"`
}

type Project struct {
	Body                   string             `json:"body"`
	ColumnsURL             string             `json:"columns_url"`
	CreatedAt              time.Time          `json:"created_at"`
	Creator                NullableSimpleUser `json:"creator"`
	HTMLURL                string             `json:"html_url"`
	ID                     int                `json:"id"`
	Name                   string             `json:"name"`
	NodeID                 string             `json:"node_id"`
	Number                 int                `json:"number"`
	OrganizationPermission string             `json:"organization_permission"`
	OwnerURL               string             `json:"owner_url"`
	Private                bool               `json:"private"`
	State                  string             `json:"state"`
	URL                    string             `json:"url"`
	UpdatedAt              time.Time          `json:"updated_at"`
}

func (*Project) projectsCreateForAuthenticatedUserResponse() {}
func (*Project) projectsCreateForOrgResponse()               {}
func (*Project) projectsCreateForRepoResponse()              {}
func (*Project) projectsGetResponse()                        {}
func (*Project) projectsUpdateResponse()                     {}

type ProjectCard struct {
	Archived   bool               `json:"archived"`
	ColumnName string             `json:"column_name"`
	ColumnURL  string             `json:"column_url"`
	ContentURL string             `json:"content_url"`
	CreatedAt  time.Time          `json:"created_at"`
	Creator    NullableSimpleUser `json:"creator"`
	ID         int                `json:"id"`
	NodeID     string             `json:"node_id"`
	Note       string             `json:"note"`
	ProjectID  string             `json:"project_id"`
	ProjectURL string             `json:"project_url"`
	URL        string             `json:"url"`
	UpdatedAt  time.Time          `json:"updated_at"`
}

func (*ProjectCard) projectsCreateCardResponse() {}
func (*ProjectCard) projectsGetCardResponse()    {}
func (*ProjectCard) projectsUpdateCardResponse() {}

type ProjectColumn struct {
	CardsURL   string    `json:"cards_url"`
	CreatedAt  time.Time `json:"created_at"`
	ID         int       `json:"id"`
	Name       string    `json:"name"`
	NodeID     string    `json:"node_id"`
	ProjectURL string    `json:"project_url"`
	URL        string    `json:"url"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (*ProjectColumn) projectsCreateColumnResponse() {}
func (*ProjectColumn) projectsGetColumnResponse()    {}
func (*ProjectColumn) projectsUpdateColumnResponse() {}

type ProjectsAddCollaboratorApplicationJSONRequest struct {
	Permission string `json:"permission"`
}

type ProjectsAddCollaboratorNoContent struct{}

func (*ProjectsAddCollaboratorNoContent) projectsAddCollaboratorResponse() {}

type ProjectsCreateCardServiceUnavailable struct {
	Code             string                                           `json:"code"`
	DocumentationURL string                                           `json:"documentation_url"`
	Errors           []ProjectsCreateCardServiceUnavailableErrorsItem `json:"errors"`
	Message          string                                           `json:"message"`
}

func (*ProjectsCreateCardServiceUnavailable) projectsCreateCardResponse() {}

type ProjectsCreateCardServiceUnavailableErrorsItem struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

type ProjectsCreateColumnApplicationJSONRequest struct {
	Name string `json:"name"`
}

type ProjectsCreateForAuthenticatedUserApplicationJSONRequest struct {
	Body string `json:"body"`
	Name string `json:"name"`
}

type ProjectsCreateForOrgApplicationJSONRequest struct {
	Body string `json:"body"`
	Name string `json:"name"`
}

type ProjectsCreateForRepoApplicationJSONRequest struct {
	Body string `json:"body"`
	Name string `json:"name"`
}

type ProjectsDeleteCardForbidden struct {
	DocumentationURL string   `json:"documentation_url"`
	Errors           []string `json:"errors"`
	Message          string   `json:"message"`
}

func (*ProjectsDeleteCardForbidden) projectsDeleteCardResponse() {}

type ProjectsDeleteCardNoContent struct{}

func (*ProjectsDeleteCardNoContent) projectsDeleteCardResponse() {}

type ProjectsDeleteColumnNoContent struct{}

func (*ProjectsDeleteColumnNoContent) projectsDeleteColumnResponse() {}

type ProjectsDeleteForbidden struct {
	DocumentationURL string   `json:"documentation_url"`
	Errors           []string `json:"errors"`
	Message          string   `json:"message"`
}

func (*ProjectsDeleteForbidden) projectsDeleteResponse() {}

type ProjectsDeleteNoContent struct{}

func (*ProjectsDeleteNoContent) projectsDeleteResponse() {}

type ProjectsListCardsOK []ProjectCard

func (*ProjectsListCardsOK) projectsListCardsResponse() {}

type ProjectsListCollaboratorsOK []SimpleUser

func (*ProjectsListCollaboratorsOK) projectsListCollaboratorsResponse() {}

type ProjectsListColumnsOK []ProjectColumn

func (*ProjectsListColumnsOK) projectsListColumnsResponse() {}

type ProjectsListForOrgOK []Project

func (*ProjectsListForOrgOK) projectsListForOrgResponse() {}

type ProjectsListForRepoOK []Project

func (*ProjectsListForRepoOK) projectsListForRepoResponse() {}

type ProjectsListForUserOK []Project

func (*ProjectsListForUserOK) projectsListForUserResponse() {}

type ProjectsMoveCardApplicationJSONRequest struct {
	ColumnID int    `json:"column_id"`
	Position string `json:"position"`
}

type ProjectsMoveCardCreated struct{}

func (*ProjectsMoveCardCreated) projectsMoveCardResponse() {}

type ProjectsMoveCardForbidden struct {
	DocumentationURL string                                `json:"documentation_url"`
	Errors           []ProjectsMoveCardForbiddenErrorsItem `json:"errors"`
	Message          string                                `json:"message"`
}

func (*ProjectsMoveCardForbidden) projectsMoveCardResponse() {}

type ProjectsMoveCardForbiddenErrorsItem struct {
	Code     string `json:"code"`
	Field    string `json:"field"`
	Message  string `json:"message"`
	Resource string `json:"resource"`
}

type ProjectsMoveCardServiceUnavailable struct {
	Code             string                                         `json:"code"`
	DocumentationURL string                                         `json:"documentation_url"`
	Errors           []ProjectsMoveCardServiceUnavailableErrorsItem `json:"errors"`
	Message          string                                         `json:"message"`
}

func (*ProjectsMoveCardServiceUnavailable) projectsMoveCardResponse() {}

type ProjectsMoveCardServiceUnavailableErrorsItem struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

type ProjectsMoveColumnApplicationJSONRequest struct {
	Position string `json:"position"`
}

type ProjectsMoveColumnCreated struct{}

func (*ProjectsMoveColumnCreated) projectsMoveColumnResponse() {}

type ProjectsRemoveCollaboratorNoContent struct{}

func (*ProjectsRemoveCollaboratorNoContent) projectsRemoveCollaboratorResponse() {}

type ProjectsUpdateApplicationJSONRequest struct {
	Body                   string `json:"body"`
	Name                   string `json:"name"`
	OrganizationPermission string `json:"organization_permission"`
	Private                bool   `json:"private"`
	State                  string `json:"state"`
}

type ProjectsUpdateCardApplicationJSONRequest struct {
	Archived bool   `json:"archived"`
	Note     string `json:"note"`
}

type ProjectsUpdateColumnApplicationJSONRequest struct {
	Name string `json:"name"`
}

type ProjectsUpdateForbidden struct {
	DocumentationURL string   `json:"documentation_url"`
	Errors           []string `json:"errors"`
	Message          string   `json:"message"`
}

func (*ProjectsUpdateForbidden) projectsUpdateResponse() {}

type ProjectsUpdateNotFound struct{}

func (*ProjectsUpdateNotFound) projectsUpdateResponse() {}

type ProtectedBranch struct {
	AllowDeletions                 ProtectedBranchAllowDeletions                 `json:"allow_deletions"`
	AllowForcePushes               ProtectedBranchAllowForcePushes               `json:"allow_force_pushes"`
	EnforceAdmins                  ProtectedBranchEnforceAdmins                  `json:"enforce_admins"`
	RequiredConversationResolution ProtectedBranchRequiredConversationResolution `json:"required_conversation_resolution"`
	RequiredLinearHistory          ProtectedBranchRequiredLinearHistory          `json:"required_linear_history"`
	RequiredPullRequestReviews     ProtectedBranchRequiredPullRequestReviews     `json:"required_pull_request_reviews"`
	RequiredSignatures             ProtectedBranchRequiredSignatures             `json:"required_signatures"`
	RequiredStatusChecks           StatusCheckPolicy                             `json:"required_status_checks"`
	Restrictions                   BranchRestrictionPolicy                       `json:"restrictions"`
	URL                            string                                        `json:"url"`
}

func (*ProtectedBranch) reposUpdateBranchProtectionResponse() {}

type ProtectedBranchAdminEnforced struct {
	Enabled bool   `json:"enabled"`
	URL     string `json:"url"`
}

func (*ProtectedBranchAdminEnforced) reposCreateCommitSignatureProtectionResponse() {}
func (*ProtectedBranchAdminEnforced) reposGetCommitSignatureProtectionResponse()    {}

type ProtectedBranchAllowDeletions struct {
	Enabled bool `json:"enabled"`
}

type ProtectedBranchAllowForcePushes struct {
	Enabled bool `json:"enabled"`
}

type ProtectedBranchEnforceAdmins struct {
	Enabled bool   `json:"enabled"`
	URL     string `json:"url"`
}

type ProtectedBranchPullRequestReview struct {
	DismissStaleReviews          bool                                                  `json:"dismiss_stale_reviews"`
	DismissalRestrictions        ProtectedBranchPullRequestReviewDismissalRestrictions `json:"dismissal_restrictions"`
	RequireCodeOwnerReviews      bool                                                  `json:"require_code_owner_reviews"`
	RequiredApprovingReviewCount int                                                   `json:"required_approving_review_count"`
	URL                          string                                                `json:"url"`
}

func (*ProtectedBranchPullRequestReview) reposUpdatePullRequestReviewProtectionResponse() {}

type ProtectedBranchPullRequestReviewDismissalRestrictions struct {
	Teams    []Team       `json:"teams"`
	TeamsURL string       `json:"teams_url"`
	URL      string       `json:"url"`
	Users    []SimpleUser `json:"users"`
	UsersURL string       `json:"users_url"`
}

type ProtectedBranchRequiredConversationResolution struct {
	Enabled bool `json:"enabled"`
}

type ProtectedBranchRequiredLinearHistory struct {
	Enabled bool `json:"enabled"`
}

type ProtectedBranchRequiredPullRequestReviews struct {
	DismissStaleReviews          bool                                                           `json:"dismiss_stale_reviews"`
	DismissalRestrictions        ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions `json:"dismissal_restrictions"`
	RequireCodeOwnerReviews      bool                                                           `json:"require_code_owner_reviews"`
	RequiredApprovingReviewCount int                                                            `json:"required_approving_review_count"`
	URL                          string                                                         `json:"url"`
}

type ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions struct {
	Teams    []Team       `json:"teams"`
	TeamsURL string       `json:"teams_url"`
	URL      string       `json:"url"`
	Users    []SimpleUser `json:"users"`
	UsersURL string       `json:"users_url"`
}

type ProtectedBranchRequiredSignatures struct {
	Enabled bool   `json:"enabled"`
	URL     string `json:"url"`
}

type PullRequest struct {
	ActiveLockReason    string                  `json:"active_lock_reason"`
	Additions           int                     `json:"additions"`
	Assignee            NullableSimpleUser      `json:"assignee"`
	Assignees           []SimpleUser            `json:"assignees"`
	AuthorAssociation   string                  `json:"author_association"`
	AutoMerge           AutoMerge               `json:"auto_merge"`
	Base                PullRequestBase         `json:"base"`
	Body                string                  `json:"body"`
	ChangedFiles        int                     `json:"changed_files"`
	ClosedAt            time.Time               `json:"closed_at"`
	Comments            int                     `json:"comments"`
	CommentsURL         string                  `json:"comments_url"`
	Commits             int                     `json:"commits"`
	CommitsURL          string                  `json:"commits_url"`
	CreatedAt           time.Time               `json:"created_at"`
	Deletions           int                     `json:"deletions"`
	DiffURL             string                  `json:"diff_url"`
	Draft               bool                    `json:"draft"`
	HTMLURL             string                  `json:"html_url"`
	Head                PullRequestHead         `json:"head"`
	ID                  int                     `json:"id"`
	IssueURL            string                  `json:"issue_url"`
	Labels              []PullRequestLabelsItem `json:"labels"`
	Links               PullRequestLinks        `json:"_links"`
	Locked              bool                    `json:"locked"`
	MaintainerCanModify bool                    `json:"maintainer_can_modify"`
	MergeCommitSha      string                  `json:"merge_commit_sha"`
	Mergeable           bool                    `json:"mergeable"`
	MergeableState      string                  `json:"mergeable_state"`
	Merged              bool                    `json:"merged"`
	MergedAt            time.Time               `json:"merged_at"`
	MergedBy            NullableSimpleUser      `json:"merged_by"`
	Milestone           NullableMilestone       `json:"milestone"`
	NodeID              string                  `json:"node_id"`
	Number              int                     `json:"number"`
	PatchURL            string                  `json:"patch_url"`
	Rebaseable          bool                    `json:"rebaseable"`
	RequestedReviewers  []SimpleUser            `json:"requested_reviewers"`
	RequestedTeams      []TeamSimple            `json:"requested_teams"`
	ReviewCommentURL    string                  `json:"review_comment_url"`
	ReviewComments      int                     `json:"review_comments"`
	ReviewCommentsURL   string                  `json:"review_comments_url"`
	State               string                  `json:"state"`
	StatusesURL         string                  `json:"statuses_url"`
	Title               string                  `json:"title"`
	URL                 string                  `json:"url"`
	UpdatedAt           time.Time               `json:"updated_at"`
	User                NullableSimpleUser      `json:"user"`
}

func (*PullRequest) pullsCreateResponse() {}
func (*PullRequest) pullsGetResponse()    {}
func (*PullRequest) pullsUpdateResponse() {}

type PullRequestBase struct {
	Label string              `json:"label"`
	Ref   string              `json:"ref"`
	Repo  PullRequestBaseRepo `json:"repo"`
	Sha   string              `json:"sha"`
	User  PullRequestBaseUser `json:"user"`
}

type PullRequestBaseRepo struct {
	AllowForking     bool                           `json:"allow_forking"`
	AllowMergeCommit bool                           `json:"allow_merge_commit"`
	AllowRebaseMerge bool                           `json:"allow_rebase_merge"`
	AllowSquashMerge bool                           `json:"allow_squash_merge"`
	ArchiveURL       string                         `json:"archive_url"`
	Archived         bool                           `json:"archived"`
	AssigneesURL     string                         `json:"assignees_url"`
	BlobsURL         string                         `json:"blobs_url"`
	BranchesURL      string                         `json:"branches_url"`
	CloneURL         string                         `json:"clone_url"`
	CollaboratorsURL string                         `json:"collaborators_url"`
	CommentsURL      string                         `json:"comments_url"`
	CommitsURL       string                         `json:"commits_url"`
	CompareURL       string                         `json:"compare_url"`
	ContentsURL      string                         `json:"contents_url"`
	ContributorsURL  string                         `json:"contributors_url"`
	CreatedAt        time.Time                      `json:"created_at"`
	DefaultBranch    string                         `json:"default_branch"`
	DeploymentsURL   string                         `json:"deployments_url"`
	Description      string                         `json:"description"`
	Disabled         bool                           `json:"disabled"`
	DownloadsURL     string                         `json:"downloads_url"`
	EventsURL        string                         `json:"events_url"`
	Fork             bool                           `json:"fork"`
	Forks            int                            `json:"forks"`
	ForksCount       int                            `json:"forks_count"`
	ForksURL         string                         `json:"forks_url"`
	FullName         string                         `json:"full_name"`
	GitCommitsURL    string                         `json:"git_commits_url"`
	GitRefsURL       string                         `json:"git_refs_url"`
	GitTagsURL       string                         `json:"git_tags_url"`
	GitURL           string                         `json:"git_url"`
	HTMLURL          string                         `json:"html_url"`
	HasDownloads     bool                           `json:"has_downloads"`
	HasIssues        bool                           `json:"has_issues"`
	HasPages         bool                           `json:"has_pages"`
	HasProjects      bool                           `json:"has_projects"`
	HasWiki          bool                           `json:"has_wiki"`
	Homepage         string                         `json:"homepage"`
	HooksURL         string                         `json:"hooks_url"`
	ID               int                            `json:"id"`
	IssueCommentURL  string                         `json:"issue_comment_url"`
	IssueEventsURL   string                         `json:"issue_events_url"`
	IssuesURL        string                         `json:"issues_url"`
	KeysURL          string                         `json:"keys_url"`
	LabelsURL        string                         `json:"labels_url"`
	Language         string                         `json:"language"`
	LanguagesURL     string                         `json:"languages_url"`
	License          NullableLicenseSimple          `json:"license"`
	MasterBranch     string                         `json:"master_branch"`
	MergesURL        string                         `json:"merges_url"`
	MilestonesURL    string                         `json:"milestones_url"`
	MirrorURL        string                         `json:"mirror_url"`
	Name             string                         `json:"name"`
	NodeID           string                         `json:"node_id"`
	NotificationsURL string                         `json:"notifications_url"`
	OpenIssues       int                            `json:"open_issues"`
	OpenIssuesCount  int                            `json:"open_issues_count"`
	Owner            PullRequestBaseRepoOwner       `json:"owner"`
	Permissions      PullRequestBaseRepoPermissions `json:"permissions"`
	Private          bool                           `json:"private"`
	PullsURL         string                         `json:"pulls_url"`
	PushedAt         time.Time                      `json:"pushed_at"`
	ReleasesURL      string                         `json:"releases_url"`
	SSHURL           string                         `json:"ssh_url"`
	Size             int                            `json:"size"`
	StargazersCount  int                            `json:"stargazers_count"`
	StargazersURL    string                         `json:"stargazers_url"`
	StatusesURL      string                         `json:"statuses_url"`
	SubscribersURL   string                         `json:"subscribers_url"`
	SubscriptionURL  string                         `json:"subscription_url"`
	SvnURL           string                         `json:"svn_url"`
	TagsURL          string                         `json:"tags_url"`
	TeamsURL         string                         `json:"teams_url"`
	TempCloneToken   string                         `json:"temp_clone_token"`
	Topics           []string                       `json:"topics"`
	TreesURL         string                         `json:"trees_url"`
	URL              string                         `json:"url"`
	UpdatedAt        time.Time                      `json:"updated_at"`
	Watchers         int                            `json:"watchers"`
	WatchersCount    int                            `json:"watchers_count"`
}

type PullRequestBaseRepoOwner struct {
	AvatarURL         string `json:"avatar_url"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type PullRequestBaseRepoPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type PullRequestBaseUser struct {
	AvatarURL         string `json:"avatar_url"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type PullRequestHead struct {
	Label string              `json:"label"`
	Ref   string              `json:"ref"`
	Repo  PullRequestHeadRepo `json:"repo"`
	Sha   string              `json:"sha"`
	User  PullRequestHeadUser `json:"user"`
}

type PullRequestHeadRepo struct {
	AllowForking     bool                           `json:"allow_forking"`
	AllowMergeCommit bool                           `json:"allow_merge_commit"`
	AllowRebaseMerge bool                           `json:"allow_rebase_merge"`
	AllowSquashMerge bool                           `json:"allow_squash_merge"`
	ArchiveURL       string                         `json:"archive_url"`
	Archived         bool                           `json:"archived"`
	AssigneesURL     string                         `json:"assignees_url"`
	BlobsURL         string                         `json:"blobs_url"`
	BranchesURL      string                         `json:"branches_url"`
	CloneURL         string                         `json:"clone_url"`
	CollaboratorsURL string                         `json:"collaborators_url"`
	CommentsURL      string                         `json:"comments_url"`
	CommitsURL       string                         `json:"commits_url"`
	CompareURL       string                         `json:"compare_url"`
	ContentsURL      string                         `json:"contents_url"`
	ContributorsURL  string                         `json:"contributors_url"`
	CreatedAt        time.Time                      `json:"created_at"`
	DefaultBranch    string                         `json:"default_branch"`
	DeploymentsURL   string                         `json:"deployments_url"`
	Description      string                         `json:"description"`
	Disabled         bool                           `json:"disabled"`
	DownloadsURL     string                         `json:"downloads_url"`
	EventsURL        string                         `json:"events_url"`
	Fork             bool                           `json:"fork"`
	Forks            int                            `json:"forks"`
	ForksCount       int                            `json:"forks_count"`
	ForksURL         string                         `json:"forks_url"`
	FullName         string                         `json:"full_name"`
	GitCommitsURL    string                         `json:"git_commits_url"`
	GitRefsURL       string                         `json:"git_refs_url"`
	GitTagsURL       string                         `json:"git_tags_url"`
	GitURL           string                         `json:"git_url"`
	HTMLURL          string                         `json:"html_url"`
	HasDownloads     bool                           `json:"has_downloads"`
	HasIssues        bool                           `json:"has_issues"`
	HasPages         bool                           `json:"has_pages"`
	HasProjects      bool                           `json:"has_projects"`
	HasWiki          bool                           `json:"has_wiki"`
	Homepage         string                         `json:"homepage"`
	HooksURL         string                         `json:"hooks_url"`
	ID               int                            `json:"id"`
	IssueCommentURL  string                         `json:"issue_comment_url"`
	IssueEventsURL   string                         `json:"issue_events_url"`
	IssuesURL        string                         `json:"issues_url"`
	KeysURL          string                         `json:"keys_url"`
	LabelsURL        string                         `json:"labels_url"`
	Language         string                         `json:"language"`
	LanguagesURL     string                         `json:"languages_url"`
	License          PullRequestHeadRepoLicense     `json:"license"`
	MasterBranch     string                         `json:"master_branch"`
	MergesURL        string                         `json:"merges_url"`
	MilestonesURL    string                         `json:"milestones_url"`
	MirrorURL        string                         `json:"mirror_url"`
	Name             string                         `json:"name"`
	NodeID           string                         `json:"node_id"`
	NotificationsURL string                         `json:"notifications_url"`
	OpenIssues       int                            `json:"open_issues"`
	OpenIssuesCount  int                            `json:"open_issues_count"`
	Owner            PullRequestHeadRepoOwner       `json:"owner"`
	Permissions      PullRequestHeadRepoPermissions `json:"permissions"`
	Private          bool                           `json:"private"`
	PullsURL         string                         `json:"pulls_url"`
	PushedAt         time.Time                      `json:"pushed_at"`
	ReleasesURL      string                         `json:"releases_url"`
	SSHURL           string                         `json:"ssh_url"`
	Size             int                            `json:"size"`
	StargazersCount  int                            `json:"stargazers_count"`
	StargazersURL    string                         `json:"stargazers_url"`
	StatusesURL      string                         `json:"statuses_url"`
	SubscribersURL   string                         `json:"subscribers_url"`
	SubscriptionURL  string                         `json:"subscription_url"`
	SvnURL           string                         `json:"svn_url"`
	TagsURL          string                         `json:"tags_url"`
	TeamsURL         string                         `json:"teams_url"`
	TempCloneToken   string                         `json:"temp_clone_token"`
	Topics           []string                       `json:"topics"`
	TreesURL         string                         `json:"trees_url"`
	URL              string                         `json:"url"`
	UpdatedAt        time.Time                      `json:"updated_at"`
	Watchers         int                            `json:"watchers"`
	WatchersCount    int                            `json:"watchers_count"`
}

type PullRequestHeadRepoLicense struct {
	Key    string `json:"key"`
	Name   string `json:"name"`
	NodeID string `json:"node_id"`
	SpdxID string `json:"spdx_id"`
	URL    string `json:"url"`
}

type PullRequestHeadRepoOwner struct {
	AvatarURL         string `json:"avatar_url"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type PullRequestHeadRepoPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type PullRequestHeadUser struct {
	AvatarURL         string `json:"avatar_url"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type PullRequestLabelsItem struct {
	Color       string `json:"color"`
	Default     bool   `json:"default"`
	Description string `json:"description"`
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	NodeID      string `json:"node_id"`
	URL         string `json:"url"`
}

type PullRequestLinks struct {
	Comments       Link `json:"comments"`
	Commits        Link `json:"commits"`
	HTML           Link `json:"html"`
	Issue          Link `json:"issue"`
	ReviewComment  Link `json:"review_comment"`
	ReviewComments Link `json:"review_comments"`
	Self           Link `json:"self"`
	Statuses       Link `json:"statuses"`
}

type PullRequestMergeResult struct {
	Merged  bool   `json:"merged"`
	Message string `json:"message"`
	Sha     string `json:"sha"`
}

func (*PullRequestMergeResult) pullsMergeResponse() {}

type PullRequestMinimal struct {
	Base   PullRequestMinimalBase `json:"base"`
	Head   PullRequestMinimalHead `json:"head"`
	ID     int                    `json:"id"`
	Number int                    `json:"number"`
	URL    string                 `json:"url"`
}

type PullRequestMinimalBase struct {
	Ref  string                     `json:"ref"`
	Repo PullRequestMinimalBaseRepo `json:"repo"`
	Sha  string                     `json:"sha"`
}

type PullRequestMinimalBaseRepo struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	URL  string `json:"url"`
}

type PullRequestMinimalHead struct {
	Ref  string                     `json:"ref"`
	Repo PullRequestMinimalHeadRepo `json:"repo"`
	Sha  string                     `json:"sha"`
}

type PullRequestMinimalHeadRepo struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	URL  string `json:"url"`
}

type PullRequestReview struct {
	AuthorAssociation string                 `json:"author_association"`
	Body              string                 `json:"body"`
	BodyHTML          string                 `json:"body_html"`
	BodyText          string                 `json:"body_text"`
	CommitID          string                 `json:"commit_id"`
	HTMLURL           string                 `json:"html_url"`
	ID                int                    `json:"id"`
	Links             PullRequestReviewLinks `json:"_links"`
	NodeID            string                 `json:"node_id"`
	PullRequestURL    string                 `json:"pull_request_url"`
	State             string                 `json:"state"`
	SubmittedAt       time.Time              `json:"submitted_at"`
	User              NullableSimpleUser     `json:"user"`
}

func (*PullRequestReview) pullsCreateReviewResponse()        {}
func (*PullRequestReview) pullsDeletePendingReviewResponse() {}
func (*PullRequestReview) pullsDismissReviewResponse()       {}
func (*PullRequestReview) pullsGetReviewResponse()           {}
func (*PullRequestReview) pullsSubmitReviewResponse()        {}
func (*PullRequestReview) pullsUpdateReviewResponse()        {}

type PullRequestReviewComment struct {
	AuthorAssociation   string                        `json:"author_association"`
	Body                string                        `json:"body"`
	BodyHTML            string                        `json:"body_html"`
	BodyText            string                        `json:"body_text"`
	CommitID            string                        `json:"commit_id"`
	CreatedAt           time.Time                     `json:"created_at"`
	DiffHunk            string                        `json:"diff_hunk"`
	HTMLURL             string                        `json:"html_url"`
	ID                  int                           `json:"id"`
	InReplyToID         int                           `json:"in_reply_to_id"`
	Line                int                           `json:"line"`
	Links               PullRequestReviewCommentLinks `json:"_links"`
	NodeID              string                        `json:"node_id"`
	OriginalCommitID    string                        `json:"original_commit_id"`
	OriginalLine        int                           `json:"original_line"`
	OriginalPosition    int                           `json:"original_position"`
	OriginalStartLine   int                           `json:"original_start_line"`
	Path                string                        `json:"path"`
	Position            int                           `json:"position"`
	PullRequestReviewID int                           `json:"pull_request_review_id"`
	PullRequestURL      string                        `json:"pull_request_url"`
	Reactions           ReactionRollup                `json:"reactions"`
	Side                string                        `json:"side"`
	StartLine           int                           `json:"start_line"`
	StartSide           string                        `json:"start_side"`
	URL                 string                        `json:"url"`
	UpdatedAt           time.Time                     `json:"updated_at"`
	User                SimpleUser                    `json:"user"`
}

func (*PullRequestReviewComment) pullsCreateReplyForReviewCommentResponse() {}
func (*PullRequestReviewComment) pullsCreateReviewCommentResponse()         {}
func (*PullRequestReviewComment) pullsGetReviewCommentResponse()            {}

type PullRequestReviewCommentLinks struct {
	HTML        PullRequestReviewCommentLinksHTML        `json:"html"`
	PullRequest PullRequestReviewCommentLinksPullRequest `json:"pull_request"`
	Self        PullRequestReviewCommentLinksSelf        `json:"self"`
}

type PullRequestReviewCommentLinksHTML struct {
	Href string `json:"href"`
}

type PullRequestReviewCommentLinksPullRequest struct {
	Href string `json:"href"`
}

type PullRequestReviewCommentLinksSelf struct {
	Href string `json:"href"`
}

type PullRequestReviewLinks struct {
	HTML        PullRequestReviewLinksHTML        `json:"html"`
	PullRequest PullRequestReviewLinksPullRequest `json:"pull_request"`
}

type PullRequestReviewLinksHTML struct {
	Href string `json:"href"`
}

type PullRequestReviewLinksPullRequest struct {
	Href string `json:"href"`
}

type PullRequestReviewRequest struct {
	Teams []Team       `json:"teams"`
	Users []SimpleUser `json:"users"`
}

type PullRequestSimple struct {
	ActiveLockReason   string                        `json:"active_lock_reason"`
	Assignee           NullableSimpleUser            `json:"assignee"`
	Assignees          []SimpleUser                  `json:"assignees"`
	AuthorAssociation  string                        `json:"author_association"`
	AutoMerge          AutoMerge                     `json:"auto_merge"`
	Base               PullRequestSimpleBase         `json:"base"`
	Body               string                        `json:"body"`
	ClosedAt           time.Time                     `json:"closed_at"`
	CommentsURL        string                        `json:"comments_url"`
	CommitsURL         string                        `json:"commits_url"`
	CreatedAt          time.Time                     `json:"created_at"`
	DiffURL            string                        `json:"diff_url"`
	Draft              bool                          `json:"draft"`
	HTMLURL            string                        `json:"html_url"`
	Head               PullRequestSimpleHead         `json:"head"`
	ID                 int                           `json:"id"`
	IssueURL           string                        `json:"issue_url"`
	Labels             []PullRequestSimpleLabelsItem `json:"labels"`
	Links              PullRequestSimpleLinks        `json:"_links"`
	Locked             bool                          `json:"locked"`
	MergeCommitSha     string                        `json:"merge_commit_sha"`
	MergedAt           time.Time                     `json:"merged_at"`
	Milestone          NullableMilestone             `json:"milestone"`
	NodeID             string                        `json:"node_id"`
	Number             int                           `json:"number"`
	PatchURL           string                        `json:"patch_url"`
	RequestedReviewers []SimpleUser                  `json:"requested_reviewers"`
	RequestedTeams     []Team                        `json:"requested_teams"`
	ReviewCommentURL   string                        `json:"review_comment_url"`
	ReviewCommentsURL  string                        `json:"review_comments_url"`
	State              string                        `json:"state"`
	StatusesURL        string                        `json:"statuses_url"`
	Title              string                        `json:"title"`
	URL                string                        `json:"url"`
	UpdatedAt          time.Time                     `json:"updated_at"`
	User               NullableSimpleUser            `json:"user"`
}

func (*PullRequestSimple) pullsRemoveRequestedReviewersResponse() {}
func (*PullRequestSimple) pullsRequestReviewersResponse()         {}

type PullRequestSimpleBase struct {
	Label string             `json:"label"`
	Ref   string             `json:"ref"`
	Repo  Repository         `json:"repo"`
	Sha   string             `json:"sha"`
	User  NullableSimpleUser `json:"user"`
}

type PullRequestSimpleHead struct {
	Label string             `json:"label"`
	Ref   string             `json:"ref"`
	Repo  Repository         `json:"repo"`
	Sha   string             `json:"sha"`
	User  NullableSimpleUser `json:"user"`
}

type PullRequestSimpleLabelsItem struct {
	Color       string `json:"color"`
	Default     bool   `json:"default"`
	Description string `json:"description"`
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	NodeID      string `json:"node_id"`
	URL         string `json:"url"`
}

type PullRequestSimpleLinks struct {
	Comments       Link `json:"comments"`
	Commits        Link `json:"commits"`
	HTML           Link `json:"html"`
	Issue          Link `json:"issue"`
	ReviewComment  Link `json:"review_comment"`
	ReviewComments Link `json:"review_comments"`
	Self           Link `json:"self"`
	Statuses       Link `json:"statuses"`
}

type PullsCheckIfMergedNoContent struct{}

func (*PullsCheckIfMergedNoContent) pullsCheckIfMergedResponse() {}

type PullsCheckIfMergedNotFound struct{}

func (*PullsCheckIfMergedNotFound) pullsCheckIfMergedResponse() {}

type PullsCreateApplicationJSONRequest struct {
	Base                string `json:"base"`
	Body                string `json:"body"`
	Draft               bool   `json:"draft"`
	Head                string `json:"head"`
	Issue               int    `json:"issue"`
	MaintainerCanModify bool   `json:"maintainer_can_modify"`
	Title               string `json:"title"`
}

type PullsCreateReplyForReviewCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type PullsCreateReviewApplicationJSONRequest struct {
	Body     string                                                `json:"body"`
	Comments []PullsCreateReviewApplicationJSONRequestCommentsItem `json:"comments"`
	CommitID string                                                `json:"commit_id"`
	Event    string                                                `json:"event"`
}

type PullsCreateReviewApplicationJSONRequestCommentsItem struct {
	Body      string `json:"body"`
	Line      int    `json:"line"`
	Path      string `json:"path"`
	Position  int    `json:"position"`
	Side      string `json:"side"`
	StartLine int    `json:"start_line"`
	StartSide string `json:"start_side"`
}

type PullsCreateReviewCommentApplicationJSONRequest struct {
	Body      string `json:"body"`
	CommitID  string `json:"commit_id"`
	InReplyTo int    `json:"in_reply_to"`
	Line      int    `json:"line"`
	Path      string `json:"path"`
	Position  int    `json:"position"`
	Side      string `json:"side"`
	StartLine int    `json:"start_line"`
	StartSide string `json:"start_side"`
}

type PullsDeleteReviewCommentNoContent struct{}

func (*PullsDeleteReviewCommentNoContent) pullsDeleteReviewCommentResponse() {}

type PullsDismissReviewApplicationJSONRequest struct {
	Event   string `json:"event"`
	Message string `json:"message"`
}

type PullsListCommentsForReviewOK []ReviewComment

func (*PullsListCommentsForReviewOK) pullsListCommentsForReviewResponse() {}

type PullsListFilesOK []DiffEntry

func (*PullsListFilesOK) pullsListFilesResponse() {}

type PullsListOK []PullRequestSimple

func (*PullsListOK) pullsListResponse() {}

type PullsMergeApplicationJSONRequest struct {
	CommitMessage string `json:"commit_message"`
	CommitTitle   string `json:"commit_title"`
	MergeMethod   string `json:"merge_method"`
	Sha           string `json:"sha"`
}

type PullsMergeConflict struct {
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
}

func (*PullsMergeConflict) pullsMergeResponse() {}

type PullsMergeMethodNotAllowed struct {
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
}

func (*PullsMergeMethodNotAllowed) pullsMergeResponse() {}

type PullsRemoveRequestedReviewersApplicationJSONRequest struct {
	Reviewers     []string `json:"reviewers"`
	TeamReviewers []string `json:"team_reviewers"`
}

type PullsRequestReviewersApplicationJSONRequest struct {
	Reviewers     []string `json:"reviewers"`
	TeamReviewers []string `json:"team_reviewers"`
}

type PullsRequestReviewersUnprocessableEntity struct{}

func (*PullsRequestReviewersUnprocessableEntity) pullsRequestReviewersResponse() {}

type PullsSubmitReviewApplicationJSONRequest struct {
	Body  string `json:"body"`
	Event string `json:"event"`
}

type PullsUpdateApplicationJSONRequest struct {
	Base                string `json:"base"`
	Body                string `json:"body"`
	MaintainerCanModify bool   `json:"maintainer_can_modify"`
	State               string `json:"state"`
	Title               string `json:"title"`
}

type PullsUpdateBranchAccepted struct {
	Message string `json:"message"`
	URL     string `json:"url"`
}

func (*PullsUpdateBranchAccepted) pullsUpdateBranchResponse() {}

type PullsUpdateBranchApplicationJSONRequest struct {
	ExpectedHeadSha string `json:"expected_head_sha"`
}

type PullsUpdateReviewApplicationJSONRequest struct {
	Body string `json:"body"`
}

type PullsUpdateReviewCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type RateLimit struct {
	Limit     int `json:"limit"`
	Remaining int `json:"remaining"`
	Reset     int `json:"reset"`
	Used      int `json:"used"`
}

type RateLimitOverview struct {
	Rate      RateLimit                  `json:"rate"`
	Resources RateLimitOverviewResources `json:"resources"`
}

func (*RateLimitOverview) rateLimitGetResponse() {}

type RateLimitOverviewResources struct {
	ActionsRunnerRegistration RateLimit `json:"actions_runner_registration"`
	CodeScanningUpload        RateLimit `json:"code_scanning_upload"`
	Core                      RateLimit `json:"core"`
	Graphql                   RateLimit `json:"graphql"`
	IntegrationManifest       RateLimit `json:"integration_manifest"`
	Search                    RateLimit `json:"search"`
	SourceImport              RateLimit `json:"source_import"`
}

type Reaction struct {
	Content   string             `json:"content"`
	CreatedAt time.Time          `json:"created_at"`
	ID        int                `json:"id"`
	NodeID    string             `json:"node_id"`
	User      NullableSimpleUser `json:"user"`
}

func (*Reaction) reactionsCreateForCommitCommentResponse()              {}
func (*Reaction) reactionsCreateForIssueCommentResponse()               {}
func (*Reaction) reactionsCreateForIssueResponse()                      {}
func (*Reaction) reactionsCreateForPullRequestReviewCommentResponse()   {}
func (*Reaction) reactionsCreateForReleaseResponse()                    {}
func (*Reaction) reactionsCreateForTeamDiscussionCommentInOrgResponse() {}
func (*Reaction) reactionsCreateForTeamDiscussionInOrgResponse()        {}

type ReactionRollup struct {
	Confused   int    `json:"confused"`
	Eyes       int    `json:"eyes"`
	Heart      int    `json:"heart"`
	Hooray     int    `json:"hooray"`
	Laugh      int    `json:"laugh"`
	Minus1     int    `json:"-1"`
	Plus1      int    `json:"+1"`
	Rocket     int    `json:"rocket"`
	TotalCount int    `json:"total_count"`
	URL        string `json:"url"`
}

type ReactionsCreateForCommitCommentApplicationJSONRequest struct {
	Content string `json:"content"`
}

type ReactionsCreateForIssueApplicationJSONRequest struct {
	Content string `json:"content"`
}

type ReactionsCreateForIssueCommentApplicationJSONRequest struct {
	Content string `json:"content"`
}

type ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest struct {
	Content string `json:"content"`
}

type ReactionsCreateForReleaseApplicationJSONRequest struct {
	Content string `json:"content"`
}

type ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest struct {
	Content string `json:"content"`
}

type ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest struct {
	Content string `json:"content"`
}

type ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest struct {
	Content string `json:"content"`
}

type ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest struct {
	Content string `json:"content"`
}

type ReactionsDeleteForCommitComment struct{}

type ReactionsDeleteForIssue struct{}

type ReactionsDeleteForIssueComment struct{}

type ReactionsDeleteForPullRequestComment struct{}

type ReactionsDeleteForTeamDiscussion struct{}

type ReactionsDeleteForTeamDiscussionComment struct{}

type ReactionsDeleteLegacyNoContent struct{}

func (*ReactionsDeleteLegacyNoContent) reactionsDeleteLegacyResponse() {}

type ReactionsListForCommitCommentOK []Reaction

func (*ReactionsListForCommitCommentOK) reactionsListForCommitCommentResponse() {}

type ReactionsListForIssueCommentOK []Reaction

func (*ReactionsListForIssueCommentOK) reactionsListForIssueCommentResponse() {}

type ReactionsListForIssueOK []Reaction

func (*ReactionsListForIssueOK) reactionsListForIssueResponse() {}

type ReactionsListForPullRequestReviewCommentOK []Reaction

func (*ReactionsListForPullRequestReviewCommentOK) reactionsListForPullRequestReviewCommentResponse() {
}

type ReferrerTraffic struct {
	Count    int    `json:"count"`
	Referrer string `json:"referrer"`
	Uniques  int    `json:"uniques"`
}

type Release struct {
	Assets          []ReleaseAsset `json:"assets"`
	AssetsURL       string         `json:"assets_url"`
	Author          SimpleUser     `json:"author"`
	Body            string         `json:"body"`
	BodyHTML        string         `json:"body_html"`
	BodyText        string         `json:"body_text"`
	CreatedAt       time.Time      `json:"created_at"`
	DiscussionURL   string         `json:"discussion_url"`
	Draft           bool           `json:"draft"`
	HTMLURL         string         `json:"html_url"`
	ID              int            `json:"id"`
	MentionsCount   int            `json:"mentions_count"`
	Name            string         `json:"name"`
	NodeID          string         `json:"node_id"`
	Prerelease      bool           `json:"prerelease"`
	PublishedAt     time.Time      `json:"published_at"`
	Reactions       ReactionRollup `json:"reactions"`
	TagName         string         `json:"tag_name"`
	TarballURL      string         `json:"tarball_url"`
	TargetCommitish string         `json:"target_commitish"`
	URL             string         `json:"url"`
	UploadURL       string         `json:"upload_url"`
	ZipballURL      string         `json:"zipball_url"`
}

func (*Release) reposCreateReleaseResponse()   {}
func (*Release) reposGetReleaseByTagResponse() {}
func (*Release) reposGetReleaseResponse()      {}
func (*Release) reposUpdateReleaseResponse()   {}

type ReleaseAsset struct {
	BrowserDownloadURL string             `json:"browser_download_url"`
	ContentType        string             `json:"content_type"`
	CreatedAt          time.Time          `json:"created_at"`
	DownloadCount      int                `json:"download_count"`
	ID                 int                `json:"id"`
	Label              string             `json:"label"`
	Name               string             `json:"name"`
	NodeID             string             `json:"node_id"`
	Size               int                `json:"size"`
	State              string             `json:"state"`
	URL                string             `json:"url"`
	UpdatedAt          time.Time          `json:"updated_at"`
	Uploader           NullableSimpleUser `json:"uploader"`
}

func (*ReleaseAsset) reposGetReleaseAssetResponse() {}

type RepoSearchResultItem struct {
	AllowAutoMerge      bool                            `json:"allow_auto_merge"`
	AllowForking        bool                            `json:"allow_forking"`
	AllowMergeCommit    bool                            `json:"allow_merge_commit"`
	AllowRebaseMerge    bool                            `json:"allow_rebase_merge"`
	AllowSquashMerge    bool                            `json:"allow_squash_merge"`
	ArchiveURL          string                          `json:"archive_url"`
	Archived            bool                            `json:"archived"`
	AssigneesURL        string                          `json:"assignees_url"`
	BlobsURL            string                          `json:"blobs_url"`
	BranchesURL         string                          `json:"branches_url"`
	CloneURL            string                          `json:"clone_url"`
	CollaboratorsURL    string                          `json:"collaborators_url"`
	CommentsURL         string                          `json:"comments_url"`
	CommitsURL          string                          `json:"commits_url"`
	CompareURL          string                          `json:"compare_url"`
	ContentsURL         string                          `json:"contents_url"`
	ContributorsURL     string                          `json:"contributors_url"`
	CreatedAt           time.Time                       `json:"created_at"`
	DefaultBranch       string                          `json:"default_branch"`
	DeleteBranchOnMerge bool                            `json:"delete_branch_on_merge"`
	DeploymentsURL      string                          `json:"deployments_url"`
	Description         string                          `json:"description"`
	Disabled            bool                            `json:"disabled"`
	DownloadsURL        string                          `json:"downloads_url"`
	EventsURL           string                          `json:"events_url"`
	Fork                bool                            `json:"fork"`
	Forks               int                             `json:"forks"`
	ForksCount          int                             `json:"forks_count"`
	ForksURL            string                          `json:"forks_url"`
	FullName            string                          `json:"full_name"`
	GitCommitsURL       string                          `json:"git_commits_url"`
	GitRefsURL          string                          `json:"git_refs_url"`
	GitTagsURL          string                          `json:"git_tags_url"`
	GitURL              string                          `json:"git_url"`
	HTMLURL             string                          `json:"html_url"`
	HasDownloads        bool                            `json:"has_downloads"`
	HasIssues           bool                            `json:"has_issues"`
	HasPages            bool                            `json:"has_pages"`
	HasProjects         bool                            `json:"has_projects"`
	HasWiki             bool                            `json:"has_wiki"`
	Homepage            string                          `json:"homepage"`
	HooksURL            string                          `json:"hooks_url"`
	ID                  int                             `json:"id"`
	IssueCommentURL     string                          `json:"issue_comment_url"`
	IssueEventsURL      string                          `json:"issue_events_url"`
	IssuesURL           string                          `json:"issues_url"`
	KeysURL             string                          `json:"keys_url"`
	LabelsURL           string                          `json:"labels_url"`
	Language            string                          `json:"language"`
	LanguagesURL        string                          `json:"languages_url"`
	License             NullableLicenseSimple           `json:"license"`
	MasterBranch        string                          `json:"master_branch"`
	MergesURL           string                          `json:"merges_url"`
	MilestonesURL       string                          `json:"milestones_url"`
	MirrorURL           string                          `json:"mirror_url"`
	Name                string                          `json:"name"`
	NodeID              string                          `json:"node_id"`
	NotificationsURL    string                          `json:"notifications_url"`
	OpenIssues          int                             `json:"open_issues"`
	OpenIssuesCount     int                             `json:"open_issues_count"`
	Owner               NullableSimpleUser              `json:"owner"`
	Permissions         RepoSearchResultItemPermissions `json:"permissions"`
	Private             bool                            `json:"private"`
	PullsURL            string                          `json:"pulls_url"`
	PushedAt            time.Time                       `json:"pushed_at"`
	ReleasesURL         string                          `json:"releases_url"`
	SSHURL              string                          `json:"ssh_url"`
	Score               float                           `json:"score"`
	Size                int                             `json:"size"`
	StargazersCount     int                             `json:"stargazers_count"`
	StargazersURL       string                          `json:"stargazers_url"`
	StatusesURL         string                          `json:"statuses_url"`
	SubscribersURL      string                          `json:"subscribers_url"`
	SubscriptionURL     string                          `json:"subscription_url"`
	SvnURL              string                          `json:"svn_url"`
	TagsURL             string                          `json:"tags_url"`
	TeamsURL            string                          `json:"teams_url"`
	TempCloneToken      string                          `json:"temp_clone_token"`
	TextMatches         []SearchResultTextMatchesItem   `json:"text_matches"`
	Topics              []string                        `json:"topics"`
	TreesURL            string                          `json:"trees_url"`
	URL                 string                          `json:"url"`
	UpdatedAt           time.Time                       `json:"updated_at"`
	Watchers            int                             `json:"watchers"`
	WatchersCount       int                             `json:"watchers_count"`
}

type RepoSearchResultItemPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type ReposAcceptInvitationNoContent struct{}

func (*ReposAcceptInvitationNoContent) reposAcceptInvitationResponse() {}

type ReposAddAppAccessRestrictionsOK []Integration

func (*ReposAddAppAccessRestrictionsOK) reposAddAppAccessRestrictionsResponse() {}

type ReposAddCollaboratorApplicationJSONRequest struct {
	Permission  string `json:"permission"`
	Permissions string `json:"permissions"`
}

type ReposAddCollaboratorNoContent struct{}

func (*ReposAddCollaboratorNoContent) reposAddCollaboratorResponse() {}

type ReposAddStatusCheckContextsOK []string

func (*ReposAddStatusCheckContextsOK) reposAddStatusCheckContextsResponse() {}

type ReposAddTeamAccessRestrictionsOK []Team

func (*ReposAddTeamAccessRestrictionsOK) reposAddTeamAccessRestrictionsResponse() {}

type ReposAddUserAccessRestrictionsOK []SimpleUser

func (*ReposAddUserAccessRestrictionsOK) reposAddUserAccessRestrictionsResponse() {}

type ReposCheckCollaboratorNoContent struct{}

func (*ReposCheckCollaboratorNoContent) reposCheckCollaboratorResponse() {}

type ReposCheckCollaboratorNotFound struct{}

func (*ReposCheckCollaboratorNotFound) reposCheckCollaboratorResponse() {}

type ReposCheckVulnerabilityAlertsNoContent struct{}

func (*ReposCheckVulnerabilityAlertsNoContent) reposCheckVulnerabilityAlertsResponse() {}

type ReposCheckVulnerabilityAlertsNotFound struct{}

func (*ReposCheckVulnerabilityAlertsNotFound) reposCheckVulnerabilityAlertsResponse() {}

type ReposCreateAutolinkApplicationJSONRequest struct {
	KeyPrefix   string `json:"key_prefix"`
	URLTemplate string `json:"url_template"`
}

type ReposCreateCommitCommentApplicationJSONRequest struct {
	Body     string `json:"body"`
	Line     int    `json:"line"`
	Path     string `json:"path"`
	Position int    `json:"position"`
}

type ReposCreateCommitStatusApplicationJSONRequest struct {
	Context     string `json:"context"`
	Description string `json:"description"`
	State       string `json:"state"`
	TargetURL   string `json:"target_url"`
}

type ReposCreateDeployKeyApplicationJSONRequest struct {
	Key      string `json:"key"`
	ReadOnly bool   `json:"read_only"`
	Title    string `json:"title"`
}

type ReposCreateDeploymentAccepted struct {
	Message string `json:"message"`
}

func (*ReposCreateDeploymentAccepted) reposCreateDeploymentResponse() {}

type ReposCreateDeploymentApplicationJSONRequest struct {
	AutoMerge            bool     `json:"auto_merge"`
	RequiredContexts     []string `json:"required_contexts"`
	Description          string   `json:"description"`
	TransientEnvironment bool     `json:"transient_environment"`
	Ref                  string   `json:"ref"`
	Task                 string   `json:"task"`
}

type ReposCreateDeploymentConflict struct{}

func (*ReposCreateDeploymentConflict) reposCreateDeploymentResponse() {}

type ReposCreateDeploymentStatusApplicationJSONRequest struct {
	AutoInactive   bool   `json:"auto_inactive"`
	Description    string `json:"description"`
	Environment    string `json:"environment"`
	EnvironmentURL string `json:"environment_url"`
	LogURL         string `json:"log_url"`
	State          string `json:"state"`
	TargetURL      string `json:"target_url"`
}

type ReposCreateDispatchEventApplicationJSONRequest struct {
	ClientPayload struct{} `json:"client_payload"`
	EventType     string   `json:"event_type"`
}

type ReposCreateDispatchEventNoContent struct{}

func (*ReposCreateDispatchEventNoContent) reposCreateDispatchEventResponse() {}

type ReposCreateForAuthenticatedUserApplicationJSONRequest struct {
	AllowAutoMerge      bool   `json:"allow_auto_merge"`
	AllowMergeCommit    bool   `json:"allow_merge_commit"`
	AllowRebaseMerge    bool   `json:"allow_rebase_merge"`
	AllowSquashMerge    bool   `json:"allow_squash_merge"`
	AutoInit            bool   `json:"auto_init"`
	DeleteBranchOnMerge bool   `json:"delete_branch_on_merge"`
	Description         string `json:"description"`
	GitignoreTemplate   string `json:"gitignore_template"`
	HasDownloads        bool   `json:"has_downloads"`
	HasIssues           bool   `json:"has_issues"`
	HasProjects         bool   `json:"has_projects"`
	HasWiki             bool   `json:"has_wiki"`
	Homepage            string `json:"homepage"`
	IsTemplate          bool   `json:"is_template"`
	LicenseTemplate     string `json:"license_template"`
	Name                string `json:"name"`
	Private             bool   `json:"private"`
	TeamID              int    `json:"team_id"`
}

type ReposCreateForkApplicationJSONRequest struct {
	Organization string `json:"organization"`
}

type ReposCreateInOrgApplicationJSONRequest struct {
	AllowAutoMerge      bool   `json:"allow_auto_merge"`
	AllowMergeCommit    bool   `json:"allow_merge_commit"`
	AllowRebaseMerge    bool   `json:"allow_rebase_merge"`
	AllowSquashMerge    bool   `json:"allow_squash_merge"`
	AutoInit            bool   `json:"auto_init"`
	DeleteBranchOnMerge bool   `json:"delete_branch_on_merge"`
	Description         string `json:"description"`
	GitignoreTemplate   string `json:"gitignore_template"`
	HasIssues           bool   `json:"has_issues"`
	HasProjects         bool   `json:"has_projects"`
	HasWiki             bool   `json:"has_wiki"`
	Homepage            string `json:"homepage"`
	IsTemplate          bool   `json:"is_template"`
	LicenseTemplate     string `json:"license_template"`
	Name                string `json:"name"`
	Private             bool   `json:"private"`
	TeamID              int    `json:"team_id"`
	Visibility          string `json:"visibility"`
}

type ReposCreateOrUpdateEnvironmentApplicationJSONRequest struct {
	DeploymentBranchPolicy DeploymentBranchPolicy                                              `json:"deployment_branch_policy"`
	Reviewers              []ReposCreateOrUpdateEnvironmentApplicationJSONRequestReviewersItem `json:"reviewers"`
	WaitTimer              int                                                                 `json:"wait_timer"`
}

type ReposCreateOrUpdateEnvironmentApplicationJSONRequestReviewersItem struct {
	ID   int    `json:"id"`
	Type string `json:"type"`
}

type ReposCreateOrUpdateFileContentsApplicationJSONRequest struct {
	Author    ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor    `json:"author"`
	Branch    string                                                         `json:"branch"`
	Committer ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter `json:"committer"`
	Content   string                                                         `json:"content"`
	Message   string                                                         `json:"message"`
	Sha       string                                                         `json:"sha"`
}

type ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor struct {
	Date  string `json:"date"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

type ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter struct {
	Date  string `json:"date"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

type ReposCreatePagesSiteApplicationJSONRequest struct {
	Source ReposCreatePagesSiteApplicationJSONRequestSource `json:"source"`
}

type ReposCreatePagesSiteApplicationJSONRequestSource struct {
	Branch string `json:"branch"`
	Path   string `json:"path"`
}

type ReposCreateReleaseApplicationJSONRequest struct {
	Body                   string `json:"body"`
	DiscussionCategoryName string `json:"discussion_category_name"`
	Draft                  bool   `json:"draft"`
	Name                   string `json:"name"`
	Prerelease             bool   `json:"prerelease"`
	TagName                string `json:"tag_name"`
	TargetCommitish        string `json:"target_commitish"`
}

type ReposCreateUsingTemplateApplicationJSONRequest struct {
	Description        string `json:"description"`
	IncludeAllBranches bool   `json:"include_all_branches"`
	Name               string `json:"name"`
	Owner              string `json:"owner"`
	Private            bool   `json:"private"`
}

type ReposCreateWebhookApplicationJSONRequest struct {
	Name string `json:"name"`
}

type ReposCreateWebhookApplicationJSONRequestConfig struct {
	URL         string `json:"url"`
	ContentType string `json:"content_type"`
	Secret      string `json:"secret"`
}

type ReposDeclineInvitationNoContent struct{}

func (*ReposDeclineInvitationNoContent) reposDeclineInvitationResponse() {}

type ReposDeleteAccessRestrictions struct{}

type ReposDeleteAdminBranchProtectionNoContent struct{}

func (*ReposDeleteAdminBranchProtectionNoContent) reposDeleteAdminBranchProtectionResponse() {}

type ReposDeleteAnEnvironment struct{}

type ReposDeleteAutolinkNoContent struct{}

func (*ReposDeleteAutolinkNoContent) reposDeleteAutolinkResponse() {}

type ReposDeleteBranchProtectionNoContent struct{}

func (*ReposDeleteBranchProtectionNoContent) reposDeleteBranchProtectionResponse() {}

type ReposDeleteCommitCommentNoContent struct{}

func (*ReposDeleteCommitCommentNoContent) reposDeleteCommitCommentResponse() {}

type ReposDeleteCommitSignatureProtectionNoContent struct{}

func (*ReposDeleteCommitSignatureProtectionNoContent) reposDeleteCommitSignatureProtectionResponse() {
}

type ReposDeleteDeployKey struct{}

type ReposDeleteDeploymentNoContent struct{}

func (*ReposDeleteDeploymentNoContent) reposDeleteDeploymentResponse() {}

type ReposDeleteFileApplicationJSONRequest struct {
	Author    ReposDeleteFileApplicationJSONRequestAuthor    `json:"author"`
	Branch    string                                         `json:"branch"`
	Committer ReposDeleteFileApplicationJSONRequestCommitter `json:"committer"`
	Message   string                                         `json:"message"`
	Sha       string                                         `json:"sha"`
}

type ReposDeleteFileApplicationJSONRequestAuthor struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type ReposDeleteFileApplicationJSONRequestCommitter struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type ReposDeleteForbidden struct {
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
}

func (*ReposDeleteForbidden) reposDeleteResponse() {}

type ReposDeleteInvitation struct{}

type ReposDeleteNoContent struct{}

func (*ReposDeleteNoContent) reposDeleteResponse() {}

type ReposDeletePagesSiteNoContent struct{}

func (*ReposDeletePagesSiteNoContent) reposDeletePagesSiteResponse() {}

type ReposDeletePullRequestReviewProtectionNoContent struct{}

func (*ReposDeletePullRequestReviewProtectionNoContent) reposDeletePullRequestReviewProtectionResponse() {
}

type ReposDeleteRelease struct{}

type ReposDeleteReleaseAsset struct{}

type ReposDeleteWebhookNoContent struct{}

func (*ReposDeleteWebhookNoContent) reposDeleteWebhookResponse() {}

type ReposDisableAutomatedSecurityFixes struct{}

type ReposDisableLfsForRepo struct{}

type ReposDisableVulnerabilityAlerts struct{}

type ReposDownloadTarballArchive struct{}

type ReposDownloadZipballArchive struct{}

type ReposEnableAutomatedSecurityFixes struct{}

type ReposEnableLfsForRepoForbidden struct{}

func (*ReposEnableLfsForRepoForbidden) reposEnableLfsForRepoResponse() {}

type ReposEnableVulnerabilityAlerts struct{}

type ReposGetAllEnvironments struct {
	TotalCount int `json:"total_count"`
}

type ReposGetAllStatusCheckContextsOK []string

func (*ReposGetAllStatusCheckContextsOK) reposGetAllStatusCheckContextsResponse() {}

type ReposGetAppsWithAccessToProtectedBranchOK []Integration

func (*ReposGetAppsWithAccessToProtectedBranchOK) reposGetAppsWithAccessToProtectedBranchResponse() {}

type ReposGetCodeFrequencyStatsOK [][]int

func (*ReposGetCodeFrequencyStatsOK) reposGetCodeFrequencyStatsResponse() {}

type ReposGetCommitActivityStatsOK []CommitActivity

func (*ReposGetCommitActivityStatsOK) reposGetCommitActivityStatsResponse() {}

type ReposGetContributorsStatsOK []ContributorActivity

func (*ReposGetContributorsStatsOK) reposGetContributorsStatsResponse() {}

type ReposGetPagesHealthCheckAccepted struct{}

func (*ReposGetPagesHealthCheckAccepted) reposGetPagesHealthCheckResponse() {}

type ReposGetPagesHealthCheckBadRequest struct{}

func (*ReposGetPagesHealthCheckBadRequest) reposGetPagesHealthCheckResponse() {}

type ReposGetPagesHealthCheckUnprocessableEntity struct{}

func (*ReposGetPagesHealthCheckUnprocessableEntity) reposGetPagesHealthCheckResponse() {}

type ReposGetPunchCardStatsOK [][]int

func (*ReposGetPunchCardStatsOK) reposGetPunchCardStatsResponse() {}

type ReposGetTeamsWithAccessToProtectedBranchOK []Team

func (*ReposGetTeamsWithAccessToProtectedBranchOK) reposGetTeamsWithAccessToProtectedBranchResponse() {
}

type ReposGetTopPathsOK []ContentTraffic

func (*ReposGetTopPathsOK) reposGetTopPathsResponse() {}

type ReposGetTopReferrersOK []ReferrerTraffic

func (*ReposGetTopReferrersOK) reposGetTopReferrersResponse() {}

type ReposGetUsersWithAccessToProtectedBranchOK []SimpleUser

func (*ReposGetUsersWithAccessToProtectedBranchOK) reposGetUsersWithAccessToProtectedBranchResponse() {
}

type ReposListBranchesForHeadCommitOK []BranchShort

func (*ReposListBranchesForHeadCommitOK) reposListBranchesForHeadCommitResponse() {}

type ReposListBranchesOK []ShortBranch

func (*ReposListBranchesOK) reposListBranchesResponse() {}

type ReposListCollaboratorsOK []Collaborator

func (*ReposListCollaboratorsOK) reposListCollaboratorsResponse() {}

type ReposListCommitStatusesForRefOK []Status

func (*ReposListCommitStatusesForRefOK) reposListCommitStatusesForRefResponse() {}

type ReposListCommitsOK []Commit

func (*ReposListCommitsOK) reposListCommitsResponse() {}

type ReposListContributorsNoContent struct{}

func (*ReposListContributorsNoContent) reposListContributorsResponse() {}

type ReposListContributorsOK []Contributor

func (*ReposListContributorsOK) reposListContributorsResponse() {}

type ReposListDeploymentStatusesOK []DeploymentStatus

func (*ReposListDeploymentStatusesOK) reposListDeploymentStatusesResponse() {}

type ReposListForAuthenticatedUserOK []Repository

func (*ReposListForAuthenticatedUserOK) reposListForAuthenticatedUserResponse() {}

type ReposListForksOK []MinimalRepository

func (*ReposListForksOK) reposListForksResponse() {}

type ReposListInvitationsForAuthenticatedUserOK []RepositoryInvitation

func (*ReposListInvitationsForAuthenticatedUserOK) reposListInvitationsForAuthenticatedUserResponse() {
}

type ReposListLanguages struct{}

type ReposListPublicOK []MinimalRepository

func (*ReposListPublicOK) reposListPublicResponse() {}

type ReposListReleasesOK []Release

func (*ReposListReleasesOK) reposListReleasesResponse() {}

type ReposListWebhookDeliveriesOK []HookDeliveryItem

func (*ReposListWebhookDeliveriesOK) reposListWebhookDeliveriesResponse() {}

type ReposMergeApplicationJSONRequest struct {
	Base          string `json:"base"`
	CommitMessage string `json:"commit_message"`
	Head          string `json:"head"`
}

type ReposMergeConflict struct{}

func (*ReposMergeConflict) reposMergeResponse() {}

type ReposMergeNoContent struct{}

func (*ReposMergeNoContent) reposMergeResponse() {}

type ReposMergeNotFound struct{}

func (*ReposMergeNotFound) reposMergeResponse() {}

type ReposMergeUpstreamApplicationJSONRequest struct {
	Branch string `json:"branch"`
}

type ReposMergeUpstreamConflict struct{}

func (*ReposMergeUpstreamConflict) reposMergeUpstreamResponse() {}

type ReposMergeUpstreamUnprocessableEntity struct{}

func (*ReposMergeUpstreamUnprocessableEntity) reposMergeUpstreamResponse() {}

type ReposPingWebhookNoContent struct{}

func (*ReposPingWebhookNoContent) reposPingWebhookResponse() {}

type ReposRemoveAppAccessRestrictionsOK []Integration

func (*ReposRemoveAppAccessRestrictionsOK) reposRemoveAppAccessRestrictionsResponse() {}

type ReposRemoveCollaborator struct{}

type ReposRemoveStatusCheckContextsOK []string

func (*ReposRemoveStatusCheckContextsOK) reposRemoveStatusCheckContextsResponse() {}

type ReposRemoveStatusCheckProtection struct{}

type ReposRemoveTeamAccessRestrictionsOK []Team

func (*ReposRemoveTeamAccessRestrictionsOK) reposRemoveTeamAccessRestrictionsResponse() {}

type ReposRemoveUserAccessRestrictionsOK []SimpleUser

func (*ReposRemoveUserAccessRestrictionsOK) reposRemoveUserAccessRestrictionsResponse() {}

type ReposRenameBranchApplicationJSONRequest struct {
	NewName string `json:"new_name"`
}

type ReposReplaceAllTopicsApplicationJSONRequest struct {
	Names []string `json:"names"`
}

type ReposSetAppAccessRestrictionsOK []Integration

func (*ReposSetAppAccessRestrictionsOK) reposSetAppAccessRestrictionsResponse() {}

type ReposSetStatusCheckContextsOK []string

func (*ReposSetStatusCheckContextsOK) reposSetStatusCheckContextsResponse() {}

type ReposSetTeamAccessRestrictionsOK []Team

func (*ReposSetTeamAccessRestrictionsOK) reposSetTeamAccessRestrictionsResponse() {}

type ReposSetUserAccessRestrictionsOK []SimpleUser

func (*ReposSetUserAccessRestrictionsOK) reposSetUserAccessRestrictionsResponse() {}

type ReposTestPushWebhookNoContent struct{}

func (*ReposTestPushWebhookNoContent) reposTestPushWebhookResponse() {}

type ReposTransferApplicationJSONRequest struct {
	NewOwner string `json:"new_owner"`
	TeamIds  []int  `json:"team_ids"`
}

type ReposUpdateApplicationJSONRequest struct {
	AllowAutoMerge      bool                                                 `json:"allow_auto_merge"`
	AllowForking        bool                                                 `json:"allow_forking"`
	AllowMergeCommit    bool                                                 `json:"allow_merge_commit"`
	AllowRebaseMerge    bool                                                 `json:"allow_rebase_merge"`
	AllowSquashMerge    bool                                                 `json:"allow_squash_merge"`
	Archived            bool                                                 `json:"archived"`
	DefaultBranch       string                                               `json:"default_branch"`
	DeleteBranchOnMerge bool                                                 `json:"delete_branch_on_merge"`
	Description         string                                               `json:"description"`
	HasIssues           bool                                                 `json:"has_issues"`
	HasProjects         bool                                                 `json:"has_projects"`
	HasWiki             bool                                                 `json:"has_wiki"`
	Homepage            string                                               `json:"homepage"`
	IsTemplate          bool                                                 `json:"is_template"`
	Name                string                                               `json:"name"`
	Private             bool                                                 `json:"private"`
	SecurityAndAnalysis ReposUpdateApplicationJSONRequestSecurityAndAnalysis `json:"security_and_analysis"`
	Visibility          string                                               `json:"visibility"`
}

type ReposUpdateApplicationJSONRequestSecurityAndAnalysis struct {
	AdvancedSecurity ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity `json:"advanced_security"`
	SecretScanning   ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning   `json:"secret_scanning"`
}

type ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity struct {
	Status string `json:"status"`
}

type ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning struct {
	Status string `json:"status"`
}

type ReposUpdateBranchProtectionApplicationJSONRequest struct {
	AllowDeletions                 bool                                                                        `json:"allow_deletions"`
	AllowForcePushes               bool                                                                        `json:"allow_force_pushes"`
	EnforceAdmins                  bool                                                                        `json:"enforce_admins"`
	RequiredConversationResolution bool                                                                        `json:"required_conversation_resolution"`
	RequiredLinearHistory          bool                                                                        `json:"required_linear_history"`
	RequiredPullRequestReviews     ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews `json:"required_pull_request_reviews"`
	RequiredStatusChecks           ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks       `json:"required_status_checks"`
	Restrictions                   ReposUpdateBranchProtectionApplicationJSONRequestRestrictions               `json:"restrictions"`
}

type ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews struct {
	DismissStaleReviews          bool                                                                                             `json:"dismiss_stale_reviews"`
	DismissalRestrictions        ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions `json:"dismissal_restrictions"`
	RequireCodeOwnerReviews      bool                                                                                             `json:"require_code_owner_reviews"`
	RequiredApprovingReviewCount int                                                                                              `json:"required_approving_review_count"`
}

type ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions struct {
	Teams []string `json:"teams"`
	Users []string `json:"users"`
}

type ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks struct {
	Contexts []string `json:"contexts"`
	Strict   bool     `json:"strict"`
}

type ReposUpdateBranchProtectionApplicationJSONRequestRestrictions struct {
	Apps  []string `json:"apps"`
	Teams []string `json:"teams"`
	Users []string `json:"users"`
}

type ReposUpdateCommitCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type ReposUpdateInformationAboutPagesSiteApplicationJSONRequest struct {
	Cname         string `json:"cname"`
	HTTPSEnforced bool   `json:"https_enforced"`
	Public        bool   `json:"public"`
}

type ReposUpdateInformationAboutPagesSiteNoContent struct{}

func (*ReposUpdateInformationAboutPagesSiteNoContent) reposUpdateInformationAboutPagesSiteResponse() {
}

type ReposUpdateInvitationApplicationJSONRequest struct {
	Permissions string `json:"permissions"`
}

type ReposUpdatePullRequestReviewProtectionApplicationJSONRequest struct {
	DismissStaleReviews          bool                                                                              `json:"dismiss_stale_reviews"`
	DismissalRestrictions        ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions `json:"dismissal_restrictions"`
	RequireCodeOwnerReviews      bool                                                                              `json:"require_code_owner_reviews"`
	RequiredApprovingReviewCount int                                                                               `json:"required_approving_review_count"`
}

type ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions struct {
	Teams []string `json:"teams"`
	Users []string `json:"users"`
}

type ReposUpdateReleaseApplicationJSONRequest struct {
	Body                   string `json:"body"`
	DiscussionCategoryName string `json:"discussion_category_name"`
	Draft                  bool   `json:"draft"`
	Name                   string `json:"name"`
	Prerelease             bool   `json:"prerelease"`
	TagName                string `json:"tag_name"`
	TargetCommitish        string `json:"target_commitish"`
}

type ReposUpdateReleaseAssetApplicationJSONRequest struct {
	Label string `json:"label"`
	Name  string `json:"name"`
	State string `json:"state"`
}

type ReposUpdateStatusCheckProtectionApplicationJSONRequest struct {
	Contexts []string `json:"contexts"`
	Strict   bool     `json:"strict"`
}

type ReposUpdateWebhookApplicationJSONRequest struct {
	Events       []string `json:"events"`
	AddEvents    []string `json:"add_events"`
	RemoveEvents []string `json:"remove_events"`
	Active       bool     `json:"active"`
}

type ReposUpdateWebhookApplicationJSONRequestConfig struct {
	ContentType string `json:"content_type"`
	Secret      string `json:"secret"`
}

type ReposUpdateWebhookConfigForRepoApplicationJSONRequest struct {
	URL         string `json:"url"`
	ContentType string `json:"content_type"`
	Secret      string `json:"secret"`
}

type Repository struct {
	AllowAutoMerge      bool                         `json:"allow_auto_merge"`
	AllowForking        bool                         `json:"allow_forking"`
	AllowMergeCommit    bool                         `json:"allow_merge_commit"`
	AllowRebaseMerge    bool                         `json:"allow_rebase_merge"`
	AllowSquashMerge    bool                         `json:"allow_squash_merge"`
	ArchiveURL          string                       `json:"archive_url"`
	Archived            bool                         `json:"archived"`
	AssigneesURL        string                       `json:"assignees_url"`
	BlobsURL            string                       `json:"blobs_url"`
	BranchesURL         string                       `json:"branches_url"`
	CloneURL            string                       `json:"clone_url"`
	CollaboratorsURL    string                       `json:"collaborators_url"`
	CommentsURL         string                       `json:"comments_url"`
	CommitsURL          string                       `json:"commits_url"`
	CompareURL          string                       `json:"compare_url"`
	ContentsURL         string                       `json:"contents_url"`
	ContributorsURL     string                       `json:"contributors_url"`
	CreatedAt           time.Time                    `json:"created_at"`
	DefaultBranch       string                       `json:"default_branch"`
	DeleteBranchOnMerge bool                         `json:"delete_branch_on_merge"`
	DeploymentsURL      string                       `json:"deployments_url"`
	Description         string                       `json:"description"`
	Disabled            bool                         `json:"disabled"`
	DownloadsURL        string                       `json:"downloads_url"`
	EventsURL           string                       `json:"events_url"`
	Fork                bool                         `json:"fork"`
	Forks               int                          `json:"forks"`
	ForksCount          int                          `json:"forks_count"`
	ForksURL            string                       `json:"forks_url"`
	FullName            string                       `json:"full_name"`
	GitCommitsURL       string                       `json:"git_commits_url"`
	GitRefsURL          string                       `json:"git_refs_url"`
	GitTagsURL          string                       `json:"git_tags_url"`
	GitURL              string                       `json:"git_url"`
	HTMLURL             string                       `json:"html_url"`
	HasDownloads        bool                         `json:"has_downloads"`
	HasIssues           bool                         `json:"has_issues"`
	HasPages            bool                         `json:"has_pages"`
	HasProjects         bool                         `json:"has_projects"`
	HasWiki             bool                         `json:"has_wiki"`
	Homepage            string                       `json:"homepage"`
	HooksURL            string                       `json:"hooks_url"`
	ID                  int                          `json:"id"`
	IsTemplate          bool                         `json:"is_template"`
	IssueCommentURL     string                       `json:"issue_comment_url"`
	IssueEventsURL      string                       `json:"issue_events_url"`
	IssuesURL           string                       `json:"issues_url"`
	KeysURL             string                       `json:"keys_url"`
	LabelsURL           string                       `json:"labels_url"`
	Language            string                       `json:"language"`
	LanguagesURL        string                       `json:"languages_url"`
	License             NullableLicenseSimple        `json:"license"`
	MasterBranch        string                       `json:"master_branch"`
	MergesURL           string                       `json:"merges_url"`
	MilestonesURL       string                       `json:"milestones_url"`
	MirrorURL           string                       `json:"mirror_url"`
	Name                string                       `json:"name"`
	NetworkCount        int                          `json:"network_count"`
	NodeID              string                       `json:"node_id"`
	NotificationsURL    string                       `json:"notifications_url"`
	OpenIssues          int                          `json:"open_issues"`
	OpenIssuesCount     int                          `json:"open_issues_count"`
	Organization        NullableSimpleUser           `json:"organization"`
	Owner               SimpleUser                   `json:"owner"`
	Permissions         RepositoryPermissions        `json:"permissions"`
	Private             bool                         `json:"private"`
	PullsURL            string                       `json:"pulls_url"`
	PushedAt            time.Time                    `json:"pushed_at"`
	ReleasesURL         string                       `json:"releases_url"`
	SSHURL              string                       `json:"ssh_url"`
	Size                int                          `json:"size"`
	StargazersCount     int                          `json:"stargazers_count"`
	StargazersURL       string                       `json:"stargazers_url"`
	StarredAt           string                       `json:"starred_at"`
	StatusesURL         string                       `json:"statuses_url"`
	SubscribersCount    int                          `json:"subscribers_count"`
	SubscribersURL      string                       `json:"subscribers_url"`
	SubscriptionURL     string                       `json:"subscription_url"`
	SvnURL              string                       `json:"svn_url"`
	TagsURL             string                       `json:"tags_url"`
	TeamsURL            string                       `json:"teams_url"`
	TempCloneToken      string                       `json:"temp_clone_token"`
	TemplateRepository  RepositoryTemplateRepository `json:"template_repository"`
	Topics              []string                     `json:"topics"`
	TreesURL            string                       `json:"trees_url"`
	URL                 string                       `json:"url"`
	UpdatedAt           time.Time                    `json:"updated_at"`
	Visibility          string                       `json:"visibility"`
	Watchers            int                          `json:"watchers"`
	WatchersCount       int                          `json:"watchers_count"`
}

func (*Repository) reposCreateForAuthenticatedUserResponse() {}
func (*Repository) reposCreateInOrgResponse()                {}

type RepositoryCollaboratorPermission struct {
	Permission string             `json:"permission"`
	User       NullableSimpleUser `json:"user"`
}

func (*RepositoryCollaboratorPermission) projectsGetPermissionForUserResponse()        {}
func (*RepositoryCollaboratorPermission) reposGetCollaboratorPermissionLevelResponse() {}

type RepositoryInvitation struct {
	CreatedAt   time.Time          `json:"created_at"`
	Expired     bool               `json:"expired"`
	HTMLURL     string             `json:"html_url"`
	ID          int                `json:"id"`
	Invitee     NullableSimpleUser `json:"invitee"`
	Inviter     NullableSimpleUser `json:"inviter"`
	NodeID      string             `json:"node_id"`
	Permissions string             `json:"permissions"`
	Repository  MinimalRepository  `json:"repository"`
	URL         string             `json:"url"`
}

func (*RepositoryInvitation) reposAddCollaboratorResponse() {}

type RepositoryPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type RepositorySubscription struct {
	CreatedAt     time.Time `json:"created_at"`
	Ignored       bool      `json:"ignored"`
	Reason        string    `json:"reason"`
	RepositoryURL string    `json:"repository_url"`
	Subscribed    bool      `json:"subscribed"`
	URL           string    `json:"url"`
}

func (*RepositorySubscription) activityGetRepoSubscriptionResponse() {}

type RepositoryTemplateRepository struct {
	AllowAutoMerge      bool                                    `json:"allow_auto_merge"`
	AllowMergeCommit    bool                                    `json:"allow_merge_commit"`
	AllowRebaseMerge    bool                                    `json:"allow_rebase_merge"`
	AllowSquashMerge    bool                                    `json:"allow_squash_merge"`
	ArchiveURL          string                                  `json:"archive_url"`
	Archived            bool                                    `json:"archived"`
	AssigneesURL        string                                  `json:"assignees_url"`
	BlobsURL            string                                  `json:"blobs_url"`
	BranchesURL         string                                  `json:"branches_url"`
	CloneURL            string                                  `json:"clone_url"`
	CollaboratorsURL    string                                  `json:"collaborators_url"`
	CommentsURL         string                                  `json:"comments_url"`
	CommitsURL          string                                  `json:"commits_url"`
	CompareURL          string                                  `json:"compare_url"`
	ContentsURL         string                                  `json:"contents_url"`
	ContributorsURL     string                                  `json:"contributors_url"`
	CreatedAt           string                                  `json:"created_at"`
	DefaultBranch       string                                  `json:"default_branch"`
	DeleteBranchOnMerge bool                                    `json:"delete_branch_on_merge"`
	DeploymentsURL      string                                  `json:"deployments_url"`
	Description         string                                  `json:"description"`
	Disabled            bool                                    `json:"disabled"`
	DownloadsURL        string                                  `json:"downloads_url"`
	EventsURL           string                                  `json:"events_url"`
	Fork                bool                                    `json:"fork"`
	ForksCount          int                                     `json:"forks_count"`
	ForksURL            string                                  `json:"forks_url"`
	FullName            string                                  `json:"full_name"`
	GitCommitsURL       string                                  `json:"git_commits_url"`
	GitRefsURL          string                                  `json:"git_refs_url"`
	GitTagsURL          string                                  `json:"git_tags_url"`
	GitURL              string                                  `json:"git_url"`
	HTMLURL             string                                  `json:"html_url"`
	HasDownloads        bool                                    `json:"has_downloads"`
	HasIssues           bool                                    `json:"has_issues"`
	HasPages            bool                                    `json:"has_pages"`
	HasProjects         bool                                    `json:"has_projects"`
	HasWiki             bool                                    `json:"has_wiki"`
	Homepage            string                                  `json:"homepage"`
	HooksURL            string                                  `json:"hooks_url"`
	ID                  int                                     `json:"id"`
	IsTemplate          bool                                    `json:"is_template"`
	IssueCommentURL     string                                  `json:"issue_comment_url"`
	IssueEventsURL      string                                  `json:"issue_events_url"`
	IssuesURL           string                                  `json:"issues_url"`
	KeysURL             string                                  `json:"keys_url"`
	LabelsURL           string                                  `json:"labels_url"`
	Language            string                                  `json:"language"`
	LanguagesURL        string                                  `json:"languages_url"`
	MergesURL           string                                  `json:"merges_url"`
	MilestonesURL       string                                  `json:"milestones_url"`
	MirrorURL           string                                  `json:"mirror_url"`
	Name                string                                  `json:"name"`
	NetworkCount        int                                     `json:"network_count"`
	NodeID              string                                  `json:"node_id"`
	NotificationsURL    string                                  `json:"notifications_url"`
	OpenIssuesCount     int                                     `json:"open_issues_count"`
	Owner               RepositoryTemplateRepositoryOwner       `json:"owner"`
	Permissions         RepositoryTemplateRepositoryPermissions `json:"permissions"`
	Private             bool                                    `json:"private"`
	PullsURL            string                                  `json:"pulls_url"`
	PushedAt            string                                  `json:"pushed_at"`
	ReleasesURL         string                                  `json:"releases_url"`
	SSHURL              string                                  `json:"ssh_url"`
	Size                int                                     `json:"size"`
	StargazersCount     int                                     `json:"stargazers_count"`
	StargazersURL       string                                  `json:"stargazers_url"`
	StatusesURL         string                                  `json:"statuses_url"`
	SubscribersCount    int                                     `json:"subscribers_count"`
	SubscribersURL      string                                  `json:"subscribers_url"`
	SubscriptionURL     string                                  `json:"subscription_url"`
	SvnURL              string                                  `json:"svn_url"`
	TagsURL             string                                  `json:"tags_url"`
	TeamsURL            string                                  `json:"teams_url"`
	TempCloneToken      string                                  `json:"temp_clone_token"`
	Topics              []string                                `json:"topics"`
	TreesURL            string                                  `json:"trees_url"`
	URL                 string                                  `json:"url"`
	UpdatedAt           string                                  `json:"updated_at"`
	Visibility          string                                  `json:"visibility"`
	WatchersCount       int                                     `json:"watchers_count"`
}

type RepositoryTemplateRepositoryOwner struct {
	AvatarURL         string `json:"avatar_url"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type RepositoryTemplateRepositoryPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type ReviewComment struct {
	AuthorAssociation   string             `json:"author_association"`
	Body                string             `json:"body"`
	BodyHTML            string             `json:"body_html"`
	BodyText            string             `json:"body_text"`
	CommitID            string             `json:"commit_id"`
	CreatedAt           time.Time          `json:"created_at"`
	DiffHunk            string             `json:"diff_hunk"`
	HTMLURL             string             `json:"html_url"`
	ID                  int                `json:"id"`
	InReplyToID         int                `json:"in_reply_to_id"`
	Line                int                `json:"line"`
	Links               ReviewCommentLinks `json:"_links"`
	NodeID              string             `json:"node_id"`
	OriginalCommitID    string             `json:"original_commit_id"`
	OriginalLine        int                `json:"original_line"`
	OriginalPosition    int                `json:"original_position"`
	OriginalStartLine   int                `json:"original_start_line"`
	Path                string             `json:"path"`
	Position            int                `json:"position"`
	PullRequestReviewID int                `json:"pull_request_review_id"`
	PullRequestURL      string             `json:"pull_request_url"`
	Reactions           ReactionRollup     `json:"reactions"`
	Side                string             `json:"side"`
	StartLine           int                `json:"start_line"`
	StartSide           string             `json:"start_side"`
	URL                 string             `json:"url"`
	UpdatedAt           time.Time          `json:"updated_at"`
	User                NullableSimpleUser `json:"user"`
}

type ReviewCommentLinks struct {
	HTML        Link `json:"html"`
	PullRequest Link `json:"pull_request"`
	Self        Link `json:"self"`
}

type Runner struct {
	Busy   bool               `json:"busy"`
	ID     int                `json:"id"`
	Labels []RunnerLabelsItem `json:"labels"`
	Name   string             `json:"name"`
	Os     string             `json:"os"`
	Status string             `json:"status"`
}

type RunnerApplication struct {
	Architecture      string `json:"architecture"`
	DownloadURL       string `json:"download_url"`
	Filename          string `json:"filename"`
	Os                string `json:"os"`
	SHA256Checksum    string `json:"sha256_checksum"`
	TempDownloadToken string `json:"temp_download_token"`
}

type RunnerGroupsEnterprise struct {
	AllowsPublicRepositories bool   `json:"allows_public_repositories"`
	Default                  bool   `json:"default"`
	ID                       float  `json:"id"`
	Name                     string `json:"name"`
	RunnersURL               string `json:"runners_url"`
	SelectedOrganizationsURL string `json:"selected_organizations_url"`
	Visibility               string `json:"visibility"`
}

type RunnerGroupsOrg struct {
	AllowsPublicRepositories          bool   `json:"allows_public_repositories"`
	Default                           bool   `json:"default"`
	ID                                float  `json:"id"`
	Inherited                         bool   `json:"inherited"`
	InheritedAllowsPublicRepositories bool   `json:"inherited_allows_public_repositories"`
	Name                              string `json:"name"`
	RunnersURL                        string `json:"runners_url"`
	SelectedRepositoriesURL           string `json:"selected_repositories_url"`
	Visibility                        string `json:"visibility"`
}

type RunnerLabelsItem struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Type string `json:"type"`
}

type ScimDeleteUserFromOrgNoContent struct{}

func (*ScimDeleteUserFromOrgNoContent) scimDeleteUserFromOrgResponse() {}

type ScimEnterpriseGroup struct {
	DisplayName string                           `json:"displayName"`
	ExternalId  string                           `json:"externalId"`
	ID          string                           `json:"id"`
	Members     []ScimEnterpriseGroupMembersItem `json:"members"`
	Meta        ScimEnterpriseGroupMeta          `json:"meta"`
	Schemas     []string                         `json:"schemas"`
}

type ScimEnterpriseGroupMembersItem struct {
	Display string `json:"display"`
	Ref     string `json:"$ref"`
	Value   string `json:"value"`
}

type ScimEnterpriseGroupMeta struct {
	Created      string `json:"created"`
	LastModified string `json:"lastModified"`
	Location     string `json:"location"`
	ResourceType string `json:"resourceType"`
}

type ScimEnterpriseUser struct {
	Active     bool                           `json:"active"`
	Emails     []ScimEnterpriseUserEmailsItem `json:"emails"`
	ExternalId string                         `json:"externalId"`
	Groups     []ScimEnterpriseUserGroupsItem `json:"groups"`
	ID         string                         `json:"id"`
	Meta       ScimEnterpriseUserMeta         `json:"meta"`
	Name       ScimEnterpriseUserName         `json:"name"`
	Schemas    []string                       `json:"schemas"`
	UserName   string                         `json:"userName"`
}

type ScimEnterpriseUserEmailsItem struct {
	Primary bool   `json:"primary"`
	Type    string `json:"type"`
	Value   string `json:"value"`
}

type ScimEnterpriseUserGroupsItem struct {
	Value string `json:"value"`
}

type ScimEnterpriseUserMeta struct {
	Created      string `json:"created"`
	LastModified string `json:"lastModified"`
	Location     string `json:"location"`
	ResourceType string `json:"resourceType"`
}

type ScimEnterpriseUserName struct {
	FamilyName string `json:"familyName"`
	GivenName  string `json:"givenName"`
}

type ScimError struct {
	Detail           string   `json:"detail"`
	DocumentationURL string   `json:"documentation_url"`
	Message          string   `json:"message"`
	Schemas          []string `json:"schemas"`
	ScimType         string   `json:"scimType"`
	Status           int      `json:"status"`
}

func (*ScimError) appsGetWebhookDeliveryResponse()                {}
func (*ScimError) appsListWebhookDeliveriesResponse()             {}
func (*ScimError) appsRedeliverWebhookDeliveryResponse()          {}
func (*ScimError) codeScanningDeleteAnalysisResponse()            {}
func (*ScimError) orgsGetWebhookDeliveryResponse()                {}
func (*ScimError) orgsListWebhookDeliveriesResponse()             {}
func (*ScimError) orgsRedeliverWebhookDeliveryResponse()          {}
func (*ScimError) reposCreateForAuthenticatedUserResponse()       {}
func (*ScimError) reposCreateForkResponse()                       {}
func (*ScimError) reposGetWebhookDeliveryResponse()               {}
func (*ScimError) reposListCommitsResponse()                      {}
func (*ScimError) reposListForksResponse()                        {}
func (*ScimError) reposListWebhookDeliveriesResponse()            {}
func (*ScimError) reposRedeliverWebhookDeliveryResponse()         {}
func (*ScimError) reposUpdateInformationAboutPagesSiteResponse()  {}
func (*ScimError) scimDeleteUserFromOrgResponse()                 {}
func (*ScimError) scimGetProvisioningInformationForUserResponse() {}
func (*ScimError) scimListProvisionedIdentitiesResponse()         {}
func (*ScimError) scimProvisionAndInviteUserResponse()            {}
func (*ScimError) scimSetInformationForProvisionedUserResponse()  {}
func (*ScimError) scimUpdateAttributeForUserResponse()            {}

type ScimGroupListEnterprise struct {
	ItemsPerPage float                                  `json:"itemsPerPage"`
	Resources    []ScimGroupListEnterpriseResourcesItem `json:"Resources"`
	Schemas      []string                               `json:"schemas"`
	StartIndex   float                                  `json:"startIndex"`
	TotalResults float                                  `json:"totalResults"`
}

type ScimGroupListEnterpriseResourcesItem struct {
	DisplayName string                                            `json:"displayName"`
	ExternalId  string                                            `json:"externalId"`
	ID          string                                            `json:"id"`
	Members     []ScimGroupListEnterpriseResourcesItemMembersItem `json:"members"`
	Meta        ScimGroupListEnterpriseResourcesItemMeta          `json:"meta"`
	Schemas     []string                                          `json:"schemas"`
}

type ScimGroupListEnterpriseResourcesItemMembersItem struct {
	Display string `json:"display"`
	Ref     string `json:"$ref"`
	Value   string `json:"value"`
}

type ScimGroupListEnterpriseResourcesItemMeta struct {
	Created      string `json:"created"`
	LastModified string `json:"lastModified"`
	Location     string `json:"location"`
	ResourceType string `json:"resourceType"`
}

type ScimProvisionAndInviteUserApplicationJSONRequest struct {
	Active      bool                                                         `json:"active"`
	DisplayName string                                                       `json:"displayName"`
	Emails      []ScimProvisionAndInviteUserApplicationJSONRequestEmailsItem `json:"emails"`
	ExternalId  string                                                       `json:"externalId"`
	Groups      []string                                                     `json:"groups"`
	Name        ScimProvisionAndInviteUserApplicationJSONRequestName         `json:"name"`
	Schemas     []string                                                     `json:"schemas"`
	UserName    string                                                       `json:"userName"`
}

type ScimProvisionAndInviteUserApplicationJSONRequestEmailsItem struct {
	Primary bool   `json:"primary"`
	Type    string `json:"type"`
	Value   string `json:"value"`
}

type ScimProvisionAndInviteUserApplicationJSONRequestName struct {
	FamilyName string `json:"familyName"`
	Formatted  string `json:"formatted"`
	GivenName  string `json:"givenName"`
}

type ScimSetInformationForProvisionedUserApplicationJSONRequest struct {
	Active      bool                                                                   `json:"active"`
	DisplayName string                                                                 `json:"displayName"`
	Emails      []ScimSetInformationForProvisionedUserApplicationJSONRequestEmailsItem `json:"emails"`
	ExternalId  string                                                                 `json:"externalId"`
	Groups      []string                                                               `json:"groups"`
	Name        ScimSetInformationForProvisionedUserApplicationJSONRequestName         `json:"name"`
	Schemas     []string                                                               `json:"schemas"`
	UserName    string                                                                 `json:"userName"`
}

type ScimSetInformationForProvisionedUserApplicationJSONRequestEmailsItem struct {
	Primary bool   `json:"primary"`
	Type    string `json:"type"`
	Value   string `json:"value"`
}

type ScimSetInformationForProvisionedUserApplicationJSONRequestName struct {
	FamilyName string `json:"familyName"`
	Formatted  string `json:"formatted"`
	GivenName  string `json:"givenName"`
}

type ScimUpdateAttributeForUserApplicationJSONRequest struct {
	Schemas []string `json:"schemas"`
}

type ScimUpdateAttributeForUserApplicationJSONRequestOperationsItem struct {
	Op   string `json:"op"`
	Path string `json:"path"`
}

type ScimUser struct {
	Meta ScimUserMeta `json:"meta"`
}

func (*ScimUser) scimProvisionAndInviteUserResponse()           {}
func (*ScimUser) scimSetInformationForProvisionedUserResponse() {}
func (*ScimUser) scimUpdateAttributeForUserResponse()           {}

type ScimUserList struct {
	ItemsPerPage int        `json:"itemsPerPage"`
	Resources    []ScimUser `json:"Resources"`
	Schemas      []string   `json:"schemas"`
	StartIndex   int        `json:"startIndex"`
	TotalResults int        `json:"totalResults"`
}

func (*ScimUserList) scimListProvisionedIdentitiesResponse() {}

type ScimUserListEnterprise struct {
	ItemsPerPage float                                 `json:"itemsPerPage"`
	Resources    []ScimUserListEnterpriseResourcesItem `json:"Resources"`
	Schemas      []string                              `json:"schemas"`
	StartIndex   float                                 `json:"startIndex"`
	TotalResults float                                 `json:"totalResults"`
}

type ScimUserListEnterpriseResourcesItem struct {
	Active     bool                                            `json:"active"`
	Emails     []ScimUserListEnterpriseResourcesItemEmailsItem `json:"emails"`
	ExternalId string                                          `json:"externalId"`
	Groups     []ScimUserListEnterpriseResourcesItemGroupsItem `json:"groups"`
	ID         string                                          `json:"id"`
	Meta       ScimUserListEnterpriseResourcesItemMeta         `json:"meta"`
	Name       ScimUserListEnterpriseResourcesItemName         `json:"name"`
	Schemas    []string                                        `json:"schemas"`
	UserName   string                                          `json:"userName"`
}

type ScimUserListEnterpriseResourcesItemEmailsItem struct {
	Primary bool   `json:"primary"`
	Type    string `json:"type"`
	Value   string `json:"value"`
}

type ScimUserListEnterpriseResourcesItemGroupsItem struct {
	Value string `json:"value"`
}

type ScimUserListEnterpriseResourcesItemMeta struct {
	Created      string `json:"created"`
	LastModified string `json:"lastModified"`
	Location     string `json:"location"`
	ResourceType string `json:"resourceType"`
}

type ScimUserListEnterpriseResourcesItemName struct {
	FamilyName string `json:"familyName"`
	GivenName  string `json:"givenName"`
}

type ScimUserMeta struct {
	Created      time.Time `json:"created"`
	LastModified time.Time `json:"lastModified"`
	Location     string    `json:"location"`
	ResourceType string    `json:"resourceType"`
}

type ScimUserOperationsItem struct {
	Op   string `json:"op"`
	Path string `json:"path"`
}

type SearchCodeOK struct {
	IncompleteResults bool                   `json:"incomplete_results"`
	Items             []CodeSearchResultItem `json:"items"`
	TotalCount        int                    `json:"total_count"`
}

func (*SearchCodeOK) searchCodeResponse() {}

type SearchCommitsOK struct {
	IncompleteResults bool                     `json:"incomplete_results"`
	Items             []CommitSearchResultItem `json:"items"`
	TotalCount        int                      `json:"total_count"`
}

func (*SearchCommitsOK) searchCommitsResponse() {}

type SearchIssuesAndPullRequestsOK struct {
	IncompleteResults bool                    `json:"incomplete_results"`
	Items             []IssueSearchResultItem `json:"items"`
	TotalCount        int                     `json:"total_count"`
}

func (*SearchIssuesAndPullRequestsOK) searchIssuesAndPullRequestsResponse() {}

type SearchLabelsOK struct {
	IncompleteResults bool                    `json:"incomplete_results"`
	Items             []LabelSearchResultItem `json:"items"`
	TotalCount        int                     `json:"total_count"`
}

func (*SearchLabelsOK) searchLabelsResponse() {}

type SearchReposOK struct {
	IncompleteResults bool                   `json:"incomplete_results"`
	Items             []RepoSearchResultItem `json:"items"`
	TotalCount        int                    `json:"total_count"`
}

func (*SearchReposOK) searchReposResponse() {}

type SearchResultTextMatchesItem struct {
	Fragment   string                                   `json:"fragment"`
	Matches    []SearchResultTextMatchesItemMatchesItem `json:"matches"`
	ObjectType string                                   `json:"object_type"`
	ObjectURL  string                                   `json:"object_url"`
	Property   string                                   `json:"property"`
}

type SearchResultTextMatchesItemMatchesItem struct {
	Indices []int  `json:"indices"`
	Text    string `json:"text"`
}

type SearchTopicsOK struct {
	IncompleteResults bool                    `json:"incomplete_results"`
	Items             []TopicSearchResultItem `json:"items"`
	TotalCount        int                     `json:"total_count"`
}

func (*SearchTopicsOK) searchTopicsResponse() {}

type SearchUsersOK struct {
	IncompleteResults bool                   `json:"incomplete_results"`
	Items             []UserSearchResultItem `json:"items"`
	TotalCount        int                    `json:"total_count"`
}

func (*SearchUsersOK) searchUsersResponse() {}

type SecretScanningAlert struct {
	CreatedAt    time.Time          `json:"created_at"`
	HTMLURL      string             `json:"html_url"`
	LocationsURL string             `json:"locations_url"`
	Number       int                `json:"number"`
	Resolution   string             `json:"resolution"`
	ResolvedAt   time.Time          `json:"resolved_at"`
	ResolvedBy   NullableSimpleUser `json:"resolved_by"`
	Secret       string             `json:"secret"`
	SecretType   string             `json:"secret_type"`
	State        string             `json:"state"`
	URL          string             `json:"url"`
}

func (*SecretScanningAlert) secretScanningGetAlertResponse()    {}
func (*SecretScanningAlert) secretScanningUpdateAlertResponse() {}

type SecretScanningGetAlertNotFound struct{}

func (*SecretScanningGetAlertNotFound) secretScanningGetAlertResponse() {}

type SecretScanningListAlertsForOrgOK []OrganizationSecretScanningAlert

func (*SecretScanningListAlertsForOrgOK) secretScanningListAlertsForOrgResponse() {}

type SecretScanningListAlertsForRepoNotFound struct{}

func (*SecretScanningListAlertsForRepoNotFound) secretScanningListAlertsForRepoResponse() {}

type SecretScanningListAlertsForRepoOK []SecretScanningAlert

func (*SecretScanningListAlertsForRepoOK) secretScanningListAlertsForRepoResponse() {}

type SecretScanningUpdateAlertApplicationJSONRequest struct {
	Resolution string `json:"resolution"`
	State      string `json:"state"`
}

type SecretScanningUpdateAlertNotFound struct{}

func (*SecretScanningUpdateAlertNotFound) secretScanningUpdateAlertResponse() {}

type SecretScanningUpdateAlertUnprocessableEntity struct{}

func (*SecretScanningUpdateAlertUnprocessableEntity) secretScanningUpdateAlertResponse() {}

type SelectedActions struct {
	GithubOwnedAllowed bool     `json:"github_owned_allowed"`
	PatternsAllowed    []string `json:"patterns_allowed"`
	VerifiedAllowed    bool     `json:"verified_allowed"`
}

type ShortBlob struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

func (*ShortBlob) gitCreateBlobResponse() {}

type ShortBranch struct {
	Commit        ShortBranchCommit `json:"commit"`
	Name          string            `json:"name"`
	Protected     bool              `json:"protected"`
	Protection    BranchProtection  `json:"protection"`
	ProtectionURL string            `json:"protection_url"`
}

type ShortBranchCommit struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type SimpleCommit struct {
	Author    SimpleCommitAuthor    `json:"author"`
	Committer SimpleCommitCommitter `json:"committer"`
	ID        string                `json:"id"`
	Message   string                `json:"message"`
	Timestamp time.Time             `json:"timestamp"`
	TreeID    string                `json:"tree_id"`
}

type SimpleCommitAuthor struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type SimpleCommitCommitter struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type SimpleCommitStatus struct {
	AvatarURL   string    `json:"avatar_url"`
	Context     string    `json:"context"`
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	ID          int       `json:"id"`
	NodeID      string    `json:"node_id"`
	Required    bool      `json:"required"`
	State       string    `json:"state"`
	TargetURL   string    `json:"target_url"`
	URL         string    `json:"url"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type SimpleUser struct {
	AvatarURL         string `json:"avatar_url"`
	Email             string `json:"email"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	Name              string `json:"name"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredAt         string `json:"starred_at"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type StarredRepository struct {
	Repo      Repository `json:"repo"`
	StarredAt time.Time  `json:"starred_at"`
}

type Status struct {
	AvatarURL   string             `json:"avatar_url"`
	Context     string             `json:"context"`
	CreatedAt   string             `json:"created_at"`
	Creator     NullableSimpleUser `json:"creator"`
	Description string             `json:"description"`
	ID          int                `json:"id"`
	NodeID      string             `json:"node_id"`
	State       string             `json:"state"`
	TargetURL   string             `json:"target_url"`
	URL         string             `json:"url"`
	UpdatedAt   string             `json:"updated_at"`
}

type StatusCheckPolicy struct {
	Contexts    []string `json:"contexts"`
	ContextsURL string   `json:"contexts_url"`
	Strict      bool     `json:"strict"`
	URL         string   `json:"url"`
}

func (*StatusCheckPolicy) reposGetStatusChecksProtectionResponse()   {}
func (*StatusCheckPolicy) reposUpdateStatusCheckProtectionResponse() {}

type Tag struct {
	Commit     TagCommit `json:"commit"`
	Name       string    `json:"name"`
	NodeID     string    `json:"node_id"`
	TarballURL string    `json:"tarball_url"`
	ZipballURL string    `json:"zipball_url"`
}

type TagCommit struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type Team struct {
	Description     string             `json:"description"`
	HTMLURL         string             `json:"html_url"`
	ID              int                `json:"id"`
	MembersURL      string             `json:"members_url"`
	Name            string             `json:"name"`
	NodeID          string             `json:"node_id"`
	Parent          NullableTeamSimple `json:"parent"`
	Permission      string             `json:"permission"`
	Permissions     TeamPermissions    `json:"permissions"`
	Privacy         string             `json:"privacy"`
	RepositoriesURL string             `json:"repositories_url"`
	Slug            string             `json:"slug"`
	URL             string             `json:"url"`
}

type TeamDiscussion struct {
	Author        NullableSimpleUser `json:"author"`
	Body          string             `json:"body"`
	BodyHTML      string             `json:"body_html"`
	BodyVersion   string             `json:"body_version"`
	CommentsCount int                `json:"comments_count"`
	CommentsURL   string             `json:"comments_url"`
	CreatedAt     time.Time          `json:"created_at"`
	HTMLURL       string             `json:"html_url"`
	LastEditedAt  time.Time          `json:"last_edited_at"`
	NodeID        string             `json:"node_id"`
	Number        int                `json:"number"`
	Pinned        bool               `json:"pinned"`
	Private       bool               `json:"private"`
	Reactions     ReactionRollup     `json:"reactions"`
	TeamURL       string             `json:"team_url"`
	Title         string             `json:"title"`
	URL           string             `json:"url"`
	UpdatedAt     time.Time          `json:"updated_at"`
}

type TeamDiscussionComment struct {
	Author        NullableSimpleUser `json:"author"`
	Body          string             `json:"body"`
	BodyHTML      string             `json:"body_html"`
	BodyVersion   string             `json:"body_version"`
	CreatedAt     time.Time          `json:"created_at"`
	DiscussionURL string             `json:"discussion_url"`
	HTMLURL       string             `json:"html_url"`
	LastEditedAt  time.Time          `json:"last_edited_at"`
	NodeID        string             `json:"node_id"`
	Number        int                `json:"number"`
	Reactions     ReactionRollup     `json:"reactions"`
	URL           string             `json:"url"`
	UpdatedAt     time.Time          `json:"updated_at"`
}

type TeamFull struct {
	CreatedAt       time.Time          `json:"created_at"`
	Description     string             `json:"description"`
	HTMLURL         string             `json:"html_url"`
	ID              int                `json:"id"`
	LdapDn          string             `json:"ldap_dn"`
	MembersCount    int                `json:"members_count"`
	MembersURL      string             `json:"members_url"`
	Name            string             `json:"name"`
	NodeID          string             `json:"node_id"`
	Organization    OrganizationFull   `json:"organization"`
	Parent          NullableTeamSimple `json:"parent"`
	Permission      string             `json:"permission"`
	Privacy         string             `json:"privacy"`
	ReposCount      int                `json:"repos_count"`
	RepositoriesURL string             `json:"repositories_url"`
	Slug            string             `json:"slug"`
	URL             string             `json:"url"`
	UpdatedAt       time.Time          `json:"updated_at"`
}

func (*TeamFull) teamsCreateResponse()       {}
func (*TeamFull) teamsGetByNameResponse()    {}
func (*TeamFull) teamsGetLegacyResponse()    {}
func (*TeamFull) teamsUpdateLegacyResponse() {}

type TeamMembership struct {
	Role  string `json:"role"`
	State string `json:"state"`
	URL   string `json:"url"`
}

func (*TeamMembership) teamsAddOrUpdateMembershipForUserInOrgResponse()  {}
func (*TeamMembership) teamsAddOrUpdateMembershipForUserLegacyResponse() {}
func (*TeamMembership) teamsGetMembershipForUserInOrgResponse()          {}
func (*TeamMembership) teamsGetMembershipForUserLegacyResponse()         {}

type TeamPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type TeamProject struct {
	Body                   string                 `json:"body"`
	ColumnsURL             string                 `json:"columns_url"`
	CreatedAt              string                 `json:"created_at"`
	Creator                SimpleUser             `json:"creator"`
	HTMLURL                string                 `json:"html_url"`
	ID                     int                    `json:"id"`
	Name                   string                 `json:"name"`
	NodeID                 string                 `json:"node_id"`
	Number                 int                    `json:"number"`
	OrganizationPermission string                 `json:"organization_permission"`
	OwnerURL               string                 `json:"owner_url"`
	Permissions            TeamProjectPermissions `json:"permissions"`
	Private                bool                   `json:"private"`
	State                  string                 `json:"state"`
	URL                    string                 `json:"url"`
	UpdatedAt              string                 `json:"updated_at"`
}

func (*TeamProject) teamsCheckPermissionsForProjectInOrgResponse()  {}
func (*TeamProject) teamsCheckPermissionsForProjectLegacyResponse() {}

type TeamProjectPermissions struct {
	Admin bool `json:"admin"`
	Read  bool `json:"read"`
	Write bool `json:"write"`
}

type TeamRepository struct {
	AllowAutoMerge      bool                      `json:"allow_auto_merge"`
	AllowForking        bool                      `json:"allow_forking"`
	AllowMergeCommit    bool                      `json:"allow_merge_commit"`
	AllowRebaseMerge    bool                      `json:"allow_rebase_merge"`
	AllowSquashMerge    bool                      `json:"allow_squash_merge"`
	ArchiveURL          string                    `json:"archive_url"`
	Archived            bool                      `json:"archived"`
	AssigneesURL        string                    `json:"assignees_url"`
	BlobsURL            string                    `json:"blobs_url"`
	BranchesURL         string                    `json:"branches_url"`
	CloneURL            string                    `json:"clone_url"`
	CollaboratorsURL    string                    `json:"collaborators_url"`
	CommentsURL         string                    `json:"comments_url"`
	CommitsURL          string                    `json:"commits_url"`
	CompareURL          string                    `json:"compare_url"`
	ContentsURL         string                    `json:"contents_url"`
	ContributorsURL     string                    `json:"contributors_url"`
	CreatedAt           time.Time                 `json:"created_at"`
	DefaultBranch       string                    `json:"default_branch"`
	DeleteBranchOnMerge bool                      `json:"delete_branch_on_merge"`
	DeploymentsURL      string                    `json:"deployments_url"`
	Description         string                    `json:"description"`
	Disabled            bool                      `json:"disabled"`
	DownloadsURL        string                    `json:"downloads_url"`
	EventsURL           string                    `json:"events_url"`
	Fork                bool                      `json:"fork"`
	Forks               int                       `json:"forks"`
	ForksCount          int                       `json:"forks_count"`
	ForksURL            string                    `json:"forks_url"`
	FullName            string                    `json:"full_name"`
	GitCommitsURL       string                    `json:"git_commits_url"`
	GitRefsURL          string                    `json:"git_refs_url"`
	GitTagsURL          string                    `json:"git_tags_url"`
	GitURL              string                    `json:"git_url"`
	HTMLURL             string                    `json:"html_url"`
	HasDownloads        bool                      `json:"has_downloads"`
	HasIssues           bool                      `json:"has_issues"`
	HasPages            bool                      `json:"has_pages"`
	HasProjects         bool                      `json:"has_projects"`
	HasWiki             bool                      `json:"has_wiki"`
	Homepage            string                    `json:"homepage"`
	HooksURL            string                    `json:"hooks_url"`
	ID                  int                       `json:"id"`
	IsTemplate          bool                      `json:"is_template"`
	IssueCommentURL     string                    `json:"issue_comment_url"`
	IssueEventsURL      string                    `json:"issue_events_url"`
	IssuesURL           string                    `json:"issues_url"`
	KeysURL             string                    `json:"keys_url"`
	LabelsURL           string                    `json:"labels_url"`
	Language            string                    `json:"language"`
	LanguagesURL        string                    `json:"languages_url"`
	License             NullableLicenseSimple     `json:"license"`
	MasterBranch        string                    `json:"master_branch"`
	MergesURL           string                    `json:"merges_url"`
	MilestonesURL       string                    `json:"milestones_url"`
	MirrorURL           string                    `json:"mirror_url"`
	Name                string                    `json:"name"`
	NetworkCount        int                       `json:"network_count"`
	NodeID              string                    `json:"node_id"`
	NotificationsURL    string                    `json:"notifications_url"`
	OpenIssues          int                       `json:"open_issues"`
	OpenIssuesCount     int                       `json:"open_issues_count"`
	Owner               NullableSimpleUser        `json:"owner"`
	Permissions         TeamRepositoryPermissions `json:"permissions"`
	Private             bool                      `json:"private"`
	PullsURL            string                    `json:"pulls_url"`
	PushedAt            time.Time                 `json:"pushed_at"`
	ReleasesURL         string                    `json:"releases_url"`
	SSHURL              string                    `json:"ssh_url"`
	Size                int                       `json:"size"`
	StargazersCount     int                       `json:"stargazers_count"`
	StargazersURL       string                    `json:"stargazers_url"`
	StatusesURL         string                    `json:"statuses_url"`
	SubscribersCount    int                       `json:"subscribers_count"`
	SubscribersURL      string                    `json:"subscribers_url"`
	SubscriptionURL     string                    `json:"subscription_url"`
	SvnURL              string                    `json:"svn_url"`
	TagsURL             string                    `json:"tags_url"`
	TeamsURL            string                    `json:"teams_url"`
	TempCloneToken      string                    `json:"temp_clone_token"`
	TemplateRepository  NullableRepository        `json:"template_repository"`
	Topics              []string                  `json:"topics"`
	TreesURL            string                    `json:"trees_url"`
	URL                 string                    `json:"url"`
	UpdatedAt           time.Time                 `json:"updated_at"`
	Visibility          string                    `json:"visibility"`
	Watchers            int                       `json:"watchers"`
	WatchersCount       int                       `json:"watchers_count"`
}

func (*TeamRepository) teamsCheckPermissionsForRepoInOrgResponse()  {}
func (*TeamRepository) teamsCheckPermissionsForRepoLegacyResponse() {}

type TeamRepositoryPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type TeamSimple struct {
	Description     string `json:"description"`
	HTMLURL         string `json:"html_url"`
	ID              int    `json:"id"`
	LdapDn          string `json:"ldap_dn"`
	MembersURL      string `json:"members_url"`
	Name            string `json:"name"`
	NodeID          string `json:"node_id"`
	Permission      string `json:"permission"`
	Privacy         string `json:"privacy"`
	RepositoriesURL string `json:"repositories_url"`
	Slug            string `json:"slug"`
	URL             string `json:"url"`
}

type TeamsAddMemberLegacyNoContent struct{}

func (*TeamsAddMemberLegacyNoContent) teamsAddMemberLegacyResponse() {}

type TeamsAddMemberLegacyNotFound struct{}

func (*TeamsAddMemberLegacyNotFound) teamsAddMemberLegacyResponse() {}

type TeamsAddMemberLegacyUnprocessableEntity struct{}

func (*TeamsAddMemberLegacyUnprocessableEntity) teamsAddMemberLegacyResponse() {}

type TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest struct {
	Role string `json:"role"`
}

type TeamsAddOrUpdateMembershipForUserInOrgForbidden struct{}

func (*TeamsAddOrUpdateMembershipForUserInOrgForbidden) teamsAddOrUpdateMembershipForUserInOrgResponse() {
}

type TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity struct{}

func (*TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity) teamsAddOrUpdateMembershipForUserInOrgResponse() {
}

type TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest struct {
	Role string `json:"role"`
}

type TeamsAddOrUpdateMembershipForUserLegacyForbidden struct{}

func (*TeamsAddOrUpdateMembershipForUserLegacyForbidden) teamsAddOrUpdateMembershipForUserLegacyResponse() {
}

type TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity struct{}

func (*TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity) teamsAddOrUpdateMembershipForUserLegacyResponse() {
}

type TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest struct {
	Permission string `json:"permission"`
}

type TeamsAddOrUpdateProjectPermissionsInOrgForbidden struct {
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
}

func (*TeamsAddOrUpdateProjectPermissionsInOrgForbidden) teamsAddOrUpdateProjectPermissionsInOrgResponse() {
}

type TeamsAddOrUpdateProjectPermissionsInOrgNoContent struct{}

func (*TeamsAddOrUpdateProjectPermissionsInOrgNoContent) teamsAddOrUpdateProjectPermissionsInOrgResponse() {
}

type TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest struct {
	Permission string `json:"permission"`
}

type TeamsAddOrUpdateProjectPermissionsLegacyForbidden struct {
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
}

func (*TeamsAddOrUpdateProjectPermissionsLegacyForbidden) teamsAddOrUpdateProjectPermissionsLegacyResponse() {
}

type TeamsAddOrUpdateProjectPermissionsLegacyNoContent struct{}

func (*TeamsAddOrUpdateProjectPermissionsLegacyNoContent) teamsAddOrUpdateProjectPermissionsLegacyResponse() {
}

type TeamsAddOrUpdateRepoPermissionsInOrg struct{}

type TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest struct {
	Permission string `json:"permission"`
}

type TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest struct {
	Permission string `json:"permission"`
}

type TeamsAddOrUpdateRepoPermissionsLegacyNoContent struct{}

func (*TeamsAddOrUpdateRepoPermissionsLegacyNoContent) teamsAddOrUpdateRepoPermissionsLegacyResponse() {
}

type TeamsCheckPermissionsForProjectInOrgNotFound struct{}

func (*TeamsCheckPermissionsForProjectInOrgNotFound) teamsCheckPermissionsForProjectInOrgResponse() {}

type TeamsCheckPermissionsForProjectLegacyNotFound struct{}

func (*TeamsCheckPermissionsForProjectLegacyNotFound) teamsCheckPermissionsForProjectLegacyResponse() {
}

type TeamsCheckPermissionsForRepoInOrgNoContent struct{}

func (*TeamsCheckPermissionsForRepoInOrgNoContent) teamsCheckPermissionsForRepoInOrgResponse() {}

type TeamsCheckPermissionsForRepoInOrgNotFound struct{}

func (*TeamsCheckPermissionsForRepoInOrgNotFound) teamsCheckPermissionsForRepoInOrgResponse() {}

type TeamsCheckPermissionsForRepoLegacyNoContent struct{}

func (*TeamsCheckPermissionsForRepoLegacyNoContent) teamsCheckPermissionsForRepoLegacyResponse() {}

type TeamsCheckPermissionsForRepoLegacyNotFound struct{}

func (*TeamsCheckPermissionsForRepoLegacyNotFound) teamsCheckPermissionsForRepoLegacyResponse() {}

type TeamsCreateApplicationJSONRequest struct {
	Description  string   `json:"description"`
	Maintainers  []string `json:"maintainers"`
	Name         string   `json:"name"`
	ParentTeamID int      `json:"parent_team_id"`
	Permission   string   `json:"permission"`
	Privacy      string   `json:"privacy"`
	RepoNames    []string `json:"repo_names"`
}

type TeamsCreateDiscussionCommentInOrgApplicationJSONRequest struct {
	Body string `json:"body"`
}

type TeamsCreateDiscussionCommentLegacyApplicationJSONRequest struct {
	Body string `json:"body"`
}

type TeamsCreateDiscussionInOrgApplicationJSONRequest struct {
	Body    string `json:"body"`
	Private bool   `json:"private"`
	Title   string `json:"title"`
}

type TeamsCreateDiscussionLegacyApplicationJSONRequest struct {
	Body    string `json:"body"`
	Private bool   `json:"private"`
	Title   string `json:"title"`
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest struct {
	Groups []TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequestGroupsItem `json:"groups"`
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequestGroupsItem struct {
	GroupDescription string `json:"group_description"`
	GroupID          string `json:"group_id"`
	GroupName        string `json:"group_name"`
}

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest struct {
	Groups   []TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequestGroupsItem `json:"groups"`
	SyncedAt string                                                                         `json:"synced_at"`
}

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequestGroupsItem struct {
	Description      string `json:"description"`
	GroupDescription string `json:"group_description"`
	GroupID          string `json:"group_id"`
	GroupName        string `json:"group_name"`
	ID               string `json:"id"`
	Name             string `json:"name"`
}

type TeamsDeleteDiscussionCommentInOrg struct{}

type TeamsDeleteDiscussionCommentLegacy struct{}

type TeamsDeleteDiscussionInOrg struct{}

type TeamsDeleteDiscussionLegacy struct{}

type TeamsDeleteInOrg struct{}

type TeamsDeleteLegacyNoContent struct{}

func (*TeamsDeleteLegacyNoContent) teamsDeleteLegacyResponse() {}

type TeamsGetMemberLegacyNoContent struct{}

func (*TeamsGetMemberLegacyNoContent) teamsGetMemberLegacyResponse() {}

type TeamsGetMemberLegacyNotFound struct{}

func (*TeamsGetMemberLegacyNotFound) teamsGetMemberLegacyResponse() {}

type TeamsGetMembershipForUserInOrgNotFound struct{}

func (*TeamsGetMembershipForUserInOrgNotFound) teamsGetMembershipForUserInOrgResponse() {}

type TeamsListChildLegacyOK []Team

func (*TeamsListChildLegacyOK) teamsListChildLegacyResponse() {}

type TeamsListForAuthenticatedUserOK []TeamFull

func (*TeamsListForAuthenticatedUserOK) teamsListForAuthenticatedUserResponse() {}

type TeamsListMembersLegacyOK []SimpleUser

func (*TeamsListMembersLegacyOK) teamsListMembersLegacyResponse() {}

type TeamsListOK []Team

func (*TeamsListOK) teamsListResponse() {}

type TeamsListProjectsLegacyOK []TeamProject

func (*TeamsListProjectsLegacyOK) teamsListProjectsLegacyResponse() {}

type TeamsListReposLegacyOK []MinimalRepository

func (*TeamsListReposLegacyOK) teamsListReposLegacyResponse() {}

type TeamsRemoveMemberLegacyNoContent struct{}

func (*TeamsRemoveMemberLegacyNoContent) teamsRemoveMemberLegacyResponse() {}

type TeamsRemoveMemberLegacyNotFound struct{}

func (*TeamsRemoveMemberLegacyNotFound) teamsRemoveMemberLegacyResponse() {}

type TeamsRemoveMembershipForUserInOrgForbidden struct{}

func (*TeamsRemoveMembershipForUserInOrgForbidden) teamsRemoveMembershipForUserInOrgResponse() {}

type TeamsRemoveMembershipForUserInOrgNoContent struct{}

func (*TeamsRemoveMembershipForUserInOrgNoContent) teamsRemoveMembershipForUserInOrgResponse() {}

type TeamsRemoveMembershipForUserLegacyForbidden struct{}

func (*TeamsRemoveMembershipForUserLegacyForbidden) teamsRemoveMembershipForUserLegacyResponse() {}

type TeamsRemoveMembershipForUserLegacyNoContent struct{}

func (*TeamsRemoveMembershipForUserLegacyNoContent) teamsRemoveMembershipForUserLegacyResponse() {}

type TeamsRemoveProjectInOrg struct{}

type TeamsRemoveProjectLegacyNoContent struct{}

func (*TeamsRemoveProjectLegacyNoContent) teamsRemoveProjectLegacyResponse() {}

type TeamsRemoveRepoInOrg struct{}

type TeamsRemoveRepoLegacy struct{}

type TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest struct {
	Body string `json:"body"`
}

type TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest struct {
	Body string `json:"body"`
}

type TeamsUpdateDiscussionInOrgApplicationJSONRequest struct {
	Body  string `json:"body"`
	Title string `json:"title"`
}

type TeamsUpdateDiscussionLegacyApplicationJSONRequest struct {
	Body  string `json:"body"`
	Title string `json:"title"`
}

type TeamsUpdateInOrgApplicationJSONRequest struct {
	Description  string `json:"description"`
	Name         string `json:"name"`
	ParentTeamID int    `json:"parent_team_id"`
	Permission   string `json:"permission"`
	Privacy      string `json:"privacy"`
}

type TeamsUpdateLegacyApplicationJSONRequest struct {
	Description  string `json:"description"`
	Name         string `json:"name"`
	ParentTeamID int    `json:"parent_team_id"`
	Permission   string `json:"permission"`
	Privacy      string `json:"privacy"`
}

type Thread struct {
	ID              string            `json:"id"`
	LastReadAt      string            `json:"last_read_at"`
	Reason          string            `json:"reason"`
	Repository      MinimalRepository `json:"repository"`
	Subject         ThreadSubject     `json:"subject"`
	SubscriptionURL string            `json:"subscription_url"`
	URL             string            `json:"url"`
	Unread          bool              `json:"unread"`
	UpdatedAt       string            `json:"updated_at"`
}

func (*Thread) activityGetThreadResponse() {}

type ThreadSubject struct {
	LatestCommentURL string `json:"latest_comment_url"`
	Title            string `json:"title"`
	Type             string `json:"type"`
	URL              string `json:"url"`
}

type ThreadSubscription struct {
	CreatedAt     time.Time `json:"created_at"`
	Ignored       bool      `json:"ignored"`
	Reason        string    `json:"reason"`
	RepositoryURL string    `json:"repository_url"`
	Subscribed    bool      `json:"subscribed"`
	ThreadURL     string    `json:"thread_url"`
	URL           string    `json:"url"`
}

func (*ThreadSubscription) activityGetThreadSubscriptionForAuthenticatedUserResponse() {}
func (*ThreadSubscription) activitySetThreadSubscriptionResponse()                     {}

type Topic struct {
	Names []string `json:"names"`
}

func (*Topic) reposGetAllTopicsResponse()     {}
func (*Topic) reposReplaceAllTopicsResponse() {}

type TopicSearchResultItem struct {
	Aliases          []TopicSearchResultItemAliasesItem `json:"aliases"`
	CreatedAt        time.Time                          `json:"created_at"`
	CreatedBy        string                             `json:"created_by"`
	Curated          bool                               `json:"curated"`
	Description      string                             `json:"description"`
	DisplayName      string                             `json:"display_name"`
	Featured         bool                               `json:"featured"`
	LogoURL          string                             `json:"logo_url"`
	Name             string                             `json:"name"`
	Related          []TopicSearchResultItemRelatedItem `json:"related"`
	Released         string                             `json:"released"`
	RepositoryCount  int                                `json:"repository_count"`
	Score            float                              `json:"score"`
	ShortDescription string                             `json:"short_description"`
	TextMatches      []SearchResultTextMatchesItem      `json:"text_matches"`
	UpdatedAt        time.Time                          `json:"updated_at"`
}

type TopicSearchResultItemAliasesItem struct {
	TopicRelation TopicSearchResultItemAliasesItemTopicRelation `json:"topic_relation"`
}

type TopicSearchResultItemAliasesItemTopicRelation struct {
	ID           int    `json:"id"`
	Name         string `json:"name"`
	RelationType string `json:"relation_type"`
	TopicID      int    `json:"topic_id"`
}

type TopicSearchResultItemRelatedItem struct {
	TopicRelation TopicSearchResultItemRelatedItemTopicRelation `json:"topic_relation"`
}

type TopicSearchResultItemRelatedItemTopicRelation struct {
	ID           int    `json:"id"`
	Name         string `json:"name"`
	RelationType string `json:"relation_type"`
	TopicID      int    `json:"topic_id"`
}

type Traffic struct {
	Count     int       `json:"count"`
	Timestamp time.Time `json:"timestamp"`
	Uniques   int       `json:"uniques"`
}

type UserMarketplacePurchase struct {
	Account         MarketplaceAccount     `json:"account"`
	BillingCycle    string                 `json:"billing_cycle"`
	FreeTrialEndsOn time.Time              `json:"free_trial_ends_on"`
	NextBillingDate time.Time              `json:"next_billing_date"`
	OnFreeTrial     bool                   `json:"on_free_trial"`
	Plan            MarketplaceListingPlan `json:"plan"`
	UnitCount       int                    `json:"unit_count"`
	UpdatedAt       time.Time              `json:"updated_at"`
}

type UserSearchResultItem struct {
	AvatarURL         string                        `json:"avatar_url"`
	Bio               string                        `json:"bio"`
	Blog              string                        `json:"blog"`
	Company           string                        `json:"company"`
	CreatedAt         time.Time                     `json:"created_at"`
	Email             string                        `json:"email"`
	EventsURL         string                        `json:"events_url"`
	Followers         int                           `json:"followers"`
	FollowersURL      string                        `json:"followers_url"`
	Following         int                           `json:"following"`
	FollowingURL      string                        `json:"following_url"`
	GistsURL          string                        `json:"gists_url"`
	GravatarID        string                        `json:"gravatar_id"`
	HTMLURL           string                        `json:"html_url"`
	Hireable          bool                          `json:"hireable"`
	ID                int                           `json:"id"`
	Location          string                        `json:"location"`
	Login             string                        `json:"login"`
	Name              string                        `json:"name"`
	NodeID            string                        `json:"node_id"`
	OrganizationsURL  string                        `json:"organizations_url"`
	PublicGists       int                           `json:"public_gists"`
	PublicRepos       int                           `json:"public_repos"`
	ReceivedEventsURL string                        `json:"received_events_url"`
	ReposURL          string                        `json:"repos_url"`
	Score             float                         `json:"score"`
	SiteAdmin         bool                          `json:"site_admin"`
	StarredURL        string                        `json:"starred_url"`
	SubscriptionsURL  string                        `json:"subscriptions_url"`
	SuspendedAt       time.Time                     `json:"suspended_at"`
	TextMatches       []SearchResultTextMatchesItem `json:"text_matches"`
	Type              string                        `json:"type"`
	URL               string                        `json:"url"`
	UpdatedAt         time.Time                     `json:"updated_at"`
}

type UsersAddEmailForAuthenticatedCreated []Email

func (*UsersAddEmailForAuthenticatedCreated) usersAddEmailForAuthenticatedResponse() {}

type UsersBlockNoContent struct{}

func (*UsersBlockNoContent) usersBlockResponse() {}

type UsersCheckBlockedNoContent struct{}

func (*UsersCheckBlockedNoContent) usersCheckBlockedResponse() {}

type UsersCheckFollowingForUserNoContent struct{}

func (*UsersCheckFollowingForUserNoContent) usersCheckFollowingForUserResponse() {}

type UsersCheckFollowingForUserNotFound struct{}

func (*UsersCheckFollowingForUserNotFound) usersCheckFollowingForUserResponse() {}

type UsersCheckPersonIsFollowedByAuthenticatedNoContent struct{}

func (*UsersCheckPersonIsFollowedByAuthenticatedNoContent) usersCheckPersonIsFollowedByAuthenticatedResponse() {
}

type UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest struct {
	ArmoredPublicKey string `json:"armored_public_key"`
}

type UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest struct {
	Key   string `json:"key"`
	Title string `json:"title"`
}

type UsersDeleteEmailForAuthenticatedNoContent struct{}

func (*UsersDeleteEmailForAuthenticatedNoContent) usersDeleteEmailForAuthenticatedResponse() {}

type UsersDeleteGpgKeyForAuthenticatedNoContent struct{}

func (*UsersDeleteGpgKeyForAuthenticatedNoContent) usersDeleteGpgKeyForAuthenticatedResponse() {}

type UsersDeletePublicSSHKeyForAuthenticatedNoContent struct{}

func (*UsersDeletePublicSSHKeyForAuthenticatedNoContent) usersDeletePublicSSHKeyForAuthenticatedResponse() {
}

type UsersFollowNoContent struct{}

func (*UsersFollowNoContent) usersFollowResponse() {}

type UsersListBlockedByAuthenticatedOK []SimpleUser

func (*UsersListBlockedByAuthenticatedOK) usersListBlockedByAuthenticatedResponse() {}

type UsersListEmailsForAuthenticatedOK []Email

func (*UsersListEmailsForAuthenticatedOK) usersListEmailsForAuthenticatedResponse() {}

type UsersListFollowedByAuthenticatedOK []SimpleUser

func (*UsersListFollowedByAuthenticatedOK) usersListFollowedByAuthenticatedResponse() {}

type UsersListFollowersForAuthenticatedUserOK []SimpleUser

func (*UsersListFollowersForAuthenticatedUserOK) usersListFollowersForAuthenticatedUserResponse() {}

type UsersListGpgKeysForAuthenticatedOK []GpgKey

func (*UsersListGpgKeysForAuthenticatedOK) usersListGpgKeysForAuthenticatedResponse() {}

type UsersListOK []SimpleUser

func (*UsersListOK) usersListResponse() {}

type UsersListPublicEmailsForAuthenticatedOK []Email

func (*UsersListPublicEmailsForAuthenticatedOK) usersListPublicEmailsForAuthenticatedResponse() {}

type UsersListPublicSSHKeysForAuthenticatedOK []Key

func (*UsersListPublicSSHKeysForAuthenticatedOK) usersListPublicSSHKeysForAuthenticatedResponse() {}

type UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest struct {
	Visibility string `json:"visibility"`
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedOK []Email

func (*UsersSetPrimaryEmailVisibilityForAuthenticatedOK) usersSetPrimaryEmailVisibilityForAuthenticatedResponse() {
}

type UsersUnblockNoContent struct{}

func (*UsersUnblockNoContent) usersUnblockResponse() {}

type UsersUnfollowNoContent struct{}

func (*UsersUnfollowNoContent) usersUnfollowResponse() {}

type UsersUpdateAuthenticatedApplicationJSONRequest struct {
	Bio             string `json:"bio"`
	Blog            string `json:"blog"`
	Company         string `json:"company"`
	Email           string `json:"email"`
	Hireable        bool   `json:"hireable"`
	Location        string `json:"location"`
	Name            string `json:"name"`
	TwitterUsername string `json:"twitter_username"`
}

type ValidationError struct {
}

type ValidationErrorErrorsItem struct {
	Resource string `json:"resource"`
	Field    string `json:"field"`
	Message  string `json:"message"`
	Code     string `json:"code"`
	Index    int    `json:"index"`
}

type ValidationErrorSimple struct {
	DocumentationURL string   `json:"documentation_url"`
	Errors           []string `json:"errors"`
	Message          string   `json:"message"`
}

func (*ValidationErrorSimple) appsCreateFromManifestResponse()             {}
func (*ValidationErrorSimple) projectsCreateColumnResponse()               {}
func (*ValidationErrorSimple) projectsCreateForAuthenticatedUserResponse() {}
func (*ValidationErrorSimple) projectsCreateForOrgResponse()               {}
func (*ValidationErrorSimple) projectsCreateForRepoResponse()              {}
func (*ValidationErrorSimple) projectsListForOrgResponse()                 {}
func (*ValidationErrorSimple) projectsListForRepoResponse()                {}
func (*ValidationErrorSimple) projectsMoveColumnResponse()                 {}
func (*ValidationErrorSimple) projectsUpdateCardResponse()                 {}
func (*ValidationErrorSimple) projectsUpdateResponse()                     {}
func (*ValidationErrorSimple) pullsCreateReviewResponse()                  {}
func (*ValidationErrorSimple) pullsDeletePendingReviewResponse()           {}
func (*ValidationErrorSimple) pullsDismissReviewResponse()                 {}
func (*ValidationErrorSimple) pullsSubmitReviewResponse()                  {}
func (*ValidationErrorSimple) pullsUpdateReviewResponse()                  {}
func (*ValidationErrorSimple) reposDeleteDeploymentResponse()              {}
func (*ValidationErrorSimple) reposReplaceAllTopicsResponse()              {}
func (*ValidationErrorSimple) reposUpdateBranchProtectionResponse()        {}

type Verification struct {
	Payload   string `json:"payload"`
	Reason    string `json:"reason"`
	Signature string `json:"signature"`
	Verified  bool   `json:"verified"`
}

type ViewTraffic struct {
	Count   int       `json:"count"`
	Uniques int       `json:"uniques"`
	Views   []Traffic `json:"views"`
}

func (*ViewTraffic) reposGetViewsResponse() {}

type WebhookConfig struct {
	URL         string `json:"url"`
	ContentType string `json:"content_type"`
	Secret      string `json:"secret"`
}

type Workflow struct {
	BadgeURL  string    `json:"badge_url"`
	CreatedAt time.Time `json:"created_at"`
	DeletedAt time.Time `json:"deleted_at"`
	HTMLURL   string    `json:"html_url"`
	ID        int       `json:"id"`
	Name      string    `json:"name"`
	NodeID    string    `json:"node_id"`
	Path      string    `json:"path"`
	State     string    `json:"state"`
	URL       string    `json:"url"`
	UpdatedAt time.Time `json:"updated_at"`
}

type WorkflowRun struct {
	ArtifactsURL       string               `json:"artifacts_url"`
	CancelURL          string               `json:"cancel_url"`
	CheckSuiteID       int                  `json:"check_suite_id"`
	CheckSuiteNodeID   string               `json:"check_suite_node_id"`
	CheckSuiteURL      string               `json:"check_suite_url"`
	Conclusion         string               `json:"conclusion"`
	CreatedAt          time.Time            `json:"created_at"`
	Event              string               `json:"event"`
	HTMLURL            string               `json:"html_url"`
	HeadBranch         string               `json:"head_branch"`
	HeadCommit         NullableSimpleCommit `json:"head_commit"`
	HeadRepository     MinimalRepository    `json:"head_repository"`
	HeadRepositoryID   int                  `json:"head_repository_id"`
	HeadSha            string               `json:"head_sha"`
	ID                 int                  `json:"id"`
	JobsURL            string               `json:"jobs_url"`
	LogsURL            string               `json:"logs_url"`
	Name               string               `json:"name"`
	NodeID             string               `json:"node_id"`
	PreviousAttemptURL string               `json:"previous_attempt_url"`
	PullRequests       []PullRequestMinimal `json:"pull_requests"`
	Repository         MinimalRepository    `json:"repository"`
	RerunURL           string               `json:"rerun_url"`
	RunAttempt         int                  `json:"run_attempt"`
	RunNumber          int                  `json:"run_number"`
	Status             string               `json:"status"`
	URL                string               `json:"url"`
	UpdatedAt          time.Time            `json:"updated_at"`
	WorkflowID         int                  `json:"workflow_id"`
	WorkflowURL        string               `json:"workflow_url"`
}

type WorkflowRunUsage struct {
	Billable      WorkflowRunUsageBillable `json:"billable"`
	RunDurationMs int                      `json:"run_duration_ms"`
}

type WorkflowRunUsageBillable struct {
	MACOS   WorkflowRunUsageBillableMACOS   `json:"MACOS"`
	UBUNTU  WorkflowRunUsageBillableUBUNTU  `json:"UBUNTU"`
	WINDOWS WorkflowRunUsageBillableWINDOWS `json:"WINDOWS"`
}

type WorkflowRunUsageBillableMACOS struct {
	Jobs    int `json:"jobs"`
	TotalMs int `json:"total_ms"`
}

type WorkflowRunUsageBillableUBUNTU struct {
	Jobs    int `json:"jobs"`
	TotalMs int `json:"total_ms"`
}

type WorkflowRunUsageBillableWINDOWS struct {
	Jobs    int `json:"jobs"`
	TotalMs int `json:"total_ms"`
}

type accepted struct{}

func (*accepted) appsRedeliverWebhookDeliveryResponse()  {}
func (*accepted) orgsRedeliverWebhookDeliveryResponse()  {}
func (*accepted) reposEnableLfsForRepoResponse()         {}
func (*accepted) reposGetCodeFrequencyStatsResponse()    {}
func (*accepted) reposGetCommitActivityStatsResponse()   {}
func (*accepted) reposGetContributorsStatsResponse()     {}
func (*accepted) reposRedeliverWebhookDeliveryResponse() {}
func (*accepted) usersGetByUsernameResponse()            {}

type forbidden_gist struct {
	Block            forbidden_gistBlock `json:"block"`
	DocumentationURL string              `json:"documentation_url"`
	Message          string              `json:"message"`
}

func (*forbidden_gist) gistsGetCommentResponse() {}
func (*forbidden_gist) gistsGetResponse()        {}

type forbidden_gistBlock struct {
	CreatedAt string `json:"created_at"`
	HTMLURL   string `json:"html_url"`
	Reason    string `json:"reason"`
}

type found struct{}

func (*found) reposGetContentResponse()      {}
func (*found) reposGetReleaseAssetResponse() {}

type no_content struct{}

func (*no_content) reposGetCodeFrequencyStatsResponse()  {}
func (*no_content) reposGetCommitActivityStatsResponse() {}
func (*no_content) reposGetContributorsStatsResponse()   {}
func (*no_content) reposGetPunchCardStatsResponse()      {}

type not_modified struct{}

func (*not_modified) activityCheckRepoIsStarredByAuthenticatedUserResponse()     {}
func (*not_modified) activityDeleteThreadSubscriptionResponse()                  {}
func (*not_modified) activityGetThreadResponse()                                 {}
func (*not_modified) activityGetThreadSubscriptionForAuthenticatedUserResponse() {}
func (*not_modified) activityListNotificationsForAuthenticatedUserResponse()     {}
func (*not_modified) activityListPublicEventsForRepoNetworkResponse()            {}
func (*not_modified) activityListPublicEventsResponse()                          {}
func (*not_modified) activityListReposStarredByAuthenticatedUserResponse()       {}
func (*not_modified) activityListWatchedReposForAuthenticatedUserResponse()      {}
func (*not_modified) activityMarkNotificationsAsReadResponse()                   {}
func (*not_modified) activityMarkThreadAsReadResponse()                          {}
func (*not_modified) activitySetThreadSubscriptionResponse()                     {}
func (*not_modified) activityStarRepoForAuthenticatedUserResponse()              {}
func (*not_modified) activityUnstarRepoForAuthenticatedUserResponse()            {}
func (*not_modified) appsAddRepoToInstallationResponse()                         {}
func (*not_modified) appsCreateContentAttachmentResponse()                       {}
func (*not_modified) appsListInstallationReposForAuthenticatedUserResponse()     {}
func (*not_modified) appsListInstallationsForAuthenticatedUserResponse()         {}
func (*not_modified) appsListReposAccessibleToInstallationResponse()             {}
func (*not_modified) appsListSubscriptionsForAuthenticatedUserResponse()         {}
func (*not_modified) appsListSubscriptionsForAuthenticatedUserStubbedResponse()  {}
func (*not_modified) appsRemoveRepoFromInstallationResponse()                    {}
func (*not_modified) codesOfConductGetAllCodesOfConductResponse()                {}
func (*not_modified) codesOfConductGetConductCodeResponse()                      {}
func (*not_modified) emojisGetResponse()                                         {}
func (*not_modified) gistsCheckIsStarredResponse()                               {}
func (*not_modified) gistsCreateCommentResponse()                                {}
func (*not_modified) gistsCreateResponse()                                       {}
func (*not_modified) gistsDeleteCommentResponse()                                {}
func (*not_modified) gistsDeleteResponse()                                       {}
func (*not_modified) gistsForkResponse()                                         {}
func (*not_modified) gistsGetCommentResponse()                                   {}
func (*not_modified) gistsGetResponse()                                          {}
func (*not_modified) gistsListCommentsResponse()                                 {}
func (*not_modified) gistsListCommitsResponse()                                  {}
func (*not_modified) gistsListForksResponse()                                    {}
func (*not_modified) gistsListPublicResponse()                                   {}
func (*not_modified) gistsListResponse()                                         {}
func (*not_modified) gistsListStarredResponse()                                  {}
func (*not_modified) gistsStarResponse()                                         {}
func (*not_modified) gistsUnstarResponse()                                       {}
func (*not_modified) gitignoreGetAllTemplatesResponse()                          {}
func (*not_modified) gitignoreGetTemplateResponse()                              {}
func (*not_modified) issuesGetResponse()                                         {}
func (*not_modified) issuesListForAuthenticatedUserResponse()                    {}
func (*not_modified) issuesListResponse()                                        {}
func (*not_modified) licensesGetAllCommonlyUsedResponse()                        {}
func (*not_modified) licensesGetResponse()                                       {}
func (*not_modified) markdownRenderRawResponse()                                 {}
func (*not_modified) markdownRenderResponse()                                    {}
func (*not_modified) metaGetResponse()                                           {}
func (*not_modified) migrationsDeleteArchiveForAuthenticatedUserResponse()       {}
func (*not_modified) migrationsGetArchiveForAuthenticatedUserResponse()          {}
func (*not_modified) migrationsGetStatusForAuthenticatedUserResponse()           {}
func (*not_modified) migrationsListForAuthenticatedUserResponse()                {}
func (*not_modified) migrationsStartForAuthenticatedUserResponse()               {}
func (*not_modified) migrationsUnlockRepoForAuthenticatedUserResponse()          {}
func (*not_modified) oAuthAuthorizationsCreateAuthorizationResponse()            {}
func (*not_modified) oAuthAuthorizationsDeleteAuthorizationResponse()            {}
func (*not_modified) oAuthAuthorizationsDeleteGrantResponse()                    {}
func (*not_modified) oAuthAuthorizationsGetAuthorizationResponse()               {}
func (*not_modified) oAuthAuthorizationsGetGrantResponse()                       {}
func (*not_modified) oAuthAuthorizationsGetOrCreateAuthorizationForAppResponse() {}
func (*not_modified) oAuthAuthorizationsListAuthorizationsResponse()             {}
func (*not_modified) oAuthAuthorizationsListGrantsResponse()                     {}
func (*not_modified) orgsListForAuthenticatedUserResponse()                      {}
func (*not_modified) orgsListMembershipsForAuthenticatedUserResponse()           {}
func (*not_modified) orgsListResponse()                                          {}
func (*not_modified) projectsAddCollaboratorResponse()                           {}
func (*not_modified) projectsCreateCardResponse()                                {}
func (*not_modified) projectsCreateColumnResponse()                              {}
func (*not_modified) projectsCreateForAuthenticatedUserResponse()                {}
func (*not_modified) projectsDeleteCardResponse()                                {}
func (*not_modified) projectsDeleteColumnResponse()                              {}
func (*not_modified) projectsDeleteResponse()                                    {}
func (*not_modified) projectsGetCardResponse()                                   {}
func (*not_modified) projectsGetColumnResponse()                                 {}
func (*not_modified) projectsGetPermissionForUserResponse()                      {}
func (*not_modified) projectsGetResponse()                                       {}
func (*not_modified) projectsListCardsResponse()                                 {}
func (*not_modified) projectsListCollaboratorsResponse()                         {}
func (*not_modified) projectsListColumnsResponse()                               {}
func (*not_modified) projectsMoveCardResponse()                                  {}
func (*not_modified) projectsMoveColumnResponse()                                {}
func (*not_modified) projectsRemoveCollaboratorResponse()                        {}
func (*not_modified) projectsUpdateCardResponse()                                {}
func (*not_modified) projectsUpdateColumnResponse()                              {}
func (*not_modified) projectsUpdateResponse()                                    {}
func (*not_modified) pullsGetResponse()                                          {}
func (*not_modified) pullsListResponse()                                         {}
func (*not_modified) rateLimitGetResponse()                                      {}
func (*not_modified) reactionsDeleteLegacyResponse()                             {}
func (*not_modified) reposAcceptInvitationResponse()                             {}
func (*not_modified) reposCreateForAuthenticatedUserResponse()                   {}
func (*not_modified) reposDeclineInvitationResponse()                            {}
func (*not_modified) reposListForAuthenticatedUserResponse()                     {}
func (*not_modified) reposListInvitationsForAuthenticatedUserResponse()          {}
func (*not_modified) reposListPublicResponse()                                   {}
func (*not_modified) scimDeleteUserFromOrgResponse()                             {}
func (*not_modified) scimGetProvisioningInformationForUserResponse()             {}
func (*not_modified) scimListProvisionedIdentitiesResponse()                     {}
func (*not_modified) scimProvisionAndInviteUserResponse()                        {}
func (*not_modified) scimSetInformationForProvisionedUserResponse()              {}
func (*not_modified) scimUpdateAttributeForUserResponse()                        {}
func (*not_modified) searchCodeResponse()                                        {}
func (*not_modified) searchCommitsResponse()                                     {}
func (*not_modified) searchIssuesAndPullRequestsResponse()                       {}
func (*not_modified) searchLabelsResponse()                                      {}
func (*not_modified) searchReposResponse()                                       {}
func (*not_modified) searchTopicsResponse()                                      {}
func (*not_modified) searchUsersResponse()                                       {}
func (*not_modified) teamsListForAuthenticatedUserResponse()                     {}
func (*not_modified) usersAddEmailForAuthenticatedResponse()                     {}
func (*not_modified) usersBlockResponse()                                        {}
func (*not_modified) usersCheckBlockedResponse()                                 {}
func (*not_modified) usersCheckPersonIsFollowedByAuthenticatedResponse()         {}
func (*not_modified) usersCreateGpgKeyForAuthenticatedResponse()                 {}
func (*not_modified) usersCreatePublicSSHKeyForAuthenticatedResponse()           {}
func (*not_modified) usersDeleteEmailForAuthenticatedResponse()                  {}
func (*not_modified) usersDeleteGpgKeyForAuthenticatedResponse()                 {}
func (*not_modified) usersDeletePublicSSHKeyForAuthenticatedResponse()           {}
func (*not_modified) usersFollowResponse()                                       {}
func (*not_modified) usersGetAuthenticatedResponse()                             {}
func (*not_modified) usersGetGpgKeyForAuthenticatedResponse()                    {}
func (*not_modified) usersGetPublicSSHKeyForAuthenticatedResponse()              {}
func (*not_modified) usersListBlockedByAuthenticatedResponse()                   {}
func (*not_modified) usersListEmailsForAuthenticatedResponse()                   {}
func (*not_modified) usersListFollowedByAuthenticatedResponse()                  {}
func (*not_modified) usersListFollowersForAuthenticatedUserResponse()            {}
func (*not_modified) usersListGpgKeysForAuthenticatedResponse()                  {}
func (*not_modified) usersListPublicEmailsForAuthenticatedResponse()             {}
func (*not_modified) usersListPublicSSHKeysForAuthenticatedResponse()            {}
func (*not_modified) usersListResponse()                                         {}
func (*not_modified) usersSetPrimaryEmailVisibilityForAuthenticatedResponse()    {}
func (*not_modified) usersUnblockResponse()                                      {}
func (*not_modified) usersUnfollowResponse()                                     {}
func (*not_modified) usersUpdateAuthenticatedResponse()                          {}

type preview_header_missing struct {
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
}

func (*preview_header_missing) appsCreateContentAttachmentResponse()                {}
func (*preview_header_missing) appsCreateInstallationAccessTokenResponse()          {}
func (*preview_header_missing) appsGetBySlugResponse()                              {}
func (*preview_header_missing) appsGetInstallationResponse()                        {}
func (*preview_header_missing) appsListInstallationsForAuthenticatedUserResponse()  {}
func (*preview_header_missing) orgsListBlockedUsersResponse()                       {}
func (*preview_header_missing) orgsUpdateResponse()                                 {}
func (*preview_header_missing) projectsCreateForAuthenticatedUserResponse()         {}
func (*preview_header_missing) reactionsCreateForCommitCommentResponse()            {}
func (*preview_header_missing) reactionsCreateForIssueCommentResponse()             {}
func (*preview_header_missing) reactionsCreateForIssueResponse()                    {}
func (*preview_header_missing) reactionsCreateForPullRequestReviewCommentResponse() {}
func (*preview_header_missing) reactionsCreateForReleaseResponse()                  {}
func (*preview_header_missing) reactionsDeleteLegacyResponse()                      {}
func (*preview_header_missing) reactionsListForCommitCommentResponse()              {}
func (*preview_header_missing) reactionsListForIssueCommentResponse()               {}
func (*preview_header_missing) reactionsListForIssueResponse()                      {}
func (*preview_header_missing) reactionsListForPullRequestReviewCommentResponse()   {}
func (*preview_header_missing) reposCreatePagesSiteResponse()                       {}
func (*preview_header_missing) reposDeletePagesSiteResponse()                       {}
func (*preview_header_missing) reposGetAllTopicsResponse()                          {}
func (*preview_header_missing) reposGetBranchResponse()                             {}
func (*preview_header_missing) reposGetDeploymentStatusResponse()                   {}
func (*preview_header_missing) reposGetReleaseAssetResponse()                       {}
func (*preview_header_missing) reposReplaceAllTopicsResponse()                      {}
func (*preview_header_missing) searchCommitsResponse()                              {}
func (*preview_header_missing) searchTopicsResponse()                               {}
func (*preview_header_missing) teamsRemoveProjectLegacyResponse()                   {}
func (*preview_header_missing) usersListBlockedByAuthenticatedResponse()            {}

type service_unavailable struct {
	Code             string `json:"code"`
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
}

func (*service_unavailable) activityListPublicEventsResponse()        {}
func (*service_unavailable) codeScanningDeleteAnalysisResponse()      {}
func (*service_unavailable) codeScanningGetAlertResponse()            {}
func (*service_unavailable) codeScanningGetAnalysisResponse()         {}
func (*service_unavailable) codeScanningGetSarifResponse()            {}
func (*service_unavailable) codeScanningListAlertInstancesResponse()  {}
func (*service_unavailable) codeScanningListAlertsForRepoResponse()   {}
func (*service_unavailable) codeScanningListRecentAnalysesResponse()  {}
func (*service_unavailable) codeScanningUpdateAlertResponse()         {}
func (*service_unavailable) codeScanningUploadSarifResponse()         {}
func (*service_unavailable) issuesCreateResponse()                    {}
func (*service_unavailable) issuesUpdateResponse()                    {}
func (*service_unavailable) reposDeleteFileResponse()                 {}
func (*service_unavailable) searchCodeResponse()                      {}
func (*service_unavailable) searchIssuesAndPullRequestsResponse()     {}
func (*service_unavailable) searchReposResponse()                     {}
func (*service_unavailable) searchUsersResponse()                     {}
func (*service_unavailable) secretScanningGetAlertResponse()          {}
func (*service_unavailable) secretScanningListAlertsForOrgResponse()  {}
func (*service_unavailable) secretScanningListAlertsForRepoResponse() {}
func (*service_unavailable) secretScanningUpdateAlertResponse()       {}
