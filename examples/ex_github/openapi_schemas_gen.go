// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

type APIOverview struct {
	API                              *[]string                      `json:"api"`
	Actions                          *[]string                      `json:"actions"`
	Dependabot                       *[]string                      `json:"dependabot"`
	Git                              *[]string                      `json:"git"`
	Hooks                            *[]string                      `json:"hooks"`
	Importer                         *[]string                      `json:"importer"`
	Packages                         *[]string                      `json:"packages"`
	Pages                            *[]string                      `json:"pages"`
	SSHKeyFingerprints               *APIOverviewSSHKeyFingerprints `json:"ssh_key_fingerprints"`
	VerifiablePasswordAuthentication bool                           `json:"verifiable_password_authentication"`
	Web                              *[]string                      `json:"web"`
}

func (*APIOverview) metaGetResponse() {}

type APIOverviewSSHKeyFingerprints struct {
	SHA256DSA     *string `json:"SHA256_DSA"`
	SHA256ECDSA   *string `json:"SHA256_ECDSA"`
	SHA256ED25519 *string `json:"SHA256_ED25519"`
	SHA256RSA     *string `json:"SHA256_RSA"`
}

type Accepted struct{}

func (*Accepted) reposEnableLfsForRepoResponse()       {}
func (*Accepted) reposGetCodeFrequencyStatsResponse()  {}
func (*Accepted) reposGetCommitActivityStatsResponse() {}
func (*Accepted) reposGetContributorsStatsResponse()   {}

type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg struct{}

type ActionsAddSelectedRepoToOrgSecretConflict struct{}

func (*ActionsAddSelectedRepoToOrgSecretConflict) actionsAddSelectedRepoToOrgSecretResponse() {}

type ActionsAddSelectedRepoToOrgSecretNoContent struct{}

func (*ActionsAddSelectedRepoToOrgSecretNoContent) actionsAddSelectedRepoToOrgSecretResponse() {}

type ActionsAddSelfHostedRunnerToGroupForOrg struct{}

type ActionsApproveWorkflowRunApplicationJSONForbidden BasicError

func (*ActionsApproveWorkflowRunApplicationJSONForbidden) actionsApproveWorkflowRunResponse() {}

type ActionsApproveWorkflowRunApplicationJSONNotFound BasicError

func (*ActionsApproveWorkflowRunApplicationJSONNotFound) actionsApproveWorkflowRunResponse() {}

type ActionsBillingUsage struct {
	IncludedMinutes      int                                     `json:"included_minutes"`
	MinutesUsedBreakdown ActionsBillingUsageMinutesUsedBreakdown `json:"minutes_used_breakdown"`
	TotalMinutesUsed     int                                     `json:"total_minutes_used"`
	TotalPaidMinutesUsed int                                     `json:"total_paid_minutes_used"`
}

type ActionsBillingUsageMinutesUsedBreakdown struct {
	MACOS   *int `json:"MACOS"`
	UBUNTU  *int `json:"UBUNTU"`
	WINDOWS *int `json:"WINDOWS"`
}

type ActionsCancelWorkflowRun struct{}

type ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest struct {
	EncryptedValue string `json:"encrypted_value"`
	KeyID          string `json:"key_id"`
}

type ActionsCreateOrUpdateEnvironmentSecretNoContent struct{}

func (*ActionsCreateOrUpdateEnvironmentSecretNoContent) actionsCreateOrUpdateEnvironmentSecretResponse() {
}

type ActionsCreateOrUpdateOrgSecretApplicationJSONRequest struct {
	EncryptedValue        *string                                                        `json:"encrypted_value"`
	KeyID                 *string                                                        `json:"key_id"`
	SelectedRepositoryIds *[]string                                                      `json:"selected_repository_ids"`
	Visibility            ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibility `json:"visibility"`
}

type ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibility string

const (
	ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibilityAll      ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibility = "all"
	ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibilityPrivate  ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibility = "private"
	ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibilitySelected ActionsCreateOrUpdateOrgSecretApplicationJSONRequestVisibility = "selected"
)

type ActionsCreateOrUpdateOrgSecretNoContent struct{}

func (*ActionsCreateOrUpdateOrgSecretNoContent) actionsCreateOrUpdateOrgSecretResponse() {}

type ActionsCreateOrUpdateRepoSecretApplicationJSONRequest struct {
	EncryptedValue *string `json:"encrypted_value"`
	KeyID          *string `json:"key_id"`
}

type ActionsCreateOrUpdateRepoSecretCreated struct{}

func (*ActionsCreateOrUpdateRepoSecretCreated) actionsCreateOrUpdateRepoSecretResponse() {}

type ActionsCreateOrUpdateRepoSecretNoContent struct{}

func (*ActionsCreateOrUpdateRepoSecretNoContent) actionsCreateOrUpdateRepoSecretResponse() {}

type ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest struct {
	Name                  string                                                                    `json:"name"`
	Runners               *[]int                                                                    `json:"runners"`
	SelectedRepositoryIds *[]int                                                                    `json:"selected_repository_ids"`
	Visibility            *ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility `json:"visibility"`
}

type ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility string

const (
	ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibilitySelected ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility = "selected"
	ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibilityAll      ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility = "all"
	ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibilityPrivate  ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility = "private"
)

type ActionsDeleteArtifact struct{}

type ActionsDeleteEnvironmentSecret struct{}

type ActionsDeleteOrgSecret struct{}

type ActionsDeleteRepoSecret struct{}

type ActionsDeleteSelfHostedRunnerFromOrg struct{}

type ActionsDeleteSelfHostedRunnerFromRepo struct{}

type ActionsDeleteSelfHostedRunnerGroupFromOrg struct{}

type ActionsDeleteWorkflowRun struct{}

type ActionsDeleteWorkflowRunLogs struct{}

type ActionsDisableSelectedRepositoryGithubActionsOrganization struct{}

type ActionsDownloadArtifact struct{}

type ActionsDownloadJobLogsForWorkflowRun struct{}

type ActionsDownloadWorkflowRunLogs struct{}

type ActionsEnableSelectedRepositoryGithubActionsOrganization struct{}

type ActionsEnabled bool

type ActionsEnterprisePermissions struct {
	AllowedActions           *AllowedActions      `json:"allowed_actions"`
	EnabledOrganizations     EnabledOrganizations `json:"enabled_organizations"`
	SelectedActionsURL       *SelectedActionsURL  `json:"selected_actions_url"`
	SelectedOrganizationsURL *string              `json:"selected_organizations_url"`
}

type ActionsListArtifactsForRepo struct {
	Artifacts  []Artifact `json:"artifacts"`
	TotalCount int        `json:"total_count"`
}

type ActionsListEnvironmentSecrets struct {
	Secrets    []ActionsSecret `json:"secrets"`
	TotalCount int             `json:"total_count"`
}

type ActionsListOrgSecrets struct {
	Secrets    []OrganizationActionsSecret `json:"secrets"`
	TotalCount int                         `json:"total_count"`
}

type ActionsListRepoAccessToSelfHostedRunnerGroupInOrg struct {
	Repositories []MinimalRepository `json:"repositories"`
	TotalCount   float64             `json:"total_count"`
}

type ActionsListRepoSecrets struct {
	Secrets    []ActionsSecret `json:"secrets"`
	TotalCount int             `json:"total_count"`
}

type ActionsListRepoWorkflows struct {
	TotalCount int        `json:"total_count"`
	Workflows  []Workflow `json:"workflows"`
}

type ActionsListSelectedReposForOrgSecret struct {
	Repositories []MinimalRepository `json:"repositories"`
	TotalCount   int                 `json:"total_count"`
}

type ActionsListSelectedRepositoriesEnabledGithubActionsOrganization struct {
	Repositories []Repository `json:"repositories"`
	TotalCount   float64      `json:"total_count"`
}

type ActionsListSelfHostedRunnerGroupsForOrg struct {
	RunnerGroups []RunnerGroupsOrg `json:"runner_groups"`
	TotalCount   float64           `json:"total_count"`
}

type ActionsListSelfHostedRunnersForOrg struct {
	Runners    []Runner `json:"runners"`
	TotalCount int      `json:"total_count"`
}

type ActionsListSelfHostedRunnersForRepo struct {
	Runners    []Runner `json:"runners"`
	TotalCount int      `json:"total_count"`
}

type ActionsListSelfHostedRunnersInGroupForOrg struct {
	Runners    []Runner `json:"runners"`
	TotalCount float64  `json:"total_count"`
}

type ActionsListWorkflowRunArtifacts struct {
	Artifacts  []Artifact `json:"artifacts"`
	TotalCount int        `json:"total_count"`
}

type ActionsOrganizationPermissions struct {
	AllowedActions          *AllowedActions     `json:"allowed_actions"`
	EnabledRepositories     EnabledRepositories `json:"enabled_repositories"`
	SelectedActionsURL      *SelectedActionsURL `json:"selected_actions_url"`
	SelectedRepositoriesURL *string             `json:"selected_repositories_url"`
}

type ActionsPublicKey struct {
	CreatedAt *string `json:"created_at"`
	ID        *int    `json:"id"`
	Key       string  `json:"key"`
	KeyID     string  `json:"key_id"`
	Title     *string `json:"title"`
	URL       *string `json:"url"`
}

type ActionsReRunWorkflow struct{}

type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg struct{}

type ActionsRemoveSelectedRepoFromOrgSecretConflict struct{}

func (*ActionsRemoveSelectedRepoFromOrgSecretConflict) actionsRemoveSelectedRepoFromOrgSecretResponse() {
}

type ActionsRemoveSelectedRepoFromOrgSecretNoContent struct{}

func (*ActionsRemoveSelectedRepoFromOrgSecretNoContent) actionsRemoveSelectedRepoFromOrgSecretResponse() {
}

type ActionsRemoveSelfHostedRunnerFromGroupForOrg struct{}

type ActionsRepositoryPermissions struct {
	AllowedActions     *AllowedActions     `json:"allowed_actions"`
	Enabled            ActionsEnabled      `json:"enabled"`
	SelectedActionsURL *SelectedActionsURL `json:"selected_actions_url"`
}

type ActionsRetryWorkflow struct{}

type ActionsReviewPendingDeploymentsForRunApplicationJSONRequest struct {
	Comment        string                                                           `json:"comment"`
	EnvironmentIds []int                                                            `json:"environment_ids"`
	State          ActionsReviewPendingDeploymentsForRunApplicationJSONRequestState `json:"state"`
}

func (*ActionsReviewPendingDeploymentsForRunApplicationJSONRequest) actionsReviewPendingDeploymentsForRunRequest() {
}

type ActionsReviewPendingDeploymentsForRunApplicationJSONRequestState string

const (
	ActionsReviewPendingDeploymentsForRunApplicationJSONRequestStateApproved ActionsReviewPendingDeploymentsForRunApplicationJSONRequestState = "approved"
	ActionsReviewPendingDeploymentsForRunApplicationJSONRequestStateRejected ActionsReviewPendingDeploymentsForRunApplicationJSONRequestState = "rejected"
)

type ActionsSecret struct {
	CreatedAt time.Time `json:"created_at"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

type ActionsSetAllowedActionsOrganization struct{}

type ActionsSetAllowedActionsRepository struct{}

type ActionsSetGithubActionsPermissionsOrganization struct{}

type ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest struct {
	AllowedActions      *AllowedActions     `json:"allowed_actions"`
	EnabledRepositories EnabledRepositories `json:"enabled_repositories"`
}

type ActionsSetGithubActionsPermissionsRepository struct{}

type ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest struct {
	AllowedActions *AllowedActions `json:"allowed_actions"`
	Enabled        ActionsEnabled  `json:"enabled"`
}

type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg struct{}

type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest struct {
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

type ActionsSetSelectedReposForOrgSecret struct{}

type ActionsSetSelectedReposForOrgSecretApplicationJSONRequest struct {
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization struct{}

type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest struct {
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

type ActionsSetSelfHostedRunnersInGroupForOrg struct{}

type ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest struct {
	Runners []int `json:"runners"`
}

type ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest struct {
	Name       string                                                                    `json:"name"`
	Visibility *ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility `json:"visibility"`
}

type ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility string

const (
	ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibilitySelected ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility = "selected"
	ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibilityAll      ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility = "all"
	ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibilityPrivate  ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequestVisibility = "private"
)

type ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONForbidden) activityCheckRepoIsStarredByAuthenticatedUserResponse() {
}

type ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound BasicError

func (*ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONNotFound) activityCheckRepoIsStarredByAuthenticatedUserResponse() {
}

type ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityCheckRepoIsStarredByAuthenticatedUserApplicationJSONUnauthorized) activityCheckRepoIsStarredByAuthenticatedUserResponse() {
}

type ActivityCheckRepoIsStarredByAuthenticatedUserNoContent struct{}

func (*ActivityCheckRepoIsStarredByAuthenticatedUserNoContent) activityCheckRepoIsStarredByAuthenticatedUserResponse() {
}

type ActivityDeleteRepoSubscription struct{}

type ActivityDeleteThreadSubscriptionApplicationJSONForbidden BasicError

func (*ActivityDeleteThreadSubscriptionApplicationJSONForbidden) activityDeleteThreadSubscriptionResponse() {
}

type ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized BasicError

func (*ActivityDeleteThreadSubscriptionApplicationJSONUnauthorized) activityDeleteThreadSubscriptionResponse() {
}

type ActivityDeleteThreadSubscriptionNoContent struct{}

func (*ActivityDeleteThreadSubscriptionNoContent) activityDeleteThreadSubscriptionResponse() {}

type ActivityGetRepoSubscriptionNotFound struct{}

func (*ActivityGetRepoSubscriptionNotFound) activityGetRepoSubscriptionResponse() {}

type ActivityGetThreadApplicationJSONForbidden BasicError

func (*ActivityGetThreadApplicationJSONForbidden) activityGetThreadResponse() {}

type ActivityGetThreadApplicationJSONUnauthorized BasicError

func (*ActivityGetThreadApplicationJSONUnauthorized) activityGetThreadResponse() {}

type ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONForbidden) activityGetThreadSubscriptionForAuthenticatedUserResponse() {
}

type ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityGetThreadSubscriptionForAuthenticatedUserApplicationJSONUnauthorized) activityGetThreadSubscriptionForAuthenticatedUserResponse() {
}

type ActivityListNotificationsForAuthenticatedUserOK []Thread

type ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden BasicError

func (*ActivityListPublicEventsForRepoNetworkApplicationJSONForbidden) activityListPublicEventsForRepoNetworkResponse() {
}

type ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently BasicError

func (*ActivityListPublicEventsForRepoNetworkApplicationJSONMovedPermanently) activityListPublicEventsForRepoNetworkResponse() {
}

type ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound BasicError

func (*ActivityListPublicEventsForRepoNetworkApplicationJSONNotFound) activityListPublicEventsForRepoNetworkResponse() {
}

type ActivityListPublicEventsForRepoNetworkOK []Event

func (*ActivityListPublicEventsForRepoNetworkOK) activityListPublicEventsForRepoNetworkResponse() {}

type ActivityListPublicEventsOK []Event

func (*ActivityListPublicEventsOK) activityListPublicEventsResponse() {}

type ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityListWatchedReposForAuthenticatedUserApplicationJSONForbidden) activityListWatchedReposForAuthenticatedUserResponse() {
}

type ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityListWatchedReposForAuthenticatedUserApplicationJSONUnauthorized) activityListWatchedReposForAuthenticatedUserResponse() {
}

type ActivityListWatchedReposForAuthenticatedUserOK []MinimalRepository

func (*ActivityListWatchedReposForAuthenticatedUserOK) activityListWatchedReposForAuthenticatedUserResponse() {
}

type ActivityMarkNotificationsAsReadAccepted struct {
	Message *string `json:"message"`
}

func (*ActivityMarkNotificationsAsReadAccepted) activityMarkNotificationsAsReadResponse() {}

type ActivityMarkNotificationsAsReadApplicationJSONForbidden BasicError

func (*ActivityMarkNotificationsAsReadApplicationJSONForbidden) activityMarkNotificationsAsReadResponse() {
}

type ActivityMarkNotificationsAsReadApplicationJSONRequest struct {
	LastReadAt *time.Time `json:"last_read_at"`
	Read       *bool      `json:"read"`
}

type ActivityMarkNotificationsAsReadApplicationJSONUnauthorized BasicError

func (*ActivityMarkNotificationsAsReadApplicationJSONUnauthorized) activityMarkNotificationsAsReadResponse() {
}

type ActivityMarkNotificationsAsReadResetContent struct{}

func (*ActivityMarkNotificationsAsReadResetContent) activityMarkNotificationsAsReadResponse() {}

type ActivityMarkRepoNotificationsAsReadAccepted struct {
	Message *string `json:"message"`
	URL     *string `json:"url"`
}

func (*ActivityMarkRepoNotificationsAsReadAccepted) activityMarkRepoNotificationsAsReadResponse() {}

type ActivityMarkRepoNotificationsAsReadApplicationJSONRequest struct {
	LastReadAt *time.Time `json:"last_read_at"`
}

type ActivityMarkRepoNotificationsAsReadResetContent struct{}

func (*ActivityMarkRepoNotificationsAsReadResetContent) activityMarkRepoNotificationsAsReadResponse() {
}

type ActivityMarkThreadAsReadResetContent struct{}

func (*ActivityMarkThreadAsReadResetContent) activityMarkThreadAsReadResponse() {}

type ActivitySetRepoSubscriptionApplicationJSONRequest struct {
	Ignored    *bool `json:"ignored"`
	Subscribed *bool `json:"subscribed"`
}

type ActivitySetThreadSubscriptionApplicationJSONForbidden BasicError

func (*ActivitySetThreadSubscriptionApplicationJSONForbidden) activitySetThreadSubscriptionResponse() {
}

type ActivitySetThreadSubscriptionApplicationJSONRequest struct {
	Ignored *bool `json:"ignored"`
}

type ActivitySetThreadSubscriptionApplicationJSONUnauthorized BasicError

func (*ActivitySetThreadSubscriptionApplicationJSONUnauthorized) activitySetThreadSubscriptionResponse() {
}

type ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityStarRepoForAuthenticatedUserApplicationJSONForbidden) activityStarRepoForAuthenticatedUserResponse() {
}

type ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound BasicError

func (*ActivityStarRepoForAuthenticatedUserApplicationJSONNotFound) activityStarRepoForAuthenticatedUserResponse() {
}

type ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityStarRepoForAuthenticatedUserApplicationJSONUnauthorized) activityStarRepoForAuthenticatedUserResponse() {
}

type ActivityStarRepoForAuthenticatedUserNoContent struct{}

func (*ActivityStarRepoForAuthenticatedUserNoContent) activityStarRepoForAuthenticatedUserResponse() {
}

type ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ActivityUnstarRepoForAuthenticatedUserApplicationJSONForbidden) activityUnstarRepoForAuthenticatedUserResponse() {
}

type ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound BasicError

func (*ActivityUnstarRepoForAuthenticatedUserApplicationJSONNotFound) activityUnstarRepoForAuthenticatedUserResponse() {
}

type ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ActivityUnstarRepoForAuthenticatedUserApplicationJSONUnauthorized) activityUnstarRepoForAuthenticatedUserResponse() {
}

type ActivityUnstarRepoForAuthenticatedUserNoContent struct{}

func (*ActivityUnstarRepoForAuthenticatedUserNoContent) activityUnstarRepoForAuthenticatedUserResponse() {
}

type Actor struct {
	AvatarURL    string  `json:"avatar_url"`
	DisplayLogin *string `json:"display_login"`
	GravatarID   string  `json:"gravatar_id"`
	ID           int     `json:"id"`
	Login        string  `json:"login"`
	URL          string  `json:"url"`
}

type AlertCreatedAt time.Time

type AlertHTMLURL string

type AlertInstancesURL string

type AlertNumber int

type AlertURL string

type AllowedActions string

const (
	AllowedActionsAll       AllowedActions = "all"
	AllowedActionsLocalOnly AllowedActions = "local_only"
	AllowedActionsSelected  AllowedActions = "selected"
)

type AppPermissions struct {
	Actions                       *AppPermissionsActions                       `json:"actions"`
	Administration                *AppPermissionsAdministration                `json:"administration"`
	Checks                        *AppPermissionsChecks                        `json:"checks"`
	ContentReferences             *AppPermissionsContentReferences             `json:"content_references"`
	Contents                      *AppPermissionsContents                      `json:"contents"`
	Deployments                   *AppPermissionsDeployments                   `json:"deployments"`
	Environments                  *AppPermissionsEnvironments                  `json:"environments"`
	Issues                        *AppPermissionsIssues                        `json:"issues"`
	Members                       *AppPermissionsMembers                       `json:"members"`
	Metadata                      *AppPermissionsMetadata                      `json:"metadata"`
	OrganizationAdministration    *AppPermissionsOrganizationAdministration    `json:"organization_administration"`
	OrganizationHooks             *AppPermissionsOrganizationHooks             `json:"organization_hooks"`
	OrganizationPackages          *AppPermissionsOrganizationPackages          `json:"organization_packages"`
	OrganizationPlan              *AppPermissionsOrganizationPlan              `json:"organization_plan"`
	OrganizationProjects          *AppPermissionsOrganizationProjects          `json:"organization_projects"`
	OrganizationSecrets           *AppPermissionsOrganizationSecrets           `json:"organization_secrets"`
	OrganizationSelfHostedRunners *AppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners"`
	OrganizationUserBlocking      *AppPermissionsOrganizationUserBlocking      `json:"organization_user_blocking"`
	Packages                      *AppPermissionsPackages                      `json:"packages"`
	Pages                         *AppPermissionsPages                         `json:"pages"`
	PullRequests                  *AppPermissionsPullRequests                  `json:"pull_requests"`
	RepositoryHooks               *AppPermissionsRepositoryHooks               `json:"repository_hooks"`
	RepositoryProjects            *AppPermissionsRepositoryProjects            `json:"repository_projects"`
	SecretScanningAlerts          *AppPermissionsSecretScanningAlerts          `json:"secret_scanning_alerts"`
	Secrets                       *AppPermissionsSecrets                       `json:"secrets"`
	SecurityEvents                *AppPermissionsSecurityEvents                `json:"security_events"`
	SingleFile                    *AppPermissionsSingleFile                    `json:"single_file"`
	Statuses                      *AppPermissionsStatuses                      `json:"statuses"`
	TeamDiscussions               *AppPermissionsTeamDiscussions               `json:"team_discussions"`
	VulnerabilityAlerts           *AppPermissionsVulnerabilityAlerts           `json:"vulnerability_alerts"`
	Workflows                     *AppPermissionsWorkflows                     `json:"workflows"`
}

type AppPermissionsActions string

const (
	AppPermissionsActionsRead  AppPermissionsActions = "read"
	AppPermissionsActionsWrite AppPermissionsActions = "write"
)

type AppPermissionsAdministration string

const (
	AppPermissionsAdministrationRead  AppPermissionsAdministration = "read"
	AppPermissionsAdministrationWrite AppPermissionsAdministration = "write"
)

type AppPermissionsChecks string

const (
	AppPermissionsChecksRead  AppPermissionsChecks = "read"
	AppPermissionsChecksWrite AppPermissionsChecks = "write"
)

type AppPermissionsContentReferences string

const (
	AppPermissionsContentReferencesRead  AppPermissionsContentReferences = "read"
	AppPermissionsContentReferencesWrite AppPermissionsContentReferences = "write"
)

type AppPermissionsContents string

const (
	AppPermissionsContentsRead  AppPermissionsContents = "read"
	AppPermissionsContentsWrite AppPermissionsContents = "write"
)

type AppPermissionsDeployments string

const (
	AppPermissionsDeploymentsRead  AppPermissionsDeployments = "read"
	AppPermissionsDeploymentsWrite AppPermissionsDeployments = "write"
)

type AppPermissionsEnvironments string

const (
	AppPermissionsEnvironmentsRead  AppPermissionsEnvironments = "read"
	AppPermissionsEnvironmentsWrite AppPermissionsEnvironments = "write"
)

type AppPermissionsIssues string

const (
	AppPermissionsIssuesRead  AppPermissionsIssues = "read"
	AppPermissionsIssuesWrite AppPermissionsIssues = "write"
)

type AppPermissionsMembers string

const (
	AppPermissionsMembersRead  AppPermissionsMembers = "read"
	AppPermissionsMembersWrite AppPermissionsMembers = "write"
)

type AppPermissionsMetadata string

const (
	AppPermissionsMetadataRead  AppPermissionsMetadata = "read"
	AppPermissionsMetadataWrite AppPermissionsMetadata = "write"
)

type AppPermissionsOrganizationAdministration string

const (
	AppPermissionsOrganizationAdministrationRead  AppPermissionsOrganizationAdministration = "read"
	AppPermissionsOrganizationAdministrationWrite AppPermissionsOrganizationAdministration = "write"
)

type AppPermissionsOrganizationHooks string

const (
	AppPermissionsOrganizationHooksRead  AppPermissionsOrganizationHooks = "read"
	AppPermissionsOrganizationHooksWrite AppPermissionsOrganizationHooks = "write"
)

type AppPermissionsOrganizationPackages string

const (
	AppPermissionsOrganizationPackagesRead  AppPermissionsOrganizationPackages = "read"
	AppPermissionsOrganizationPackagesWrite AppPermissionsOrganizationPackages = "write"
)

type AppPermissionsOrganizationPlan string

const (
	AppPermissionsOrganizationPlanRead AppPermissionsOrganizationPlan = "read"
)

type AppPermissionsOrganizationProjects string

const (
	AppPermissionsOrganizationProjectsRead  AppPermissionsOrganizationProjects = "read"
	AppPermissionsOrganizationProjectsWrite AppPermissionsOrganizationProjects = "write"
	AppPermissionsOrganizationProjectsAdmin AppPermissionsOrganizationProjects = "admin"
)

type AppPermissionsOrganizationSecrets string

const (
	AppPermissionsOrganizationSecretsRead  AppPermissionsOrganizationSecrets = "read"
	AppPermissionsOrganizationSecretsWrite AppPermissionsOrganizationSecrets = "write"
)

type AppPermissionsOrganizationSelfHostedRunners string

const (
	AppPermissionsOrganizationSelfHostedRunnersRead  AppPermissionsOrganizationSelfHostedRunners = "read"
	AppPermissionsOrganizationSelfHostedRunnersWrite AppPermissionsOrganizationSelfHostedRunners = "write"
)

type AppPermissionsOrganizationUserBlocking string

const (
	AppPermissionsOrganizationUserBlockingRead  AppPermissionsOrganizationUserBlocking = "read"
	AppPermissionsOrganizationUserBlockingWrite AppPermissionsOrganizationUserBlocking = "write"
)

type AppPermissionsPackages string

const (
	AppPermissionsPackagesRead  AppPermissionsPackages = "read"
	AppPermissionsPackagesWrite AppPermissionsPackages = "write"
)

type AppPermissionsPages string

const (
	AppPermissionsPagesRead  AppPermissionsPages = "read"
	AppPermissionsPagesWrite AppPermissionsPages = "write"
)

type AppPermissionsPullRequests string

const (
	AppPermissionsPullRequestsRead  AppPermissionsPullRequests = "read"
	AppPermissionsPullRequestsWrite AppPermissionsPullRequests = "write"
)

type AppPermissionsRepositoryHooks string

const (
	AppPermissionsRepositoryHooksRead  AppPermissionsRepositoryHooks = "read"
	AppPermissionsRepositoryHooksWrite AppPermissionsRepositoryHooks = "write"
)

type AppPermissionsRepositoryProjects string

const (
	AppPermissionsRepositoryProjectsRead  AppPermissionsRepositoryProjects = "read"
	AppPermissionsRepositoryProjectsWrite AppPermissionsRepositoryProjects = "write"
	AppPermissionsRepositoryProjectsAdmin AppPermissionsRepositoryProjects = "admin"
)

type AppPermissionsSecretScanningAlerts string

const (
	AppPermissionsSecretScanningAlertsRead  AppPermissionsSecretScanningAlerts = "read"
	AppPermissionsSecretScanningAlertsWrite AppPermissionsSecretScanningAlerts = "write"
)

type AppPermissionsSecrets string

const (
	AppPermissionsSecretsRead  AppPermissionsSecrets = "read"
	AppPermissionsSecretsWrite AppPermissionsSecrets = "write"
)

type AppPermissionsSecurityEvents string

const (
	AppPermissionsSecurityEventsRead  AppPermissionsSecurityEvents = "read"
	AppPermissionsSecurityEventsWrite AppPermissionsSecurityEvents = "write"
)

type AppPermissionsSingleFile string

const (
	AppPermissionsSingleFileRead  AppPermissionsSingleFile = "read"
	AppPermissionsSingleFileWrite AppPermissionsSingleFile = "write"
)

type AppPermissionsStatuses string

const (
	AppPermissionsStatusesRead  AppPermissionsStatuses = "read"
	AppPermissionsStatusesWrite AppPermissionsStatuses = "write"
)

type AppPermissionsTeamDiscussions string

const (
	AppPermissionsTeamDiscussionsRead  AppPermissionsTeamDiscussions = "read"
	AppPermissionsTeamDiscussionsWrite AppPermissionsTeamDiscussions = "write"
)

type AppPermissionsVulnerabilityAlerts string

const (
	AppPermissionsVulnerabilityAlertsRead AppPermissionsVulnerabilityAlerts = "read"
)

type AppPermissionsWorkflows string

const (
	AppPermissionsWorkflowsWrite AppPermissionsWorkflows = "write"
)

type ApplicationGrant struct {
	App       ApplicationGrantApp `json:"app"`
	CreatedAt time.Time           `json:"created_at"`
	ID        int                 `json:"id"`
	Scopes    []string            `json:"scopes"`
	URL       string              `json:"url"`
	UpdatedAt time.Time           `json:"updated_at"`
	User      *NullableSimpleUser `json:"user"`
}

func (*ApplicationGrant) oAuthAuthorizationsGetGrantResponse() {}

type ApplicationGrantApp struct {
	ClientID string `json:"client_id"`
	Name     string `json:"name"`
	URL      string `json:"url"`
}

type AppsAddRepoToInstallationApplicationJSONForbidden BasicError

func (*AppsAddRepoToInstallationApplicationJSONForbidden) appsAddRepoToInstallationResponse() {}

type AppsAddRepoToInstallationApplicationJSONNotFound BasicError

func (*AppsAddRepoToInstallationApplicationJSONNotFound) appsAddRepoToInstallationResponse() {}

type AppsAddRepoToInstallationNoContent struct{}

func (*AppsAddRepoToInstallationNoContent) appsAddRepoToInstallationResponse() {}

type AppsCheckTokenApplicationJSONRequest struct {
	AccessToken string `json:"access_token"`
}

func (*AppsCheckTokenApplicationJSONRequest) appsCheckTokenRequest() {}

type AppsCreateContentAttachmentApplicationJSONRequest struct {
	Body  string `json:"body"`
	Title string `json:"title"`
}

func (*AppsCreateContentAttachmentApplicationJSONRequest) appsCreateContentAttachmentRequest() {}

type AppsCreateFromManifestApplicationJSONRequest struct{}

func (*AppsCreateFromManifestApplicationJSONRequest) appsCreateFromManifestRequest() {}

type AppsCreateInstallationAccessTokenApplicationJSONRequest struct {
	Permissions   *AppPermissions `json:"permissions"`
	Repositories  *[]string       `json:"repositories"`
	RepositoryIds *[]int          `json:"repository_ids"`
}

func (*AppsCreateInstallationAccessTokenApplicationJSONRequest) appsCreateInstallationAccessTokenRequest() {
}

type AppsDeleteAuthorizationApplicationJSONRequest struct {
	AccessToken string `json:"access_token"`
}

func (*AppsDeleteAuthorizationApplicationJSONRequest) appsDeleteAuthorizationRequest() {}

type AppsDeleteAuthorizationNoContent struct{}

type AppsDeleteInstallationNoContent struct{}

func (*AppsDeleteInstallationNoContent) appsDeleteInstallationResponse() {}

type AppsDeleteTokenApplicationJSONRequest struct {
	AccessToken string `json:"access_token"`
}

func (*AppsDeleteTokenApplicationJSONRequest) appsDeleteTokenRequest() {}

type AppsDeleteTokenNoContent struct{}

type AppsGetBySlugApplicationJSONForbidden BasicError

func (*AppsGetBySlugApplicationJSONForbidden) appsGetBySlugResponse() {}

type AppsGetBySlugApplicationJSONNotFound BasicError

func (*AppsGetBySlugApplicationJSONNotFound) appsGetBySlugResponse() {}

type AppsGetSubscriptionPlanForAccountApplicationJSONNotFound BasicError

func (*AppsGetSubscriptionPlanForAccountApplicationJSONNotFound) appsGetSubscriptionPlanForAccountResponse() {
}

type AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized BasicError

func (*AppsGetSubscriptionPlanForAccountApplicationJSONUnauthorized) appsGetSubscriptionPlanForAccountResponse() {
}

type AppsGetSubscriptionPlanForAccountStubbedNotFound struct{}

func (*AppsGetSubscriptionPlanForAccountStubbedNotFound) appsGetSubscriptionPlanForAccountStubbedResponse() {
}

type AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden BasicError

func (*AppsListInstallationReposForAuthenticatedUserApplicationJSONForbidden) appsListInstallationReposForAuthenticatedUserResponse() {
}

type AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound BasicError

func (*AppsListInstallationReposForAuthenticatedUserApplicationJSONNotFound) appsListInstallationReposForAuthenticatedUserResponse() {
}

type AppsListInstallationReposForAuthenticatedUserOK struct {
	Repositories        []Repository `json:"repositories"`
	RepositorySelection *string      `json:"repository_selection"`
	TotalCount          int          `json:"total_count"`
}

func (*AppsListInstallationReposForAuthenticatedUserOK) appsListInstallationReposForAuthenticatedUserResponse() {
}

type AppsListPlansApplicationJSONNotFound BasicError

func (*AppsListPlansApplicationJSONNotFound) appsListPlansResponse() {}

type AppsListPlansApplicationJSONUnauthorized BasicError

func (*AppsListPlansApplicationJSONUnauthorized) appsListPlansResponse() {}

type AppsListPlansOK []MarketplaceListingPlan

func (*AppsListPlansOK) appsListPlansResponse() {}

type AppsListPlansStubbedOK []MarketplaceListingPlan

func (*AppsListPlansStubbedOK) appsListPlansStubbedResponse() {}

type AppsListReposAccessibleToInstallationApplicationJSONForbidden BasicError

func (*AppsListReposAccessibleToInstallationApplicationJSONForbidden) appsListReposAccessibleToInstallationResponse() {
}

type AppsListReposAccessibleToInstallationApplicationJSONUnauthorized BasicError

func (*AppsListReposAccessibleToInstallationApplicationJSONUnauthorized) appsListReposAccessibleToInstallationResponse() {
}

type AppsListReposAccessibleToInstallationOK struct {
	Repositories        []Repository `json:"repositories"`
	RepositorySelection *string      `json:"repository_selection"`
	TotalCount          int          `json:"total_count"`
}

func (*AppsListReposAccessibleToInstallationOK) appsListReposAccessibleToInstallationResponse() {}

type AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound BasicError

func (*AppsListSubscriptionsForAuthenticatedUserApplicationJSONNotFound) appsListSubscriptionsForAuthenticatedUserResponse() {
}

type AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*AppsListSubscriptionsForAuthenticatedUserApplicationJSONUnauthorized) appsListSubscriptionsForAuthenticatedUserResponse() {
}

type AppsListSubscriptionsForAuthenticatedUserOK []UserMarketplacePurchase

func (*AppsListSubscriptionsForAuthenticatedUserOK) appsListSubscriptionsForAuthenticatedUserResponse() {
}

type AppsListSubscriptionsForAuthenticatedUserStubbedOK []UserMarketplacePurchase

func (*AppsListSubscriptionsForAuthenticatedUserStubbedOK) appsListSubscriptionsForAuthenticatedUserStubbedResponse() {
}

type AppsListWebhookDeliveriesOK []HookDeliveryItem

type AppsRemoveRepoFromInstallationApplicationJSONForbidden BasicError

func (*AppsRemoveRepoFromInstallationApplicationJSONForbidden) appsRemoveRepoFromInstallationResponse() {
}

type AppsRemoveRepoFromInstallationApplicationJSONNotFound BasicError

func (*AppsRemoveRepoFromInstallationApplicationJSONNotFound) appsRemoveRepoFromInstallationResponse() {
}

type AppsRemoveRepoFromInstallationNoContent struct{}

func (*AppsRemoveRepoFromInstallationNoContent) appsRemoveRepoFromInstallationResponse() {}

type AppsResetTokenApplicationJSONRequest struct {
	AccessToken string `json:"access_token"`
}

func (*AppsResetTokenApplicationJSONRequest) appsResetTokenRequest() {}

type AppsRevokeInstallationAccessToken struct{}

type AppsScopeTokenApplicationJSONRequest struct {
	AccessToken   string          `json:"access_token"`
	Permissions   *AppPermissions `json:"permissions"`
	Repositories  *[]string       `json:"repositories"`
	RepositoryIds *[]int          `json:"repository_ids"`
	Target        *string         `json:"target"`
	TargetID      *int            `json:"target_id"`
}

func (*AppsScopeTokenApplicationJSONRequest) appsScopeTokenRequest() {}

type AppsSuspendInstallationNoContent struct{}

func (*AppsSuspendInstallationNoContent) appsSuspendInstallationResponse() {}

type AppsUnsuspendInstallationNoContent struct{}

func (*AppsUnsuspendInstallationNoContent) appsUnsuspendInstallationResponse() {}

type Artifact struct {
	ArchiveDownloadURL string    `json:"archive_download_url"`
	CreatedAt          time.Time `json:"created_at"`
	Expired            bool      `json:"expired"`
	ExpiresAt          time.Time `json:"expires_at"`
	ID                 int       `json:"id"`
	Name               string    `json:"name"`
	NodeID             string    `json:"node_id"`
	SizeInBytes        int       `json:"size_in_bytes"`
	URL                string    `json:"url"`
	UpdatedAt          time.Time `json:"updated_at"`
}

type AuthenticationToken struct {
	ExpiresAt           time.Time                               `json:"expires_at"`
	Permissions         *struct{}                               `json:"permissions"`
	Repositories        *[]Repository                           `json:"repositories"`
	RepositorySelection *AuthenticationTokenRepositorySelection `json:"repository_selection"`
	SingleFile          *string                                 `json:"single_file"`
	Token               string                                  `json:"token"`
}

type AuthenticationTokenRepositorySelection string

const (
	AuthenticationTokenRepositorySelectionAll      AuthenticationTokenRepositorySelection = "all"
	AuthenticationTokenRepositorySelectionSelected AuthenticationTokenRepositorySelection = "selected"
)

type AuthorAssociation string

const (
	AuthorAssociationCOLLABORATOR         AuthorAssociation = "COLLABORATOR"
	AuthorAssociationCONTRIBUTOR          AuthorAssociation = "CONTRIBUTOR"
	AuthorAssociationFIRSTTIMER           AuthorAssociation = "FIRST_TIMER"
	AuthorAssociationFIRSTTIMECONTRIBUTOR AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	AuthorAssociationMANNEQUIN            AuthorAssociation = "MANNEQUIN"
	AuthorAssociationMEMBER               AuthorAssociation = "MEMBER"
	AuthorAssociationNONE                 AuthorAssociation = "NONE"
	AuthorAssociationOWNER                AuthorAssociation = "OWNER"
)

type Authorization struct {
	App            AuthorizationApp            `json:"app"`
	CreatedAt      time.Time                   `json:"created_at"`
	ExpiresAt      time.Time                   `json:"expires_at"`
	Fingerprint    string                      `json:"fingerprint"`
	HashedToken    string                      `json:"hashed_token"`
	ID             int                         `json:"id"`
	Installation   *NullableScopedInstallation `json:"installation"`
	Note           string                      `json:"note"`
	NoteURL        string                      `json:"note_url"`
	Scopes         []string                    `json:"scopes"`
	Token          string                      `json:"token"`
	TokenLastEight string                      `json:"token_last_eight"`
	URL            string                      `json:"url"`
	UpdatedAt      time.Time                   `json:"updated_at"`
	User           *NullableSimpleUser         `json:"user"`
}

func (*Authorization) oAuthAuthorizationsGetAuthorizationResponse() {}

type AuthorizationApp struct {
	ClientID string `json:"client_id"`
	Name     string `json:"name"`
	URL      string `json:"url"`
}

type AutoMerge struct {
	CommitMessage string               `json:"commit_message"`
	CommitTitle   string               `json:"commit_title"`
	EnabledBy     SimpleUser           `json:"enabled_by"`
	MergeMethod   AutoMergeMergeMethod `json:"merge_method"`
}

type AutoMergeMergeMethod string

const (
	AutoMergeMergeMethodMerge  AutoMergeMergeMethod = "merge"
	AutoMergeMergeMethodSquash AutoMergeMergeMethod = "squash"
	AutoMergeMergeMethodRebase AutoMergeMergeMethod = "rebase"
)

type Autolink struct {
	ID          int    `json:"id"`
	KeyPrefix   string `json:"key_prefix"`
	URLTemplate string `json:"url_template"`
}

func (*Autolink) reposGetAutolinkResponse() {}

type BaseGist struct {
	Comments    int                `json:"comments"`
	CommentsURL string             `json:"comments_url"`
	CommitsURL  string             `json:"commits_url"`
	CreatedAt   time.Time          `json:"created_at"`
	Description string             `json:"description"`
	Files       struct{}           `json:"files"`
	Forks       *[]string          `json:"forks"`
	ForksURL    string             `json:"forks_url"`
	GitPullURL  string             `json:"git_pull_url"`
	GitPushURL  string             `json:"git_push_url"`
	HTMLURL     string             `json:"html_url"`
	History     *[]string          `json:"history"`
	ID          string             `json:"id"`
	NodeID      string             `json:"node_id"`
	Owner       *SimpleUser        `json:"owner"`
	Public      bool               `json:"public"`
	Truncated   *bool              `json:"truncated"`
	URL         string             `json:"url"`
	UpdatedAt   time.Time          `json:"updated_at"`
	User        NullableSimpleUser `json:"user"`
}

type BasicError struct {
	DocumentationURL *string `json:"documentation_url"`
	Message          *string `json:"message"`
	Status           *string `json:"status"`
	URL              *string `json:"url"`
}

func (*BasicError) activityGetRepoSubscriptionResponse()                      {}
func (*BasicError) activityListPublicEventsResponse()                         {}
func (*BasicError) activityMarkThreadAsReadResponse()                         {}
func (*BasicError) appsDeleteInstallationResponse()                           {}
func (*BasicError) appsGetSubscriptionPlanForAccountStubbedResponse()         {}
func (*BasicError) appsListPlansStubbedResponse()                             {}
func (*BasicError) appsListSubscriptionsForAuthenticatedUserStubbedResponse() {}
func (*BasicError) appsSuspendInstallationResponse()                          {}
func (*BasicError) appsUnsuspendInstallationResponse()                        {}
func (*BasicError) codeScanningGetSarifResponse()                             {}
func (*BasicError) codesOfConductGetConductCodeResponse()                     {}
func (*BasicError) gistsCheckIsStarredResponse()                              {}
func (*BasicError) gistsGetCommentResponse()                                  {}
func (*BasicError) gistsGetResponse()                                         {}
func (*BasicError) gistsListResponse()                                        {}
func (*BasicError) gistsUpdateCommentResponse()                               {}
func (*BasicError) gitGetCommitResponse()                                     {}
func (*BasicError) gitGetRefResponse()                                        {}
func (*BasicError) gitGetTagResponse()                                        {}
func (*BasicError) issuesCheckUserCanBeAssignedResponse()                     {}
func (*BasicError) issuesDeleteMilestoneResponse()                            {}
func (*BasicError) issuesGetCommentResponse()                                 {}
func (*BasicError) issuesGetLabelResponse()                                   {}
func (*BasicError) issuesGetMilestoneResponse()                               {}
func (*BasicError) issuesListAssigneesResponse()                              {}
func (*BasicError) issuesListLabelsForRepoResponse()                          {}
func (*BasicError) issuesListLabelsOnIssueResponse()                          {}
func (*BasicError) issuesRemoveAllLabelsResponse()                            {}
func (*BasicError) migrationsDeleteArchiveForOrgResponse()                    {}
func (*BasicError) migrationsDownloadArchiveForOrgResponse()                  {}
func (*BasicError) migrationsGetCommitAuthorsResponse()                       {}
func (*BasicError) migrationsGetImportStatusResponse()                        {}
func (*BasicError) migrationsListReposForOrgResponse()                        {}
func (*BasicError) migrationsListReposForUserResponse()                       {}
func (*BasicError) migrationsUnlockRepoForOrgResponse()                       {}
func (*BasicError) orgsCheckBlockedUserResponse()                             {}
func (*BasicError) orgsConvertMemberToOutsideCollaboratorResponse()           {}
func (*BasicError) orgsDeleteWebhookResponse()                                {}
func (*BasicError) orgsGetResponse()                                          {}
func (*BasicError) orgsGetWebhookResponse()                                   {}
func (*BasicError) orgsListFailedInvitationsResponse()                        {}
func (*BasicError) orgsListInvitationTeamsResponse()                          {}
func (*BasicError) orgsListPendingInvitationsResponse()                       {}
func (*BasicError) orgsListWebhooksResponse()                                 {}
func (*BasicError) orgsPingWebhookResponse()                                  {}
func (*BasicError) orgsRemoveMemberResponse()                                 {}
func (*BasicError) orgsRemoveSamlSSOAuthorizationResponse()                   {}
func (*BasicError) orgsSetPublicMembershipForAuthenticatedUserResponse()      {}
func (*BasicError) pullsCreateReplyForReviewCommentResponse()                 {}
func (*BasicError) pullsCreateReviewResponse()                                {}
func (*BasicError) pullsDeletePendingReviewResponse()                         {}
func (*BasicError) pullsDeleteReviewCommentResponse()                         {}
func (*BasicError) pullsDismissReviewResponse()                               {}
func (*BasicError) pullsGetReviewCommentResponse()                            {}
func (*BasicError) pullsGetReviewResponse()                                   {}
func (*BasicError) pullsListCommentsForReviewResponse()                       {}
func (*BasicError) rateLimitGetResponse()                                     {}
func (*BasicError) reposCreateCommitSignatureProtectionResponse()             {}
func (*BasicError) reposDeleteAdminBranchProtectionResponse()                 {}
func (*BasicError) reposDeleteAutolinkResponse()                              {}
func (*BasicError) reposDeleteBranchProtectionResponse()                      {}
func (*BasicError) reposDeleteCommitCommentResponse()                         {}
func (*BasicError) reposDeleteCommitSignatureProtectionResponse()             {}
func (*BasicError) reposDeleteDeploymentResponse()                            {}
func (*BasicError) reposDeletePullRequestReviewProtectionResponse()           {}
func (*BasicError) reposDeleteWebhookResponse()                               {}
func (*BasicError) reposGetAccessRestrictionsResponse()                       {}
func (*BasicError) reposGetAllStatusCheckContextsResponse()                   {}
func (*BasicError) reposGetAllTopicsResponse()                                {}
func (*BasicError) reposGetAppsWithAccessToProtectedBranchResponse()          {}
func (*BasicError) reposGetAutolinkResponse()                                 {}
func (*BasicError) reposGetBranchProtectionResponse()                         {}
func (*BasicError) reposGetCollaboratorPermissionLevelResponse()              {}
func (*BasicError) reposGetCombinedStatusForRefResponse()                     {}
func (*BasicError) reposGetCommitCommentResponse()                            {}
func (*BasicError) reposGetCommitSignatureProtectionResponse()                {}
func (*BasicError) reposGetDeployKeyResponse()                                {}
func (*BasicError) reposGetDeploymentStatusResponse()                         {}
func (*BasicError) reposGetPagesHealthCheckResponse()                         {}
func (*BasicError) reposGetPagesResponse()                                    {}
func (*BasicError) reposGetParticipationStatsResponse()                       {}
func (*BasicError) reposGetReleaseAssetResponse()                             {}
func (*BasicError) reposGetReleaseByTagResponse()                             {}
func (*BasicError) reposGetReleaseResponse()                                  {}
func (*BasicError) reposGetStatusChecksProtectionResponse()                   {}
func (*BasicError) reposGetTeamsWithAccessToProtectedBranchResponse()         {}
func (*BasicError) reposGetTopPathsResponse()                                 {}
func (*BasicError) reposGetTopReferrersResponse()                             {}
func (*BasicError) reposGetUsersWithAccessToProtectedBranchResponse()         {}
func (*BasicError) reposListBranchesResponse()                                {}
func (*BasicError) reposListCommitStatusesForRefResponse()                    {}
func (*BasicError) reposListDeploymentStatusesResponse()                      {}
func (*BasicError) reposListReleasesResponse()                                {}
func (*BasicError) reposPingWebhookResponse()                                 {}
func (*BasicError) reposReplaceAllTopicsResponse()                            {}
func (*BasicError) reposTestPushWebhookResponse()                             {}
func (*BasicError) reposUpdateCommitCommentResponse()                         {}
func (*BasicError) reposUpdateReleaseResponse()                               {}
func (*BasicError) teamsAddMemberLegacyResponse()                             {}
func (*BasicError) teamsAddOrUpdateMembershipForUserLegacyResponse()          {}
func (*BasicError) teamsGetByNameResponse()                                   {}
func (*BasicError) teamsGetLegacyResponse()                                   {}
func (*BasicError) teamsGetMembershipForUserLegacyResponse()                  {}
func (*BasicError) teamsListProjectsLegacyResponse()                          {}
func (*BasicError) teamsListReposLegacyResponse()                             {}
func (*BasicError) teamsListResponse()                                        {}

type Blob struct {
	Content            string  `json:"content"`
	Encoding           string  `json:"encoding"`
	HighlightedContent *string `json:"highlighted_content"`
	NodeID             string  `json:"node_id"`
	Sha                string  `json:"sha"`
	Size               int     `json:"size"`
	URL                string  `json:"url"`
}

type BranchProtection struct {
	AllowDeletions                 *BranchProtectionAllowDeletions                 `json:"allow_deletions"`
	AllowForcePushes               *BranchProtectionAllowForcePushes               `json:"allow_force_pushes"`
	Enabled                        *bool                                           `json:"enabled"`
	EnforceAdmins                  *ProtectedBranchAdminEnforced                   `json:"enforce_admins"`
	Name                           *string                                         `json:"name"`
	ProtectionURL                  *string                                         `json:"protection_url"`
	RequiredConversationResolution *BranchProtectionRequiredConversationResolution `json:"required_conversation_resolution"`
	RequiredLinearHistory          *BranchProtectionRequiredLinearHistory          `json:"required_linear_history"`
	RequiredPullRequestReviews     *ProtectedBranchPullRequestReview               `json:"required_pull_request_reviews"`
	RequiredSignatures             *BranchProtectionRequiredSignatures             `json:"required_signatures"`
	RequiredStatusChecks           *BranchProtectionRequiredStatusChecks           `json:"required_status_checks"`
	Restrictions                   *BranchRestrictionPolicy                        `json:"restrictions"`
	URL                            *string                                         `json:"url"`
}

func (*BranchProtection) reposGetBranchProtectionResponse() {}

type BranchProtectionAllowDeletions struct {
	Enabled *bool `json:"enabled"`
}

type BranchProtectionAllowForcePushes struct {
	Enabled *bool `json:"enabled"`
}

type BranchProtectionRequiredConversationResolution struct {
	Enabled *bool `json:"enabled"`
}

type BranchProtectionRequiredLinearHistory struct {
	Enabled *bool `json:"enabled"`
}

type BranchProtectionRequiredSignatures struct {
	Enabled bool   `json:"enabled"`
	URL     string `json:"url"`
}

type BranchProtectionRequiredStatusChecks struct {
	Contexts         []string `json:"contexts"`
	ContextsURL      *string  `json:"contexts_url"`
	EnforcementLevel *string  `json:"enforcement_level"`
	Strict           *bool    `json:"strict"`
	URL              *string  `json:"url"`
}

type BranchRestrictionPolicy struct {
	Apps     []BranchRestrictionPolicyAppsItem  `json:"apps"`
	AppsURL  string                             `json:"apps_url"`
	Teams    []BranchRestrictionPolicyTeamsItem `json:"teams"`
	TeamsURL string                             `json:"teams_url"`
	URL      string                             `json:"url"`
	Users    []BranchRestrictionPolicyUsersItem `json:"users"`
	UsersURL string                             `json:"users_url"`
}

func (*BranchRestrictionPolicy) reposGetAccessRestrictionsResponse() {}

type BranchRestrictionPolicyAppsItem struct {
	CreatedAt   *string                                     `json:"created_at"`
	Description *string                                     `json:"description"`
	Events      *[]string                                   `json:"events"`
	ExternalURL *string                                     `json:"external_url"`
	HTMLURL     *string                                     `json:"html_url"`
	ID          *int                                        `json:"id"`
	Name        *string                                     `json:"name"`
	NodeID      *string                                     `json:"node_id"`
	Owner       *BranchRestrictionPolicyAppsItemOwner       `json:"owner"`
	Permissions *BranchRestrictionPolicyAppsItemPermissions `json:"permissions"`
	Slug        *string                                     `json:"slug"`
	UpdatedAt   *string                                     `json:"updated_at"`
}

type BranchRestrictionPolicyAppsItemOwner struct {
	AvatarURL         *string `json:"avatar_url"`
	Description       *string `json:"description"`
	EventsURL         *string `json:"events_url"`
	FollowersURL      *string `json:"followers_url"`
	FollowingURL      *string `json:"following_url"`
	GistsURL          *string `json:"gists_url"`
	GravatarID        *string `json:"gravatar_id"`
	HTMLURL           *string `json:"html_url"`
	HooksURL          *string `json:"hooks_url"`
	ID                *int    `json:"id"`
	IssuesURL         *string `json:"issues_url"`
	Login             *string `json:"login"`
	MembersURL        *string `json:"members_url"`
	NodeID            *string `json:"node_id"`
	OrganizationsURL  *string `json:"organizations_url"`
	PublicMembersURL  *string `json:"public_members_url"`
	ReceivedEventsURL *string `json:"received_events_url"`
	ReposURL          *string `json:"repos_url"`
	SiteAdmin         *bool   `json:"site_admin"`
	StarredURL        *string `json:"starred_url"`
	SubscriptionsURL  *string `json:"subscriptions_url"`
	Type              *string `json:"type"`
	URL               *string `json:"url"`
}

type BranchRestrictionPolicyAppsItemPermissions struct {
	Contents   *string `json:"contents"`
	Issues     *string `json:"issues"`
	Metadata   *string `json:"metadata"`
	SingleFile *string `json:"single_file"`
}

type BranchRestrictionPolicyTeamsItem struct {
	Description     *string `json:"description"`
	HTMLURL         *string `json:"html_url"`
	ID              *int    `json:"id"`
	MembersURL      *string `json:"members_url"`
	Name            *string `json:"name"`
	NodeID          *string `json:"node_id"`
	Parent          *string `json:"parent"`
	Permission      *string `json:"permission"`
	Privacy         *string `json:"privacy"`
	RepositoriesURL *string `json:"repositories_url"`
	Slug            *string `json:"slug"`
	URL             *string `json:"url"`
}

type BranchRestrictionPolicyUsersItem struct {
	AvatarURL         *string `json:"avatar_url"`
	EventsURL         *string `json:"events_url"`
	FollowersURL      *string `json:"followers_url"`
	FollowingURL      *string `json:"following_url"`
	GistsURL          *string `json:"gists_url"`
	GravatarID        *string `json:"gravatar_id"`
	HTMLURL           *string `json:"html_url"`
	ID                *int    `json:"id"`
	Login             *string `json:"login"`
	NodeID            *string `json:"node_id"`
	OrganizationsURL  *string `json:"organizations_url"`
	ReceivedEventsURL *string `json:"received_events_url"`
	ReposURL          *string `json:"repos_url"`
	SiteAdmin         *bool   `json:"site_admin"`
	StarredURL        *string `json:"starred_url"`
	SubscriptionsURL  *string `json:"subscriptions_url"`
	Type              *string `json:"type"`
	URL               *string `json:"url"`
}

type BranchShort struct {
	Commit    BranchShortCommit `json:"commit"`
	Name      string            `json:"name"`
	Protected bool              `json:"protected"`
}

type BranchShortCommit struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type BranchWithProtection struct {
	Commit                       Commit                    `json:"commit"`
	Links                        BranchWithProtectionLinks `json:"_links"`
	Name                         string                    `json:"name"`
	Pattern                      *string                   `json:"pattern"`
	Protected                    bool                      `json:"protected"`
	Protection                   BranchProtection          `json:"protection"`
	ProtectionURL                string                    `json:"protection_url"`
	RequiredApprovingReviewCount *int                      `json:"required_approving_review_count"`
}

func (*BranchWithProtection) reposGetBranchResponse() {}

type BranchWithProtectionLinks struct {
	HTML string `json:"html"`
	Self string `json:"self"`
}

type CheckAnnotation struct {
	AnnotationLevel string `json:"annotation_level"`
	BlobHref        string `json:"blob_href"`
	EndColumn       int    `json:"end_column"`
	EndLine         int    `json:"end_line"`
	Message         string `json:"message"`
	Path            string `json:"path"`
	RawDetails      string `json:"raw_details"`
	StartColumn     int    `json:"start_column"`
	StartLine       int    `json:"start_line"`
	Title           string `json:"title"`
}

type CheckRun struct {
	App          NullableIntegration `json:"app"`
	CheckSuite   CheckRunCheckSuite  `json:"check_suite"`
	CompletedAt  time.Time           `json:"completed_at"`
	Conclusion   CheckRunConclusion  `json:"conclusion"`
	Deployment   *DeploymentSimple   `json:"deployment"`
	DetailsURL   string              `json:"details_url"`
	ExternalID   string              `json:"external_id"`
	HTMLURL      string              `json:"html_url"`
	HeadSha      string              `json:"head_sha"`
	ID           int                 `json:"id"`
	Name         string              `json:"name"`
	NodeID       string              `json:"node_id"`
	Output       CheckRunOutput      `json:"output"`
	PullRequests string              `json:"pull_requests"`
	StartedAt    time.Time           `json:"started_at"`
	Status       CheckRunStatus      `json:"status"`
	URL          string              `json:"url"`
}

type CheckRunCheckSuite struct {
	ID int `json:"id"`
}

type CheckRunConclusion string

const (
	CheckRunConclusionSuccess        CheckRunConclusion = "success"
	CheckRunConclusionFailure        CheckRunConclusion = "failure"
	CheckRunConclusionNeutral        CheckRunConclusion = "neutral"
	CheckRunConclusionCancelled      CheckRunConclusion = "cancelled"
	CheckRunConclusionSkipped        CheckRunConclusion = "skipped"
	CheckRunConclusionTimedOut       CheckRunConclusion = "timed_out"
	CheckRunConclusionActionRequired CheckRunConclusion = "action_required"
)

type CheckRunOutput struct {
	AnnotationsCount int    `json:"annotations_count"`
	AnnotationsURL   string `json:"annotations_url"`
	Summary          string `json:"summary"`
	Text             string `json:"text"`
	Title            string `json:"title"`
}

type CheckRunStatus string

const (
	CheckRunStatusQueued     CheckRunStatus = "queued"
	CheckRunStatusInProgress CheckRunStatus = "in_progress"
	CheckRunStatusCompleted  CheckRunStatus = "completed"
)

type CheckSuite struct {
	After                string               `json:"after"`
	App                  NullableIntegration  `json:"app"`
	Before               string               `json:"before"`
	CheckRunsURL         string               `json:"check_runs_url"`
	Conclusion           CheckSuiteConclusion `json:"conclusion"`
	CreatedAt            time.Time            `json:"created_at"`
	HeadBranch           string               `json:"head_branch"`
	HeadCommit           SimpleCommit         `json:"head_commit"`
	HeadSha              string               `json:"head_sha"`
	ID                   int                  `json:"id"`
	LatestCheckRunsCount int                  `json:"latest_check_runs_count"`
	NodeID               string               `json:"node_id"`
	PullRequests         []PullRequestMinimal `json:"pull_requests"`
	Repository           MinimalRepository    `json:"repository"`
	Status               CheckSuiteStatus     `json:"status"`
	URL                  string               `json:"url"`
	UpdatedAt            time.Time            `json:"updated_at"`
}

type CheckSuiteConclusion string

const (
	CheckSuiteConclusionSuccess        CheckSuiteConclusion = "success"
	CheckSuiteConclusionFailure        CheckSuiteConclusion = "failure"
	CheckSuiteConclusionNeutral        CheckSuiteConclusion = "neutral"
	CheckSuiteConclusionCancelled      CheckSuiteConclusion = "cancelled"
	CheckSuiteConclusionSkipped        CheckSuiteConclusion = "skipped"
	CheckSuiteConclusionTimedOut       CheckSuiteConclusion = "timed_out"
	CheckSuiteConclusionActionRequired CheckSuiteConclusion = "action_required"
)

type CheckSuitePreference struct {
	Preferences CheckSuitePreferencePreferences `json:"preferences"`
	Repository  MinimalRepository               `json:"repository"`
}

type CheckSuitePreferencePreferences struct {
	AutoTriggerChecks *[]CheckSuitePreferencePreferencesAutoTriggerChecksItem `json:"auto_trigger_checks"`
}

type CheckSuitePreferencePreferencesAutoTriggerChecksItem struct {
	AppID   int  `json:"app_id"`
	Setting bool `json:"setting"`
}

type CheckSuiteStatus string

const (
	CheckSuiteStatusQueued     CheckSuiteStatus = "queued"
	CheckSuiteStatusInProgress CheckSuiteStatus = "in_progress"
	CheckSuiteStatusCompleted  CheckSuiteStatus = "completed"
)

type ChecksCreateSuiteApplicationJSONCreated CheckSuite

func (*ChecksCreateSuiteApplicationJSONCreated) checksCreateSuiteResponse() {}

type ChecksCreateSuiteApplicationJSONOK CheckSuite

func (*ChecksCreateSuiteApplicationJSONOK) checksCreateSuiteResponse() {}

type ChecksCreateSuiteApplicationJSONRequest struct {
	HeadSha string `json:"head_sha"`
}

type ChecksListSuitesForRef struct {
	CheckSuites []CheckSuite `json:"check_suites"`
	TotalCount  int          `json:"total_count"`
}

type ChecksRerequestSuite struct{}

type ChecksSetSuitesPreferencesApplicationJSONRequest struct {
	AutoTriggerChecks *[]ChecksSetSuitesPreferencesApplicationJSONRequestAutoTriggerChecksItem `json:"auto_trigger_checks"`
}

type ChecksSetSuitesPreferencesApplicationJSONRequestAutoTriggerChecksItem struct {
	AppID   int  `json:"app_id"`
	Setting bool `json:"setting"`
}

type CodeFrequencyStat []int

type CodeOfConduct struct {
	Body    *string `json:"body"`
	HTMLURL string  `json:"html_url"`
	Key     string  `json:"key"`
	Name    string  `json:"name"`
	URL     string  `json:"url"`
}

func (*CodeOfConduct) codesOfConductGetConductCodeResponse() {}

type CodeOfConductSimple struct {
	HTMLURL string `json:"html_url"`
	Key     string `json:"key"`
	Name    string `json:"name"`
	URL     string `json:"url"`
}

type CodeScanningAlert struct {
	CreatedAt          AlertCreatedAt                   `json:"created_at"`
	DismissedAt        CodeScanningAlertDismissedAt     `json:"dismissed_at"`
	DismissedBy        NullableSimpleUser               `json:"dismissed_by"`
	DismissedReason    CodeScanningAlertDismissedReason `json:"dismissed_reason"`
	HTMLURL            AlertHTMLURL                     `json:"html_url"`
	Instances          *string                          `json:"instances"`
	InstancesURL       AlertInstancesURL                `json:"instances_url"`
	MostRecentInstance CodeScanningAlertInstance        `json:"most_recent_instance"`
	Number             AlertNumber                      `json:"number"`
	Rule               CodeScanningAlertRule            `json:"rule"`
	State              CodeScanningAlertState           `json:"state"`
	Tool               CodeScanningAnalysisTool         `json:"tool"`
	URL                AlertURL                         `json:"url"`
}

func (*CodeScanningAlert) codeScanningGetAlertResponse()    {}
func (*CodeScanningAlert) codeScanningUpdateAlertResponse() {}

type CodeScanningAlertClassification string

const (
	CodeScanningAlertClassificationSource    CodeScanningAlertClassification = "source"
	CodeScanningAlertClassificationGenerated CodeScanningAlertClassification = "generated"
	CodeScanningAlertClassificationTest      CodeScanningAlertClassification = "test"
	CodeScanningAlertClassificationLibrary   CodeScanningAlertClassification = "library"
)

type CodeScanningAlertDismissedAt time.Time

type CodeScanningAlertDismissedReason string

const (
	CodeScanningAlertDismissedReasonFalsePositive CodeScanningAlertDismissedReason = "false positive"
	CodeScanningAlertDismissedReasonWonTFix       CodeScanningAlertDismissedReason = "won't fix"
	CodeScanningAlertDismissedReasonUsedInTests   CodeScanningAlertDismissedReason = "used in tests"
)

type CodeScanningAlertEnvironment string

type CodeScanningAlertInstance struct {
	AnalysisKey     *CodeScanningAnalysisAnalysisKey   `json:"analysis_key"`
	Category        *CodeScanningAnalysisCategory      `json:"category"`
	Classifications *[]CodeScanningAlertClassification `json:"classifications"`
	CommitSha       *string                            `json:"commit_sha"`
	Environment     *CodeScanningAlertEnvironment      `json:"environment"`
	HTMLURL         *string                            `json:"html_url"`
	Location        *CodeScanningAlertLocation         `json:"location"`
	Message         *CodeScanningAlertInstanceMessage  `json:"message"`
	Ref             *CodeScanningRef                   `json:"ref"`
	State           *CodeScanningAlertState            `json:"state"`
}

type CodeScanningAlertInstanceMessage struct {
	Text *string `json:"text"`
}

type CodeScanningAlertLocation struct {
	EndColumn   *int    `json:"end_column"`
	EndLine     *int    `json:"end_line"`
	Path        *string `json:"path"`
	StartColumn *int    `json:"start_column"`
	StartLine   *int    `json:"start_line"`
}

type CodeScanningAlertRule struct {
	Description           *string                                     `json:"description"`
	FullDescription       *string                                     `json:"full_description"`
	Help                  *string                                     `json:"help"`
	ID                    *string                                     `json:"id"`
	Name                  *string                                     `json:"name"`
	SecuritySeverityLevel *CodeScanningAlertRuleSecuritySeverityLevel `json:"security_severity_level"`
	Severity              *CodeScanningAlertRuleSeverity              `json:"severity"`
	Tags                  *[]string                                   `json:"tags"`
}

type CodeScanningAlertRuleSecuritySeverityLevel string

const (
	CodeScanningAlertRuleSecuritySeverityLevelLow      CodeScanningAlertRuleSecuritySeverityLevel = "low"
	CodeScanningAlertRuleSecuritySeverityLevelMedium   CodeScanningAlertRuleSecuritySeverityLevel = "medium"
	CodeScanningAlertRuleSecuritySeverityLevelHigh     CodeScanningAlertRuleSecuritySeverityLevel = "high"
	CodeScanningAlertRuleSecuritySeverityLevelCritical CodeScanningAlertRuleSecuritySeverityLevel = "critical"
)

type CodeScanningAlertRuleSeverity string

const (
	CodeScanningAlertRuleSeverityNone    CodeScanningAlertRuleSeverity = "none"
	CodeScanningAlertRuleSeverityNote    CodeScanningAlertRuleSeverity = "note"
	CodeScanningAlertRuleSeverityWarning CodeScanningAlertRuleSeverity = "warning"
	CodeScanningAlertRuleSeverityError   CodeScanningAlertRuleSeverity = "error"
)

type CodeScanningAlertSetState string

const (
	CodeScanningAlertSetStateOpen      CodeScanningAlertSetState = "open"
	CodeScanningAlertSetStateDismissed CodeScanningAlertSetState = "dismissed"
)

type CodeScanningAlertState string

const (
	CodeScanningAlertStateOpen      CodeScanningAlertState = "open"
	CodeScanningAlertStateClosed    CodeScanningAlertState = "closed"
	CodeScanningAlertStateDismissed CodeScanningAlertState = "dismissed"
	CodeScanningAlertStateFixed     CodeScanningAlertState = "fixed"
)

type CodeScanningAnalysis struct {
	AnalysisKey  CodeScanningAnalysisAnalysisKey `json:"analysis_key"`
	Category     *CodeScanningAnalysisCategory   `json:"category"`
	CommitSha    CodeScanningAnalysisCommitSha   `json:"commit_sha"`
	CreatedAt    CodeScanningAnalysisCreatedAt   `json:"created_at"`
	Deletable    bool                            `json:"deletable"`
	Environment  CodeScanningAnalysisEnvironment `json:"environment"`
	Error        string                          `json:"error"`
	ID           int                             `json:"id"`
	Ref          CodeScanningRef                 `json:"ref"`
	ResultsCount int                             `json:"results_count"`
	RulesCount   int                             `json:"rules_count"`
	SarifID      CodeScanningAnalysisSarifID     `json:"sarif_id"`
	Tool         CodeScanningAnalysisTool        `json:"tool"`
	ToolName     *string                         `json:"tool_name"`
	URL          CodeScanningAnalysisURL         `json:"url"`
	Warning      string                          `json:"warning"`
}

func (*CodeScanningAnalysis) codeScanningGetAnalysisResponse() {}

type CodeScanningAnalysisAnalysisKey string

type CodeScanningAnalysisCategory string

type CodeScanningAnalysisCommitSha string

type CodeScanningAnalysisCreatedAt time.Time

type CodeScanningAnalysisDeletion struct {
	ConfirmDeleteURL string `json:"confirm_delete_url"`
	NextAnalysisURL  string `json:"next_analysis_url"`
}

func (*CodeScanningAnalysisDeletion) codeScanningDeleteAnalysisResponse() {}

type CodeScanningAnalysisEnvironment string

type CodeScanningAnalysisSarifFile string

type CodeScanningAnalysisSarifID string

type CodeScanningAnalysisTool struct {
	GUID    *CodeScanningAnalysisToolGUID    `json:"guid"`
	Name    *CodeScanningAnalysisToolName    `json:"name"`
	Version *CodeScanningAnalysisToolVersion `json:"version"`
}

type CodeScanningAnalysisToolGUID string

type CodeScanningAnalysisToolName string

type CodeScanningAnalysisToolVersion string

type CodeScanningAnalysisURL string

type CodeScanningDeleteAnalysisApplicationJSONBadRequest BasicError

func (*CodeScanningDeleteAnalysisApplicationJSONBadRequest) codeScanningDeleteAnalysisResponse() {}

type CodeScanningDeleteAnalysisApplicationJSONForbidden BasicError

func (*CodeScanningDeleteAnalysisApplicationJSONForbidden) codeScanningDeleteAnalysisResponse() {}

type CodeScanningDeleteAnalysisApplicationJSONNotFound BasicError

func (*CodeScanningDeleteAnalysisApplicationJSONNotFound) codeScanningDeleteAnalysisResponse() {}

type CodeScanningGetAlertApplicationJSONForbidden BasicError

func (*CodeScanningGetAlertApplicationJSONForbidden) codeScanningGetAlertResponse() {}

type CodeScanningGetAlertApplicationJSONNotFound BasicError

func (*CodeScanningGetAlertApplicationJSONNotFound) codeScanningGetAlertResponse() {}

type CodeScanningGetAnalysisApplicationJSONForbidden BasicError

func (*CodeScanningGetAnalysisApplicationJSONForbidden) codeScanningGetAnalysisResponse() {}

type CodeScanningGetAnalysisApplicationJSONNotFound BasicError

func (*CodeScanningGetAnalysisApplicationJSONNotFound) codeScanningGetAnalysisResponse() {}

type CodeScanningGetAnalysisOKApplicationJSONSarif string

func (*CodeScanningGetAnalysisOKApplicationJSONSarif) codeScanningGetAnalysisResponse() {}

type CodeScanningGetSarifNotFound struct{}

func (*CodeScanningGetSarifNotFound) codeScanningGetSarifResponse() {}

type CodeScanningListAlertInstancesApplicationJSONForbidden BasicError

func (*CodeScanningListAlertInstancesApplicationJSONForbidden) codeScanningListAlertInstancesResponse() {
}

type CodeScanningListAlertInstancesApplicationJSONNotFound BasicError

func (*CodeScanningListAlertInstancesApplicationJSONNotFound) codeScanningListAlertInstancesResponse() {
}

type CodeScanningListAlertInstancesOK []CodeScanningAlertInstance

func (*CodeScanningListAlertInstancesOK) codeScanningListAlertInstancesResponse() {}

type CodeScanningListRecentAnalysesApplicationJSONForbidden BasicError

func (*CodeScanningListRecentAnalysesApplicationJSONForbidden) codeScanningListRecentAnalysesResponse() {
}

type CodeScanningListRecentAnalysesApplicationJSONNotFound BasicError

func (*CodeScanningListRecentAnalysesApplicationJSONNotFound) codeScanningListRecentAnalysesResponse() {
}

type CodeScanningListRecentAnalysesOK []CodeScanningAnalysis

func (*CodeScanningListRecentAnalysesOK) codeScanningListRecentAnalysesResponse() {}

type CodeScanningRef string

type CodeScanningSarifsReceipt struct {
	ID  *CodeScanningAnalysisSarifID `json:"id"`
	URL *string                      `json:"url"`
}

func (*CodeScanningSarifsReceipt) codeScanningUploadSarifResponse() {}

type CodeScanningSarifsStatus struct {
	AnalysesURL      *string                                   `json:"analyses_url"`
	ProcessingStatus *CodeScanningSarifsStatusProcessingStatus `json:"processing_status"`
}

func (*CodeScanningSarifsStatus) codeScanningGetSarifResponse() {}

type CodeScanningSarifsStatusProcessingStatus string

const (
	CodeScanningSarifsStatusProcessingStatusPending  CodeScanningSarifsStatusProcessingStatus = "pending"
	CodeScanningSarifsStatusProcessingStatusComplete CodeScanningSarifsStatusProcessingStatus = "complete"
)

type CodeScanningUpdateAlertApplicationJSONForbidden BasicError

func (*CodeScanningUpdateAlertApplicationJSONForbidden) codeScanningUpdateAlertResponse() {}

type CodeScanningUpdateAlertApplicationJSONNotFound BasicError

func (*CodeScanningUpdateAlertApplicationJSONNotFound) codeScanningUpdateAlertResponse() {}

type CodeScanningUpdateAlertApplicationJSONRequest struct {
	DismissedReason *CodeScanningAlertDismissedReason `json:"dismissed_reason"`
	State           CodeScanningAlertSetState         `json:"state"`
}

type CodeScanningUploadSarifApplicationJSONForbidden BasicError

func (*CodeScanningUploadSarifApplicationJSONForbidden) codeScanningUploadSarifResponse() {}

type CodeScanningUploadSarifApplicationJSONNotFound BasicError

func (*CodeScanningUploadSarifApplicationJSONNotFound) codeScanningUploadSarifResponse() {}

type CodeScanningUploadSarifApplicationJSONRequest struct {
	CheckoutURI *string                       `json:"checkout_uri"`
	CommitSha   CodeScanningAnalysisCommitSha `json:"commit_sha"`
	Ref         CodeScanningRef               `json:"ref"`
	Sarif       CodeScanningAnalysisSarifFile `json:"sarif"`
	StartedAt   *time.Time                    `json:"started_at"`
	ToolName    *string                       `json:"tool_name"`
}

type CodeScanningUploadSarifBadRequest struct{}

func (*CodeScanningUploadSarifBadRequest) codeScanningUploadSarifResponse() {}

type CodeScanningUploadSarifRequestEntityTooLarge struct{}

func (*CodeScanningUploadSarifRequestEntityTooLarge) codeScanningUploadSarifResponse() {}

type CodesOfConductGetAllCodesOfConductOK []CodeOfConduct

func (*CodesOfConductGetAllCodesOfConductOK) codesOfConductGetAllCodesOfConductResponse() {}

type CombinedBillingUsage struct {
	DaysLeftInBillingCycle       int `json:"days_left_in_billing_cycle"`
	EstimatedPaidStorageForMonth int `json:"estimated_paid_storage_for_month"`
	EstimatedStorageForMonth     int `json:"estimated_storage_for_month"`
}

type CombinedCommitStatus struct {
	CommitURL  string               `json:"commit_url"`
	Repository MinimalRepository    `json:"repository"`
	Sha        string               `json:"sha"`
	State      string               `json:"state"`
	Statuses   []SimpleCommitStatus `json:"statuses"`
	TotalCount int                  `json:"total_count"`
	URL        string               `json:"url"`
}

func (*CombinedCommitStatus) reposGetCombinedStatusForRefResponse() {}

type Commit struct {
	Author      NullableSimpleUser  `json:"author"`
	CommentsURL string              `json:"comments_url"`
	Commit      CommitCommit        `json:"commit"`
	Committer   NullableSimpleUser  `json:"committer"`
	Files       *[]CommitFilesItem  `json:"files"`
	HTMLURL     string              `json:"html_url"`
	NodeID      string              `json:"node_id"`
	Parents     []CommitParentsItem `json:"parents"`
	Sha         string              `json:"sha"`
	Stats       *CommitStats        `json:"stats"`
	URL         string              `json:"url"`
}

type CommitActivity struct {
	Days  []int `json:"days"`
	Total int   `json:"total"`
	Week  int   `json:"week"`
}

type CommitComment struct {
	AuthorAssociation AuthorAssociation  `json:"author_association"`
	Body              string             `json:"body"`
	CommitID          string             `json:"commit_id"`
	CreatedAt         time.Time          `json:"created_at"`
	HTMLURL           string             `json:"html_url"`
	ID                int                `json:"id"`
	Line              int                `json:"line"`
	NodeID            string             `json:"node_id"`
	Path              string             `json:"path"`
	Position          int                `json:"position"`
	Reactions         *ReactionRollup    `json:"reactions"`
	URL               string             `json:"url"`
	UpdatedAt         time.Time          `json:"updated_at"`
	User              NullableSimpleUser `json:"user"`
}

func (*CommitComment) reposGetCommitCommentResponse()    {}
func (*CommitComment) reposUpdateCommitCommentResponse() {}

type CommitCommit struct {
	Author       NullableGitUser  `json:"author"`
	CommentCount int              `json:"comment_count"`
	Committer    NullableGitUser  `json:"committer"`
	Message      string           `json:"message"`
	Tree         CommitCommitTree `json:"tree"`
	URL          string           `json:"url"`
	Verification *Verification    `json:"verification"`
}

type CommitCommitTree struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type CommitComparison struct {
	AheadBy         int                    `json:"ahead_by"`
	BaseCommit      Commit                 `json:"base_commit"`
	BehindBy        int                    `json:"behind_by"`
	Commits         []Commit               `json:"commits"`
	DiffURL         string                 `json:"diff_url"`
	Files           *[]DiffEntry           `json:"files"`
	HTMLURL         string                 `json:"html_url"`
	MergeBaseCommit Commit                 `json:"merge_base_commit"`
	PatchURL        string                 `json:"patch_url"`
	PermalinkURL    string                 `json:"permalink_url"`
	Status          CommitComparisonStatus `json:"status"`
	TotalCommits    int                    `json:"total_commits"`
	URL             string                 `json:"url"`
}

func (*CommitComparison) reposCompareCommitsResponse() {}

type CommitComparisonStatus string

const (
	CommitComparisonStatusDiverged  CommitComparisonStatus = "diverged"
	CommitComparisonStatusAhead     CommitComparisonStatus = "ahead"
	CommitComparisonStatusBehind    CommitComparisonStatus = "behind"
	CommitComparisonStatusIdentical CommitComparisonStatus = "identical"
)

type CommitFilesItem struct {
	Additions        *int    `json:"additions"`
	BlobURL          *string `json:"blob_url"`
	Changes          *int    `json:"changes"`
	ContentsURL      *string `json:"contents_url"`
	Deletions        *int    `json:"deletions"`
	Filename         *string `json:"filename"`
	Patch            *string `json:"patch"`
	PreviousFilename *string `json:"previous_filename"`
	RawURL           *string `json:"raw_url"`
	Sha              *string `json:"sha"`
	Status           *string `json:"status"`
}

type CommitParentsItem struct {
	HTMLURL *string `json:"html_url"`
	Sha     string  `json:"sha"`
	URL     string  `json:"url"`
}

type CommitStats struct {
	Additions *int `json:"additions"`
	Deletions *int `json:"deletions"`
	Total     *int `json:"total"`
}

type CommunityProfile struct {
	ContentReportsEnabled *bool                 `json:"content_reports_enabled"`
	Description           string                `json:"description"`
	Documentation         string                `json:"documentation"`
	Files                 CommunityProfileFiles `json:"files"`
	HealthPercentage      int                   `json:"health_percentage"`
	UpdatedAt             time.Time             `json:"updated_at"`
}

type CommunityProfileFiles struct {
	CodeOfConduct       NullableCodeOfConductSimple `json:"code_of_conduct"`
	CodeOfConductFile   NullableCommunityHealthFile `json:"code_of_conduct_file"`
	Contributing        NullableCommunityHealthFile `json:"contributing"`
	IssueTemplate       NullableCommunityHealthFile `json:"issue_template"`
	License             NullableLicenseSimple       `json:"license"`
	PullRequestTemplate NullableCommunityHealthFile `json:"pull_request_template"`
	Readme              NullableCommunityHealthFile `json:"readme"`
}

type ContentFile struct {
	Content         string           `json:"content"`
	DownloadURL     string           `json:"download_url"`
	Encoding        string           `json:"encoding"`
	GitURL          string           `json:"git_url"`
	HTMLURL         string           `json:"html_url"`
	Links           ContentFileLinks `json:"_links"`
	Name            string           `json:"name"`
	Path            string           `json:"path"`
	Sha             string           `json:"sha"`
	Size            int              `json:"size"`
	SubmoduleGitURL *string          `json:"submodule_git_url"`
	Target          *string          `json:"target"`
	Type            string           `json:"type"`
	URL             string           `json:"url"`
}

type ContentFileLinks struct {
	Git  string `json:"git"`
	HTML string `json:"html"`
	Self string `json:"self"`
}

type ContentReferenceAttachment struct {
	Body   string  `json:"body"`
	ID     int     `json:"id"`
	NodeID *string `json:"node_id"`
	Title  string  `json:"title"`
}

type ContentTraffic struct {
	Count   int    `json:"count"`
	Path    string `json:"path"`
	Title   string `json:"title"`
	Uniques int    `json:"uniques"`
}

type Contributor struct {
	AvatarURL         *string `json:"avatar_url"`
	Contributions     int     `json:"contributions"`
	Email             *string `json:"email"`
	EventsURL         *string `json:"events_url"`
	FollowersURL      *string `json:"followers_url"`
	FollowingURL      *string `json:"following_url"`
	GistsURL          *string `json:"gists_url"`
	GravatarID        *string `json:"gravatar_id"`
	HTMLURL           *string `json:"html_url"`
	ID                *int    `json:"id"`
	Login             *string `json:"login"`
	Name              *string `json:"name"`
	NodeID            *string `json:"node_id"`
	OrganizationsURL  *string `json:"organizations_url"`
	ReceivedEventsURL *string `json:"received_events_url"`
	ReposURL          *string `json:"repos_url"`
	SiteAdmin         *bool   `json:"site_admin"`
	StarredURL        *string `json:"starred_url"`
	SubscriptionsURL  *string `json:"subscriptions_url"`
	Type              string  `json:"type"`
	URL               *string `json:"url"`
}

type ContributorActivity struct {
	Author NullableSimpleUser             `json:"author"`
	Total  int                            `json:"total"`
	Weeks  []ContributorActivityWeeksItem `json:"weeks"`
}

type ContributorActivityWeeksItem struct {
	A *int `json:"a"`
	C *int `json:"c"`
	D *int `json:"d"`
	W *int `json:"w"`
}

type CredentialAuthorization struct {
	AuthorizedCredentialID    *int       `json:"authorized_credential_id"`
	AuthorizedCredentialNote  *string    `json:"authorized_credential_note"`
	AuthorizedCredentialTitle *string    `json:"authorized_credential_title"`
	CredentialAccessedAt      *time.Time `json:"credential_accessed_at"`
	CredentialAuthorizedAt    time.Time  `json:"credential_authorized_at"`
	CredentialID              int        `json:"credential_id"`
	CredentialType            string     `json:"credential_type"`
	Fingerprint               *string    `json:"fingerprint"`
	Login                     string     `json:"login"`
	Scopes                    *[]string  `json:"scopes"`
	TokenLastEight            *string    `json:"token_last_eight"`
}

type DeployKey struct {
	CreatedAt string `json:"created_at"`
	ID        int    `json:"id"`
	Key       string `json:"key"`
	ReadOnly  bool   `json:"read_only"`
	Title     string `json:"title"`
	URL       string `json:"url"`
	Verified  bool   `json:"verified"`
}

func (*DeployKey) reposGetDeployKeyResponse() {}

type DeploymentBranchPolicy struct {
	CustomBranchPolicies bool `json:"custom_branch_policies"`
	ProtectedBranches    bool `json:"protected_branches"`
}

type DeploymentReviewerType string

const (
	DeploymentReviewerTypeUser DeploymentReviewerType = "User"
	DeploymentReviewerTypeTeam DeploymentReviewerType = "Team"
)

type DeploymentSimple struct {
	CreatedAt             time.Time            `json:"created_at"`
	Description           string               `json:"description"`
	Environment           string               `json:"environment"`
	ID                    int                  `json:"id"`
	NodeID                string               `json:"node_id"`
	OriginalEnvironment   *string              `json:"original_environment"`
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	ProductionEnvironment *bool                `json:"production_environment"`
	RepositoryURL         string               `json:"repository_url"`
	StatusesURL           string               `json:"statuses_url"`
	Task                  string               `json:"task"`
	TransientEnvironment  *bool                `json:"transient_environment"`
	URL                   string               `json:"url"`
	UpdatedAt             time.Time            `json:"updated_at"`
}

type DeploymentStatus struct {
	CreatedAt             time.Time             `json:"created_at"`
	Creator               NullableSimpleUser    `json:"creator"`
	DeploymentURL         string                `json:"deployment_url"`
	Description           string                `json:"description"`
	Environment           *string               `json:"environment"`
	EnvironmentURL        *string               `json:"environment_url"`
	ID                    int                   `json:"id"`
	LogURL                *string               `json:"log_url"`
	NodeID                string                `json:"node_id"`
	PerformedViaGithubApp *NullableIntegration  `json:"performed_via_github_app"`
	RepositoryURL         string                `json:"repository_url"`
	State                 DeploymentStatusState `json:"state"`
	TargetURL             string                `json:"target_url"`
	URL                   string                `json:"url"`
	UpdatedAt             time.Time             `json:"updated_at"`
}

func (*DeploymentStatus) reposGetDeploymentStatusResponse() {}

type DeploymentStatusState string

const (
	DeploymentStatusStateError      DeploymentStatusState = "error"
	DeploymentStatusStateFailure    DeploymentStatusState = "failure"
	DeploymentStatusStateInactive   DeploymentStatusState = "inactive"
	DeploymentStatusStatePending    DeploymentStatusState = "pending"
	DeploymentStatusStateSuccess    DeploymentStatusState = "success"
	DeploymentStatusStateQueued     DeploymentStatusState = "queued"
	DeploymentStatusStateInProgress DeploymentStatusState = "in_progress"
)

type DiffEntry struct {
	Additions        int             `json:"additions"`
	BlobURL          string          `json:"blob_url"`
	Changes          int             `json:"changes"`
	ContentsURL      string          `json:"contents_url"`
	Deletions        int             `json:"deletions"`
	Filename         string          `json:"filename"`
	Patch            *string         `json:"patch"`
	PreviousFilename *string         `json:"previous_filename"`
	RawURL           string          `json:"raw_url"`
	Sha              string          `json:"sha"`
	Status           DiffEntryStatus `json:"status"`
}

type DiffEntryStatus string

const (
	DiffEntryStatusAdded     DiffEntryStatus = "added"
	DiffEntryStatusRemoved   DiffEntryStatus = "removed"
	DiffEntryStatusModified  DiffEntryStatus = "modified"
	DiffEntryStatusRenamed   DiffEntryStatus = "renamed"
	DiffEntryStatusCopied    DiffEntryStatus = "copied"
	DiffEntryStatusChanged   DiffEntryStatus = "changed"
	DiffEntryStatusUnchanged DiffEntryStatus = "unchanged"
)

type Email struct {
	Email      string `json:"email"`
	Primary    bool   `json:"primary"`
	Verified   bool   `json:"verified"`
	Visibility string `json:"visibility"`
}

type EmojisGetOK struct{}

func (*EmojisGetOK) emojisGetResponse() {}

type EmptyObject struct{}

func (*EmptyObject) actionsApproveWorkflowRunResponse()              {}
func (*EmptyObject) actionsCreateOrUpdateEnvironmentSecretResponse() {}
func (*EmptyObject) actionsCreateOrUpdateOrgSecretResponse()         {}
func (*EmptyObject) reposGetPagesHealthCheckResponse()               {}

type EnabledOrganizations string

const (
	EnabledOrganizationsAll      EnabledOrganizations = "all"
	EnabledOrganizationsNone     EnabledOrganizations = "none"
	EnabledOrganizationsSelected EnabledOrganizations = "selected"
)

type EnabledRepositories string

const (
	EnabledRepositoriesAll      EnabledRepositories = "all"
	EnabledRepositoriesNone     EnabledRepositories = "none"
	EnabledRepositoriesSelected EnabledRepositories = "selected"
)

type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise struct{}

type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise struct{}

type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest struct {
	Name                    string                                                                                   `json:"name"`
	Runners                 *[]int                                                                                   `json:"runners"`
	SelectedOrganizationIds *[]int                                                                                   `json:"selected_organization_ids"`
	Visibility              *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility `json:"visibility"`
}

type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility string

const (
	EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibilitySelected EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility = "selected"
	EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibilityAll      EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility = "all"
)

type EnterpriseAdminDeleteScimGroupFromEnterprise struct{}

type EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise struct{}

type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise struct{}

type EnterpriseAdminDeleteUserFromEnterprise struct{}

type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise struct{}

type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise struct{}

type EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise struct {
	Organizations []OrganizationSimple `json:"organizations"`
	TotalCount    float64              `json:"total_count"`
}

type EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise struct {
	Organizations []OrganizationSimple `json:"organizations"`
	TotalCount    float64              `json:"total_count"`
}

type EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise struct {
	RunnerGroups []RunnerGroupsEnterprise `json:"runner_groups"`
	TotalCount   float64                  `json:"total_count"`
}

type EnterpriseAdminListSelfHostedRunnersForEnterprise struct {
	Runners    *[]Runner `json:"runners"`
	TotalCount *float64  `json:"total_count"`
}

type EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise struct {
	Runners    []Runner `json:"runners"`
	TotalCount float64  `json:"total_count"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest struct {
	DisplayName string                                                                               `json:"displayName"`
	Members     *[]EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequestMembersItem `json:"members"`
	Schemas     []string                                                                             `json:"schemas"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequestMembersItem struct {
	Value string `json:"value"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest struct {
	Emails   []EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestEmailsItem  `json:"emails"`
	Groups   *[]EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestGroupsItem `json:"groups"`
	Name     EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestName          `json:"name"`
	Schemas  []string                                                                           `json:"schemas"`
	UserName string                                                                             `json:"userName"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestEmailsItem struct {
	Primary bool   `json:"primary"`
	Type    string `json:"type"`
	Value   string `json:"value"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestGroupsItem struct {
	Value *string `json:"value"`
}

type EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequestName struct {
	FamilyName string `json:"familyName"`
	GivenName  string `json:"givenName"`
}

type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise struct{}

type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise struct{}

type EnterpriseAdminSetAllowedActionsEnterprise struct{}

type EnterpriseAdminSetGithubActionsPermissionsEnterprise struct{}

type EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest struct {
	AllowedActions       *AllowedActions      `json:"allowed_actions"`
	EnabledOrganizations EnabledOrganizations `json:"enabled_organizations"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest struct {
	DisplayName string                                                                                         `json:"displayName"`
	Members     *[]EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequestMembersItem `json:"members"`
	Schemas     []string                                                                                       `json:"schemas"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequestMembersItem struct {
	Value string `json:"value"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest struct {
	Emails   []EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestEmailsItem  `json:"emails"`
	Groups   *[]EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestGroupsItem `json:"groups"`
	Name     EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestName          `json:"name"`
	Schemas  []string                                                                                     `json:"schemas"`
	UserName string                                                                                       `json:"userName"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestEmailsItem struct {
	Primary bool   `json:"primary"`
	Type    string `json:"type"`
	Value   string `json:"value"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestGroupsItem struct {
	Value *string `json:"value"`
}

type EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequestName struct {
	FamilyName string `json:"familyName"`
	GivenName  string `json:"givenName"`
}

type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise struct{}

type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest struct {
	SelectedOrganizationIds []int `json:"selected_organization_ids"`
}

type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise struct{}

type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest struct {
	SelectedOrganizationIds []int `json:"selected_organization_ids"`
}

type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise struct{}

type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest struct {
	Runners []int `json:"runners"`
}

type EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest struct {
	Operations []struct{} `json:"Operations"`
	Schemas    []string   `json:"schemas"`
}

type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest struct {
	Name       *string                                                                                  `json:"name"`
	Visibility *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility `json:"visibility"`
}

type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility string

const (
	EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibilitySelected EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility = "selected"
	EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibilityAll      EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequestVisibility = "all"
)

type EnvironmentApprovals struct {
	Comment      string                                 `json:"comment"`
	Environments []EnvironmentApprovalsEnvironmentsItem `json:"environments"`
	State        EnvironmentApprovalsState              `json:"state"`
	User         SimpleUser                             `json:"user"`
}

type EnvironmentApprovalsEnvironmentsItem struct {
	CreatedAt *time.Time `json:"created_at"`
	HTMLURL   *string    `json:"html_url"`
	ID        *int       `json:"id"`
	Name      *string    `json:"name"`
	NodeID    *string    `json:"node_id"`
	URL       *string    `json:"url"`
	UpdatedAt *time.Time `json:"updated_at"`
}

type EnvironmentApprovalsState string

const (
	EnvironmentApprovalsStateApproved EnvironmentApprovalsState = "approved"
	EnvironmentApprovalsStateRejected EnvironmentApprovalsState = "rejected"
)

type Event struct {
	Actor     Actor        `json:"actor"`
	CreatedAt time.Time    `json:"created_at"`
	ID        string       `json:"id"`
	Org       *Actor       `json:"org"`
	Payload   EventPayload `json:"payload"`
	Public    bool         `json:"public"`
	Repo      EventRepo    `json:"repo"`
	Type      string       `json:"type"`
}

type EventPayload struct {
	Action  *string                  `json:"action"`
	Comment *IssueComment            `json:"comment"`
	Issue   *IssueSimple             `json:"issue"`
	Pages   *[]EventPayloadPagesItem `json:"pages"`
}

type EventPayloadPagesItem struct {
	Action   *string `json:"action"`
	HTMLURL  *string `json:"html_url"`
	PageName *string `json:"page_name"`
	Sha      *string `json:"sha"`
	Summary  *string `json:"summary"`
	Title    *string `json:"title"`
}

type EventRepo struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	URL  string `json:"url"`
}

type Feed struct {
	CurrentUserActorURL         *string   `json:"current_user_actor_url"`
	CurrentUserOrganizationURL  *string   `json:"current_user_organization_url"`
	CurrentUserOrganizationUrls *[]string `json:"current_user_organization_urls"`
	CurrentUserPublicURL        *string   `json:"current_user_public_url"`
	CurrentUserURL              *string   `json:"current_user_url"`
	Links                       FeedLinks `json:"_links"`
	SecurityAdvisoriesURL       *string   `json:"security_advisories_url"`
	TimelineURL                 string    `json:"timeline_url"`
	UserURL                     string    `json:"user_url"`
}

type FeedLinks struct {
	CurrentUser              *LinkWithType   `json:"current_user"`
	CurrentUserActor         *LinkWithType   `json:"current_user_actor"`
	CurrentUserOrganization  *LinkWithType   `json:"current_user_organization"`
	CurrentUserOrganizations *[]LinkWithType `json:"current_user_organizations"`
	CurrentUserPublic        *LinkWithType   `json:"current_user_public"`
	SecurityAdvisories       *LinkWithType   `json:"security_advisories"`
	Timeline                 LinkWithType    `json:"timeline"`
	User                     LinkWithType    `json:"user"`
}

type FileCommit struct {
	Commit  FileCommitCommit  `json:"commit"`
	Content FileCommitContent `json:"content"`
}

type FileCommitCommit struct {
	Author       *FileCommitCommitAuthor        `json:"author"`
	Committer    *FileCommitCommitCommitter     `json:"committer"`
	HTMLURL      *string                        `json:"html_url"`
	Message      *string                        `json:"message"`
	NodeID       *string                        `json:"node_id"`
	Parents      *[]FileCommitCommitParentsItem `json:"parents"`
	Sha          *string                        `json:"sha"`
	Tree         *FileCommitCommitTree          `json:"tree"`
	URL          *string                        `json:"url"`
	Verification *FileCommitCommitVerification  `json:"verification"`
}

type FileCommitCommitAuthor struct {
	Date  *string `json:"date"`
	Email *string `json:"email"`
	Name  *string `json:"name"`
}

type FileCommitCommitCommitter struct {
	Date  *string `json:"date"`
	Email *string `json:"email"`
	Name  *string `json:"name"`
}

type FileCommitCommitParentsItem struct {
	HTMLURL *string `json:"html_url"`
	Sha     *string `json:"sha"`
	URL     *string `json:"url"`
}

type FileCommitCommitTree struct {
	Sha *string `json:"sha"`
	URL *string `json:"url"`
}

type FileCommitCommitVerification struct {
	Payload   *string `json:"payload"`
	Reason    *string `json:"reason"`
	Signature *string `json:"signature"`
	Verified  *bool   `json:"verified"`
}

type FileCommitContent struct {
	DownloadURL *string                 `json:"download_url"`
	GitURL      *string                 `json:"git_url"`
	HTMLURL     *string                 `json:"html_url"`
	Links       *FileCommitContentLinks `json:"_links"`
	Name        *string                 `json:"name"`
	Path        *string                 `json:"path"`
	Sha         *string                 `json:"sha"`
	Size        *int                    `json:"size"`
	Type        *string                 `json:"type"`
	URL         *string                 `json:"url"`
}

type FileCommitContentLinks struct {
	Git  *string `json:"git"`
	HTML *string `json:"html"`
	Self *string `json:"self"`
}

type ForbiddenGist struct {
	Block            *ForbiddenGistBlock `json:"block"`
	DocumentationURL *string             `json:"documentation_url"`
	Message          *string             `json:"message"`
}

func (*ForbiddenGist) gistsGetCommentResponse() {}
func (*ForbiddenGist) gistsGetResponse()        {}

type ForbiddenGistBlock struct {
	CreatedAt *string `json:"created_at"`
	HTMLURL   *string `json:"html_url"`
	Reason    *string `json:"reason"`
}

type Found struct{}

func (*Found) reposGetReleaseAssetResponse() {}

type FullRepository struct {
	AllowAutoMerge         *bool                              `json:"allow_auto_merge"`
	AllowForking           *bool                              `json:"allow_forking"`
	AllowMergeCommit       *bool                              `json:"allow_merge_commit"`
	AllowRebaseMerge       *bool                              `json:"allow_rebase_merge"`
	AllowSquashMerge       *bool                              `json:"allow_squash_merge"`
	AnonymousAccessEnabled *bool                              `json:"anonymous_access_enabled"`
	ArchiveURL             string                             `json:"archive_url"`
	Archived               bool                               `json:"archived"`
	AssigneesURL           string                             `json:"assignees_url"`
	BlobsURL               string                             `json:"blobs_url"`
	BranchesURL            string                             `json:"branches_url"`
	CloneURL               string                             `json:"clone_url"`
	CodeOfConduct          *CodeOfConductSimple               `json:"code_of_conduct"`
	CollaboratorsURL       string                             `json:"collaborators_url"`
	CommentsURL            string                             `json:"comments_url"`
	CommitsURL             string                             `json:"commits_url"`
	CompareURL             string                             `json:"compare_url"`
	ContentsURL            string                             `json:"contents_url"`
	ContributorsURL        string                             `json:"contributors_url"`
	CreatedAt              time.Time                          `json:"created_at"`
	DefaultBranch          string                             `json:"default_branch"`
	DeleteBranchOnMerge    *bool                              `json:"delete_branch_on_merge"`
	DeploymentsURL         string                             `json:"deployments_url"`
	Description            string                             `json:"description"`
	Disabled               bool                               `json:"disabled"`
	DownloadsURL           string                             `json:"downloads_url"`
	EventsURL              string                             `json:"events_url"`
	Fork                   bool                               `json:"fork"`
	Forks                  int                                `json:"forks"`
	ForksCount             int                                `json:"forks_count"`
	ForksURL               string                             `json:"forks_url"`
	FullName               string                             `json:"full_name"`
	GitCommitsURL          string                             `json:"git_commits_url"`
	GitRefsURL             string                             `json:"git_refs_url"`
	GitTagsURL             string                             `json:"git_tags_url"`
	GitURL                 string                             `json:"git_url"`
	HTMLURL                string                             `json:"html_url"`
	HasDownloads           bool                               `json:"has_downloads"`
	HasIssues              bool                               `json:"has_issues"`
	HasPages               bool                               `json:"has_pages"`
	HasProjects            bool                               `json:"has_projects"`
	HasWiki                bool                               `json:"has_wiki"`
	Homepage               string                             `json:"homepage"`
	HooksURL               string                             `json:"hooks_url"`
	ID                     int                                `json:"id"`
	IsTemplate             *bool                              `json:"is_template"`
	IssueCommentURL        string                             `json:"issue_comment_url"`
	IssueEventsURL         string                             `json:"issue_events_url"`
	IssuesURL              string                             `json:"issues_url"`
	KeysURL                string                             `json:"keys_url"`
	LabelsURL              string                             `json:"labels_url"`
	Language               string                             `json:"language"`
	LanguagesURL           string                             `json:"languages_url"`
	License                NullableLicenseSimple              `json:"license"`
	MasterBranch           *string                            `json:"master_branch"`
	MergesURL              string                             `json:"merges_url"`
	MilestonesURL          string                             `json:"milestones_url"`
	MirrorURL              string                             `json:"mirror_url"`
	Name                   string                             `json:"name"`
	NetworkCount           int                                `json:"network_count"`
	NodeID                 string                             `json:"node_id"`
	NotificationsURL       string                             `json:"notifications_url"`
	OpenIssues             int                                `json:"open_issues"`
	OpenIssuesCount        int                                `json:"open_issues_count"`
	Organization           *NullableSimpleUser                `json:"organization"`
	Owner                  SimpleUser                         `json:"owner"`
	Parent                 *Repository                        `json:"parent"`
	Permissions            *FullRepositoryPermissions         `json:"permissions"`
	Private                bool                               `json:"private"`
	PullsURL               string                             `json:"pulls_url"`
	PushedAt               time.Time                          `json:"pushed_at"`
	ReleasesURL            string                             `json:"releases_url"`
	SSHURL                 string                             `json:"ssh_url"`
	SecurityAndAnalysis    *FullRepositorySecurityAndAnalysis `json:"security_and_analysis"`
	Size                   int                                `json:"size"`
	Source                 *Repository                        `json:"source"`
	StargazersCount        int                                `json:"stargazers_count"`
	StargazersURL          string                             `json:"stargazers_url"`
	StatusesURL            string                             `json:"statuses_url"`
	SubscribersCount       int                                `json:"subscribers_count"`
	SubscribersURL         string                             `json:"subscribers_url"`
	SubscriptionURL        string                             `json:"subscription_url"`
	SvnURL                 string                             `json:"svn_url"`
	TagsURL                string                             `json:"tags_url"`
	TeamsURL               string                             `json:"teams_url"`
	TempCloneToken         *string                            `json:"temp_clone_token"`
	TemplateRepository     *NullableRepository                `json:"template_repository"`
	Topics                 *[]string                          `json:"topics"`
	TreesURL               string                             `json:"trees_url"`
	URL                    string                             `json:"url"`
	UpdatedAt              time.Time                          `json:"updated_at"`
	Visibility             *string                            `json:"visibility"`
	Watchers               int                                `json:"watchers"`
	WatchersCount          int                                `json:"watchers_count"`
}

func (*FullRepository) reposGetResponse() {}

type FullRepositoryPermissions struct {
	Admin    bool  `json:"admin"`
	Maintain *bool `json:"maintain"`
	Pull     bool  `json:"pull"`
	Push     bool  `json:"push"`
	Triage   *bool `json:"triage"`
}

type FullRepositorySecurityAndAnalysis struct {
	AdvancedSecurity *FullRepositorySecurityAndAnalysisAdvancedSecurity `json:"advanced_security"`
	SecretScanning   *FullRepositorySecurityAndAnalysisSecretScanning   `json:"secret_scanning"`
}

type FullRepositorySecurityAndAnalysisAdvancedSecurity struct {
	Status *FullRepositorySecurityAndAnalysisAdvancedSecurityStatus `json:"status"`
}

type FullRepositorySecurityAndAnalysisAdvancedSecurityStatus string

const (
	FullRepositorySecurityAndAnalysisAdvancedSecurityStatusEnabled  FullRepositorySecurityAndAnalysisAdvancedSecurityStatus = "enabled"
	FullRepositorySecurityAndAnalysisAdvancedSecurityStatusDisabled FullRepositorySecurityAndAnalysisAdvancedSecurityStatus = "disabled"
)

type FullRepositorySecurityAndAnalysisSecretScanning struct {
	Status *FullRepositorySecurityAndAnalysisSecretScanningStatus `json:"status"`
}

type FullRepositorySecurityAndAnalysisSecretScanningStatus string

const (
	FullRepositorySecurityAndAnalysisSecretScanningStatusEnabled  FullRepositorySecurityAndAnalysisSecretScanningStatus = "enabled"
	FullRepositorySecurityAndAnalysisSecretScanningStatusDisabled FullRepositorySecurityAndAnalysisSecretScanningStatus = "disabled"
)

type GistComment struct {
	AuthorAssociation AuthorAssociation  `json:"author_association"`
	Body              string             `json:"body"`
	CreatedAt         time.Time          `json:"created_at"`
	ID                int                `json:"id"`
	NodeID            string             `json:"node_id"`
	URL               string             `json:"url"`
	UpdatedAt         time.Time          `json:"updated_at"`
	User              NullableSimpleUser `json:"user"`
}

func (*GistComment) gistsCreateCommentResponse() {}
func (*GistComment) gistsGetCommentResponse()    {}
func (*GistComment) gistsUpdateCommentResponse() {}

type GistCommit struct {
	ChangeStatus GistCommitChangeStatus `json:"change_status"`
	CommittedAt  time.Time              `json:"committed_at"`
	URL          string                 `json:"url"`
	User         NullableSimpleUser     `json:"user"`
	Version      string                 `json:"version"`
}

type GistCommitChangeStatus struct {
	Additions *int `json:"additions"`
	Deletions *int `json:"deletions"`
	Total     *int `json:"total"`
}

type GistHistory struct {
	ChangeStatus *GistHistoryChangeStatus `json:"change_status"`
	CommittedAt  *time.Time               `json:"committed_at"`
	URL          *string                  `json:"url"`
	User         *NullableSimpleUser      `json:"user"`
	Version      *string                  `json:"version"`
}

type GistHistoryChangeStatus struct {
	Additions *int `json:"additions"`
	Deletions *int `json:"deletions"`
	Total     *int `json:"total"`
}

type GistSimple struct {
	Comments    *int                   `json:"comments"`
	CommentsURL *string                `json:"comments_url"`
	CommitsURL  *string                `json:"commits_url"`
	CreatedAt   *string                `json:"created_at"`
	Description *string                `json:"description"`
	Files       *struct{}              `json:"files"`
	ForkOf      *GistSimpleForkOf      `json:"fork_of"`
	Forks       *[]GistSimpleForksItem `json:"forks"`
	ForksURL    *string                `json:"forks_url"`
	GitPullURL  *string                `json:"git_pull_url"`
	GitPushURL  *string                `json:"git_push_url"`
	HTMLURL     *string                `json:"html_url"`
	History     *[]GistHistory         `json:"history"`
	ID          *string                `json:"id"`
	NodeID      *string                `json:"node_id"`
	Owner       *SimpleUser            `json:"owner"`
	Public      *bool                  `json:"public"`
	Truncated   *bool                  `json:"truncated"`
	URL         *string                `json:"url"`
	UpdatedAt   *string                `json:"updated_at"`
	User        *string                `json:"user"`
}

func (*GistSimple) gistsGetResponse() {}

type GistSimpleForkOf struct {
	Comments    int                 `json:"comments"`
	CommentsURL string              `json:"comments_url"`
	CommitsURL  string              `json:"commits_url"`
	CreatedAt   time.Time           `json:"created_at"`
	Description string              `json:"description"`
	Files       struct{}            `json:"files"`
	Forks       *[]string           `json:"forks"`
	ForksURL    string              `json:"forks_url"`
	GitPullURL  string              `json:"git_pull_url"`
	GitPushURL  string              `json:"git_push_url"`
	HTMLURL     string              `json:"html_url"`
	History     *[]string           `json:"history"`
	ID          string              `json:"id"`
	NodeID      string              `json:"node_id"`
	Owner       *NullableSimpleUser `json:"owner"`
	Public      bool                `json:"public"`
	Truncated   *bool               `json:"truncated"`
	URL         string              `json:"url"`
	UpdatedAt   time.Time           `json:"updated_at"`
	User        NullableSimpleUser  `json:"user"`
}

type GistSimpleForksItem struct {
	CreatedAt *time.Time  `json:"created_at"`
	ID        *string     `json:"id"`
	URL       *string     `json:"url"`
	UpdatedAt *time.Time  `json:"updated_at"`
	User      *PublicUser `json:"user"`
}

type GistsCheckIsStarredNoContent struct{}

func (*GistsCheckIsStarredNoContent) gistsCheckIsStarredResponse() {}

type GistsCheckIsStarredNotFound struct{}

func (*GistsCheckIsStarredNotFound) gistsCheckIsStarredResponse() {}

type GistsCreateCommentApplicationJSONForbidden BasicError

func (*GistsCreateCommentApplicationJSONForbidden) gistsCreateCommentResponse() {}

type GistsCreateCommentApplicationJSONNotFound BasicError

func (*GistsCreateCommentApplicationJSONNotFound) gistsCreateCommentResponse() {}

type GistsCreateCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type GistsDeleteApplicationJSONForbidden BasicError

func (*GistsDeleteApplicationJSONForbidden) gistsDeleteResponse() {}

type GistsDeleteApplicationJSONNotFound BasicError

func (*GistsDeleteApplicationJSONNotFound) gistsDeleteResponse() {}

type GistsDeleteCommentApplicationJSONForbidden BasicError

func (*GistsDeleteCommentApplicationJSONForbidden) gistsDeleteCommentResponse() {}

type GistsDeleteCommentApplicationJSONNotFound BasicError

func (*GistsDeleteCommentApplicationJSONNotFound) gistsDeleteCommentResponse() {}

type GistsDeleteCommentNoContent struct{}

func (*GistsDeleteCommentNoContent) gistsDeleteCommentResponse() {}

type GistsDeleteNoContent struct{}

func (*GistsDeleteNoContent) gistsDeleteResponse() {}

type GistsListCommentsApplicationJSONForbidden BasicError

func (*GistsListCommentsApplicationJSONForbidden) gistsListCommentsResponse() {}

type GistsListCommentsApplicationJSONNotFound BasicError

func (*GistsListCommentsApplicationJSONNotFound) gistsListCommentsResponse() {}

type GistsListCommentsOK []GistComment

func (*GistsListCommentsOK) gistsListCommentsResponse() {}

type GistsListCommitsApplicationJSONForbidden BasicError

func (*GistsListCommitsApplicationJSONForbidden) gistsListCommitsResponse() {}

type GistsListCommitsApplicationJSONNotFound BasicError

func (*GistsListCommitsApplicationJSONNotFound) gistsListCommitsResponse() {}

type GistsListCommitsOK []GistCommit

func (*GistsListCommitsOK) gistsListCommitsResponse() {}

type GistsListForUserOK []BaseGist

type GistsListForksApplicationJSONForbidden BasicError

func (*GistsListForksApplicationJSONForbidden) gistsListForksResponse() {}

type GistsListForksApplicationJSONNotFound BasicError

func (*GistsListForksApplicationJSONNotFound) gistsListForksResponse() {}

type GistsListForksOK []GistSimple

func (*GistsListForksOK) gistsListForksResponse() {}

type GistsListOK []BaseGist

func (*GistsListOK) gistsListResponse() {}

type GistsListPublicOK []BaseGist

type GistsListStarredApplicationJSONForbidden BasicError

func (*GistsListStarredApplicationJSONForbidden) gistsListStarredResponse() {}

type GistsListStarredApplicationJSONUnauthorized BasicError

func (*GistsListStarredApplicationJSONUnauthorized) gistsListStarredResponse() {}

type GistsListStarredOK []BaseGist

func (*GistsListStarredOK) gistsListStarredResponse() {}

type GistsStarApplicationJSONForbidden BasicError

func (*GistsStarApplicationJSONForbidden) gistsStarResponse() {}

type GistsStarApplicationJSONNotFound BasicError

func (*GistsStarApplicationJSONNotFound) gistsStarResponse() {}

type GistsStarNoContent struct{}

func (*GistsStarNoContent) gistsStarResponse() {}

type GistsUnstarApplicationJSONForbidden BasicError

func (*GistsUnstarApplicationJSONForbidden) gistsUnstarResponse() {}

type GistsUnstarApplicationJSONNotFound BasicError

func (*GistsUnstarApplicationJSONNotFound) gistsUnstarResponse() {}

type GistsUnstarNoContent struct{}

func (*GistsUnstarNoContent) gistsUnstarResponse() {}

type GistsUpdateCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type GitCommit struct {
	Author       GitCommitAuthor        `json:"author"`
	Committer    GitCommitCommitter     `json:"committer"`
	HTMLURL      string                 `json:"html_url"`
	Message      string                 `json:"message"`
	NodeID       string                 `json:"node_id"`
	Parents      []GitCommitParentsItem `json:"parents"`
	Sha          string                 `json:"sha"`
	Tree         GitCommitTree          `json:"tree"`
	URL          string                 `json:"url"`
	Verification GitCommitVerification  `json:"verification"`
}

func (*GitCommit) gitGetCommitResponse() {}

type GitCommitAuthor struct {
	Date  time.Time `json:"date"`
	Email string    `json:"email"`
	Name  string    `json:"name"`
}

type GitCommitCommitter struct {
	Date  time.Time `json:"date"`
	Email string    `json:"email"`
	Name  string    `json:"name"`
}

type GitCommitParentsItem struct {
	HTMLURL string `json:"html_url"`
	Sha     string `json:"sha"`
	URL     string `json:"url"`
}

type GitCommitTree struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type GitCommitVerification struct {
	Payload   string `json:"payload"`
	Reason    string `json:"reason"`
	Signature string `json:"signature"`
	Verified  bool   `json:"verified"`
}

type GitCreateBlobApplicationJSONRequest struct {
	Content  string  `json:"content"`
	Encoding *string `json:"encoding"`
}

func (*GitCreateBlobApplicationJSONRequest) gitCreateBlobRequest() {}

type GitCreateCommitApplicationJSONRequest struct {
	Author    *GitCreateCommitApplicationJSONRequestAuthor    `json:"author"`
	Committer *GitCreateCommitApplicationJSONRequestCommitter `json:"committer"`
	Message   string                                          `json:"message"`
	Parents   *[]string                                       `json:"parents"`
	Signature *string                                         `json:"signature"`
	Tree      string                                          `json:"tree"`
}

func (*GitCreateCommitApplicationJSONRequest) gitCreateCommitRequest() {}

type GitCreateCommitApplicationJSONRequestAuthor struct {
	Date  *time.Time `json:"date"`
	Email string     `json:"email"`
	Name  string     `json:"name"`
}

type GitCreateCommitApplicationJSONRequestCommitter struct {
	Date  *time.Time `json:"date"`
	Email *string    `json:"email"`
	Name  *string    `json:"name"`
}

type GitCreateRefApplicationJSONRequest struct {
	Key *string `json:"key"`
	Ref string  `json:"ref"`
	Sha string  `json:"sha"`
}

func (*GitCreateRefApplicationJSONRequest) gitCreateRefRequest() {}

type GitCreateTagApplicationJSONRequest struct {
	Message string                                    `json:"message"`
	Object  string                                    `json:"object"`
	Tag     string                                    `json:"tag"`
	Tagger  *GitCreateTagApplicationJSONRequestTagger `json:"tagger"`
	Type    GitCreateTagApplicationJSONRequestType    `json:"type"`
}

func (*GitCreateTagApplicationJSONRequest) gitCreateTagRequest() {}

type GitCreateTagApplicationJSONRequestTagger struct {
	Date  *time.Time `json:"date"`
	Email string     `json:"email"`
	Name  string     `json:"name"`
}

type GitCreateTagApplicationJSONRequestType string

const (
	GitCreateTagApplicationJSONRequestTypeCommit GitCreateTagApplicationJSONRequestType = "commit"
	GitCreateTagApplicationJSONRequestTypeTree   GitCreateTagApplicationJSONRequestType = "tree"
	GitCreateTagApplicationJSONRequestTypeBlob   GitCreateTagApplicationJSONRequestType = "blob"
)

type GitCreateTreeApplicationJSONRequest struct {
	BaseTree *string                                       `json:"base_tree"`
	Tree     []GitCreateTreeApplicationJSONRequestTreeItem `json:"tree"`
}

func (*GitCreateTreeApplicationJSONRequest) gitCreateTreeRequest() {}

type GitCreateTreeApplicationJSONRequestTreeItem struct {
	Content *string                                          `json:"content"`
	Mode    *GitCreateTreeApplicationJSONRequestTreeItemMode `json:"mode"`
	Path    *string                                          `json:"path"`
	Sha     *string                                          `json:"sha"`
	Type    *GitCreateTreeApplicationJSONRequestTreeItemType `json:"type"`
}

type GitCreateTreeApplicationJSONRequestTreeItemMode string

const (
	GitCreateTreeApplicationJSONRequestTreeItemMode100644 GitCreateTreeApplicationJSONRequestTreeItemMode = "100644"
	GitCreateTreeApplicationJSONRequestTreeItemMode100755 GitCreateTreeApplicationJSONRequestTreeItemMode = "100755"
	GitCreateTreeApplicationJSONRequestTreeItemMode040000 GitCreateTreeApplicationJSONRequestTreeItemMode = "040000"
	GitCreateTreeApplicationJSONRequestTreeItemMode160000 GitCreateTreeApplicationJSONRequestTreeItemMode = "160000"
	GitCreateTreeApplicationJSONRequestTreeItemMode120000 GitCreateTreeApplicationJSONRequestTreeItemMode = "120000"
)

type GitCreateTreeApplicationJSONRequestTreeItemType string

const (
	GitCreateTreeApplicationJSONRequestTreeItemTypeBlob   GitCreateTreeApplicationJSONRequestTreeItemType = "blob"
	GitCreateTreeApplicationJSONRequestTreeItemTypeTree   GitCreateTreeApplicationJSONRequestTreeItemType = "tree"
	GitCreateTreeApplicationJSONRequestTreeItemTypeCommit GitCreateTreeApplicationJSONRequestTreeItemType = "commit"
)

type GitDeleteRefNoContent struct{}

type GitRef struct {
	NodeID string       `json:"node_id"`
	Object GitRefObject `json:"object"`
	Ref    string       `json:"ref"`
	URL    string       `json:"url"`
}

func (*GitRef) gitGetRefResponse() {}

type GitRefObject struct {
	Sha  string `json:"sha"`
	Type string `json:"type"`
	URL  string `json:"url"`
}

type GitTag struct {
	Message      string        `json:"message"`
	NodeID       string        `json:"node_id"`
	Object       GitTagObject  `json:"object"`
	Sha          string        `json:"sha"`
	Tag          string        `json:"tag"`
	Tagger       GitTagTagger  `json:"tagger"`
	URL          string        `json:"url"`
	Verification *Verification `json:"verification"`
}

func (*GitTag) gitGetTagResponse() {}

type GitTagObject struct {
	Sha  string `json:"sha"`
	Type string `json:"type"`
	URL  string `json:"url"`
}

type GitTagTagger struct {
	Date  string `json:"date"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

type GitTree struct {
	Sha       string            `json:"sha"`
	Tree      []GitTreeTreeItem `json:"tree"`
	Truncated bool              `json:"truncated"`
	URL       string            `json:"url"`
}

type GitTreeTreeItem struct {
	Mode *string `json:"mode"`
	Path *string `json:"path"`
	Sha  *string `json:"sha"`
	Size *int    `json:"size"`
	Type *string `json:"type"`
	URL  *string `json:"url"`
}

type GitUpdateRefApplicationJSONRequest struct {
	Force *bool  `json:"force"`
	Sha   string `json:"sha"`
}

func (*GitUpdateRefApplicationJSONRequest) gitUpdateRefRequest() {}

type GitignoreGetAllTemplatesOK []string

func (*GitignoreGetAllTemplatesOK) gitignoreGetAllTemplatesResponse() {}

type GitignoreTemplate struct {
	Name   string `json:"name"`
	Source string `json:"source"`
}

func (*GitignoreTemplate) gitignoreGetTemplateResponse() {}

type GpgKey struct {
	CanCertify        bool                `json:"can_certify"`
	CanEncryptComms   bool                `json:"can_encrypt_comms"`
	CanEncryptStorage bool                `json:"can_encrypt_storage"`
	CanSign           bool                `json:"can_sign"`
	CreatedAt         time.Time           `json:"created_at"`
	Emails            []GpgKeyEmailsItem  `json:"emails"`
	ExpiresAt         time.Time           `json:"expires_at"`
	ID                int                 `json:"id"`
	KeyID             string              `json:"key_id"`
	PrimaryKeyID      int                 `json:"primary_key_id"`
	PublicKey         string              `json:"public_key"`
	RawKey            string              `json:"raw_key"`
	Subkeys           []GpgKeySubkeysItem `json:"subkeys"`
}

func (*GpgKey) usersGetGpgKeyForAuthenticatedResponse() {}

type GpgKeyEmailsItem struct {
	Email    *string `json:"email"`
	Verified *bool   `json:"verified"`
}

type GpgKeySubkeysItem struct {
	CanCertify        *bool     `json:"can_certify"`
	CanEncryptComms   *bool     `json:"can_encrypt_comms"`
	CanEncryptStorage *bool     `json:"can_encrypt_storage"`
	CanSign           *bool     `json:"can_sign"`
	CreatedAt         *string   `json:"created_at"`
	Emails            *[]string `json:"emails"`
	ExpiresAt         *string   `json:"expires_at"`
	ID                *int      `json:"id"`
	KeyID             *string   `json:"key_id"`
	PrimaryKeyID      *int      `json:"primary_key_id"`
	PublicKey         *string   `json:"public_key"`
	RawKey            *string   `json:"raw_key"`
	Subkeys           *[]string `json:"subkeys"`
}

type GroupMapping struct {
	Groups *[]GroupMappingGroupsItem `json:"groups"`
}

func (*GroupMapping) teamsListIdpGroupsForLegacyResponse() {}

type GroupMappingGroupsItem struct {
	GroupDescription string  `json:"group_description"`
	GroupID          string  `json:"group_id"`
	GroupName        string  `json:"group_name"`
	Status           *string `json:"status"`
	SyncedAt         *string `json:"synced_at"`
}

type HookDelivery struct {
	Action         string               `json:"action"`
	DeliveredAt    time.Time            `json:"delivered_at"`
	Duration       float64              `json:"duration"`
	Event          string               `json:"event"`
	GUID           string               `json:"guid"`
	ID             int                  `json:"id"`
	InstallationID int                  `json:"installation_id"`
	Redelivery     bool                 `json:"redelivery"`
	RepositoryID   int                  `json:"repository_id"`
	Request        HookDeliveryRequest  `json:"request"`
	Response       HookDeliveryResponse `json:"response"`
	Status         string               `json:"status"`
	StatusCode     int                  `json:"status_code"`
	URL            *string              `json:"url"`
}

type HookDeliveryItem struct {
	Action         string    `json:"action"`
	DeliveredAt    time.Time `json:"delivered_at"`
	Duration       float64   `json:"duration"`
	Event          string    `json:"event"`
	GUID           string    `json:"guid"`
	ID             int       `json:"id"`
	InstallationID int       `json:"installation_id"`
	Redelivery     bool      `json:"redelivery"`
	RepositoryID   int       `json:"repository_id"`
	Status         string    `json:"status"`
	StatusCode     int       `json:"status_code"`
}

type HookDeliveryRequest struct {
	Headers struct{} `json:"headers"`
	Payload struct{} `json:"payload"`
}

type HookDeliveryResponse struct {
	Headers struct{} `json:"headers"`
	Payload string   `json:"payload"`
}

type Import struct {
	AuthorsCount    *int                        `json:"authors_count"`
	AuthorsURL      string                      `json:"authors_url"`
	CommitCount     *int                        `json:"commit_count"`
	ErrorMessage    *string                     `json:"error_message"`
	FailedStep      *string                     `json:"failed_step"`
	HTMLURL         string                      `json:"html_url"`
	HasLargeFiles   *bool                       `json:"has_large_files"`
	ImportPercent   *int                        `json:"import_percent"`
	LargeFilesCount *int                        `json:"large_files_count"`
	LargeFilesSize  *int                        `json:"large_files_size"`
	Message         *string                     `json:"message"`
	ProjectChoices  *[]ImportProjectChoicesItem `json:"project_choices"`
	PushPercent     *int                        `json:"push_percent"`
	RepositoryURL   string                      `json:"repository_url"`
	Status          ImportStatus                `json:"status"`
	StatusText      *string                     `json:"status_text"`
	SvcRoot         *string                     `json:"svc_root"`
	SvnRoot         *string                     `json:"svn_root"`
	TfvcProject     *string                     `json:"tfvc_project"`
	URL             string                      `json:"url"`
	UseLfs          *bool                       `json:"use_lfs"`
	Vcs             string                      `json:"vcs"`
	VcsURL          string                      `json:"vcs_url"`
}

func (*Import) migrationsGetImportStatusResponse() {}

type ImportProjectChoicesItem struct {
	HumanName   *string `json:"human_name"`
	TfvcProject *string `json:"tfvc_project"`
	Vcs         *string `json:"vcs"`
}

type ImportStatus string

const (
	ImportStatusAuth                   ImportStatus = "auth"
	ImportStatusError                  ImportStatus = "error"
	ImportStatusNone                   ImportStatus = "none"
	ImportStatusDetecting              ImportStatus = "detecting"
	ImportStatusChoose                 ImportStatus = "choose"
	ImportStatusAuthFailed             ImportStatus = "auth_failed"
	ImportStatusImporting              ImportStatus = "importing"
	ImportStatusMapping                ImportStatus = "mapping"
	ImportStatusWaitingToPush          ImportStatus = "waiting_to_push"
	ImportStatusPushing                ImportStatus = "pushing"
	ImportStatusComplete               ImportStatus = "complete"
	ImportStatusSetup                  ImportStatus = "setup"
	ImportStatusUnknown                ImportStatus = "unknown"
	ImportStatusDetectionFoundMultiple ImportStatus = "detection_found_multiple"
	ImportStatusDetectionFoundNothing  ImportStatus = "detection_found_nothing"
	ImportStatusDetectionNeedsAuth     ImportStatus = "detection_needs_auth"
)

type InstallationToken struct {
	ExpiresAt              string                                `json:"expires_at"`
	HasMultipleSingleFiles *bool                                 `json:"has_multiple_single_files"`
	Permissions            *AppPermissions                       `json:"permissions"`
	Repositories           *[]Repository                         `json:"repositories"`
	RepositorySelection    *InstallationTokenRepositorySelection `json:"repository_selection"`
	SingleFile             *string                               `json:"single_file"`
	SingleFilePaths        *[]string                             `json:"single_file_paths"`
	Token                  string                                `json:"token"`
}

type InstallationTokenRepositorySelection string

const (
	InstallationTokenRepositorySelectionAll      InstallationTokenRepositorySelection = "all"
	InstallationTokenRepositorySelectionSelected InstallationTokenRepositorySelection = "selected"
)

type Integration struct {
	ClientID           *string                `json:"client_id"`
	ClientSecret       *string                `json:"client_secret"`
	CreatedAt          time.Time              `json:"created_at"`
	Description        string                 `json:"description"`
	Events             []string               `json:"events"`
	ExternalURL        string                 `json:"external_url"`
	HTMLURL            string                 `json:"html_url"`
	ID                 int                    `json:"id"`
	InstallationsCount *int                   `json:"installations_count"`
	Name               string                 `json:"name"`
	NodeID             string                 `json:"node_id"`
	Owner              NullableSimpleUser     `json:"owner"`
	Pem                *string                `json:"pem"`
	Permissions        IntegrationPermissions `json:"permissions"`
	Slug               *string                `json:"slug"`
	UpdatedAt          time.Time              `json:"updated_at"`
	WebhookSecret      *string                `json:"webhook_secret"`
}

func (*Integration) appsGetBySlugResponse() {}

type IntegrationPermissions struct {
	Checks      *string `json:"checks"`
	Contents    *string `json:"contents"`
	Deployments *string `json:"deployments"`
	Issues      *string `json:"issues"`
	Metadata    *string `json:"metadata"`
}

type InteractionExpiry string

const (
	InteractionExpiryOneDay    InteractionExpiry = "one_day"
	InteractionExpiryThreeDays InteractionExpiry = "three_days"
	InteractionExpiryOneWeek   InteractionExpiry = "one_week"
	InteractionExpiryOneMonth  InteractionExpiry = "one_month"
	InteractionExpirySixMonths InteractionExpiry = "six_months"
)

type InteractionGroup string

const (
	InteractionGroupExistingUsers     InteractionGroup = "existing_users"
	InteractionGroupContributorsOnly  InteractionGroup = "contributors_only"
	InteractionGroupCollaboratorsOnly InteractionGroup = "collaborators_only"
)

type InteractionLimit struct {
	Expiry *InteractionExpiry `json:"expiry"`
	Limit  InteractionGroup   `json:"limit"`
}

func (*InteractionLimit) interactionsSetRestrictionsForAuthenticatedUserRequest() {}
func (*InteractionLimit) interactionsSetRestrictionsForOrgRequest()               {}

type InteractionLimitResponse struct {
	ExpiresAt time.Time        `json:"expires_at"`
	Limit     InteractionGroup `json:"limit"`
	Origin    string           `json:"origin"`
}

func (*InteractionLimitResponse) interactionsSetRestrictionsForRepoResponse() {}

type InteractionsRemoveRestrictionsForAuthenticatedUser struct{}

type InteractionsRemoveRestrictionsForOrg struct{}

type InteractionsRemoveRestrictionsForRepoConflict struct{}

func (*InteractionsRemoveRestrictionsForRepoConflict) interactionsRemoveRestrictionsForRepoResponse() {
}

type InteractionsRemoveRestrictionsForRepoNoContent struct{}

func (*InteractionsRemoveRestrictionsForRepoNoContent) interactionsRemoveRestrictionsForRepoResponse() {
}

type InteractionsSetRestrictionsForRepoConflict struct{}

func (*InteractionsSetRestrictionsForRepoConflict) interactionsSetRestrictionsForRepoResponse() {}

type IssueComment struct {
	AuthorAssociation     AuthorAssociation    `json:"author_association"`
	Body                  *string              `json:"body"`
	BodyHTML              *string              `json:"body_html"`
	BodyText              *string              `json:"body_text"`
	CreatedAt             time.Time            `json:"created_at"`
	HTMLURL               string               `json:"html_url"`
	ID                    int                  `json:"id"`
	IssueURL              string               `json:"issue_url"`
	NodeID                string               `json:"node_id"`
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Reactions             *ReactionRollup      `json:"reactions"`
	URL                   string               `json:"url"`
	UpdatedAt             time.Time            `json:"updated_at"`
	User                  NullableSimpleUser   `json:"user"`
}

func (*IssueComment) issuesGetCommentResponse() {}

type IssueEvent struct {
	Actor                 NullableSimpleUser         `json:"actor"`
	Assignee              *NullableSimpleUser        `json:"assignee"`
	Assigner              *NullableSimpleUser        `json:"assigner"`
	AuthorAssociation     *AuthorAssociation         `json:"author_association"`
	CommitID              string                     `json:"commit_id"`
	CommitURL             string                     `json:"commit_url"`
	CreatedAt             time.Time                  `json:"created_at"`
	DismissedReview       *IssueEventDismissedReview `json:"dismissed_review"`
	Event                 string                     `json:"event"`
	ID                    int                        `json:"id"`
	Issue                 *IssueSimple               `json:"issue"`
	Label                 *IssueEventLabel           `json:"label"`
	LockReason            *string                    `json:"lock_reason"`
	Milestone             *IssueEventMilestone       `json:"milestone"`
	NodeID                string                     `json:"node_id"`
	PerformedViaGithubApp *NullableIntegration       `json:"performed_via_github_app"`
	ProjectCard           *IssueEventProjectCard     `json:"project_card"`
	Rename                *IssueEventRename          `json:"rename"`
	RequestedReviewer     *NullableSimpleUser        `json:"requested_reviewer"`
	RequestedTeam         *Team                      `json:"requested_team"`
	ReviewRequester       *NullableSimpleUser        `json:"review_requester"`
	URL                   string                     `json:"url"`
}

func (*IssueEvent) issuesGetEventResponse() {}

type IssueEventDismissedReview struct {
	DismissalCommitID *string `json:"dismissal_commit_id"`
	DismissalMessage  string  `json:"dismissal_message"`
	ReviewID          int     `json:"review_id"`
	State             string  `json:"state"`
}

type IssueEventLabel struct {
	Color string `json:"color"`
	Name  string `json:"name"`
}

type IssueEventMilestone struct {
	Title string `json:"title"`
}

type IssueEventProjectCard struct {
	ColumnName         string  `json:"column_name"`
	ID                 int     `json:"id"`
	PreviousColumnName *string `json:"previous_column_name"`
	ProjectID          int     `json:"project_id"`
	ProjectURL         string  `json:"project_url"`
	URL                string  `json:"url"`
}

type IssueEventRename struct {
	From string `json:"from"`
	To   string `json:"to"`
}

type IssueSimple struct {
	ActiveLockReason      *string                 `json:"active_lock_reason"`
	Assignee              NullableSimpleUser      `json:"assignee"`
	Assignees             *[]SimpleUser           `json:"assignees"`
	AuthorAssociation     AuthorAssociation       `json:"author_association"`
	Body                  *string                 `json:"body"`
	BodyHTML              *string                 `json:"body_html"`
	BodyText              *string                 `json:"body_text"`
	ClosedAt              time.Time               `json:"closed_at"`
	Comments              int                     `json:"comments"`
	CommentsURL           string                  `json:"comments_url"`
	CreatedAt             time.Time               `json:"created_at"`
	EventsURL             string                  `json:"events_url"`
	HTMLURL               string                  `json:"html_url"`
	ID                    int                     `json:"id"`
	Labels                []Label                 `json:"labels"`
	LabelsURL             string                  `json:"labels_url"`
	Locked                bool                    `json:"locked"`
	Milestone             NullableMilestone       `json:"milestone"`
	NodeID                string                  `json:"node_id"`
	Number                int                     `json:"number"`
	PerformedViaGithubApp *NullableIntegration    `json:"performed_via_github_app"`
	PullRequest           *IssueSimplePullRequest `json:"pull_request"`
	Repository            *Repository             `json:"repository"`
	RepositoryURL         string                  `json:"repository_url"`
	State                 string                  `json:"state"`
	TimelineURL           *string                 `json:"timeline_url"`
	Title                 string                  `json:"title"`
	URL                   string                  `json:"url"`
	UpdatedAt             time.Time               `json:"updated_at"`
	User                  NullableSimpleUser      `json:"user"`
}

type IssueSimplePullRequest struct {
	DiffURL  string     `json:"diff_url"`
	HTMLURL  string     `json:"html_url"`
	MergedAt *time.Time `json:"merged_at"`
	PatchURL string     `json:"patch_url"`
	URL      string     `json:"url"`
}

type IssuesAddAssigneesApplicationJSONRequest struct {
	Assignees *[]string `json:"assignees"`
}

type IssuesCheckUserCanBeAssignedNoContent struct{}

func (*IssuesCheckUserCanBeAssignedNoContent) issuesCheckUserCanBeAssignedResponse() {}

type IssuesCreateCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

func (*IssuesCreateCommentApplicationJSONRequest) issuesCreateCommentRequest() {}

type IssuesCreateLabelApplicationJSONRequest struct {
	Color       *string `json:"color"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

func (*IssuesCreateLabelApplicationJSONRequest) issuesCreateLabelRequest() {}

type IssuesCreateMilestoneApplicationJSONRequest struct {
	Description *string                                           `json:"description"`
	DueOn       *time.Time                                        `json:"due_on"`
	State       *IssuesCreateMilestoneApplicationJSONRequestState `json:"state"`
	Title       string                                            `json:"title"`
}

func (*IssuesCreateMilestoneApplicationJSONRequest) issuesCreateMilestoneRequest() {}

type IssuesCreateMilestoneApplicationJSONRequestState string

const (
	IssuesCreateMilestoneApplicationJSONRequestStateOpen   IssuesCreateMilestoneApplicationJSONRequestState = "open"
	IssuesCreateMilestoneApplicationJSONRequestStateClosed IssuesCreateMilestoneApplicationJSONRequestState = "closed"
)

type IssuesDeleteComment struct{}

type IssuesDeleteLabel struct{}

type IssuesDeleteMilestoneNoContent struct{}

func (*IssuesDeleteMilestoneNoContent) issuesDeleteMilestoneResponse() {}

type IssuesGetEventApplicationJSONForbidden BasicError

func (*IssuesGetEventApplicationJSONForbidden) issuesGetEventResponse() {}

type IssuesGetEventApplicationJSONGone BasicError

func (*IssuesGetEventApplicationJSONGone) issuesGetEventResponse() {}

type IssuesGetEventApplicationJSONNotFound BasicError

func (*IssuesGetEventApplicationJSONNotFound) issuesGetEventResponse() {}

type IssuesListAssigneesOK []SimpleUser

func (*IssuesListAssigneesOK) issuesListAssigneesResponse() {}

type IssuesListCommentsApplicationJSONGone BasicError

func (*IssuesListCommentsApplicationJSONGone) issuesListCommentsResponse() {}

type IssuesListCommentsApplicationJSONNotFound BasicError

func (*IssuesListCommentsApplicationJSONNotFound) issuesListCommentsResponse() {}

type IssuesListCommentsOK []IssueComment

func (*IssuesListCommentsOK) issuesListCommentsResponse() {}

type IssuesListEventsForRepoOK []IssueEvent

type IssuesListLabelsForRepoOK []Label

func (*IssuesListLabelsForRepoOK) issuesListLabelsForRepoResponse() {}

type IssuesListLabelsOnIssueOK []Label

func (*IssuesListLabelsOnIssueOK) issuesListLabelsOnIssueResponse() {}

type IssuesLockApplicationJSONRequest struct {
	LockReason *IssuesLockApplicationJSONRequestLockReason `json:"lock_reason"`
}

func (*IssuesLockApplicationJSONRequest) issuesLockRequest() {}

type IssuesLockApplicationJSONRequestLockReason string

const (
	IssuesLockApplicationJSONRequestLockReasonOffMinusTopic IssuesLockApplicationJSONRequestLockReason = "off-topic"
	IssuesLockApplicationJSONRequestLockReasonTooHeated     IssuesLockApplicationJSONRequestLockReason = "too heated"
	IssuesLockApplicationJSONRequestLockReasonResolved      IssuesLockApplicationJSONRequestLockReason = "resolved"
	IssuesLockApplicationJSONRequestLockReasonSpam          IssuesLockApplicationJSONRequestLockReason = "spam"
)

type IssuesLockNoContent struct{}

type IssuesRemoveAllLabelsNoContent struct{}

func (*IssuesRemoveAllLabelsNoContent) issuesRemoveAllLabelsResponse() {}

type IssuesRemoveAssigneesApplicationJSONRequest struct {
	Assignees *[]string `json:"assignees"`
}

type IssuesRemoveLabelApplicationJSONGone BasicError

func (*IssuesRemoveLabelApplicationJSONGone) issuesRemoveLabelResponse() {}

type IssuesRemoveLabelApplicationJSONNotFound BasicError

func (*IssuesRemoveLabelApplicationJSONNotFound) issuesRemoveLabelResponse() {}

type IssuesRemoveLabelOK []Label

func (*IssuesRemoveLabelOK) issuesRemoveLabelResponse() {}

type IssuesUnlockApplicationJSONForbidden BasicError

func (*IssuesUnlockApplicationJSONForbidden) issuesUnlockResponse() {}

type IssuesUnlockApplicationJSONNotFound BasicError

func (*IssuesUnlockApplicationJSONNotFound) issuesUnlockResponse() {}

type IssuesUnlockNoContent struct{}

func (*IssuesUnlockNoContent) issuesUnlockResponse() {}

type IssuesUpdateCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

func (*IssuesUpdateCommentApplicationJSONRequest) issuesUpdateCommentRequest() {}

type IssuesUpdateLabelApplicationJSONRequest struct {
	Color       *string `json:"color"`
	Description *string `json:"description"`
	NewName     *string `json:"new_name"`
}

type IssuesUpdateMilestoneApplicationJSONRequest struct {
	Description *string                                           `json:"description"`
	DueOn       *time.Time                                        `json:"due_on"`
	State       *IssuesUpdateMilestoneApplicationJSONRequestState `json:"state"`
	Title       *string                                           `json:"title"`
}

type IssuesUpdateMilestoneApplicationJSONRequestState string

const (
	IssuesUpdateMilestoneApplicationJSONRequestStateOpen   IssuesUpdateMilestoneApplicationJSONRequestState = "open"
	IssuesUpdateMilestoneApplicationJSONRequestStateClosed IssuesUpdateMilestoneApplicationJSONRequestState = "closed"
)

type Job struct {
	CheckRunURL string          `json:"check_run_url"`
	CompletedAt time.Time       `json:"completed_at"`
	Conclusion  string          `json:"conclusion"`
	HTMLURL     string          `json:"html_url"`
	HeadSha     string          `json:"head_sha"`
	ID          int             `json:"id"`
	Name        string          `json:"name"`
	NodeID      string          `json:"node_id"`
	RunID       int             `json:"run_id"`
	RunURL      string          `json:"run_url"`
	StartedAt   time.Time       `json:"started_at"`
	Status      JobStatus       `json:"status"`
	Steps       *[]JobStepsItem `json:"steps"`
	URL         string          `json:"url"`
}

type JobStatus string

const (
	JobStatusQueued     JobStatus = "queued"
	JobStatusInProgress JobStatus = "in_progress"
	JobStatusCompleted  JobStatus = "completed"
)

type JobStepsItem struct {
	CompletedAt *time.Time         `json:"completed_at"`
	Conclusion  string             `json:"conclusion"`
	Name        string             `json:"name"`
	Number      int                `json:"number"`
	StartedAt   *time.Time         `json:"started_at"`
	Status      JobStepsItemStatus `json:"status"`
}

type JobStepsItemStatus string

const (
	JobStepsItemStatusQueued     JobStepsItemStatus = "queued"
	JobStepsItemStatusInProgress JobStepsItemStatus = "in_progress"
	JobStepsItemStatusCompleted  JobStepsItemStatus = "completed"
)

type Key struct {
	CreatedAt time.Time `json:"created_at"`
	ID        int       `json:"id"`
	Key       string    `json:"key"`
	ReadOnly  bool      `json:"read_only"`
	Title     string    `json:"title"`
	URL       string    `json:"url"`
	Verified  bool      `json:"verified"`
}

func (*Key) usersGetPublicSSHKeyForAuthenticatedResponse() {}

type KeySimple struct {
	ID  int    `json:"id"`
	Key string `json:"key"`
}

type Label struct {
	Color       string `json:"color"`
	Default     bool   `json:"default"`
	Description string `json:"description"`
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	NodeID      string `json:"node_id"`
	URL         string `json:"url"`
}

func (*Label) issuesGetLabelResponse() {}

type Language struct{}

type License struct {
	Body           string   `json:"body"`
	Conditions     []string `json:"conditions"`
	Description    string   `json:"description"`
	Featured       bool     `json:"featured"`
	HTMLURL        string   `json:"html_url"`
	Implementation string   `json:"implementation"`
	Key            string   `json:"key"`
	Limitations    []string `json:"limitations"`
	Name           string   `json:"name"`
	NodeID         string   `json:"node_id"`
	Permissions    []string `json:"permissions"`
	SpdxID         string   `json:"spdx_id"`
	URL            string   `json:"url"`
}

func (*License) licensesGetResponse() {}

type LicenseContent struct {
	Content     string                `json:"content"`
	DownloadURL string                `json:"download_url"`
	Encoding    string                `json:"encoding"`
	GitURL      string                `json:"git_url"`
	HTMLURL     string                `json:"html_url"`
	License     NullableLicenseSimple `json:"license"`
	Links       LicenseContentLinks   `json:"_links"`
	Name        string                `json:"name"`
	Path        string                `json:"path"`
	Sha         string                `json:"sha"`
	Size        int                   `json:"size"`
	Type        string                `json:"type"`
	URL         string                `json:"url"`
}

type LicenseContentLinks struct {
	Git  string `json:"git"`
	HTML string `json:"html"`
	Self string `json:"self"`
}

type LicenseSimple struct {
	HTMLURL *string `json:"html_url"`
	Key     string  `json:"key"`
	Name    string  `json:"name"`
	NodeID  string  `json:"node_id"`
	SpdxID  string  `json:"spdx_id"`
	URL     string  `json:"url"`
}

type LicensesGetAllCommonlyUsedOK []LicenseSimple

func (*LicensesGetAllCommonlyUsedOK) licensesGetAllCommonlyUsedResponse() {}

type LicensesGetApplicationJSONForbidden BasicError

func (*LicensesGetApplicationJSONForbidden) licensesGetResponse() {}

type LicensesGetApplicationJSONNotFound BasicError

func (*LicensesGetApplicationJSONNotFound) licensesGetResponse() {}

type Link struct {
	Href string `json:"href"`
}

type LinkWithType struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

type MarkdownRenderApplicationJSONRequest struct {
	Context *string                                   `json:"context"`
	Mode    *MarkdownRenderApplicationJSONRequestMode `json:"mode"`
	Text    string                                    `json:"text"`
}

type MarkdownRenderApplicationJSONRequestMode string

const (
	MarkdownRenderApplicationJSONRequestModeMarkdown MarkdownRenderApplicationJSONRequestMode = "markdown"
	MarkdownRenderApplicationJSONRequestModeGfm      MarkdownRenderApplicationJSONRequestMode = "gfm"
)

type MarkdownRenderOK string

func (*MarkdownRenderOK) markdownRenderResponse() {}

type MarkdownRenderRawOK string

func (*MarkdownRenderRawOK) markdownRenderRawResponse() {}

type MarkdownRenderRawTextPlainRequest string

func (*MarkdownRenderRawTextPlainRequest) markdownRenderRawRequest() {}

type MarkdownRenderRawTextXMarkdownRequest string

func (*MarkdownRenderRawTextXMarkdownRequest) markdownRenderRawRequest() {}

type MarketplaceAccount struct {
	Email                    *string `json:"email"`
	ID                       int     `json:"id"`
	Login                    string  `json:"login"`
	NodeID                   *string `json:"node_id"`
	OrganizationBillingEmail *string `json:"organization_billing_email"`
	Type                     string  `json:"type"`
	URL                      string  `json:"url"`
}

type MarketplaceListingPlan struct {
	AccountsURL         string   `json:"accounts_url"`
	Bullets             []string `json:"bullets"`
	Description         string   `json:"description"`
	HasFreeTrial        bool     `json:"has_free_trial"`
	ID                  int      `json:"id"`
	MonthlyPriceInCents int      `json:"monthly_price_in_cents"`
	Name                string   `json:"name"`
	Number              int      `json:"number"`
	PriceModel          string   `json:"price_model"`
	State               string   `json:"state"`
	URL                 string   `json:"url"`
	UnitName            string   `json:"unit_name"`
	YearlyPriceInCents  int      `json:"yearly_price_in_cents"`
}

type MarketplacePurchase struct {
	Email                    *string                                      `json:"email"`
	ID                       int                                          `json:"id"`
	Login                    string                                       `json:"login"`
	MarketplacePendingChange *MarketplacePurchaseMarketplacePendingChange `json:"marketplace_pending_change"`
	MarketplacePurchase      MarketplacePurchaseMarketplacePurchase       `json:"marketplace_purchase"`
	OrganizationBillingEmail *string                                      `json:"organization_billing_email"`
	Type                     string                                       `json:"type"`
	URL                      string                                       `json:"url"`
}

func (*MarketplacePurchase) appsGetSubscriptionPlanForAccountResponse()        {}
func (*MarketplacePurchase) appsGetSubscriptionPlanForAccountStubbedResponse() {}

type MarketplacePurchaseMarketplacePendingChange struct {
	EffectiveDate *string                 `json:"effective_date"`
	ID            *int                    `json:"id"`
	IsInstalled   *bool                   `json:"is_installed"`
	Plan          *MarketplaceListingPlan `json:"plan"`
	UnitCount     *int                    `json:"unit_count"`
}

type MarketplacePurchaseMarketplacePurchase struct {
	BillingCycle    *string                 `json:"billing_cycle"`
	FreeTrialEndsOn *string                 `json:"free_trial_ends_on"`
	IsInstalled     *bool                   `json:"is_installed"`
	NextBillingDate *string                 `json:"next_billing_date"`
	OnFreeTrial     *bool                   `json:"on_free_trial"`
	Plan            *MarketplaceListingPlan `json:"plan"`
	UnitCount       *int                    `json:"unit_count"`
	UpdatedAt       *string                 `json:"updated_at"`
}

type MergedUpstream struct {
	BaseBranch *string                  `json:"base_branch"`
	MergeType  *MergedUpstreamMergeType `json:"merge_type"`
	Message    *string                  `json:"message"`
}

func (*MergedUpstream) reposMergeUpstreamResponse() {}

type MergedUpstreamMergeType string

const (
	MergedUpstreamMergeTypeMerge            MergedUpstreamMergeType = "merge"
	MergedUpstreamMergeTypeFastMinusForward MergedUpstreamMergeType = "fast-forward"
	MergedUpstreamMergeTypeNone             MergedUpstreamMergeType = "none"
)

type MetaRoot struct {
	AuthorizationsURL                string  `json:"authorizations_url"`
	CodeSearchURL                    string  `json:"code_search_url"`
	CommitSearchURL                  string  `json:"commit_search_url"`
	CurrentUserAuthorizationsHTMLURL string  `json:"current_user_authorizations_html_url"`
	CurrentUserRepositoriesURL       string  `json:"current_user_repositories_url"`
	CurrentUserURL                   string  `json:"current_user_url"`
	EmailsURL                        string  `json:"emails_url"`
	EmojisURL                        string  `json:"emojis_url"`
	EventsURL                        string  `json:"events_url"`
	FeedsURL                         string  `json:"feeds_url"`
	FollowersURL                     string  `json:"followers_url"`
	FollowingURL                     string  `json:"following_url"`
	GistsURL                         string  `json:"gists_url"`
	HubURL                           string  `json:"hub_url"`
	IssueSearchURL                   string  `json:"issue_search_url"`
	IssuesURL                        string  `json:"issues_url"`
	KeysURL                          string  `json:"keys_url"`
	LabelSearchURL                   string  `json:"label_search_url"`
	NotificationsURL                 string  `json:"notifications_url"`
	OrganizationRepositoriesURL      string  `json:"organization_repositories_url"`
	OrganizationTeamsURL             string  `json:"organization_teams_url"`
	OrganizationURL                  string  `json:"organization_url"`
	PublicGistsURL                   string  `json:"public_gists_url"`
	RateLimitURL                     string  `json:"rate_limit_url"`
	RepositorySearchURL              string  `json:"repository_search_url"`
	RepositoryURL                    string  `json:"repository_url"`
	StarredGistsURL                  string  `json:"starred_gists_url"`
	StarredURL                       string  `json:"starred_url"`
	TopicSearchURL                   *string `json:"topic_search_url"`
	UserOrganizationsURL             string  `json:"user_organizations_url"`
	UserRepositoriesURL              string  `json:"user_repositories_url"`
	UserSearchURL                    string  `json:"user_search_url"`
	UserURL                          string  `json:"user_url"`
}

type Migration struct {
	ArchiveURL           *string            `json:"archive_url"`
	CreatedAt            time.Time          `json:"created_at"`
	Exclude              *[]string          `json:"exclude"`
	ExcludeAttachments   bool               `json:"exclude_attachments"`
	ExcludeGitData       bool               `json:"exclude_git_data"`
	ExcludeMetadata      bool               `json:"exclude_metadata"`
	ExcludeOwnerProjects bool               `json:"exclude_owner_projects"`
	ExcludeReleases      bool               `json:"exclude_releases"`
	GUID                 string             `json:"guid"`
	ID                   int                `json:"id"`
	LockRepositories     bool               `json:"lock_repositories"`
	NodeID               string             `json:"node_id"`
	Owner                NullableSimpleUser `json:"owner"`
	Repositories         []Repository       `json:"repositories"`
	State                string             `json:"state"`
	URL                  string             `json:"url"`
	UpdatedAt            time.Time          `json:"updated_at"`
}

func (*Migration) migrationsGetStatusForAuthenticatedUserResponse() {}

type MigrationsCancelImport struct{}

type MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden BasicError

func (*MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONForbidden) migrationsDeleteArchiveForAuthenticatedUserResponse() {
}

type MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound BasicError

func (*MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONNotFound) migrationsDeleteArchiveForAuthenticatedUserResponse() {
}

type MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*MigrationsDeleteArchiveForAuthenticatedUserApplicationJSONUnauthorized) migrationsDeleteArchiveForAuthenticatedUserResponse() {
}

type MigrationsDeleteArchiveForAuthenticatedUserNoContent struct{}

func (*MigrationsDeleteArchiveForAuthenticatedUserNoContent) migrationsDeleteArchiveForAuthenticatedUserResponse() {
}

type MigrationsDeleteArchiveForOrgNoContent struct{}

func (*MigrationsDeleteArchiveForOrgNoContent) migrationsDeleteArchiveForOrgResponse() {}

type MigrationsDownloadArchiveForOrgFound struct{}

func (*MigrationsDownloadArchiveForOrgFound) migrationsDownloadArchiveForOrgResponse() {}

type MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden BasicError

func (*MigrationsGetArchiveForAuthenticatedUserApplicationJSONForbidden) migrationsGetArchiveForAuthenticatedUserResponse() {
}

type MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*MigrationsGetArchiveForAuthenticatedUserApplicationJSONUnauthorized) migrationsGetArchiveForAuthenticatedUserResponse() {
}

type MigrationsGetArchiveForAuthenticatedUserFound struct{}

func (*MigrationsGetArchiveForAuthenticatedUserFound) migrationsGetArchiveForAuthenticatedUserResponse() {
}

type MigrationsGetCommitAuthorsOK []PorterAuthor

func (*MigrationsGetCommitAuthorsOK) migrationsGetCommitAuthorsResponse() {}

type MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden BasicError

func (*MigrationsGetStatusForAuthenticatedUserApplicationJSONForbidden) migrationsGetStatusForAuthenticatedUserResponse() {
}

type MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound BasicError

func (*MigrationsGetStatusForAuthenticatedUserApplicationJSONNotFound) migrationsGetStatusForAuthenticatedUserResponse() {
}

type MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*MigrationsGetStatusForAuthenticatedUserApplicationJSONUnauthorized) migrationsGetStatusForAuthenticatedUserResponse() {
}

type MigrationsGetStatusForOrgExcludeItem string

const (
	MigrationsGetStatusForOrgExcludeItemRepositories MigrationsGetStatusForOrgExcludeItem = "repositories"
)

type MigrationsListForAuthenticatedUserApplicationJSONForbidden BasicError

func (*MigrationsListForAuthenticatedUserApplicationJSONForbidden) migrationsListForAuthenticatedUserResponse() {
}

type MigrationsListForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*MigrationsListForAuthenticatedUserApplicationJSONUnauthorized) migrationsListForAuthenticatedUserResponse() {
}

type MigrationsListForAuthenticatedUserOK []Migration

func (*MigrationsListForAuthenticatedUserOK) migrationsListForAuthenticatedUserResponse() {}

type MigrationsListForOrgExcludeItem string

const (
	MigrationsListForOrgExcludeItemRepositories MigrationsListForOrgExcludeItem = "repositories"
)

type MigrationsListReposForOrgOK []MinimalRepository

func (*MigrationsListReposForOrgOK) migrationsListReposForOrgResponse() {}

type MigrationsListReposForUserOK []MinimalRepository

func (*MigrationsListReposForUserOK) migrationsListReposForUserResponse() {}

type MigrationsMapCommitAuthorApplicationJSONRequest struct {
	Email *string `json:"email"`
	Name  *string `json:"name"`
}

func (*MigrationsMapCommitAuthorApplicationJSONRequest) migrationsMapCommitAuthorRequest() {}

type MigrationsSetLfsPreferenceApplicationJSONRequest struct {
	UseLfs MigrationsSetLfsPreferenceApplicationJSONRequestUseLfs `json:"use_lfs"`
}

func (*MigrationsSetLfsPreferenceApplicationJSONRequest) migrationsSetLfsPreferenceRequest() {}

type MigrationsSetLfsPreferenceApplicationJSONRequestUseLfs string

const (
	MigrationsSetLfsPreferenceApplicationJSONRequestUseLfsOptIn  MigrationsSetLfsPreferenceApplicationJSONRequestUseLfs = "opt_in"
	MigrationsSetLfsPreferenceApplicationJSONRequestUseLfsOptOut MigrationsSetLfsPreferenceApplicationJSONRequestUseLfs = "opt_out"
)

type MigrationsStartForAuthenticatedUserApplicationJSONRequest struct {
	Exclude              *[]MigrationsStartForAuthenticatedUserApplicationJSONRequestExcludeItem `json:"exclude"`
	ExcludeAttachments   *bool                                                                   `json:"exclude_attachments"`
	ExcludeOwnerProjects *bool                                                                   `json:"exclude_owner_projects"`
	ExcludeReleases      *bool                                                                   `json:"exclude_releases"`
	LockRepositories     *bool                                                                   `json:"lock_repositories"`
	Repositories         []string                                                                `json:"repositories"`
}

func (*MigrationsStartForAuthenticatedUserApplicationJSONRequest) migrationsStartForAuthenticatedUserRequest() {
}

type MigrationsStartForAuthenticatedUserApplicationJSONRequestExcludeItem string

const (
	MigrationsStartForAuthenticatedUserApplicationJSONRequestExcludeItemRepositories MigrationsStartForAuthenticatedUserApplicationJSONRequestExcludeItem = "repositories"
)

type MigrationsStartForOrgApplicationJSONRequest struct {
	Exclude              *[]MigrationsStartForOrgApplicationJSONRequestExcludeItem `json:"exclude"`
	ExcludeAttachments   *bool                                                     `json:"exclude_attachments"`
	ExcludeOwnerProjects *bool                                                     `json:"exclude_owner_projects"`
	ExcludeReleases      *bool                                                     `json:"exclude_releases"`
	LockRepositories     *bool                                                     `json:"lock_repositories"`
	Repositories         []string                                                  `json:"repositories"`
}

func (*MigrationsStartForOrgApplicationJSONRequest) migrationsStartForOrgRequest() {}

type MigrationsStartForOrgApplicationJSONRequestExcludeItem string

const (
	MigrationsStartForOrgApplicationJSONRequestExcludeItemRepositories MigrationsStartForOrgApplicationJSONRequestExcludeItem = "repositories"
)

type MigrationsStartImportApplicationJSONRequest struct {
	TfvcProject *string                                         `json:"tfvc_project"`
	Vcs         *MigrationsStartImportApplicationJSONRequestVcs `json:"vcs"`
	VcsPassword *string                                         `json:"vcs_password"`
	VcsURL      string                                          `json:"vcs_url"`
	VcsUsername *string                                         `json:"vcs_username"`
}

func (*MigrationsStartImportApplicationJSONRequest) migrationsStartImportRequest() {}

type MigrationsStartImportApplicationJSONRequestVcs string

const (
	MigrationsStartImportApplicationJSONRequestVcsSubversion MigrationsStartImportApplicationJSONRequestVcs = "subversion"
	MigrationsStartImportApplicationJSONRequestVcsGit        MigrationsStartImportApplicationJSONRequestVcs = "git"
	MigrationsStartImportApplicationJSONRequestVcsMercurial  MigrationsStartImportApplicationJSONRequestVcs = "mercurial"
	MigrationsStartImportApplicationJSONRequestVcsTfvc       MigrationsStartImportApplicationJSONRequestVcs = "tfvc"
)

type MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden BasicError

func (*MigrationsUnlockRepoForAuthenticatedUserApplicationJSONForbidden) migrationsUnlockRepoForAuthenticatedUserResponse() {
}

type MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound BasicError

func (*MigrationsUnlockRepoForAuthenticatedUserApplicationJSONNotFound) migrationsUnlockRepoForAuthenticatedUserResponse() {
}

type MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*MigrationsUnlockRepoForAuthenticatedUserApplicationJSONUnauthorized) migrationsUnlockRepoForAuthenticatedUserResponse() {
}

type MigrationsUnlockRepoForAuthenticatedUserNoContent struct{}

func (*MigrationsUnlockRepoForAuthenticatedUserNoContent) migrationsUnlockRepoForAuthenticatedUserResponse() {
}

type MigrationsUnlockRepoForOrgNoContent struct{}

func (*MigrationsUnlockRepoForOrgNoContent) migrationsUnlockRepoForOrgResponse() {}

type MigrationsUpdateImportApplicationJSONRequest struct {
	TfvcProject *string `json:"tfvc_project"`
	Vcs         *string `json:"vcs"`
	VcsPassword *string `json:"vcs_password"`
	VcsUsername *string `json:"vcs_username"`
}

type Milestone struct {
	ClosedAt     time.Time          `json:"closed_at"`
	ClosedIssues int                `json:"closed_issues"`
	CreatedAt    time.Time          `json:"created_at"`
	Creator      NullableSimpleUser `json:"creator"`
	Description  string             `json:"description"`
	DueOn        time.Time          `json:"due_on"`
	HTMLURL      string             `json:"html_url"`
	ID           int                `json:"id"`
	LabelsURL    string             `json:"labels_url"`
	NodeID       string             `json:"node_id"`
	Number       int                `json:"number"`
	OpenIssues   int                `json:"open_issues"`
	State        MilestoneState     `json:"state"`
	Title        string             `json:"title"`
	URL          string             `json:"url"`
	UpdatedAt    time.Time          `json:"updated_at"`
}

func (*Milestone) issuesGetMilestoneResponse() {}

type MilestoneState string

const (
	MilestoneStateOpen   MilestoneState = "open"
	MilestoneStateClosed MilestoneState = "closed"
)

type MinimalRepository struct {
	AllowForking        *bool                         `json:"allow_forking"`
	ArchiveURL          string                        `json:"archive_url"`
	Archived            *bool                         `json:"archived"`
	AssigneesURL        string                        `json:"assignees_url"`
	BlobsURL            string                        `json:"blobs_url"`
	BranchesURL         string                        `json:"branches_url"`
	CloneURL            *string                       `json:"clone_url"`
	CodeOfConduct       *CodeOfConduct                `json:"code_of_conduct"`
	CollaboratorsURL    string                        `json:"collaborators_url"`
	CommentsURL         string                        `json:"comments_url"`
	CommitsURL          string                        `json:"commits_url"`
	CompareURL          string                        `json:"compare_url"`
	ContentsURL         string                        `json:"contents_url"`
	ContributorsURL     string                        `json:"contributors_url"`
	CreatedAt           *time.Time                    `json:"created_at"`
	DefaultBranch       *string                       `json:"default_branch"`
	DeleteBranchOnMerge *bool                         `json:"delete_branch_on_merge"`
	DeploymentsURL      string                        `json:"deployments_url"`
	Description         string                        `json:"description"`
	Disabled            *bool                         `json:"disabled"`
	DownloadsURL        string                        `json:"downloads_url"`
	EventsURL           string                        `json:"events_url"`
	Fork                bool                          `json:"fork"`
	Forks               *int                          `json:"forks"`
	ForksCount          *int                          `json:"forks_count"`
	ForksURL            string                        `json:"forks_url"`
	FullName            string                        `json:"full_name"`
	GitCommitsURL       string                        `json:"git_commits_url"`
	GitRefsURL          string                        `json:"git_refs_url"`
	GitTagsURL          string                        `json:"git_tags_url"`
	GitURL              *string                       `json:"git_url"`
	HTMLURL             string                        `json:"html_url"`
	HasDownloads        *bool                         `json:"has_downloads"`
	HasIssues           *bool                         `json:"has_issues"`
	HasPages            *bool                         `json:"has_pages"`
	HasProjects         *bool                         `json:"has_projects"`
	HasWiki             *bool                         `json:"has_wiki"`
	Homepage            *string                       `json:"homepage"`
	HooksURL            string                        `json:"hooks_url"`
	ID                  int                           `json:"id"`
	IsTemplate          *bool                         `json:"is_template"`
	IssueCommentURL     string                        `json:"issue_comment_url"`
	IssueEventsURL      string                        `json:"issue_events_url"`
	IssuesURL           string                        `json:"issues_url"`
	KeysURL             string                        `json:"keys_url"`
	LabelsURL           string                        `json:"labels_url"`
	Language            *string                       `json:"language"`
	LanguagesURL        string                        `json:"languages_url"`
	License             *MinimalRepositoryLicense     `json:"license"`
	MergesURL           string                        `json:"merges_url"`
	MilestonesURL       string                        `json:"milestones_url"`
	MirrorURL           *string                       `json:"mirror_url"`
	Name                string                        `json:"name"`
	NetworkCount        *int                          `json:"network_count"`
	NodeID              string                        `json:"node_id"`
	NotificationsURL    string                        `json:"notifications_url"`
	OpenIssues          *int                          `json:"open_issues"`
	OpenIssuesCount     *int                          `json:"open_issues_count"`
	Owner               SimpleUser                    `json:"owner"`
	Permissions         *MinimalRepositoryPermissions `json:"permissions"`
	Private             bool                          `json:"private"`
	PullsURL            string                        `json:"pulls_url"`
	PushedAt            *time.Time                    `json:"pushed_at"`
	ReleasesURL         string                        `json:"releases_url"`
	SSHURL              *string                       `json:"ssh_url"`
	Size                *int                          `json:"size"`
	StargazersCount     *int                          `json:"stargazers_count"`
	StargazersURL       string                        `json:"stargazers_url"`
	StatusesURL         string                        `json:"statuses_url"`
	SubscribersCount    *int                          `json:"subscribers_count"`
	SubscribersURL      string                        `json:"subscribers_url"`
	SubscriptionURL     string                        `json:"subscription_url"`
	SvnURL              *string                       `json:"svn_url"`
	TagsURL             string                        `json:"tags_url"`
	TeamsURL            string                        `json:"teams_url"`
	TempCloneToken      *string                       `json:"temp_clone_token"`
	TemplateRepository  *NullableRepository           `json:"template_repository"`
	Topics              *[]string                     `json:"topics"`
	TreesURL            string                        `json:"trees_url"`
	URL                 string                        `json:"url"`
	UpdatedAt           *time.Time                    `json:"updated_at"`
	Visibility          *string                       `json:"visibility"`
	Watchers            *int                          `json:"watchers"`
	WatchersCount       *int                          `json:"watchers_count"`
}

type MinimalRepositoryLicense struct {
	Key    *string `json:"key"`
	Name   *string `json:"name"`
	NodeID *string `json:"node_id"`
	SpdxID *string `json:"spdx_id"`
	URL    *string `json:"url"`
}

type MinimalRepositoryPermissions struct {
	Admin    *bool `json:"admin"`
	Maintain *bool `json:"maintain"`
	Pull     *bool `json:"pull"`
	Push     *bool `json:"push"`
	Triage   *bool `json:"triage"`
}

type NoContent struct{}

func (*NoContent) reposGetCodeFrequencyStatsResponse()  {}
func (*NoContent) reposGetCommitActivityStatsResponse() {}
func (*NoContent) reposGetContributorsStatsResponse()   {}
func (*NoContent) reposGetPunchCardStatsResponse()      {}

type NotModified struct{}

func (*NotModified) activityCheckRepoIsStarredByAuthenticatedUserResponse()     {}
func (*NotModified) activityDeleteThreadSubscriptionResponse()                  {}
func (*NotModified) activityGetThreadResponse()                                 {}
func (*NotModified) activityGetThreadSubscriptionForAuthenticatedUserResponse() {}
func (*NotModified) activityListPublicEventsForRepoNetworkResponse()            {}
func (*NotModified) activityListPublicEventsResponse()                          {}
func (*NotModified) activityListWatchedReposForAuthenticatedUserResponse()      {}
func (*NotModified) activityMarkNotificationsAsReadResponse()                   {}
func (*NotModified) activityMarkThreadAsReadResponse()                          {}
func (*NotModified) activitySetThreadSubscriptionResponse()                     {}
func (*NotModified) activityStarRepoForAuthenticatedUserResponse()              {}
func (*NotModified) activityUnstarRepoForAuthenticatedUserResponse()            {}
func (*NotModified) appsAddRepoToInstallationResponse()                         {}
func (*NotModified) appsListInstallationReposForAuthenticatedUserResponse()     {}
func (*NotModified) appsListReposAccessibleToInstallationResponse()             {}
func (*NotModified) appsListSubscriptionsForAuthenticatedUserResponse()         {}
func (*NotModified) appsListSubscriptionsForAuthenticatedUserStubbedResponse()  {}
func (*NotModified) appsRemoveRepoFromInstallationResponse()                    {}
func (*NotModified) codesOfConductGetAllCodesOfConductResponse()                {}
func (*NotModified) codesOfConductGetConductCodeResponse()                      {}
func (*NotModified) emojisGetResponse()                                         {}
func (*NotModified) gistsCheckIsStarredResponse()                               {}
func (*NotModified) gistsCreateCommentResponse()                                {}
func (*NotModified) gistsDeleteCommentResponse()                                {}
func (*NotModified) gistsDeleteResponse()                                       {}
func (*NotModified) gistsGetCommentResponse()                                   {}
func (*NotModified) gistsGetResponse()                                          {}
func (*NotModified) gistsListCommentsResponse()                                 {}
func (*NotModified) gistsListCommitsResponse()                                  {}
func (*NotModified) gistsListForksResponse()                                    {}
func (*NotModified) gistsListResponse()                                         {}
func (*NotModified) gistsListStarredResponse()                                  {}
func (*NotModified) gistsStarResponse()                                         {}
func (*NotModified) gistsUnstarResponse()                                       {}
func (*NotModified) gitignoreGetAllTemplatesResponse()                          {}
func (*NotModified) gitignoreGetTemplateResponse()                              {}
func (*NotModified) licensesGetAllCommonlyUsedResponse()                        {}
func (*NotModified) licensesGetResponse()                                       {}
func (*NotModified) markdownRenderRawResponse()                                 {}
func (*NotModified) markdownRenderResponse()                                    {}
func (*NotModified) metaGetResponse()                                           {}
func (*NotModified) migrationsDeleteArchiveForAuthenticatedUserResponse()       {}
func (*NotModified) migrationsGetArchiveForAuthenticatedUserResponse()          {}
func (*NotModified) migrationsGetStatusForAuthenticatedUserResponse()           {}
func (*NotModified) migrationsListForAuthenticatedUserResponse()                {}
func (*NotModified) migrationsUnlockRepoForAuthenticatedUserResponse()          {}
func (*NotModified) oAuthAuthorizationsDeleteAuthorizationResponse()            {}
func (*NotModified) oAuthAuthorizationsDeleteGrantResponse()                    {}
func (*NotModified) oAuthAuthorizationsGetAuthorizationResponse()               {}
func (*NotModified) oAuthAuthorizationsGetGrantResponse()                       {}
func (*NotModified) oAuthAuthorizationsListAuthorizationsResponse()             {}
func (*NotModified) oAuthAuthorizationsListGrantsResponse()                     {}
func (*NotModified) orgsListForAuthenticatedUserResponse()                      {}
func (*NotModified) orgsListResponse()                                          {}
func (*NotModified) projectsCreateColumnResponse()                              {}
func (*NotModified) projectsCreateForAuthenticatedUserResponse()                {}
func (*NotModified) projectsDeleteCardResponse()                                {}
func (*NotModified) projectsDeleteColumnResponse()                              {}
func (*NotModified) projectsDeleteResponse()                                    {}
func (*NotModified) projectsGetCardResponse()                                   {}
func (*NotModified) projectsGetColumnResponse()                                 {}
func (*NotModified) projectsGetResponse()                                       {}
func (*NotModified) projectsListColumnsResponse()                               {}
func (*NotModified) projectsMoveColumnResponse()                                {}
func (*NotModified) projectsUpdateCardResponse()                                {}
func (*NotModified) projectsUpdateColumnResponse()                              {}
func (*NotModified) projectsUpdateResponse()                                    {}
func (*NotModified) pullsGetResponse()                                          {}
func (*NotModified) rateLimitGetResponse()                                      {}
func (*NotModified) reactionsDeleteLegacyResponse()                             {}
func (*NotModified) reposAcceptInvitationResponse()                             {}
func (*NotModified) reposDeclineInvitationResponse()                            {}
func (*NotModified) reposListInvitationsForAuthenticatedUserResponse()          {}
func (*NotModified) scimDeleteUserFromOrgResponse()                             {}
func (*NotModified) searchTopicsResponse()                                      {}
func (*NotModified) teamsListForAuthenticatedUserResponse()                     {}
func (*NotModified) usersCheckBlockedResponse()                                 {}
func (*NotModified) usersCheckPersonIsFollowedByAuthenticatedResponse()         {}
func (*NotModified) usersDeletePublicSSHKeyForAuthenticatedResponse()           {}
func (*NotModified) usersFollowResponse()                                       {}
func (*NotModified) usersGetGpgKeyForAuthenticatedResponse()                    {}
func (*NotModified) usersGetPublicSSHKeyForAuthenticatedResponse()              {}
func (*NotModified) usersListBlockedByAuthenticatedResponse()                   {}
func (*NotModified) usersListEmailsForAuthenticatedResponse()                   {}
func (*NotModified) usersListFollowedByAuthenticatedResponse()                  {}
func (*NotModified) usersListFollowersForAuthenticatedUserResponse()            {}
func (*NotModified) usersListGpgKeysForAuthenticatedResponse()                  {}
func (*NotModified) usersListPublicEmailsForAuthenticatedResponse()             {}
func (*NotModified) usersListPublicSSHKeysForAuthenticatedResponse()            {}
func (*NotModified) usersListResponse()                                         {}
func (*NotModified) usersUnblockResponse()                                      {}
func (*NotModified) usersUnfollowResponse()                                     {}

type NullableCodeOfConductSimple struct {
	HTMLURL string `json:"html_url"`
	Key     string `json:"key"`
	Name    string `json:"name"`
	URL     string `json:"url"`
}

type NullableCommunityHealthFile struct {
	HTMLURL string `json:"html_url"`
	URL     string `json:"url"`
}

type NullableGitUser struct {
	Date  *string `json:"date"`
	Email *string `json:"email"`
	Name  *string `json:"name"`
}

type NullableIntegration struct {
	ClientID           *string                        `json:"client_id"`
	ClientSecret       *string                        `json:"client_secret"`
	CreatedAt          time.Time                      `json:"created_at"`
	Description        string                         `json:"description"`
	Events             []string                       `json:"events"`
	ExternalURL        string                         `json:"external_url"`
	HTMLURL            string                         `json:"html_url"`
	ID                 int                            `json:"id"`
	InstallationsCount *int                           `json:"installations_count"`
	Name               string                         `json:"name"`
	NodeID             string                         `json:"node_id"`
	Owner              NullableSimpleUser             `json:"owner"`
	Pem                *string                        `json:"pem"`
	Permissions        NullableIntegrationPermissions `json:"permissions"`
	Slug               *string                        `json:"slug"`
	UpdatedAt          time.Time                      `json:"updated_at"`
	WebhookSecret      *string                        `json:"webhook_secret"`
}

type NullableIntegrationPermissions struct {
	Checks      *string `json:"checks"`
	Contents    *string `json:"contents"`
	Deployments *string `json:"deployments"`
	Issues      *string `json:"issues"`
	Metadata    *string `json:"metadata"`
}

type NullableLicenseSimple struct {
	HTMLURL *string `json:"html_url"`
	Key     string  `json:"key"`
	Name    string  `json:"name"`
	NodeID  string  `json:"node_id"`
	SpdxID  string  `json:"spdx_id"`
	URL     string  `json:"url"`
}

type NullableMilestone struct {
	ClosedAt     time.Time              `json:"closed_at"`
	ClosedIssues int                    `json:"closed_issues"`
	CreatedAt    time.Time              `json:"created_at"`
	Creator      NullableSimpleUser     `json:"creator"`
	Description  string                 `json:"description"`
	DueOn        time.Time              `json:"due_on"`
	HTMLURL      string                 `json:"html_url"`
	ID           int                    `json:"id"`
	LabelsURL    string                 `json:"labels_url"`
	NodeID       string                 `json:"node_id"`
	Number       int                    `json:"number"`
	OpenIssues   int                    `json:"open_issues"`
	State        NullableMilestoneState `json:"state"`
	Title        string                 `json:"title"`
	URL          string                 `json:"url"`
	UpdatedAt    time.Time              `json:"updated_at"`
}

type NullableMilestoneState string

const (
	NullableMilestoneStateOpen   NullableMilestoneState = "open"
	NullableMilestoneStateClosed NullableMilestoneState = "closed"
)

type NullableRepository struct {
	AllowAutoMerge      *bool                                 `json:"allow_auto_merge"`
	AllowForking        *bool                                 `json:"allow_forking"`
	AllowMergeCommit    *bool                                 `json:"allow_merge_commit"`
	AllowRebaseMerge    *bool                                 `json:"allow_rebase_merge"`
	AllowSquashMerge    *bool                                 `json:"allow_squash_merge"`
	ArchiveURL          string                                `json:"archive_url"`
	Archived            bool                                  `json:"archived"`
	AssigneesURL        string                                `json:"assignees_url"`
	BlobsURL            string                                `json:"blobs_url"`
	BranchesURL         string                                `json:"branches_url"`
	CloneURL            string                                `json:"clone_url"`
	CollaboratorsURL    string                                `json:"collaborators_url"`
	CommentsURL         string                                `json:"comments_url"`
	CommitsURL          string                                `json:"commits_url"`
	CompareURL          string                                `json:"compare_url"`
	ContentsURL         string                                `json:"contents_url"`
	ContributorsURL     string                                `json:"contributors_url"`
	CreatedAt           time.Time                             `json:"created_at"`
	DefaultBranch       string                                `json:"default_branch"`
	DeleteBranchOnMerge *bool                                 `json:"delete_branch_on_merge"`
	DeploymentsURL      string                                `json:"deployments_url"`
	Description         string                                `json:"description"`
	Disabled            bool                                  `json:"disabled"`
	DownloadsURL        string                                `json:"downloads_url"`
	EventsURL           string                                `json:"events_url"`
	Fork                bool                                  `json:"fork"`
	Forks               int                                   `json:"forks"`
	ForksCount          int                                   `json:"forks_count"`
	ForksURL            string                                `json:"forks_url"`
	FullName            string                                `json:"full_name"`
	GitCommitsURL       string                                `json:"git_commits_url"`
	GitRefsURL          string                                `json:"git_refs_url"`
	GitTagsURL          string                                `json:"git_tags_url"`
	GitURL              string                                `json:"git_url"`
	HTMLURL             string                                `json:"html_url"`
	HasDownloads        bool                                  `json:"has_downloads"`
	HasIssues           bool                                  `json:"has_issues"`
	HasPages            bool                                  `json:"has_pages"`
	HasProjects         bool                                  `json:"has_projects"`
	HasWiki             bool                                  `json:"has_wiki"`
	Homepage            string                                `json:"homepage"`
	HooksURL            string                                `json:"hooks_url"`
	ID                  int                                   `json:"id"`
	IsTemplate          *bool                                 `json:"is_template"`
	IssueCommentURL     string                                `json:"issue_comment_url"`
	IssueEventsURL      string                                `json:"issue_events_url"`
	IssuesURL           string                                `json:"issues_url"`
	KeysURL             string                                `json:"keys_url"`
	LabelsURL           string                                `json:"labels_url"`
	Language            string                                `json:"language"`
	LanguagesURL        string                                `json:"languages_url"`
	License             NullableLicenseSimple                 `json:"license"`
	MasterBranch        *string                               `json:"master_branch"`
	MergesURL           string                                `json:"merges_url"`
	MilestonesURL       string                                `json:"milestones_url"`
	MirrorURL           string                                `json:"mirror_url"`
	Name                string                                `json:"name"`
	NetworkCount        *int                                  `json:"network_count"`
	NodeID              string                                `json:"node_id"`
	NotificationsURL    string                                `json:"notifications_url"`
	OpenIssues          int                                   `json:"open_issues"`
	OpenIssuesCount     int                                   `json:"open_issues_count"`
	Organization        *NullableSimpleUser                   `json:"organization"`
	Owner               SimpleUser                            `json:"owner"`
	Permissions         *NullableRepositoryPermissions        `json:"permissions"`
	Private             bool                                  `json:"private"`
	PullsURL            string                                `json:"pulls_url"`
	PushedAt            time.Time                             `json:"pushed_at"`
	ReleasesURL         string                                `json:"releases_url"`
	SSHURL              string                                `json:"ssh_url"`
	Size                int                                   `json:"size"`
	StargazersCount     int                                   `json:"stargazers_count"`
	StargazersURL       string                                `json:"stargazers_url"`
	StarredAt           *string                               `json:"starred_at"`
	StatusesURL         string                                `json:"statuses_url"`
	SubscribersCount    *int                                  `json:"subscribers_count"`
	SubscribersURL      string                                `json:"subscribers_url"`
	SubscriptionURL     string                                `json:"subscription_url"`
	SvnURL              string                                `json:"svn_url"`
	TagsURL             string                                `json:"tags_url"`
	TeamsURL            string                                `json:"teams_url"`
	TempCloneToken      *string                               `json:"temp_clone_token"`
	TemplateRepository  *NullableRepositoryTemplateRepository `json:"template_repository"`
	Topics              *[]string                             `json:"topics"`
	TreesURL            string                                `json:"trees_url"`
	URL                 string                                `json:"url"`
	UpdatedAt           time.Time                             `json:"updated_at"`
	Visibility          *string                               `json:"visibility"`
	Watchers            int                                   `json:"watchers"`
	WatchersCount       int                                   `json:"watchers_count"`
}

type NullableRepositoryPermissions struct {
	Admin    bool  `json:"admin"`
	Maintain *bool `json:"maintain"`
	Pull     bool  `json:"pull"`
	Push     bool  `json:"push"`
	Triage   *bool `json:"triage"`
}

type NullableRepositoryTemplateRepository struct {
	AllowAutoMerge      *bool                                            `json:"allow_auto_merge"`
	AllowMergeCommit    *bool                                            `json:"allow_merge_commit"`
	AllowRebaseMerge    *bool                                            `json:"allow_rebase_merge"`
	AllowSquashMerge    *bool                                            `json:"allow_squash_merge"`
	ArchiveURL          *string                                          `json:"archive_url"`
	Archived            *bool                                            `json:"archived"`
	AssigneesURL        *string                                          `json:"assignees_url"`
	BlobsURL            *string                                          `json:"blobs_url"`
	BranchesURL         *string                                          `json:"branches_url"`
	CloneURL            *string                                          `json:"clone_url"`
	CollaboratorsURL    *string                                          `json:"collaborators_url"`
	CommentsURL         *string                                          `json:"comments_url"`
	CommitsURL          *string                                          `json:"commits_url"`
	CompareURL          *string                                          `json:"compare_url"`
	ContentsURL         *string                                          `json:"contents_url"`
	ContributorsURL     *string                                          `json:"contributors_url"`
	CreatedAt           *string                                          `json:"created_at"`
	DefaultBranch       *string                                          `json:"default_branch"`
	DeleteBranchOnMerge *bool                                            `json:"delete_branch_on_merge"`
	DeploymentsURL      *string                                          `json:"deployments_url"`
	Description         *string                                          `json:"description"`
	Disabled            *bool                                            `json:"disabled"`
	DownloadsURL        *string                                          `json:"downloads_url"`
	EventsURL           *string                                          `json:"events_url"`
	Fork                *bool                                            `json:"fork"`
	ForksCount          *int                                             `json:"forks_count"`
	ForksURL            *string                                          `json:"forks_url"`
	FullName            *string                                          `json:"full_name"`
	GitCommitsURL       *string                                          `json:"git_commits_url"`
	GitRefsURL          *string                                          `json:"git_refs_url"`
	GitTagsURL          *string                                          `json:"git_tags_url"`
	GitURL              *string                                          `json:"git_url"`
	HTMLURL             *string                                          `json:"html_url"`
	HasDownloads        *bool                                            `json:"has_downloads"`
	HasIssues           *bool                                            `json:"has_issues"`
	HasPages            *bool                                            `json:"has_pages"`
	HasProjects         *bool                                            `json:"has_projects"`
	HasWiki             *bool                                            `json:"has_wiki"`
	Homepage            *string                                          `json:"homepage"`
	HooksURL            *string                                          `json:"hooks_url"`
	ID                  *int                                             `json:"id"`
	IsTemplate          *bool                                            `json:"is_template"`
	IssueCommentURL     *string                                          `json:"issue_comment_url"`
	IssueEventsURL      *string                                          `json:"issue_events_url"`
	IssuesURL           *string                                          `json:"issues_url"`
	KeysURL             *string                                          `json:"keys_url"`
	LabelsURL           *string                                          `json:"labels_url"`
	Language            *string                                          `json:"language"`
	LanguagesURL        *string                                          `json:"languages_url"`
	MergesURL           *string                                          `json:"merges_url"`
	MilestonesURL       *string                                          `json:"milestones_url"`
	MirrorURL           *string                                          `json:"mirror_url"`
	Name                *string                                          `json:"name"`
	NetworkCount        *int                                             `json:"network_count"`
	NodeID              *string                                          `json:"node_id"`
	NotificationsURL    *string                                          `json:"notifications_url"`
	OpenIssuesCount     *int                                             `json:"open_issues_count"`
	Owner               *NullableRepositoryTemplateRepositoryOwner       `json:"owner"`
	Permissions         *NullableRepositoryTemplateRepositoryPermissions `json:"permissions"`
	Private             *bool                                            `json:"private"`
	PullsURL            *string                                          `json:"pulls_url"`
	PushedAt            *string                                          `json:"pushed_at"`
	ReleasesURL         *string                                          `json:"releases_url"`
	SSHURL              *string                                          `json:"ssh_url"`
	Size                *int                                             `json:"size"`
	StargazersCount     *int                                             `json:"stargazers_count"`
	StargazersURL       *string                                          `json:"stargazers_url"`
	StatusesURL         *string                                          `json:"statuses_url"`
	SubscribersCount    *int                                             `json:"subscribers_count"`
	SubscribersURL      *string                                          `json:"subscribers_url"`
	SubscriptionURL     *string                                          `json:"subscription_url"`
	SvnURL              *string                                          `json:"svn_url"`
	TagsURL             *string                                          `json:"tags_url"`
	TeamsURL            *string                                          `json:"teams_url"`
	TempCloneToken      *string                                          `json:"temp_clone_token"`
	Topics              *[]string                                        `json:"topics"`
	TreesURL            *string                                          `json:"trees_url"`
	URL                 *string                                          `json:"url"`
	UpdatedAt           *string                                          `json:"updated_at"`
	Visibility          *string                                          `json:"visibility"`
	WatchersCount       *int                                             `json:"watchers_count"`
}

type NullableRepositoryTemplateRepositoryOwner struct {
	AvatarURL         *string `json:"avatar_url"`
	EventsURL         *string `json:"events_url"`
	FollowersURL      *string `json:"followers_url"`
	FollowingURL      *string `json:"following_url"`
	GistsURL          *string `json:"gists_url"`
	GravatarID        *string `json:"gravatar_id"`
	HTMLURL           *string `json:"html_url"`
	ID                *int    `json:"id"`
	Login             *string `json:"login"`
	NodeID            *string `json:"node_id"`
	OrganizationsURL  *string `json:"organizations_url"`
	ReceivedEventsURL *string `json:"received_events_url"`
	ReposURL          *string `json:"repos_url"`
	SiteAdmin         *bool   `json:"site_admin"`
	StarredURL        *string `json:"starred_url"`
	SubscriptionsURL  *string `json:"subscriptions_url"`
	Type              *string `json:"type"`
	URL               *string `json:"url"`
}

type NullableRepositoryTemplateRepositoryPermissions struct {
	Admin    *bool `json:"admin"`
	Maintain *bool `json:"maintain"`
	Pull     *bool `json:"pull"`
	Push     *bool `json:"push"`
	Triage   *bool `json:"triage"`
}

type NullableScopedInstallation struct {
	Account                SimpleUser                                    `json:"account"`
	HasMultipleSingleFiles *bool                                         `json:"has_multiple_single_files"`
	Permissions            AppPermissions                                `json:"permissions"`
	RepositoriesURL        string                                        `json:"repositories_url"`
	RepositorySelection    NullableScopedInstallationRepositorySelection `json:"repository_selection"`
	SingleFileName         string                                        `json:"single_file_name"`
	SingleFilePaths        *[]string                                     `json:"single_file_paths"`
}

type NullableScopedInstallationRepositorySelection string

const (
	NullableScopedInstallationRepositorySelectionAll      NullableScopedInstallationRepositorySelection = "all"
	NullableScopedInstallationRepositorySelectionSelected NullableScopedInstallationRepositorySelection = "selected"
)

type NullableSimpleCommit struct {
	Author    NullableSimpleCommitAuthor    `json:"author"`
	Committer NullableSimpleCommitCommitter `json:"committer"`
	ID        string                        `json:"id"`
	Message   string                        `json:"message"`
	Timestamp time.Time                     `json:"timestamp"`
	TreeID    string                        `json:"tree_id"`
}

type NullableSimpleCommitAuthor struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type NullableSimpleCommitCommitter struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type NullableSimpleUser struct {
	AvatarURL         string  `json:"avatar_url"`
	Email             *string `json:"email"`
	EventsURL         string  `json:"events_url"`
	FollowersURL      string  `json:"followers_url"`
	FollowingURL      string  `json:"following_url"`
	GistsURL          string  `json:"gists_url"`
	GravatarID        string  `json:"gravatar_id"`
	HTMLURL           string  `json:"html_url"`
	ID                int     `json:"id"`
	Login             string  `json:"login"`
	Name              *string `json:"name"`
	NodeID            string  `json:"node_id"`
	OrganizationsURL  string  `json:"organizations_url"`
	ReceivedEventsURL string  `json:"received_events_url"`
	ReposURL          string  `json:"repos_url"`
	SiteAdmin         bool    `json:"site_admin"`
	StarredAt         *string `json:"starred_at"`
	StarredURL        string  `json:"starred_url"`
	SubscriptionsURL  string  `json:"subscriptions_url"`
	Type              string  `json:"type"`
	URL               string  `json:"url"`
}

type NullableTeamSimple struct {
	Description     string  `json:"description"`
	HTMLURL         string  `json:"html_url"`
	ID              int     `json:"id"`
	LdapDn          *string `json:"ldap_dn"`
	MembersURL      string  `json:"members_url"`
	Name            string  `json:"name"`
	NodeID          string  `json:"node_id"`
	Permission      string  `json:"permission"`
	Privacy         *string `json:"privacy"`
	RepositoriesURL string  `json:"repositories_url"`
	Slug            string  `json:"slug"`
	URL             string  `json:"url"`
}

type OAuthAuthorizationsCreateAuthorizationApplicationJSONRequest struct {
	ClientID     *string   `json:"client_id"`
	ClientSecret *string   `json:"client_secret"`
	Fingerprint  *string   `json:"fingerprint"`
	Note         *string   `json:"note"`
	NoteURL      *string   `json:"note_url"`
	Scopes       *[]string `json:"scopes"`
}

func (*OAuthAuthorizationsCreateAuthorizationApplicationJSONRequest) oAuthAuthorizationsCreateAuthorizationRequest() {
}

type OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsDeleteAuthorizationApplicationJSONForbidden) oAuthAuthorizationsDeleteAuthorizationResponse() {
}

type OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsDeleteAuthorizationApplicationJSONUnauthorized) oAuthAuthorizationsDeleteAuthorizationResponse() {
}

type OAuthAuthorizationsDeleteAuthorizationNoContent struct{}

func (*OAuthAuthorizationsDeleteAuthorizationNoContent) oAuthAuthorizationsDeleteAuthorizationResponse() {
}

type OAuthAuthorizationsDeleteGrantApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsDeleteGrantApplicationJSONForbidden) oAuthAuthorizationsDeleteGrantResponse() {
}

type OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsDeleteGrantApplicationJSONUnauthorized) oAuthAuthorizationsDeleteGrantResponse() {
}

type OAuthAuthorizationsDeleteGrantNoContent struct{}

func (*OAuthAuthorizationsDeleteGrantNoContent) oAuthAuthorizationsDeleteGrantResponse() {}

type OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsGetAuthorizationApplicationJSONForbidden) oAuthAuthorizationsGetAuthorizationResponse() {
}

type OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsGetAuthorizationApplicationJSONUnauthorized) oAuthAuthorizationsGetAuthorizationResponse() {
}

type OAuthAuthorizationsGetGrantApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsGetGrantApplicationJSONForbidden) oAuthAuthorizationsGetGrantResponse() {}

type OAuthAuthorizationsGetGrantApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsGetGrantApplicationJSONUnauthorized) oAuthAuthorizationsGetGrantResponse() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONRequest struct {
	ClientSecret string    `json:"client_secret"`
	Note         *string   `json:"note"`
	NoteURL      *string   `json:"note_url"`
	Scopes       *[]string `json:"scopes"`
}

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONRequest) oAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequest() {
}

type OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONRequest struct {
	ClientSecret string    `json:"client_secret"`
	Fingerprint  *string   `json:"fingerprint"`
	Note         *string   `json:"note"`
	NoteURL      *string   `json:"note_url"`
	Scopes       *[]string `json:"scopes"`
}

func (*OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONRequest) oAuthAuthorizationsGetOrCreateAuthorizationForAppRequest() {
}

type OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsListAuthorizationsApplicationJSONForbidden) oAuthAuthorizationsListAuthorizationsResponse() {
}

type OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound BasicError

func (*OAuthAuthorizationsListAuthorizationsApplicationJSONNotFound) oAuthAuthorizationsListAuthorizationsResponse() {
}

type OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsListAuthorizationsApplicationJSONUnauthorized) oAuthAuthorizationsListAuthorizationsResponse() {
}

type OAuthAuthorizationsListAuthorizationsOK []Authorization

func (*OAuthAuthorizationsListAuthorizationsOK) oAuthAuthorizationsListAuthorizationsResponse() {}

type OAuthAuthorizationsListGrantsApplicationJSONForbidden BasicError

func (*OAuthAuthorizationsListGrantsApplicationJSONForbidden) oAuthAuthorizationsListGrantsResponse() {
}

type OAuthAuthorizationsListGrantsApplicationJSONNotFound BasicError

func (*OAuthAuthorizationsListGrantsApplicationJSONNotFound) oAuthAuthorizationsListGrantsResponse() {
}

type OAuthAuthorizationsListGrantsApplicationJSONUnauthorized BasicError

func (*OAuthAuthorizationsListGrantsApplicationJSONUnauthorized) oAuthAuthorizationsListGrantsResponse() {
}

type OAuthAuthorizationsListGrantsOK []ApplicationGrant

func (*OAuthAuthorizationsListGrantsOK) oAuthAuthorizationsListGrantsResponse() {}

type OAuthAuthorizationsUpdateAuthorizationApplicationJSONRequest struct {
	AddScopes    *[]string `json:"add_scopes"`
	Fingerprint  *string   `json:"fingerprint"`
	Note         *string   `json:"note"`
	NoteURL      *string   `json:"note_url"`
	RemoveScopes *[]string `json:"remove_scopes"`
	Scopes       *[]string `json:"scopes"`
}

func (*OAuthAuthorizationsUpdateAuthorizationApplicationJSONRequest) oAuthAuthorizationsUpdateAuthorizationRequest() {
}

type OrgHook struct {
	Active        bool          `json:"active"`
	Config        OrgHookConfig `json:"config"`
	CreatedAt     time.Time     `json:"created_at"`
	DeliveriesURL *string       `json:"deliveries_url"`
	Events        []string      `json:"events"`
	ID            int           `json:"id"`
	Name          string        `json:"name"`
	PingURL       string        `json:"ping_url"`
	Type          string        `json:"type"`
	URL           string        `json:"url"`
	UpdatedAt     time.Time     `json:"updated_at"`
}

func (*OrgHook) orgsGetWebhookResponse() {}

type OrgHookConfig struct {
	ContentType *string `json:"content_type"`
	InsecureSsl *string `json:"insecure_ssl"`
	Secret      *string `json:"secret"`
	URL         *string `json:"url"`
}

type OrgMembership struct {
	Organization    OrganizationSimple        `json:"organization"`
	OrganizationURL string                    `json:"organization_url"`
	Permissions     *OrgMembershipPermissions `json:"permissions"`
	Role            OrgMembershipRole         `json:"role"`
	State           OrgMembershipState        `json:"state"`
	URL             string                    `json:"url"`
	User            NullableSimpleUser        `json:"user"`
}

func (*OrgMembership) orgsGetMembershipForAuthenticatedUserResponse() {}
func (*OrgMembership) orgsGetMembershipForUserResponse()              {}

type OrgMembershipPermissions struct {
	CanCreateRepository bool `json:"can_create_repository"`
}

type OrgMembershipRole string

const (
	OrgMembershipRoleAdmin          OrgMembershipRole = "admin"
	OrgMembershipRoleMember         OrgMembershipRole = "member"
	OrgMembershipRoleBillingManager OrgMembershipRole = "billing_manager"
)

type OrgMembershipState string

const (
	OrgMembershipStateActive  OrgMembershipState = "active"
	OrgMembershipStatePending OrgMembershipState = "pending"
)

type OrganizationActionsSecret struct {
	CreatedAt               time.Time                           `json:"created_at"`
	Name                    string                              `json:"name"`
	SelectedRepositoriesURL *string                             `json:"selected_repositories_url"`
	UpdatedAt               time.Time                           `json:"updated_at"`
	Visibility              OrganizationActionsSecretVisibility `json:"visibility"`
}

type OrganizationActionsSecretVisibility string

const (
	OrganizationActionsSecretVisibilityAll      OrganizationActionsSecretVisibility = "all"
	OrganizationActionsSecretVisibilityPrivate  OrganizationActionsSecretVisibility = "private"
	OrganizationActionsSecretVisibilitySelected OrganizationActionsSecretVisibility = "selected"
)

type OrganizationFull struct {
	AvatarURL                            string                `json:"avatar_url"`
	BillingEmail                         *string               `json:"billing_email"`
	Blog                                 *string               `json:"blog"`
	Collaborators                        *int                  `json:"collaborators"`
	Company                              *string               `json:"company"`
	CreatedAt                            time.Time             `json:"created_at"`
	DefaultRepositoryPermission          *string               `json:"default_repository_permission"`
	Description                          string                `json:"description"`
	DiskUsage                            *int                  `json:"disk_usage"`
	Email                                *string               `json:"email"`
	EventsURL                            string                `json:"events_url"`
	Followers                            int                   `json:"followers"`
	Following                            int                   `json:"following"`
	HTMLURL                              string                `json:"html_url"`
	HasOrganizationProjects              bool                  `json:"has_organization_projects"`
	HasRepositoryProjects                bool                  `json:"has_repository_projects"`
	HooksURL                             string                `json:"hooks_url"`
	ID                                   int                   `json:"id"`
	IsVerified                           *bool                 `json:"is_verified"`
	IssuesURL                            string                `json:"issues_url"`
	Location                             *string               `json:"location"`
	Login                                string                `json:"login"`
	MembersAllowedRepositoryCreationType *string               `json:"members_allowed_repository_creation_type"`
	MembersCanCreateInternalRepositories *bool                 `json:"members_can_create_internal_repositories"`
	MembersCanCreatePages                *bool                 `json:"members_can_create_pages"`
	MembersCanCreatePrivatePages         *bool                 `json:"members_can_create_private_pages"`
	MembersCanCreatePrivateRepositories  *bool                 `json:"members_can_create_private_repositories"`
	MembersCanCreatePublicPages          *bool                 `json:"members_can_create_public_pages"`
	MembersCanCreatePublicRepositories   *bool                 `json:"members_can_create_public_repositories"`
	MembersCanCreateRepositories         *bool                 `json:"members_can_create_repositories"`
	MembersURL                           string                `json:"members_url"`
	Name                                 *string               `json:"name"`
	NodeID                               string                `json:"node_id"`
	OwnedPrivateRepos                    *int                  `json:"owned_private_repos"`
	Plan                                 *OrganizationFullPlan `json:"plan"`
	PrivateGists                         *int                  `json:"private_gists"`
	PublicGists                          int                   `json:"public_gists"`
	PublicMembersURL                     string                `json:"public_members_url"`
	PublicRepos                          int                   `json:"public_repos"`
	ReposURL                             string                `json:"repos_url"`
	TotalPrivateRepos                    *int                  `json:"total_private_repos"`
	TwitterUsername                      *string               `json:"twitter_username"`
	TwoFactorRequirementEnabled          *bool                 `json:"two_factor_requirement_enabled"`
	Type                                 string                `json:"type"`
	URL                                  string                `json:"url"`
	UpdatedAt                            time.Time             `json:"updated_at"`
}

func (*OrganizationFull) orgsGetResponse() {}

type OrganizationFullPlan struct {
	FilledSeats  *int   `json:"filled_seats"`
	Name         string `json:"name"`
	PrivateRepos int    `json:"private_repos"`
	Seats        *int   `json:"seats"`
	Space        int    `json:"space"`
}

type OrganizationInvitation struct {
	CreatedAt          string     `json:"created_at"`
	Email              string     `json:"email"`
	FailedAt           *string    `json:"failed_at"`
	FailedReason       *string    `json:"failed_reason"`
	ID                 int        `json:"id"`
	InvitationTeamsURL string     `json:"invitation_teams_url"`
	Inviter            SimpleUser `json:"inviter"`
	Login              string     `json:"login"`
	NodeID             string     `json:"node_id"`
	Role               string     `json:"role"`
	TeamCount          int        `json:"team_count"`
}

type OrganizationSimple struct {
	AvatarURL        string `json:"avatar_url"`
	Description      string `json:"description"`
	EventsURL        string `json:"events_url"`
	HooksURL         string `json:"hooks_url"`
	ID               int    `json:"id"`
	IssuesURL        string `json:"issues_url"`
	Login            string `json:"login"`
	MembersURL       string `json:"members_url"`
	NodeID           string `json:"node_id"`
	PublicMembersURL string `json:"public_members_url"`
	ReposURL         string `json:"repos_url"`
	URL              string `json:"url"`
}

type OrgsBlockUserNoContent struct{}

type OrgsCancelInvitationNoContent struct{}

type OrgsCheckBlockedUserNoContent struct{}

func (*OrgsCheckBlockedUserNoContent) orgsCheckBlockedUserResponse() {}

type OrgsCheckMembershipForUserFound struct{}

func (*OrgsCheckMembershipForUserFound) orgsCheckMembershipForUserResponse() {}

type OrgsCheckMembershipForUserNoContent struct{}

func (*OrgsCheckMembershipForUserNoContent) orgsCheckMembershipForUserResponse() {}

type OrgsCheckMembershipForUserNotFound struct{}

func (*OrgsCheckMembershipForUserNotFound) orgsCheckMembershipForUserResponse() {}

type OrgsCheckPublicMembershipForUserNoContent struct{}

func (*OrgsCheckPublicMembershipForUserNoContent) orgsCheckPublicMembershipForUserResponse() {}

type OrgsCheckPublicMembershipForUserNotFound struct{}

func (*OrgsCheckPublicMembershipForUserNotFound) orgsCheckPublicMembershipForUserResponse() {}

type OrgsConvertMemberToOutsideCollaboratorAccepted struct{}

func (*OrgsConvertMemberToOutsideCollaboratorAccepted) orgsConvertMemberToOutsideCollaboratorResponse() {
}

type OrgsConvertMemberToOutsideCollaboratorForbidden struct{}

func (*OrgsConvertMemberToOutsideCollaboratorForbidden) orgsConvertMemberToOutsideCollaboratorResponse() {
}

type OrgsConvertMemberToOutsideCollaboratorNoContent struct{}

func (*OrgsConvertMemberToOutsideCollaboratorNoContent) orgsConvertMemberToOutsideCollaboratorResponse() {
}

type OrgsCreateInvitationApplicationJSONRequest struct {
	Email     *string                                         `json:"email"`
	InviteeID *int                                            `json:"invitee_id"`
	Role      *OrgsCreateInvitationApplicationJSONRequestRole `json:"role"`
	TeamIds   *[]int                                          `json:"team_ids"`
}

func (*OrgsCreateInvitationApplicationJSONRequest) orgsCreateInvitationRequest() {}

type OrgsCreateInvitationApplicationJSONRequestRole string

const (
	OrgsCreateInvitationApplicationJSONRequestRoleAdmin          OrgsCreateInvitationApplicationJSONRequestRole = "admin"
	OrgsCreateInvitationApplicationJSONRequestRoleDirectMember   OrgsCreateInvitationApplicationJSONRequestRole = "direct_member"
	OrgsCreateInvitationApplicationJSONRequestRoleBillingManager OrgsCreateInvitationApplicationJSONRequestRole = "billing_manager"
)

type OrgsDeleteWebhookNoContent struct{}

func (*OrgsDeleteWebhookNoContent) orgsDeleteWebhookResponse() {}

type OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden BasicError

func (*OrgsGetMembershipForAuthenticatedUserApplicationJSONForbidden) orgsGetMembershipForAuthenticatedUserResponse() {
}

type OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound BasicError

func (*OrgsGetMembershipForAuthenticatedUserApplicationJSONNotFound) orgsGetMembershipForAuthenticatedUserResponse() {
}

type OrgsGetMembershipForUserApplicationJSONForbidden BasicError

func (*OrgsGetMembershipForUserApplicationJSONForbidden) orgsGetMembershipForUserResponse() {}

type OrgsGetMembershipForUserApplicationJSONNotFound BasicError

func (*OrgsGetMembershipForUserApplicationJSONNotFound) orgsGetMembershipForUserResponse() {}

type OrgsListBlockedUsersOK []SimpleUser

func (*OrgsListBlockedUsersOK) orgsListBlockedUsersResponse() {}

type OrgsListFailedInvitationsOK []OrganizationInvitation

func (*OrgsListFailedInvitationsOK) orgsListFailedInvitationsResponse() {}

type OrgsListForAuthenticatedUserApplicationJSONForbidden BasicError

func (*OrgsListForAuthenticatedUserApplicationJSONForbidden) orgsListForAuthenticatedUserResponse() {}

type OrgsListForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*OrgsListForAuthenticatedUserApplicationJSONUnauthorized) orgsListForAuthenticatedUserResponse() {
}

type OrgsListForAuthenticatedUserOK []OrganizationSimple

func (*OrgsListForAuthenticatedUserOK) orgsListForAuthenticatedUserResponse() {}

type OrgsListInvitationTeamsOK []Team

func (*OrgsListInvitationTeamsOK) orgsListInvitationTeamsResponse() {}

type OrgsListOK []OrganizationSimple

func (*OrgsListOK) orgsListResponse() {}

type OrgsListPendingInvitationsOK []OrganizationInvitation

func (*OrgsListPendingInvitationsOK) orgsListPendingInvitationsResponse() {}

type OrgsListWebhookDeliveriesOK []HookDeliveryItem

type OrgsListWebhooksOK []OrgHook

func (*OrgsListWebhooksOK) orgsListWebhooksResponse() {}

type OrgsPingWebhookNoContent struct{}

func (*OrgsPingWebhookNoContent) orgsPingWebhookResponse() {}

type OrgsRemoveMemberNoContent struct{}

func (*OrgsRemoveMemberNoContent) orgsRemoveMemberResponse() {}

type OrgsRemoveMembershipForUserApplicationJSONForbidden BasicError

func (*OrgsRemoveMembershipForUserApplicationJSONForbidden) orgsRemoveMembershipForUserResponse() {}

type OrgsRemoveMembershipForUserApplicationJSONNotFound BasicError

func (*OrgsRemoveMembershipForUserApplicationJSONNotFound) orgsRemoveMembershipForUserResponse() {}

type OrgsRemoveMembershipForUserNoContent struct{}

func (*OrgsRemoveMembershipForUserNoContent) orgsRemoveMembershipForUserResponse() {}

type OrgsRemoveOutsideCollaboratorNoContent struct{}

func (*OrgsRemoveOutsideCollaboratorNoContent) orgsRemoveOutsideCollaboratorResponse() {}

type OrgsRemoveOutsideCollaboratorUnprocessableEntity struct {
	DocumentationURL *string `json:"documentation_url"`
	Message          *string `json:"message"`
}

func (*OrgsRemoveOutsideCollaboratorUnprocessableEntity) orgsRemoveOutsideCollaboratorResponse() {}

type OrgsRemovePublicMembershipForAuthenticatedUser struct{}

type OrgsRemoveSamlSSOAuthorizationNoContent struct{}

func (*OrgsRemoveSamlSSOAuthorizationNoContent) orgsRemoveSamlSSOAuthorizationResponse() {}

type OrgsSetMembershipForUserApplicationJSONRequest struct {
	Role *OrgsSetMembershipForUserApplicationJSONRequestRole `json:"role"`
}

func (*OrgsSetMembershipForUserApplicationJSONRequest) orgsSetMembershipForUserRequest() {}

type OrgsSetMembershipForUserApplicationJSONRequestRole string

const (
	OrgsSetMembershipForUserApplicationJSONRequestRoleAdmin  OrgsSetMembershipForUserApplicationJSONRequestRole = "admin"
	OrgsSetMembershipForUserApplicationJSONRequestRoleMember OrgsSetMembershipForUserApplicationJSONRequestRole = "member"
)

type OrgsSetPublicMembershipForAuthenticatedUserNoContent struct{}

func (*OrgsSetPublicMembershipForAuthenticatedUserNoContent) orgsSetPublicMembershipForAuthenticatedUserResponse() {
}

type OrgsUnblockUser struct{}

type OrgsUpdateApplicationJSONRequest struct {
	BillingEmail                         *string                                                               `json:"billing_email"`
	Blog                                 *string                                                               `json:"blog"`
	Company                              *string                                                               `json:"company"`
	DefaultRepositoryPermission          *OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission          `json:"default_repository_permission"`
	Description                          *string                                                               `json:"description"`
	Email                                *string                                                               `json:"email"`
	HasOrganizationProjects              *bool                                                                 `json:"has_organization_projects"`
	HasRepositoryProjects                *bool                                                                 `json:"has_repository_projects"`
	Location                             *string                                                               `json:"location"`
	MembersAllowedRepositoryCreationType *OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType `json:"members_allowed_repository_creation_type"`
	MembersCanCreateInternalRepositories *bool                                                                 `json:"members_can_create_internal_repositories"`
	MembersCanCreatePages                *bool                                                                 `json:"members_can_create_pages"`
	MembersCanCreatePrivatePages         *bool                                                                 `json:"members_can_create_private_pages"`
	MembersCanCreatePrivateRepositories  *bool                                                                 `json:"members_can_create_private_repositories"`
	MembersCanCreatePublicPages          *bool                                                                 `json:"members_can_create_public_pages"`
	MembersCanCreatePublicRepositories   *bool                                                                 `json:"members_can_create_public_repositories"`
	MembersCanCreateRepositories         *bool                                                                 `json:"members_can_create_repositories"`
	Name                                 *string                                                               `json:"name"`
	TwitterUsername                      *string                                                               `json:"twitter_username"`
}

func (*OrgsUpdateApplicationJSONRequest) orgsUpdateRequest() {}

type OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission string

const (
	OrgsUpdateApplicationJSONRequestDefaultRepositoryPermissionRead  OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission = "read"
	OrgsUpdateApplicationJSONRequestDefaultRepositoryPermissionWrite OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission = "write"
	OrgsUpdateApplicationJSONRequestDefaultRepositoryPermissionAdmin OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission = "admin"
	OrgsUpdateApplicationJSONRequestDefaultRepositoryPermissionNone  OrgsUpdateApplicationJSONRequestDefaultRepositoryPermission = "none"
)

type OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType string

const (
	OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationTypeAll     OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType = "all"
	OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationTypePrivate OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType = "private"
	OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationTypeNone    OrgsUpdateApplicationJSONRequestMembersAllowedRepositoryCreationType = "none"
)

type OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest struct {
	State OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequestState `json:"state"`
}

func (*OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest) orgsUpdateMembershipForAuthenticatedUserRequest() {
}

type OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequestState string

const (
	OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequestStateActive OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequestState = "active"
)

type PackagesBillingUsage struct {
	IncludedGigabytesBandwidth      int `json:"included_gigabytes_bandwidth"`
	TotalGigabytesBandwidthUsed     int `json:"total_gigabytes_bandwidth_used"`
	TotalPaidGigabytesBandwidthUsed int `json:"total_paid_gigabytes_bandwidth_used"`
}

type Page struct {
	Cname                     string                    `json:"cname"`
	Custom404                 bool                      `json:"custom_404"`
	HTMLURL                   *string                   `json:"html_url"`
	HTTPSCertificate          *PagesHTTPSCertificate    `json:"https_certificate"`
	HTTPSEnforced             *bool                     `json:"https_enforced"`
	PendingDomainUnverifiedAt *time.Time                `json:"pending_domain_unverified_at"`
	ProtectedDomainState      *PageProtectedDomainState `json:"protected_domain_state"`
	Public                    bool                      `json:"public"`
	Source                    *PagesSourceHash          `json:"source"`
	Status                    PageStatus                `json:"status"`
	URL                       string                    `json:"url"`
}

func (*Page) reposGetPagesResponse() {}

type PageBuild struct {
	Commit    string             `json:"commit"`
	CreatedAt time.Time          `json:"created_at"`
	Duration  int                `json:"duration"`
	Error     PageBuildError     `json:"error"`
	Pusher    NullableSimpleUser `json:"pusher"`
	Status    string             `json:"status"`
	URL       string             `json:"url"`
	UpdatedAt time.Time          `json:"updated_at"`
}

type PageBuildError struct {
	Message string `json:"message"`
}

type PageBuildStatus struct {
	Status string `json:"status"`
	URL    string `json:"url"`
}

type PageProtectedDomainState string

const (
	PageProtectedDomainStatePending    PageProtectedDomainState = "pending"
	PageProtectedDomainStateVerified   PageProtectedDomainState = "verified"
	PageProtectedDomainStateUnverified PageProtectedDomainState = "unverified"
)

type PageStatus string

const (
	PageStatusBuilt    PageStatus = "built"
	PageStatusBuilding PageStatus = "building"
	PageStatusErrored  PageStatus = "errored"
)

type PagesHTTPSCertificate struct {
	Description string                     `json:"description"`
	Domains     []string                   `json:"domains"`
	ExpiresAt   *time.Time                 `json:"expires_at"`
	State       PagesHTTPSCertificateState `json:"state"`
}

type PagesHTTPSCertificateState string

const (
	PagesHTTPSCertificateStateNew                  PagesHTTPSCertificateState = "new"
	PagesHTTPSCertificateStateAuthorizationCreated PagesHTTPSCertificateState = "authorization_created"
	PagesHTTPSCertificateStateAuthorizationPending PagesHTTPSCertificateState = "authorization_pending"
	PagesHTTPSCertificateStateAuthorized           PagesHTTPSCertificateState = "authorized"
	PagesHTTPSCertificateStateAuthorizationRevoked PagesHTTPSCertificateState = "authorization_revoked"
	PagesHTTPSCertificateStateIssued               PagesHTTPSCertificateState = "issued"
	PagesHTTPSCertificateStateUploaded             PagesHTTPSCertificateState = "uploaded"
	PagesHTTPSCertificateStateApproved             PagesHTTPSCertificateState = "approved"
	PagesHTTPSCertificateStateErrored              PagesHTTPSCertificateState = "errored"
	PagesHTTPSCertificateStateBadAuthz             PagesHTTPSCertificateState = "bad_authz"
	PagesHTTPSCertificateStateDestroyPending       PagesHTTPSCertificateState = "destroy_pending"
	PagesHTTPSCertificateStateDNSChanged           PagesHTTPSCertificateState = "dns_changed"
)

type PagesHealthCheck struct {
	AltDomain *PagesHealthCheckAltDomain `json:"alt_domain"`
	Domain    *PagesHealthCheckDomain    `json:"domain"`
}

func (*PagesHealthCheck) reposGetPagesHealthCheckResponse() {}

type PagesHealthCheckAltDomain struct {
	CaaError                      *string `json:"caa_error"`
	DNSResolves                   *bool   `json:"dns_resolves"`
	EnforcesHTTPS                 *bool   `json:"enforces_https"`
	HTTPSError                    *string `json:"https_error"`
	HasCnameRecord                *bool   `json:"has_cname_record"`
	HasMxRecordsPresent           *bool   `json:"has_mx_records_present"`
	Host                          *string `json:"host"`
	IsARecord                     *bool   `json:"is_a_record"`
	IsApexDomain                  *bool   `json:"is_apex_domain"`
	IsCloudflareIP                *bool   `json:"is_cloudflare_ip"`
	IsCnameToFastly               *bool   `json:"is_cname_to_fastly"`
	IsCnameToGithubUserDomain     *bool   `json:"is_cname_to_github_user_domain"`
	IsCnameToPagesDotGithubDotCom *bool   `json:"is_cname_to_pages_dot_github_dot_com"`
	IsFastlyIP                    *bool   `json:"is_fastly_ip"`
	IsHTTPSEligible               *bool   `json:"is_https_eligible"`
	IsNonGithubPagesIPPresent     *bool   `json:"is_non_github_pages_ip_present"`
	IsOldIPAddress                *bool   `json:"is_old_ip_address"`
	IsPagesDomain                 *bool   `json:"is_pages_domain"`
	IsPointedToGithubPagesIP      *bool   `json:"is_pointed_to_github_pages_ip"`
	IsProxied                     *bool   `json:"is_proxied"`
	IsServedByPages               *bool   `json:"is_served_by_pages"`
	IsValid                       *bool   `json:"is_valid"`
	IsValidDomain                 *bool   `json:"is_valid_domain"`
	Nameservers                   *string `json:"nameservers"`
	Reason                        *string `json:"reason"`
	RespondsToHTTPS               *bool   `json:"responds_to_https"`
	ShouldBeARecord               *bool   `json:"should_be_a_record"`
	URI                           *string `json:"uri"`
}

type PagesHealthCheckDomain struct {
	CaaError                      *string `json:"caa_error"`
	DNSResolves                   *bool   `json:"dns_resolves"`
	EnforcesHTTPS                 *bool   `json:"enforces_https"`
	HTTPSError                    *string `json:"https_error"`
	HasCnameRecord                *bool   `json:"has_cname_record"`
	HasMxRecordsPresent           *bool   `json:"has_mx_records_present"`
	Host                          *string `json:"host"`
	IsARecord                     *bool   `json:"is_a_record"`
	IsApexDomain                  *bool   `json:"is_apex_domain"`
	IsCloudflareIP                *bool   `json:"is_cloudflare_ip"`
	IsCnameToFastly               *bool   `json:"is_cname_to_fastly"`
	IsCnameToGithubUserDomain     *bool   `json:"is_cname_to_github_user_domain"`
	IsCnameToPagesDotGithubDotCom *bool   `json:"is_cname_to_pages_dot_github_dot_com"`
	IsFastlyIP                    *bool   `json:"is_fastly_ip"`
	IsHTTPSEligible               *bool   `json:"is_https_eligible"`
	IsNonGithubPagesIPPresent     *bool   `json:"is_non_github_pages_ip_present"`
	IsOldIPAddress                *bool   `json:"is_old_ip_address"`
	IsPagesDomain                 *bool   `json:"is_pages_domain"`
	IsPointedToGithubPagesIP      *bool   `json:"is_pointed_to_github_pages_ip"`
	IsProxied                     *bool   `json:"is_proxied"`
	IsServedByPages               *bool   `json:"is_served_by_pages"`
	IsValid                       *bool   `json:"is_valid"`
	IsValidDomain                 *bool   `json:"is_valid_domain"`
	Nameservers                   *string `json:"nameservers"`
	Reason                        *string `json:"reason"`
	RespondsToHTTPS               *bool   `json:"responds_to_https"`
	ShouldBeARecord               *bool   `json:"should_be_a_record"`
	URI                           *string `json:"uri"`
}

type PagesSourceHash struct {
	Branch string `json:"branch"`
	Path   string `json:"path"`
}

type ParticipationStats struct {
	All   []int `json:"all"`
	Owner []int `json:"owner"`
}

func (*ParticipationStats) reposGetParticipationStatsResponse() {}

type PorterAuthor struct {
	Email      string `json:"email"`
	ID         int    `json:"id"`
	ImportURL  string `json:"import_url"`
	Name       string `json:"name"`
	RemoteID   string `json:"remote_id"`
	RemoteName string `json:"remote_name"`
	URL        string `json:"url"`
}

type PorterLargeFile struct {
	Oid     string `json:"oid"`
	Path    string `json:"path"`
	RefName string `json:"ref_name"`
	Size    int    `json:"size"`
}

type PreviewHeaderMissing struct {
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
}

func (*PreviewHeaderMissing) appsGetBySlugResponse()                      {}
func (*PreviewHeaderMissing) orgsListBlockedUsersResponse()               {}
func (*PreviewHeaderMissing) projectsCreateForAuthenticatedUserResponse() {}
func (*PreviewHeaderMissing) reactionsDeleteLegacyResponse()              {}
func (*PreviewHeaderMissing) reposGetAllTopicsResponse()                  {}
func (*PreviewHeaderMissing) reposGetBranchResponse()                     {}
func (*PreviewHeaderMissing) reposGetDeploymentStatusResponse()           {}
func (*PreviewHeaderMissing) reposGetReleaseAssetResponse()               {}
func (*PreviewHeaderMissing) reposReplaceAllTopicsResponse()              {}
func (*PreviewHeaderMissing) searchTopicsResponse()                       {}
func (*PreviewHeaderMissing) usersListBlockedByAuthenticatedResponse()    {}

type PrivateUser struct {
	AvatarURL               string           `json:"avatar_url"`
	Bio                     string           `json:"bio"`
	Blog                    string           `json:"blog"`
	BusinessPlus            *bool            `json:"business_plus"`
	Collaborators           int              `json:"collaborators"`
	Company                 string           `json:"company"`
	CreatedAt               time.Time        `json:"created_at"`
	DiskUsage               int              `json:"disk_usage"`
	Email                   string           `json:"email"`
	EventsURL               string           `json:"events_url"`
	Followers               int              `json:"followers"`
	FollowersURL            string           `json:"followers_url"`
	Following               int              `json:"following"`
	FollowingURL            string           `json:"following_url"`
	GistsURL                string           `json:"gists_url"`
	GravatarID              string           `json:"gravatar_id"`
	HTMLURL                 string           `json:"html_url"`
	Hireable                bool             `json:"hireable"`
	ID                      int              `json:"id"`
	LdapDn                  *string          `json:"ldap_dn"`
	Location                string           `json:"location"`
	Login                   string           `json:"login"`
	Name                    string           `json:"name"`
	NodeID                  string           `json:"node_id"`
	OrganizationsURL        string           `json:"organizations_url"`
	OwnedPrivateRepos       int              `json:"owned_private_repos"`
	Plan                    *PrivateUserPlan `json:"plan"`
	PrivateGists            int              `json:"private_gists"`
	PublicGists             int              `json:"public_gists"`
	PublicRepos             int              `json:"public_repos"`
	ReceivedEventsURL       string           `json:"received_events_url"`
	ReposURL                string           `json:"repos_url"`
	SiteAdmin               bool             `json:"site_admin"`
	StarredURL              string           `json:"starred_url"`
	SubscriptionsURL        string           `json:"subscriptions_url"`
	SuspendedAt             *time.Time       `json:"suspended_at"`
	TotalPrivateRepos       int              `json:"total_private_repos"`
	TwitterUsername         *string          `json:"twitter_username"`
	TwoFactorAuthentication bool             `json:"two_factor_authentication"`
	Type                    string           `json:"type"`
	URL                     string           `json:"url"`
	UpdatedAt               time.Time        `json:"updated_at"`
}

type PrivateUserPlan struct {
	Collaborators int    `json:"collaborators"`
	Name          string `json:"name"`
	PrivateRepos  int    `json:"private_repos"`
	Space         int    `json:"space"`
}

type Project struct {
	Body                   string                         `json:"body"`
	ColumnsURL             string                         `json:"columns_url"`
	CreatedAt              time.Time                      `json:"created_at"`
	Creator                NullableSimpleUser             `json:"creator"`
	HTMLURL                string                         `json:"html_url"`
	ID                     int                            `json:"id"`
	Name                   string                         `json:"name"`
	NodeID                 string                         `json:"node_id"`
	Number                 int                            `json:"number"`
	OrganizationPermission *ProjectOrganizationPermission `json:"organization_permission"`
	OwnerURL               string                         `json:"owner_url"`
	Private                *bool                          `json:"private"`
	State                  string                         `json:"state"`
	URL                    string                         `json:"url"`
	UpdatedAt              time.Time                      `json:"updated_at"`
}

func (*Project) projectsCreateForAuthenticatedUserResponse() {}
func (*Project) projectsCreateForOrgResponse()               {}
func (*Project) projectsCreateForRepoResponse()              {}
func (*Project) projectsGetResponse()                        {}
func (*Project) projectsUpdateResponse()                     {}

type ProjectCard struct {
	Archived   *bool              `json:"archived"`
	ColumnName *string            `json:"column_name"`
	ColumnURL  string             `json:"column_url"`
	ContentURL *string            `json:"content_url"`
	CreatedAt  time.Time          `json:"created_at"`
	Creator    NullableSimpleUser `json:"creator"`
	ID         int                `json:"id"`
	NodeID     string             `json:"node_id"`
	Note       string             `json:"note"`
	ProjectID  *string            `json:"project_id"`
	ProjectURL string             `json:"project_url"`
	URL        string             `json:"url"`
	UpdatedAt  time.Time          `json:"updated_at"`
}

func (*ProjectCard) projectsGetCardResponse()    {}
func (*ProjectCard) projectsUpdateCardResponse() {}

type ProjectColumn struct {
	CardsURL   string    `json:"cards_url"`
	CreatedAt  time.Time `json:"created_at"`
	ID         int       `json:"id"`
	Name       string    `json:"name"`
	NodeID     string    `json:"node_id"`
	ProjectURL string    `json:"project_url"`
	URL        string    `json:"url"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (*ProjectColumn) projectsCreateColumnResponse() {}
func (*ProjectColumn) projectsGetColumnResponse()    {}
func (*ProjectColumn) projectsUpdateColumnResponse() {}

type ProjectOrganizationPermission string

const (
	ProjectOrganizationPermissionRead  ProjectOrganizationPermission = "read"
	ProjectOrganizationPermissionWrite ProjectOrganizationPermission = "write"
	ProjectOrganizationPermissionAdmin ProjectOrganizationPermission = "admin"
	ProjectOrganizationPermissionNone  ProjectOrganizationPermission = "none"
)

type ProjectsAddCollaboratorApplicationJSONRequest struct {
	Permission *ProjectsAddCollaboratorApplicationJSONRequestPermission `json:"permission"`
}

func (*ProjectsAddCollaboratorApplicationJSONRequest) projectsAddCollaboratorRequest() {}

type ProjectsAddCollaboratorApplicationJSONRequestPermission string

const (
	ProjectsAddCollaboratorApplicationJSONRequestPermissionRead  ProjectsAddCollaboratorApplicationJSONRequestPermission = "read"
	ProjectsAddCollaboratorApplicationJSONRequestPermissionWrite ProjectsAddCollaboratorApplicationJSONRequestPermission = "write"
	ProjectsAddCollaboratorApplicationJSONRequestPermissionAdmin ProjectsAddCollaboratorApplicationJSONRequestPermission = "admin"
)

type ProjectsAddCollaboratorNoContent struct{}

type ProjectsCreateColumnApplicationJSONForbidden BasicError

func (*ProjectsCreateColumnApplicationJSONForbidden) projectsCreateColumnResponse() {}

type ProjectsCreateColumnApplicationJSONRequest struct {
	Name string `json:"name"`
}

type ProjectsCreateColumnApplicationJSONUnauthorized BasicError

func (*ProjectsCreateColumnApplicationJSONUnauthorized) projectsCreateColumnResponse() {}

type ProjectsCreateForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ProjectsCreateForAuthenticatedUserApplicationJSONForbidden) projectsCreateForAuthenticatedUserResponse() {
}

type ProjectsCreateForAuthenticatedUserApplicationJSONRequest struct {
	Body *string `json:"body"`
	Name string  `json:"name"`
}

type ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ProjectsCreateForAuthenticatedUserApplicationJSONUnauthorized) projectsCreateForAuthenticatedUserResponse() {
}

type ProjectsCreateForOrgApplicationJSONForbidden BasicError

func (*ProjectsCreateForOrgApplicationJSONForbidden) projectsCreateForOrgResponse() {}

type ProjectsCreateForOrgApplicationJSONGone BasicError

func (*ProjectsCreateForOrgApplicationJSONGone) projectsCreateForOrgResponse() {}

type ProjectsCreateForOrgApplicationJSONNotFound BasicError

func (*ProjectsCreateForOrgApplicationJSONNotFound) projectsCreateForOrgResponse() {}

type ProjectsCreateForOrgApplicationJSONRequest struct {
	Body *string `json:"body"`
	Name string  `json:"name"`
}

type ProjectsCreateForOrgApplicationJSONUnauthorized BasicError

func (*ProjectsCreateForOrgApplicationJSONUnauthorized) projectsCreateForOrgResponse() {}

type ProjectsCreateForRepoApplicationJSONForbidden BasicError

func (*ProjectsCreateForRepoApplicationJSONForbidden) projectsCreateForRepoResponse() {}

type ProjectsCreateForRepoApplicationJSONGone BasicError

func (*ProjectsCreateForRepoApplicationJSONGone) projectsCreateForRepoResponse() {}

type ProjectsCreateForRepoApplicationJSONNotFound BasicError

func (*ProjectsCreateForRepoApplicationJSONNotFound) projectsCreateForRepoResponse() {}

type ProjectsCreateForRepoApplicationJSONRequest struct {
	Body *string `json:"body"`
	Name string  `json:"name"`
}

type ProjectsCreateForRepoApplicationJSONUnauthorized BasicError

func (*ProjectsCreateForRepoApplicationJSONUnauthorized) projectsCreateForRepoResponse() {}

type ProjectsDeleteApplicationJSONGone BasicError

func (*ProjectsDeleteApplicationJSONGone) projectsDeleteResponse() {}

type ProjectsDeleteApplicationJSONNotFound BasicError

func (*ProjectsDeleteApplicationJSONNotFound) projectsDeleteResponse() {}

type ProjectsDeleteApplicationJSONUnauthorized BasicError

func (*ProjectsDeleteApplicationJSONUnauthorized) projectsDeleteResponse() {}

type ProjectsDeleteCardApplicationJSONNotFound BasicError

func (*ProjectsDeleteCardApplicationJSONNotFound) projectsDeleteCardResponse() {}

type ProjectsDeleteCardApplicationJSONUnauthorized BasicError

func (*ProjectsDeleteCardApplicationJSONUnauthorized) projectsDeleteCardResponse() {}

type ProjectsDeleteCardForbidden struct {
	DocumentationURL *string   `json:"documentation_url"`
	Errors           *[]string `json:"errors"`
	Message          *string   `json:"message"`
}

func (*ProjectsDeleteCardForbidden) projectsDeleteCardResponse() {}

type ProjectsDeleteCardNoContent struct{}

func (*ProjectsDeleteCardNoContent) projectsDeleteCardResponse() {}

type ProjectsDeleteColumnApplicationJSONForbidden BasicError

func (*ProjectsDeleteColumnApplicationJSONForbidden) projectsDeleteColumnResponse() {}

type ProjectsDeleteColumnApplicationJSONUnauthorized BasicError

func (*ProjectsDeleteColumnApplicationJSONUnauthorized) projectsDeleteColumnResponse() {}

type ProjectsDeleteColumnNoContent struct{}

func (*ProjectsDeleteColumnNoContent) projectsDeleteColumnResponse() {}

type ProjectsDeleteForbidden struct {
	DocumentationURL *string   `json:"documentation_url"`
	Errors           *[]string `json:"errors"`
	Message          *string   `json:"message"`
}

func (*ProjectsDeleteForbidden) projectsDeleteResponse() {}

type ProjectsDeleteNoContent struct{}

func (*ProjectsDeleteNoContent) projectsDeleteResponse() {}

type ProjectsGetApplicationJSONForbidden BasicError

func (*ProjectsGetApplicationJSONForbidden) projectsGetResponse() {}

type ProjectsGetApplicationJSONUnauthorized BasicError

func (*ProjectsGetApplicationJSONUnauthorized) projectsGetResponse() {}

type ProjectsGetCardApplicationJSONForbidden BasicError

func (*ProjectsGetCardApplicationJSONForbidden) projectsGetCardResponse() {}

type ProjectsGetCardApplicationJSONNotFound BasicError

func (*ProjectsGetCardApplicationJSONNotFound) projectsGetCardResponse() {}

type ProjectsGetCardApplicationJSONUnauthorized BasicError

func (*ProjectsGetCardApplicationJSONUnauthorized) projectsGetCardResponse() {}

type ProjectsGetColumnApplicationJSONForbidden BasicError

func (*ProjectsGetColumnApplicationJSONForbidden) projectsGetColumnResponse() {}

type ProjectsGetColumnApplicationJSONNotFound BasicError

func (*ProjectsGetColumnApplicationJSONNotFound) projectsGetColumnResponse() {}

type ProjectsGetColumnApplicationJSONUnauthorized BasicError

func (*ProjectsGetColumnApplicationJSONUnauthorized) projectsGetColumnResponse() {}

type ProjectsListColumnsApplicationJSONForbidden BasicError

func (*ProjectsListColumnsApplicationJSONForbidden) projectsListColumnsResponse() {}

type ProjectsListColumnsApplicationJSONUnauthorized BasicError

func (*ProjectsListColumnsApplicationJSONUnauthorized) projectsListColumnsResponse() {}

type ProjectsListColumnsOK []ProjectColumn

func (*ProjectsListColumnsOK) projectsListColumnsResponse() {}

type ProjectsMoveCardApplicationJSONRequest struct {
	ColumnID *int   `json:"column_id"`
	Position string `json:"position"`
}

func (*ProjectsMoveCardApplicationJSONRequest) projectsMoveCardRequest() {}

type ProjectsMoveCardCreated struct{}

type ProjectsMoveCardForbidden struct {
	DocumentationURL *string                                `json:"documentation_url"`
	Errors           *[]ProjectsMoveCardForbiddenErrorsItem `json:"errors"`
	Message          *string                                `json:"message"`
}

type ProjectsMoveCardForbiddenErrorsItem struct {
	Code     *string `json:"code"`
	Field    *string `json:"field"`
	Message  *string `json:"message"`
	Resource *string `json:"resource"`
}

type ProjectsMoveColumnApplicationJSONForbidden BasicError

func (*ProjectsMoveColumnApplicationJSONForbidden) projectsMoveColumnResponse() {}

type ProjectsMoveColumnApplicationJSONRequest struct {
	Position string `json:"position"`
}

type ProjectsMoveColumnApplicationJSONUnauthorized BasicError

func (*ProjectsMoveColumnApplicationJSONUnauthorized) projectsMoveColumnResponse() {}

type ProjectsMoveColumnCreated struct{}

func (*ProjectsMoveColumnCreated) projectsMoveColumnResponse() {}

type ProjectsRemoveCollaboratorNoContent struct{}

type ProjectsUpdateApplicationJSONGone BasicError

func (*ProjectsUpdateApplicationJSONGone) projectsUpdateResponse() {}

type ProjectsUpdateApplicationJSONRequest struct {
	Body                   *string                                                     `json:"body"`
	Name                   *string                                                     `json:"name"`
	OrganizationPermission *ProjectsUpdateApplicationJSONRequestOrganizationPermission `json:"organization_permission"`
	Private                *bool                                                       `json:"private"`
	State                  *string                                                     `json:"state"`
}

type ProjectsUpdateApplicationJSONRequestOrganizationPermission string

const (
	ProjectsUpdateApplicationJSONRequestOrganizationPermissionRead  ProjectsUpdateApplicationJSONRequestOrganizationPermission = "read"
	ProjectsUpdateApplicationJSONRequestOrganizationPermissionWrite ProjectsUpdateApplicationJSONRequestOrganizationPermission = "write"
	ProjectsUpdateApplicationJSONRequestOrganizationPermissionAdmin ProjectsUpdateApplicationJSONRequestOrganizationPermission = "admin"
	ProjectsUpdateApplicationJSONRequestOrganizationPermissionNone  ProjectsUpdateApplicationJSONRequestOrganizationPermission = "none"
)

type ProjectsUpdateApplicationJSONUnauthorized BasicError

func (*ProjectsUpdateApplicationJSONUnauthorized) projectsUpdateResponse() {}

type ProjectsUpdateCardApplicationJSONForbidden BasicError

func (*ProjectsUpdateCardApplicationJSONForbidden) projectsUpdateCardResponse() {}

type ProjectsUpdateCardApplicationJSONNotFound BasicError

func (*ProjectsUpdateCardApplicationJSONNotFound) projectsUpdateCardResponse() {}

type ProjectsUpdateCardApplicationJSONRequest struct {
	Archived *bool   `json:"archived"`
	Note     *string `json:"note"`
}

type ProjectsUpdateCardApplicationJSONUnauthorized BasicError

func (*ProjectsUpdateCardApplicationJSONUnauthorized) projectsUpdateCardResponse() {}

type ProjectsUpdateColumnApplicationJSONForbidden BasicError

func (*ProjectsUpdateColumnApplicationJSONForbidden) projectsUpdateColumnResponse() {}

type ProjectsUpdateColumnApplicationJSONRequest struct {
	Name string `json:"name"`
}

type ProjectsUpdateColumnApplicationJSONUnauthorized BasicError

func (*ProjectsUpdateColumnApplicationJSONUnauthorized) projectsUpdateColumnResponse() {}

type ProjectsUpdateForbidden struct {
	DocumentationURL *string   `json:"documentation_url"`
	Errors           *[]string `json:"errors"`
	Message          *string   `json:"message"`
}

func (*ProjectsUpdateForbidden) projectsUpdateResponse() {}

type ProjectsUpdateNotFound struct{}

func (*ProjectsUpdateNotFound) projectsUpdateResponse() {}

type ProtectedBranch struct {
	AllowDeletions                 *ProtectedBranchAllowDeletions                 `json:"allow_deletions"`
	AllowForcePushes               *ProtectedBranchAllowForcePushes               `json:"allow_force_pushes"`
	EnforceAdmins                  *ProtectedBranchEnforceAdmins                  `json:"enforce_admins"`
	RequiredConversationResolution *ProtectedBranchRequiredConversationResolution `json:"required_conversation_resolution"`
	RequiredLinearHistory          *ProtectedBranchRequiredLinearHistory          `json:"required_linear_history"`
	RequiredPullRequestReviews     *ProtectedBranchRequiredPullRequestReviews     `json:"required_pull_request_reviews"`
	RequiredSignatures             *ProtectedBranchRequiredSignatures             `json:"required_signatures"`
	RequiredStatusChecks           *StatusCheckPolicy                             `json:"required_status_checks"`
	Restrictions                   *BranchRestrictionPolicy                       `json:"restrictions"`
	URL                            string                                         `json:"url"`
}

func (*ProtectedBranch) reposUpdateBranchProtectionResponse() {}

type ProtectedBranchAdminEnforced struct {
	Enabled bool   `json:"enabled"`
	URL     string `json:"url"`
}

func (*ProtectedBranchAdminEnforced) reposCreateCommitSignatureProtectionResponse() {}
func (*ProtectedBranchAdminEnforced) reposGetCommitSignatureProtectionResponse()    {}

type ProtectedBranchAllowDeletions struct {
	Enabled bool `json:"enabled"`
}

type ProtectedBranchAllowForcePushes struct {
	Enabled bool `json:"enabled"`
}

type ProtectedBranchEnforceAdmins struct {
	Enabled bool   `json:"enabled"`
	URL     string `json:"url"`
}

type ProtectedBranchPullRequestReview struct {
	DismissStaleReviews          bool                                                   `json:"dismiss_stale_reviews"`
	DismissalRestrictions        *ProtectedBranchPullRequestReviewDismissalRestrictions `json:"dismissal_restrictions"`
	RequireCodeOwnerReviews      bool                                                   `json:"require_code_owner_reviews"`
	RequiredApprovingReviewCount *int                                                   `json:"required_approving_review_count"`
	URL                          *string                                                `json:"url"`
}

type ProtectedBranchPullRequestReviewDismissalRestrictions struct {
	Teams    *[]Team       `json:"teams"`
	TeamsURL *string       `json:"teams_url"`
	URL      *string       `json:"url"`
	Users    *[]SimpleUser `json:"users"`
	UsersURL *string       `json:"users_url"`
}

type ProtectedBranchRequiredConversationResolution struct {
	Enabled *bool `json:"enabled"`
}

type ProtectedBranchRequiredLinearHistory struct {
	Enabled bool `json:"enabled"`
}

type ProtectedBranchRequiredPullRequestReviews struct {
	DismissStaleReviews          *bool                                                           `json:"dismiss_stale_reviews"`
	DismissalRestrictions        *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions `json:"dismissal_restrictions"`
	RequireCodeOwnerReviews      *bool                                                           `json:"require_code_owner_reviews"`
	RequiredApprovingReviewCount *int                                                            `json:"required_approving_review_count"`
	URL                          string                                                          `json:"url"`
}

type ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions struct {
	Teams    []Team       `json:"teams"`
	TeamsURL string       `json:"teams_url"`
	URL      string       `json:"url"`
	Users    []SimpleUser `json:"users"`
	UsersURL string       `json:"users_url"`
}

type ProtectedBranchRequiredSignatures struct {
	Enabled bool   `json:"enabled"`
	URL     string `json:"url"`
}

type PublicUser struct {
	AvatarURL         string          `json:"avatar_url"`
	Bio               string          `json:"bio"`
	Blog              string          `json:"blog"`
	Collaborators     *int            `json:"collaborators"`
	Company           string          `json:"company"`
	CreatedAt         time.Time       `json:"created_at"`
	DiskUsage         *int            `json:"disk_usage"`
	Email             string          `json:"email"`
	EventsURL         string          `json:"events_url"`
	Followers         int             `json:"followers"`
	FollowersURL      string          `json:"followers_url"`
	Following         int             `json:"following"`
	FollowingURL      string          `json:"following_url"`
	GistsURL          string          `json:"gists_url"`
	GravatarID        string          `json:"gravatar_id"`
	HTMLURL           string          `json:"html_url"`
	Hireable          bool            `json:"hireable"`
	ID                int             `json:"id"`
	Location          string          `json:"location"`
	Login             string          `json:"login"`
	Name              string          `json:"name"`
	NodeID            string          `json:"node_id"`
	OrganizationsURL  string          `json:"organizations_url"`
	OwnedPrivateRepos *int            `json:"owned_private_repos"`
	Plan              *PublicUserPlan `json:"plan"`
	PrivateGists      *int            `json:"private_gists"`
	PublicGists       int             `json:"public_gists"`
	PublicRepos       int             `json:"public_repos"`
	ReceivedEventsURL string          `json:"received_events_url"`
	ReposURL          string          `json:"repos_url"`
	SiteAdmin         bool            `json:"site_admin"`
	StarredURL        string          `json:"starred_url"`
	SubscriptionsURL  string          `json:"subscriptions_url"`
	SuspendedAt       *time.Time      `json:"suspended_at"`
	TotalPrivateRepos *int            `json:"total_private_repos"`
	TwitterUsername   *string         `json:"twitter_username"`
	Type              string          `json:"type"`
	URL               string          `json:"url"`
	UpdatedAt         time.Time       `json:"updated_at"`
}

type PublicUserPlan struct {
	Collaborators int    `json:"collaborators"`
	Name          string `json:"name"`
	PrivateRepos  int    `json:"private_repos"`
	Space         int    `json:"space"`
}

type PullRequest struct {
	ActiveLockReason    *string                 `json:"active_lock_reason"`
	Additions           int                     `json:"additions"`
	Assignee            NullableSimpleUser      `json:"assignee"`
	Assignees           *[]SimpleUser           `json:"assignees"`
	AuthorAssociation   AuthorAssociation       `json:"author_association"`
	AutoMerge           AutoMerge               `json:"auto_merge"`
	Base                PullRequestBase         `json:"base"`
	Body                string                  `json:"body"`
	ChangedFiles        int                     `json:"changed_files"`
	ClosedAt            time.Time               `json:"closed_at"`
	Comments            int                     `json:"comments"`
	CommentsURL         string                  `json:"comments_url"`
	Commits             int                     `json:"commits"`
	CommitsURL          string                  `json:"commits_url"`
	CreatedAt           time.Time               `json:"created_at"`
	Deletions           int                     `json:"deletions"`
	DiffURL             string                  `json:"diff_url"`
	Draft               *bool                   `json:"draft"`
	HTMLURL             string                  `json:"html_url"`
	Head                PullRequestHead         `json:"head"`
	ID                  int                     `json:"id"`
	IssueURL            string                  `json:"issue_url"`
	Labels              []PullRequestLabelsItem `json:"labels"`
	Links               PullRequestLinks        `json:"_links"`
	Locked              bool                    `json:"locked"`
	MaintainerCanModify bool                    `json:"maintainer_can_modify"`
	MergeCommitSha      string                  `json:"merge_commit_sha"`
	Mergeable           bool                    `json:"mergeable"`
	MergeableState      string                  `json:"mergeable_state"`
	Merged              bool                    `json:"merged"`
	MergedAt            time.Time               `json:"merged_at"`
	MergedBy            NullableSimpleUser      `json:"merged_by"`
	Milestone           NullableMilestone       `json:"milestone"`
	NodeID              string                  `json:"node_id"`
	Number              int                     `json:"number"`
	PatchURL            string                  `json:"patch_url"`
	Rebaseable          *bool                   `json:"rebaseable"`
	RequestedReviewers  *[]SimpleUser           `json:"requested_reviewers"`
	RequestedTeams      *[]TeamSimple           `json:"requested_teams"`
	ReviewCommentURL    string                  `json:"review_comment_url"`
	ReviewComments      int                     `json:"review_comments"`
	ReviewCommentsURL   string                  `json:"review_comments_url"`
	State               PullRequestState        `json:"state"`
	StatusesURL         string                  `json:"statuses_url"`
	Title               string                  `json:"title"`
	URL                 string                  `json:"url"`
	UpdatedAt           time.Time               `json:"updated_at"`
	User                NullableSimpleUser      `json:"user"`
}

func (*PullRequest) pullsGetResponse() {}

type PullRequestBase struct {
	Label string              `json:"label"`
	Ref   string              `json:"ref"`
	Repo  PullRequestBaseRepo `json:"repo"`
	Sha   string              `json:"sha"`
	User  PullRequestBaseUser `json:"user"`
}

type PullRequestBaseRepo struct {
	AllowForking     *bool                           `json:"allow_forking"`
	AllowMergeCommit *bool                           `json:"allow_merge_commit"`
	AllowRebaseMerge *bool                           `json:"allow_rebase_merge"`
	AllowSquashMerge *bool                           `json:"allow_squash_merge"`
	ArchiveURL       string                          `json:"archive_url"`
	Archived         bool                            `json:"archived"`
	AssigneesURL     string                          `json:"assignees_url"`
	BlobsURL         string                          `json:"blobs_url"`
	BranchesURL      string                          `json:"branches_url"`
	CloneURL         string                          `json:"clone_url"`
	CollaboratorsURL string                          `json:"collaborators_url"`
	CommentsURL      string                          `json:"comments_url"`
	CommitsURL       string                          `json:"commits_url"`
	CompareURL       string                          `json:"compare_url"`
	ContentsURL      string                          `json:"contents_url"`
	ContributorsURL  string                          `json:"contributors_url"`
	CreatedAt        time.Time                       `json:"created_at"`
	DefaultBranch    string                          `json:"default_branch"`
	DeploymentsURL   string                          `json:"deployments_url"`
	Description      string                          `json:"description"`
	Disabled         bool                            `json:"disabled"`
	DownloadsURL     string                          `json:"downloads_url"`
	EventsURL        string                          `json:"events_url"`
	Fork             bool                            `json:"fork"`
	Forks            int                             `json:"forks"`
	ForksCount       int                             `json:"forks_count"`
	ForksURL         string                          `json:"forks_url"`
	FullName         string                          `json:"full_name"`
	GitCommitsURL    string                          `json:"git_commits_url"`
	GitRefsURL       string                          `json:"git_refs_url"`
	GitTagsURL       string                          `json:"git_tags_url"`
	GitURL           string                          `json:"git_url"`
	HTMLURL          string                          `json:"html_url"`
	HasDownloads     bool                            `json:"has_downloads"`
	HasIssues        bool                            `json:"has_issues"`
	HasPages         bool                            `json:"has_pages"`
	HasProjects      bool                            `json:"has_projects"`
	HasWiki          bool                            `json:"has_wiki"`
	Homepage         string                          `json:"homepage"`
	HooksURL         string                          `json:"hooks_url"`
	ID               int                             `json:"id"`
	IssueCommentURL  string                          `json:"issue_comment_url"`
	IssueEventsURL   string                          `json:"issue_events_url"`
	IssuesURL        string                          `json:"issues_url"`
	KeysURL          string                          `json:"keys_url"`
	LabelsURL        string                          `json:"labels_url"`
	Language         string                          `json:"language"`
	LanguagesURL     string                          `json:"languages_url"`
	License          NullableLicenseSimple           `json:"license"`
	MasterBranch     *string                         `json:"master_branch"`
	MergesURL        string                          `json:"merges_url"`
	MilestonesURL    string                          `json:"milestones_url"`
	MirrorURL        string                          `json:"mirror_url"`
	Name             string                          `json:"name"`
	NodeID           string                          `json:"node_id"`
	NotificationsURL string                          `json:"notifications_url"`
	OpenIssues       int                             `json:"open_issues"`
	OpenIssuesCount  int                             `json:"open_issues_count"`
	Owner            PullRequestBaseRepoOwner        `json:"owner"`
	Permissions      *PullRequestBaseRepoPermissions `json:"permissions"`
	Private          bool                            `json:"private"`
	PullsURL         string                          `json:"pulls_url"`
	PushedAt         time.Time                       `json:"pushed_at"`
	ReleasesURL      string                          `json:"releases_url"`
	SSHURL           string                          `json:"ssh_url"`
	Size             int                             `json:"size"`
	StargazersCount  int                             `json:"stargazers_count"`
	StargazersURL    string                          `json:"stargazers_url"`
	StatusesURL      string                          `json:"statuses_url"`
	SubscribersURL   string                          `json:"subscribers_url"`
	SubscriptionURL  string                          `json:"subscription_url"`
	SvnURL           string                          `json:"svn_url"`
	TagsURL          string                          `json:"tags_url"`
	TeamsURL         string                          `json:"teams_url"`
	TempCloneToken   *string                         `json:"temp_clone_token"`
	Topics           *[]string                       `json:"topics"`
	TreesURL         string                          `json:"trees_url"`
	URL              string                          `json:"url"`
	UpdatedAt        time.Time                       `json:"updated_at"`
	Watchers         int                             `json:"watchers"`
	WatchersCount    int                             `json:"watchers_count"`
}

type PullRequestBaseRepoOwner struct {
	AvatarURL         string `json:"avatar_url"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type PullRequestBaseRepoPermissions struct {
	Admin    bool  `json:"admin"`
	Maintain *bool `json:"maintain"`
	Pull     bool  `json:"pull"`
	Push     bool  `json:"push"`
	Triage   *bool `json:"triage"`
}

type PullRequestBaseUser struct {
	AvatarURL         string `json:"avatar_url"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type PullRequestHead struct {
	Label string              `json:"label"`
	Ref   string              `json:"ref"`
	Repo  PullRequestHeadRepo `json:"repo"`
	Sha   string              `json:"sha"`
	User  PullRequestHeadUser `json:"user"`
}

type PullRequestHeadRepo struct {
	AllowForking     *bool                           `json:"allow_forking"`
	AllowMergeCommit *bool                           `json:"allow_merge_commit"`
	AllowRebaseMerge *bool                           `json:"allow_rebase_merge"`
	AllowSquashMerge *bool                           `json:"allow_squash_merge"`
	ArchiveURL       string                          `json:"archive_url"`
	Archived         bool                            `json:"archived"`
	AssigneesURL     string                          `json:"assignees_url"`
	BlobsURL         string                          `json:"blobs_url"`
	BranchesURL      string                          `json:"branches_url"`
	CloneURL         string                          `json:"clone_url"`
	CollaboratorsURL string                          `json:"collaborators_url"`
	CommentsURL      string                          `json:"comments_url"`
	CommitsURL       string                          `json:"commits_url"`
	CompareURL       string                          `json:"compare_url"`
	ContentsURL      string                          `json:"contents_url"`
	ContributorsURL  string                          `json:"contributors_url"`
	CreatedAt        time.Time                       `json:"created_at"`
	DefaultBranch    string                          `json:"default_branch"`
	DeploymentsURL   string                          `json:"deployments_url"`
	Description      string                          `json:"description"`
	Disabled         bool                            `json:"disabled"`
	DownloadsURL     string                          `json:"downloads_url"`
	EventsURL        string                          `json:"events_url"`
	Fork             bool                            `json:"fork"`
	Forks            int                             `json:"forks"`
	ForksCount       int                             `json:"forks_count"`
	ForksURL         string                          `json:"forks_url"`
	FullName         string                          `json:"full_name"`
	GitCommitsURL    string                          `json:"git_commits_url"`
	GitRefsURL       string                          `json:"git_refs_url"`
	GitTagsURL       string                          `json:"git_tags_url"`
	GitURL           string                          `json:"git_url"`
	HTMLURL          string                          `json:"html_url"`
	HasDownloads     bool                            `json:"has_downloads"`
	HasIssues        bool                            `json:"has_issues"`
	HasPages         bool                            `json:"has_pages"`
	HasProjects      bool                            `json:"has_projects"`
	HasWiki          bool                            `json:"has_wiki"`
	Homepage         string                          `json:"homepage"`
	HooksURL         string                          `json:"hooks_url"`
	ID               int                             `json:"id"`
	IssueCommentURL  string                          `json:"issue_comment_url"`
	IssueEventsURL   string                          `json:"issue_events_url"`
	IssuesURL        string                          `json:"issues_url"`
	KeysURL          string                          `json:"keys_url"`
	LabelsURL        string                          `json:"labels_url"`
	Language         string                          `json:"language"`
	LanguagesURL     string                          `json:"languages_url"`
	License          PullRequestHeadRepoLicense      `json:"license"`
	MasterBranch     *string                         `json:"master_branch"`
	MergesURL        string                          `json:"merges_url"`
	MilestonesURL    string                          `json:"milestones_url"`
	MirrorURL        string                          `json:"mirror_url"`
	Name             string                          `json:"name"`
	NodeID           string                          `json:"node_id"`
	NotificationsURL string                          `json:"notifications_url"`
	OpenIssues       int                             `json:"open_issues"`
	OpenIssuesCount  int                             `json:"open_issues_count"`
	Owner            PullRequestHeadRepoOwner        `json:"owner"`
	Permissions      *PullRequestHeadRepoPermissions `json:"permissions"`
	Private          bool                            `json:"private"`
	PullsURL         string                          `json:"pulls_url"`
	PushedAt         time.Time                       `json:"pushed_at"`
	ReleasesURL      string                          `json:"releases_url"`
	SSHURL           string                          `json:"ssh_url"`
	Size             int                             `json:"size"`
	StargazersCount  int                             `json:"stargazers_count"`
	StargazersURL    string                          `json:"stargazers_url"`
	StatusesURL      string                          `json:"statuses_url"`
	SubscribersURL   string                          `json:"subscribers_url"`
	SubscriptionURL  string                          `json:"subscription_url"`
	SvnURL           string                          `json:"svn_url"`
	TagsURL          string                          `json:"tags_url"`
	TeamsURL         string                          `json:"teams_url"`
	TempCloneToken   *string                         `json:"temp_clone_token"`
	Topics           *[]string                       `json:"topics"`
	TreesURL         string                          `json:"trees_url"`
	URL              string                          `json:"url"`
	UpdatedAt        time.Time                       `json:"updated_at"`
	Watchers         int                             `json:"watchers"`
	WatchersCount    int                             `json:"watchers_count"`
}

type PullRequestHeadRepoLicense struct {
	Key    string `json:"key"`
	Name   string `json:"name"`
	NodeID string `json:"node_id"`
	SpdxID string `json:"spdx_id"`
	URL    string `json:"url"`
}

type PullRequestHeadRepoOwner struct {
	AvatarURL         string `json:"avatar_url"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type PullRequestHeadRepoPermissions struct {
	Admin    bool  `json:"admin"`
	Maintain *bool `json:"maintain"`
	Pull     bool  `json:"pull"`
	Push     bool  `json:"push"`
	Triage   *bool `json:"triage"`
}

type PullRequestHeadUser struct {
	AvatarURL         string `json:"avatar_url"`
	EventsURL         string `json:"events_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	GravatarID        string `json:"gravatar_id"`
	HTMLURL           string `json:"html_url"`
	ID                int    `json:"id"`
	Login             string `json:"login"`
	NodeID            string `json:"node_id"`
	OrganizationsURL  string `json:"organizations_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	ReposURL          string `json:"repos_url"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	URL               string `json:"url"`
}

type PullRequestLabelsItem struct {
	Color       *string `json:"color"`
	Default     *bool   `json:"default"`
	Description *string `json:"description"`
	ID          *int64  `json:"id"`
	Name        *string `json:"name"`
	NodeID      *string `json:"node_id"`
	URL         *string `json:"url"`
}

type PullRequestLinks struct {
	Comments       Link `json:"comments"`
	Commits        Link `json:"commits"`
	HTML           Link `json:"html"`
	Issue          Link `json:"issue"`
	ReviewComment  Link `json:"review_comment"`
	ReviewComments Link `json:"review_comments"`
	Self           Link `json:"self"`
	Statuses       Link `json:"statuses"`
}

type PullRequestMergeResult struct {
	Merged  bool   `json:"merged"`
	Message string `json:"message"`
	Sha     string `json:"sha"`
}

type PullRequestMinimal struct {
	Base   PullRequestMinimalBase `json:"base"`
	Head   PullRequestMinimalHead `json:"head"`
	ID     int                    `json:"id"`
	Number int                    `json:"number"`
	URL    string                 `json:"url"`
}

type PullRequestMinimalBase struct {
	Ref  string                     `json:"ref"`
	Repo PullRequestMinimalBaseRepo `json:"repo"`
	Sha  string                     `json:"sha"`
}

type PullRequestMinimalBaseRepo struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	URL  string `json:"url"`
}

type PullRequestMinimalHead struct {
	Ref  string                     `json:"ref"`
	Repo PullRequestMinimalHeadRepo `json:"repo"`
	Sha  string                     `json:"sha"`
}

type PullRequestMinimalHeadRepo struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	URL  string `json:"url"`
}

type PullRequestReview struct {
	AuthorAssociation AuthorAssociation      `json:"author_association"`
	Body              string                 `json:"body"`
	BodyHTML          *string                `json:"body_html"`
	BodyText          *string                `json:"body_text"`
	CommitID          string                 `json:"commit_id"`
	HTMLURL           string                 `json:"html_url"`
	ID                int                    `json:"id"`
	Links             PullRequestReviewLinks `json:"_links"`
	NodeID            string                 `json:"node_id"`
	PullRequestURL    string                 `json:"pull_request_url"`
	State             string                 `json:"state"`
	SubmittedAt       *time.Time             `json:"submitted_at"`
	User              NullableSimpleUser     `json:"user"`
}

func (*PullRequestReview) pullsCreateReviewResponse()        {}
func (*PullRequestReview) pullsDeletePendingReviewResponse() {}
func (*PullRequestReview) pullsDismissReviewResponse()       {}
func (*PullRequestReview) pullsGetReviewResponse()           {}
func (*PullRequestReview) pullsSubmitReviewResponse()        {}
func (*PullRequestReview) pullsUpdateReviewResponse()        {}

type PullRequestReviewComment struct {
	AuthorAssociation   AuthorAssociation                  `json:"author_association"`
	Body                string                             `json:"body"`
	BodyHTML            *string                            `json:"body_html"`
	BodyText            *string                            `json:"body_text"`
	CommitID            string                             `json:"commit_id"`
	CreatedAt           time.Time                          `json:"created_at"`
	DiffHunk            string                             `json:"diff_hunk"`
	HTMLURL             string                             `json:"html_url"`
	ID                  int                                `json:"id"`
	InReplyToID         *int                               `json:"in_reply_to_id"`
	Line                *int                               `json:"line"`
	Links               PullRequestReviewCommentLinks      `json:"_links"`
	NodeID              string                             `json:"node_id"`
	OriginalCommitID    string                             `json:"original_commit_id"`
	OriginalLine        *int                               `json:"original_line"`
	OriginalPosition    int                                `json:"original_position"`
	OriginalStartLine   *int                               `json:"original_start_line"`
	Path                string                             `json:"path"`
	Position            int                                `json:"position"`
	PullRequestReviewID int                                `json:"pull_request_review_id"`
	PullRequestURL      string                             `json:"pull_request_url"`
	Reactions           *ReactionRollup                    `json:"reactions"`
	Side                *PullRequestReviewCommentSide      `json:"side"`
	StartLine           *int                               `json:"start_line"`
	StartSide           *PullRequestReviewCommentStartSide `json:"start_side"`
	URL                 string                             `json:"url"`
	UpdatedAt           time.Time                          `json:"updated_at"`
	User                SimpleUser                         `json:"user"`
}

func (*PullRequestReviewComment) pullsCreateReplyForReviewCommentResponse() {}
func (*PullRequestReviewComment) pullsGetReviewCommentResponse()            {}

type PullRequestReviewCommentLinks struct {
	HTML        PullRequestReviewCommentLinksHTML        `json:"html"`
	PullRequest PullRequestReviewCommentLinksPullRequest `json:"pull_request"`
	Self        PullRequestReviewCommentLinksSelf        `json:"self"`
}

type PullRequestReviewCommentLinksHTML struct {
	Href string `json:"href"`
}

type PullRequestReviewCommentLinksPullRequest struct {
	Href string `json:"href"`
}

type PullRequestReviewCommentLinksSelf struct {
	Href string `json:"href"`
}

type PullRequestReviewCommentSide string

const (
	PullRequestReviewCommentSideLEFT  PullRequestReviewCommentSide = "LEFT"
	PullRequestReviewCommentSideRIGHT PullRequestReviewCommentSide = "RIGHT"
)

type PullRequestReviewCommentStartSide string

const (
	PullRequestReviewCommentStartSideLEFT  PullRequestReviewCommentStartSide = "LEFT"
	PullRequestReviewCommentStartSideRIGHT PullRequestReviewCommentStartSide = "RIGHT"
)

type PullRequestReviewLinks struct {
	HTML        PullRequestReviewLinksHTML        `json:"html"`
	PullRequest PullRequestReviewLinksPullRequest `json:"pull_request"`
}

type PullRequestReviewLinksHTML struct {
	Href string `json:"href"`
}

type PullRequestReviewLinksPullRequest struct {
	Href string `json:"href"`
}

type PullRequestReviewRequest struct {
	Teams []Team       `json:"teams"`
	Users []SimpleUser `json:"users"`
}

type PullRequestSimple struct {
	ActiveLockReason   *string                       `json:"active_lock_reason"`
	Assignee           NullableSimpleUser            `json:"assignee"`
	Assignees          *[]SimpleUser                 `json:"assignees"`
	AuthorAssociation  AuthorAssociation             `json:"author_association"`
	AutoMerge          AutoMerge                     `json:"auto_merge"`
	Base               PullRequestSimpleBase         `json:"base"`
	Body               string                        `json:"body"`
	ClosedAt           time.Time                     `json:"closed_at"`
	CommentsURL        string                        `json:"comments_url"`
	CommitsURL         string                        `json:"commits_url"`
	CreatedAt          time.Time                     `json:"created_at"`
	DiffURL            string                        `json:"diff_url"`
	Draft              *bool                         `json:"draft"`
	HTMLURL            string                        `json:"html_url"`
	Head               PullRequestSimpleHead         `json:"head"`
	ID                 int                           `json:"id"`
	IssueURL           string                        `json:"issue_url"`
	Labels             []PullRequestSimpleLabelsItem `json:"labels"`
	Links              PullRequestSimpleLinks        `json:"_links"`
	Locked             bool                          `json:"locked"`
	MergeCommitSha     string                        `json:"merge_commit_sha"`
	MergedAt           time.Time                     `json:"merged_at"`
	Milestone          NullableMilestone             `json:"milestone"`
	NodeID             string                        `json:"node_id"`
	Number             int                           `json:"number"`
	PatchURL           string                        `json:"patch_url"`
	RequestedReviewers *[]SimpleUser                 `json:"requested_reviewers"`
	RequestedTeams     *[]Team                       `json:"requested_teams"`
	ReviewCommentURL   string                        `json:"review_comment_url"`
	ReviewCommentsURL  string                        `json:"review_comments_url"`
	State              string                        `json:"state"`
	StatusesURL        string                        `json:"statuses_url"`
	Title              string                        `json:"title"`
	URL                string                        `json:"url"`
	UpdatedAt          time.Time                     `json:"updated_at"`
	User               NullableSimpleUser            `json:"user"`
}

type PullRequestSimpleBase struct {
	Label string             `json:"label"`
	Ref   string             `json:"ref"`
	Repo  Repository         `json:"repo"`
	Sha   string             `json:"sha"`
	User  NullableSimpleUser `json:"user"`
}

type PullRequestSimpleHead struct {
	Label string             `json:"label"`
	Ref   string             `json:"ref"`
	Repo  Repository         `json:"repo"`
	Sha   string             `json:"sha"`
	User  NullableSimpleUser `json:"user"`
}

type PullRequestSimpleLabelsItem struct {
	Color       *string `json:"color"`
	Default     *bool   `json:"default"`
	Description *string `json:"description"`
	ID          *int64  `json:"id"`
	Name        *string `json:"name"`
	NodeID      *string `json:"node_id"`
	URL         *string `json:"url"`
}

type PullRequestSimpleLinks struct {
	Comments       Link `json:"comments"`
	Commits        Link `json:"commits"`
	HTML           Link `json:"html"`
	Issue          Link `json:"issue"`
	ReviewComment  Link `json:"review_comment"`
	ReviewComments Link `json:"review_comments"`
	Self           Link `json:"self"`
	Statuses       Link `json:"statuses"`
}

type PullRequestState string

const (
	PullRequestStateOpen   PullRequestState = "open"
	PullRequestStateClosed PullRequestState = "closed"
)

type PullsCheckIfMergedNoContent struct{}

func (*PullsCheckIfMergedNoContent) pullsCheckIfMergedResponse() {}

type PullsCheckIfMergedNotFound struct{}

func (*PullsCheckIfMergedNotFound) pullsCheckIfMergedResponse() {}

type PullsCreateApplicationJSONRequest struct {
	Base                string  `json:"base"`
	Body                *string `json:"body"`
	Draft               *bool   `json:"draft"`
	Head                string  `json:"head"`
	Issue               *int    `json:"issue"`
	MaintainerCanModify *bool   `json:"maintainer_can_modify"`
	Title               *string `json:"title"`
}

func (*PullsCreateApplicationJSONRequest) pullsCreateRequest() {}

type PullsCreateReplyForReviewCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type PullsCreateReviewApplicationJSONRequest struct {
	Body     *string                                                `json:"body"`
	Comments *[]PullsCreateReviewApplicationJSONRequestCommentsItem `json:"comments"`
	CommitID *string                                                `json:"commit_id"`
	Event    *PullsCreateReviewApplicationJSONRequestEvent          `json:"event"`
}

type PullsCreateReviewApplicationJSONRequestCommentsItem struct {
	Body      string  `json:"body"`
	Line      *int    `json:"line"`
	Path      string  `json:"path"`
	Position  *int    `json:"position"`
	Side      *string `json:"side"`
	StartLine *int    `json:"start_line"`
	StartSide *string `json:"start_side"`
}

type PullsCreateReviewApplicationJSONRequestEvent string

const (
	PullsCreateReviewApplicationJSONRequestEventAPPROVE        PullsCreateReviewApplicationJSONRequestEvent = "APPROVE"
	PullsCreateReviewApplicationJSONRequestEventREQUESTCHANGES PullsCreateReviewApplicationJSONRequestEvent = "REQUEST_CHANGES"
	PullsCreateReviewApplicationJSONRequestEventCOMMENT        PullsCreateReviewApplicationJSONRequestEvent = "COMMENT"
)

type PullsCreateReviewCommentApplicationJSONRequest struct {
	Body      string                                                   `json:"body"`
	CommitID  *string                                                  `json:"commit_id"`
	InReplyTo *int                                                     `json:"in_reply_to"`
	Line      *int                                                     `json:"line"`
	Path      *string                                                  `json:"path"`
	Position  *int                                                     `json:"position"`
	Side      *PullsCreateReviewCommentApplicationJSONRequestSide      `json:"side"`
	StartLine *int                                                     `json:"start_line"`
	StartSide *PullsCreateReviewCommentApplicationJSONRequestStartSide `json:"start_side"`
}

func (*PullsCreateReviewCommentApplicationJSONRequest) pullsCreateReviewCommentRequest() {}

type PullsCreateReviewCommentApplicationJSONRequestSide string

const (
	PullsCreateReviewCommentApplicationJSONRequestSideLEFT  PullsCreateReviewCommentApplicationJSONRequestSide = "LEFT"
	PullsCreateReviewCommentApplicationJSONRequestSideRIGHT PullsCreateReviewCommentApplicationJSONRequestSide = "RIGHT"
)

type PullsCreateReviewCommentApplicationJSONRequestStartSide string

const (
	PullsCreateReviewCommentApplicationJSONRequestStartSideLEFT  PullsCreateReviewCommentApplicationJSONRequestStartSide = "LEFT"
	PullsCreateReviewCommentApplicationJSONRequestStartSideRIGHT PullsCreateReviewCommentApplicationJSONRequestStartSide = "RIGHT"
	PullsCreateReviewCommentApplicationJSONRequestStartSideSide  PullsCreateReviewCommentApplicationJSONRequestStartSide = "side"
)

type PullsDeleteReviewCommentNoContent struct{}

func (*PullsDeleteReviewCommentNoContent) pullsDeleteReviewCommentResponse() {}

type PullsDismissReviewApplicationJSONRequest struct {
	Event   *string `json:"event"`
	Message string  `json:"message"`
}

type PullsGetApplicationJSONInternalServerError BasicError

func (*PullsGetApplicationJSONInternalServerError) pullsGetResponse() {}

type PullsGetApplicationJSONNotFound BasicError

func (*PullsGetApplicationJSONNotFound) pullsGetResponse() {}

type PullsListCommentsForReviewOK []ReviewComment

func (*PullsListCommentsForReviewOK) pullsListCommentsForReviewResponse() {}

type PullsListFilesOK []DiffEntry

type PullsMergeApplicationJSONRequest struct {
	CommitMessage *string                                      `json:"commit_message"`
	CommitTitle   *string                                      `json:"commit_title"`
	MergeMethod   *PullsMergeApplicationJSONRequestMergeMethod `json:"merge_method"`
	Sha           *string                                      `json:"sha"`
}

func (*PullsMergeApplicationJSONRequest) pullsMergeRequest() {}

type PullsMergeApplicationJSONRequestMergeMethod string

const (
	PullsMergeApplicationJSONRequestMergeMethodMerge  PullsMergeApplicationJSONRequestMergeMethod = "merge"
	PullsMergeApplicationJSONRequestMergeMethodSquash PullsMergeApplicationJSONRequestMergeMethod = "squash"
	PullsMergeApplicationJSONRequestMergeMethodRebase PullsMergeApplicationJSONRequestMergeMethod = "rebase"
)

type PullsMergeConflict struct {
	DocumentationURL *string `json:"documentation_url"`
	Message          *string `json:"message"`
}

type PullsMergeMethodNotAllowed struct {
	DocumentationURL *string `json:"documentation_url"`
	Message          *string `json:"message"`
}

type PullsRemoveRequestedReviewersApplicationJSONRequest struct {
	Reviewers     []string  `json:"reviewers"`
	TeamReviewers *[]string `json:"team_reviewers"`
}

func (*PullsRemoveRequestedReviewersApplicationJSONRequest) pullsRemoveRequestedReviewersRequest() {}

type PullsSubmitReviewApplicationJSONForbidden BasicError

func (*PullsSubmitReviewApplicationJSONForbidden) pullsSubmitReviewResponse() {}

type PullsSubmitReviewApplicationJSONNotFound BasicError

func (*PullsSubmitReviewApplicationJSONNotFound) pullsSubmitReviewResponse() {}

type PullsSubmitReviewApplicationJSONRequest struct {
	Body  *string                                      `json:"body"`
	Event PullsSubmitReviewApplicationJSONRequestEvent `json:"event"`
}

type PullsSubmitReviewApplicationJSONRequestEvent string

const (
	PullsSubmitReviewApplicationJSONRequestEventAPPROVE        PullsSubmitReviewApplicationJSONRequestEvent = "APPROVE"
	PullsSubmitReviewApplicationJSONRequestEventREQUESTCHANGES PullsSubmitReviewApplicationJSONRequestEvent = "REQUEST_CHANGES"
	PullsSubmitReviewApplicationJSONRequestEventCOMMENT        PullsSubmitReviewApplicationJSONRequestEvent = "COMMENT"
)

type PullsUpdateApplicationJSONRequest struct {
	Base                *string                                 `json:"base"`
	Body                *string                                 `json:"body"`
	MaintainerCanModify *bool                                   `json:"maintainer_can_modify"`
	State               *PullsUpdateApplicationJSONRequestState `json:"state"`
	Title               *string                                 `json:"title"`
}

func (*PullsUpdateApplicationJSONRequest) pullsUpdateRequest() {}

type PullsUpdateApplicationJSONRequestState string

const (
	PullsUpdateApplicationJSONRequestStateOpen   PullsUpdateApplicationJSONRequestState = "open"
	PullsUpdateApplicationJSONRequestStateClosed PullsUpdateApplicationJSONRequestState = "closed"
)

type PullsUpdateBranchAccepted struct {
	Message *string `json:"message"`
	URL     *string `json:"url"`
}

type PullsUpdateBranchApplicationJSONRequest struct {
	ExpectedHeadSha *string `json:"expected_head_sha"`
}

func (*PullsUpdateBranchApplicationJSONRequest) pullsUpdateBranchRequest() {}

type PullsUpdateReviewApplicationJSONRequest struct {
	Body string `json:"body"`
}

type PullsUpdateReviewCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type RateLimit struct {
	Limit     int `json:"limit"`
	Remaining int `json:"remaining"`
	Reset     int `json:"reset"`
	Used      int `json:"used"`
}

type RateLimitOverview struct {
	Rate      RateLimit                  `json:"rate"`
	Resources RateLimitOverviewResources `json:"resources"`
}

func (*RateLimitOverview) rateLimitGetResponse() {}

type RateLimitOverviewResources struct {
	ActionsRunnerRegistration *RateLimit `json:"actions_runner_registration"`
	CodeScanningUpload        *RateLimit `json:"code_scanning_upload"`
	Core                      RateLimit  `json:"core"`
	Graphql                   *RateLimit `json:"graphql"`
	IntegrationManifest       *RateLimit `json:"integration_manifest"`
	Search                    RateLimit  `json:"search"`
	SourceImport              *RateLimit `json:"source_import"`
}

type Reaction struct {
	Content   ReactionContent    `json:"content"`
	CreatedAt time.Time          `json:"created_at"`
	ID        int                `json:"id"`
	NodeID    string             `json:"node_id"`
	User      NullableSimpleUser `json:"user"`
}

type ReactionContent string

const (
	ReactionContentPlus1    ReactionContent = "+1"
	ReactionContentMinus1   ReactionContent = "-1"
	ReactionContentLaugh    ReactionContent = "laugh"
	ReactionContentConfused ReactionContent = "confused"
	ReactionContentHeart    ReactionContent = "heart"
	ReactionContentHooray   ReactionContent = "hooray"
	ReactionContentRocket   ReactionContent = "rocket"
	ReactionContentEyes     ReactionContent = "eyes"
)

type ReactionRollup struct {
	Confused   int    `json:"confused"`
	Eyes       int    `json:"eyes"`
	Heart      int    `json:"heart"`
	Hooray     int    `json:"hooray"`
	Laugh      int    `json:"laugh"`
	Minus1     int    `json:"-1"`
	Plus1      int    `json:"+1"`
	Rocket     int    `json:"rocket"`
	TotalCount int    `json:"total_count"`
	URL        string `json:"url"`
}

type ReactionsCreateForCommitCommentApplicationJSONRequest struct {
	Content ReactionsCreateForCommitCommentApplicationJSONRequestContent `json:"content"`
}

func (*ReactionsCreateForCommitCommentApplicationJSONRequest) reactionsCreateForCommitCommentRequest() {
}

type ReactionsCreateForCommitCommentApplicationJSONRequestContent string

const (
	ReactionsCreateForCommitCommentApplicationJSONRequestContentPlus1    ReactionsCreateForCommitCommentApplicationJSONRequestContent = "+1"
	ReactionsCreateForCommitCommentApplicationJSONRequestContentMinus1   ReactionsCreateForCommitCommentApplicationJSONRequestContent = "-1"
	ReactionsCreateForCommitCommentApplicationJSONRequestContentLaugh    ReactionsCreateForCommitCommentApplicationJSONRequestContent = "laugh"
	ReactionsCreateForCommitCommentApplicationJSONRequestContentConfused ReactionsCreateForCommitCommentApplicationJSONRequestContent = "confused"
	ReactionsCreateForCommitCommentApplicationJSONRequestContentHeart    ReactionsCreateForCommitCommentApplicationJSONRequestContent = "heart"
	ReactionsCreateForCommitCommentApplicationJSONRequestContentHooray   ReactionsCreateForCommitCommentApplicationJSONRequestContent = "hooray"
	ReactionsCreateForCommitCommentApplicationJSONRequestContentRocket   ReactionsCreateForCommitCommentApplicationJSONRequestContent = "rocket"
	ReactionsCreateForCommitCommentApplicationJSONRequestContentEyes     ReactionsCreateForCommitCommentApplicationJSONRequestContent = "eyes"
)

type ReactionsCreateForIssueApplicationJSONRequest struct {
	Content ReactionsCreateForIssueApplicationJSONRequestContent `json:"content"`
}

func (*ReactionsCreateForIssueApplicationJSONRequest) reactionsCreateForIssueRequest() {}

type ReactionsCreateForIssueApplicationJSONRequestContent string

const (
	ReactionsCreateForIssueApplicationJSONRequestContentPlus1    ReactionsCreateForIssueApplicationJSONRequestContent = "+1"
	ReactionsCreateForIssueApplicationJSONRequestContentMinus1   ReactionsCreateForIssueApplicationJSONRequestContent = "-1"
	ReactionsCreateForIssueApplicationJSONRequestContentLaugh    ReactionsCreateForIssueApplicationJSONRequestContent = "laugh"
	ReactionsCreateForIssueApplicationJSONRequestContentConfused ReactionsCreateForIssueApplicationJSONRequestContent = "confused"
	ReactionsCreateForIssueApplicationJSONRequestContentHeart    ReactionsCreateForIssueApplicationJSONRequestContent = "heart"
	ReactionsCreateForIssueApplicationJSONRequestContentHooray   ReactionsCreateForIssueApplicationJSONRequestContent = "hooray"
	ReactionsCreateForIssueApplicationJSONRequestContentRocket   ReactionsCreateForIssueApplicationJSONRequestContent = "rocket"
	ReactionsCreateForIssueApplicationJSONRequestContentEyes     ReactionsCreateForIssueApplicationJSONRequestContent = "eyes"
)

type ReactionsCreateForIssueCommentApplicationJSONRequest struct {
	Content ReactionsCreateForIssueCommentApplicationJSONRequestContent `json:"content"`
}

func (*ReactionsCreateForIssueCommentApplicationJSONRequest) reactionsCreateForIssueCommentRequest() {
}

type ReactionsCreateForIssueCommentApplicationJSONRequestContent string

const (
	ReactionsCreateForIssueCommentApplicationJSONRequestContentPlus1    ReactionsCreateForIssueCommentApplicationJSONRequestContent = "+1"
	ReactionsCreateForIssueCommentApplicationJSONRequestContentMinus1   ReactionsCreateForIssueCommentApplicationJSONRequestContent = "-1"
	ReactionsCreateForIssueCommentApplicationJSONRequestContentLaugh    ReactionsCreateForIssueCommentApplicationJSONRequestContent = "laugh"
	ReactionsCreateForIssueCommentApplicationJSONRequestContentConfused ReactionsCreateForIssueCommentApplicationJSONRequestContent = "confused"
	ReactionsCreateForIssueCommentApplicationJSONRequestContentHeart    ReactionsCreateForIssueCommentApplicationJSONRequestContent = "heart"
	ReactionsCreateForIssueCommentApplicationJSONRequestContentHooray   ReactionsCreateForIssueCommentApplicationJSONRequestContent = "hooray"
	ReactionsCreateForIssueCommentApplicationJSONRequestContentRocket   ReactionsCreateForIssueCommentApplicationJSONRequestContent = "rocket"
	ReactionsCreateForIssueCommentApplicationJSONRequestContentEyes     ReactionsCreateForIssueCommentApplicationJSONRequestContent = "eyes"
)

type ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest struct {
	Content ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent `json:"content"`
}

func (*ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest) reactionsCreateForPullRequestReviewCommentRequest() {
}

type ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent string

const (
	ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContentPlus1    ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent = "+1"
	ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContentMinus1   ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent = "-1"
	ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContentLaugh    ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent = "laugh"
	ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContentConfused ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent = "confused"
	ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContentHeart    ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent = "heart"
	ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContentHooray   ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent = "hooray"
	ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContentRocket   ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent = "rocket"
	ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContentEyes     ReactionsCreateForPullRequestReviewCommentApplicationJSONRequestContent = "eyes"
)

type ReactionsCreateForReleaseApplicationJSONRequest struct {
	Content ReactionsCreateForReleaseApplicationJSONRequestContent `json:"content"`
}

func (*ReactionsCreateForReleaseApplicationJSONRequest) reactionsCreateForReleaseRequest() {}

type ReactionsCreateForReleaseApplicationJSONRequestContent string

const (
	ReactionsCreateForReleaseApplicationJSONRequestContentPlus1  ReactionsCreateForReleaseApplicationJSONRequestContent = "+1"
	ReactionsCreateForReleaseApplicationJSONRequestContentLaugh  ReactionsCreateForReleaseApplicationJSONRequestContent = "laugh"
	ReactionsCreateForReleaseApplicationJSONRequestContentHeart  ReactionsCreateForReleaseApplicationJSONRequestContent = "heart"
	ReactionsCreateForReleaseApplicationJSONRequestContentHooray ReactionsCreateForReleaseApplicationJSONRequestContent = "hooray"
	ReactionsCreateForReleaseApplicationJSONRequestContentRocket ReactionsCreateForReleaseApplicationJSONRequestContent = "rocket"
	ReactionsCreateForReleaseApplicationJSONRequestContentEyes   ReactionsCreateForReleaseApplicationJSONRequestContent = "eyes"
)

type ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated Reaction

func (*ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONCreated) reactionsCreateForTeamDiscussionCommentInOrgResponse() {
}

type ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK Reaction

func (*ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONOK) reactionsCreateForTeamDiscussionCommentInOrgResponse() {
}

type ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest struct {
	Content ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent `json:"content"`
}

type ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent string

const (
	ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContentPlus1    ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent = "+1"
	ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContentMinus1   ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent = "-1"
	ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContentLaugh    ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent = "laugh"
	ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContentConfused ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent = "confused"
	ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContentHeart    ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent = "heart"
	ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContentHooray   ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent = "hooray"
	ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContentRocket   ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent = "rocket"
	ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContentEyes     ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequestContent = "eyes"
)

type ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest struct {
	Content ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent `json:"content"`
}

type ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent string

const (
	ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContentPlus1    ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent = "+1"
	ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContentMinus1   ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent = "-1"
	ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContentLaugh    ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent = "laugh"
	ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContentConfused ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent = "confused"
	ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContentHeart    ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent = "heart"
	ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContentHooray   ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent = "hooray"
	ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContentRocket   ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent = "rocket"
	ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContentEyes     ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequestContent = "eyes"
)

type ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated Reaction

func (*ReactionsCreateForTeamDiscussionInOrgApplicationJSONCreated) reactionsCreateForTeamDiscussionInOrgResponse() {
}

type ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK Reaction

func (*ReactionsCreateForTeamDiscussionInOrgApplicationJSONOK) reactionsCreateForTeamDiscussionInOrgResponse() {
}

type ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest struct {
	Content ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent `json:"content"`
}

type ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent string

const (
	ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContentPlus1    ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent = "+1"
	ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContentMinus1   ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent = "-1"
	ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContentLaugh    ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent = "laugh"
	ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContentConfused ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent = "confused"
	ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContentHeart    ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent = "heart"
	ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContentHooray   ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent = "hooray"
	ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContentRocket   ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent = "rocket"
	ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContentEyes     ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequestContent = "eyes"
)

type ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest struct {
	Content ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent `json:"content"`
}

type ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent string

const (
	ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContentPlus1    ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent = "+1"
	ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContentMinus1   ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent = "-1"
	ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContentLaugh    ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent = "laugh"
	ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContentConfused ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent = "confused"
	ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContentHeart    ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent = "heart"
	ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContentHooray   ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent = "hooray"
	ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContentRocket   ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent = "rocket"
	ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContentEyes     ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequestContent = "eyes"
)

type ReactionsDeleteForCommitComment struct{}

type ReactionsDeleteForIssue struct{}

type ReactionsDeleteForIssueComment struct{}

type ReactionsDeleteForPullRequestComment struct{}

type ReactionsDeleteForTeamDiscussion struct{}

type ReactionsDeleteForTeamDiscussionComment struct{}

type ReactionsDeleteLegacyApplicationJSONForbidden BasicError

func (*ReactionsDeleteLegacyApplicationJSONForbidden) reactionsDeleteLegacyResponse() {}

type ReactionsDeleteLegacyApplicationJSONGone BasicError

func (*ReactionsDeleteLegacyApplicationJSONGone) reactionsDeleteLegacyResponse() {}

type ReactionsDeleteLegacyApplicationJSONUnauthorized BasicError

func (*ReactionsDeleteLegacyApplicationJSONUnauthorized) reactionsDeleteLegacyResponse() {}

type ReactionsDeleteLegacyNoContent struct{}

func (*ReactionsDeleteLegacyNoContent) reactionsDeleteLegacyResponse() {}

type ReferrerTraffic struct {
	Count    int    `json:"count"`
	Referrer string `json:"referrer"`
	Uniques  int    `json:"uniques"`
}

type Release struct {
	Assets          []ReleaseAsset  `json:"assets"`
	AssetsURL       string          `json:"assets_url"`
	Author          SimpleUser      `json:"author"`
	Body            *string         `json:"body"`
	BodyHTML        *string         `json:"body_html"`
	BodyText        *string         `json:"body_text"`
	CreatedAt       time.Time       `json:"created_at"`
	DiscussionURL   *string         `json:"discussion_url"`
	Draft           bool            `json:"draft"`
	HTMLURL         string          `json:"html_url"`
	ID              int             `json:"id"`
	MentionsCount   *int            `json:"mentions_count"`
	Name            string          `json:"name"`
	NodeID          string          `json:"node_id"`
	Prerelease      bool            `json:"prerelease"`
	PublishedAt     time.Time       `json:"published_at"`
	Reactions       *ReactionRollup `json:"reactions"`
	TagName         string          `json:"tag_name"`
	TarballURL      string          `json:"tarball_url"`
	TargetCommitish string          `json:"target_commitish"`
	URL             string          `json:"url"`
	UploadURL       string          `json:"upload_url"`
	ZipballURL      string          `json:"zipball_url"`
}

func (*Release) reposGetReleaseByTagResponse() {}
func (*Release) reposGetReleaseResponse()      {}
func (*Release) reposUpdateReleaseResponse()   {}

type ReleaseAsset struct {
	BrowserDownloadURL string             `json:"browser_download_url"`
	ContentType        string             `json:"content_type"`
	CreatedAt          time.Time          `json:"created_at"`
	DownloadCount      int                `json:"download_count"`
	ID                 int                `json:"id"`
	Label              string             `json:"label"`
	Name               string             `json:"name"`
	NodeID             string             `json:"node_id"`
	Size               int                `json:"size"`
	State              ReleaseAssetState  `json:"state"`
	URL                string             `json:"url"`
	UpdatedAt          time.Time          `json:"updated_at"`
	Uploader           NullableSimpleUser `json:"uploader"`
}

func (*ReleaseAsset) reposGetReleaseAssetResponse() {}

type ReleaseAssetState string

const (
	ReleaseAssetStateUploaded ReleaseAssetState = "uploaded"
	ReleaseAssetStateOpen     ReleaseAssetState = "open"
)

type ReposAcceptInvitationApplicationJSONConflict BasicError

func (*ReposAcceptInvitationApplicationJSONConflict) reposAcceptInvitationResponse() {}

type ReposAcceptInvitationApplicationJSONForbidden BasicError

func (*ReposAcceptInvitationApplicationJSONForbidden) reposAcceptInvitationResponse() {}

type ReposAcceptInvitationApplicationJSONNotFound BasicError

func (*ReposAcceptInvitationApplicationJSONNotFound) reposAcceptInvitationResponse() {}

type ReposAcceptInvitationNoContent struct{}

func (*ReposAcceptInvitationNoContent) reposAcceptInvitationResponse() {}

type ReposAddCollaboratorApplicationJSONRequest struct {
	Permission  *ReposAddCollaboratorApplicationJSONRequestPermission `json:"permission"`
	Permissions *string                                               `json:"permissions"`
}

func (*ReposAddCollaboratorApplicationJSONRequest) reposAddCollaboratorRequest() {}

type ReposAddCollaboratorApplicationJSONRequestPermission string

const (
	ReposAddCollaboratorApplicationJSONRequestPermissionPull     ReposAddCollaboratorApplicationJSONRequestPermission = "pull"
	ReposAddCollaboratorApplicationJSONRequestPermissionPush     ReposAddCollaboratorApplicationJSONRequestPermission = "push"
	ReposAddCollaboratorApplicationJSONRequestPermissionAdmin    ReposAddCollaboratorApplicationJSONRequestPermission = "admin"
	ReposAddCollaboratorApplicationJSONRequestPermissionMaintain ReposAddCollaboratorApplicationJSONRequestPermission = "maintain"
	ReposAddCollaboratorApplicationJSONRequestPermissionTriage   ReposAddCollaboratorApplicationJSONRequestPermission = "triage"
)

type ReposAddCollaboratorNoContent struct{}

type ReposCheckCollaboratorNoContent struct{}

func (*ReposCheckCollaboratorNoContent) reposCheckCollaboratorResponse() {}

type ReposCheckCollaboratorNotFound struct{}

func (*ReposCheckCollaboratorNotFound) reposCheckCollaboratorResponse() {}

type ReposCheckVulnerabilityAlertsNoContent struct{}

func (*ReposCheckVulnerabilityAlertsNoContent) reposCheckVulnerabilityAlertsResponse() {}

type ReposCheckVulnerabilityAlertsNotFound struct{}

func (*ReposCheckVulnerabilityAlertsNotFound) reposCheckVulnerabilityAlertsResponse() {}

type ReposCompareCommitsApplicationJSONInternalServerError BasicError

func (*ReposCompareCommitsApplicationJSONInternalServerError) reposCompareCommitsResponse() {}

type ReposCompareCommitsApplicationJSONNotFound BasicError

func (*ReposCompareCommitsApplicationJSONNotFound) reposCompareCommitsResponse() {}

type ReposCreateAutolinkApplicationJSONRequest struct {
	KeyPrefix   string `json:"key_prefix"`
	URLTemplate string `json:"url_template"`
}

func (*ReposCreateAutolinkApplicationJSONRequest) reposCreateAutolinkRequest() {}

type ReposCreateCommitCommentApplicationJSONRequest struct {
	Body     string  `json:"body"`
	Line     *int    `json:"line"`
	Path     *string `json:"path"`
	Position *int    `json:"position"`
}

func (*ReposCreateCommitCommentApplicationJSONRequest) reposCreateCommitCommentRequest() {}

type ReposCreateCommitStatusApplicationJSONRequest struct {
	Context     *string                                            `json:"context"`
	Description *string                                            `json:"description"`
	State       ReposCreateCommitStatusApplicationJSONRequestState `json:"state"`
	TargetURL   *string                                            `json:"target_url"`
}

type ReposCreateCommitStatusApplicationJSONRequestState string

const (
	ReposCreateCommitStatusApplicationJSONRequestStateError   ReposCreateCommitStatusApplicationJSONRequestState = "error"
	ReposCreateCommitStatusApplicationJSONRequestStateFailure ReposCreateCommitStatusApplicationJSONRequestState = "failure"
	ReposCreateCommitStatusApplicationJSONRequestStatePending ReposCreateCommitStatusApplicationJSONRequestState = "pending"
	ReposCreateCommitStatusApplicationJSONRequestStateSuccess ReposCreateCommitStatusApplicationJSONRequestState = "success"
)

type ReposCreateDeployKeyApplicationJSONRequest struct {
	Key      string  `json:"key"`
	ReadOnly *bool   `json:"read_only"`
	Title    *string `json:"title"`
}

func (*ReposCreateDeployKeyApplicationJSONRequest) reposCreateDeployKeyRequest() {}

type ReposCreateDeploymentStatusApplicationJSONRequest struct {
	AutoInactive   *bool                                                         `json:"auto_inactive"`
	Description    *string                                                       `json:"description"`
	Environment    *ReposCreateDeploymentStatusApplicationJSONRequestEnvironment `json:"environment"`
	EnvironmentURL *string                                                       `json:"environment_url"`
	LogURL         *string                                                       `json:"log_url"`
	State          ReposCreateDeploymentStatusApplicationJSONRequestState        `json:"state"`
	TargetURL      *string                                                       `json:"target_url"`
}

func (*ReposCreateDeploymentStatusApplicationJSONRequest) reposCreateDeploymentStatusRequest() {}

type ReposCreateDeploymentStatusApplicationJSONRequestEnvironment string

const (
	ReposCreateDeploymentStatusApplicationJSONRequestEnvironmentProduction ReposCreateDeploymentStatusApplicationJSONRequestEnvironment = "production"
	ReposCreateDeploymentStatusApplicationJSONRequestEnvironmentStaging    ReposCreateDeploymentStatusApplicationJSONRequestEnvironment = "staging"
	ReposCreateDeploymentStatusApplicationJSONRequestEnvironmentQa         ReposCreateDeploymentStatusApplicationJSONRequestEnvironment = "qa"
)

type ReposCreateDeploymentStatusApplicationJSONRequestState string

const (
	ReposCreateDeploymentStatusApplicationJSONRequestStateError      ReposCreateDeploymentStatusApplicationJSONRequestState = "error"
	ReposCreateDeploymentStatusApplicationJSONRequestStateFailure    ReposCreateDeploymentStatusApplicationJSONRequestState = "failure"
	ReposCreateDeploymentStatusApplicationJSONRequestStateInactive   ReposCreateDeploymentStatusApplicationJSONRequestState = "inactive"
	ReposCreateDeploymentStatusApplicationJSONRequestStateInProgress ReposCreateDeploymentStatusApplicationJSONRequestState = "in_progress"
	ReposCreateDeploymentStatusApplicationJSONRequestStateQueued     ReposCreateDeploymentStatusApplicationJSONRequestState = "queued"
	ReposCreateDeploymentStatusApplicationJSONRequestStatePending    ReposCreateDeploymentStatusApplicationJSONRequestState = "pending"
	ReposCreateDeploymentStatusApplicationJSONRequestStateSuccess    ReposCreateDeploymentStatusApplicationJSONRequestState = "success"
)

type ReposCreateDispatchEventApplicationJSONRequest struct {
	ClientPayload *struct{} `json:"client_payload"`
	EventType     string    `json:"event_type"`
}

func (*ReposCreateDispatchEventApplicationJSONRequest) reposCreateDispatchEventRequest() {}

type ReposCreateDispatchEventNoContent struct{}

type ReposCreateForAuthenticatedUserApplicationJSONRequest struct {
	AllowAutoMerge      *bool   `json:"allow_auto_merge"`
	AllowMergeCommit    *bool   `json:"allow_merge_commit"`
	AllowRebaseMerge    *bool   `json:"allow_rebase_merge"`
	AllowSquashMerge    *bool   `json:"allow_squash_merge"`
	AutoInit            *bool   `json:"auto_init"`
	DeleteBranchOnMerge *bool   `json:"delete_branch_on_merge"`
	Description         *string `json:"description"`
	GitignoreTemplate   *string `json:"gitignore_template"`
	HasDownloads        *bool   `json:"has_downloads"`
	HasIssues           *bool   `json:"has_issues"`
	HasProjects         *bool   `json:"has_projects"`
	HasWiki             *bool   `json:"has_wiki"`
	Homepage            *string `json:"homepage"`
	IsTemplate          *bool   `json:"is_template"`
	LicenseTemplate     *string `json:"license_template"`
	Name                string  `json:"name"`
	Private             *bool   `json:"private"`
	TeamID              *int    `json:"team_id"`
}

func (*ReposCreateForAuthenticatedUserApplicationJSONRequest) reposCreateForAuthenticatedUserRequest() {
}

type ReposCreateForkApplicationJSONRequest struct {
	Organization *string `json:"organization"`
}

func (*ReposCreateForkApplicationJSONRequest) reposCreateForkRequest() {}

type ReposCreateInOrgApplicationJSONRequest struct {
	AllowAutoMerge      *bool                                             `json:"allow_auto_merge"`
	AllowMergeCommit    *bool                                             `json:"allow_merge_commit"`
	AllowRebaseMerge    *bool                                             `json:"allow_rebase_merge"`
	AllowSquashMerge    *bool                                             `json:"allow_squash_merge"`
	AutoInit            *bool                                             `json:"auto_init"`
	DeleteBranchOnMerge *bool                                             `json:"delete_branch_on_merge"`
	Description         *string                                           `json:"description"`
	GitignoreTemplate   *string                                           `json:"gitignore_template"`
	HasIssues           *bool                                             `json:"has_issues"`
	HasProjects         *bool                                             `json:"has_projects"`
	HasWiki             *bool                                             `json:"has_wiki"`
	Homepage            *string                                           `json:"homepage"`
	IsTemplate          *bool                                             `json:"is_template"`
	LicenseTemplate     *string                                           `json:"license_template"`
	Name                string                                            `json:"name"`
	Private             *bool                                             `json:"private"`
	TeamID              *int                                              `json:"team_id"`
	Visibility          *ReposCreateInOrgApplicationJSONRequestVisibility `json:"visibility"`
}

func (*ReposCreateInOrgApplicationJSONRequest) reposCreateInOrgRequest() {}

type ReposCreateInOrgApplicationJSONRequestVisibility string

const (
	ReposCreateInOrgApplicationJSONRequestVisibilityPublic     ReposCreateInOrgApplicationJSONRequestVisibility = "public"
	ReposCreateInOrgApplicationJSONRequestVisibilityPrivate    ReposCreateInOrgApplicationJSONRequestVisibility = "private"
	ReposCreateInOrgApplicationJSONRequestVisibilityVisibility ReposCreateInOrgApplicationJSONRequestVisibility = "visibility"
	ReposCreateInOrgApplicationJSONRequestVisibilityInternal   ReposCreateInOrgApplicationJSONRequestVisibility = "internal"
)

type ReposCreateOrUpdateEnvironmentApplicationJSONRequest struct {
	DeploymentBranchPolicy *DeploymentBranchPolicy                                              `json:"deployment_branch_policy"`
	Reviewers              *[]ReposCreateOrUpdateEnvironmentApplicationJSONRequestReviewersItem `json:"reviewers"`
	WaitTimer              *WaitTimer                                                           `json:"wait_timer"`
}

func (*ReposCreateOrUpdateEnvironmentApplicationJSONRequest) reposCreateOrUpdateEnvironmentRequest() {
}

type ReposCreateOrUpdateEnvironmentApplicationJSONRequestReviewersItem struct {
	ID   *int                    `json:"id"`
	Type *DeploymentReviewerType `json:"type"`
}

type ReposCreateOrUpdateFileContentsApplicationJSONRequest struct {
	Author    *ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor    `json:"author"`
	Branch    *string                                                         `json:"branch"`
	Committer *ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter `json:"committer"`
	Content   string                                                          `json:"content"`
	Message   string                                                          `json:"message"`
	Sha       *string                                                         `json:"sha"`
}

func (*ReposCreateOrUpdateFileContentsApplicationJSONRequest) reposCreateOrUpdateFileContentsRequest() {
}

type ReposCreateOrUpdateFileContentsApplicationJSONRequestAuthor struct {
	Date  *string `json:"date"`
	Email string  `json:"email"`
	Name  string  `json:"name"`
}

type ReposCreateOrUpdateFileContentsApplicationJSONRequestCommitter struct {
	Date  *string `json:"date"`
	Email string  `json:"email"`
	Name  string  `json:"name"`
}

type ReposCreatePagesSiteApplicationJSONRequest struct {
	Source ReposCreatePagesSiteApplicationJSONRequestSource `json:"source"`
}

func (*ReposCreatePagesSiteApplicationJSONRequest) reposCreatePagesSiteRequest() {}

type ReposCreatePagesSiteApplicationJSONRequestSource struct {
	Branch string                                                `json:"branch"`
	Path   *ReposCreatePagesSiteApplicationJSONRequestSourcePath `json:"path"`
}

type ReposCreatePagesSiteApplicationJSONRequestSourcePath string

const (
	ReposCreatePagesSiteApplicationJSONRequestSourcePathSlash     ReposCreatePagesSiteApplicationJSONRequestSourcePath = "/"
	ReposCreatePagesSiteApplicationJSONRequestSourcePathSlashDocs ReposCreatePagesSiteApplicationJSONRequestSourcePath = "/docs"
)

type ReposCreateReleaseApplicationJSONRequest struct {
	Body                   *string `json:"body"`
	DiscussionCategoryName *string `json:"discussion_category_name"`
	Draft                  *bool   `json:"draft"`
	Name                   *string `json:"name"`
	Prerelease             *bool   `json:"prerelease"`
	TagName                string  `json:"tag_name"`
	TargetCommitish        *string `json:"target_commitish"`
}

func (*ReposCreateReleaseApplicationJSONRequest) reposCreateReleaseRequest() {}

type ReposCreateUsingTemplateApplicationJSONRequest struct {
	Description        *string `json:"description"`
	IncludeAllBranches *bool   `json:"include_all_branches"`
	Name               string  `json:"name"`
	Owner              *string `json:"owner"`
	Private            *bool   `json:"private"`
}

type ReposDeclineInvitationApplicationJSONConflict BasicError

func (*ReposDeclineInvitationApplicationJSONConflict) reposDeclineInvitationResponse() {}

type ReposDeclineInvitationApplicationJSONForbidden BasicError

func (*ReposDeclineInvitationApplicationJSONForbidden) reposDeclineInvitationResponse() {}

type ReposDeclineInvitationApplicationJSONNotFound BasicError

func (*ReposDeclineInvitationApplicationJSONNotFound) reposDeclineInvitationResponse() {}

type ReposDeclineInvitationNoContent struct{}

func (*ReposDeclineInvitationNoContent) reposDeclineInvitationResponse() {}

type ReposDeleteAccessRestrictions struct{}

type ReposDeleteAdminBranchProtectionNoContent struct{}

func (*ReposDeleteAdminBranchProtectionNoContent) reposDeleteAdminBranchProtectionResponse() {}

type ReposDeleteAnEnvironment struct{}

type ReposDeleteApplicationJSONNotFound BasicError

func (*ReposDeleteApplicationJSONNotFound) reposDeleteResponse() {}

type ReposDeleteApplicationJSONTemporaryRedirect BasicError

func (*ReposDeleteApplicationJSONTemporaryRedirect) reposDeleteResponse() {}

type ReposDeleteAutolinkNoContent struct{}

func (*ReposDeleteAutolinkNoContent) reposDeleteAutolinkResponse() {}

type ReposDeleteBranchProtectionNoContent struct{}

func (*ReposDeleteBranchProtectionNoContent) reposDeleteBranchProtectionResponse() {}

type ReposDeleteCommitCommentNoContent struct{}

func (*ReposDeleteCommitCommentNoContent) reposDeleteCommitCommentResponse() {}

type ReposDeleteCommitSignatureProtectionNoContent struct{}

func (*ReposDeleteCommitSignatureProtectionNoContent) reposDeleteCommitSignatureProtectionResponse() {
}

type ReposDeleteDeployKey struct{}

type ReposDeleteDeploymentNoContent struct{}

func (*ReposDeleteDeploymentNoContent) reposDeleteDeploymentResponse() {}

type ReposDeleteFileApplicationJSONRequest struct {
	Author    *ReposDeleteFileApplicationJSONRequestAuthor    `json:"author"`
	Branch    *string                                         `json:"branch"`
	Committer *ReposDeleteFileApplicationJSONRequestCommitter `json:"committer"`
	Message   string                                          `json:"message"`
	Sha       string                                          `json:"sha"`
}

func (*ReposDeleteFileApplicationJSONRequest) reposDeleteFileRequest() {}

type ReposDeleteFileApplicationJSONRequestAuthor struct {
	Email *string `json:"email"`
	Name  *string `json:"name"`
}

type ReposDeleteFileApplicationJSONRequestCommitter struct {
	Email *string `json:"email"`
	Name  *string `json:"name"`
}

type ReposDeleteForbidden struct {
	DocumentationURL *string `json:"documentation_url"`
	Message          *string `json:"message"`
}

func (*ReposDeleteForbidden) reposDeleteResponse() {}

type ReposDeleteInvitation struct{}

type ReposDeleteNoContent struct{}

func (*ReposDeleteNoContent) reposDeleteResponse() {}

type ReposDeletePagesSiteNoContent struct{}

type ReposDeletePullRequestReviewProtectionNoContent struct{}

func (*ReposDeletePullRequestReviewProtectionNoContent) reposDeletePullRequestReviewProtectionResponse() {
}

type ReposDeleteRelease struct{}

type ReposDeleteReleaseAsset struct{}

type ReposDeleteWebhookNoContent struct{}

func (*ReposDeleteWebhookNoContent) reposDeleteWebhookResponse() {}

type ReposDisableAutomatedSecurityFixes struct{}

type ReposDisableLfsForRepo struct{}

type ReposDisableVulnerabilityAlerts struct{}

type ReposDownloadTarballArchive struct{}

type ReposDownloadZipballArchive struct{}

type ReposEnableAutomatedSecurityFixes struct{}

type ReposEnableLfsForRepoForbidden struct{}

func (*ReposEnableLfsForRepoForbidden) reposEnableLfsForRepoResponse() {}

type ReposEnableVulnerabilityAlerts struct{}

type ReposGetAllStatusCheckContextsOK []string

func (*ReposGetAllStatusCheckContextsOK) reposGetAllStatusCheckContextsResponse() {}

type ReposGetApplicationJSONForbidden BasicError

func (*ReposGetApplicationJSONForbidden) reposGetResponse() {}

type ReposGetApplicationJSONMovedPermanently BasicError

func (*ReposGetApplicationJSONMovedPermanently) reposGetResponse() {}

type ReposGetApplicationJSONNotFound BasicError

func (*ReposGetApplicationJSONNotFound) reposGetResponse() {}

type ReposGetAppsWithAccessToProtectedBranchOK []Integration

func (*ReposGetAppsWithAccessToProtectedBranchOK) reposGetAppsWithAccessToProtectedBranchResponse() {}

type ReposGetBranchApplicationJSONMovedPermanently BasicError

func (*ReposGetBranchApplicationJSONMovedPermanently) reposGetBranchResponse() {}

type ReposGetBranchApplicationJSONNotFound BasicError

func (*ReposGetBranchApplicationJSONNotFound) reposGetBranchResponse() {}

type ReposGetCodeFrequencyStatsOK []CodeFrequencyStat

func (*ReposGetCodeFrequencyStatsOK) reposGetCodeFrequencyStatsResponse() {}

type ReposGetCommitActivityStatsOK []CommitActivity

func (*ReposGetCommitActivityStatsOK) reposGetCommitActivityStatsResponse() {}

type ReposGetContributorsStatsOK []ContributorActivity

func (*ReposGetContributorsStatsOK) reposGetContributorsStatsResponse() {}

type ReposGetPagesHealthCheckBadRequest struct{}

func (*ReposGetPagesHealthCheckBadRequest) reposGetPagesHealthCheckResponse() {}

type ReposGetPagesHealthCheckUnprocessableEntity struct{}

func (*ReposGetPagesHealthCheckUnprocessableEntity) reposGetPagesHealthCheckResponse() {}

type ReposGetPunchCardStatsOK []CodeFrequencyStat

func (*ReposGetPunchCardStatsOK) reposGetPunchCardStatsResponse() {}

type ReposGetTeamsWithAccessToProtectedBranchOK []Team

func (*ReposGetTeamsWithAccessToProtectedBranchOK) reposGetTeamsWithAccessToProtectedBranchResponse() {
}

type ReposGetTopPathsOK []ContentTraffic

func (*ReposGetTopPathsOK) reposGetTopPathsResponse() {}

type ReposGetTopReferrersOK []ReferrerTraffic

func (*ReposGetTopReferrersOK) reposGetTopReferrersResponse() {}

type ReposGetUsersWithAccessToProtectedBranchOK []SimpleUser

func (*ReposGetUsersWithAccessToProtectedBranchOK) reposGetUsersWithAccessToProtectedBranchResponse() {
}

type ReposListBranchesForHeadCommitOK []BranchShort

type ReposListBranchesOK []ShortBranch

func (*ReposListBranchesOK) reposListBranchesResponse() {}

type ReposListCommitStatusesForRefOK []Status

func (*ReposListCommitStatusesForRefOK) reposListCommitStatusesForRefResponse() {}

type ReposListCommitsApplicationJSONBadRequest BasicError

func (*ReposListCommitsApplicationJSONBadRequest) reposListCommitsResponse() {}

type ReposListCommitsApplicationJSONConflict BasicError

func (*ReposListCommitsApplicationJSONConflict) reposListCommitsResponse() {}

type ReposListCommitsApplicationJSONInternalServerError BasicError

func (*ReposListCommitsApplicationJSONInternalServerError) reposListCommitsResponse() {}

type ReposListCommitsApplicationJSONNotFound BasicError

func (*ReposListCommitsApplicationJSONNotFound) reposListCommitsResponse() {}

type ReposListCommitsOK []Commit

func (*ReposListCommitsOK) reposListCommitsResponse() {}

type ReposListContributorsApplicationJSONForbidden BasicError

func (*ReposListContributorsApplicationJSONForbidden) reposListContributorsResponse() {}

type ReposListContributorsApplicationJSONNotFound BasicError

func (*ReposListContributorsApplicationJSONNotFound) reposListContributorsResponse() {}

type ReposListContributorsNoContent struct{}

func (*ReposListContributorsNoContent) reposListContributorsResponse() {}

type ReposListContributorsOK []Contributor

func (*ReposListContributorsOK) reposListContributorsResponse() {}

type ReposListDeploymentStatusesOK []DeploymentStatus

func (*ReposListDeploymentStatusesOK) reposListDeploymentStatusesResponse() {}

type ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden BasicError

func (*ReposListInvitationsForAuthenticatedUserApplicationJSONForbidden) reposListInvitationsForAuthenticatedUserResponse() {
}

type ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound BasicError

func (*ReposListInvitationsForAuthenticatedUserApplicationJSONNotFound) reposListInvitationsForAuthenticatedUserResponse() {
}

type ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*ReposListInvitationsForAuthenticatedUserApplicationJSONUnauthorized) reposListInvitationsForAuthenticatedUserResponse() {
}

type ReposListInvitationsForAuthenticatedUserOK []RepositoryInvitation

func (*ReposListInvitationsForAuthenticatedUserOK) reposListInvitationsForAuthenticatedUserResponse() {
}

type ReposListPublicOK []MinimalRepository

type ReposListReleasesOK []Release

func (*ReposListReleasesOK) reposListReleasesResponse() {}

type ReposListWebhookDeliveriesOK []HookDeliveryItem

type ReposMergeApplicationJSONRequest struct {
	Base          string  `json:"base"`
	CommitMessage *string `json:"commit_message"`
	Head          string  `json:"head"`
}

func (*ReposMergeApplicationJSONRequest) reposMergeRequest() {}

type ReposMergeConflict struct{}

type ReposMergeNoContent struct{}

type ReposMergeNotFound struct{}

type ReposMergeUpstreamApplicationJSONRequest struct {
	Branch string `json:"branch"`
}

type ReposMergeUpstreamConflict struct{}

func (*ReposMergeUpstreamConflict) reposMergeUpstreamResponse() {}

type ReposMergeUpstreamUnprocessableEntity struct{}

func (*ReposMergeUpstreamUnprocessableEntity) reposMergeUpstreamResponse() {}

type ReposPingWebhookNoContent struct{}

func (*ReposPingWebhookNoContent) reposPingWebhookResponse() {}

type ReposRemoveCollaborator struct{}

type ReposRemoveStatusCheckProtection struct{}

type ReposRenameBranchApplicationJSONRequest struct {
	NewName string `json:"new_name"`
}

func (*ReposRenameBranchApplicationJSONRequest) reposRenameBranchRequest() {}

type ReposReplaceAllTopicsApplicationJSONRequest struct {
	Names []string `json:"names"`
}

type ReposTestPushWebhookNoContent struct{}

func (*ReposTestPushWebhookNoContent) reposTestPushWebhookResponse() {}

type ReposTransferApplicationJSONRequest struct {
	NewOwner string `json:"new_owner"`
	TeamIds  *[]int `json:"team_ids"`
}

type ReposUpdateApplicationJSONRequest struct {
	AllowAutoMerge      *bool                                                 `json:"allow_auto_merge"`
	AllowForking        *bool                                                 `json:"allow_forking"`
	AllowMergeCommit    *bool                                                 `json:"allow_merge_commit"`
	AllowRebaseMerge    *bool                                                 `json:"allow_rebase_merge"`
	AllowSquashMerge    *bool                                                 `json:"allow_squash_merge"`
	Archived            *bool                                                 `json:"archived"`
	DefaultBranch       *string                                               `json:"default_branch"`
	DeleteBranchOnMerge *bool                                                 `json:"delete_branch_on_merge"`
	Description         *string                                               `json:"description"`
	HasIssues           *bool                                                 `json:"has_issues"`
	HasProjects         *bool                                                 `json:"has_projects"`
	HasWiki             *bool                                                 `json:"has_wiki"`
	Homepage            *string                                               `json:"homepage"`
	IsTemplate          *bool                                                 `json:"is_template"`
	Name                *string                                               `json:"name"`
	Private             *bool                                                 `json:"private"`
	SecurityAndAnalysis *ReposUpdateApplicationJSONRequestSecurityAndAnalysis `json:"security_and_analysis"`
	Visibility          *ReposUpdateApplicationJSONRequestVisibility          `json:"visibility"`
}

func (*ReposUpdateApplicationJSONRequest) reposUpdateRequest() {}

type ReposUpdateApplicationJSONRequestSecurityAndAnalysis struct {
	AdvancedSecurity *ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity `json:"advanced_security"`
	SecretScanning   *ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning   `json:"secret_scanning"`
}

type ReposUpdateApplicationJSONRequestSecurityAndAnalysisAdvancedSecurity struct {
	Status *string `json:"status"`
}

type ReposUpdateApplicationJSONRequestSecurityAndAnalysisSecretScanning struct {
	Status *string `json:"status"`
}

type ReposUpdateApplicationJSONRequestVisibility string

const (
	ReposUpdateApplicationJSONRequestVisibilityPublic     ReposUpdateApplicationJSONRequestVisibility = "public"
	ReposUpdateApplicationJSONRequestVisibilityPrivate    ReposUpdateApplicationJSONRequestVisibility = "private"
	ReposUpdateApplicationJSONRequestVisibilityVisibility ReposUpdateApplicationJSONRequestVisibility = "visibility"
	ReposUpdateApplicationJSONRequestVisibilityInternal   ReposUpdateApplicationJSONRequestVisibility = "internal"
)

type ReposUpdateBranchProtectionApplicationJSONForbidden BasicError

func (*ReposUpdateBranchProtectionApplicationJSONForbidden) reposUpdateBranchProtectionResponse() {}

type ReposUpdateBranchProtectionApplicationJSONNotFound BasicError

func (*ReposUpdateBranchProtectionApplicationJSONNotFound) reposUpdateBranchProtectionResponse() {}

type ReposUpdateBranchProtectionApplicationJSONRequest struct {
	AllowDeletions                 *bool                                                                       `json:"allow_deletions"`
	AllowForcePushes               *bool                                                                       `json:"allow_force_pushes"`
	EnforceAdmins                  bool                                                                        `json:"enforce_admins"`
	RequiredConversationResolution *bool                                                                       `json:"required_conversation_resolution"`
	RequiredLinearHistory          *bool                                                                       `json:"required_linear_history"`
	RequiredPullRequestReviews     ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews `json:"required_pull_request_reviews"`
	RequiredStatusChecks           ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks       `json:"required_status_checks"`
	Restrictions                   ReposUpdateBranchProtectionApplicationJSONRequestRestrictions               `json:"restrictions"`
}

type ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviews struct {
	DismissStaleReviews          *bool                                                                                             `json:"dismiss_stale_reviews"`
	DismissalRestrictions        *ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions `json:"dismissal_restrictions"`
	RequireCodeOwnerReviews      *bool                                                                                             `json:"require_code_owner_reviews"`
	RequiredApprovingReviewCount *int                                                                                              `json:"required_approving_review_count"`
}

type ReposUpdateBranchProtectionApplicationJSONRequestRequiredPullRequestReviewsDismissalRestrictions struct {
	Teams *[]string `json:"teams"`
	Users *[]string `json:"users"`
}

type ReposUpdateBranchProtectionApplicationJSONRequestRequiredStatusChecks struct {
	Contexts []string `json:"contexts"`
	Strict   bool     `json:"strict"`
}

type ReposUpdateBranchProtectionApplicationJSONRequestRestrictions struct {
	Apps  *[]string `json:"apps"`
	Teams []string  `json:"teams"`
	Users []string  `json:"users"`
}

type ReposUpdateCommitCommentApplicationJSONRequest struct {
	Body string `json:"body"`
}

type ReposUpdateInvitationApplicationJSONRequest struct {
	Permissions *ReposUpdateInvitationApplicationJSONRequestPermissions `json:"permissions"`
}

type ReposUpdateInvitationApplicationJSONRequestPermissions string

const (
	ReposUpdateInvitationApplicationJSONRequestPermissionsRead     ReposUpdateInvitationApplicationJSONRequestPermissions = "read"
	ReposUpdateInvitationApplicationJSONRequestPermissionsWrite    ReposUpdateInvitationApplicationJSONRequestPermissions = "write"
	ReposUpdateInvitationApplicationJSONRequestPermissionsMaintain ReposUpdateInvitationApplicationJSONRequestPermissions = "maintain"
	ReposUpdateInvitationApplicationJSONRequestPermissionsTriage   ReposUpdateInvitationApplicationJSONRequestPermissions = "triage"
	ReposUpdateInvitationApplicationJSONRequestPermissionsAdmin    ReposUpdateInvitationApplicationJSONRequestPermissions = "admin"
)

type ReposUpdatePullRequestReviewProtectionApplicationJSONRequest struct {
	DismissStaleReviews          *bool                                                                              `json:"dismiss_stale_reviews"`
	DismissalRestrictions        *ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions `json:"dismissal_restrictions"`
	RequireCodeOwnerReviews      *bool                                                                              `json:"require_code_owner_reviews"`
	RequiredApprovingReviewCount *int                                                                               `json:"required_approving_review_count"`
}

func (*ReposUpdatePullRequestReviewProtectionApplicationJSONRequest) reposUpdatePullRequestReviewProtectionRequest() {
}

type ReposUpdatePullRequestReviewProtectionApplicationJSONRequestDismissalRestrictions struct {
	Teams *[]string `json:"teams"`
	Users *[]string `json:"users"`
}

type ReposUpdateReleaseApplicationJSONRequest struct {
	Body                   *string `json:"body"`
	DiscussionCategoryName *string `json:"discussion_category_name"`
	Draft                  *bool   `json:"draft"`
	Name                   *string `json:"name"`
	Prerelease             *bool   `json:"prerelease"`
	TagName                *string `json:"tag_name"`
	TargetCommitish        *string `json:"target_commitish"`
}

type ReposUpdateReleaseAssetApplicationJSONRequest struct {
	Label *string `json:"label"`
	Name  *string `json:"name"`
	State *string `json:"state"`
}

type ReposUpdateStatusCheckProtectionApplicationJSONRequest struct {
	Contexts *[]string `json:"contexts"`
	Strict   *bool     `json:"strict"`
}

func (*ReposUpdateStatusCheckProtectionApplicationJSONRequest) reposUpdateStatusCheckProtectionRequest() {
}

type Repository struct {
	AllowAutoMerge      *bool                         `json:"allow_auto_merge"`
	AllowForking        *bool                         `json:"allow_forking"`
	AllowMergeCommit    *bool                         `json:"allow_merge_commit"`
	AllowRebaseMerge    *bool                         `json:"allow_rebase_merge"`
	AllowSquashMerge    *bool                         `json:"allow_squash_merge"`
	ArchiveURL          string                        `json:"archive_url"`
	Archived            bool                          `json:"archived"`
	AssigneesURL        string                        `json:"assignees_url"`
	BlobsURL            string                        `json:"blobs_url"`
	BranchesURL         string                        `json:"branches_url"`
	CloneURL            string                        `json:"clone_url"`
	CollaboratorsURL    string                        `json:"collaborators_url"`
	CommentsURL         string                        `json:"comments_url"`
	CommitsURL          string                        `json:"commits_url"`
	CompareURL          string                        `json:"compare_url"`
	ContentsURL         string                        `json:"contents_url"`
	ContributorsURL     string                        `json:"contributors_url"`
	CreatedAt           time.Time                     `json:"created_at"`
	DefaultBranch       string                        `json:"default_branch"`
	DeleteBranchOnMerge *bool                         `json:"delete_branch_on_merge"`
	DeploymentsURL      string                        `json:"deployments_url"`
	Description         string                        `json:"description"`
	Disabled            bool                          `json:"disabled"`
	DownloadsURL        string                        `json:"downloads_url"`
	EventsURL           string                        `json:"events_url"`
	Fork                bool                          `json:"fork"`
	Forks               int                           `json:"forks"`
	ForksCount          int                           `json:"forks_count"`
	ForksURL            string                        `json:"forks_url"`
	FullName            string                        `json:"full_name"`
	GitCommitsURL       string                        `json:"git_commits_url"`
	GitRefsURL          string                        `json:"git_refs_url"`
	GitTagsURL          string                        `json:"git_tags_url"`
	GitURL              string                        `json:"git_url"`
	HTMLURL             string                        `json:"html_url"`
	HasDownloads        bool                          `json:"has_downloads"`
	HasIssues           bool                          `json:"has_issues"`
	HasPages            bool                          `json:"has_pages"`
	HasProjects         bool                          `json:"has_projects"`
	HasWiki             bool                          `json:"has_wiki"`
	Homepage            string                        `json:"homepage"`
	HooksURL            string                        `json:"hooks_url"`
	ID                  int                           `json:"id"`
	IsTemplate          *bool                         `json:"is_template"`
	IssueCommentURL     string                        `json:"issue_comment_url"`
	IssueEventsURL      string                        `json:"issue_events_url"`
	IssuesURL           string                        `json:"issues_url"`
	KeysURL             string                        `json:"keys_url"`
	LabelsURL           string                        `json:"labels_url"`
	Language            string                        `json:"language"`
	LanguagesURL        string                        `json:"languages_url"`
	License             NullableLicenseSimple         `json:"license"`
	MasterBranch        *string                       `json:"master_branch"`
	MergesURL           string                        `json:"merges_url"`
	MilestonesURL       string                        `json:"milestones_url"`
	MirrorURL           string                        `json:"mirror_url"`
	Name                string                        `json:"name"`
	NetworkCount        *int                          `json:"network_count"`
	NodeID              string                        `json:"node_id"`
	NotificationsURL    string                        `json:"notifications_url"`
	OpenIssues          int                           `json:"open_issues"`
	OpenIssuesCount     int                           `json:"open_issues_count"`
	Organization        *NullableSimpleUser           `json:"organization"`
	Owner               SimpleUser                    `json:"owner"`
	Permissions         *RepositoryPermissions        `json:"permissions"`
	Private             bool                          `json:"private"`
	PullsURL            string                        `json:"pulls_url"`
	PushedAt            time.Time                     `json:"pushed_at"`
	ReleasesURL         string                        `json:"releases_url"`
	SSHURL              string                        `json:"ssh_url"`
	Size                int                           `json:"size"`
	StargazersCount     int                           `json:"stargazers_count"`
	StargazersURL       string                        `json:"stargazers_url"`
	StarredAt           *string                       `json:"starred_at"`
	StatusesURL         string                        `json:"statuses_url"`
	SubscribersCount    *int                          `json:"subscribers_count"`
	SubscribersURL      string                        `json:"subscribers_url"`
	SubscriptionURL     string                        `json:"subscription_url"`
	SvnURL              string                        `json:"svn_url"`
	TagsURL             string                        `json:"tags_url"`
	TeamsURL            string                        `json:"teams_url"`
	TempCloneToken      *string                       `json:"temp_clone_token"`
	TemplateRepository  *RepositoryTemplateRepository `json:"template_repository"`
	Topics              *[]string                     `json:"topics"`
	TreesURL            string                        `json:"trees_url"`
	URL                 string                        `json:"url"`
	UpdatedAt           time.Time                     `json:"updated_at"`
	Visibility          *string                       `json:"visibility"`
	Watchers            int                           `json:"watchers"`
	WatchersCount       int                           `json:"watchers_count"`
}

type RepositoryCollaboratorPermission struct {
	Permission string             `json:"permission"`
	User       NullableSimpleUser `json:"user"`
}

func (*RepositoryCollaboratorPermission) reposGetCollaboratorPermissionLevelResponse() {}

type RepositoryInvitation struct {
	CreatedAt   time.Time                       `json:"created_at"`
	Expired     *bool                           `json:"expired"`
	HTMLURL     string                          `json:"html_url"`
	ID          int                             `json:"id"`
	Invitee     NullableSimpleUser              `json:"invitee"`
	Inviter     NullableSimpleUser              `json:"inviter"`
	NodeID      string                          `json:"node_id"`
	Permissions RepositoryInvitationPermissions `json:"permissions"`
	Repository  MinimalRepository               `json:"repository"`
	URL         string                          `json:"url"`
}

type RepositoryInvitationPermissions string

const (
	RepositoryInvitationPermissionsRead     RepositoryInvitationPermissions = "read"
	RepositoryInvitationPermissionsWrite    RepositoryInvitationPermissions = "write"
	RepositoryInvitationPermissionsAdmin    RepositoryInvitationPermissions = "admin"
	RepositoryInvitationPermissionsTriage   RepositoryInvitationPermissions = "triage"
	RepositoryInvitationPermissionsMaintain RepositoryInvitationPermissions = "maintain"
)

type RepositoryPermissions struct {
	Admin    bool  `json:"admin"`
	Maintain *bool `json:"maintain"`
	Pull     bool  `json:"pull"`
	Push     bool  `json:"push"`
	Triage   *bool `json:"triage"`
}

type RepositorySubscription struct {
	CreatedAt     time.Time `json:"created_at"`
	Ignored       bool      `json:"ignored"`
	Reason        string    `json:"reason"`
	RepositoryURL string    `json:"repository_url"`
	Subscribed    bool      `json:"subscribed"`
	URL           string    `json:"url"`
}

func (*RepositorySubscription) activityGetRepoSubscriptionResponse() {}

type RepositoryTemplateRepository struct {
	AllowAutoMerge      *bool                                    `json:"allow_auto_merge"`
	AllowMergeCommit    *bool                                    `json:"allow_merge_commit"`
	AllowRebaseMerge    *bool                                    `json:"allow_rebase_merge"`
	AllowSquashMerge    *bool                                    `json:"allow_squash_merge"`
	ArchiveURL          *string                                  `json:"archive_url"`
	Archived            *bool                                    `json:"archived"`
	AssigneesURL        *string                                  `json:"assignees_url"`
	BlobsURL            *string                                  `json:"blobs_url"`
	BranchesURL         *string                                  `json:"branches_url"`
	CloneURL            *string                                  `json:"clone_url"`
	CollaboratorsURL    *string                                  `json:"collaborators_url"`
	CommentsURL         *string                                  `json:"comments_url"`
	CommitsURL          *string                                  `json:"commits_url"`
	CompareURL          *string                                  `json:"compare_url"`
	ContentsURL         *string                                  `json:"contents_url"`
	ContributorsURL     *string                                  `json:"contributors_url"`
	CreatedAt           *string                                  `json:"created_at"`
	DefaultBranch       *string                                  `json:"default_branch"`
	DeleteBranchOnMerge *bool                                    `json:"delete_branch_on_merge"`
	DeploymentsURL      *string                                  `json:"deployments_url"`
	Description         *string                                  `json:"description"`
	Disabled            *bool                                    `json:"disabled"`
	DownloadsURL        *string                                  `json:"downloads_url"`
	EventsURL           *string                                  `json:"events_url"`
	Fork                *bool                                    `json:"fork"`
	ForksCount          *int                                     `json:"forks_count"`
	ForksURL            *string                                  `json:"forks_url"`
	FullName            *string                                  `json:"full_name"`
	GitCommitsURL       *string                                  `json:"git_commits_url"`
	GitRefsURL          *string                                  `json:"git_refs_url"`
	GitTagsURL          *string                                  `json:"git_tags_url"`
	GitURL              *string                                  `json:"git_url"`
	HTMLURL             *string                                  `json:"html_url"`
	HasDownloads        *bool                                    `json:"has_downloads"`
	HasIssues           *bool                                    `json:"has_issues"`
	HasPages            *bool                                    `json:"has_pages"`
	HasProjects         *bool                                    `json:"has_projects"`
	HasWiki             *bool                                    `json:"has_wiki"`
	Homepage            *string                                  `json:"homepage"`
	HooksURL            *string                                  `json:"hooks_url"`
	ID                  *int                                     `json:"id"`
	IsTemplate          *bool                                    `json:"is_template"`
	IssueCommentURL     *string                                  `json:"issue_comment_url"`
	IssueEventsURL      *string                                  `json:"issue_events_url"`
	IssuesURL           *string                                  `json:"issues_url"`
	KeysURL             *string                                  `json:"keys_url"`
	LabelsURL           *string                                  `json:"labels_url"`
	Language            *string                                  `json:"language"`
	LanguagesURL        *string                                  `json:"languages_url"`
	MergesURL           *string                                  `json:"merges_url"`
	MilestonesURL       *string                                  `json:"milestones_url"`
	MirrorURL           *string                                  `json:"mirror_url"`
	Name                *string                                  `json:"name"`
	NetworkCount        *int                                     `json:"network_count"`
	NodeID              *string                                  `json:"node_id"`
	NotificationsURL    *string                                  `json:"notifications_url"`
	OpenIssuesCount     *int                                     `json:"open_issues_count"`
	Owner               *RepositoryTemplateRepositoryOwner       `json:"owner"`
	Permissions         *RepositoryTemplateRepositoryPermissions `json:"permissions"`
	Private             *bool                                    `json:"private"`
	PullsURL            *string                                  `json:"pulls_url"`
	PushedAt            *string                                  `json:"pushed_at"`
	ReleasesURL         *string                                  `json:"releases_url"`
	SSHURL              *string                                  `json:"ssh_url"`
	Size                *int                                     `json:"size"`
	StargazersCount     *int                                     `json:"stargazers_count"`
	StargazersURL       *string                                  `json:"stargazers_url"`
	StatusesURL         *string                                  `json:"statuses_url"`
	SubscribersCount    *int                                     `json:"subscribers_count"`
	SubscribersURL      *string                                  `json:"subscribers_url"`
	SubscriptionURL     *string                                  `json:"subscription_url"`
	SvnURL              *string                                  `json:"svn_url"`
	TagsURL             *string                                  `json:"tags_url"`
	TeamsURL            *string                                  `json:"teams_url"`
	TempCloneToken      *string                                  `json:"temp_clone_token"`
	Topics              *[]string                                `json:"topics"`
	TreesURL            *string                                  `json:"trees_url"`
	URL                 *string                                  `json:"url"`
	UpdatedAt           *string                                  `json:"updated_at"`
	Visibility          *string                                  `json:"visibility"`
	WatchersCount       *int                                     `json:"watchers_count"`
}

type RepositoryTemplateRepositoryOwner struct {
	AvatarURL         *string `json:"avatar_url"`
	EventsURL         *string `json:"events_url"`
	FollowersURL      *string `json:"followers_url"`
	FollowingURL      *string `json:"following_url"`
	GistsURL          *string `json:"gists_url"`
	GravatarID        *string `json:"gravatar_id"`
	HTMLURL           *string `json:"html_url"`
	ID                *int    `json:"id"`
	Login             *string `json:"login"`
	NodeID            *string `json:"node_id"`
	OrganizationsURL  *string `json:"organizations_url"`
	ReceivedEventsURL *string `json:"received_events_url"`
	ReposURL          *string `json:"repos_url"`
	SiteAdmin         *bool   `json:"site_admin"`
	StarredURL        *string `json:"starred_url"`
	SubscriptionsURL  *string `json:"subscriptions_url"`
	Type              *string `json:"type"`
	URL               *string `json:"url"`
}

type RepositoryTemplateRepositoryPermissions struct {
	Admin    *bool `json:"admin"`
	Maintain *bool `json:"maintain"`
	Pull     *bool `json:"pull"`
	Push     *bool `json:"push"`
	Triage   *bool `json:"triage"`
}

type ReviewComment struct {
	AuthorAssociation   AuthorAssociation       `json:"author_association"`
	Body                string                  `json:"body"`
	BodyHTML            *string                 `json:"body_html"`
	BodyText            *string                 `json:"body_text"`
	CommitID            string                  `json:"commit_id"`
	CreatedAt           time.Time               `json:"created_at"`
	DiffHunk            string                  `json:"diff_hunk"`
	HTMLURL             string                  `json:"html_url"`
	ID                  int                     `json:"id"`
	InReplyToID         *int                    `json:"in_reply_to_id"`
	Line                *int                    `json:"line"`
	Links               ReviewCommentLinks      `json:"_links"`
	NodeID              string                  `json:"node_id"`
	OriginalCommitID    string                  `json:"original_commit_id"`
	OriginalLine        *int                    `json:"original_line"`
	OriginalPosition    int                     `json:"original_position"`
	OriginalStartLine   *int                    `json:"original_start_line"`
	Path                string                  `json:"path"`
	Position            int                     `json:"position"`
	PullRequestReviewID int                     `json:"pull_request_review_id"`
	PullRequestURL      string                  `json:"pull_request_url"`
	Reactions           *ReactionRollup         `json:"reactions"`
	Side                *ReviewCommentSide      `json:"side"`
	StartLine           *int                    `json:"start_line"`
	StartSide           *ReviewCommentStartSide `json:"start_side"`
	URL                 string                  `json:"url"`
	UpdatedAt           time.Time               `json:"updated_at"`
	User                NullableSimpleUser      `json:"user"`
}

type ReviewCommentLinks struct {
	HTML        Link `json:"html"`
	PullRequest Link `json:"pull_request"`
	Self        Link `json:"self"`
}

type ReviewCommentSide string

const (
	ReviewCommentSideLEFT  ReviewCommentSide = "LEFT"
	ReviewCommentSideRIGHT ReviewCommentSide = "RIGHT"
)

type ReviewCommentStartSide string

const (
	ReviewCommentStartSideLEFT  ReviewCommentStartSide = "LEFT"
	ReviewCommentStartSideRIGHT ReviewCommentStartSide = "RIGHT"
)

type Runner struct {
	Busy   bool               `json:"busy"`
	ID     int                `json:"id"`
	Labels []RunnerLabelsItem `json:"labels"`
	Name   string             `json:"name"`
	Os     string             `json:"os"`
	Status string             `json:"status"`
}

type RunnerApplication struct {
	Architecture      string  `json:"architecture"`
	DownloadURL       string  `json:"download_url"`
	Filename          string  `json:"filename"`
	Os                string  `json:"os"`
	SHA256Checksum    *string `json:"sha256_checksum"`
	TempDownloadToken *string `json:"temp_download_token"`
}

type RunnerGroupsEnterprise struct {
	AllowsPublicRepositories bool    `json:"allows_public_repositories"`
	Default                  bool    `json:"default"`
	ID                       float64 `json:"id"`
	Name                     string  `json:"name"`
	RunnersURL               string  `json:"runners_url"`
	SelectedOrganizationsURL *string `json:"selected_organizations_url"`
	Visibility               string  `json:"visibility"`
}

type RunnerGroupsOrg struct {
	AllowsPublicRepositories          bool    `json:"allows_public_repositories"`
	Default                           bool    `json:"default"`
	ID                                float64 `json:"id"`
	Inherited                         bool    `json:"inherited"`
	InheritedAllowsPublicRepositories *bool   `json:"inherited_allows_public_repositories"`
	Name                              string  `json:"name"`
	RunnersURL                        string  `json:"runners_url"`
	SelectedRepositoriesURL           *string `json:"selected_repositories_url"`
	Visibility                        string  `json:"visibility"`
}

type RunnerLabelsItem struct {
	ID   *int                  `json:"id"`
	Name *string               `json:"name"`
	Type *RunnerLabelsItemType `json:"type"`
}

type RunnerLabelsItemType string

const (
	RunnerLabelsItemTypeReadMinusOnly RunnerLabelsItemType = "read-only"
	RunnerLabelsItemTypeCustom        RunnerLabelsItemType = "custom"
)

type ScimDeleteUserFromOrgApplicationJSONForbidden ScimError

func (*ScimDeleteUserFromOrgApplicationJSONForbidden) scimDeleteUserFromOrgResponse() {}

type ScimDeleteUserFromOrgApplicationJSONNotFound ScimError

func (*ScimDeleteUserFromOrgApplicationJSONNotFound) scimDeleteUserFromOrgResponse() {}

type ScimDeleteUserFromOrgApplicationScimJSONForbidden ScimError

func (*ScimDeleteUserFromOrgApplicationScimJSONForbidden) scimDeleteUserFromOrgResponse() {}

type ScimDeleteUserFromOrgApplicationScimJSONNotFound ScimError

func (*ScimDeleteUserFromOrgApplicationScimJSONNotFound) scimDeleteUserFromOrgResponse() {}

type ScimDeleteUserFromOrgNoContent struct{}

func (*ScimDeleteUserFromOrgNoContent) scimDeleteUserFromOrgResponse() {}

type ScimEnterpriseGroup struct {
	DisplayName *string                           `json:"displayName"`
	ExternalId  *string                           `json:"externalId"`
	ID          string                            `json:"id"`
	Members     *[]ScimEnterpriseGroupMembersItem `json:"members"`
	Meta        *ScimEnterpriseGroupMeta          `json:"meta"`
	Schemas     []string                          `json:"schemas"`
}

type ScimEnterpriseGroupMembersItem struct {
	Display *string `json:"display"`
	Ref     *string `json:"$ref"`
	Value   *string `json:"value"`
}

type ScimEnterpriseGroupMeta struct {
	Created      *string `json:"created"`
	LastModified *string `json:"lastModified"`
	Location     *string `json:"location"`
	ResourceType *string `json:"resourceType"`
}

type ScimEnterpriseUser struct {
	Active     *bool                           `json:"active"`
	Emails     *[]ScimEnterpriseUserEmailsItem `json:"emails"`
	ExternalId *string                         `json:"externalId"`
	Groups     *[]ScimEnterpriseUserGroupsItem `json:"groups"`
	ID         string                          `json:"id"`
	Meta       *ScimEnterpriseUserMeta         `json:"meta"`
	Name       *ScimEnterpriseUserName         `json:"name"`
	Schemas    []string                        `json:"schemas"`
	UserName   *string                         `json:"userName"`
}

type ScimEnterpriseUserEmailsItem struct {
	Primary *bool   `json:"primary"`
	Type    *string `json:"type"`
	Value   *string `json:"value"`
}

type ScimEnterpriseUserGroupsItem struct {
	Value *string `json:"value"`
}

type ScimEnterpriseUserMeta struct {
	Created      *string `json:"created"`
	LastModified *string `json:"lastModified"`
	Location     *string `json:"location"`
	ResourceType *string `json:"resourceType"`
}

type ScimEnterpriseUserName struct {
	FamilyName *string `json:"familyName"`
	GivenName  *string `json:"givenName"`
}

type ScimError struct {
	Detail           *string   `json:"detail"`
	DocumentationURL *string   `json:"documentation_url"`
	Message          *string   `json:"message"`
	Schemas          *[]string `json:"schemas"`
	ScimType         *string   `json:"scimType"`
	Status           *int      `json:"status"`
}

func (*ScimError) codeScanningDeleteAnalysisResponse() {}
func (*ScimError) reposListCommitsResponse()           {}

type ScimGroupListEnterprise struct {
	ItemsPerPage float64                                `json:"itemsPerPage"`
	Resources    []ScimGroupListEnterpriseResourcesItem `json:"Resources"`
	Schemas      []string                               `json:"schemas"`
	StartIndex   float64                                `json:"startIndex"`
	TotalResults float64                                `json:"totalResults"`
}

type ScimGroupListEnterpriseResourcesItem struct {
	DisplayName *string                                            `json:"displayName"`
	ExternalId  *string                                            `json:"externalId"`
	ID          string                                             `json:"id"`
	Members     *[]ScimGroupListEnterpriseResourcesItemMembersItem `json:"members"`
	Meta        *ScimGroupListEnterpriseResourcesItemMeta          `json:"meta"`
	Schemas     []string                                           `json:"schemas"`
}

type ScimGroupListEnterpriseResourcesItemMembersItem struct {
	Display *string `json:"display"`
	Ref     *string `json:"$ref"`
	Value   *string `json:"value"`
}

type ScimGroupListEnterpriseResourcesItemMeta struct {
	Created      *string `json:"created"`
	LastModified *string `json:"lastModified"`
	Location     *string `json:"location"`
	ResourceType *string `json:"resourceType"`
}

type ScimProvisionAndInviteUserApplicationJSONRequest struct {
	Active      *bool                                                        `json:"active"`
	DisplayName *string                                                      `json:"displayName"`
	Emails      []ScimProvisionAndInviteUserApplicationJSONRequestEmailsItem `json:"emails"`
	ExternalId  *string                                                      `json:"externalId"`
	Groups      *[]string                                                    `json:"groups"`
	Name        ScimProvisionAndInviteUserApplicationJSONRequestName         `json:"name"`
	Schemas     *[]string                                                    `json:"schemas"`
	UserName    string                                                       `json:"userName"`
}

func (*ScimProvisionAndInviteUserApplicationJSONRequest) scimProvisionAndInviteUserRequest() {}

type ScimProvisionAndInviteUserApplicationJSONRequestEmailsItem struct {
	Primary *bool   `json:"primary"`
	Type    *string `json:"type"`
	Value   string  `json:"value"`
}

type ScimProvisionAndInviteUserApplicationJSONRequestName struct {
	FamilyName string  `json:"familyName"`
	Formatted  *string `json:"formatted"`
	GivenName  string  `json:"givenName"`
}

type ScimSetInformationForProvisionedUserApplicationJSONRequest struct {
	Active      *bool                                                                  `json:"active"`
	DisplayName *string                                                                `json:"displayName"`
	Emails      []ScimSetInformationForProvisionedUserApplicationJSONRequestEmailsItem `json:"emails"`
	ExternalId  *string                                                                `json:"externalId"`
	Groups      *[]string                                                              `json:"groups"`
	Name        ScimSetInformationForProvisionedUserApplicationJSONRequestName         `json:"name"`
	Schemas     *[]string                                                              `json:"schemas"`
	UserName    string                                                                 `json:"userName"`
}

func (*ScimSetInformationForProvisionedUserApplicationJSONRequest) scimSetInformationForProvisionedUserRequest() {
}

type ScimSetInformationForProvisionedUserApplicationJSONRequestEmailsItem struct {
	Primary *bool   `json:"primary"`
	Type    *string `json:"type"`
	Value   string  `json:"value"`
}

type ScimSetInformationForProvisionedUserApplicationJSONRequestName struct {
	FamilyName string  `json:"familyName"`
	Formatted  *string `json:"formatted"`
	GivenName  string  `json:"givenName"`
}

type ScimUserListEnterprise struct {
	ItemsPerPage float64                               `json:"itemsPerPage"`
	Resources    []ScimUserListEnterpriseResourcesItem `json:"Resources"`
	Schemas      []string                              `json:"schemas"`
	StartIndex   float64                               `json:"startIndex"`
	TotalResults float64                               `json:"totalResults"`
}

type ScimUserListEnterpriseResourcesItem struct {
	Active     *bool                                            `json:"active"`
	Emails     *[]ScimUserListEnterpriseResourcesItemEmailsItem `json:"emails"`
	ExternalId *string                                          `json:"externalId"`
	Groups     *[]ScimUserListEnterpriseResourcesItemGroupsItem `json:"groups"`
	ID         string                                           `json:"id"`
	Meta       *ScimUserListEnterpriseResourcesItemMeta         `json:"meta"`
	Name       *ScimUserListEnterpriseResourcesItemName         `json:"name"`
	Schemas    []string                                         `json:"schemas"`
	UserName   *string                                          `json:"userName"`
}

type ScimUserListEnterpriseResourcesItemEmailsItem struct {
	Primary *bool   `json:"primary"`
	Type    *string `json:"type"`
	Value   *string `json:"value"`
}

type ScimUserListEnterpriseResourcesItemGroupsItem struct {
	Value *string `json:"value"`
}

type ScimUserListEnterpriseResourcesItemMeta struct {
	Created      *string `json:"created"`
	LastModified *string `json:"lastModified"`
	Location     *string `json:"location"`
	ResourceType *string `json:"resourceType"`
}

type ScimUserListEnterpriseResourcesItemName struct {
	FamilyName *string `json:"familyName"`
	GivenName  *string `json:"givenName"`
}

type SearchResultTextMatches []SearchResultTextMatchesItem

type SearchResultTextMatchesItem struct {
	Fragment   *string                                   `json:"fragment"`
	Matches    *[]SearchResultTextMatchesItemMatchesItem `json:"matches"`
	ObjectType *string                                   `json:"object_type"`
	ObjectURL  *string                                   `json:"object_url"`
	Property   *string                                   `json:"property"`
}

type SearchResultTextMatchesItemMatchesItem struct {
	Indices *[]int  `json:"indices"`
	Text    *string `json:"text"`
}

type SearchTopicsOK struct {
	IncompleteResults bool                    `json:"incomplete_results"`
	Items             []TopicSearchResultItem `json:"items"`
	TotalCount        int                     `json:"total_count"`
}

func (*SearchTopicsOK) searchTopicsResponse() {}

type SecretScanningAlert struct {
	CreatedAt    *AlertCreatedAt                `json:"created_at"`
	HTMLURL      *AlertHTMLURL                  `json:"html_url"`
	LocationsURL *string                        `json:"locations_url"`
	Number       *AlertNumber                   `json:"number"`
	Resolution   *SecretScanningAlertResolution `json:"resolution"`
	ResolvedAt   *time.Time                     `json:"resolved_at"`
	ResolvedBy   *NullableSimpleUser            `json:"resolved_by"`
	Secret       *string                        `json:"secret"`
	SecretType   *string                        `json:"secret_type"`
	State        *SecretScanningAlertState      `json:"state"`
	URL          *AlertURL                      `json:"url"`
}

func (*SecretScanningAlert) secretScanningGetAlertResponse()    {}
func (*SecretScanningAlert) secretScanningUpdateAlertResponse() {}

type SecretScanningAlertResolution string

const (
	SecretScanningAlertResolutionFalsePositive SecretScanningAlertResolution = "false_positive"
	SecretScanningAlertResolutionWontFix       SecretScanningAlertResolution = "wont_fix"
	SecretScanningAlertResolutionRevoked       SecretScanningAlertResolution = "revoked"
	SecretScanningAlertResolutionUsedInTests   SecretScanningAlertResolution = "used_in_tests"
)

type SecretScanningAlertState string

const (
	SecretScanningAlertStateOpen     SecretScanningAlertState = "open"
	SecretScanningAlertStateResolved SecretScanningAlertState = "resolved"
)

type SecretScanningGetAlertNotFound struct{}

func (*SecretScanningGetAlertNotFound) secretScanningGetAlertResponse() {}

type SecretScanningUpdateAlertApplicationJSONRequest struct {
	Resolution *SecretScanningAlertResolution `json:"resolution"`
	State      SecretScanningAlertState       `json:"state"`
}

type SecretScanningUpdateAlertNotFound struct{}

func (*SecretScanningUpdateAlertNotFound) secretScanningUpdateAlertResponse() {}

type SecretScanningUpdateAlertUnprocessableEntity struct{}

func (*SecretScanningUpdateAlertUnprocessableEntity) secretScanningUpdateAlertResponse() {}

type SelectedActions struct {
	GithubOwnedAllowed *bool     `json:"github_owned_allowed"`
	PatternsAllowed    *[]string `json:"patterns_allowed"`
	VerifiedAllowed    *bool     `json:"verified_allowed"`
}

type SelectedActionsURL string

type ServiceUnavailable struct {
	Code             *string `json:"code"`
	DocumentationURL *string `json:"documentation_url"`
	Message          *string `json:"message"`
}

func (*ServiceUnavailable) activityListPublicEventsResponse()       {}
func (*ServiceUnavailable) codeScanningDeleteAnalysisResponse()     {}
func (*ServiceUnavailable) codeScanningGetAlertResponse()           {}
func (*ServiceUnavailable) codeScanningGetAnalysisResponse()        {}
func (*ServiceUnavailable) codeScanningGetSarifResponse()           {}
func (*ServiceUnavailable) codeScanningListAlertInstancesResponse() {}
func (*ServiceUnavailable) codeScanningListRecentAnalysesResponse() {}
func (*ServiceUnavailable) codeScanningUpdateAlertResponse()        {}
func (*ServiceUnavailable) codeScanningUploadSarifResponse()        {}
func (*ServiceUnavailable) secretScanningGetAlertResponse()         {}
func (*ServiceUnavailable) secretScanningUpdateAlertResponse()      {}

type ShortBlob struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type ShortBranch struct {
	Commit        ShortBranchCommit `json:"commit"`
	Name          string            `json:"name"`
	Protected     bool              `json:"protected"`
	Protection    *BranchProtection `json:"protection"`
	ProtectionURL *string           `json:"protection_url"`
}

type ShortBranchCommit struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type SimpleCommit struct {
	Author    SimpleCommitAuthor    `json:"author"`
	Committer SimpleCommitCommitter `json:"committer"`
	ID        string                `json:"id"`
	Message   string                `json:"message"`
	Timestamp time.Time             `json:"timestamp"`
	TreeID    string                `json:"tree_id"`
}

type SimpleCommitAuthor struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type SimpleCommitCommitter struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

type SimpleCommitStatus struct {
	AvatarURL   string    `json:"avatar_url"`
	Context     string    `json:"context"`
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	ID          int       `json:"id"`
	NodeID      string    `json:"node_id"`
	Required    *bool     `json:"required"`
	State       string    `json:"state"`
	TargetURL   string    `json:"target_url"`
	URL         string    `json:"url"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type SimpleUser struct {
	AvatarURL         string  `json:"avatar_url"`
	Email             *string `json:"email"`
	EventsURL         string  `json:"events_url"`
	FollowersURL      string  `json:"followers_url"`
	FollowingURL      string  `json:"following_url"`
	GistsURL          string  `json:"gists_url"`
	GravatarID        string  `json:"gravatar_id"`
	HTMLURL           string  `json:"html_url"`
	ID                int     `json:"id"`
	Login             string  `json:"login"`
	Name              *string `json:"name"`
	NodeID            string  `json:"node_id"`
	OrganizationsURL  string  `json:"organizations_url"`
	ReceivedEventsURL string  `json:"received_events_url"`
	ReposURL          string  `json:"repos_url"`
	SiteAdmin         bool    `json:"site_admin"`
	StarredAt         *string `json:"starred_at"`
	StarredURL        string  `json:"starred_url"`
	SubscriptionsURL  string  `json:"subscriptions_url"`
	Type              string  `json:"type"`
	URL               string  `json:"url"`
}

type Status struct {
	AvatarURL   string             `json:"avatar_url"`
	Context     string             `json:"context"`
	CreatedAt   string             `json:"created_at"`
	Creator     NullableSimpleUser `json:"creator"`
	Description string             `json:"description"`
	ID          int                `json:"id"`
	NodeID      string             `json:"node_id"`
	State       string             `json:"state"`
	TargetURL   string             `json:"target_url"`
	URL         string             `json:"url"`
	UpdatedAt   string             `json:"updated_at"`
}

type StatusCheckPolicy struct {
	Contexts    []string `json:"contexts"`
	ContextsURL string   `json:"contexts_url"`
	Strict      bool     `json:"strict"`
	URL         string   `json:"url"`
}

func (*StatusCheckPolicy) reposGetStatusChecksProtectionResponse() {}

type Tag struct {
	Commit     TagCommit `json:"commit"`
	Name       string    `json:"name"`
	NodeID     string    `json:"node_id"`
	TarballURL string    `json:"tarball_url"`
	ZipballURL string    `json:"zipball_url"`
}

type TagCommit struct {
	Sha string `json:"sha"`
	URL string `json:"url"`
}

type Team struct {
	Description     string             `json:"description"`
	HTMLURL         string             `json:"html_url"`
	ID              int                `json:"id"`
	MembersURL      string             `json:"members_url"`
	Name            string             `json:"name"`
	NodeID          string             `json:"node_id"`
	Parent          NullableTeamSimple `json:"parent"`
	Permission      string             `json:"permission"`
	Permissions     *TeamPermissions   `json:"permissions"`
	Privacy         *string            `json:"privacy"`
	RepositoriesURL string             `json:"repositories_url"`
	Slug            string             `json:"slug"`
	URL             string             `json:"url"`
}

type TeamDiscussion struct {
	Author        NullableSimpleUser `json:"author"`
	Body          string             `json:"body"`
	BodyHTML      string             `json:"body_html"`
	BodyVersion   string             `json:"body_version"`
	CommentsCount int                `json:"comments_count"`
	CommentsURL   string             `json:"comments_url"`
	CreatedAt     time.Time          `json:"created_at"`
	HTMLURL       string             `json:"html_url"`
	LastEditedAt  time.Time          `json:"last_edited_at"`
	NodeID        string             `json:"node_id"`
	Number        int                `json:"number"`
	Pinned        bool               `json:"pinned"`
	Private       bool               `json:"private"`
	Reactions     *ReactionRollup    `json:"reactions"`
	TeamURL       string             `json:"team_url"`
	Title         string             `json:"title"`
	URL           string             `json:"url"`
	UpdatedAt     time.Time          `json:"updated_at"`
}

type TeamDiscussionComment struct {
	Author        NullableSimpleUser `json:"author"`
	Body          string             `json:"body"`
	BodyHTML      string             `json:"body_html"`
	BodyVersion   string             `json:"body_version"`
	CreatedAt     time.Time          `json:"created_at"`
	DiscussionURL string             `json:"discussion_url"`
	HTMLURL       string             `json:"html_url"`
	LastEditedAt  time.Time          `json:"last_edited_at"`
	NodeID        string             `json:"node_id"`
	Number        int                `json:"number"`
	Reactions     *ReactionRollup    `json:"reactions"`
	URL           string             `json:"url"`
	UpdatedAt     time.Time          `json:"updated_at"`
}

type TeamFull struct {
	CreatedAt       time.Time           `json:"created_at"`
	Description     string              `json:"description"`
	HTMLURL         string              `json:"html_url"`
	ID              int                 `json:"id"`
	LdapDn          *string             `json:"ldap_dn"`
	MembersCount    int                 `json:"members_count"`
	MembersURL      string              `json:"members_url"`
	Name            string              `json:"name"`
	NodeID          string              `json:"node_id"`
	Organization    OrganizationFull    `json:"organization"`
	Parent          *NullableTeamSimple `json:"parent"`
	Permission      string              `json:"permission"`
	Privacy         *TeamFullPrivacy    `json:"privacy"`
	ReposCount      int                 `json:"repos_count"`
	RepositoriesURL string              `json:"repositories_url"`
	Slug            string              `json:"slug"`
	URL             string              `json:"url"`
	UpdatedAt       time.Time           `json:"updated_at"`
}

func (*TeamFull) teamsGetByNameResponse() {}
func (*TeamFull) teamsGetLegacyResponse() {}

type TeamFullPrivacy string

const (
	TeamFullPrivacyClosed TeamFullPrivacy = "closed"
	TeamFullPrivacySecret TeamFullPrivacy = "secret"
)

type TeamMembership struct {
	Role  TeamMembershipRole  `json:"role"`
	State TeamMembershipState `json:"state"`
	URL   string              `json:"url"`
}

func (*TeamMembership) teamsAddOrUpdateMembershipForUserInOrgResponse()  {}
func (*TeamMembership) teamsAddOrUpdateMembershipForUserLegacyResponse() {}
func (*TeamMembership) teamsGetMembershipForUserInOrgResponse()          {}
func (*TeamMembership) teamsGetMembershipForUserLegacyResponse()         {}

type TeamMembershipRole string

const (
	TeamMembershipRoleMember     TeamMembershipRole = "member"
	TeamMembershipRoleMaintainer TeamMembershipRole = "maintainer"
)

type TeamMembershipState string

const (
	TeamMembershipStateActive  TeamMembershipState = "active"
	TeamMembershipStatePending TeamMembershipState = "pending"
)

type TeamPermissions struct {
	Admin    bool `json:"admin"`
	Maintain bool `json:"maintain"`
	Pull     bool `json:"pull"`
	Push     bool `json:"push"`
	Triage   bool `json:"triage"`
}

type TeamProject struct {
	Body                   string                 `json:"body"`
	ColumnsURL             string                 `json:"columns_url"`
	CreatedAt              string                 `json:"created_at"`
	Creator                SimpleUser             `json:"creator"`
	HTMLURL                string                 `json:"html_url"`
	ID                     int                    `json:"id"`
	Name                   string                 `json:"name"`
	NodeID                 string                 `json:"node_id"`
	Number                 int                    `json:"number"`
	OrganizationPermission *string                `json:"organization_permission"`
	OwnerURL               string                 `json:"owner_url"`
	Permissions            TeamProjectPermissions `json:"permissions"`
	Private                *bool                  `json:"private"`
	State                  string                 `json:"state"`
	URL                    string                 `json:"url"`
	UpdatedAt              string                 `json:"updated_at"`
}

func (*TeamProject) teamsCheckPermissionsForProjectInOrgResponse()  {}
func (*TeamProject) teamsCheckPermissionsForProjectLegacyResponse() {}

type TeamProjectPermissions struct {
	Admin bool `json:"admin"`
	Read  bool `json:"read"`
	Write bool `json:"write"`
}

type TeamRepository struct {
	AllowAutoMerge      *bool                      `json:"allow_auto_merge"`
	AllowForking        *bool                      `json:"allow_forking"`
	AllowMergeCommit    *bool                      `json:"allow_merge_commit"`
	AllowRebaseMerge    *bool                      `json:"allow_rebase_merge"`
	AllowSquashMerge    *bool                      `json:"allow_squash_merge"`
	ArchiveURL          string                     `json:"archive_url"`
	Archived            bool                       `json:"archived"`
	AssigneesURL        string                     `json:"assignees_url"`
	BlobsURL            string                     `json:"blobs_url"`
	BranchesURL         string                     `json:"branches_url"`
	CloneURL            string                     `json:"clone_url"`
	CollaboratorsURL    string                     `json:"collaborators_url"`
	CommentsURL         string                     `json:"comments_url"`
	CommitsURL          string                     `json:"commits_url"`
	CompareURL          string                     `json:"compare_url"`
	ContentsURL         string                     `json:"contents_url"`
	ContributorsURL     string                     `json:"contributors_url"`
	CreatedAt           time.Time                  `json:"created_at"`
	DefaultBranch       string                     `json:"default_branch"`
	DeleteBranchOnMerge *bool                      `json:"delete_branch_on_merge"`
	DeploymentsURL      string                     `json:"deployments_url"`
	Description         string                     `json:"description"`
	Disabled            bool                       `json:"disabled"`
	DownloadsURL        string                     `json:"downloads_url"`
	EventsURL           string                     `json:"events_url"`
	Fork                bool                       `json:"fork"`
	Forks               int                        `json:"forks"`
	ForksCount          int                        `json:"forks_count"`
	ForksURL            string                     `json:"forks_url"`
	FullName            string                     `json:"full_name"`
	GitCommitsURL       string                     `json:"git_commits_url"`
	GitRefsURL          string                     `json:"git_refs_url"`
	GitTagsURL          string                     `json:"git_tags_url"`
	GitURL              string                     `json:"git_url"`
	HTMLURL             string                     `json:"html_url"`
	HasDownloads        bool                       `json:"has_downloads"`
	HasIssues           bool                       `json:"has_issues"`
	HasPages            bool                       `json:"has_pages"`
	HasProjects         bool                       `json:"has_projects"`
	HasWiki             bool                       `json:"has_wiki"`
	Homepage            string                     `json:"homepage"`
	HooksURL            string                     `json:"hooks_url"`
	ID                  int                        `json:"id"`
	IsTemplate          *bool                      `json:"is_template"`
	IssueCommentURL     string                     `json:"issue_comment_url"`
	IssueEventsURL      string                     `json:"issue_events_url"`
	IssuesURL           string                     `json:"issues_url"`
	KeysURL             string                     `json:"keys_url"`
	LabelsURL           string                     `json:"labels_url"`
	Language            string                     `json:"language"`
	LanguagesURL        string                     `json:"languages_url"`
	License             NullableLicenseSimple      `json:"license"`
	MasterBranch        *string                    `json:"master_branch"`
	MergesURL           string                     `json:"merges_url"`
	MilestonesURL       string                     `json:"milestones_url"`
	MirrorURL           string                     `json:"mirror_url"`
	Name                string                     `json:"name"`
	NetworkCount        *int                       `json:"network_count"`
	NodeID              string                     `json:"node_id"`
	NotificationsURL    string                     `json:"notifications_url"`
	OpenIssues          int                        `json:"open_issues"`
	OpenIssuesCount     int                        `json:"open_issues_count"`
	Owner               NullableSimpleUser         `json:"owner"`
	Permissions         *TeamRepositoryPermissions `json:"permissions"`
	Private             bool                       `json:"private"`
	PullsURL            string                     `json:"pulls_url"`
	PushedAt            time.Time                  `json:"pushed_at"`
	ReleasesURL         string                     `json:"releases_url"`
	SSHURL              string                     `json:"ssh_url"`
	Size                int                        `json:"size"`
	StargazersCount     int                        `json:"stargazers_count"`
	StargazersURL       string                     `json:"stargazers_url"`
	StatusesURL         string                     `json:"statuses_url"`
	SubscribersCount    *int                       `json:"subscribers_count"`
	SubscribersURL      string                     `json:"subscribers_url"`
	SubscriptionURL     string                     `json:"subscription_url"`
	SvnURL              string                     `json:"svn_url"`
	TagsURL             string                     `json:"tags_url"`
	TeamsURL            string                     `json:"teams_url"`
	TempCloneToken      *string                    `json:"temp_clone_token"`
	TemplateRepository  *NullableRepository        `json:"template_repository"`
	Topics              *[]string                  `json:"topics"`
	TreesURL            string                     `json:"trees_url"`
	URL                 string                     `json:"url"`
	UpdatedAt           time.Time                  `json:"updated_at"`
	Visibility          *string                    `json:"visibility"`
	Watchers            int                        `json:"watchers"`
	WatchersCount       int                        `json:"watchers_count"`
}

func (*TeamRepository) teamsCheckPermissionsForRepoInOrgResponse()  {}
func (*TeamRepository) teamsCheckPermissionsForRepoLegacyResponse() {}

type TeamRepositoryPermissions struct {
	Admin    bool  `json:"admin"`
	Maintain *bool `json:"maintain"`
	Pull     bool  `json:"pull"`
	Push     bool  `json:"push"`
	Triage   *bool `json:"triage"`
}

type TeamSimple struct {
	Description     string  `json:"description"`
	HTMLURL         string  `json:"html_url"`
	ID              int     `json:"id"`
	LdapDn          *string `json:"ldap_dn"`
	MembersURL      string  `json:"members_url"`
	Name            string  `json:"name"`
	NodeID          string  `json:"node_id"`
	Permission      string  `json:"permission"`
	Privacy         *string `json:"privacy"`
	RepositoriesURL string  `json:"repositories_url"`
	Slug            string  `json:"slug"`
	URL             string  `json:"url"`
}

type TeamsAddMemberLegacyNoContent struct{}

func (*TeamsAddMemberLegacyNoContent) teamsAddMemberLegacyResponse() {}

type TeamsAddMemberLegacyNotFound struct{}

func (*TeamsAddMemberLegacyNotFound) teamsAddMemberLegacyResponse() {}

type TeamsAddMemberLegacyUnprocessableEntity struct{}

func (*TeamsAddMemberLegacyUnprocessableEntity) teamsAddMemberLegacyResponse() {}

type TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest struct {
	Role *TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole `json:"role"`
}

type TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole string

const (
	TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRoleMember     TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole = "member"
	TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRoleMaintainer TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequestRole = "maintainer"
)

type TeamsAddOrUpdateMembershipForUserInOrgForbidden struct{}

func (*TeamsAddOrUpdateMembershipForUserInOrgForbidden) teamsAddOrUpdateMembershipForUserInOrgResponse() {
}

type TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity struct{}

func (*TeamsAddOrUpdateMembershipForUserInOrgUnprocessableEntity) teamsAddOrUpdateMembershipForUserInOrgResponse() {
}

type TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest struct {
	Role *TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole `json:"role"`
}

type TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole string

const (
	TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRoleMember     TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole = "member"
	TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRoleMaintainer TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequestRole = "maintainer"
)

type TeamsAddOrUpdateMembershipForUserLegacyForbidden struct{}

func (*TeamsAddOrUpdateMembershipForUserLegacyForbidden) teamsAddOrUpdateMembershipForUserLegacyResponse() {
}

type TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity struct{}

func (*TeamsAddOrUpdateMembershipForUserLegacyUnprocessableEntity) teamsAddOrUpdateMembershipForUserLegacyResponse() {
}

type TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest struct {
	Permission *TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission `json:"permission"`
}

type TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission string

const (
	TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermissionRead  TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission = "read"
	TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermissionWrite TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission = "write"
	TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermissionAdmin TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequestPermission = "admin"
)

type TeamsAddOrUpdateProjectPermissionsInOrgForbidden struct {
	DocumentationURL *string `json:"documentation_url"`
	Message          *string `json:"message"`
}

func (*TeamsAddOrUpdateProjectPermissionsInOrgForbidden) teamsAddOrUpdateProjectPermissionsInOrgResponse() {
}

type TeamsAddOrUpdateProjectPermissionsInOrgNoContent struct{}

func (*TeamsAddOrUpdateProjectPermissionsInOrgNoContent) teamsAddOrUpdateProjectPermissionsInOrgResponse() {
}

type TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest struct {
	Permission *TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission `json:"permission"`
}

func (*TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest) teamsAddOrUpdateProjectPermissionsLegacyRequest() {
}

type TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission string

const (
	TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermissionRead  TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission = "read"
	TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermissionWrite TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission = "write"
	TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermissionAdmin TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequestPermission = "admin"
)

type TeamsAddOrUpdateProjectPermissionsLegacyForbidden struct {
	DocumentationURL *string `json:"documentation_url"`
	Message          *string `json:"message"`
}

type TeamsAddOrUpdateProjectPermissionsLegacyNoContent struct{}

type TeamsAddOrUpdateRepoPermissionsInOrg struct{}

type TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest struct {
	Permission *TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission `json:"permission"`
}

type TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission string

const (
	TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermissionPull     TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission = "pull"
	TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermissionPush     TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission = "push"
	TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermissionAdmin    TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission = "admin"
	TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermissionMaintain TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission = "maintain"
	TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermissionTriage   TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequestPermission = "triage"
)

type TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest struct {
	Permission *TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission `json:"permission"`
}

func (*TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest) teamsAddOrUpdateRepoPermissionsLegacyRequest() {
}

type TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission string

const (
	TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermissionPull  TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission = "pull"
	TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermissionPush  TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission = "push"
	TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermissionAdmin TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequestPermission = "admin"
)

type TeamsAddOrUpdateRepoPermissionsLegacyNoContent struct{}

type TeamsCheckPermissionsForProjectInOrgNotFound struct{}

func (*TeamsCheckPermissionsForProjectInOrgNotFound) teamsCheckPermissionsForProjectInOrgResponse() {}

type TeamsCheckPermissionsForProjectLegacyNotFound struct{}

func (*TeamsCheckPermissionsForProjectLegacyNotFound) teamsCheckPermissionsForProjectLegacyResponse() {
}

type TeamsCheckPermissionsForRepoInOrgNoContent struct{}

func (*TeamsCheckPermissionsForRepoInOrgNoContent) teamsCheckPermissionsForRepoInOrgResponse() {}

type TeamsCheckPermissionsForRepoInOrgNotFound struct{}

func (*TeamsCheckPermissionsForRepoInOrgNotFound) teamsCheckPermissionsForRepoInOrgResponse() {}

type TeamsCheckPermissionsForRepoLegacyNoContent struct{}

func (*TeamsCheckPermissionsForRepoLegacyNoContent) teamsCheckPermissionsForRepoLegacyResponse() {}

type TeamsCheckPermissionsForRepoLegacyNotFound struct{}

func (*TeamsCheckPermissionsForRepoLegacyNotFound) teamsCheckPermissionsForRepoLegacyResponse() {}

type TeamsCreateApplicationJSONRequest struct {
	Description  *string                                      `json:"description"`
	Maintainers  *[]string                                    `json:"maintainers"`
	Name         string                                       `json:"name"`
	ParentTeamID *int                                         `json:"parent_team_id"`
	Permission   *TeamsCreateApplicationJSONRequestPermission `json:"permission"`
	Privacy      *TeamsCreateApplicationJSONRequestPrivacy    `json:"privacy"`
	RepoNames    *[]string                                    `json:"repo_names"`
}

func (*TeamsCreateApplicationJSONRequest) teamsCreateRequest() {}

type TeamsCreateApplicationJSONRequestPermission string

const (
	TeamsCreateApplicationJSONRequestPermissionPull  TeamsCreateApplicationJSONRequestPermission = "pull"
	TeamsCreateApplicationJSONRequestPermissionPush  TeamsCreateApplicationJSONRequestPermission = "push"
	TeamsCreateApplicationJSONRequestPermissionAdmin TeamsCreateApplicationJSONRequestPermission = "admin"
)

type TeamsCreateApplicationJSONRequestPrivacy string

const (
	TeamsCreateApplicationJSONRequestPrivacySecret TeamsCreateApplicationJSONRequestPrivacy = "secret"
	TeamsCreateApplicationJSONRequestPrivacyClosed TeamsCreateApplicationJSONRequestPrivacy = "closed"
)

type TeamsCreateDiscussionCommentInOrgApplicationJSONRequest struct {
	Body string `json:"body"`
}

type TeamsCreateDiscussionCommentLegacyApplicationJSONRequest struct {
	Body string `json:"body"`
}

type TeamsCreateDiscussionInOrgApplicationJSONRequest struct {
	Body    string `json:"body"`
	Private *bool  `json:"private"`
	Title   string `json:"title"`
}

type TeamsCreateDiscussionLegacyApplicationJSONRequest struct {
	Body    string `json:"body"`
	Private *bool  `json:"private"`
	Title   string `json:"title"`
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest struct {
	Groups *[]TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequestGroupsItem `json:"groups"`
}

type TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequestGroupsItem struct {
	GroupDescription string `json:"group_description"`
	GroupID          string `json:"group_id"`
	GroupName        string `json:"group_name"`
}

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest struct {
	Groups   []TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequestGroupsItem `json:"groups"`
	SyncedAt *string                                                                        `json:"synced_at"`
}

func (*TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest) teamsCreateOrUpdateIdpGroupConnectionsLegacyRequest() {
}

type TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequestGroupsItem struct {
	Description      *string `json:"description"`
	GroupDescription string  `json:"group_description"`
	GroupID          string  `json:"group_id"`
	GroupName        string  `json:"group_name"`
	ID               *string `json:"id"`
	Name             *string `json:"name"`
}

type TeamsDeleteDiscussionCommentInOrg struct{}

type TeamsDeleteDiscussionCommentLegacy struct{}

type TeamsDeleteDiscussionInOrg struct{}

type TeamsDeleteDiscussionLegacy struct{}

type TeamsDeleteInOrg struct{}

type TeamsDeleteLegacyNoContent struct{}

type TeamsGetMemberLegacyNoContent struct{}

func (*TeamsGetMemberLegacyNoContent) teamsGetMemberLegacyResponse() {}

type TeamsGetMemberLegacyNotFound struct{}

func (*TeamsGetMemberLegacyNotFound) teamsGetMemberLegacyResponse() {}

type TeamsGetMembershipForUserInOrgNotFound struct{}

func (*TeamsGetMembershipForUserInOrgNotFound) teamsGetMembershipForUserInOrgResponse() {}

type TeamsListChildLegacyOK []Team

type TeamsListForAuthenticatedUserApplicationJSONForbidden BasicError

func (*TeamsListForAuthenticatedUserApplicationJSONForbidden) teamsListForAuthenticatedUserResponse() {
}

type TeamsListForAuthenticatedUserApplicationJSONNotFound BasicError

func (*TeamsListForAuthenticatedUserApplicationJSONNotFound) teamsListForAuthenticatedUserResponse() {
}

type TeamsListForAuthenticatedUserOK []TeamFull

func (*TeamsListForAuthenticatedUserOK) teamsListForAuthenticatedUserResponse() {}

type TeamsListIdpGroupsForLegacyApplicationJSONForbidden BasicError

func (*TeamsListIdpGroupsForLegacyApplicationJSONForbidden) teamsListIdpGroupsForLegacyResponse() {}

type TeamsListIdpGroupsForLegacyApplicationJSONNotFound BasicError

func (*TeamsListIdpGroupsForLegacyApplicationJSONNotFound) teamsListIdpGroupsForLegacyResponse() {}

type TeamsListOK []Team

func (*TeamsListOK) teamsListResponse() {}

type TeamsListProjectsLegacyOK []TeamProject

func (*TeamsListProjectsLegacyOK) teamsListProjectsLegacyResponse() {}

type TeamsListReposLegacyOK []MinimalRepository

func (*TeamsListReposLegacyOK) teamsListReposLegacyResponse() {}

type TeamsRemoveMemberLegacyNoContent struct{}

func (*TeamsRemoveMemberLegacyNoContent) teamsRemoveMemberLegacyResponse() {}

type TeamsRemoveMemberLegacyNotFound struct{}

func (*TeamsRemoveMemberLegacyNotFound) teamsRemoveMemberLegacyResponse() {}

type TeamsRemoveMembershipForUserInOrgForbidden struct{}

func (*TeamsRemoveMembershipForUserInOrgForbidden) teamsRemoveMembershipForUserInOrgResponse() {}

type TeamsRemoveMembershipForUserInOrgNoContent struct{}

func (*TeamsRemoveMembershipForUserInOrgNoContent) teamsRemoveMembershipForUserInOrgResponse() {}

type TeamsRemoveMembershipForUserLegacyForbidden struct{}

func (*TeamsRemoveMembershipForUserLegacyForbidden) teamsRemoveMembershipForUserLegacyResponse() {}

type TeamsRemoveMembershipForUserLegacyNoContent struct{}

func (*TeamsRemoveMembershipForUserLegacyNoContent) teamsRemoveMembershipForUserLegacyResponse() {}

type TeamsRemoveProjectInOrg struct{}

type TeamsRemoveProjectLegacyNoContent struct{}

type TeamsRemoveRepoInOrg struct{}

type TeamsRemoveRepoLegacy struct{}

type TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest struct {
	Body string `json:"body"`
}

type TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest struct {
	Body string `json:"body"`
}

type TeamsUpdateDiscussionInOrgApplicationJSONRequest struct {
	Body  *string `json:"body"`
	Title *string `json:"title"`
}

type TeamsUpdateDiscussionLegacyApplicationJSONRequest struct {
	Body  *string `json:"body"`
	Title *string `json:"title"`
}

type TeamsUpdateInOrgApplicationJSONRequest struct {
	Description  *string                                           `json:"description"`
	Name         *string                                           `json:"name"`
	ParentTeamID *int                                              `json:"parent_team_id"`
	Permission   *TeamsUpdateInOrgApplicationJSONRequestPermission `json:"permission"`
	Privacy      *TeamsUpdateInOrgApplicationJSONRequestPrivacy    `json:"privacy"`
}

type TeamsUpdateInOrgApplicationJSONRequestPermission string

const (
	TeamsUpdateInOrgApplicationJSONRequestPermissionPull  TeamsUpdateInOrgApplicationJSONRequestPermission = "pull"
	TeamsUpdateInOrgApplicationJSONRequestPermissionPush  TeamsUpdateInOrgApplicationJSONRequestPermission = "push"
	TeamsUpdateInOrgApplicationJSONRequestPermissionAdmin TeamsUpdateInOrgApplicationJSONRequestPermission = "admin"
)

type TeamsUpdateInOrgApplicationJSONRequestPrivacy string

const (
	TeamsUpdateInOrgApplicationJSONRequestPrivacySecret TeamsUpdateInOrgApplicationJSONRequestPrivacy = "secret"
	TeamsUpdateInOrgApplicationJSONRequestPrivacyClosed TeamsUpdateInOrgApplicationJSONRequestPrivacy = "closed"
)

type TeamsUpdateLegacyApplicationJSONRequest struct {
	Description  *string                                            `json:"description"`
	Name         string                                             `json:"name"`
	ParentTeamID *int                                               `json:"parent_team_id"`
	Permission   *TeamsUpdateLegacyApplicationJSONRequestPermission `json:"permission"`
	Privacy      *TeamsUpdateLegacyApplicationJSONRequestPrivacy    `json:"privacy"`
}

func (*TeamsUpdateLegacyApplicationJSONRequest) teamsUpdateLegacyRequest() {}

type TeamsUpdateLegacyApplicationJSONRequestPermission string

const (
	TeamsUpdateLegacyApplicationJSONRequestPermissionPull  TeamsUpdateLegacyApplicationJSONRequestPermission = "pull"
	TeamsUpdateLegacyApplicationJSONRequestPermissionPush  TeamsUpdateLegacyApplicationJSONRequestPermission = "push"
	TeamsUpdateLegacyApplicationJSONRequestPermissionAdmin TeamsUpdateLegacyApplicationJSONRequestPermission = "admin"
)

type TeamsUpdateLegacyApplicationJSONRequestPrivacy string

const (
	TeamsUpdateLegacyApplicationJSONRequestPrivacySecret TeamsUpdateLegacyApplicationJSONRequestPrivacy = "secret"
	TeamsUpdateLegacyApplicationJSONRequestPrivacyClosed TeamsUpdateLegacyApplicationJSONRequestPrivacy = "closed"
)

type Thread struct {
	ID              string            `json:"id"`
	LastReadAt      string            `json:"last_read_at"`
	Reason          string            `json:"reason"`
	Repository      MinimalRepository `json:"repository"`
	Subject         ThreadSubject     `json:"subject"`
	SubscriptionURL string            `json:"subscription_url"`
	URL             string            `json:"url"`
	Unread          bool              `json:"unread"`
	UpdatedAt       string            `json:"updated_at"`
}

func (*Thread) activityGetThreadResponse() {}

type ThreadSubject struct {
	LatestCommentURL string `json:"latest_comment_url"`
	Title            string `json:"title"`
	Type             string `json:"type"`
	URL              string `json:"url"`
}

type ThreadSubscription struct {
	CreatedAt     time.Time `json:"created_at"`
	Ignored       bool      `json:"ignored"`
	Reason        string    `json:"reason"`
	RepositoryURL *string   `json:"repository_url"`
	Subscribed    bool      `json:"subscribed"`
	ThreadURL     *string   `json:"thread_url"`
	URL           string    `json:"url"`
}

func (*ThreadSubscription) activityGetThreadSubscriptionForAuthenticatedUserResponse() {}
func (*ThreadSubscription) activitySetThreadSubscriptionResponse()                     {}

type Topic struct {
	Names []string `json:"names"`
}

func (*Topic) reposGetAllTopicsResponse()     {}
func (*Topic) reposReplaceAllTopicsResponse() {}

type TopicSearchResultItem struct {
	Aliases          *[]TopicSearchResultItemAliasesItem `json:"aliases"`
	CreatedAt        time.Time                           `json:"created_at"`
	CreatedBy        string                              `json:"created_by"`
	Curated          bool                                `json:"curated"`
	Description      string                              `json:"description"`
	DisplayName      string                              `json:"display_name"`
	Featured         bool                                `json:"featured"`
	LogoURL          *string                             `json:"logo_url"`
	Name             string                              `json:"name"`
	Related          *[]TopicSearchResultItemRelatedItem `json:"related"`
	Released         string                              `json:"released"`
	RepositoryCount  *int                                `json:"repository_count"`
	Score            float64                             `json:"score"`
	ShortDescription string                              `json:"short_description"`
	TextMatches      *SearchResultTextMatches            `json:"text_matches"`
	UpdatedAt        time.Time                           `json:"updated_at"`
}

type TopicSearchResultItemAliasesItem struct {
	TopicRelation *TopicSearchResultItemAliasesItemTopicRelation `json:"topic_relation"`
}

type TopicSearchResultItemAliasesItemTopicRelation struct {
	ID           *int    `json:"id"`
	Name         *string `json:"name"`
	RelationType *string `json:"relation_type"`
	TopicID      *int    `json:"topic_id"`
}

type TopicSearchResultItemRelatedItem struct {
	TopicRelation *TopicSearchResultItemRelatedItemTopicRelation `json:"topic_relation"`
}

type TopicSearchResultItemRelatedItemTopicRelation struct {
	ID           *int    `json:"id"`
	Name         *string `json:"name"`
	RelationType *string `json:"relation_type"`
	TopicID      *int    `json:"topic_id"`
}

type UserMarketplacePurchase struct {
	Account         MarketplaceAccount     `json:"account"`
	BillingCycle    string                 `json:"billing_cycle"`
	FreeTrialEndsOn time.Time              `json:"free_trial_ends_on"`
	NextBillingDate time.Time              `json:"next_billing_date"`
	OnFreeTrial     bool                   `json:"on_free_trial"`
	Plan            MarketplaceListingPlan `json:"plan"`
	UnitCount       int                    `json:"unit_count"`
	UpdatedAt       time.Time              `json:"updated_at"`
}

type UsersBlockNoContent struct{}

type UsersCheckBlockedApplicationJSONForbidden BasicError

func (*UsersCheckBlockedApplicationJSONForbidden) usersCheckBlockedResponse() {}

type UsersCheckBlockedApplicationJSONNotFound BasicError

func (*UsersCheckBlockedApplicationJSONNotFound) usersCheckBlockedResponse() {}

type UsersCheckBlockedApplicationJSONUnauthorized BasicError

func (*UsersCheckBlockedApplicationJSONUnauthorized) usersCheckBlockedResponse() {}

type UsersCheckBlockedNoContent struct{}

func (*UsersCheckBlockedNoContent) usersCheckBlockedResponse() {}

type UsersCheckFollowingForUserNoContent struct{}

func (*UsersCheckFollowingForUserNoContent) usersCheckFollowingForUserResponse() {}

type UsersCheckFollowingForUserNotFound struct{}

func (*UsersCheckFollowingForUserNotFound) usersCheckFollowingForUserResponse() {}

type UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden BasicError

func (*UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONForbidden) usersCheckPersonIsFollowedByAuthenticatedResponse() {
}

type UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound BasicError

func (*UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONNotFound) usersCheckPersonIsFollowedByAuthenticatedResponse() {
}

type UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersCheckPersonIsFollowedByAuthenticatedApplicationJSONUnauthorized) usersCheckPersonIsFollowedByAuthenticatedResponse() {
}

type UsersCheckPersonIsFollowedByAuthenticatedNoContent struct{}

func (*UsersCheckPersonIsFollowedByAuthenticatedNoContent) usersCheckPersonIsFollowedByAuthenticatedResponse() {
}

type UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest struct {
	ArmoredPublicKey string `json:"armored_public_key"`
}

func (*UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest) usersCreateGpgKeyForAuthenticatedRequest() {
}

type UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest struct {
	Key   string  `json:"key"`
	Title *string `json:"title"`
}

func (*UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest) usersCreatePublicSSHKeyForAuthenticatedRequest() {
}

type UsersDeleteGpgKeyForAuthenticatedNoContent struct{}

type UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONForbidden) usersDeletePublicSSHKeyForAuthenticatedResponse() {
}

type UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONNotFound) usersDeletePublicSSHKeyForAuthenticatedResponse() {
}

type UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersDeletePublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) usersDeletePublicSSHKeyForAuthenticatedResponse() {
}

type UsersDeletePublicSSHKeyForAuthenticatedNoContent struct{}

func (*UsersDeletePublicSSHKeyForAuthenticatedNoContent) usersDeletePublicSSHKeyForAuthenticatedResponse() {
}

type UsersFollowApplicationJSONForbidden BasicError

func (*UsersFollowApplicationJSONForbidden) usersFollowResponse() {}

type UsersFollowApplicationJSONNotFound BasicError

func (*UsersFollowApplicationJSONNotFound) usersFollowResponse() {}

type UsersFollowApplicationJSONUnauthorized BasicError

func (*UsersFollowApplicationJSONUnauthorized) usersFollowResponse() {}

type UsersFollowNoContent struct{}

func (*UsersFollowNoContent) usersFollowResponse() {}

type UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersGetGpgKeyForAuthenticatedApplicationJSONForbidden) usersGetGpgKeyForAuthenticatedResponse() {
}

type UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersGetGpgKeyForAuthenticatedApplicationJSONNotFound) usersGetGpgKeyForAuthenticatedResponse() {
}

type UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersGetGpgKeyForAuthenticatedApplicationJSONUnauthorized) usersGetGpgKeyForAuthenticatedResponse() {
}

type UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersGetPublicSSHKeyForAuthenticatedApplicationJSONForbidden) usersGetPublicSSHKeyForAuthenticatedResponse() {
}

type UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersGetPublicSSHKeyForAuthenticatedApplicationJSONNotFound) usersGetPublicSSHKeyForAuthenticatedResponse() {
}

type UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersGetPublicSSHKeyForAuthenticatedApplicationJSONUnauthorized) usersGetPublicSSHKeyForAuthenticatedResponse() {
}

type UsersListBlockedByAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListBlockedByAuthenticatedApplicationJSONForbidden) usersListBlockedByAuthenticatedResponse() {
}

type UsersListBlockedByAuthenticatedApplicationJSONNotFound BasicError

func (*UsersListBlockedByAuthenticatedApplicationJSONNotFound) usersListBlockedByAuthenticatedResponse() {
}

type UsersListBlockedByAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListBlockedByAuthenticatedApplicationJSONUnauthorized) usersListBlockedByAuthenticatedResponse() {
}

type UsersListBlockedByAuthenticatedOK []SimpleUser

func (*UsersListBlockedByAuthenticatedOK) usersListBlockedByAuthenticatedResponse() {}

type UsersListEmailsForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListEmailsForAuthenticatedApplicationJSONForbidden) usersListEmailsForAuthenticatedResponse() {
}

type UsersListEmailsForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersListEmailsForAuthenticatedApplicationJSONNotFound) usersListEmailsForAuthenticatedResponse() {
}

type UsersListEmailsForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListEmailsForAuthenticatedApplicationJSONUnauthorized) usersListEmailsForAuthenticatedResponse() {
}

type UsersListEmailsForAuthenticatedOK []Email

func (*UsersListEmailsForAuthenticatedOK) usersListEmailsForAuthenticatedResponse() {}

type UsersListFollowedByAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListFollowedByAuthenticatedApplicationJSONForbidden) usersListFollowedByAuthenticatedResponse() {
}

type UsersListFollowedByAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListFollowedByAuthenticatedApplicationJSONUnauthorized) usersListFollowedByAuthenticatedResponse() {
}

type UsersListFollowedByAuthenticatedOK []SimpleUser

func (*UsersListFollowedByAuthenticatedOK) usersListFollowedByAuthenticatedResponse() {}

type UsersListFollowersForAuthenticatedUserApplicationJSONForbidden BasicError

func (*UsersListFollowersForAuthenticatedUserApplicationJSONForbidden) usersListFollowersForAuthenticatedUserResponse() {
}

type UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized BasicError

func (*UsersListFollowersForAuthenticatedUserApplicationJSONUnauthorized) usersListFollowersForAuthenticatedUserResponse() {
}

type UsersListFollowersForAuthenticatedUserOK []SimpleUser

func (*UsersListFollowersForAuthenticatedUserOK) usersListFollowersForAuthenticatedUserResponse() {}

type UsersListGpgKeysForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListGpgKeysForAuthenticatedApplicationJSONForbidden) usersListGpgKeysForAuthenticatedResponse() {
}

type UsersListGpgKeysForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersListGpgKeysForAuthenticatedApplicationJSONNotFound) usersListGpgKeysForAuthenticatedResponse() {
}

type UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListGpgKeysForAuthenticatedApplicationJSONUnauthorized) usersListGpgKeysForAuthenticatedResponse() {
}

type UsersListGpgKeysForAuthenticatedOK []GpgKey

func (*UsersListGpgKeysForAuthenticatedOK) usersListGpgKeysForAuthenticatedResponse() {}

type UsersListOK []SimpleUser

func (*UsersListOK) usersListResponse() {}

type UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListPublicEmailsForAuthenticatedApplicationJSONForbidden) usersListPublicEmailsForAuthenticatedResponse() {
}

type UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersListPublicEmailsForAuthenticatedApplicationJSONNotFound) usersListPublicEmailsForAuthenticatedResponse() {
}

type UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListPublicEmailsForAuthenticatedApplicationJSONUnauthorized) usersListPublicEmailsForAuthenticatedResponse() {
}

type UsersListPublicEmailsForAuthenticatedOK []Email

func (*UsersListPublicEmailsForAuthenticatedOK) usersListPublicEmailsForAuthenticatedResponse() {}

type UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden BasicError

func (*UsersListPublicSSHKeysForAuthenticatedApplicationJSONForbidden) usersListPublicSSHKeysForAuthenticatedResponse() {
}

type UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound BasicError

func (*UsersListPublicSSHKeysForAuthenticatedApplicationJSONNotFound) usersListPublicSSHKeysForAuthenticatedResponse() {
}

type UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized BasicError

func (*UsersListPublicSSHKeysForAuthenticatedApplicationJSONUnauthorized) usersListPublicSSHKeysForAuthenticatedResponse() {
}

type UsersListPublicSSHKeysForAuthenticatedOK []Key

func (*UsersListPublicSSHKeysForAuthenticatedOK) usersListPublicSSHKeysForAuthenticatedResponse() {}

type UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest struct {
	Visibility UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequestVisibility `json:"visibility"`
}

func (*UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest) usersSetPrimaryEmailVisibilityForAuthenticatedRequest() {
}

type UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequestVisibility string

const (
	UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequestVisibilityPublic  UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequestVisibility = "public"
	UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequestVisibilityPrivate UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequestVisibility = "private"
)

type UsersSetPrimaryEmailVisibilityForAuthenticatedOK []Email

type UsersUnblockApplicationJSONForbidden BasicError

func (*UsersUnblockApplicationJSONForbidden) usersUnblockResponse() {}

type UsersUnblockApplicationJSONNotFound BasicError

func (*UsersUnblockApplicationJSONNotFound) usersUnblockResponse() {}

type UsersUnblockApplicationJSONUnauthorized BasicError

func (*UsersUnblockApplicationJSONUnauthorized) usersUnblockResponse() {}

type UsersUnblockNoContent struct{}

func (*UsersUnblockNoContent) usersUnblockResponse() {}

type UsersUnfollowApplicationJSONForbidden BasicError

func (*UsersUnfollowApplicationJSONForbidden) usersUnfollowResponse() {}

type UsersUnfollowApplicationJSONNotFound BasicError

func (*UsersUnfollowApplicationJSONNotFound) usersUnfollowResponse() {}

type UsersUnfollowApplicationJSONUnauthorized BasicError

func (*UsersUnfollowApplicationJSONUnauthorized) usersUnfollowResponse() {}

type UsersUnfollowNoContent struct{}

func (*UsersUnfollowNoContent) usersUnfollowResponse() {}

type UsersUpdateAuthenticatedApplicationJSONRequest struct {
	Bio             *string `json:"bio"`
	Blog            *string `json:"blog"`
	Company         *string `json:"company"`
	Email           *string `json:"email"`
	Hireable        *bool   `json:"hireable"`
	Location        *string `json:"location"`
	Name            *string `json:"name"`
	TwitterUsername *string `json:"twitter_username"`
}

func (*UsersUpdateAuthenticatedApplicationJSONRequest) usersUpdateAuthenticatedRequest() {}

type ValidationErrorSimple struct {
	DocumentationURL string    `json:"documentation_url"`
	Errors           *[]string `json:"errors"`
	Message          string    `json:"message"`
}

func (*ValidationErrorSimple) projectsCreateColumnResponse()               {}
func (*ValidationErrorSimple) projectsCreateForAuthenticatedUserResponse() {}
func (*ValidationErrorSimple) projectsCreateForOrgResponse()               {}
func (*ValidationErrorSimple) projectsCreateForRepoResponse()              {}
func (*ValidationErrorSimple) projectsMoveColumnResponse()                 {}
func (*ValidationErrorSimple) projectsUpdateCardResponse()                 {}
func (*ValidationErrorSimple) projectsUpdateResponse()                     {}
func (*ValidationErrorSimple) pullsCreateReviewResponse()                  {}
func (*ValidationErrorSimple) pullsDeletePendingReviewResponse()           {}
func (*ValidationErrorSimple) pullsDismissReviewResponse()                 {}
func (*ValidationErrorSimple) pullsSubmitReviewResponse()                  {}
func (*ValidationErrorSimple) pullsUpdateReviewResponse()                  {}
func (*ValidationErrorSimple) reposDeleteDeploymentResponse()              {}
func (*ValidationErrorSimple) reposReplaceAllTopicsResponse()              {}
func (*ValidationErrorSimple) reposUpdateBranchProtectionResponse()        {}

type Verification struct {
	Payload   string `json:"payload"`
	Reason    string `json:"reason"`
	Signature string `json:"signature"`
	Verified  bool   `json:"verified"`
}

type WaitTimer int

type Workflow struct {
	BadgeURL  string        `json:"badge_url"`
	CreatedAt time.Time     `json:"created_at"`
	DeletedAt *time.Time    `json:"deleted_at"`
	HTMLURL   string        `json:"html_url"`
	ID        int           `json:"id"`
	Name      string        `json:"name"`
	NodeID    string        `json:"node_id"`
	Path      string        `json:"path"`
	State     WorkflowState `json:"state"`
	URL       string        `json:"url"`
	UpdatedAt time.Time     `json:"updated_at"`
}

type WorkflowRun struct {
	ArtifactsURL       string               `json:"artifacts_url"`
	CancelURL          string               `json:"cancel_url"`
	CheckSuiteID       *int                 `json:"check_suite_id"`
	CheckSuiteNodeID   *string              `json:"check_suite_node_id"`
	CheckSuiteURL      string               `json:"check_suite_url"`
	Conclusion         string               `json:"conclusion"`
	CreatedAt          time.Time            `json:"created_at"`
	Event              string               `json:"event"`
	HTMLURL            string               `json:"html_url"`
	HeadBranch         string               `json:"head_branch"`
	HeadCommit         NullableSimpleCommit `json:"head_commit"`
	HeadRepository     MinimalRepository    `json:"head_repository"`
	HeadRepositoryID   *int                 `json:"head_repository_id"`
	HeadSha            string               `json:"head_sha"`
	ID                 int                  `json:"id"`
	JobsURL            string               `json:"jobs_url"`
	LogsURL            string               `json:"logs_url"`
	Name               *string              `json:"name"`
	NodeID             string               `json:"node_id"`
	PreviousAttemptURL *string              `json:"previous_attempt_url"`
	PullRequests       []PullRequestMinimal `json:"pull_requests"`
	Repository         MinimalRepository    `json:"repository"`
	RerunURL           string               `json:"rerun_url"`
	RunAttempt         *int                 `json:"run_attempt"`
	RunNumber          int                  `json:"run_number"`
	Status             string               `json:"status"`
	URL                string               `json:"url"`
	UpdatedAt          time.Time            `json:"updated_at"`
	WorkflowID         int                  `json:"workflow_id"`
	WorkflowURL        string               `json:"workflow_url"`
}

type WorkflowRunUsage struct {
	Billable      WorkflowRunUsageBillable `json:"billable"`
	RunDurationMs *int                     `json:"run_duration_ms"`
}

type WorkflowRunUsageBillable struct {
	MACOS   *WorkflowRunUsageBillableMACOS   `json:"MACOS"`
	UBUNTU  *WorkflowRunUsageBillableUBUNTU  `json:"UBUNTU"`
	WINDOWS *WorkflowRunUsageBillableWINDOWS `json:"WINDOWS"`
}

type WorkflowRunUsageBillableMACOS struct {
	Jobs    int `json:"jobs"`
	TotalMs int `json:"total_ms"`
}

type WorkflowRunUsageBillableUBUNTU struct {
	Jobs    int `json:"jobs"`
	TotalMs int `json:"total_ms"`
}

type WorkflowRunUsageBillableWINDOWS struct {
	Jobs    int `json:"jobs"`
	TotalMs int `json:"total_ms"`
}

type WorkflowState string

const (
	WorkflowStateActive             WorkflowState = "active"
	WorkflowStateDeleted            WorkflowState = "deleted"
	WorkflowStateDisabledFork       WorkflowState = "disabled_fork"
	WorkflowStateDisabledInactivity WorkflowState = "disabled_inactivity"
	WorkflowStateDisabledManually   WorkflowState = "disabled_manually"
)
