// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"io"

	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/trace"
)

func encodeActionsCreateOrUpdateEnvironmentSecretRequestJSON(
	req ActionsCreateOrUpdateEnvironmentSecretReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsCreateOrUpdateOrgSecretRequestJSON(
	req ActionsCreateOrUpdateOrgSecretReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsCreateOrUpdateRepoSecretRequestJSON(
	req ActionsCreateOrUpdateRepoSecretReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsCreateSelfHostedRunnerGroupForOrgRequestJSON(
	req ActionsCreateSelfHostedRunnerGroupForOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsReviewPendingDeploymentsForRunRequestJSON(
	req ActionsReviewPendingDeploymentsForRunReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsSetAllowedActionsOrganizationRequestJSON(
	req OptSelectedActions,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsSetAllowedActionsRepositoryRequestJSON(
	req OptSelectedActions,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsSetGithubActionsPermissionsOrganizationRequestJSON(
	req ActionsSetGithubActionsPermissionsOrganizationReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsSetGithubActionsPermissionsRepositoryRequestJSON(
	req ActionsSetGithubActionsPermissionsRepositoryReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequestJSON(
	req ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsSetSelectedReposForOrgSecretRequestJSON(
	req ActionsSetSelectedReposForOrgSecretReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequestJSON(
	req ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsSetSelfHostedRunnersInGroupForOrgRequestJSON(
	req ActionsSetSelfHostedRunnersInGroupForOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActionsUpdateSelfHostedRunnerGroupForOrgRequestJSON(
	req ActionsUpdateSelfHostedRunnerGroupForOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActivityMarkNotificationsAsReadRequestJSON(
	req OptActivityMarkNotificationsAsReadReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActivityMarkRepoNotificationsAsReadRequestJSON(
	req OptActivityMarkRepoNotificationsAsReadReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActivitySetRepoSubscriptionRequestJSON(
	req OptActivitySetRepoSubscriptionReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeActivitySetThreadSubscriptionRequestJSON(
	req OptActivitySetThreadSubscriptionReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeAppsCheckTokenRequestJSON(
	req AppsCheckTokenReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeAppsCreateContentAttachmentRequestJSON(
	req AppsCreateContentAttachmentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeAppsCreateInstallationAccessTokenRequestJSON(
	req OptAppsCreateInstallationAccessTokenReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeAppsDeleteAuthorizationRequestJSON(
	req AppsDeleteAuthorizationReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeAppsDeleteTokenRequestJSON(
	req AppsDeleteTokenReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeAppsResetTokenRequestJSON(
	req AppsResetTokenReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeAppsScopeTokenRequestJSON(
	req AppsScopeTokenReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeAppsUpdateWebhookConfigForAppRequestJSON(
	req OptAppsUpdateWebhookConfigForAppReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeChecksCreateSuiteRequestJSON(
	req ChecksCreateSuiteReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeChecksSetSuitesPreferencesRequestJSON(
	req ChecksSetSuitesPreferencesReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeCodeScanningUpdateAlertRequestJSON(
	req CodeScanningUpdateAlertReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeCodeScanningUploadSarifRequestJSON(
	req CodeScanningUploadSarifReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequestJSON(
	req EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminProvisionAndInviteEnterpriseGroupRequestJSON(
	req EnterpriseAdminProvisionAndInviteEnterpriseGroupReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminProvisionAndInviteEnterpriseUserRequestJSON(
	req EnterpriseAdminProvisionAndInviteEnterpriseUserReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminSetAllowedActionsEnterpriseRequestJSON(
	req SelectedActions,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequestJSON(
	req EnterpriseAdminSetGithubActionsPermissionsEnterpriseReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequestJSON(
	req EnterpriseAdminSetInformationForProvisionedEnterpriseGroupReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequestJSON(
	req EnterpriseAdminSetInformationForProvisionedEnterpriseUserReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequestJSON(
	req EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequestJSON(
	req EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequestJSON(
	req EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminUpdateAttributeForEnterpriseGroupRequestJSON(
	req EnterpriseAdminUpdateAttributeForEnterpriseGroupReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminUpdateAttributeForEnterpriseUserRequestJSON(
	req EnterpriseAdminUpdateAttributeForEnterpriseUserReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequestJSON(
	req OptEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeGistsCreateRequestJSON(
	req GistsCreateReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeGistsCreateCommentRequestJSON(
	req GistsCreateCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeGistsUpdateCommentRequestJSON(
	req GistsUpdateCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeGitCreateBlobRequestJSON(
	req GitCreateBlobReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeGitCreateCommitRequestJSON(
	req GitCreateCommitReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeGitCreateRefRequestJSON(
	req GitCreateRefReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeGitCreateTagRequestJSON(
	req GitCreateTagReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeGitCreateTreeRequestJSON(
	req GitCreateTreeReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeGitUpdateRefRequestJSON(
	req GitUpdateRefReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeInteractionsSetRestrictionsForAuthenticatedUserRequestJSON(
	req InteractionLimit,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeInteractionsSetRestrictionsForOrgRequestJSON(
	req InteractionLimit,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeInteractionsSetRestrictionsForRepoRequestJSON(
	req InteractionLimit,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeIssuesAddAssigneesRequestJSON(
	req OptIssuesAddAssigneesReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeIssuesCreateRequestJSON(
	req IssuesCreateReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeIssuesCreateCommentRequestJSON(
	req IssuesCreateCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeIssuesCreateLabelRequestJSON(
	req IssuesCreateLabelReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeIssuesCreateMilestoneRequestJSON(
	req IssuesCreateMilestoneReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeIssuesLockRequestJSON(
	req OptNilIssuesLockReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeIssuesRemoveAssigneesRequestJSON(
	req OptIssuesRemoveAssigneesReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeIssuesUpdateRequestJSON(
	req OptIssuesUpdateReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeIssuesUpdateCommentRequestJSON(
	req IssuesUpdateCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeIssuesUpdateLabelRequestJSON(
	req OptIssuesUpdateLabelReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeIssuesUpdateMilestoneRequestJSON(
	req OptIssuesUpdateMilestoneReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeMigrationsMapCommitAuthorRequestJSON(
	req OptMigrationsMapCommitAuthorReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeMigrationsSetLfsPreferenceRequestJSON(
	req MigrationsSetLfsPreferenceReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeMigrationsStartForAuthenticatedUserRequestJSON(
	req MigrationsStartForAuthenticatedUserReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeMigrationsStartForOrgRequestJSON(
	req MigrationsStartForOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeMigrationsStartImportRequestJSON(
	req MigrationsStartImportReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeMigrationsUpdateImportRequestJSON(
	req OptNilMigrationsUpdateImportReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeOAuthAuthorizationsCreateAuthorizationRequestJSON(
	req OptOAuthAuthorizationsCreateAuthorizationReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeOAuthAuthorizationsGetOrCreateAuthorizationForAppRequestJSON(
	req OAuthAuthorizationsGetOrCreateAuthorizationForAppReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeOAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestJSON(
	req OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeOAuthAuthorizationsUpdateAuthorizationRequestJSON(
	req OptOAuthAuthorizationsUpdateAuthorizationReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeOrgsCreateInvitationRequestJSON(
	req OptOrgsCreateInvitationReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeOrgsCreateWebhookRequestJSON(
	req OrgsCreateWebhookReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeOrgsSetMembershipForUserRequestJSON(
	req OptOrgsSetMembershipForUserReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeOrgsUpdateMembershipForAuthenticatedUserRequestJSON(
	req OrgsUpdateMembershipForAuthenticatedUserReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeOrgsUpdateWebhookRequestJSON(
	req OptOrgsUpdateWebhookReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeOrgsUpdateWebhookConfigForOrgRequestJSON(
	req OptOrgsUpdateWebhookConfigForOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeProjectsAddCollaboratorRequestJSON(
	req OptNilProjectsAddCollaboratorReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeProjectsCreateColumnRequestJSON(
	req ProjectsCreateColumnReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeProjectsCreateForAuthenticatedUserRequestJSON(
	req ProjectsCreateForAuthenticatedUserReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeProjectsCreateForOrgRequestJSON(
	req ProjectsCreateForOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeProjectsCreateForRepoRequestJSON(
	req ProjectsCreateForRepoReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeProjectsMoveCardRequestJSON(
	req ProjectsMoveCardReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeProjectsMoveColumnRequestJSON(
	req ProjectsMoveColumnReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeProjectsUpdateRequestJSON(
	req OptProjectsUpdateReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeProjectsUpdateCardRequestJSON(
	req OptProjectsUpdateCardReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeProjectsUpdateColumnRequestJSON(
	req ProjectsUpdateColumnReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsCreateRequestJSON(
	req PullsCreateReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsCreateReplyForReviewCommentRequestJSON(
	req PullsCreateReplyForReviewCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsCreateReviewRequestJSON(
	req OptPullsCreateReviewReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsCreateReviewCommentRequestJSON(
	req PullsCreateReviewCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsDismissReviewRequestJSON(
	req PullsDismissReviewReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsMergeRequestJSON(
	req OptNilPullsMergeReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsRemoveRequestedReviewersRequestJSON(
	req PullsRemoveRequestedReviewersReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsSubmitReviewRequestJSON(
	req PullsSubmitReviewReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsUpdateRequestJSON(
	req OptPullsUpdateReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsUpdateBranchRequestJSON(
	req OptNilPullsUpdateBranchReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsUpdateReviewRequestJSON(
	req PullsUpdateReviewReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePullsUpdateReviewCommentRequestJSON(
	req PullsUpdateReviewCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReactionsCreateForCommitCommentRequestJSON(
	req ReactionsCreateForCommitCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReactionsCreateForIssueRequestJSON(
	req ReactionsCreateForIssueReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReactionsCreateForIssueCommentRequestJSON(
	req ReactionsCreateForIssueCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReactionsCreateForPullRequestReviewCommentRequestJSON(
	req ReactionsCreateForPullRequestReviewCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReactionsCreateForReleaseRequestJSON(
	req ReactionsCreateForReleaseReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReactionsCreateForTeamDiscussionCommentInOrgRequestJSON(
	req ReactionsCreateForTeamDiscussionCommentInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReactionsCreateForTeamDiscussionCommentLegacyRequestJSON(
	req ReactionsCreateForTeamDiscussionCommentLegacyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReactionsCreateForTeamDiscussionInOrgRequestJSON(
	req ReactionsCreateForTeamDiscussionInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReactionsCreateForTeamDiscussionLegacyRequestJSON(
	req ReactionsCreateForTeamDiscussionLegacyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposAddAppAccessRestrictionsRequestJSON(
	req OptReposAddAppAccessRestrictionsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposAddCollaboratorRequestJSON(
	req OptReposAddCollaboratorReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposAddStatusCheckContextsRequestJSON(
	req OptReposAddStatusCheckContextsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposAddTeamAccessRestrictionsRequestJSON(
	req OptReposAddTeamAccessRestrictionsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposAddUserAccessRestrictionsRequestJSON(
	req OptReposAddUserAccessRestrictionsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateAutolinkRequestJSON(
	req ReposCreateAutolinkReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateCommitCommentRequestJSON(
	req ReposCreateCommitCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateCommitStatusRequestJSON(
	req ReposCreateCommitStatusReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateDeployKeyRequestJSON(
	req ReposCreateDeployKeyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateDeploymentRequestJSON(
	req ReposCreateDeploymentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateDeploymentStatusRequestJSON(
	req ReposCreateDeploymentStatusReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateDispatchEventRequestJSON(
	req ReposCreateDispatchEventReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateForAuthenticatedUserRequestJSON(
	req ReposCreateForAuthenticatedUserReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateForkRequestJSON(
	req OptNilReposCreateForkReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateInOrgRequestJSON(
	req ReposCreateInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateOrUpdateFileContentsRequestJSON(
	req ReposCreateOrUpdateFileContentsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreatePagesSiteRequestJSON(
	req NilReposCreatePagesSiteReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateReleaseRequestJSON(
	req ReposCreateReleaseReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateUsingTemplateRequestJSON(
	req ReposCreateUsingTemplateReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposCreateWebhookRequestJSON(
	req OptNilReposCreateWebhookReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposDeleteFileRequestJSON(
	req ReposDeleteFileReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposMergeRequestJSON(
	req ReposMergeReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposMergeUpstreamRequestJSON(
	req ReposMergeUpstreamReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposRemoveAppAccessRestrictionsRequestJSON(
	req OptReposRemoveAppAccessRestrictionsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposRemoveStatusCheckContextsRequestJSON(
	req OptReposRemoveStatusCheckContextsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposRemoveTeamAccessRestrictionsRequestJSON(
	req OptReposRemoveTeamAccessRestrictionsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposRemoveUserAccessRestrictionsRequestJSON(
	req OptReposRemoveUserAccessRestrictionsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposRenameBranchRequestJSON(
	req OptReposRenameBranchReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposReplaceAllTopicsRequestJSON(
	req ReposReplaceAllTopicsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposSetAppAccessRestrictionsRequestJSON(
	req OptReposSetAppAccessRestrictionsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposSetStatusCheckContextsRequestJSON(
	req OptReposSetStatusCheckContextsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposSetTeamAccessRestrictionsRequestJSON(
	req OptReposSetTeamAccessRestrictionsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposSetUserAccessRestrictionsRequestJSON(
	req OptReposSetUserAccessRestrictionsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposTransferRequestJSON(
	req ReposTransferReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposUpdateRequestJSON(
	req OptReposUpdateReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposUpdateBranchProtectionRequestJSON(
	req ReposUpdateBranchProtectionReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposUpdateCommitCommentRequestJSON(
	req ReposUpdateCommitCommentReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposUpdateInvitationRequestJSON(
	req OptReposUpdateInvitationReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposUpdatePullRequestReviewProtectionRequestJSON(
	req OptReposUpdatePullRequestReviewProtectionReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposUpdateReleaseRequestJSON(
	req OptReposUpdateReleaseReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposUpdateReleaseAssetRequestJSON(
	req OptReposUpdateReleaseAssetReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposUpdateStatusCheckProtectionRequestJSON(
	req OptReposUpdateStatusCheckProtectionReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposUpdateWebhookRequestJSON(
	req OptReposUpdateWebhookReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeReposUpdateWebhookConfigForRepoRequestJSON(
	req OptReposUpdateWebhookConfigForRepoReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeSecretScanningUpdateAlertRequestJSON(
	req SecretScanningUpdateAlertReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsAddOrUpdateMembershipForUserInOrgRequestJSON(
	req OptTeamsAddOrUpdateMembershipForUserInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsAddOrUpdateMembershipForUserLegacyRequestJSON(
	req OptTeamsAddOrUpdateMembershipForUserLegacyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsAddOrUpdateProjectPermissionsInOrgRequestJSON(
	req OptNilTeamsAddOrUpdateProjectPermissionsInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsAddOrUpdateProjectPermissionsLegacyRequestJSON(
	req OptTeamsAddOrUpdateProjectPermissionsLegacyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsAddOrUpdateRepoPermissionsInOrgRequestJSON(
	req OptTeamsAddOrUpdateRepoPermissionsInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsAddOrUpdateRepoPermissionsLegacyRequestJSON(
	req OptTeamsAddOrUpdateRepoPermissionsLegacyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsCreateRequestJSON(
	req TeamsCreateReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsCreateDiscussionCommentInOrgRequestJSON(
	req TeamsCreateDiscussionCommentInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsCreateDiscussionCommentLegacyRequestJSON(
	req TeamsCreateDiscussionCommentLegacyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsCreateDiscussionInOrgRequestJSON(
	req TeamsCreateDiscussionInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsCreateDiscussionLegacyRequestJSON(
	req TeamsCreateDiscussionLegacyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgRequestJSON(
	req TeamsCreateOrUpdateIdpGroupConnectionsInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestJSON(
	req TeamsCreateOrUpdateIdpGroupConnectionsLegacyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsUpdateDiscussionCommentInOrgRequestJSON(
	req TeamsUpdateDiscussionCommentInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsUpdateDiscussionCommentLegacyRequestJSON(
	req TeamsUpdateDiscussionCommentLegacyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsUpdateDiscussionInOrgRequestJSON(
	req OptTeamsUpdateDiscussionInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsUpdateDiscussionLegacyRequestJSON(
	req OptTeamsUpdateDiscussionLegacyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsUpdateInOrgRequestJSON(
	req OptTeamsUpdateInOrgReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeTeamsUpdateLegacyRequestJSON(
	req TeamsUpdateLegacyReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeUsersAddEmailForAuthenticatedRequestJSON(
	req OptUsersAddEmailForAuthenticatedReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeUsersCreateGpgKeyForAuthenticatedRequestJSON(
	req UsersCreateGpgKeyForAuthenticatedReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeUsersCreatePublicSSHKeyForAuthenticatedRequestJSON(
	req UsersCreatePublicSSHKeyForAuthenticatedReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeUsersDeleteEmailForAuthenticatedRequestJSON(
	req OptUsersDeleteEmailForAuthenticatedReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeUsersSetPrimaryEmailVisibilityForAuthenticatedRequestJSON(
	req UsersSetPrimaryEmailVisibilityForAuthenticatedReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)

		req.Encode(e)
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodeUsersUpdateAuthenticatedRequestJSON(
	req OptUsersUpdateAuthenticatedReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
