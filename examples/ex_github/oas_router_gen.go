// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	http.NotFound(w, r)
}

func skipSlash(p []byte) []byte {
	if len(p) > 0 && p[0] == '/' {
		return p[1:]
	}
	return p
}

// nextElem return next path element from p and forwarded p.
func nextElem(p []byte) (elem, next []byte) {
	p = skipSlash(p)
	idx := bytes.IndexByte(p, '/')
	if idx < 0 {
		idx = len(p)
	}
	return p[:idx], p[idx:]
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	p := []byte(r.URL.Path)
	if len(p) == 0 {
		s.notFound(w, r)
		return
	}

	var (
		elem []byte            // current element, without slashes
		args map[string]string // lazily initialized
	)

	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "DELETE":
		// Root edge.
		elem, p = nextElem(p)
		switch string(elem) {
		case "repos": // -> 1
			// Edge: 1, path: "repos".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["owner"] = string(elem)
				// Edge: 2, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "": // -> 3
					// Edge: 3, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["repo"] = string(elem)
						// Edge: 4, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "actions": // -> 5
							// Edge: 5, path: "actions".
							elem, p = nextElem(p)
							switch string(elem) {
							case "artifacts": // -> 6
								// Edge: 6, path: "artifacts".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["artifact_id"] = string(elem)
									// DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}
									s.handleActionsDeleteArtifactRequest(args, w, r)
									return
								}
							case "secrets": // -> 19
								// Edge: 19, path: "secrets".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["secret_name"] = string(elem)
									// DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}
									s.handleActionsDeleteRepoSecretRequest(args, w, r)
									return
								}
							case "runners": // -> 23
								// Edge: 23, path: "runners".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["runner_id"] = string(elem)
									// DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}
									s.handleActionsDeleteSelfHostedRunnerFromRepoRequest(args, w, r)
									return
								}
							case "runs": // -> 27
								// Edge: 27, path: "runs".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["run_id"] = string(elem)
									// Edge: 28, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									case "logs": // -> 29
										// DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs
										s.handleActionsDeleteWorkflowRunLogsRequest(args, w, r)
										return
									default:
										// DELETE /repos/{owner}/{repo}/actions/runs/{run_id}.
										s.handleActionsDeleteWorkflowRunRequest(args, w, r)
										return
									}
								}
							default:
								s.notFound(w, r)
								return
							}
						case "subscription": // -> 39
							// DELETE /repos/{owner}/{repo}/subscription
							s.handleActivityDeleteRepoSubscriptionRequest(args, w, r)
							return
						case "code-scanning": // -> 59
							// Edge: 59, path: "code-scanning".
							elem, p = nextElem(p)
							switch string(elem) {
							case "analyses": // -> 60
								// Edge: 60, path: "analyses".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["analysis_id"] = string(elem)
									// DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
									s.handleCodeScanningDeleteAnalysisRequest(args, w, r)
									return
								}
							default:
								s.notFound(w, r)
								return
							}
						case "interaction-limits": // -> 91
							// DELETE /repos/{owner}/{repo}/interaction-limits
							s.handleInteractionsRemoveRestrictionsForRepoRequest(args, w, r)
							return
						case "issues": // -> 92
							// Edge: 92, path: "issues".
							elem, p = nextElem(p)
							switch string(elem) {
							case "comments": // -> 93
								// Edge: 93, path: "comments".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["comment_id"] = string(elem)
									// Edge: 94, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									case "reactions": // -> 174
										// Edge: 174, path: "reactions".
										elem, p = nextElem(p)
										switch string(elem) {
										default:
											if args == nil {
												args = make(map[string]string)
											}
											args["reaction_id"] = string(elem)
											// DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}
											s.handleReactionsDeleteForIssueCommentRequest(args, w, r)
											return
										}
									default:
										// DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}.
										s.handleIssuesDeleteCommentRequest(args, w, r)
										return
									}
								}
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["issue_number"] = string(elem)
								// Edge: 99, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "labels": // -> 100
									// Edge: 100, path: "labels".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["name"] = string(elem)
										// DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}
										s.handleIssuesRemoveLabelRequest(args, w, r)
										return
									}
								case "assignees": // -> 101
									// DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees
									s.handleIssuesRemoveAssigneesRequest(args, w, r)
									return
								case "lock": // -> 103
									// DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock
									s.handleIssuesUnlockRequest(args, w, r)
									return
								case "reactions": // -> 172
									// Edge: 172, path: "reactions".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["reaction_id"] = string(elem)
										// DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}
										s.handleReactionsDeleteForIssueRequest(args, w, r)
										return
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						case "labels": // -> 95
							// Edge: 95, path: "labels".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["name"] = string(elem)
								// DELETE /repos/{owner}/{repo}/labels/{name}
								s.handleIssuesDeleteLabelRequest(args, w, r)
								return
							}
						case "milestones": // -> 97
							// Edge: 97, path: "milestones".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["milestone_number"] = string(elem)
								// DELETE /repos/{owner}/{repo}/milestones/{milestone_number}
								s.handleIssuesDeleteMilestoneRequest(args, w, r)
								return
							}
						case "import": // -> 104
							// DELETE /repos/{owner}/{repo}/import
							s.handleMigrationsCancelImportRequest(args, w, r)
							return
						case "pulls": // -> 162
							// Edge: 162, path: "pulls".
							elem, p = nextElem(p)
							switch string(elem) {
							case "comments": // -> 166
								// Edge: 166, path: "comments".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["comment_id"] = string(elem)
									// Edge: 167, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									case "reactions": // -> 176
										// Edge: 176, path: "reactions".
										elem, p = nextElem(p)
										switch string(elem) {
										default:
											if args == nil {
												args = make(map[string]string)
											}
											args["reaction_id"] = string(elem)
											// DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}
											s.handleReactionsDeleteForPullRequestCommentRequest(args, w, r)
											return
										}
									default:
										// DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}.
										s.handlePullsDeleteReviewCommentRequest(args, w, r)
										return
									}
								}
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["pull_number"] = string(elem)
								// Edge: 163, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "reviews": // -> 164
									// Edge: 164, path: "reviews".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["review_id"] = string(elem)
										// DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
										s.handlePullsDeletePendingReviewRequest(args, w, r)
										return
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						case "comments": // -> 168
							// Edge: 168, path: "comments".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["comment_id"] = string(elem)
								// Edge: 169, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "reactions": // -> 170
									// Edge: 170, path: "reactions".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["reaction_id"] = string(elem)
										// DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}
										s.handleReactionsDeleteForCommitCommentRequest(args, w, r)
										return
									}
								default:
									// DELETE /repos/{owner}/{repo}/comments/{comment_id}.
									s.handleReposDeleteCommitCommentRequest(args, w, r)
									return
								}
							}
						case "branches": // -> 192
							// Edge: 192, path: "branches".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["branch"] = string(elem)
								// Edge: 193, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "protection": // -> 194
									// Edge: 194, path: "protection".
									elem, p = nextElem(p)
									switch string(elem) {
									case "restrictions": // -> 195
										// DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions
										s.handleReposDeleteAccessRestrictionsRequest(args, w, r)
										return
									case "enforce_admins": // -> 196
										// DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
										s.handleReposDeleteAdminBranchProtectionRequest(args, w, r)
										return
									case "required_signatures": // -> 201
										// DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
										s.handleReposDeleteCommitSignatureProtectionRequest(args, w, r)
										return
									case "required_pull_request_reviews": // -> 208
										// DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
										s.handleReposDeletePullRequestReviewProtectionRequest(args, w, r)
										return
									case "required_status_checks": // -> 220
										// DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
										s.handleReposRemoveStatusCheckProtectionRequest(args, w, r)
										return
									default:
										// DELETE /repos/{owner}/{repo}/branches/{branch}/protection.
										s.handleReposDeleteBranchProtectionRequest(args, w, r)
										return
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						case "environments": // -> 197
							// Edge: 197, path: "environments".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["environment_name"] = string(elem)
								// DELETE /repos/{owner}/{repo}/environments/{environment_name}
								s.handleReposDeleteAnEnvironmentRequest(args, w, r)
								return
							}
						case "autolinks": // -> 199
							// Edge: 199, path: "autolinks".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["autolink_id"] = string(elem)
								// DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}
								s.handleReposDeleteAutolinkRequest(args, w, r)
								return
							}
						case "keys": // -> 202
							// Edge: 202, path: "keys".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["key_id"] = string(elem)
								// DELETE /repos/{owner}/{repo}/keys/{key_id}
								s.handleReposDeleteDeployKeyRequest(args, w, r)
								return
							}
						case "deployments": // -> 204
							// Edge: 204, path: "deployments".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["deployment_id"] = string(elem)
								// DELETE /repos/{owner}/{repo}/deployments/{deployment_id}
								s.handleReposDeleteDeploymentRequest(args, w, r)
								return
							}
						case "invitations": // -> 206
							// Edge: 206, path: "invitations".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["invitation_id"] = string(elem)
								// DELETE /repos/{owner}/{repo}/invitations/{invitation_id}
								s.handleReposDeleteInvitationRequest(args, w, r)
								return
							}
						case "releases": // -> 209
							// Edge: 209, path: "releases".
							elem, p = nextElem(p)
							switch string(elem) {
							case "assets": // -> 211
								// Edge: 211, path: "assets".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["asset_id"] = string(elem)
									// DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}
									s.handleReposDeleteReleaseAssetRequest(args, w, r)
									return
								}
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["release_id"] = string(elem)
								// DELETE /repos/{owner}/{repo}/releases/{release_id}
								s.handleReposDeleteReleaseRequest(args, w, r)
								return
							}
						case "hooks": // -> 213
							// Edge: 213, path: "hooks".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["hook_id"] = string(elem)
								// DELETE /repos/{owner}/{repo}/hooks/{hook_id}
								s.handleReposDeleteWebhookRequest(args, w, r)
								return
							}
						case "automated-security-fixes": // -> 215
							// DELETE /repos/{owner}/{repo}/automated-security-fixes
							s.handleReposDisableAutomatedSecurityFixesRequest(args, w, r)
							return
						case "lfs": // -> 216
							// DELETE /repos/{owner}/{repo}/lfs
							s.handleReposDisableLfsForRepoRequest(args, w, r)
							return
						case "vulnerability-alerts": // -> 217
							// DELETE /repos/{owner}/{repo}/vulnerability-alerts
							s.handleReposDisableVulnerabilityAlertsRequest(args, w, r)
							return
						case "collaborators": // -> 218
							// Edge: 218, path: "collaborators".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["username"] = string(elem)
								// DELETE /repos/{owner}/{repo}/collaborators/{username}
								s.handleReposRemoveCollaboratorRequest(args, w, r)
								return
							}
						default:
							// DELETE /repos/{owner}/{repo}.
							s.handleReposDeleteRequest(args, w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "repositories": // -> 8
			// Edge: 8, path: "repositories".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["repository_id"] = string(elem)
				// Edge: 9, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "environments": // -> 10
					// Edge: 10, path: "environments".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["environment_name"] = string(elem)
						// Edge: 11, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "secrets": // -> 12
							// Edge: 12, path: "secrets".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["secret_name"] = string(elem)
								// DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
								s.handleActionsDeleteEnvironmentSecretRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "orgs": // -> 14
			// Edge: 14, path: "orgs".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["org"] = string(elem)
				// Edge: 15, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "actions": // -> 16
					// Edge: 16, path: "actions".
					elem, p = nextElem(p)
					switch string(elem) {
					case "secrets": // -> 17
						// Edge: 17, path: "secrets".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["secret_name"] = string(elem)
							// Edge: 18, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "repositories": // -> 35
								// Edge: 35, path: "repositories".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["repository_id"] = string(elem)
									// DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
									s.handleActionsRemoveSelectedRepoFromOrgSecretRequest(args, w, r)
									return
								}
							default:
								// DELETE /orgs/{org}/actions/secrets/{secret_name}.
								s.handleActionsDeleteOrgSecretRequest(args, w, r)
								return
							}
						}
					case "runners": // -> 21
						// Edge: 21, path: "runners".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_id"] = string(elem)
							// DELETE /orgs/{org}/actions/runners/{runner_id}
							s.handleActionsDeleteSelfHostedRunnerFromOrgRequest(args, w, r)
							return
						}
					case "runner-groups": // -> 25
						// Edge: 25, path: "runner-groups".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_group_id"] = string(elem)
							// Edge: 26, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "repositories": // -> 33
								// Edge: 33, path: "repositories".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["repository_id"] = string(elem)
									// DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
									s.handleActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgRequest(args, w, r)
									return
								}
							case "runners": // -> 37
								// Edge: 37, path: "runners".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["runner_id"] = string(elem)
									// DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
									s.handleActionsRemoveSelfHostedRunnerFromGroupForOrgRequest(args, w, r)
									return
								}
							default:
								// DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}.
								s.handleActionsDeleteSelfHostedRunnerGroupFromOrgRequest(args, w, r)
								return
							}
						}
					case "permissions": // -> 30
						// Edge: 30, path: "permissions".
						elem, p = nextElem(p)
						switch string(elem) {
						case "repositories": // -> 31
							// Edge: 31, path: "repositories".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["repository_id"] = string(elem)
								// DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}
								s.handleActionsDisableSelectedRepositoryGithubActionsOrganizationRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				case "interaction-limits": // -> 90
					// DELETE /orgs/{org}/interaction-limits
					s.handleInteractionsRemoveRestrictionsForOrgRequest(args, w, r)
					return
				case "migrations": // -> 108
					// Edge: 108, path: "migrations".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["migration_id"] = string(elem)
						// Edge: 109, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "archive": // -> 110
							// DELETE /orgs/{org}/migrations/{migration_id}/archive
							s.handleMigrationsDeleteArchiveForOrgRequest(args, w, r)
							return
						case "repos": // -> 114
							// Edge: 114, path: "repos".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["repo_name"] = string(elem)
								// Edge: 115, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "lock": // -> 116
									// DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock
									s.handleMigrationsUnlockRepoForOrgRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				case "hooks": // -> 122
					// Edge: 122, path: "hooks".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["hook_id"] = string(elem)
						// DELETE /orgs/{org}/hooks/{hook_id}
						s.handleOrgsDeleteWebhookRequest(args, w, r)
						return
					}
				case "members": // -> 124
					// Edge: 124, path: "members".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// DELETE /orgs/{org}/members/{username}
						s.handleOrgsRemoveMemberRequest(args, w, r)
						return
					}
				case "memberships": // -> 126
					// Edge: 126, path: "memberships".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// DELETE /orgs/{org}/memberships/{username}
						s.handleOrgsRemoveMembershipForUserRequest(args, w, r)
						return
					}
				case "outside_collaborators": // -> 128
					// Edge: 128, path: "outside_collaborators".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// DELETE /orgs/{org}/outside_collaborators/{username}
						s.handleOrgsRemoveOutsideCollaboratorRequest(args, w, r)
						return
					}
				case "public_members": // -> 130
					// Edge: 130, path: "public_members".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// DELETE /orgs/{org}/public_members/{username}
						s.handleOrgsRemovePublicMembershipForAuthenticatedUserRequest(args, w, r)
						return
					}
				case "credential-authorizations": // -> 132
					// Edge: 132, path: "credential-authorizations".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["credential_id"] = string(elem)
						// DELETE /orgs/{org}/credential-authorizations/{credential_id}
						s.handleOrgsRemoveSamlSSOAuthorizationRequest(args, w, r)
						return
					}
				case "blocks": // -> 134
					// Edge: 134, path: "blocks".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// DELETE /orgs/{org}/blocks/{username}
						s.handleOrgsUnblockUserRequest(args, w, r)
						return
					}
				case "packages": // -> 140
					// Edge: 140, path: "packages".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["package_type"] = string(elem)
						// Edge: 141, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "": // -> 142
							// Edge: 142, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["package_name"] = string(elem)
								// Edge: 143, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "versions": // -> 152
									// Edge: 152, path: "versions".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["package_version_id"] = string(elem)
										// DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
										s.handlePackagesDeletePackageVersionForOrgRequest(args, w, r)
										return
									}
								default:
									// DELETE /orgs/{org}/packages/{package_type}/{package_name}.
									s.handlePackagesDeletePackageForOrgRequest(args, w, r)
									return
								}
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				case "teams": // -> 178
					// Edge: 178, path: "teams".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["team_slug"] = string(elem)
						// Edge: 179, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "discussions": // -> 180
							// Edge: 180, path: "discussions".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["discussion_number"] = string(elem)
								// Edge: 181, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "reactions": // -> 182
									// Edge: 182, path: "reactions".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["reaction_id"] = string(elem)
										// DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}
										s.handleReactionsDeleteForTeamDiscussionRequest(args, w, r)
										return
									}
								case "comments": // -> 184
									// Edge: 184, path: "comments".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["comment_number"] = string(elem)
										// Edge: 185, path: "".
										elem, p = nextElem(p)
										switch string(elem) {
										case "reactions": // -> 186
											// Edge: 186, path: "reactions".
											elem, p = nextElem(p)
											switch string(elem) {
											default:
												if args == nil {
													args = make(map[string]string)
												}
												args["reaction_id"] = string(elem)
												// DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}
												s.handleReactionsDeleteForTeamDiscussionCommentRequest(args, w, r)
												return
											}
										default:
											// DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}.
											s.handleTeamsDeleteDiscussionCommentInOrgRequest(args, w, r)
											return
										}
									}
								default:
									// DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}.
									s.handleTeamsDeleteDiscussionInOrgRequest(args, w, r)
									return
								}
							}
						case "memberships": // -> 233
							// Edge: 233, path: "memberships".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["username"] = string(elem)
								// DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}
								s.handleTeamsRemoveMembershipForUserInOrgRequest(args, w, r)
								return
							}
						case "projects": // -> 237
							// Edge: 237, path: "projects".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["project_id"] = string(elem)
								// DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}
								s.handleTeamsRemoveProjectInOrgRequest(args, w, r)
								return
							}
						case "repos": // -> 239
							// Edge: 239, path: "repos".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["owner"] = string(elem)
								// Edge: 240, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "": // -> 241
									// Edge: 241, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["repo"] = string(elem)
										// DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
										s.handleTeamsRemoveRepoInOrgRequest(args, w, r)
										return
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						default:
							// DELETE /orgs/{org}/teams/{team_slug}.
							s.handleTeamsDeleteInOrgRequest(args, w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "notifications": // -> 40
			// Edge: 40, path: "notifications".
			elem, p = nextElem(p)
			switch string(elem) {
			case "threads": // -> 41
				// Edge: 41, path: "threads".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["thread_id"] = string(elem)
					// Edge: 42, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "subscription": // -> 43
						// DELETE /notifications/threads/{thread_id}/subscription
						s.handleActivityDeleteThreadSubscriptionRequest(args, w, r)
						return
					default:
						s.notFound(w, r)
						return
					}
				}
			default:
				s.notFound(w, r)
				return
			}
		case "user": // -> 44
			// Edge: 44, path: "user".
			elem, p = nextElem(p)
			switch string(elem) {
			case "starred": // -> 45
				// Edge: 45, path: "starred".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["owner"] = string(elem)
					// Edge: 46, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "": // -> 47
						// Edge: 47, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["repo"] = string(elem)
							// DELETE /user/starred/{owner}/{repo}
							s.handleActivityUnstarRepoForAuthenticatedUserRequest(args, w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				}
			case "installations": // -> 52
				// Edge: 52, path: "installations".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["installation_id"] = string(elem)
					// Edge: 53, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "repositories": // -> 54
						// Edge: 54, path: "repositories".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["repository_id"] = string(elem)
							// DELETE /user/installations/{installation_id}/repositories/{repository_id}
							s.handleAppsRemoveRepoFromInstallationRequest(args, w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				}
			case "interaction-limits": // -> 89
				// DELETE /user/interaction-limits
				s.handleInteractionsRemoveRestrictionsForAuthenticatedUserRequest(args, w, r)
				return
			case "migrations": // -> 105
				// Edge: 105, path: "migrations".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["migration_id"] = string(elem)
					// Edge: 106, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "archive": // -> 107
						// DELETE /user/migrations/{migration_id}/archive
						s.handleMigrationsDeleteArchiveForAuthenticatedUserRequest(args, w, r)
						return
					case "repos": // -> 111
						// Edge: 111, path: "repos".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["repo_name"] = string(elem)
							// Edge: 112, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "lock": // -> 113
								// DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock
								s.handleMigrationsUnlockRepoForAuthenticatedUserRequest(args, w, r)
								return
							default:
								s.notFound(w, r)
								return
							}
						}
					default:
						s.notFound(w, r)
						return
					}
				}
			case "packages": // -> 136
				// Edge: 136, path: "packages".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["package_type"] = string(elem)
					// Edge: 137, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "": // -> 138
						// Edge: 138, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["package_name"] = string(elem)
							// Edge: 139, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "versions": // -> 150
								// Edge: 150, path: "versions".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["package_version_id"] = string(elem)
									// DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}
									s.handlePackagesDeletePackageVersionForAuthenticatedUserRequest(args, w, r)
									return
								}
							default:
								// DELETE /user/packages/{package_type}/{package_name}.
								s.handlePackagesDeletePackageForAuthenticatedUserRequest(args, w, r)
								return
							}
						}
					default:
						s.notFound(w, r)
						return
					}
				}
			case "repository_invitations": // -> 190
				// Edge: 190, path: "repository_invitations".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["invitation_id"] = string(elem)
					// DELETE /user/repository_invitations/{invitation_id}
					s.handleReposDeclineInvitationRequest(args, w, r)
					return
				}
			case "keys": // -> 247
				// Edge: 247, path: "keys".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["key_id"] = string(elem)
					// DELETE /user/keys/{key_id}
					s.handleUsersDeletePublicSSHKeyForAuthenticatedRequest(args, w, r)
					return
				}
			case "blocks": // -> 249
				// Edge: 249, path: "blocks".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["username"] = string(elem)
					// DELETE /user/blocks/{username}
					s.handleUsersUnblockRequest(args, w, r)
					return
				}
			case "following": // -> 251
				// Edge: 251, path: "following".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["username"] = string(elem)
					// DELETE /user/following/{username}
					s.handleUsersUnfollowRequest(args, w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "app": // -> 49
			// Edge: 49, path: "app".
			elem, p = nextElem(p)
			switch string(elem) {
			case "installations": // -> 50
				// Edge: 50, path: "installations".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["installation_id"] = string(elem)
					// Edge: 51, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "suspended": // -> 58
						// DELETE /app/installations/{installation_id}/suspended
						s.handleAppsUnsuspendInstallationRequest(args, w, r)
						return
					default:
						// DELETE /app/installations/{installation_id}.
						s.handleAppsDeleteInstallationRequest(args, w, r)
						return
					}
				}
			default:
				s.notFound(w, r)
				return
			}
		case "installation": // -> 56
			// Edge: 56, path: "installation".
			elem, p = nextElem(p)
			switch string(elem) {
			case "token": // -> 57
				// DELETE /installation/token
				s.handleAppsRevokeInstallationAccessTokenRequest(args, w, r)
				return
			default:
				s.notFound(w, r)
				return
			}
		case "scim": // -> 62
			// Edge: 62, path: "scim".
			elem, p = nextElem(p)
			switch string(elem) {
			case "v2": // -> 63
				// Edge: 63, path: "v2".
				elem, p = nextElem(p)
				switch string(elem) {
				case "enterprises": // -> 64
					// Edge: 64, path: "enterprises".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["enterprise"] = string(elem)
						// Edge: 65, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "Groups": // -> 66
							// Edge: 66, path: "Groups".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["scim_group_id"] = string(elem)
								// DELETE /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}
								s.handleEnterpriseAdminDeleteScimGroupFromEnterpriseRequest(args, w, r)
								return
							}
						case "Users": // -> 75
							// Edge: 75, path: "Users".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["scim_user_id"] = string(elem)
								// DELETE /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
								s.handleEnterpriseAdminDeleteUserFromEnterpriseRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				case "organizations": // -> 221
					// Edge: 221, path: "organizations".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["org"] = string(elem)
						// Edge: 222, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "Users": // -> 223
							// Edge: 223, path: "Users".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["scim_user_id"] = string(elem)
								// DELETE /scim/v2/organizations/{org}/Users/{scim_user_id}
								s.handleScimDeleteUserFromOrgRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "enterprises": // -> 68
			// Edge: 68, path: "enterprises".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["enterprise"] = string(elem)
				// Edge: 69, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "actions": // -> 70
					// Edge: 70, path: "actions".
					elem, p = nextElem(p)
					switch string(elem) {
					case "runners": // -> 71
						// Edge: 71, path: "runners".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_id"] = string(elem)
							// DELETE /enterprises/{enterprise}/actions/runners/{runner_id}
							s.handleEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest(args, w, r)
							return
						}
					case "runner-groups": // -> 73
						// Edge: 73, path: "runner-groups".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_group_id"] = string(elem)
							// Edge: 74, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "organizations": // -> 80
								// Edge: 80, path: "organizations".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["org_id"] = string(elem)
									// DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
									s.handleEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(args, w, r)
									return
								}
							case "runners": // -> 82
								// Edge: 82, path: "runners".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["runner_id"] = string(elem)
									// DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
									s.handleEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest(args, w, r)
									return
								}
							default:
								// DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}.
								s.handleEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest(args, w, r)
								return
							}
						}
					case "permissions": // -> 77
						// Edge: 77, path: "permissions".
						elem, p = nextElem(p)
						switch string(elem) {
						case "organizations": // -> 78
							// Edge: 78, path: "organizations".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["org_id"] = string(elem)
								// DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}
								s.handleEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "gists": // -> 84
			// Edge: 84, path: "gists".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["gist_id"] = string(elem)
				// Edge: 85, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "comments": // -> 86
					// Edge: 86, path: "comments".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["comment_id"] = string(elem)
						// DELETE /gists/{gist_id}/comments/{comment_id}
						s.handleGistsDeleteCommentRequest(args, w, r)
						return
					}
				case "star": // -> 88
					// DELETE /gists/{gist_id}/star
					s.handleGistsUnstarRequest(args, w, r)
					return
				default:
					// DELETE /gists/{gist_id}.
					s.handleGistsDeleteRequest(args, w, r)
					return
				}
			}
		case "authorizations": // -> 117
			// Edge: 117, path: "authorizations".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["authorization_id"] = string(elem)
				// DELETE /authorizations/{authorization_id}
				s.handleOAuthAuthorizationsDeleteAuthorizationRequest(args, w, r)
				return
			}
		case "applications": // -> 119
			// Edge: 119, path: "applications".
			elem, p = nextElem(p)
			switch string(elem) {
			case "grants": // -> 120
				// Edge: 120, path: "grants".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["grant_id"] = string(elem)
					// DELETE /applications/grants/{grant_id}
					s.handleOAuthAuthorizationsDeleteGrantRequest(args, w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "users": // -> 144
			// Edge: 144, path: "users".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["username"] = string(elem)
				// Edge: 145, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "packages": // -> 146
					// Edge: 146, path: "packages".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["package_type"] = string(elem)
						// Edge: 147, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "": // -> 148
							// Edge: 148, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["package_name"] = string(elem)
								// Edge: 149, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "versions": // -> 154
									// Edge: 154, path: "versions".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["package_version_id"] = string(elem)
										// DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}
										s.handlePackagesDeletePackageVersionForUserRequest(args, w, r)
										return
									}
								default:
									// DELETE /users/{username}/packages/{package_type}/{package_name}.
									s.handlePackagesDeletePackageForUserRequest(args, w, r)
									return
								}
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "projects": // -> 156
			// Edge: 156, path: "projects".
			elem, p = nextElem(p)
			switch string(elem) {
			case "columns": // -> 158
				// Edge: 158, path: "columns".
				elem, p = nextElem(p)
				switch string(elem) {
				case "cards": // -> 159
					// Edge: 159, path: "cards".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["card_id"] = string(elem)
						// DELETE /projects/columns/cards/{card_id}
						s.handleProjectsDeleteCardRequest(args, w, r)
						return
					}
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["column_id"] = string(elem)
					// DELETE /projects/columns/{column_id}
					s.handleProjectsDeleteColumnRequest(args, w, r)
					return
				}
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["project_id"] = string(elem)
				// DELETE /projects/{project_id}
				s.handleProjectsDeleteRequest(args, w, r)
				return
			}
		case "reactions": // -> 188
			// Edge: 188, path: "reactions".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["reaction_id"] = string(elem)
				// DELETE /reactions/{reaction_id}
				s.handleReactionsDeleteLegacyRequest(args, w, r)
				return
			}
		case "teams": // -> 225
			// Edge: 225, path: "teams".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["team_id"] = string(elem)
				// Edge: 226, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "discussions": // -> 227
					// Edge: 227, path: "discussions".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["discussion_number"] = string(elem)
						// Edge: 228, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "comments": // -> 229
							// Edge: 229, path: "comments".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["comment_number"] = string(elem)
								// DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
								s.handleTeamsDeleteDiscussionCommentLegacyRequest(args, w, r)
								return
							}
						default:
							// DELETE /teams/{team_id}/discussions/{discussion_number}.
							s.handleTeamsDeleteDiscussionLegacyRequest(args, w, r)
							return
						}
					}
				case "members": // -> 231
					// Edge: 231, path: "members".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// DELETE /teams/{team_id}/members/{username}
						s.handleTeamsRemoveMemberLegacyRequest(args, w, r)
						return
					}
				case "memberships": // -> 235
					// Edge: 235, path: "memberships".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// DELETE /teams/{team_id}/memberships/{username}
						s.handleTeamsRemoveMembershipForUserLegacyRequest(args, w, r)
						return
					}
				case "repos": // -> 243
					// Edge: 243, path: "repos".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["owner"] = string(elem)
						// Edge: 244, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "": // -> 245
							// Edge: 245, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["repo"] = string(elem)
								// DELETE /teams/{team_id}/repos/{owner}/{repo}
								s.handleTeamsRemoveRepoLegacyRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		default:
			s.notFound(w, r)
			return
		}
	case "GET":
		// Root edge.
		elem, p = nextElem(p)
		switch string(elem) {
		case "repos": // -> 1
			// Edge: 1, path: "repos".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["owner"] = string(elem)
				// Edge: 2, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "": // -> 3
					// Edge: 3, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["repo"] = string(elem)
						// Edge: 4, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "actions": // -> 5
							// Edge: 5, path: "actions".
							elem, p = nextElem(p)
							switch string(elem) {
							case "artifacts": // -> 6
								// Edge: 6, path: "artifacts".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["artifact_id"] = string(elem)
									// Edge: 7, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									case "": // -> 8
										// Edge: 8, path: "".
										elem, p = nextElem(p)
										switch string(elem) {
										default:
											if args == nil {
												args = make(map[string]string)
											}
											args["archive_format"] = string(elem)
											// GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}
											s.handleActionsDownloadArtifactRequest(args, w, r)
											return
										}
									default:
										// GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}.
										s.handleActionsGetArtifactRequest(args, w, r)
										return
									}
								}
							case "jobs": // -> 10
								// Edge: 10, path: "jobs".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["job_id"] = string(elem)
									// Edge: 11, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									case "logs": // -> 12
										// GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs
										s.handleActionsDownloadJobLogsForWorkflowRunRequest(args, w, r)
										return
									default:
										// GET /repos/{owner}/{repo}/actions/jobs/{job_id}.
										s.handleActionsGetJobForWorkflowRunRequest(args, w, r)
										return
									}
								}
							case "runs": // -> 13
								// Edge: 13, path: "runs".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["run_id"] = string(elem)
									// Edge: 14, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									case "logs": // -> 15
										// GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs
										s.handleActionsDownloadWorkflowRunLogsRequest(args, w, r)
										return
									case "approvals": // -> 36
										// GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals
										s.handleActionsGetReviewsForRunRequest(args, w, r)
										return
									case "timing": // -> 43
										// GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing
										s.handleActionsGetWorkflowRunUsageRequest(args, w, r)
										return
									case "jobs": // -> 44
										// GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs
										s.handleActionsListJobsForWorkflowRunRequest(args, w, r)
										return
									case "artifacts": // -> 52
										// GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts
										s.handleActionsListWorkflowRunArtifactsRequest(args, w, r)
										return
									default:
										// GET /repos/{owner}/{repo}/actions/runs/{run_id}.
										s.handleActionsGetWorkflowRunRequest(args, w, r)
										return
									}
								}
							case "permissions": // -> 21
								// Edge: 21, path: "permissions".
								elem, p = nextElem(p)
								switch string(elem) {
								case "selected-actions": // -> 22
									// GET /repos/{owner}/{repo}/actions/permissions/selected-actions
									s.handleActionsGetAllowedActionsRepositoryRequest(args, w, r)
									return
								default:
									// GET /repos/{owner}/{repo}/actions/permissions.
									s.handleActionsGetGithubActionsPermissionsRepositoryRequest(args, w, r)
									return
								}
							case "secrets": // -> 33
								// Edge: 33, path: "secrets".
								elem, p = nextElem(p)
								switch string(elem) {
								case "public-key": // -> 34
									// GET /repos/{owner}/{repo}/actions/secrets/public-key
									s.handleActionsGetRepoPublicKeyRequest(args, w, r)
									return
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["secret_name"] = string(elem)
									// GET /repos/{owner}/{repo}/actions/secrets/{secret_name}
									s.handleActionsGetRepoSecretRequest(args, w, r)
									return
								}
							case "runners": // -> 39
								// Edge: 39, path: "runners".
								elem, p = nextElem(p)
								switch string(elem) {
								case "downloads": // -> 48
									// GET /repos/{owner}/{repo}/actions/runners/downloads
									s.handleActionsListRunnerApplicationsForRepoRequest(args, w, r)
									return
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["runner_id"] = string(elem)
									// GET /repos/{owner}/{repo}/actions/runners/{runner_id}
									s.handleActionsGetSelfHostedRunnerForRepoRequest(args, w, r)
									return
								}
							case "workflows": // -> 46
								// GET /repos/{owner}/{repo}/actions/workflows
								s.handleActionsListRepoWorkflowsRequest(args, w, r)
								return
							default:
								s.notFound(w, r)
								return
							}
						case "subscription": // -> 59
							// GET /repos/{owner}/{repo}/subscription
							s.handleActivityGetRepoSubscriptionRequest(args, w, r)
							return
						case "events": // -> 79
							// GET /repos/{owner}/{repo}/events
							s.handleActivityListRepoEventsRequest(args, w, r)
							return
						case "notifications": // -> 80
							// GET /repos/{owner}/{repo}/notifications
							s.handleActivityListRepoNotificationsForAuthenticatedUserRequest(args, w, r)
							return
						case "subscribers": // -> 83
							// GET /repos/{owner}/{repo}/subscribers
							s.handleActivityListWatchersForRepoRequest(args, w, r)
							return
						case "check-runs": // -> 123
							// Edge: 123, path: "check-runs".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["check_run_id"] = string(elem)
								// Edge: 124, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "annotations": // -> 127
									// GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations
									s.handleChecksListAnnotationsRequest(args, w, r)
									return
								default:
									// GET /repos/{owner}/{repo}/check-runs/{check_run_id}.
									s.handleChecksGetRequest(args, w, r)
									return
								}
							}
						case "check-suites": // -> 125
							// Edge: 125, path: "check-suites".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["check_suite_id"] = string(elem)
								// Edge: 126, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "check-runs": // -> 131
									// GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs
									s.handleChecksListForSuiteRequest(args, w, r)
									return
								default:
									// GET /repos/{owner}/{repo}/check-suites/{check_suite_id}.
									s.handleChecksGetSuiteRequest(args, w, r)
									return
								}
							}
						case "commits": // -> 128
							// Edge: 128, path: "commits".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["ref"] = string(elem)
								// Edge: 129, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "check-runs": // -> 130
									// GET /repos/{owner}/{repo}/commits/{ref}/check-runs
									s.handleChecksListForRefRequest(args, w, r)
									return
								case "check-suites": // -> 132
									// GET /repos/{owner}/{repo}/commits/{ref}/check-suites
									s.handleChecksListSuitesForRefRequest(args, w, r)
									return
								case "status": // -> 331
									// GET /repos/{owner}/{repo}/commits/{ref}/status
									s.handleReposGetCombinedStatusForRefRequest(args, w, r)
									return
								case "comments": // -> 367
									// GET /repos/{owner}/{repo}/commits/{commit_sha}/comments
									s.handleReposListCommentsForCommitRequest(args, w, r)
									return
								case "statuses": // -> 368
									// GET /repos/{owner}/{repo}/commits/{ref}/statuses
									s.handleReposListCommitStatusesForRefRequest(args, w, r)
									return
								case "pulls": // -> 376
									// GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls
									s.handleReposListPullRequestsAssociatedWithCommitRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							}
						case "code-scanning": // -> 133
							// Edge: 133, path: "code-scanning".
							elem, p = nextElem(p)
							switch string(elem) {
							case "alerts": // -> 134
								// Edge: 134, path: "alerts".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["alert_number"] = string(elem)
									// Edge: 135, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									case "instances": // -> 140
										// GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances
										s.handleCodeScanningListAlertInstancesRequest(args, w, r)
										return
									default:
										// GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}.
										s.handleCodeScanningGetAlertRequest(args, w, r)
										return
									}
								}
							case "analyses": // -> 136
								// Edge: 136, path: "analyses".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["analysis_id"] = string(elem)
									// GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
									s.handleCodeScanningGetAnalysisRequest(args, w, r)
									return
								}
							case "sarifs": // -> 138
								// Edge: 138, path: "sarifs".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["sarif_id"] = string(elem)
									// GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}
									s.handleCodeScanningGetSarifRequest(args, w, r)
									return
								}
							default:
								s.notFound(w, r)
								return
							}
						case "git": // -> 172
							// Edge: 172, path: "git".
							elem, p = nextElem(p)
							switch string(elem) {
							case "commits": // -> 173
								// Edge: 173, path: "commits".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["commit_sha"] = string(elem)
									// GET /repos/{owner}/{repo}/git/commits/{commit_sha}
									s.handleGitGetCommitRequest(args, w, r)
									return
								}
							case "ref": // -> 175
								// Edge: 175, path: "ref".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["ref"] = string(elem)
									// GET /repos/{owner}/{repo}/git/ref/{ref}
									s.handleGitGetRefRequest(args, w, r)
									return
								}
							case "tags": // -> 177
								// Edge: 177, path: "tags".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["tag_sha"] = string(elem)
									// GET /repos/{owner}/{repo}/git/tags/{tag_sha}
									s.handleGitGetTagRequest(args, w, r)
									return
								}
							case "matching-refs": // -> 179
								// Edge: 179, path: "matching-refs".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["ref"] = string(elem)
									// GET /repos/{owner}/{repo}/git/matching-refs/{ref}
									s.handleGitListMatchingRefsRequest(args, w, r)
									return
								}
							default:
								s.notFound(w, r)
								return
							}
						case "assignees": // -> 184
							// Edge: 184, path: "assignees".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["assignee"] = string(elem)
								// GET /repos/{owner}/{repo}/assignees/{assignee}
								s.handleIssuesCheckUserCanBeAssignedRequest(args, w, r)
								return
							}
						case "issues": // -> 186
							// Edge: 186, path: "issues".
							elem, p = nextElem(p)
							switch string(elem) {
							case "comments": // -> 187
								// Edge: 187, path: "comments".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["comment_id"] = string(elem)
									// Edge: 188, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									case "reactions": // -> 288
										// GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
										s.handleReactionsListForIssueCommentRequest(args, w, r)
										return
									default:
										// GET /repos/{owner}/{repo}/issues/comments/{comment_id}.
										s.handleIssuesGetCommentRequest(args, w, r)
										return
									}
								}
							case "events": // -> 189
								// Edge: 189, path: "events".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["event_id"] = string(elem)
									// GET /repos/{owner}/{repo}/issues/events/{event_id}
									s.handleIssuesGetEventRequest(args, w, r)
									return
								}
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["issue_number"] = string(elem)
								// Edge: 195, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "comments": // -> 196
									// GET /repos/{owner}/{repo}/issues/{issue_number}/comments
									s.handleIssuesListCommentsRequest(args, w, r)
									return
								case "labels": // -> 198
									// GET /repos/{owner}/{repo}/issues/{issue_number}/labels
									s.handleIssuesListLabelsOnIssueRequest(args, w, r)
									return
								case "reactions": // -> 287
									// GET /repos/{owner}/{repo}/issues/{issue_number}/reactions
									s.handleReactionsListForIssueRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							}
						case "labels": // -> 191
							// Edge: 191, path: "labels".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["name"] = string(elem)
								// GET /repos/{owner}/{repo}/labels/{name}
								s.handleIssuesGetLabelRequest(args, w, r)
								return
							}
						case "milestones": // -> 193
							// Edge: 193, path: "milestones".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["milestone_number"] = string(elem)
								// Edge: 194, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "labels": // -> 197
									// GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels
									s.handleIssuesListLabelsForMilestoneRequest(args, w, r)
									return
								default:
									// GET /repos/{owner}/{repo}/milestones/{milestone_number}.
									s.handleIssuesGetMilestoneRequest(args, w, r)
									return
								}
							}
						case "license": // -> 201
							// GET /repos/{owner}/{repo}/license
							s.handleLicensesGetForRepoRequest(args, w, r)
							return
						case "import": // -> 210
							// Edge: 210, path: "import".
							elem, p = nextElem(p)
							switch string(elem) {
							case "authors": // -> 211
								// GET /repos/{owner}/{repo}/import/authors
								s.handleMigrationsGetCommitAuthorsRequest(args, w, r)
								return
							case "large_files": // -> 212
								// GET /repos/{owner}/{repo}/import/large_files
								s.handleMigrationsGetLargeFilesRequest(args, w, r)
								return
							default:
								// GET /repos/{owner}/{repo}/import.
								s.handleMigrationsGetImportStatusRequest(args, w, r)
								return
							}
						case "projects": // -> 271
							// GET /repos/{owner}/{repo}/projects
							s.handleProjectsListForRepoRequest(args, w, r)
							return
						case "pulls": // -> 272
							// Edge: 272, path: "pulls".
							elem, p = nextElem(p)
							switch string(elem) {
							case "comments": // -> 277
								// Edge: 277, path: "comments".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["comment_id"] = string(elem)
									// Edge: 278, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									case "reactions": // -> 289
										// GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
										s.handleReactionsListForPullRequestReviewCommentRequest(args, w, r)
										return
									default:
										// GET /repos/{owner}/{repo}/pulls/comments/{comment_id}.
										s.handlePullsGetReviewCommentRequest(args, w, r)
										return
									}
								}
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["pull_number"] = string(elem)
								// Edge: 273, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "merge": // -> 274
									// GET /repos/{owner}/{repo}/pulls/{pull_number}/merge
									s.handlePullsCheckIfMergedRequest(args, w, r)
									return
								case "reviews": // -> 275
									// Edge: 275, path: "reviews".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["review_id"] = string(elem)
										// Edge: 276, path: "".
										elem, p = nextElem(p)
										switch string(elem) {
										case "comments": // -> 279
											// GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments
											s.handlePullsListCommentsForReviewRequest(args, w, r)
											return
										default:
											// GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}.
											s.handlePullsGetReviewRequest(args, w, r)
											return
										}
									}
								case "commits": // -> 280
									// GET /repos/{owner}/{repo}/pulls/{pull_number}/commits
									s.handlePullsListCommitsRequest(args, w, r)
									return
								case "requested_reviewers": // -> 281
									// GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
									s.handlePullsListRequestedReviewersRequest(args, w, r)
									return
								case "comments": // -> 282
									// GET /repos/{owner}/{repo}/pulls/{pull_number}/comments
									s.handlePullsListReviewCommentsRequest(args, w, r)
									return
								default:
									// GET /repos/{owner}/{repo}/pulls/{pull_number}.
									s.handlePullsGetRequest(args, w, r)
									return
								}
							}
						case "comments": // -> 284
							// Edge: 284, path: "comments".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["comment_id"] = string(elem)
								// Edge: 285, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "reactions": // -> 286
									// GET /repos/{owner}/{repo}/comments/{comment_id}/reactions
									s.handleReactionsListForCommitCommentRequest(args, w, r)
									return
								default:
									// GET /repos/{owner}/{repo}/comments/{comment_id}.
									s.handleReposGetCommitCommentRequest(args, w, r)
									return
								}
							}
						case "collaborators": // -> 306
							// Edge: 306, path: "collaborators".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["username"] = string(elem)
								// Edge: 307, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "permission": // -> 330
									// GET /repos/{owner}/{repo}/collaborators/{username}/permission
									s.handleReposGetCollaboratorPermissionLevelRequest(args, w, r)
									return
								default:
									// GET /repos/{owner}/{repo}/collaborators/{username}.
									s.handleReposCheckCollaboratorRequest(args, w, r)
									return
								}
							}
						case "vulnerability-alerts": // -> 308
							// GET /repos/{owner}/{repo}/vulnerability-alerts
							s.handleReposCheckVulnerabilityAlertsRequest(args, w, r)
							return
						case "compare": // -> 309
							// Edge: 309, path: "compare".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["basehead"] = string(elem)
								// GET /repos/{owner}/{repo}/compare/{basehead}
								s.handleReposCompareCommitsRequest(args, w, r)
								return
							}
						case "tarball": // -> 311
							// Edge: 311, path: "tarball".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["ref"] = string(elem)
								// GET /repos/{owner}/{repo}/tarball/{ref}
								s.handleReposDownloadTarballArchiveRequest(args, w, r)
								return
							}
						case "zipball": // -> 313
							// Edge: 313, path: "zipball".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["ref"] = string(elem)
								// GET /repos/{owner}/{repo}/zipball/{ref}
								s.handleReposDownloadZipballArchiveRequest(args, w, r)
								return
							}
						case "branches": // -> 315
							// Edge: 315, path: "branches".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["branch"] = string(elem)
								// Edge: 316, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "protection": // -> 317
									// Edge: 317, path: "protection".
									elem, p = nextElem(p)
									switch string(elem) {
									case "restrictions": // -> 318
										// Edge: 318, path: "restrictions".
										elem, p = nextElem(p)
										switch string(elem) {
										case "apps": // -> 323
											// GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
											s.handleReposGetAppsWithAccessToProtectedBranchRequest(args, w, r)
											return
										case "teams": // -> 358
											// GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
											s.handleReposGetTeamsWithAccessToProtectedBranchRequest(args, w, r)
											return
										case "users": // -> 362
											// GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
											s.handleReposGetUsersWithAccessToProtectedBranchRequest(args, w, r)
											return
										default:
											// GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions.
											s.handleReposGetAccessRestrictionsRequest(args, w, r)
											return
										}
									case "enforce_admins": // -> 319
										// GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
										s.handleReposGetAdminBranchProtectionRequest(args, w, r)
										return
									case "required_status_checks": // -> 320
										// Edge: 320, path: "required_status_checks".
										elem, p = nextElem(p)
										switch string(elem) {
										case "contexts": // -> 321
											// GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
											s.handleReposGetAllStatusCheckContextsRequest(args, w, r)
											return
										default:
											// GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks.
											s.handleReposGetStatusChecksProtectionRequest(args, w, r)
											return
										}
									case "required_signatures": // -> 333
										// GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
										s.handleReposGetCommitSignatureProtectionRequest(args, w, r)
										return
									case "required_pull_request_reviews": // -> 351
										// GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
										s.handleReposGetPullRequestReviewProtectionRequest(args, w, r)
										return
									default:
										// GET /repos/{owner}/{repo}/branches/{branch}/protection.
										s.handleReposGetBranchProtectionRequest(args, w, r)
										return
									}
								default:
									// GET /repos/{owner}/{repo}/branches/{branch}.
									s.handleReposGetBranchRequest(args, w, r)
									return
								}
							}
						case "topics": // -> 322
							// GET /repos/{owner}/{repo}/topics
							s.handleReposGetAllTopicsRequest(args, w, r)
							return
						case "autolinks": // -> 324
							// Edge: 324, path: "autolinks".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["autolink_id"] = string(elem)
								// GET /repos/{owner}/{repo}/autolinks/{autolink_id}
								s.handleReposGetAutolinkRequest(args, w, r)
								return
							}
						case "traffic": // -> 326
							// Edge: 326, path: "traffic".
							elem, p = nextElem(p)
							switch string(elem) {
							case "clones": // -> 327
								// GET /repos/{owner}/{repo}/traffic/clones
								s.handleReposGetClonesRequest(args, w, r)
								return
							case "popular": // -> 359
								// Edge: 359, path: "popular".
								elem, p = nextElem(p)
								switch string(elem) {
								case "paths": // -> 360
									// GET /repos/{owner}/{repo}/traffic/popular/paths
									s.handleReposGetTopPathsRequest(args, w, r)
									return
								case "referrers": // -> 361
									// GET /repos/{owner}/{repo}/traffic/popular/referrers
									s.handleReposGetTopReferrersRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							case "views": // -> 363
								// GET /repos/{owner}/{repo}/traffic/views
								s.handleReposGetViewsRequest(args, w, r)
								return
							default:
								s.notFound(w, r)
								return
							}
						case "stats": // -> 328
							// Edge: 328, path: "stats".
							elem, p = nextElem(p)
							switch string(elem) {
							case "code_frequency": // -> 329
								// GET /repos/{owner}/{repo}/stats/code_frequency
								s.handleReposGetCodeFrequencyStatsRequest(args, w, r)
								return
							case "commit_activity": // -> 332
								// GET /repos/{owner}/{repo}/stats/commit_activity
								s.handleReposGetCommitActivityStatsRequest(args, w, r)
								return
							case "contributors": // -> 336
								// GET /repos/{owner}/{repo}/stats/contributors
								s.handleReposGetContributorsStatsRequest(args, w, r)
								return
							case "participation": // -> 350
								// GET /repos/{owner}/{repo}/stats/participation
								s.handleReposGetParticipationStatsRequest(args, w, r)
								return
							case "punch_card": // -> 352
								// GET /repos/{owner}/{repo}/stats/punch_card
								s.handleReposGetPunchCardStatsRequest(args, w, r)
								return
							default:
								s.notFound(w, r)
								return
							}
						case "community": // -> 334
							// Edge: 334, path: "community".
							elem, p = nextElem(p)
							switch string(elem) {
							case "profile": // -> 335
								// GET /repos/{owner}/{repo}/community/profile
								s.handleReposGetCommunityProfileMetricsRequest(args, w, r)
								return
							default:
								s.notFound(w, r)
								return
							}
						case "keys": // -> 337
							// Edge: 337, path: "keys".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["key_id"] = string(elem)
								// GET /repos/{owner}/{repo}/keys/{key_id}
								s.handleReposGetDeployKeyRequest(args, w, r)
								return
							}
						case "deployments": // -> 339
							// Edge: 339, path: "deployments".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["deployment_id"] = string(elem)
								// Edge: 340, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "statuses": // -> 341
									// Edge: 341, path: "statuses".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["status_id"] = string(elem)
										// GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}
										s.handleReposGetDeploymentStatusRequest(args, w, r)
										return
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						case "pages": // -> 343
							// Edge: 343, path: "pages".
							elem, p = nextElem(p)
							switch string(elem) {
							case "builds": // -> 344
								// Edge: 344, path: "builds".
								elem, p = nextElem(p)
								switch string(elem) {
								case "latest": // -> 345
									// GET /repos/{owner}/{repo}/pages/builds/latest
									s.handleReposGetLatestPagesBuildRequest(args, w, r)
									return
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["build_id"] = string(elem)
									// GET /repos/{owner}/{repo}/pages/builds/{build_id}
									s.handleReposGetPagesBuildRequest(args, w, r)
									return
								}
							case "health": // -> 349
								// GET /repos/{owner}/{repo}/pages/health
								s.handleReposGetPagesHealthCheckRequest(args, w, r)
								return
							default:
								// GET /repos/{owner}/{repo}/pages.
								s.handleReposGetPagesRequest(args, w, r)
								return
							}
						case "releases": // -> 346
							// Edge: 346, path: "releases".
							elem, p = nextElem(p)
							switch string(elem) {
							case "latest": // -> 347
								// GET /repos/{owner}/{repo}/releases/latest
								s.handleReposGetLatestReleaseRequest(args, w, r)
								return
							case "assets": // -> 354
								// Edge: 354, path: "assets".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["asset_id"] = string(elem)
									// GET /repos/{owner}/{repo}/releases/assets/{asset_id}
									s.handleReposGetReleaseAssetRequest(args, w, r)
									return
								}
							case "tags": // -> 356
								// Edge: 356, path: "tags".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["tag"] = string(elem)
									// GET /repos/{owner}/{repo}/releases/tags/{tag}
									s.handleReposGetReleaseByTagRequest(args, w, r)
									return
								}
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["release_id"] = string(elem)
								// Edge: 353, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "assets": // -> 377
									// GET /repos/{owner}/{repo}/releases/{release_id}/assets
									s.handleReposListReleaseAssetsRequest(args, w, r)
									return
								default:
									// GET /repos/{owner}/{repo}/releases/{release_id}.
									s.handleReposGetReleaseRequest(args, w, r)
									return
								}
							}
						case "hooks": // -> 364
							// Edge: 364, path: "hooks".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["hook_id"] = string(elem)
								// Edge: 365, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "config": // -> 366
									// GET /repos/{owner}/{repo}/hooks/{hook_id}/config
									s.handleReposGetWebhookConfigForRepoRequest(args, w, r)
									return
								default:
									// GET /repos/{owner}/{repo}/hooks/{hook_id}.
									s.handleReposGetWebhookRequest(args, w, r)
									return
								}
							}
						case "contributors": // -> 369
							// GET /repos/{owner}/{repo}/contributors
							s.handleReposListContributorsRequest(args, w, r)
							return
						case "forks": // -> 372
							// GET /repos/{owner}/{repo}/forks
							s.handleReposListForksRequest(args, w, r)
							return
						case "invitations": // -> 373
							// GET /repos/{owner}/{repo}/invitations
							s.handleReposListInvitationsRequest(args, w, r)
							return
						case "languages": // -> 375
							// GET /repos/{owner}/{repo}/languages
							s.handleReposListLanguagesRequest(args, w, r)
							return
						case "tags": // -> 378
							// GET /repos/{owner}/{repo}/tags
							s.handleReposListTagsRequest(args, w, r)
							return
						case "teams": // -> 379
							// GET /repos/{owner}/{repo}/teams
							s.handleReposListTeamsRequest(args, w, r)
							return
						case "secret-scanning": // -> 383
							// Edge: 383, path: "secret-scanning".
							elem, p = nextElem(p)
							switch string(elem) {
							case "alerts": // -> 384
								// Edge: 384, path: "alerts".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["alert_number"] = string(elem)
									// GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
									s.handleSecretScanningGetAlertRequest(args, w, r)
									return
								}
							default:
								s.notFound(w, r)
								return
							}
						default:
							// GET /repos/{owner}/{repo}.
							s.handleReposGetRequest(args, w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "orgs": // -> 16
			// Edge: 16, path: "orgs".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["org"] = string(elem)
				// Edge: 17, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "actions": // -> 18
					// Edge: 18, path: "actions".
					elem, p = nextElem(p)
					switch string(elem) {
					case "permissions": // -> 19
						// Edge: 19, path: "permissions".
						elem, p = nextElem(p)
						switch string(elem) {
						case "selected-actions": // -> 20
							// GET /orgs/{org}/actions/permissions/selected-actions
							s.handleActionsGetAllowedActionsOrganizationRequest(args, w, r)
							return
						case "repositories": // -> 50
							// GET /orgs/{org}/actions/permissions/repositories
							s.handleActionsListSelectedRepositoriesEnabledGithubActionsOrganizationRequest(args, w, r)
							return
						default:
							// GET /orgs/{org}/actions/permissions.
							s.handleActionsGetGithubActionsPermissionsOrganizationRequest(args, w, r)
							return
						}
					case "secrets": // -> 30
						// Edge: 30, path: "secrets".
						elem, p = nextElem(p)
						switch string(elem) {
						case "public-key": // -> 31
							// GET /orgs/{org}/actions/secrets/public-key
							s.handleActionsGetOrgPublicKeyRequest(args, w, r)
							return
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["secret_name"] = string(elem)
							// Edge: 32, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "repositories": // -> 49
								// GET /orgs/{org}/actions/secrets/{secret_name}/repositories
								s.handleActionsListSelectedReposForOrgSecretRequest(args, w, r)
								return
							default:
								// GET /orgs/{org}/actions/secrets/{secret_name}.
								s.handleActionsGetOrgSecretRequest(args, w, r)
								return
							}
						}
					case "runners": // -> 37
						// Edge: 37, path: "runners".
						elem, p = nextElem(p)
						switch string(elem) {
						case "downloads": // -> 47
							// GET /orgs/{org}/actions/runners/downloads
							s.handleActionsListRunnerApplicationsForOrgRequest(args, w, r)
							return
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_id"] = string(elem)
							// GET /orgs/{org}/actions/runners/{runner_id}
							s.handleActionsGetSelfHostedRunnerForOrgRequest(args, w, r)
							return
						}
					case "runner-groups": // -> 41
						// Edge: 41, path: "runner-groups".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_group_id"] = string(elem)
							// Edge: 42, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "repositories": // -> 45
								// GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
								s.handleActionsListRepoAccessToSelfHostedRunnerGroupInOrgRequest(args, w, r)
								return
							case "runners": // -> 51
								// GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners
								s.handleActionsListSelfHostedRunnersInGroupForOrgRequest(args, w, r)
								return
							default:
								// GET /orgs/{org}/actions/runner-groups/{runner_group_id}.
								s.handleActionsGetSelfHostedRunnerGroupForOrgRequest(args, w, r)
								return
							}
						}
					default:
						s.notFound(w, r)
						return
					}
				case "events": // -> 76
					// GET /orgs/{org}/events
					s.handleActivityListPublicOrgEventsRequest(args, w, r)
					return
				case "settings": // -> 111
					// Edge: 111, path: "settings".
					elem, p = nextElem(p)
					switch string(elem) {
					case "billing": // -> 112
						// Edge: 112, path: "billing".
						elem, p = nextElem(p)
						switch string(elem) {
						case "actions": // -> 113
							// GET /orgs/{org}/settings/billing/actions
							s.handleBillingGetGithubActionsBillingOrgRequest(args, w, r)
							return
						case "packages": // -> 118
							// GET /orgs/{org}/settings/billing/packages
							s.handleBillingGetGithubPackagesBillingOrgRequest(args, w, r)
							return
						case "shared-storage": // -> 121
							// GET /orgs/{org}/settings/billing/shared-storage
							s.handleBillingGetSharedStorageBillingOrgRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				case "migrations": // -> 204
					// Edge: 204, path: "migrations".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["migration_id"] = string(elem)
						// Edge: 205, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "archive": // -> 206
							// GET /orgs/{org}/migrations/{migration_id}/archive
							s.handleMigrationsDownloadArchiveForOrgRequest(args, w, r)
							return
						case "repositories": // -> 213
							// GET /orgs/{org}/migrations/{migration_id}/repositories
							s.handleMigrationsListReposForOrgRequest(args, w, r)
							return
						default:
							// GET /orgs/{org}/migrations/{migration_id}.
							s.handleMigrationsGetStatusForOrgRequest(args, w, r)
							return
						}
					}
				case "blocks": // -> 220
					// Edge: 220, path: "blocks".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// GET /orgs/{org}/blocks/{username}
						s.handleOrgsCheckBlockedUserRequest(args, w, r)
						return
					}
				case "members": // -> 222
					// Edge: 222, path: "members".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// GET /orgs/{org}/members/{username}
						s.handleOrgsCheckMembershipForUserRequest(args, w, r)
						return
					}
				case "public_members": // -> 224
					// Edge: 224, path: "public_members".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// GET /orgs/{org}/public_members/{username}
						s.handleOrgsCheckPublicMembershipForUserRequest(args, w, r)
						return
					}
				case "audit-log": // -> 226
					// GET /orgs/{org}/audit-log
					s.handleOrgsGetAuditLogRequest(args, w, r)
					return
				case "memberships": // -> 230
					// Edge: 230, path: "memberships".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// GET /orgs/{org}/memberships/{username}
						s.handleOrgsGetMembershipForUserRequest(args, w, r)
						return
					}
				case "hooks": // -> 232
					// Edge: 232, path: "hooks".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["hook_id"] = string(elem)
						// Edge: 233, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "config": // -> 234
							// GET /orgs/{org}/hooks/{hook_id}/config
							s.handleOrgsGetWebhookConfigForOrgRequest(args, w, r)
							return
						default:
							// GET /orgs/{org}/hooks/{hook_id}.
							s.handleOrgsGetWebhookRequest(args, w, r)
							return
						}
					}
				case "failed_invitations": // -> 236
					// GET /orgs/{org}/failed_invitations
					s.handleOrgsListFailedInvitationsRequest(args, w, r)
					return
				case "invitations": // -> 239
					// Edge: 239, path: "invitations".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["invitation_id"] = string(elem)
						// Edge: 240, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "teams": // -> 241
							// GET /orgs/{org}/invitations/{invitation_id}/teams
							s.handleOrgsListInvitationTeamsRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					}
				case "outside_collaborators": // -> 242
					// GET /orgs/{org}/outside_collaborators
					s.handleOrgsListOutsideCollaboratorsRequest(args, w, r)
					return
				case "credential-authorizations": // -> 243
					// GET /orgs/{org}/credential-authorizations
					s.handleOrgsListSamlSSOAuthorizationsRequest(args, w, r)
					return
				case "packages": // -> 249
					// Edge: 249, path: "packages".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["package_type"] = string(elem)
						// Edge: 250, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "": // -> 251
							// Edge: 251, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["package_name"] = string(elem)
								// Edge: 252, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "versions": // -> 253
									// Edge: 253, path: "versions".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["package_version_id"] = string(elem)
										// GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
										s.handlePackagesGetPackageVersionForOrganizationRequest(args, w, r)
										return
									}
								default:
									// GET /orgs/{org}/packages/{package_type}/{package_name}.
									s.handlePackagesGetPackageForOrganizationRequest(args, w, r)
									return
								}
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				case "projects": // -> 270
					// GET /orgs/{org}/projects
					s.handleProjectsListForOrgRequest(args, w, r)
					return
				case "teams": // -> 290
					// Edge: 290, path: "teams".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["team_slug"] = string(elem)
						// Edge: 291, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "discussions": // -> 292
							// Edge: 292, path: "discussions".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["discussion_number"] = string(elem)
								// Edge: 293, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "comments": // -> 294
									// Edge: 294, path: "comments".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["comment_number"] = string(elem)
										// Edge: 295, path: "".
										elem, p = nextElem(p)
										switch string(elem) {
										case "reactions": // -> 296
											// GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
											s.handleReactionsListForTeamDiscussionCommentInOrgRequest(args, w, r)
											return
										default:
											// GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}.
											s.handleTeamsGetDiscussionCommentInOrgRequest(args, w, r)
											return
										}
									}
								case "reactions": // -> 304
									// GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
									s.handleReactionsListForTeamDiscussionInOrgRequest(args, w, r)
									return
								default:
									// GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}.
									s.handleTeamsGetDiscussionInOrgRequest(args, w, r)
									return
								}
							}
						case "projects": // -> 388
							// Edge: 388, path: "projects".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["project_id"] = string(elem)
								// GET /orgs/{org}/teams/{team_slug}/projects/{project_id}
								s.handleTeamsCheckPermissionsForProjectInOrgRequest(args, w, r)
								return
							}
						case "repos": // -> 392
							// Edge: 392, path: "repos".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["owner"] = string(elem)
								// Edge: 393, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "": // -> 394
									// Edge: 394, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["repo"] = string(elem)
										// GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
										s.handleTeamsCheckPermissionsForRepoInOrgRequest(args, w, r)
										return
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						case "memberships": // -> 402
							// Edge: 402, path: "memberships".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["username"] = string(elem)
								// GET /orgs/{org}/teams/{team_slug}/memberships/{username}
								s.handleTeamsGetMembershipForUserInOrgRequest(args, w, r)
								return
							}
						case "teams": // -> 406
							// GET /orgs/{org}/teams/{team_slug}/teams
							s.handleTeamsListChildInOrgRequest(args, w, r)
							return
						case "team-sync": // -> 412
							// Edge: 412, path: "team-sync".
							elem, p = nextElem(p)
							switch string(elem) {
							case "group-mappings": // -> 413
								// GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings
								s.handleTeamsListIdpGroupsInOrgRequest(args, w, r)
								return
							default:
								s.notFound(w, r)
								return
							}
						case "members": // -> 414
							// GET /orgs/{org}/teams/{team_slug}/members
							s.handleTeamsListMembersInOrgRequest(args, w, r)
							return
						case "invitations": // -> 415
							// GET /orgs/{org}/teams/{team_slug}/invitations
							s.handleTeamsListPendingInvitationsInOrgRequest(args, w, r)
							return
						default:
							// GET /orgs/{org}/teams/{team_slug}.
							s.handleTeamsGetByNameRequest(args, w, r)
							return
						}
					}
				case "repos": // -> 370
					// GET /orgs/{org}/repos
					s.handleReposListForOrgRequest(args, w, r)
					return
				case "secret-scanning": // -> 386
					// Edge: 386, path: "secret-scanning".
					elem, p = nextElem(p)
					switch string(elem) {
					case "alerts": // -> 387
						// GET /orgs/{org}/secret-scanning/alerts
						s.handleSecretScanningListAlertsForOrgRequest(args, w, r)
						return
					default:
						s.notFound(w, r)
						return
					}
				case "team-sync": // -> 410
					// Edge: 410, path: "team-sync".
					elem, p = nextElem(p)
					switch string(elem) {
					case "groups": // -> 411
						// GET /orgs/{org}/team-sync/groups
						s.handleTeamsListIdpGroupsForOrgRequest(args, w, r)
						return
					default:
						s.notFound(w, r)
						return
					}
				default:
					// GET /orgs/{org}.
					s.handleOrgsGetRequest(args, w, r)
					return
				}
			}
		case "repositories": // -> 23
			// Edge: 23, path: "repositories".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["repository_id"] = string(elem)
				// Edge: 24, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "environments": // -> 25
					// Edge: 25, path: "environments".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["environment_name"] = string(elem)
						// Edge: 26, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "secrets": // -> 27
							// Edge: 27, path: "secrets".
							elem, p = nextElem(p)
							switch string(elem) {
							case "public-key": // -> 28
								// GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key
								s.handleActionsGetEnvironmentPublicKeyRequest(args, w, r)
								return
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["secret_name"] = string(elem)
								// GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
								s.handleActionsGetEnvironmentSecretRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "user": // -> 53
			// Edge: 53, path: "user".
			elem, p = nextElem(p)
			switch string(elem) {
			case "starred": // -> 54
				// Edge: 54, path: "starred".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["owner"] = string(elem)
					// Edge: 55, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "": // -> 56
						// Edge: 56, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["repo"] = string(elem)
							// GET /user/starred/{owner}/{repo}
							s.handleActivityCheckRepoIsStarredByAuthenticatedUserRequest(args, w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				}
			case "subscriptions": // -> 82
				// GET /user/subscriptions
				s.handleActivityListWatchedReposForAuthenticatedUserRequest(args, w, r)
				return
			case "installations": // -> 98
				// Edge: 98, path: "installations".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["installation_id"] = string(elem)
					// Edge: 99, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "repositories": // -> 100
						// GET /user/installations/{installation_id}/repositories
						s.handleAppsListInstallationReposForAuthenticatedUserRequest(args, w, r)
						return
					default:
						s.notFound(w, r)
						return
					}
				}
			case "marketplace_purchases": // -> 104
				// Edge: 104, path: "marketplace_purchases".
				elem, p = nextElem(p)
				switch string(elem) {
				case "stubbed": // -> 105
					// GET /user/marketplace_purchases/stubbed
					s.handleAppsListSubscriptionsForAuthenticatedUserStubbedRequest(args, w, r)
					return
				default:
					// GET /user/marketplace_purchases.
					s.handleAppsListSubscriptionsForAuthenticatedUserRequest(args, w, r)
					return
				}
			case "migrations": // -> 207
				// Edge: 207, path: "migrations".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["migration_id"] = string(elem)
					// Edge: 208, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "archive": // -> 209
						// GET /user/migrations/{migration_id}/archive
						s.handleMigrationsGetArchiveForAuthenticatedUserRequest(args, w, r)
						return
					case "repositories": // -> 214
						// GET /user/migrations/{migration_id}/repositories
						s.handleMigrationsListReposForUserRequest(args, w, r)
						return
					default:
						// GET /user/migrations/{migration_id}.
						s.handleMigrationsGetStatusForAuthenticatedUserRequest(args, w, r)
						return
					}
				}
			case "memberships": // -> 227
				// Edge: 227, path: "memberships".
				elem, p = nextElem(p)
				switch string(elem) {
				case "orgs": // -> 228
					// Edge: 228, path: "orgs".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["org"] = string(elem)
						// GET /user/memberships/orgs/{org}
						s.handleOrgsGetMembershipForAuthenticatedUserRequest(args, w, r)
						return
					}
				default:
					s.notFound(w, r)
					return
				}
			case "orgs": // -> 237
				// GET /user/orgs
				s.handleOrgsListForAuthenticatedUserRequest(args, w, r)
				return
			case "packages": // -> 244
				// Edge: 244, path: "packages".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["package_type"] = string(elem)
					// Edge: 245, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "": // -> 246
						// Edge: 246, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["package_name"] = string(elem)
							// Edge: 247, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "versions": // -> 248
								// Edge: 248, path: "versions".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["package_version_id"] = string(elem)
									// GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}
									s.handlePackagesGetPackageVersionForAuthenticatedUserRequest(args, w, r)
									return
								}
							default:
								// GET /user/packages/{package_type}/{package_name}.
								s.handlePackagesGetPackageForAuthenticatedUserRequest(args, w, r)
								return
							}
						}
					default:
						s.notFound(w, r)
						return
					}
				}
			case "repository_invitations": // -> 374
				// GET /user/repository_invitations
				s.handleReposListInvitationsForAuthenticatedUserRequest(args, w, r)
				return
			case "teams": // -> 407
				// GET /user/teams
				s.handleTeamsListForAuthenticatedUserRequest(args, w, r)
				return
			case "blocks": // -> 417
				// Edge: 417, path: "blocks".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["username"] = string(elem)
					// GET /user/blocks/{username}
					s.handleUsersCheckBlockedRequest(args, w, r)
					return
				}
			case "following": // -> 421
				// Edge: 421, path: "following".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["username"] = string(elem)
					// GET /user/following/{username}
					s.handleUsersCheckPersonIsFollowedByAuthenticatedRequest(args, w, r)
					return
				}
			case "gpg_keys": // -> 423
				// Edge: 423, path: "gpg_keys".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["gpg_key_id"] = string(elem)
					// GET /user/gpg_keys/{gpg_key_id}
					s.handleUsersGetGpgKeyForAuthenticatedRequest(args, w, r)
					return
				}
			case "keys": // -> 425
				// Edge: 425, path: "keys".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["key_id"] = string(elem)
					// GET /user/keys/{key_id}
					s.handleUsersGetPublicSSHKeyForAuthenticatedRequest(args, w, r)
					return
				}
			case "emails": // -> 427
				// GET /user/emails
				s.handleUsersListEmailsForAuthenticatedRequest(args, w, r)
				return
			case "followers": // -> 428
				// GET /user/followers
				s.handleUsersListFollowersForAuthenticatedUserRequest(args, w, r)
				return
			case "public_emails": // -> 431
				// GET /user/public_emails
				s.handleUsersListPublicEmailsForAuthenticatedRequest(args, w, r)
				return
			default:
				// GET /user.
				s.handleUsersGetAuthenticatedRequest(args, w, r)
				return
			}
		case "feeds": // -> 58
			// GET /feeds
			s.handleActivityGetFeedsRequest(args, w, r)
			return
		case "notifications": // -> 60
			// Edge: 60, path: "notifications".
			elem, p = nextElem(p)
			switch string(elem) {
			case "threads": // -> 61
				// Edge: 61, path: "threads".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["thread_id"] = string(elem)
					// Edge: 62, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "subscription": // -> 63
						// GET /notifications/threads/{thread_id}/subscription
						s.handleActivityGetThreadSubscriptionForAuthenticatedUserRequest(args, w, r)
						return
					default:
						// GET /notifications/threads/{thread_id}.
						s.handleActivityGetThreadRequest(args, w, r)
						return
					}
				}
			default:
				s.notFound(w, r)
				return
			}
		case "users": // -> 64
			// Edge: 64, path: "users".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["username"] = string(elem)
				// Edge: 65, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "events": // -> 66
					// Edge: 66, path: "events".
					elem, p = nextElem(p)
					switch string(elem) {
					case "orgs": // -> 67
						// Edge: 67, path: "orgs".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["org"] = string(elem)
							// GET /users/{username}/events/orgs/{org}
							s.handleActivityListOrgEventsForAuthenticatedUserRequest(args, w, r)
							return
						}
					case "public": // -> 75
						// GET /users/{username}/events/public
						s.handleActivityListPublicEventsForUserRequest(args, w, r)
						return
					default:
						// GET /users/{username}/events.
						s.handleActivityListEventsForAuthenticatedUserRequest(args, w, r)
						return
					}
				case "received_events": // -> 77
					// Edge: 77, path: "received_events".
					elem, p = nextElem(p)
					switch string(elem) {
					case "public": // -> 78
						// GET /users/{username}/received_events/public
						s.handleActivityListReceivedPublicEventsForUserRequest(args, w, r)
						return
					default:
						// GET /users/{username}/received_events.
						s.handleActivityListReceivedEventsForUserRequest(args, w, r)
						return
					}
				case "subscriptions": // -> 81
					// GET /users/{username}/subscriptions
					s.handleActivityListReposWatchedByUserRequest(args, w, r)
					return
				case "settings": // -> 114
					// Edge: 114, path: "settings".
					elem, p = nextElem(p)
					switch string(elem) {
					case "billing": // -> 115
						// Edge: 115, path: "billing".
						elem, p = nextElem(p)
						switch string(elem) {
						case "actions": // -> 116
							// GET /users/{username}/settings/billing/actions
							s.handleBillingGetGithubActionsBillingUserRequest(args, w, r)
							return
						case "packages": // -> 119
							// GET /users/{username}/settings/billing/packages
							s.handleBillingGetGithubPackagesBillingUserRequest(args, w, r)
							return
						case "shared-storage": // -> 122
							// GET /users/{username}/settings/billing/shared-storage
							s.handleBillingGetSharedStorageBillingUserRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				case "orgs": // -> 238
					// GET /users/{username}/orgs
					s.handleOrgsListForUserRequest(args, w, r)
					return
				case "packages": // -> 254
					// Edge: 254, path: "packages".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["package_type"] = string(elem)
						// Edge: 255, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "": // -> 256
							// Edge: 256, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["package_name"] = string(elem)
								// Edge: 257, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "versions": // -> 258
									// Edge: 258, path: "versions".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["package_version_id"] = string(elem)
										// GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}
										s.handlePackagesGetPackageVersionForUserRequest(args, w, r)
										return
									}
								default:
									// GET /users/{username}/packages/{package_type}/{package_name}.
									s.handlePackagesGetPackageForUserRequest(args, w, r)
									return
								}
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				case "repos": // -> 371
					// GET /users/{username}/repos
					s.handleReposListForUserRequest(args, w, r)
					return
				case "following": // -> 419
					// Edge: 419, path: "following".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["target_user"] = string(elem)
						// GET /users/{username}/following/{target_user}
						s.handleUsersCheckFollowingForUserRequest(args, w, r)
						return
					}
				case "followers": // -> 429
					// GET /users/{username}/followers
					s.handleUsersListFollowersForUserRequest(args, w, r)
					return
				case "gpg_keys": // -> 430
					// GET /users/{username}/gpg_keys
					s.handleUsersListGpgKeysForUserRequest(args, w, r)
					return
				case "keys": // -> 432
					// GET /users/{username}/keys
					s.handleUsersListPublicKeysForUserRequest(args, w, r)
					return
				default:
					// GET /users/{username}.
					s.handleUsersGetByUsernameRequest(args, w, r)
					return
				}
			}
		case "events": // -> 69
			// GET /events
			s.handleActivityListPublicEventsRequest(args, w, r)
			return
		case "networks": // -> 70
			// Edge: 70, path: "networks".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["owner"] = string(elem)
				// Edge: 71, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "": // -> 72
					// Edge: 72, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["repo"] = string(elem)
						// Edge: 73, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "events": // -> 74
							// GET /networks/{owner}/{repo}/events
							s.handleActivityListPublicEventsForRepoNetworkRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "app": // -> 84
			// Edge: 84, path: "app".
			elem, p = nextElem(p)
			switch string(elem) {
			case "hook": // -> 93
				// Edge: 93, path: "hook".
				elem, p = nextElem(p)
				switch string(elem) {
				case "config": // -> 94
					// GET /app/hook/config
					s.handleAppsGetWebhookConfigForAppRequest(args, w, r)
					return
				default:
					s.notFound(w, r)
					return
				}
			default:
				// GET /app.
				s.handleAppsGetAuthenticatedRequest(args, w, r)
				return
			}
		case "apps": // -> 85
			// Edge: 85, path: "apps".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["app_slug"] = string(elem)
				// GET /apps/{app_slug}
				s.handleAppsGetBySlugRequest(args, w, r)
				return
			}
		case "marketplace_listing": // -> 87
			// Edge: 87, path: "marketplace_listing".
			elem, p = nextElem(p)
			switch string(elem) {
			case "accounts": // -> 88
				// Edge: 88, path: "accounts".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["account_id"] = string(elem)
					// GET /marketplace_listing/accounts/{account_id}
					s.handleAppsGetSubscriptionPlanForAccountRequest(args, w, r)
					return
				}
			case "stubbed": // -> 90
				// Edge: 90, path: "stubbed".
				elem, p = nextElem(p)
				switch string(elem) {
				case "accounts": // -> 91
					// Edge: 91, path: "accounts".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["account_id"] = string(elem)
						// GET /marketplace_listing/stubbed/accounts/{account_id}
						s.handleAppsGetSubscriptionPlanForAccountStubbedRequest(args, w, r)
						return
					}
				case "plans": // -> 95
					// Edge: 95, path: "plans".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["plan_id"] = string(elem)
						// Edge: 96, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "accounts": // -> 97
							// GET /marketplace_listing/stubbed/plans/{plan_id}/accounts
							s.handleAppsListAccountsForPlanStubbedRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			case "plans": // -> 101
				// GET /marketplace_listing/plans
				s.handleAppsListPlansRequest(args, w, r)
				return
			default:
				s.notFound(w, r)
				return
			}
		case "installation": // -> 102
			// Edge: 102, path: "installation".
			elem, p = nextElem(p)
			switch string(elem) {
			case "repositories": // -> 103
				// GET /installation/repositories
				s.handleAppsListReposAccessibleToInstallationRequest(args, w, r)
				return
			default:
				s.notFound(w, r)
				return
			}
		case "enterprises": // -> 106
			// Edge: 106, path: "enterprises".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["enterprise"] = string(elem)
				// Edge: 107, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "settings": // -> 108
					// Edge: 108, path: "settings".
					elem, p = nextElem(p)
					switch string(elem) {
					case "billing": // -> 109
						// Edge: 109, path: "billing".
						elem, p = nextElem(p)
						switch string(elem) {
						case "actions": // -> 110
							// GET /enterprises/{enterprise}/settings/billing/actions
							s.handleBillingGetGithubActionsBillingGheRequest(args, w, r)
							return
						case "packages": // -> 117
							// GET /enterprises/{enterprise}/settings/billing/packages
							s.handleBillingGetGithubPackagesBillingGheRequest(args, w, r)
							return
						case "shared-storage": // -> 120
							// GET /enterprises/{enterprise}/settings/billing/shared-storage
							s.handleBillingGetSharedStorageBillingGheRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				case "actions": // -> 144
					// Edge: 144, path: "actions".
					elem, p = nextElem(p)
					switch string(elem) {
					case "permissions": // -> 145
						// Edge: 145, path: "permissions".
						elem, p = nextElem(p)
						switch string(elem) {
						case "selected-actions": // -> 146
							// GET /enterprises/{enterprise}/actions/permissions/selected-actions
							s.handleEnterpriseAdminGetAllowedActionsEnterpriseRequest(args, w, r)
							return
						case "organizations": // -> 162
							// GET /enterprises/{enterprise}/actions/permissions/organizations
							s.handleEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest(args, w, r)
							return
						default:
							// GET /enterprises/{enterprise}/actions/permissions.
							s.handleEnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest(args, w, r)
							return
						}
					case "runners": // -> 156
						// Edge: 156, path: "runners".
						elem, p = nextElem(p)
						switch string(elem) {
						case "downloads": // -> 161
							// GET /enterprises/{enterprise}/actions/runners/downloads
							s.handleEnterpriseAdminListRunnerApplicationsForEnterpriseRequest(args, w, r)
							return
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_id"] = string(elem)
							// GET /enterprises/{enterprise}/actions/runners/{runner_id}
							s.handleEnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest(args, w, r)
							return
						}
					case "runner-groups": // -> 158
						// Edge: 158, path: "runner-groups".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_group_id"] = string(elem)
							// Edge: 159, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "organizations": // -> 160
								// GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations
								s.handleEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(args, w, r)
								return
							case "runners": // -> 163
								// GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners
								s.handleEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest(args, w, r)
								return
							default:
								// GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}.
								s.handleEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest(args, w, r)
								return
							}
						}
					default:
						s.notFound(w, r)
						return
					}
				case "audit-log": // -> 147
					// GET /enterprises/{enterprise}/audit-log
					s.handleEnterpriseAdminGetAuditLogRequest(args, w, r)
					return
				default:
					s.notFound(w, r)
					return
				}
			}
		case "codes_of_conduct": // -> 141
			// Edge: 141, path: "codes_of_conduct".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["key"] = string(elem)
				// GET /codes_of_conduct/{key}
				s.handleCodesOfConductGetConductCodeRequest(args, w, r)
				return
			}
		case "emojis": // -> 143
			// GET /emojis
			s.handleEmojisGetRequest(args, w, r)
			return
		case "scim": // -> 148
			// Edge: 148, path: "scim".
			elem, p = nextElem(p)
			switch string(elem) {
			case "v2": // -> 149
				// Edge: 149, path: "v2".
				elem, p = nextElem(p)
				switch string(elem) {
				case "enterprises": // -> 150
					// Edge: 150, path: "enterprises".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["enterprise"] = string(elem)
						// Edge: 151, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "Groups": // -> 152
							// Edge: 152, path: "Groups".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["scim_group_id"] = string(elem)
								// GET /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}
								s.handleEnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest(args, w, r)
								return
							}
						case "Users": // -> 154
							// Edge: 154, path: "Users".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["scim_user_id"] = string(elem)
								// GET /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
								s.handleEnterpriseAdminGetProvisioningInformationForEnterpriseUserRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "gists": // -> 164
			// Edge: 164, path: "gists".
			elem, p = nextElem(p)
			switch string(elem) {
			case "starred": // -> 171
				// GET /gists/starred
				s.handleGistsListStarredRequest(args, w, r)
				return
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["gist_id"] = string(elem)
				// Edge: 165, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "star": // -> 166
					// GET /gists/{gist_id}/star
					s.handleGistsCheckIsStarredRequest(args, w, r)
					return
				case "comments": // -> 167
					// Edge: 167, path: "comments".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["comment_id"] = string(elem)
						// GET /gists/{gist_id}/comments/{comment_id}
						s.handleGistsGetCommentRequest(args, w, r)
						return
					}
				case "commits": // -> 169
					// GET /gists/{gist_id}/commits
					s.handleGistsListCommitsRequest(args, w, r)
					return
				case "forks": // -> 170
					// GET /gists/{gist_id}/forks
					s.handleGistsListForksRequest(args, w, r)
					return
				default:
					// GET /gists/{gist_id}.
					s.handleGistsGetRequest(args, w, r)
					return
				}
			}
		case "gitignore": // -> 181
			// Edge: 181, path: "gitignore".
			elem, p = nextElem(p)
			switch string(elem) {
			case "templates": // -> 182
				// Edge: 182, path: "templates".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["name"] = string(elem)
					// GET /gitignore/templates/{name}
					s.handleGitignoreGetTemplateRequest(args, w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "licenses": // -> 199
			// Edge: 199, path: "licenses".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["license"] = string(elem)
				// GET /licenses/{license}
				s.handleLicensesGetRequest(args, w, r)
				return
			}
		case "meta": // -> 202
			// GET /meta
			s.handleMetaGetRequest(args, w, r)
			return
		case "": // -> 203
			// GET /
			s.handleMetaRootRequest(args, w, r)
			return
		case "authorizations": // -> 215
			// Edge: 215, path: "authorizations".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["authorization_id"] = string(elem)
				// GET /authorizations/{authorization_id}
				s.handleOAuthAuthorizationsGetAuthorizationRequest(args, w, r)
				return
			}
		case "applications": // -> 217
			// Edge: 217, path: "applications".
			elem, p = nextElem(p)
			switch string(elem) {
			case "grants": // -> 218
				// Edge: 218, path: "grants".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["grant_id"] = string(elem)
					// GET /applications/grants/{grant_id}
					s.handleOAuthAuthorizationsGetGrantRequest(args, w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "organizations": // -> 235
			// GET /organizations
			s.handleOrgsListRequest(args, w, r)
			return
		case "projects": // -> 262
			// Edge: 262, path: "projects".
			elem, p = nextElem(p)
			switch string(elem) {
			case "columns": // -> 264
				// Edge: 264, path: "columns".
				elem, p = nextElem(p)
				switch string(elem) {
				case "cards": // -> 265
					// Edge: 265, path: "cards".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["card_id"] = string(elem)
						// GET /projects/columns/cards/{card_id}
						s.handleProjectsGetCardRequest(args, w, r)
						return
					}
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["column_id"] = string(elem)
					// Edge: 267, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "cards": // -> 268
						// GET /projects/columns/{column_id}/cards
						s.handleProjectsListCardsRequest(args, w, r)
						return
					default:
						// GET /projects/columns/{column_id}.
						s.handleProjectsGetColumnRequest(args, w, r)
						return
					}
				}
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["project_id"] = string(elem)
				// Edge: 263, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "columns": // -> 269
					// GET /projects/{project_id}/columns
					s.handleProjectsListColumnsRequest(args, w, r)
					return
				default:
					// GET /projects/{project_id}.
					s.handleProjectsGetRequest(args, w, r)
					return
				}
			}
		case "rate_limit": // -> 283
			// GET /rate_limit
			s.handleRateLimitGetRequest(args, w, r)
			return
		case "teams": // -> 297
			// Edge: 297, path: "teams".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["team_id"] = string(elem)
				// Edge: 298, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "discussions": // -> 299
					// Edge: 299, path: "discussions".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["discussion_number"] = string(elem)
						// Edge: 300, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "comments": // -> 301
							// Edge: 301, path: "comments".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["comment_number"] = string(elem)
								// Edge: 302, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "reactions": // -> 303
									// GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
									s.handleReactionsListForTeamDiscussionCommentLegacyRequest(args, w, r)
									return
								default:
									// GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}.
									s.handleTeamsGetDiscussionCommentLegacyRequest(args, w, r)
									return
								}
							}
						case "reactions": // -> 305
							// GET /teams/{team_id}/discussions/{discussion_number}/reactions
							s.handleReactionsListForTeamDiscussionLegacyRequest(args, w, r)
							return
						default:
							// GET /teams/{team_id}/discussions/{discussion_number}.
							s.handleTeamsGetDiscussionLegacyRequest(args, w, r)
							return
						}
					}
				case "projects": // -> 390
					// Edge: 390, path: "projects".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["project_id"] = string(elem)
						// GET /teams/{team_id}/projects/{project_id}
						s.handleTeamsCheckPermissionsForProjectLegacyRequest(args, w, r)
						return
					}
				case "repos": // -> 396
					// Edge: 396, path: "repos".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["owner"] = string(elem)
						// Edge: 397, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "": // -> 398
							// Edge: 398, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["repo"] = string(elem)
								// GET /teams/{team_id}/repos/{owner}/{repo}
								s.handleTeamsCheckPermissionsForRepoLegacyRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				case "members": // -> 400
					// Edge: 400, path: "members".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// GET /teams/{team_id}/members/{username}
						s.handleTeamsGetMemberLegacyRequest(args, w, r)
						return
					}
				case "memberships": // -> 404
					// Edge: 404, path: "memberships".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// GET /teams/{team_id}/memberships/{username}
						s.handleTeamsGetMembershipForUserLegacyRequest(args, w, r)
						return
					}
				case "team-sync": // -> 408
					// Edge: 408, path: "team-sync".
					elem, p = nextElem(p)
					switch string(elem) {
					case "group-mappings": // -> 409
						// GET /teams/{team_id}/team-sync/group-mappings
						s.handleTeamsListIdpGroupsForLegacyRequest(args, w, r)
						return
					default:
						s.notFound(w, r)
						return
					}
				case "invitations": // -> 416
					// GET /teams/{team_id}/invitations
					s.handleTeamsListPendingInvitationsLegacyRequest(args, w, r)
					return
				default:
					// GET /teams/{team_id}.
					s.handleTeamsGetLegacyRequest(args, w, r)
					return
				}
			}
		case "search": // -> 380
			// Edge: 380, path: "search".
			elem, p = nextElem(p)
			switch string(elem) {
			case "commits": // -> 381
				// GET /search/commits
				s.handleSearchCommitsRequest(args, w, r)
				return
			case "topics": // -> 382
				// GET /search/topics
				s.handleSearchTopicsRequest(args, w, r)
				return
			default:
				s.notFound(w, r)
				return
			}
		default:
			s.notFound(w, r)
			return
		}
	case "PATCH":
		// Root edge.
		elem, p = nextElem(p)
		switch string(elem) {
		case "orgs": // -> 1
			// Edge: 1, path: "orgs".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["org"] = string(elem)
				// Edge: 2, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "actions": // -> 3
					// Edge: 3, path: "actions".
					elem, p = nextElem(p)
					switch string(elem) {
					case "runner-groups": // -> 4
						// Edge: 4, path: "runner-groups".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_group_id"] = string(elem)
							// PATCH /orgs/{org}/actions/runner-groups/{runner_group_id}
							s.handleActionsUpdateSelfHostedRunnerGroupForOrgRequest(args, w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				case "hooks": // -> 41
					// Edge: 41, path: "hooks".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["hook_id"] = string(elem)
						// Edge: 42, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "config": // -> 43
							// PATCH /orgs/{org}/hooks/{hook_id}/config
							s.handleOrgsUpdateWebhookConfigForOrgRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					}
				case "teams": // -> 70
					// Edge: 70, path: "teams".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["team_slug"] = string(elem)
						// Edge: 71, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "team-sync": // -> 72
							// Edge: 72, path: "team-sync".
							elem, p = nextElem(p)
							switch string(elem) {
							case "group-mappings": // -> 73
								// PATCH /orgs/{org}/teams/{team_slug}/team-sync/group-mappings
								s.handleTeamsCreateOrUpdateIdpGroupConnectionsInOrgRequest(args, w, r)
								return
							default:
								s.notFound(w, r)
								return
							}
						case "discussions": // -> 74
							// Edge: 74, path: "discussions".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["discussion_number"] = string(elem)
								// Edge: 75, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "comments": // -> 76
									// Edge: 76, path: "comments".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["comment_number"] = string(elem)
										// PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
										s.handleTeamsUpdateDiscussionCommentInOrgRequest(args, w, r)
										return
									}
								default:
									// PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}.
									s.handleTeamsUpdateDiscussionInOrgRequest(args, w, r)
									return
								}
							}
						default:
							// PATCH /orgs/{org}/teams/{team_slug}.
							s.handleTeamsUpdateInOrgRequest(args, w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "notifications": // -> 6
			// Edge: 6, path: "notifications".
			elem, p = nextElem(p)
			switch string(elem) {
			case "threads": // -> 7
				// Edge: 7, path: "threads".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["thread_id"] = string(elem)
					// PATCH /notifications/threads/{thread_id}
					s.handleActivityMarkThreadAsReadRequest(args, w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "app": // -> 9
			// Edge: 9, path: "app".
			elem, p = nextElem(p)
			switch string(elem) {
			case "hook": // -> 10
				// Edge: 10, path: "hook".
				elem, p = nextElem(p)
				switch string(elem) {
				case "config": // -> 11
					// PATCH /app/hook/config
					s.handleAppsUpdateWebhookConfigForAppRequest(args, w, r)
					return
				default:
					s.notFound(w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "repos": // -> 12
			// Edge: 12, path: "repos".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["owner"] = string(elem)
				// Edge: 13, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "": // -> 14
					// Edge: 14, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["repo"] = string(elem)
						// Edge: 15, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "check-suites": // -> 16
							// Edge: 16, path: "check-suites".
							elem, p = nextElem(p)
							switch string(elem) {
							case "preferences": // -> 17
								// PATCH /repos/{owner}/{repo}/check-suites/preferences
								s.handleChecksSetSuitesPreferencesRequest(args, w, r)
								return
							default:
								s.notFound(w, r)
								return
							}
						case "code-scanning": // -> 18
							// Edge: 18, path: "code-scanning".
							elem, p = nextElem(p)
							switch string(elem) {
							case "alerts": // -> 19
								// Edge: 19, path: "alerts".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["alert_number"] = string(elem)
									// PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
									s.handleCodeScanningUpdateAlertRequest(args, w, r)
									return
								}
							default:
								s.notFound(w, r)
								return
							}
						case "labels": // -> 36
							// Edge: 36, path: "labels".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["name"] = string(elem)
								// PATCH /repos/{owner}/{repo}/labels/{name}
								s.handleIssuesUpdateLabelRequest(args, w, r)
								return
							}
						case "milestones": // -> 38
							// Edge: 38, path: "milestones".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["milestone_number"] = string(elem)
								// PATCH /repos/{owner}/{repo}/milestones/{milestone_number}
								s.handleIssuesUpdateMilestoneRequest(args, w, r)
								return
							}
						case "import": // -> 40
							// PATCH /repos/{owner}/{repo}/import
							s.handleMigrationsUpdateImportRequest(args, w, r)
							return
						case "pulls": // -> 50
							// Edge: 50, path: "pulls".
							elem, p = nextElem(p)
							switch string(elem) {
							case "comments": // -> 51
								// Edge: 51, path: "comments".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["comment_id"] = string(elem)
									// PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}
									s.handlePullsUpdateReviewCommentRequest(args, w, r)
									return
								}
							default:
								s.notFound(w, r)
								return
							}
						case "comments": // -> 56
							// Edge: 56, path: "comments".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["comment_id"] = string(elem)
								// PATCH /repos/{owner}/{repo}/comments/{comment_id}
								s.handleReposUpdateCommitCommentRequest(args, w, r)
								return
							}
						case "invitations": // -> 58
							// Edge: 58, path: "invitations".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["invitation_id"] = string(elem)
								// PATCH /repos/{owner}/{repo}/invitations/{invitation_id}
								s.handleReposUpdateInvitationRequest(args, w, r)
								return
							}
						case "releases": // -> 60
							// Edge: 60, path: "releases".
							elem, p = nextElem(p)
							switch string(elem) {
							case "assets": // -> 62
								// Edge: 62, path: "assets".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["asset_id"] = string(elem)
									// PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}
									s.handleReposUpdateReleaseAssetRequest(args, w, r)
									return
								}
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["release_id"] = string(elem)
								// PATCH /repos/{owner}/{repo}/releases/{release_id}
								s.handleReposUpdateReleaseRequest(args, w, r)
								return
							}
						case "hooks": // -> 64
							// Edge: 64, path: "hooks".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["hook_id"] = string(elem)
								// Edge: 65, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "config": // -> 66
									// PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config
									s.handleReposUpdateWebhookConfigForRepoRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							}
						case "secret-scanning": // -> 67
							// Edge: 67, path: "secret-scanning".
							elem, p = nextElem(p)
							switch string(elem) {
							case "alerts": // -> 68
								// Edge: 68, path: "alerts".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["alert_number"] = string(elem)
									// PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
									s.handleSecretScanningUpdateAlertRequest(args, w, r)
									return
								}
							default:
								s.notFound(w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "scim": // -> 21
			// Edge: 21, path: "scim".
			elem, p = nextElem(p)
			switch string(elem) {
			case "v2": // -> 22
				// Edge: 22, path: "v2".
				elem, p = nextElem(p)
				switch string(elem) {
				case "enterprises": // -> 23
					// Edge: 23, path: "enterprises".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["enterprise"] = string(elem)
						// Edge: 24, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "Users": // -> 25
							// Edge: 25, path: "Users".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["scim_user_id"] = string(elem)
								// PATCH /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
								s.handleEnterpriseAdminUpdateAttributeForEnterpriseUserRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "enterprises": // -> 27
			// Edge: 27, path: "enterprises".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["enterprise"] = string(elem)
				// Edge: 28, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "actions": // -> 29
					// Edge: 29, path: "actions".
					elem, p = nextElem(p)
					switch string(elem) {
					case "runner-groups": // -> 30
						// Edge: 30, path: "runner-groups".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_group_id"] = string(elem)
							// PATCH /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
							s.handleEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest(args, w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "gists": // -> 32
			// Edge: 32, path: "gists".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["gist_id"] = string(elem)
				// Edge: 33, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "comments": // -> 34
					// Edge: 34, path: "comments".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["comment_id"] = string(elem)
						// PATCH /gists/{gist_id}/comments/{comment_id}
						s.handleGistsUpdateCommentRequest(args, w, r)
						return
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "projects": // -> 44
			// Edge: 44, path: "projects".
			elem, p = nextElem(p)
			switch string(elem) {
			case "columns": // -> 46
				// Edge: 46, path: "columns".
				elem, p = nextElem(p)
				switch string(elem) {
				case "cards": // -> 47
					// Edge: 47, path: "cards".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["card_id"] = string(elem)
						// PATCH /projects/columns/cards/{card_id}
						s.handleProjectsUpdateCardRequest(args, w, r)
						return
					}
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["column_id"] = string(elem)
					// PATCH /projects/columns/{column_id}
					s.handleProjectsUpdateColumnRequest(args, w, r)
					return
				}
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["project_id"] = string(elem)
				// PATCH /projects/{project_id}
				s.handleProjectsUpdateRequest(args, w, r)
				return
			}
		case "user": // -> 53
			// Edge: 53, path: "user".
			elem, p = nextElem(p)
			switch string(elem) {
			case "repository_invitations": // -> 54
				// Edge: 54, path: "repository_invitations".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["invitation_id"] = string(elem)
					// PATCH /user/repository_invitations/{invitation_id}
					s.handleReposAcceptInvitationRequest(args, w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "teams": // -> 78
			// Edge: 78, path: "teams".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["team_id"] = string(elem)
				// Edge: 79, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "discussions": // -> 80
					// Edge: 80, path: "discussions".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["discussion_number"] = string(elem)
						// Edge: 81, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "comments": // -> 82
							// Edge: 82, path: "comments".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["comment_number"] = string(elem)
								// PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
								s.handleTeamsUpdateDiscussionCommentLegacyRequest(args, w, r)
								return
							}
						default:
							// PATCH /teams/{team_id}/discussions/{discussion_number}.
							s.handleTeamsUpdateDiscussionLegacyRequest(args, w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		default:
			s.notFound(w, r)
			return
		}
	case "POST":
		// Root edge.
		elem, p = nextElem(p)
		switch string(elem) {
		case "repos": // -> 1
			// Edge: 1, path: "repos".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["owner"] = string(elem)
				// Edge: 2, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "": // -> 3
					// Edge: 3, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["repo"] = string(elem)
						// Edge: 4, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "actions": // -> 5
							// Edge: 5, path: "actions".
							elem, p = nextElem(p)
							switch string(elem) {
							case "runs": // -> 6
								// Edge: 6, path: "runs".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["run_id"] = string(elem)
									// Edge: 7, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									case "approve": // -> 8
										// POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve
										s.handleActionsApproveWorkflowRunRequest(args, w, r)
										return
									case "cancel": // -> 9
										// POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel
										s.handleActionsCancelWorkflowRunRequest(args, w, r)
										return
									case "rerun": // -> 20
										// POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun
										s.handleActionsReRunWorkflowRequest(args, w, r)
										return
									case "retry": // -> 21
										// POST /repos/{owner}/{repo}/actions/runs/{run_id}/retry
										s.handleActionsRetryWorkflowRequest(args, w, r)
										return
									default:
										s.notFound(w, r)
										return
									}
								}
							case "runners": // -> 15
								// Edge: 15, path: "runners".
								elem, p = nextElem(p)
								switch string(elem) {
								case "registration-token": // -> 16
									// POST /repos/{owner}/{repo}/actions/runners/registration-token
									s.handleActionsCreateRegistrationTokenForRepoRequest(args, w, r)
									return
								case "remove-token": // -> 18
									// POST /repos/{owner}/{repo}/actions/runners/remove-token
									s.handleActionsCreateRemoveTokenForRepoRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							default:
								s.notFound(w, r)
								return
							}
						case "check-suites": // -> 22
							// Edge: 22, path: "check-suites".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["check_suite_id"] = string(elem)
								// Edge: 23, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "rerequest": // -> 24
									// POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest
									s.handleChecksRerequestSuiteRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							}
						case "code-scanning": // -> 25
							// Edge: 25, path: "code-scanning".
							elem, p = nextElem(p)
							switch string(elem) {
							case "sarifs": // -> 26
								// POST /repos/{owner}/{repo}/code-scanning/sarifs
								s.handleCodeScanningUploadSarifRequest(args, w, r)
								return
							default:
								s.notFound(w, r)
								return
							}
						case "issues": // -> 43
							// Edge: 43, path: "issues".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["issue_number"] = string(elem)
								// Edge: 44, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "assignees": // -> 45
									// POST /repos/{owner}/{repo}/issues/{issue_number}/assignees
									s.handleIssuesAddAssigneesRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							}
						case "projects": // -> 81
							// POST /repos/{owner}/{repo}/projects
							s.handleProjectsCreateForRepoRequest(args, w, r)
							return
						case "pulls": // -> 85
							// Edge: 85, path: "pulls".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["pull_number"] = string(elem)
								// Edge: 86, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "comments": // -> 87
									// Edge: 87, path: "comments".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["comment_id"] = string(elem)
										// Edge: 88, path: "".
										elem, p = nextElem(p)
										switch string(elem) {
										case "replies": // -> 89
											// POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies
											s.handlePullsCreateReplyForReviewCommentRequest(args, w, r)
											return
										default:
											s.notFound(w, r)
											return
										}
									}
								case "reviews": // -> 90
									// Edge: 90, path: "reviews".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["review_id"] = string(elem)
										// Edge: 91, path: "".
										elem, p = nextElem(p)
										switch string(elem) {
										case "events": // -> 92
											// POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events
											s.handlePullsSubmitReviewRequest(args, w, r)
											return
										default:
											s.notFound(w, r)
											return
										}
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						case "branches": // -> 109
							// Edge: 109, path: "branches".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["branch"] = string(elem)
								// Edge: 110, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "protection": // -> 111
									// Edge: 111, path: "protection".
									elem, p = nextElem(p)
									switch string(elem) {
									case "required_signatures": // -> 112
										// POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
										s.handleReposCreateCommitSignatureProtectionRequest(args, w, r)
										return
									case "enforce_admins": // -> 122
										// POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
										s.handleReposSetAdminBranchProtectionRequest(args, w, r)
										return
									default:
										s.notFound(w, r)
										return
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						case "statuses": // -> 113
							// Edge: 113, path: "statuses".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["sha"] = string(elem)
								// POST /repos/{owner}/{repo}/statuses/{sha}
								s.handleReposCreateCommitStatusRequest(args, w, r)
								return
							}
						case "generate": // -> 115
							// POST /repos/{template_owner}/{template_repo}/generate
							s.handleReposCreateUsingTemplateRequest(args, w, r)
							return
						case "merge-upstream": // -> 116
							// POST /repos/{owner}/{repo}/merge-upstream
							s.handleReposMergeUpstreamRequest(args, w, r)
							return
						case "hooks": // -> 117
							// Edge: 117, path: "hooks".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["hook_id"] = string(elem)
								// Edge: 118, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "pings": // -> 119
									// POST /repos/{owner}/{repo}/hooks/{hook_id}/pings
									s.handleReposPingWebhookRequest(args, w, r)
									return
								case "tests": // -> 123
									// POST /repos/{owner}/{repo}/hooks/{hook_id}/tests
									s.handleReposTestPushWebhookRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							}
						case "pages": // -> 120
							// Edge: 120, path: "pages".
							elem, p = nextElem(p)
							switch string(elem) {
							case "builds": // -> 121
								// POST /repos/{owner}/{repo}/pages/builds
								s.handleReposRequestPagesBuildRequest(args, w, r)
								return
							default:
								s.notFound(w, r)
								return
							}
						case "transfer": // -> 124
							// POST /repos/{owner}/{repo}/transfer
							s.handleReposTransferRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "orgs": // -> 10
			// Edge: 10, path: "orgs".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["org"] = string(elem)
				// Edge: 11, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "actions": // -> 12
					// Edge: 12, path: "actions".
					elem, p = nextElem(p)
					switch string(elem) {
					case "runners": // -> 13
						// Edge: 13, path: "runners".
						elem, p = nextElem(p)
						switch string(elem) {
						case "registration-token": // -> 14
							// POST /orgs/{org}/actions/runners/registration-token
							s.handleActionsCreateRegistrationTokenForOrgRequest(args, w, r)
							return
						case "remove-token": // -> 17
							// POST /orgs/{org}/actions/runners/remove-token
							s.handleActionsCreateRemoveTokenForOrgRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					case "runner-groups": // -> 19
						// POST /orgs/{org}/actions/runner-groups
						s.handleActionsCreateSelfHostedRunnerGroupForOrgRequest(args, w, r)
						return
					default:
						s.notFound(w, r)
						return
					}
				case "hooks": // -> 46
					// Edge: 46, path: "hooks".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["hook_id"] = string(elem)
						// Edge: 47, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "pings": // -> 48
							// POST /orgs/{org}/hooks/{hook_id}/pings
							s.handleOrgsPingWebhookRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					}
				case "packages": // -> 55
					// Edge: 55, path: "packages".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["package_type"] = string(elem)
						// Edge: 56, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "": // -> 57
							// Edge: 57, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["package_name"] = string(elem)
								// Edge: 58, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "restore": // -> 59
									// POST /orgs/{org}/packages/{package_type}/{package_name}/restore
									s.handlePackagesRestorePackageForOrgRequest(args, w, r)
									return
								case "versions": // -> 70
									// Edge: 70, path: "versions".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["package_version_id"] = string(elem)
										// Edge: 71, path: "".
										elem, p = nextElem(p)
										switch string(elem) {
										case "restore": // -> 72
											// POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
											s.handlePackagesRestorePackageVersionForOrgRequest(args, w, r)
											return
										default:
											s.notFound(w, r)
											return
										}
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				case "projects": // -> 80
					// POST /orgs/{org}/projects
					s.handleProjectsCreateForOrgRequest(args, w, r)
					return
				case "teams": // -> 93
					// Edge: 93, path: "teams".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["team_slug"] = string(elem)
						// Edge: 94, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "discussions": // -> 95
							// Edge: 95, path: "discussions".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["discussion_number"] = string(elem)
								// Edge: 96, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "comments": // -> 97
									// Edge: 97, path: "comments".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["comment_number"] = string(elem)
										// Edge: 98, path: "".
										elem, p = nextElem(p)
										switch string(elem) {
										case "reactions": // -> 99
											// POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
											s.handleReactionsCreateForTeamDiscussionCommentInOrgRequest(args, w, r)
											return
										default:
											s.notFound(w, r)
											return
										}
									}
								case "reactions": // -> 107
									// POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
									s.handleReactionsCreateForTeamDiscussionInOrgRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "enterprises": // -> 27
			// Edge: 27, path: "enterprises".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["enterprise"] = string(elem)
				// Edge: 28, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "actions": // -> 29
					// Edge: 29, path: "actions".
					elem, p = nextElem(p)
					switch string(elem) {
					case "runners": // -> 30
						// Edge: 30, path: "runners".
						elem, p = nextElem(p)
						switch string(elem) {
						case "registration-token": // -> 31
							// POST /enterprises/{enterprise}/actions/runners/registration-token
							s.handleEnterpriseAdminCreateRegistrationTokenForEnterpriseRequest(args, w, r)
							return
						case "remove-token": // -> 32
							// POST /enterprises/{enterprise}/actions/runners/remove-token
							s.handleEnterpriseAdminCreateRemoveTokenForEnterpriseRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					case "runner-groups": // -> 33
						// POST /enterprises/{enterprise}/actions/runner-groups
						s.handleEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(args, w, r)
						return
					default:
						s.notFound(w, r)
						return
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "scim": // -> 34
			// Edge: 34, path: "scim".
			elem, p = nextElem(p)
			switch string(elem) {
			case "v2": // -> 35
				// Edge: 35, path: "v2".
				elem, p = nextElem(p)
				switch string(elem) {
				case "enterprises": // -> 36
					// Edge: 36, path: "enterprises".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["enterprise"] = string(elem)
						// Edge: 37, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "Groups": // -> 38
							// POST /scim/v2/enterprises/{enterprise}/Groups
							s.handleEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(args, w, r)
							return
						case "Users": // -> 39
							// POST /scim/v2/enterprises/{enterprise}/Users
							s.handleEnterpriseAdminProvisionAndInviteEnterpriseUserRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "gists": // -> 40
			// Edge: 40, path: "gists".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["gist_id"] = string(elem)
				// Edge: 41, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "comments": // -> 42
					// POST /gists/{gist_id}/comments
					s.handleGistsCreateCommentRequest(args, w, r)
					return
				default:
					s.notFound(w, r)
					return
				}
			}
		case "user": // -> 49
			// Edge: 49, path: "user".
			elem, p = nextElem(p)
			switch string(elem) {
			case "packages": // -> 50
				// Edge: 50, path: "packages".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["package_type"] = string(elem)
					// Edge: 51, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "": // -> 52
						// Edge: 52, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["package_name"] = string(elem)
							// Edge: 53, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "restore": // -> 54
								// POST /user/packages/{package_type}/{package_name}/restore
								s.handlePackagesRestorePackageForAuthenticatedUserRequest(args, w, r)
								return
							case "versions": // -> 67
								// Edge: 67, path: "versions".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["package_version_id"] = string(elem)
									// Edge: 68, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									case "restore": // -> 69
										// POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
										s.handlePackagesRestorePackageVersionForAuthenticatedUserRequest(args, w, r)
										return
									default:
										s.notFound(w, r)
										return
									}
								}
							default:
								s.notFound(w, r)
								return
							}
						}
					default:
						s.notFound(w, r)
						return
					}
				}
			case "projects": // -> 79
				// POST /user/projects
				s.handleProjectsCreateForAuthenticatedUserRequest(args, w, r)
				return
			default:
				s.notFound(w, r)
				return
			}
		case "users": // -> 60
			// Edge: 60, path: "users".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["username"] = string(elem)
				// Edge: 61, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "packages": // -> 62
					// Edge: 62, path: "packages".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["package_type"] = string(elem)
						// Edge: 63, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "": // -> 64
							// Edge: 64, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["package_name"] = string(elem)
								// Edge: 65, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "restore": // -> 66
									// POST /users/{username}/packages/{package_type}/{package_name}/restore
									s.handlePackagesRestorePackageForUserRequest(args, w, r)
									return
								case "versions": // -> 73
									// Edge: 73, path: "versions".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["package_version_id"] = string(elem)
										// Edge: 74, path: "".
										elem, p = nextElem(p)
										switch string(elem) {
										case "restore": // -> 75
											// POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
											s.handlePackagesRestorePackageVersionForUserRequest(args, w, r)
											return
										default:
											s.notFound(w, r)
											return
										}
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "projects": // -> 76
			// Edge: 76, path: "projects".
			elem, p = nextElem(p)
			switch string(elem) {
			case "columns": // -> 82
				// Edge: 82, path: "columns".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["column_id"] = string(elem)
					// Edge: 83, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "moves": // -> 84
						// POST /projects/columns/{column_id}/moves
						s.handleProjectsMoveColumnRequest(args, w, r)
						return
					default:
						s.notFound(w, r)
						return
					}
				}
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["project_id"] = string(elem)
				// Edge: 77, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "columns": // -> 78
					// POST /projects/{project_id}/columns
					s.handleProjectsCreateColumnRequest(args, w, r)
					return
				default:
					s.notFound(w, r)
					return
				}
			}
		case "teams": // -> 100
			// Edge: 100, path: "teams".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["team_id"] = string(elem)
				// Edge: 101, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "discussions": // -> 102
					// Edge: 102, path: "discussions".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["discussion_number"] = string(elem)
						// Edge: 103, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "comments": // -> 104
							// Edge: 104, path: "comments".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["comment_number"] = string(elem)
								// Edge: 105, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "reactions": // -> 106
									// POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
									s.handleReactionsCreateForTeamDiscussionCommentLegacyRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							}
						case "reactions": // -> 108
							// POST /teams/{team_id}/discussions/{discussion_number}/reactions
							s.handleReactionsCreateForTeamDiscussionLegacyRequest(args, w, r)
							return
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		default:
			s.notFound(w, r)
			return
		}
	case "PUT":
		// Root edge.
		elem, p = nextElem(p)
		switch string(elem) {
		case "orgs": // -> 1
			// Edge: 1, path: "orgs".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["org"] = string(elem)
				// Edge: 2, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "actions": // -> 3
					// Edge: 3, path: "actions".
					elem, p = nextElem(p)
					switch string(elem) {
					case "runner-groups": // -> 4
						// Edge: 4, path: "runner-groups".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_group_id"] = string(elem)
							// Edge: 5, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "repositories": // -> 6
								// Edge: 6, path: "repositories".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["repository_id"] = string(elem)
									// PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
									s.handleActionsAddRepoAccessToSelfHostedRunnerGroupInOrgRequest(args, w, r)
									return
								}
							case "runners": // -> 12
								// Edge: 12, path: "runners".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["runner_id"] = string(elem)
									// PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
									s.handleActionsAddSelfHostedRunnerToGroupForOrgRequest(args, w, r)
									return
								}
							default:
								s.notFound(w, r)
								return
							}
						}
					case "secrets": // -> 8
						// Edge: 8, path: "secrets".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["secret_name"] = string(elem)
							// Edge: 9, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "repositories": // -> 10
								// Edge: 10, path: "repositories".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["repository_id"] = string(elem)
									// PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
									s.handleActionsAddSelectedRepoToOrgSecretRequest(args, w, r)
									return
								}
							default:
								// PUT /orgs/{org}/actions/secrets/{secret_name}.
								s.handleActionsCreateOrUpdateOrgSecretRequest(args, w, r)
								return
							}
						}
					case "permissions": // -> 27
						// Edge: 27, path: "permissions".
						elem, p = nextElem(p)
						switch string(elem) {
						case "repositories": // -> 28
							// Edge: 28, path: "repositories".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["repository_id"] = string(elem)
								// PUT /orgs/{org}/actions/permissions/repositories/{repository_id}
								s.handleActionsEnableSelectedRepositoryGithubActionsOrganizationRequest(args, w, r)
								return
							}
						case "selected-actions": // -> 30
							// PUT /orgs/{org}/actions/permissions/selected-actions
							s.handleActionsSetAllowedActionsOrganizationRequest(args, w, r)
							return
						default:
							// PUT /orgs/{org}/actions/permissions.
							s.handleActionsSetGithubActionsPermissionsOrganizationRequest(args, w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				case "outside_collaborators": // -> 77
					// Edge: 77, path: "outside_collaborators".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// PUT /orgs/{org}/outside_collaborators/{username}
						s.handleOrgsConvertMemberToOutsideCollaboratorRequest(args, w, r)
						return
					}
				case "public_members": // -> 79
					// Edge: 79, path: "public_members".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// PUT /orgs/{org}/public_members/{username}
						s.handleOrgsSetPublicMembershipForAuthenticatedUserRequest(args, w, r)
						return
					}
				case "teams": // -> 97
					// Edge: 97, path: "teams".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["team_slug"] = string(elem)
						// Edge: 98, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "memberships": // -> 99
							// Edge: 99, path: "memberships".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["username"] = string(elem)
								// PUT /orgs/{org}/teams/{team_slug}/memberships/{username}
								s.handleTeamsAddOrUpdateMembershipForUserInOrgRequest(args, w, r)
								return
							}
						case "projects": // -> 103
							// Edge: 103, path: "projects".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["project_id"] = string(elem)
								// PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}
								s.handleTeamsAddOrUpdateProjectPermissionsInOrgRequest(args, w, r)
								return
							}
						case "repos": // -> 105
							// Edge: 105, path: "repos".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["owner"] = string(elem)
								// Edge: 106, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "": // -> 107
									// Edge: 107, path: "".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["repo"] = string(elem)
										// PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
										s.handleTeamsAddOrUpdateRepoPermissionsInOrgRequest(args, w, r)
										return
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "repositories": // -> 14
			// Edge: 14, path: "repositories".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["repository_id"] = string(elem)
				// Edge: 15, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "environments": // -> 16
					// Edge: 16, path: "environments".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["environment_name"] = string(elem)
						// Edge: 17, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "secrets": // -> 18
							// Edge: 18, path: "secrets".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["secret_name"] = string(elem)
								// PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
								s.handleActionsCreateOrUpdateEnvironmentSecretRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "repos": // -> 20
			// Edge: 20, path: "repos".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["owner"] = string(elem)
				// Edge: 21, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "": // -> 22
					// Edge: 22, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["repo"] = string(elem)
						// Edge: 23, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "actions": // -> 24
							// Edge: 24, path: "actions".
							elem, p = nextElem(p)
							switch string(elem) {
							case "secrets": // -> 25
								// Edge: 25, path: "secrets".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["secret_name"] = string(elem)
									// PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}
									s.handleActionsCreateOrUpdateRepoSecretRequest(args, w, r)
									return
								}
							case "permissions": // -> 31
								// Edge: 31, path: "permissions".
								elem, p = nextElem(p)
								switch string(elem) {
								case "selected-actions": // -> 32
									// PUT /repos/{owner}/{repo}/actions/permissions/selected-actions
									s.handleActionsSetAllowedActionsRepositoryRequest(args, w, r)
									return
								default:
									// PUT /repos/{owner}/{repo}/actions/permissions.
									s.handleActionsSetGithubActionsPermissionsRepositoryRequest(args, w, r)
									return
								}
							default:
								s.notFound(w, r)
								return
							}
						case "notifications": // -> 34
							// PUT /repos/{owner}/{repo}/notifications
							s.handleActivityMarkRepoNotificationsAsReadRequest(args, w, r)
							return
						case "subscription": // -> 35
							// PUT /repos/{owner}/{repo}/subscription
							s.handleActivitySetRepoSubscriptionRequest(args, w, r)
							return
						case "interaction-limits": // -> 76
							// PUT /repos/{owner}/{repo}/interaction-limits
							s.handleInteractionsSetRestrictionsForRepoRequest(args, w, r)
							return
						case "pulls": // -> 81
							// Edge: 81, path: "pulls".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["pull_number"] = string(elem)
								// Edge: 82, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "reviews": // -> 83
									// Edge: 83, path: "reviews".
									elem, p = nextElem(p)
									switch string(elem) {
									default:
										if args == nil {
											args = make(map[string]string)
										}
										args["review_id"] = string(elem)
										// Edge: 84, path: "".
										elem, p = nextElem(p)
										switch string(elem) {
										case "dismissals": // -> 85
											// PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals
											s.handlePullsDismissReviewRequest(args, w, r)
											return
										default:
											// PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}.
											s.handlePullsUpdateReviewRequest(args, w, r)
											return
										}
									}
								default:
									s.notFound(w, r)
									return
								}
							}
						case "automated-security-fixes": // -> 86
							// PUT /repos/{owner}/{repo}/automated-security-fixes
							s.handleReposEnableAutomatedSecurityFixesRequest(args, w, r)
							return
						case "lfs": // -> 87
							// PUT /repos/{owner}/{repo}/lfs
							s.handleReposEnableLfsForRepoRequest(args, w, r)
							return
						case "vulnerability-alerts": // -> 88
							// PUT /repos/{owner}/{repo}/vulnerability-alerts
							s.handleReposEnableVulnerabilityAlertsRequest(args, w, r)
							return
						case "topics": // -> 89
							// PUT /repos/{owner}/{repo}/topics
							s.handleReposReplaceAllTopicsRequest(args, w, r)
							return
						case "branches": // -> 90
							// Edge: 90, path: "branches".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["branch"] = string(elem)
								// Edge: 91, path: "".
								elem, p = nextElem(p)
								switch string(elem) {
								case "protection": // -> 92
									// PUT /repos/{owner}/{repo}/branches/{branch}/protection
									s.handleReposUpdateBranchProtectionRequest(args, w, r)
									return
								default:
									s.notFound(w, r)
									return
								}
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "notifications": // -> 33
			// Edge: 33, path: "notifications".
			elem, p = nextElem(p)
			switch string(elem) {
			case "threads": // -> 36
				// Edge: 36, path: "threads".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["thread_id"] = string(elem)
					// Edge: 37, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "subscription": // -> 38
						// PUT /notifications/threads/{thread_id}/subscription
						s.handleActivitySetThreadSubscriptionRequest(args, w, r)
						return
					default:
						s.notFound(w, r)
						return
					}
				}
			default:
				// PUT /notifications.
				s.handleActivityMarkNotificationsAsReadRequest(args, w, r)
				return
			}
		case "user": // -> 39
			// Edge: 39, path: "user".
			elem, p = nextElem(p)
			switch string(elem) {
			case "starred": // -> 40
				// Edge: 40, path: "starred".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["owner"] = string(elem)
					// Edge: 41, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "": // -> 42
						// Edge: 42, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["repo"] = string(elem)
							// PUT /user/starred/{owner}/{repo}
							s.handleActivityStarRepoForAuthenticatedUserRequest(args, w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				}
			case "installations": // -> 44
				// Edge: 44, path: "installations".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["installation_id"] = string(elem)
					// Edge: 45, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "repositories": // -> 46
						// Edge: 46, path: "repositories".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["repository_id"] = string(elem)
							// PUT /user/installations/{installation_id}/repositories/{repository_id}
							s.handleAppsAddRepoToInstallationRequest(args, w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				}
			case "following": // -> 109
				// Edge: 109, path: "following".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["username"] = string(elem)
					// PUT /user/following/{username}
					s.handleUsersFollowRequest(args, w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "app": // -> 48
			// Edge: 48, path: "app".
			elem, p = nextElem(p)
			switch string(elem) {
			case "installations": // -> 49
				// Edge: 49, path: "installations".
				elem, p = nextElem(p)
				switch string(elem) {
				default:
					if args == nil {
						args = make(map[string]string)
					}
					args["installation_id"] = string(elem)
					// Edge: 50, path: "".
					elem, p = nextElem(p)
					switch string(elem) {
					case "suspended": // -> 51
						// PUT /app/installations/{installation_id}/suspended
						s.handleAppsSuspendInstallationRequest(args, w, r)
						return
					default:
						s.notFound(w, r)
						return
					}
				}
			default:
				s.notFound(w, r)
				return
			}
		case "enterprises": // -> 52
			// Edge: 52, path: "enterprises".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["enterprise"] = string(elem)
				// Edge: 53, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "actions": // -> 54
					// Edge: 54, path: "actions".
					elem, p = nextElem(p)
					switch string(elem) {
					case "runner-groups": // -> 55
						// Edge: 55, path: "runner-groups".
						elem, p = nextElem(p)
						switch string(elem) {
						default:
							if args == nil {
								args = make(map[string]string)
							}
							args["runner_group_id"] = string(elem)
							// Edge: 56, path: "".
							elem, p = nextElem(p)
							switch string(elem) {
							case "organizations": // -> 57
								// Edge: 57, path: "organizations".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["org_id"] = string(elem)
									// PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
									s.handleEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(args, w, r)
									return
								}
							case "runners": // -> 59
								// Edge: 59, path: "runners".
								elem, p = nextElem(p)
								switch string(elem) {
								default:
									if args == nil {
										args = make(map[string]string)
									}
									args["runner_id"] = string(elem)
									// PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
									s.handleEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest(args, w, r)
									return
								}
							default:
								s.notFound(w, r)
								return
							}
						}
					case "permissions": // -> 61
						// Edge: 61, path: "permissions".
						elem, p = nextElem(p)
						switch string(elem) {
						case "organizations": // -> 62
							// Edge: 62, path: "organizations".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["org_id"] = string(elem)
								// PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}
								s.handleEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest(args, w, r)
								return
							}
						case "selected-actions": // -> 64
							// PUT /enterprises/{enterprise}/actions/permissions/selected-actions
							s.handleEnterpriseAdminSetAllowedActionsEnterpriseRequest(args, w, r)
							return
						default:
							// PUT /enterprises/{enterprise}/actions/permissions.
							s.handleEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest(args, w, r)
							return
						}
					default:
						s.notFound(w, r)
						return
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		case "scim": // -> 65
			// Edge: 65, path: "scim".
			elem, p = nextElem(p)
			switch string(elem) {
			case "v2": // -> 66
				// Edge: 66, path: "v2".
				elem, p = nextElem(p)
				switch string(elem) {
				case "enterprises": // -> 67
					// Edge: 67, path: "enterprises".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["enterprise"] = string(elem)
						// Edge: 68, path: "".
						elem, p = nextElem(p)
						switch string(elem) {
						case "Groups": // -> 69
							// Edge: 69, path: "Groups".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["scim_group_id"] = string(elem)
								// PUT /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}
								s.handleEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest(args, w, r)
								return
							}
						case "Users": // -> 71
							// Edge: 71, path: "Users".
							elem, p = nextElem(p)
							switch string(elem) {
							default:
								if args == nil {
									args = make(map[string]string)
								}
								args["scim_user_id"] = string(elem)
								// PUT /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
								s.handleEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest(args, w, r)
								return
							}
						default:
							s.notFound(w, r)
							return
						}
					}
				default:
					s.notFound(w, r)
					return
				}
			default:
				s.notFound(w, r)
				return
			}
		case "gists": // -> 73
			// Edge: 73, path: "gists".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["gist_id"] = string(elem)
				// Edge: 74, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "star": // -> 75
					// PUT /gists/{gist_id}/star
					s.handleGistsStarRequest(args, w, r)
					return
				default:
					s.notFound(w, r)
					return
				}
			}
		case "teams": // -> 93
			// Edge: 93, path: "teams".
			elem, p = nextElem(p)
			switch string(elem) {
			default:
				if args == nil {
					args = make(map[string]string)
				}
				args["team_id"] = string(elem)
				// Edge: 94, path: "".
				elem, p = nextElem(p)
				switch string(elem) {
				case "members": // -> 95
					// Edge: 95, path: "members".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// PUT /teams/{team_id}/members/{username}
						s.handleTeamsAddMemberLegacyRequest(args, w, r)
						return
					}
				case "memberships": // -> 101
					// Edge: 101, path: "memberships".
					elem, p = nextElem(p)
					switch string(elem) {
					default:
						if args == nil {
							args = make(map[string]string)
						}
						args["username"] = string(elem)
						// PUT /teams/{team_id}/memberships/{username}
						s.handleTeamsAddOrUpdateMembershipForUserLegacyRequest(args, w, r)
						return
					}
				default:
					s.notFound(w, r)
					return
				}
			}
		default:
			s.notFound(w, r)
			return
		}
	default:
		s.notFound(w, r)
		return
	}
}
