// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func decodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest(r *http.Request) (_ EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest(r *http.Request) (_ EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetAllowedActionsEnterpriseRequest(r *http.Request) (_ SelectedActions, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(r *http.Request) (_ EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest(r *http.Request) (_ *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(r *http.Request) (_ EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest(r *http.Request) (_ EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGistsCreateCommentRequest(r *http.Request) (_ GistsCreateCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GistsCreateCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGistsUpdateCommentRequest(r *http.Request) (_ GistsUpdateCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GistsUpdateCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeMarkdownRenderRequest(r *http.Request) (_ MarkdownRenderApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MarkdownRenderApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeMarkdownRenderRawRequest(r *http.Request) (_ MarkdownRenderRawRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "text/plain":
		var request MarkdownRenderRawTextPlainRequest
		_ = request
		rerr = fmt.Errorf("text/plain decoder not implemented")
		return
	case "text/x-markdown":
		var request MarkdownRenderRawTextXMarkdownRequest
		_ = request
		rerr = fmt.Errorf("text/x-markdown decoder not implemented")
		return
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActivityMarkNotificationsAsReadRequest(r *http.Request) (_ *ActivityMarkNotificationsAsReadApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivityMarkNotificationsAsReadApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActivitySetThreadSubscriptionRequest(r *http.Request) (_ *ActivitySetThreadSubscriptionApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivitySetThreadSubscriptionApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetGithubActionsPermissionsOrganizationRequest(r *http.Request) (_ ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest(r *http.Request) (_ ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetAllowedActionsOrganizationRequest(r *http.Request) (_ *SelectedActions, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsCreateSelfHostedRunnerGroupForOrgRequest(r *http.Request) (_ ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsUpdateSelfHostedRunnerGroupForOrgRequest(r *http.Request) (_ ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest(r *http.Request) (_ ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetSelfHostedRunnersInGroupForOrgRequest(r *http.Request) (_ ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsCreateOrUpdateOrgSecretRequest(r *http.Request) (_ ActionsCreateOrUpdateOrgSecretApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateOrgSecretApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetSelectedReposForOrgSecretRequest(r *http.Request) (_ ActionsSetSelectedReposForOrgSecretApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelectedReposForOrgSecretApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsCreateForOrgRequest(r *http.Request) (_ ProjectsCreateForOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsUpdateInOrgRequest(r *http.Request) (_ *TeamsUpdateInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateDiscussionInOrgRequest(r *http.Request) (_ TeamsCreateDiscussionInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsUpdateDiscussionInOrgRequest(r *http.Request) (_ *TeamsUpdateDiscussionInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateDiscussionCommentInOrgRequest(r *http.Request) (_ TeamsCreateDiscussionCommentInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionCommentInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsUpdateDiscussionCommentInOrgRequest(r *http.Request) (_ TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForTeamDiscussionCommentInOrgRequest(r *http.Request) (_ ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForTeamDiscussionInOrgRequest(r *http.Request) (_ ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsAddOrUpdateMembershipForUserInOrgRequest(r *http.Request) (_ *TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsAddOrUpdateProjectPermissionsInOrgRequest(r *http.Request) (_ *TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsAddOrUpdateRepoPermissionsInOrgRequest(r *http.Request) (_ *TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgRequest(r *http.Request) (_ TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsUpdateCardRequest(r *http.Request) (_ *ProjectsUpdateCardApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateCardApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsUpdateColumnRequest(r *http.Request) (_ ProjectsUpdateColumnApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateColumnApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsMoveColumnRequest(r *http.Request) (_ ProjectsMoveColumnApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsMoveColumnApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsUpdateRequest(r *http.Request) (_ *ProjectsUpdateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsCreateColumnRequest(r *http.Request) (_ ProjectsCreateColumnApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateColumnApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetGithubActionsPermissionsRepositoryRequest(r *http.Request) (_ ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetAllowedActionsRepositoryRequest(r *http.Request) (_ *SelectedActions, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsCreateOrUpdateRepoSecretRequest(r *http.Request) (_ ActionsCreateOrUpdateRepoSecretApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateRepoSecretApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateBranchProtectionRequest(r *http.Request) (_ ReposUpdateBranchProtectionApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateBranchProtectionApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeChecksCreateSuiteRequest(r *http.Request) (_ ChecksCreateSuiteApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ChecksCreateSuiteApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeChecksSetSuitesPreferencesRequest(r *http.Request) (_ ChecksSetSuitesPreferencesApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ChecksSetSuitesPreferencesApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeCodeScanningUpdateAlertRequest(r *http.Request) (_ CodeScanningUpdateAlertApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request CodeScanningUpdateAlertApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeCodeScanningUploadSarifRequest(r *http.Request) (_ CodeScanningUploadSarifApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request CodeScanningUploadSarifApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateCommitCommentRequest(r *http.Request) (_ ReposUpdateCommitCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateCommitCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeMigrationsUpdateImportRequest(r *http.Request) (_ *MigrationsUpdateImportApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MigrationsUpdateImportApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeInteractionsSetRestrictionsForRepoRequest(r *http.Request) (_ InteractionLimit, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request InteractionLimit
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateInvitationRequest(r *http.Request) (_ *ReposUpdateInvitationApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateInvitationApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesAddAssigneesRequest(r *http.Request) (_ *IssuesAddAssigneesApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesAddAssigneesApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesRemoveAssigneesRequest(r *http.Request) (_ *IssuesRemoveAssigneesApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesRemoveAssigneesApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesUpdateLabelRequest(r *http.Request) (_ *IssuesUpdateLabelApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesUpdateLabelApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposMergeUpstreamRequest(r *http.Request) (_ ReposMergeUpstreamApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposMergeUpstreamApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesUpdateMilestoneRequest(r *http.Request) (_ *IssuesUpdateMilestoneApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesUpdateMilestoneApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActivityMarkRepoNotificationsAsReadRequest(r *http.Request) (_ *ActivityMarkRepoNotificationsAsReadApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivityMarkRepoNotificationsAsReadApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsCreateForRepoRequest(r *http.Request) (_ ProjectsCreateForRepoApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForRepoApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsUpdateReviewCommentRequest(r *http.Request) (_ PullsUpdateReviewCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsUpdateReviewCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsCreateReplyForReviewCommentRequest(r *http.Request) (_ PullsCreateReplyForReviewCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsCreateReplyForReviewCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsCreateReviewRequest(r *http.Request) (_ *PullsCreateReviewApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsCreateReviewApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsUpdateReviewRequest(r *http.Request) (_ PullsUpdateReviewApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsUpdateReviewApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsDismissReviewRequest(r *http.Request) (_ PullsDismissReviewApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsDismissReviewApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsSubmitReviewRequest(r *http.Request) (_ PullsSubmitReviewApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsSubmitReviewApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateReleaseAssetRequest(r *http.Request) (_ *ReposUpdateReleaseAssetApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateReleaseAssetApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateReleaseRequest(r *http.Request) (_ *ReposUpdateReleaseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateReleaseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUploadReleaseAssetRequest(r *http.Request) (_ *string, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "*/*":
		var request string
		_ = request
		rerr = fmt.Errorf("*/* decoder not implemented")
		return
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeSecretScanningUpdateAlertRequest(r *http.Request) (_ SecretScanningUpdateAlertApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SecretScanningUpdateAlertApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateCommitStatusRequest(r *http.Request) (_ ReposCreateCommitStatusApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateCommitStatusApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActivitySetRepoSubscriptionRequest(r *http.Request) (_ *ActivitySetRepoSubscriptionApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivitySetRepoSubscriptionApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposReplaceAllTopicsRequest(r *http.Request) (_ ReposReplaceAllTopicsApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposReplaceAllTopicsApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposTransferRequest(r *http.Request) (_ ReposTransferApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposTransferApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateUsingTemplateRequest(r *http.Request) (_ ReposCreateUsingTemplateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateUsingTemplateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsCreateOrUpdateEnvironmentSecretRequest(r *http.Request) (_ ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(r *http.Request) (_ EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest(r *http.Request) (_ EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseUserRequest(r *http.Request) (_ EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest(r *http.Request) (_ EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminUpdateAttributeForEnterpriseUserRequest(r *http.Request) (_ EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateDiscussionLegacyRequest(r *http.Request) (_ TeamsCreateDiscussionLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsUpdateDiscussionLegacyRequest(r *http.Request) (_ *TeamsUpdateDiscussionLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateDiscussionCommentLegacyRequest(r *http.Request) (_ TeamsCreateDiscussionCommentLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionCommentLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsUpdateDiscussionCommentLegacyRequest(r *http.Request) (_ TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForTeamDiscussionCommentLegacyRequest(r *http.Request) (_ ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForTeamDiscussionLegacyRequest(r *http.Request) (_ ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsAddOrUpdateMembershipForUserLegacyRequest(r *http.Request) (_ *TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsCreateForAuthenticatedUserRequest(r *http.Request) (_ ProjectsCreateForAuthenticatedUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForAuthenticatedUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}
