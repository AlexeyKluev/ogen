// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/encoding/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func decodeAppsCreateFromManifestRequest(r *http.Request) (_ *AppsCreateFromManifestApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request AppsCreateFromManifestApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeAppsUpdateWebhookConfigForAppRequest(r *http.Request) (_ AppsUpdateWebhookConfigForAppRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeAppsCreateInstallationAccessTokenRequest(r *http.Request) (_ *AppsCreateInstallationAccessTokenApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request AppsCreateInstallationAccessTokenApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeAppsDeleteAuthorizationRequest(r *http.Request) (_ AppsDeleteAuthorizationApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request AppsDeleteAuthorizationApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeAppsCheckTokenRequest(r *http.Request) (_ AppsCheckTokenApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request AppsCheckTokenApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeAppsDeleteTokenRequest(r *http.Request) (_ AppsDeleteTokenApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request AppsDeleteTokenApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeAppsResetTokenRequest(r *http.Request) (_ AppsResetTokenApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request AppsResetTokenApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeAppsScopeTokenRequest(r *http.Request) (_ AppsScopeTokenApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request AppsScopeTokenApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeOAuthAuthorizationsCreateAuthorizationRequest(r *http.Request) (_ *OAuthAuthorizationsCreateAuthorizationApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request OAuthAuthorizationsCreateAuthorizationApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeOAuthAuthorizationsGetOrCreateAuthorizationForAppRequest(r *http.Request) (_ OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request OAuthAuthorizationsGetOrCreateAuthorizationForAppApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeOAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequest(r *http.Request) (_ OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request OAuthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeOAuthAuthorizationsUpdateAuthorizationRequest(r *http.Request) (_ *OAuthAuthorizationsUpdateAuthorizationApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request OAuthAuthorizationsUpdateAuthorizationApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest(r *http.Request) (_ EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetGithubActionsPermissionsEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest(r *http.Request) (_ EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetAllowedActionsEnterpriseRequest(r *http.Request) (_ SelectedActions, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(r *http.Request) (_ EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest(r *http.Request) (_ *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(r *http.Request) (_ EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest(r *http.Request) (_ EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGistsCreateRequest(r *http.Request) (_ GistsCreateRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGistsUpdateRequest(r *http.Request) (_ GistsUpdateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GistsUpdateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGistsCreateCommentRequest(r *http.Request) (_ GistsCreateCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GistsCreateCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGistsUpdateCommentRequest(r *http.Request) (_ GistsUpdateCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GistsUpdateCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeMarkdownRenderRequest(r *http.Request) (_ MarkdownRenderApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MarkdownRenderApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeMarkdownRenderRawRequest(r *http.Request) (_ MarkdownRenderRawRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "text/plain":
		var request MarkdownRenderRawTextPlainRequest
		_ = request
		rerr = fmt.Errorf("text/plain decoder not implemented")
		return
	case "text/x-markdown":
		var request MarkdownRenderRawTextXMarkdownRequest
		_ = request
		rerr = fmt.Errorf("text/x-markdown decoder not implemented")
		return
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActivityMarkNotificationsAsReadRequest(r *http.Request) (_ *ActivityMarkNotificationsAsReadApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivityMarkNotificationsAsReadApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActivitySetThreadSubscriptionRequest(r *http.Request) (_ *ActivitySetThreadSubscriptionApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivitySetThreadSubscriptionApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeOrgsUpdateRequest(r *http.Request) (_ *OrgsUpdateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request OrgsUpdateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetGithubActionsPermissionsOrganizationRequest(r *http.Request) (_ ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetGithubActionsPermissionsOrganizationApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest(r *http.Request) (_ ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetAllowedActionsOrganizationRequest(r *http.Request) (_ *SelectedActions, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsCreateSelfHostedRunnerGroupForOrgRequest(r *http.Request) (_ ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateSelfHostedRunnerGroupForOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsUpdateSelfHostedRunnerGroupForOrgRequest(r *http.Request) (_ ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsUpdateSelfHostedRunnerGroupForOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest(r *http.Request) (_ ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetSelfHostedRunnersInGroupForOrgRequest(r *http.Request) (_ ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelfHostedRunnersInGroupForOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsCreateOrUpdateOrgSecretRequest(r *http.Request) (_ ActionsCreateOrUpdateOrgSecretApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateOrgSecretApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetSelectedReposForOrgSecretRequest(r *http.Request) (_ ActionsSetSelectedReposForOrgSecretApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetSelectedReposForOrgSecretApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeOrgsCreateWebhookRequest(r *http.Request) (_ OrgsCreateWebhookRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeOrgsUpdateWebhookRequest(r *http.Request) (_ OrgsUpdateWebhookRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeOrgsUpdateWebhookConfigForOrgRequest(r *http.Request) (_ OrgsUpdateWebhookConfigForOrgRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeInteractionsSetRestrictionsForOrgRequest(r *http.Request) (_ InteractionLimit, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request InteractionLimit
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeOrgsCreateInvitationRequest(r *http.Request) (_ *OrgsCreateInvitationApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request OrgsCreateInvitationApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeOrgsSetMembershipForUserRequest(r *http.Request) (_ *OrgsSetMembershipForUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request OrgsSetMembershipForUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeMigrationsStartForOrgRequest(r *http.Request) (_ MigrationsStartForOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MigrationsStartForOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsCreateForOrgRequest(r *http.Request) (_ ProjectsCreateForOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateInOrgRequest(r *http.Request) (_ ReposCreateInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateRequest(r *http.Request) (_ TeamsCreateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsUpdateInOrgRequest(r *http.Request) (_ *TeamsUpdateInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateDiscussionInOrgRequest(r *http.Request) (_ TeamsCreateDiscussionInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsUpdateDiscussionInOrgRequest(r *http.Request) (_ *TeamsUpdateDiscussionInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateDiscussionCommentInOrgRequest(r *http.Request) (_ TeamsCreateDiscussionCommentInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionCommentInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsUpdateDiscussionCommentInOrgRequest(r *http.Request) (_ TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionCommentInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForTeamDiscussionCommentInOrgRequest(r *http.Request) (_ ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionCommentInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForTeamDiscussionInOrgRequest(r *http.Request) (_ ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsAddOrUpdateMembershipForUserInOrgRequest(r *http.Request) (_ *TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateMembershipForUserInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsAddOrUpdateProjectPermissionsInOrgRequest(r *http.Request) (_ *TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateProjectPermissionsInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsAddOrUpdateRepoPermissionsInOrgRequest(r *http.Request) (_ *TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateRepoPermissionsInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgRequest(r *http.Request) (_ TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateOrUpdateIdpGroupConnectionsInOrgApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsUpdateCardRequest(r *http.Request) (_ *ProjectsUpdateCardApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateCardApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsMoveCardRequest(r *http.Request) (_ ProjectsMoveCardApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsMoveCardApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsUpdateColumnRequest(r *http.Request) (_ ProjectsUpdateColumnApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateColumnApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsCreateCardRequest(r *http.Request) (_ ProjectsCreateCardRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsMoveColumnRequest(r *http.Request) (_ ProjectsMoveColumnApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsMoveColumnApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsUpdateRequest(r *http.Request) (_ *ProjectsUpdateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsUpdateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsAddCollaboratorRequest(r *http.Request) (_ *ProjectsAddCollaboratorApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsAddCollaboratorApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsCreateColumnRequest(r *http.Request) (_ ProjectsCreateColumnApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateColumnApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateRequest(r *http.Request) (_ *ReposUpdateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetGithubActionsPermissionsRepositoryRequest(r *http.Request) (_ ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsSetGithubActionsPermissionsRepositoryApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsSetAllowedActionsRepositoryRequest(r *http.Request) (_ *SelectedActions, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SelectedActions
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsReviewPendingDeploymentsForRunRequest(r *http.Request) (_ ActionsReviewPendingDeploymentsForRunApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsReviewPendingDeploymentsForRunApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsCreateOrUpdateRepoSecretRequest(r *http.Request) (_ ActionsCreateOrUpdateRepoSecretApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateRepoSecretApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateAutolinkRequest(r *http.Request) (_ ReposCreateAutolinkApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateAutolinkApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateBranchProtectionRequest(r *http.Request) (_ ReposUpdateBranchProtectionApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateBranchProtectionApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdatePullRequestReviewProtectionRequest(r *http.Request) (_ *ReposUpdatePullRequestReviewProtectionApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdatePullRequestReviewProtectionApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateStatusCheckProtectionRequest(r *http.Request) (_ *ReposUpdateStatusCheckProtectionApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateStatusCheckProtectionApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposSetStatusCheckContextsRequest(r *http.Request) (_ ReposSetStatusCheckContextsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposAddStatusCheckContextsRequest(r *http.Request) (_ ReposAddStatusCheckContextsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposRemoveStatusCheckContextsRequest(r *http.Request) (_ ReposRemoveStatusCheckContextsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposSetAppAccessRestrictionsRequest(r *http.Request) (_ ReposSetAppAccessRestrictionsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposAddAppAccessRestrictionsRequest(r *http.Request) (_ ReposAddAppAccessRestrictionsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposRemoveAppAccessRestrictionsRequest(r *http.Request) (_ ReposRemoveAppAccessRestrictionsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposSetTeamAccessRestrictionsRequest(r *http.Request) (_ ReposSetTeamAccessRestrictionsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposAddTeamAccessRestrictionsRequest(r *http.Request) (_ ReposAddTeamAccessRestrictionsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposRemoveTeamAccessRestrictionsRequest(r *http.Request) (_ ReposRemoveTeamAccessRestrictionsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposSetUserAccessRestrictionsRequest(r *http.Request) (_ ReposSetUserAccessRestrictionsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposAddUserAccessRestrictionsRequest(r *http.Request) (_ ReposAddUserAccessRestrictionsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposRemoveUserAccessRestrictionsRequest(r *http.Request) (_ ReposRemoveUserAccessRestrictionsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposRenameBranchRequest(r *http.Request) (_ *ReposRenameBranchApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposRenameBranchApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeChecksCreateRequest(r *http.Request) (_ ChecksCreateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ChecksCreateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeChecksUpdateRequest(r *http.Request) (_ *ChecksUpdateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ChecksUpdateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeChecksCreateSuiteRequest(r *http.Request) (_ ChecksCreateSuiteApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ChecksCreateSuiteApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeChecksSetSuitesPreferencesRequest(r *http.Request) (_ ChecksSetSuitesPreferencesApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ChecksSetSuitesPreferencesApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeCodeScanningUpdateAlertRequest(r *http.Request) (_ CodeScanningUpdateAlertApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request CodeScanningUpdateAlertApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeCodeScanningUploadSarifRequest(r *http.Request) (_ CodeScanningUploadSarifApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request CodeScanningUploadSarifApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposAddCollaboratorRequest(r *http.Request) (_ *ReposAddCollaboratorApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposAddCollaboratorApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateCommitCommentRequest(r *http.Request) (_ ReposUpdateCommitCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateCommitCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForCommitCommentRequest(r *http.Request) (_ ReactionsCreateForCommitCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForCommitCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateCommitCommentRequest(r *http.Request) (_ ReposCreateCommitCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateCommitCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeAppsCreateContentAttachmentRequest(r *http.Request) (_ AppsCreateContentAttachmentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request AppsCreateContentAttachmentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateOrUpdateFileContentsRequest(r *http.Request) (_ ReposCreateOrUpdateFileContentsApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateOrUpdateFileContentsApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposDeleteFileRequest(r *http.Request) (_ ReposDeleteFileApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposDeleteFileApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateDeploymentRequest(r *http.Request) (_ ReposCreateDeploymentRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateDeploymentStatusRequest(r *http.Request) (_ ReposCreateDeploymentStatusApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateDeploymentStatusApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateDispatchEventRequest(r *http.Request) (_ ReposCreateDispatchEventApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateDispatchEventApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateOrUpdateEnvironmentRequest(r *http.Request) (_ *ReposCreateOrUpdateEnvironmentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateOrUpdateEnvironmentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateForkRequest(r *http.Request) (_ *ReposCreateForkApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateForkApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGitCreateBlobRequest(r *http.Request) (_ GitCreateBlobApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GitCreateBlobApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGitCreateCommitRequest(r *http.Request) (_ GitCreateCommitApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GitCreateCommitApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGitCreateRefRequest(r *http.Request) (_ GitCreateRefApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GitCreateRefApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGitUpdateRefRequest(r *http.Request) (_ GitUpdateRefApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GitUpdateRefApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGitCreateTagRequest(r *http.Request) (_ GitCreateTagApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GitCreateTagApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeGitCreateTreeRequest(r *http.Request) (_ GitCreateTreeApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request GitCreateTreeApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateWebhookRequest(r *http.Request) (_ ReposCreateWebhookRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateWebhookRequest(r *http.Request) (_ ReposUpdateWebhookRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateWebhookConfigForRepoRequest(r *http.Request) (_ ReposUpdateWebhookConfigForRepoRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeMigrationsStartImportRequest(r *http.Request) (_ MigrationsStartImportApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MigrationsStartImportApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeMigrationsUpdateImportRequest(r *http.Request) (_ *MigrationsUpdateImportApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MigrationsUpdateImportApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeMigrationsMapCommitAuthorRequest(r *http.Request) (_ *MigrationsMapCommitAuthorApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MigrationsMapCommitAuthorApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeMigrationsSetLfsPreferenceRequest(r *http.Request) (_ MigrationsSetLfsPreferenceApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MigrationsSetLfsPreferenceApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeInteractionsSetRestrictionsForRepoRequest(r *http.Request) (_ InteractionLimit, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request InteractionLimit
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateInvitationRequest(r *http.Request) (_ *ReposUpdateInvitationApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateInvitationApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesCreateRequest(r *http.Request) (_ IssuesCreateRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesUpdateCommentRequest(r *http.Request) (_ IssuesUpdateCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesUpdateCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForIssueCommentRequest(r *http.Request) (_ ReactionsCreateForIssueCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForIssueCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesUpdateRequest(r *http.Request) (_ IssuesUpdateRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesAddAssigneesRequest(r *http.Request) (_ *IssuesAddAssigneesApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesAddAssigneesApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesRemoveAssigneesRequest(r *http.Request) (_ *IssuesRemoveAssigneesApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesRemoveAssigneesApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesCreateCommentRequest(r *http.Request) (_ IssuesCreateCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesCreateCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesSetLabelsRequest(r *http.Request) (_ IssuesSetLabelsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesAddLabelsRequest(r *http.Request) (_ IssuesAddLabelsRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesLockRequest(r *http.Request) (_ *IssuesLockApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesLockApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForIssueRequest(r *http.Request) (_ ReactionsCreateForIssueApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForIssueApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateDeployKeyRequest(r *http.Request) (_ ReposCreateDeployKeyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateDeployKeyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesCreateLabelRequest(r *http.Request) (_ IssuesCreateLabelApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesCreateLabelApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesUpdateLabelRequest(r *http.Request) (_ *IssuesUpdateLabelApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesUpdateLabelApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposMergeUpstreamRequest(r *http.Request) (_ ReposMergeUpstreamApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposMergeUpstreamApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposMergeRequest(r *http.Request) (_ ReposMergeApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposMergeApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesCreateMilestoneRequest(r *http.Request) (_ IssuesCreateMilestoneApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesCreateMilestoneApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeIssuesUpdateMilestoneRequest(r *http.Request) (_ *IssuesUpdateMilestoneApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request IssuesUpdateMilestoneApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActivityMarkRepoNotificationsAsReadRequest(r *http.Request) (_ *ActivityMarkRepoNotificationsAsReadApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivityMarkRepoNotificationsAsReadApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateInformationAboutPagesSiteRequest(r *http.Request) (_ ReposUpdateInformationAboutPagesSiteRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreatePagesSiteRequest(r *http.Request) (_ ReposCreatePagesSiteApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreatePagesSiteApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsCreateForRepoRequest(r *http.Request) (_ ProjectsCreateForRepoApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForRepoApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsCreateRequest(r *http.Request) (_ PullsCreateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsCreateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsUpdateReviewCommentRequest(r *http.Request) (_ PullsUpdateReviewCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsUpdateReviewCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForPullRequestReviewCommentRequest(r *http.Request) (_ ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForPullRequestReviewCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsUpdateRequest(r *http.Request) (_ *PullsUpdateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsUpdateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsCreateReviewCommentRequest(r *http.Request) (_ PullsCreateReviewCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsCreateReviewCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsCreateReplyForReviewCommentRequest(r *http.Request) (_ PullsCreateReplyForReviewCommentApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsCreateReplyForReviewCommentApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsMergeRequest(r *http.Request) (_ *PullsMergeApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsMergeApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsRequestReviewersRequest(r *http.Request) (_ *PullsRequestReviewersApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsRequestReviewersApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsRemoveRequestedReviewersRequest(r *http.Request) (_ PullsRemoveRequestedReviewersApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsRemoveRequestedReviewersApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsCreateReviewRequest(r *http.Request) (_ *PullsCreateReviewApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsCreateReviewApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsUpdateReviewRequest(r *http.Request) (_ PullsUpdateReviewApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsUpdateReviewApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsDismissReviewRequest(r *http.Request) (_ PullsDismissReviewApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsDismissReviewApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsSubmitReviewRequest(r *http.Request) (_ PullsSubmitReviewApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsSubmitReviewApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodePullsUpdateBranchRequest(r *http.Request) (_ *PullsUpdateBranchApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request PullsUpdateBranchApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateReleaseRequest(r *http.Request) (_ ReposCreateReleaseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateReleaseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateReleaseAssetRequest(r *http.Request) (_ *ReposUpdateReleaseAssetApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateReleaseAssetApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUpdateReleaseRequest(r *http.Request) (_ *ReposUpdateReleaseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposUpdateReleaseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposUploadReleaseAssetRequest(r *http.Request) (_ *string, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "*/*":
		var request string
		_ = request
		rerr = fmt.Errorf("*/* decoder not implemented")
		return
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForReleaseRequest(r *http.Request) (_ ReactionsCreateForReleaseApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForReleaseApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeSecretScanningUpdateAlertRequest(r *http.Request) (_ SecretScanningUpdateAlertApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request SecretScanningUpdateAlertApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateCommitStatusRequest(r *http.Request) (_ ReposCreateCommitStatusApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateCommitStatusApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActivitySetRepoSubscriptionRequest(r *http.Request) (_ *ActivitySetRepoSubscriptionApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActivitySetRepoSubscriptionApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposReplaceAllTopicsRequest(r *http.Request) (_ ReposReplaceAllTopicsApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposReplaceAllTopicsApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposTransferRequest(r *http.Request) (_ ReposTransferApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposTransferApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateUsingTemplateRequest(r *http.Request) (_ ReposCreateUsingTemplateApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateUsingTemplateApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeActionsCreateOrUpdateEnvironmentSecretRequest(r *http.Request) (_ ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ActionsCreateOrUpdateEnvironmentSecretApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(r *http.Request) (_ EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminProvisionAndInviteEnterpriseGroupApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest(r *http.Request) (_ EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetInformationForProvisionedEnterpriseGroupApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminUpdateAttributeForEnterpriseGroupRequest(r *http.Request) (_ EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseUserRequest(r *http.Request) (_ EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminProvisionAndInviteEnterpriseUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest(r *http.Request) (_ EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminSetInformationForProvisionedEnterpriseUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeEnterpriseAdminUpdateAttributeForEnterpriseUserRequest(r *http.Request) (_ EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request EnterpriseAdminUpdateAttributeForEnterpriseUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeScimProvisionAndInviteUserRequest(r *http.Request) (_ ScimProvisionAndInviteUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ScimProvisionAndInviteUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeScimSetInformationForProvisionedUserRequest(r *http.Request) (_ ScimSetInformationForProvisionedUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ScimSetInformationForProvisionedUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeScimUpdateAttributeForUserRequest(r *http.Request) (_ ScimUpdateAttributeForUserRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsUpdateLegacyRequest(r *http.Request) (_ TeamsUpdateLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateDiscussionLegacyRequest(r *http.Request) (_ TeamsCreateDiscussionLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsUpdateDiscussionLegacyRequest(r *http.Request) (_ *TeamsUpdateDiscussionLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateDiscussionCommentLegacyRequest(r *http.Request) (_ TeamsCreateDiscussionCommentLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateDiscussionCommentLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsUpdateDiscussionCommentLegacyRequest(r *http.Request) (_ TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsUpdateDiscussionCommentLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForTeamDiscussionCommentLegacyRequest(r *http.Request) (_ ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionCommentLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReactionsCreateForTeamDiscussionLegacyRequest(r *http.Request) (_ ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReactionsCreateForTeamDiscussionLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsAddOrUpdateMembershipForUserLegacyRequest(r *http.Request) (_ *TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateMembershipForUserLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsAddOrUpdateProjectPermissionsLegacyRequest(r *http.Request) (_ *TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateProjectPermissionsLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsAddOrUpdateRepoPermissionsLegacyRequest(r *http.Request) (_ *TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsAddOrUpdateRepoPermissionsLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeTeamsCreateOrUpdateIdpGroupConnectionsLegacyRequest(r *http.Request) (_ TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request TeamsCreateOrUpdateIdpGroupConnectionsLegacyApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeUsersUpdateAuthenticatedRequest(r *http.Request) (_ *UsersUpdateAuthenticatedApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request UsersUpdateAuthenticatedApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			if errors.Is(err, io.EOF) {
				return
			}
			rerr = err
			return
		}

		return &request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeUsersSetPrimaryEmailVisibilityForAuthenticatedRequest(r *http.Request) (_ UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request UsersSetPrimaryEmailVisibilityForAuthenticatedApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeUsersAddEmailForAuthenticatedRequest(r *http.Request) (_ UsersAddEmailForAuthenticatedRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeUsersDeleteEmailForAuthenticatedRequest(r *http.Request) (_ UsersDeleteEmailForAuthenticatedRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeUsersCreateGpgKeyForAuthenticatedRequest(r *http.Request) (_ UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request UsersCreateGpgKeyForAuthenticatedApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeInteractionsSetRestrictionsForAuthenticatedUserRequest(r *http.Request) (_ InteractionLimit, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request InteractionLimit
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeUsersCreatePublicSSHKeyForAuthenticatedRequest(r *http.Request) (_ UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request UsersCreatePublicSSHKeyForAuthenticatedApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeOrgsUpdateMembershipForAuthenticatedUserRequest(r *http.Request) (_ OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request OrgsUpdateMembershipForAuthenticatedUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeMigrationsStartForAuthenticatedUserRequest(r *http.Request) (_ MigrationsStartForAuthenticatedUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request MigrationsStartForAuthenticatedUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeProjectsCreateForAuthenticatedUserRequest(r *http.Request) (_ ProjectsCreateForAuthenticatedUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ProjectsCreateForAuthenticatedUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}

func decodeReposCreateForAuthenticatedUserRequest(r *http.Request) (_ ReposCreateForAuthenticatedUserApplicationJSONRequest, rerr error) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		var request ReposCreateForAuthenticatedUserApplicationJSONRequest
		data, err := io.ReadAll(r.Body)
		if err != nil {
			rerr = err
			return
		}
		if err := json.Unmarshal(data, &request); err != nil {
			rerr = err
			return
		}

		return request, nil
	default:
		rerr = fmt.Errorf("unexpected content-type: %s", r.Header.Get("Content-Type"))
		return
	}
}
