// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/big"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

import (
	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = big.Rat{}
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = attribute.KeyValue{}
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

var (
	_ = testing.TB(nil)
	_ = require.NoError
)

func TestAPIOverview_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"verifiable_password_authentication\": true,\n          \"ssh_key_fingerprints\": {\n            \"SHA256_RSA\": \"nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8\",\n            \"SHA256_DSA\": \"br9IjFspm1vxR3iA35FWE+4VTyz1hYVLIE2t1/CeyWQ\",\n            \"SHA256_ECDSA\": \"p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM\",\n            \"SHA256_ED25519\": \"+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU\"\n          },\n          \"hooks\": [\n            \"192.30.252.0/22\"\n          ],\n          \"web\": [\n            \"192.30.252.0/22\",\n            \"185.199.108.0/22\"\n          ],\n          \"api\": [\n            \"192.30.252.0/22\",\n            \"185.199.108.0/22\"\n          ],\n          \"git\": [\n            \"192.30.252.0/22\"\n          ],\n          \"packages\": [\n            \"192.30.252.0/22\"\n          ],\n          \"pages\": [\n            \"192.30.252.153/32\",\n            \"192.30.252.154/32\"\n          ],\n          \"importer\": [\n            \"54.158.161.132\",\n            \"54.226.70.38\"\n          ],\n          \"actions\": [\n            \"13.64.0.0/16\",\n            \"13.65.0.0/16\"\n          ],\n          \"dependabot\": [\n            \"54.158.161.132\"\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ APIOverview

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 APIOverview
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsBillingUsage_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_minutes_used\": 305,\n          \"total_paid_minutes_used\": 0,\n          \"included_minutes\": 3000,\n          \"minutes_used_breakdown\": {\n            \"UBUNTU\": 205,\n            \"MACOS\": 10,\n            \"WINDOWS\": 90\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsBillingUsage

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsBillingUsage
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsEnterprisePermissions_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"enabled_organizations\": \"all\",\n          \"allowed_actions\": \"selected\",\n          \"selected_actions_url\": \"https://api.github.com/enterprises/2/actions/permissions/selected-actions\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsEnterprisePermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsEnterprisePermissions
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListArtifactsForRepoOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 2,\n          \"artifacts\": [\n            {\n              \"id\": 11,\n              \"node_id\": \"MDg6QXJ0aWZhY3QxMQ==\",\n              \"name\": \"Rails\",\n              \"size_in_bytes\": 556,\n              \"url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11\",\n              \"archive_download_url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip\",\n              \"expired\": false,\n              \"created_at\": \"2020-01-10T14:59:22Z\",\n              \"expires_at\": \"2020-03-21T14:59:22Z\",\n              \"updated_at\": \"2020-02-21T14:59:22Z\"\n            },\n            {\n              \"id\": 13,\n              \"node_id\": \"MDg6QXJ0aWZhY3QxMw==\",\n              \"name\": \"\",\n              \"size_in_bytes\": 453,\n              \"url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13\",\n              \"archive_download_url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13/zip\",\n              \"expired\": false,\n              \"created_at\": \"2020-01-10T14:59:22Z\",\n              \"expires_at\": \"2020-03-21T14:59:22Z\",\n              \"updated_at\": \"2020-02-21T14:59:22Z\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListArtifactsForRepoOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListArtifactsForRepoOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListEnvironmentSecretsOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 2,\n          \"secrets\": [\n            {\n              \"name\": \"GH_TOKEN\",\n              \"created_at\": \"2019-08-10T14:59:22Z\",\n              \"updated_at\": \"2020-01-10T14:59:22Z\"\n            },\n            {\n              \"name\": \"GIST_ID\",\n              \"created_at\": \"2020-01-10T10:59:22Z\",\n              \"updated_at\": \"2020-01-11T11:59:22Z\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListEnvironmentSecretsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListEnvironmentSecretsOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListJobsForWorkflowRunOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"jobs\": [\n            {\n              \"id\": 399444496,\n              \"run_id\": 29679449,\n              \"run_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449\",\n              \"node_id\": \"MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==\",\n              \"head_sha\": \"f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0\",\n              \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496\",\n              \"html_url\": \"https://github.com/octo-org/octo-repo/runs/399444496\",\n              \"status\": \"completed\",\n              \"conclusion\": \"success\",\n              \"started_at\": \"2020-01-20T17:42:40Z\",\n              \"completed_at\": \"2020-01-20T17:44:39Z\",\n              \"name\": \"build\",\n              \"steps\": [\n                {\n                  \"name\": \"Set up job\",\n                  \"status\": \"completed\",\n                  \"conclusion\": \"success\",\n                  \"number\": 1,\n                  \"started_at\": \"2020-01-20T09:42:40.000-08:00\",\n                  \"completed_at\": \"2020-01-20T09:42:41.000-08:00\"\n                },\n                {\n                  \"name\": \"Run actions/checkout@v2\",\n                  \"status\": \"completed\",\n                  \"conclusion\": \"success\",\n                  \"number\": 2,\n                  \"started_at\": \"2020-01-20T09:42:41.000-08:00\",\n                  \"completed_at\": \"2020-01-20T09:42:45.000-08:00\"\n                },\n                {\n                  \"name\": \"Set up Ruby\",\n                  \"status\": \"completed\",\n                  \"conclusion\": \"success\",\n                  \"number\": 3,\n                  \"started_at\": \"2020-01-20T09:42:45.000-08:00\",\n                  \"completed_at\": \"2020-01-20T09:42:45.000-08:00\"\n                },\n                {\n                  \"name\": \"Run actions/cache@v2\",\n                  \"status\": \"completed\",\n                  \"conclusion\": \"success\",\n                  \"number\": 4,\n                  \"started_at\": \"2020-01-20T09:42:45.000-08:00\",\n                  \"completed_at\": \"2020-01-20T09:42:48.000-08:00\"\n                },\n                {\n                  \"name\": \"Install Bundler\",\n                  \"status\": \"completed\",\n                  \"conclusion\": \"success\",\n                  \"number\": 5,\n                  \"started_at\": \"2020-01-20T09:42:48.000-08:00\",\n                  \"completed_at\": \"2020-01-20T09:42:52.000-08:00\"\n                },\n                {\n                  \"name\": \"Install Gems\",\n                  \"status\": \"completed\",\n                  \"conclusion\": \"success\",\n                  \"number\": 6,\n                  \"started_at\": \"2020-01-20T09:42:52.000-08:00\",\n                  \"completed_at\": \"2020-01-20T09:42:53.000-08:00\"\n                },\n                {\n                  \"name\": \"Run Tests\",\n                  \"status\": \"completed\",\n                  \"conclusion\": \"success\",\n                  \"number\": 7,\n                  \"started_at\": \"2020-01-20T09:42:53.000-08:00\",\n                  \"completed_at\": \"2020-01-20T09:42:59.000-08:00\"\n                },\n                {\n                  \"name\": \"Deploy to Heroku\",\n                  \"status\": \"completed\",\n                  \"conclusion\": \"success\",\n                  \"number\": 8,\n                  \"started_at\": \"2020-01-20T09:42:59.000-08:00\",\n                  \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\n                },\n                {\n                  \"name\": \"Post actions/cache@v2\",\n                  \"status\": \"completed\",\n                  \"conclusion\": \"success\",\n                  \"number\": 16,\n                  \"started_at\": \"2020-01-20T09:44:39.000-08:00\",\n                  \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\n                },\n                {\n                  \"name\": \"Complete job\",\n                  \"status\": \"completed\",\n                  \"conclusion\": \"success\",\n                  \"number\": 17,\n                  \"started_at\": \"2020-01-20T09:44:39.000-08:00\",\n                  \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\n                }\n              ],\n              \"check_run_url\": \"https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListJobsForWorkflowRunOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListJobsForWorkflowRunOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListOrgSecretsOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 3,\n          \"secrets\": [\n            {\n              \"name\": \"GIST_ID\",\n              \"created_at\": \"2019-08-10T14:59:22Z\",\n              \"updated_at\": \"2020-01-10T14:59:22Z\",\n              \"visibility\": \"private\"\n            },\n            {\n              \"name\": \"DEPLOY_TOKEN\",\n              \"created_at\": \"2019-08-10T14:59:22Z\",\n              \"updated_at\": \"2020-01-10T14:59:22Z\",\n              \"visibility\": \"all\"\n            },\n            {\n              \"name\": \"GH_TOKEN\",\n              \"created_at\": \"2019-08-10T14:59:22Z\",\n              \"updated_at\": \"2020-01-10T14:59:22Z\",\n              \"visibility\": \"selected\",\n              \"selected_repositories_url\": \"https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListOrgSecretsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListOrgSecretsOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"repositories\": [\n            {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"template_repository\": {\n                \"id\": 1296269,\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n                \"name\": \"Hello-World\",\n                \"full_name\": \"octocat/Hello-World\",\n                \"owner\": {\n                  \"login\": \"octocat\",\n                  \"id\": 1,\n                  \"node_id\": \"MDQ6VXNlcjE=\",\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                  \"gravatar_id\": \"\",\n                  \"url\": \"https://api.github.com/users/octocat\",\n                  \"html_url\": \"https://github.com/octocat\",\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                  \"type\": \"User\",\n                  \"site_admin\": false\n                },\n                \"private\": false,\n                \"html_url\": \"https://github.com/octocat/Hello-World\",\n                \"description\": \"This your first repo!\",\n                \"fork\": false,\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n                \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n                \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n                \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n                \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n                \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n                \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n                \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n                \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n                \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n                \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n                \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n                \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n                \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n                \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n                \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n                \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n                \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n                \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n                \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n                \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n                \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n                \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n                \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n                \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n                \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n                \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n                \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n                \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n                \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n                \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n                \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n                \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n                \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n                \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n                \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n                \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n                \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n                \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n                \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n                \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n                \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n                \"homepage\": \"https://github.com\",\n                \"organization\": null,\n                \"language\": null,\n                \"forks\": 9,\n                \"forks_count\": 9,\n                \"stargazers_count\": 80,\n                \"watchers_count\": 80,\n                \"watchers\": 80,\n                \"size\": 108,\n                \"default_branch\": \"master\",\n                \"open_issues\": 0,\n                \"open_issues_count\": 0,\n                \"is_template\": true,\n                \"license\": {\n                  \"key\": \"mit\",\n                  \"name\": \"MIT License\",\n                  \"url\": \"https://api.github.com/licenses/mit\",\n                  \"spdx_id\": \"MIT\",\n                  \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                  \"html_url\": \"https://api.github.com/licenses/mit\"\n                },\n                \"topics\": [\n                  \"octocat\",\n                  \"atom\",\n                  \"electron\",\n                  \"api\"\n                ],\n                \"has_issues\": true,\n                \"has_projects\": true,\n                \"has_wiki\": true,\n                \"has_pages\": false,\n                \"has_downloads\": true,\n                \"archived\": false,\n                \"disabled\": false,\n                \"visibility\": \"public\",\n                \"pushed_at\": \"2011-01-26T19:06:43Z\",\n                \"created_at\": \"2011-01-26T19:01:12Z\",\n                \"updated_at\": \"2011-01-26T19:14:43Z\",\n                \"permissions\": {\n                  \"admin\": false,\n                  \"push\": false,\n                  \"pull\": true\n                },\n                \"allow_rebase_merge\": true,\n                \"template_repository\": null,\n                \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n                \"allow_squash_merge\": true,\n                \"allow_auto_merge\": false,\n                \"delete_branch_on_merge\": true,\n                \"allow_merge_commit\": true,\n                \"subscribers_count\": 42,\n                \"network_count\": 0\n              },\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"delete_branch_on_merge\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\n              },\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListRepoAccessToSelfHostedRunnerGroupInOrgOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListRepoSecretsOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 2,\n          \"secrets\": [\n            {\n              \"name\": \"GH_TOKEN\",\n              \"created_at\": \"2019-08-10T14:59:22Z\",\n              \"updated_at\": \"2020-01-10T14:59:22Z\"\n            },\n            {\n              \"name\": \"GIST_ID\",\n              \"created_at\": \"2020-01-10T10:59:22Z\",\n              \"updated_at\": \"2020-01-11T11:59:22Z\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListRepoSecretsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListRepoSecretsOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListRepoWorkflowsOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 2,\n          \"workflows\": [\n            {\n              \"id\": 161335,\n              \"node_id\": \"MDg6V29ya2Zsb3cxNjEzMzU=\",\n              \"name\": \"CI\",\n              \"path\": \".github/workflows/blank.yaml\",\n              \"state\": \"active\",\n              \"created_at\": \"2020-01-08T23:48:37.000-08:00\",\n              \"updated_at\": \"2020-01-08T23:50:21.000-08:00\",\n              \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335\",\n              \"html_url\": \"https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335\",\n              \"badge_url\": \"https://github.com/octo-org/octo-repo/workflows/CI/badge.svg\"\n            },\n            {\n              \"id\": 269289,\n              \"node_id\": \"MDE4OldvcmtmbG93IFNlY29uZGFyeTI2OTI4OQ==\",\n              \"name\": \"Linter\",\n              \"path\": \".github/workflows/linter.yaml\",\n              \"state\": \"active\",\n              \"created_at\": \"2020-01-08T23:48:37.000-08:00\",\n              \"updated_at\": \"2020-01-08T23:50:21.000-08:00\",\n              \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/workflows/269289\",\n              \"html_url\": \"https://github.com/octo-org/octo-repo/blob/master/.github/workflows/269289\",\n              \"badge_url\": \"https://github.com/octo-org/octo-repo/workflows/Linter/badge.svg\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListRepoWorkflowsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListRepoWorkflowsOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListSelectedReposForOrgSecretOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"repositories\": [\n            {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelectedReposForOrgSecretOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListSelectedReposForOrgSecretOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"repositories\": [\n            {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"template_repository\": null,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://github.com/licenses/mit\"\n              },\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListSelfHostedRunnerGroupsForOrgOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 3,\n          \"runner_groups\": [\n            {\n              \"id\": 1,\n              \"name\": \"Default\",\n              \"visibility\": \"all\",\n              \"default\": true,\n              \"runners_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/1/runners\",\n              \"inherited\": false,\n              \"allows_public_repositories\": true\n            },\n            {\n              \"id\": 2,\n              \"name\": \"octo-runner-group\",\n              \"visibility\": \"selected\",\n              \"default\": false,\n              \"selected_repositories_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/2/repositories\",\n              \"runners_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners\",\n              \"inherited\": true,\n              \"allows_public_repositories\": true\n            },\n            {\n              \"id\": 3,\n              \"name\": \"expensive-hardware\",\n              \"visibility\": \"private\",\n              \"default\": false,\n              \"runners_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/3/runners\",\n              \"inherited\": false,\n              \"allows_public_repositories\": true\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelfHostedRunnerGroupsForOrgOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListSelfHostedRunnerGroupsForOrgOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListSelfHostedRunnersForOrgOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 2,\n          \"runners\": [\n            {\n              \"id\": 23,\n              \"name\": \"linux_runner\",\n              \"os\": \"linux\",\n              \"status\": \"online\",\n              \"busy\": true,\n              \"labels\": [\n                {\n                  \"id\": 5,\n                  \"name\": \"self-hosted\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 7,\n                  \"name\": \"X64\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 11,\n                  \"name\": \"Linux\",\n                  \"type\": \"read-only\"\n                }\n              ]\n            },\n            {\n              \"id\": 24,\n              \"name\": \"mac_runner\",\n              \"os\": \"macos\",\n              \"status\": \"offline\",\n              \"busy\": false,\n              \"labels\": [\n                {\n                  \"id\": 5,\n                  \"name\": \"self-hosted\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 7,\n                  \"name\": \"X64\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 20,\n                  \"name\": \"macOS\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 21,\n                  \"name\": \"no-gpu\",\n                  \"type\": \"custom\"\n                }\n              ]\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelfHostedRunnersForOrgOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListSelfHostedRunnersForOrgOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListSelfHostedRunnersForRepoOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 2,\n          \"runners\": [\n            {\n              \"id\": 23,\n              \"name\": \"linux_runner\",\n              \"os\": \"linux\",\n              \"status\": \"online\",\n              \"busy\": true,\n              \"labels\": [\n                {\n                  \"id\": 5,\n                  \"name\": \"self-hosted\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 7,\n                  \"name\": \"X64\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 11,\n                  \"name\": \"Linux\",\n                  \"type\": \"read-only\"\n                }\n              ]\n            },\n            {\n              \"id\": 24,\n              \"name\": \"mac_runner\",\n              \"os\": \"macos\",\n              \"status\": \"offline\",\n              \"busy\": false,\n              \"labels\": [\n                {\n                  \"id\": 5,\n                  \"name\": \"self-hosted\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 7,\n                  \"name\": \"X64\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 20,\n                  \"name\": \"macOS\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 21,\n                  \"name\": \"no-gpu\",\n                  \"type\": \"custom\"\n                }\n              ]\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelfHostedRunnersForRepoOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListSelfHostedRunnersForRepoOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListSelfHostedRunnersInGroupForOrgOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 2,\n          \"runners\": [\n            {\n              \"id\": 23,\n              \"name\": \"linux_runner\",\n              \"os\": \"linux\",\n              \"status\": \"online\",\n              \"busy\": true,\n              \"labels\": [\n                {\n                  \"id\": 5,\n                  \"name\": \"self-hosted\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 7,\n                  \"name\": \"X64\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 11,\n                  \"name\": \"Linux\",\n                  \"type\": \"read-only\"\n                }\n              ]\n            },\n            {\n              \"id\": 24,\n              \"name\": \"mac_runner\",\n              \"os\": \"macos\",\n              \"status\": \"offline\",\n              \"busy\": false,\n              \"labels\": [\n                {\n                  \"id\": 5,\n                  \"name\": \"self-hosted\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 7,\n                  \"name\": \"X64\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 20,\n                  \"name\": \"macOS\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 21,\n                  \"name\": \"no-gpu\",\n                  \"type\": \"custom\"\n                }\n              ]\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListSelfHostedRunnersInGroupForOrgOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListSelfHostedRunnersInGroupForOrgOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListWorkflowRunArtifactsOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 2,\n          \"artifacts\": [\n            {\n              \"id\": 11,\n              \"node_id\": \"MDg6QXJ0aWZhY3QxMQ==\",\n              \"name\": \"Rails\",\n              \"size_in_bytes\": 556,\n              \"url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11\",\n              \"archive_download_url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip\",\n              \"expired\": false,\n              \"created_at\": \"2020-01-10T14:59:22Z\",\n              \"expires_at\": \"2020-03-21T14:59:22Z\",\n              \"updated_at\": \"2020-02-21T14:59:22Z\"\n            },\n            {\n              \"id\": 13,\n              \"node_id\": \"MDg6QXJ0aWZhY3QxMw==\",\n              \"name\": \"\",\n              \"size_in_bytes\": 453,\n              \"url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13\",\n              \"archive_download_url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13/zip\",\n              \"expired\": false,\n              \"created_at\": \"2020-01-10T14:59:22Z\",\n              \"expires_at\": \"2020-03-21T14:59:22Z\",\n              \"updated_at\": \"2020-02-21T14:59:22Z\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListWorkflowRunArtifactsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListWorkflowRunArtifactsOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsListWorkflowRunsForRepoOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"workflow_runs\": [\n            {\n              \"id\": 30433642,\n              \"name\": \"Build\",\n              \"node_id\": \"MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==\",\n              \"head_branch\": \"master\",\n              \"head_sha\": \"acb5820ced9479c074f688cc328bf03f341a511d\",\n              \"run_number\": 562,\n              \"event\": \"push\",\n              \"status\": \"queued\",\n              \"conclusion\": null,\n              \"workflow_id\": 159038,\n              \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642\",\n              \"html_url\": \"https://github.com/octo-org/octo-repo/actions/runs/30433642\",\n              \"pull_requests\": [\n\n              ],\n              \"created_at\": \"2020-01-22T19:33:08Z\",\n              \"updated_at\": \"2020-01-22T19:33:08Z\",\n              \"jobs_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs\",\n              \"logs_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs\",\n              \"check_suite_url\": \"https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374\",\n              \"artifacts_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts\",\n              \"cancel_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel\",\n              \"rerun_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun\",\n              \"workflow_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038\",\n              \"head_commit\": {\n                \"id\": \"acb5820ced9479c074f688cc328bf03f341a511d\",\n                \"tree_id\": \"d23f6eedb1e1b9610bbc754ddb5197bfe7271223\",\n                \"message\": \"Create linter.yaml\",\n                \"timestamp\": \"2020-01-22T19:33:05Z\",\n                \"author\": {\n                  \"name\": \"Octo Cat\",\n                  \"email\": \"octocat@github.com\"\n                },\n                \"committer\": {\n                  \"name\": \"GitHub\",\n                  \"email\": \"noreply@github.com\"\n                }\n              },\n              \"repository\": {\n                \"id\": 1296269,\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n                \"name\": \"Hello-World\",\n                \"full_name\": \"octocat/Hello-World\",\n                \"owner\": {\n                  \"login\": \"octocat\",\n                  \"id\": 1,\n                  \"node_id\": \"MDQ6VXNlcjE=\",\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                  \"gravatar_id\": \"\",\n                  \"url\": \"https://api.github.com/users/octocat\",\n                  \"html_url\": \"https://github.com/octocat\",\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                  \"type\": \"User\",\n                  \"site_admin\": false\n                },\n                \"private\": false,\n                \"html_url\": \"https://github.com/octocat/Hello-World\",\n                \"description\": \"This your first repo!\",\n                \"fork\": false,\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n                \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n                \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n                \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n                \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n                \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n                \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n                \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n                \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n                \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n                \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n                \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n                \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n                \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n                \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n                \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n                \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n                \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n                \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n                \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n                \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n                \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n                \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n                \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n                \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n                \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n                \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n                \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n                \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n                \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n                \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n                \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n                \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n                \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n                \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n                \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n                \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n                \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n                \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\n              },\n              \"head_repository\": {\n                \"id\": 217723378,\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=\",\n                \"name\": \"octo-repo\",\n                \"full_name\": \"octo-org/octo-repo\",\n                \"private\": true,\n                \"owner\": {\n                  \"login\": \"octocat\",\n                  \"id\": 1,\n                  \"node_id\": \"MDQ6VXNlcjE=\",\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                  \"gravatar_id\": \"\",\n                  \"url\": \"https://api.github.com/users/octocat\",\n                  \"html_url\": \"https://github.com/octocat\",\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                  \"type\": \"User\",\n                  \"site_admin\": false\n                },\n                \"html_url\": \"https://github.com/octo-org/octo-repo\",\n                \"description\": null,\n                \"fork\": false,\n                \"url\": \"https://api.github.com/repos/octo-org/octo-repo\",\n                \"forks_url\": \"https://api.github.com/repos/octo-org/octo-repo/forks\",\n                \"keys_url\": \"https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}\",\n                \"collaborators_url\": \"https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}\",\n                \"teams_url\": \"https://api.github.com/repos/octo-org/octo-repo/teams\",\n                \"hooks_url\": \"https://api.github.com/repos/octo-org/octo-repo/hooks\",\n                \"issue_events_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}\",\n                \"events_url\": \"https://api.github.com/repos/octo-org/octo-repo/events\",\n                \"assignees_url\": \"https://api.github.com/repos/octo-org/octo-repo/assignees{/user}\",\n                \"branches_url\": \"https://api.github.com/repos/octo-org/octo-repo/branches{/branch}\",\n                \"tags_url\": \"https://api.github.com/repos/octo-org/octo-repo/tags\",\n                \"blobs_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}\",\n                \"git_tags_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}\",\n                \"git_refs_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}\",\n                \"trees_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}\",\n                \"statuses_url\": \"https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}\",\n                \"languages_url\": \"https://api.github.com/repos/octo-org/octo-repo/languages\",\n                \"stargazers_url\": \"https://api.github.com/repos/octo-org/octo-repo/stargazers\",\n                \"contributors_url\": \"https://api.github.com/repos/octo-org/octo-repo/contributors\",\n                \"subscribers_url\": \"https://api.github.com/repos/octo-org/octo-repo/subscribers\",\n                \"subscription_url\": \"https://api.github.com/repos/octo-org/octo-repo/subscription\",\n                \"commits_url\": \"https://api.github.com/repos/octo-org/octo-repo/commits{/sha}\",\n                \"git_commits_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}\",\n                \"comments_url\": \"https://api.github.com/repos/octo-org/octo-repo/comments{/number}\",\n                \"issue_comment_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}\",\n                \"contents_url\": \"https://api.github.com/repos/octo-org/octo-repo/contents/{+path}\",\n                \"compare_url\": \"https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}\",\n                \"merges_url\": \"https://api.github.com/repos/octo-org/octo-repo/merges\",\n                \"archive_url\": \"https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}\",\n                \"downloads_url\": \"https://api.github.com/repos/octo-org/octo-repo/downloads\",\n                \"issues_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues{/number}\",\n                \"pulls_url\": \"https://api.github.com/repos/octo-org/octo-repo/pulls{/number}\",\n                \"milestones_url\": \"https://api.github.com/repos/octo-org/octo-repo/milestones{/number}\",\n                \"notifications_url\": \"https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}\",\n                \"labels_url\": \"https://api.github.com/repos/octo-org/octo-repo/labels{/name}\",\n                \"releases_url\": \"https://api.github.com/repos/octo-org/octo-repo/releases{/id}\",\n                \"deployments_url\": \"https://api.github.com/repos/octo-org/octo-repo/deployments\"\n              }\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsListWorkflowRunsForRepoOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsListWorkflowRunsForRepoOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsOrganizationPermissions_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"enabled_repositories\": \"all\",\n          \"allowed_actions\": \"selected\",\n          \"selected_actions_url\": \"https://api.github.com/organizations/42/actions/permissions/selected-actions\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsOrganizationPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsOrganizationPermissions
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsPublicKey_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"key_id\": \"012345678912345678\",\n          \"key\": \"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsPublicKey

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsPublicKey
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsRepositoryPermissions_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"enabled\": true,\n          \"allowed_actions\": \"selected\",\n          \"selected_actions_url\": \"https://api.github.com/repositories/42/actions/permissions/selected-actions\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsRepositoryPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsRepositoryPermissions
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsReviewPendingDeploymentsForRunReqState_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"approved\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsReviewPendingDeploymentsForRunReqState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsReviewPendingDeploymentsForRunReqState
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestActionsSecret_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"name\": \"GH_TOKEN\",\n          \"created_at\": \"2019-08-10T14:59:22Z\",\n          \"updated_at\": \"2020-01-10T14:59:22Z\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ActionsSecret

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ActionsSecret
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestAppPermissions_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"contents\": \"read\",\n          \"issues\": \"read\",\n          \"deployments\": \"write\",\n          \"single_file\": \"read\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AppPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 AppPermissions
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestApplicationGrant_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"url\": \"https://api.github.com/applications/grants/1\",\n          \"app\": {\n            \"url\": \"http://my-github-app.com\",\n            \"name\": \"my github app\",\n            \"client_id\": \"abcde12345fghij67890\"\n          },\n          \"created_at\": \"2011-09-06T17:26:27Z\",\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\n          \"scopes\": [\n            \"public_repo\"\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ApplicationGrant

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ApplicationGrant
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestAppsListInstallationReposForAuthenticatedUserOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"repositories\": [\n            {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"template_repository\": null,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://github.com/licenses/mit\"\n              },\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AppsListInstallationReposForAuthenticatedUserOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 AppsListInstallationReposForAuthenticatedUserOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestAppsListReposAccessibleToInstallationOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"repositories\": [\n            {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"allow_rebase_merge\": true,\n              \"template_repository\": null,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://github.com/licenses/mit\"\n              },\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AppsListReposAccessibleToInstallationOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 AppsListReposAccessibleToInstallationOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestAppsUpdateWebhookConfigForAppReq_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                  \"content_type\": \"json\",\n                  \"insecure_ssl\": \"0\",\n                  \"secret\": \"********\",\n                  \"url\": \"https://example.com/webhook\"\n                }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AppsUpdateWebhookConfigForAppReq

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 AppsUpdateWebhookConfigForAppReq
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestArtifact_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 11,\n          \"node_id\": \"MDg6QXJ0aWZhY3QxMQ==\",\n          \"name\": \"Rails\",\n          \"size_in_bytes\": 556,\n          \"url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11\",\n          \"archive_download_url\": \"https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip\",\n          \"expired\": false,\n          \"created_at\": \"2020-01-10T14:59:22Z\",\n          \"expires_at\": \"2020-01-21T14:59:22Z\",\n          \"updated_at\": \"2020-01-21T14:59:22Z\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Artifact

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Artifact
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestAuthenticationToken_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"token\": \"AABF3JGZDX3P5PMEXLND6TS6FCWO6\",\n          \"expires_at\": \"2020-01-29T12:13:35.123-08:00\"\n        }"},
		{Input: "{\n          \"token\": \"LLBF3JGZDX3P5PMEXLND6TS6FCWO6\",\n          \"expires_at\": \"2020-01-22T12:13:35.123-08:00\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AuthenticationToken

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 AuthenticationToken
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestAuthenticationTokenPermissions_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n              \"issues\": \"read\",\n              \"deployments\": \"write\"\n            }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AuthenticationTokenPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 AuthenticationTokenPermissions
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestAuthorAssociation_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"OWNER\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ AuthorAssociation

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 AuthorAssociation
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestAuthorization_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"url\": \"https://api.github.com/authorizations/1\",\n          \"scopes\": [\n\n          ],\n          \"token\": \"ghu_16C7e42F292c6912E7710c838347Ae178B4a\",\n          \"token_last_eight\": \"Ae178B4a\",\n          \"hashed_token\": \"25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8\",\n          \"app\": {\n            \"url\": \"http://my-github-app.com\",\n            \"name\": \"my github app\",\n            \"client_id\": \"abcde12345fghij67890\"\n          },\n          \"note\": \"optional note\",\n          \"note_url\": \"http://optional/note/url\",\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\n          \"created_at\": \"2011-09-06T17:26:27Z\",\n          \"fingerprint\": \"jklmnop12345678\",\n          \"expires_at\": \"2011-09-08T17:26:27Z\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"installation\": {\n            \"permissions\": {\n              \"metadata\": \"read\",\n              \"issues\": \"write\",\n              \"contents\": \"read\"\n            },\n            \"repository_selection\": \"selected\",\n            \"single_file_name\": \".github/workflow.yml\",\n            \"repositories_url\": \"https://api.github.com/user/repos\",\n            \"account\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"has_multiple_single_files\": false,\n            \"single_file_paths\": [\n\n            ]\n          }\n        }"},
		{Input: "{\n          \"id\": 1,\n          \"url\": \"https://api.github.com/authorizations/1\",\n          \"scopes\": [\n            \"public_repo\"\n          ],\n          \"token\": \"ghu_16C7e42F292c6912E7710c838347Ae178B4a\",\n          \"token_last_eight\": \"Ae178B4a\",\n          \"hashed_token\": \"25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8\",\n          \"app\": {\n            \"url\": \"http://my-github-app.com\",\n            \"name\": \"my github app\",\n            \"client_id\": \"abcde12345fghij67890\"\n          },\n          \"note\": \"optional note\",\n          \"note_url\": \"http://optional/note/url\",\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\n          \"created_at\": \"2011-09-06T17:26:27Z\",\n          \"expires_at\": \"2011-10-06T17:26:27Z\",\n          \"fingerprint\": \"\"\n        }"},
		{Input: "{\n          \"id\": 1,\n          \"url\": \"https://api.github.com/authorizations/1\",\n          \"scopes\": [\n            \"public_repo\"\n          ],\n          \"token\": \"ghu_16C7e42F292c6912E7710c838347Ae178B4a\",\n          \"token_last_eight\": \"Ae178B4a\",\n          \"hashed_token\": \"25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8\",\n          \"app\": {\n            \"url\": \"http://my-github-app.com\",\n            \"name\": \"my github app\",\n            \"client_id\": \"abcde12345fghij67890\"\n          },\n          \"note\": \"optional note\",\n          \"note_url\": \"http://optional/note/url\",\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\n          \"created_at\": \"2011-09-06T17:26:27Z\",\n          \"expires_at\": \"2011-10-06T17:26:27Z\",\n          \"fingerprint\": \"jklmnop12345678\"\n        }"},
		{Input: "{\n          \"id\": 1,\n          \"url\": \"https://api.github.com/authorizations/1\",\n          \"scopes\": [\n            \"public_repo\"\n          ],\n          \"token\": \"ghu_16C7e42F292c6912E7710c838347Ae178B4a\",\n          \"token_last_eight\": \"Ae178B4a\",\n          \"hashed_token\": \"25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8\",\n          \"app\": {\n            \"url\": \"http://my-github-app.com\",\n            \"name\": \"my github app\",\n            \"client_id\": \"abcde12345fghij67890\"\n          },\n          \"note\": \"optional note\",\n          \"note_url\": \"http://optional/note/url\",\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\n          \"created_at\": \"2011-09-06T17:26:27Z\",\n          \"expires_at\": \"2012-10-06T17:26:27Z\",\n          \"fingerprint\": \"jklmnop12345678\"\n        }"},
		{Input: "{\n          \"id\": 1,\n          \"url\": \"https://api.github.com/authorizations/1\",\n          \"scopes\": [\n            \"public_repo\",\n            \"user\"\n          ],\n          \"token\": \"ghu_16C7e42F292c6912E7710c838347Ae178B4a\",\n          \"token_last_eight\": \"Ae178B4a\",\n          \"hashed_token\": \"25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8\",\n          \"app\": {\n            \"url\": \"http://my-github-app.com\",\n            \"name\": \"my github app\",\n            \"client_id\": \"abcde12345fghij67890\"\n          },\n          \"note\": \"optional note\",\n          \"note_url\": \"http://optional/note/url\",\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\n          \"created_at\": \"2011-09-06T17:26:27Z\",\n          \"fingerprint\": \"jklmnop12345678\",\n          \"expires_at\": \"2011-09-08T17:26:27Z\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Authorization

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Authorization
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestAutolink_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"key_prefix\": \"TICKET-\",\n          \"url_template\": \"https://example.com/TICKET?query=<num>\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Autolink

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Autolink
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestBaseGist_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d\",\n          \"forks_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/forks\",\n          \"commits_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/commits\",\n          \"id\": \"aa5a315d61ae9438b18d\",\n          \"node_id\": \"MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk\",\n          \"git_pull_url\": \"https://gist.github.com/aa5a315d61ae9438b18d.git\",\n          \"git_push_url\": \"https://gist.github.com/aa5a315d61ae9438b18d.git\",\n          \"html_url\": \"https://gist.github.com/aa5a315d61ae9438b18d\",\n          \"files\": {\n            \"hello_world.rb\": {\n              \"filename\": \"hello_world.rb\",\n              \"type\": \"application/x-ruby\",\n              \"language\": \"Ruby\",\n              \"raw_url\": \"https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb\",\n              \"size\": 167\n            }\n          },\n          \"public\": true,\n          \"created_at\": \"2010-04-14T02:15:15Z\",\n          \"updated_at\": \"2011-06-20T11:34:15Z\",\n          \"description\": \"Hello World Examples\",\n          \"comments\": 0,\n          \"user\": null,\n          \"comments_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/comments/\",\n          \"owner\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"truncated\": false\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ BaseGist

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 BaseGist
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestBlob_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"content\": \"Q29udGVudCBvZiB0aGUgYmxvYg==\",\n          \"encoding\": \"base64\",\n          \"url\": \"https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\",\n          \"sha\": \"3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\",\n          \"size\": 19,\n          \"node_id\": \"Q29udGVudCBvZiB0aGUgYmxvYg==\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Blob

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Blob
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestBranchProtection_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection\",\n          \"required_status_checks\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks\",\n            \"contexts\": [\n              \"continuous-integration/travis-ci\"\n            ],\n            \"contexts_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts\",\n            \"enforcement_level\": \"non_admins\"\n          },\n          \"enforce_admins\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins\",\n            \"enabled\": true\n          },\n          \"required_pull_request_reviews\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews\",\n            \"dismissal_restrictions\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions\",\n              \"users_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams\",\n              \"users\": [\n                {\n                  \"login\": \"octocat\",\n                  \"id\": 1,\n                  \"node_id\": \"MDQ6VXNlcjE=\",\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                  \"gravatar_id\": \"\",\n                  \"url\": \"https://api.github.com/users/octocat\",\n                  \"html_url\": \"https://github.com/octocat\",\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                  \"type\": \"User\",\n                  \"site_admin\": false\n                }\n              ],\n              \"teams\": [\n                {\n                  \"id\": 1,\n                  \"node_id\": \"MDQ6VGVhbTE=\",\n                  \"url\": \"https://api.github.com/teams/1\",\n                  \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\n                  \"name\": \"Justice League\",\n                  \"slug\": \"justice-league\",\n                  \"description\": \"A great team.\",\n                  \"privacy\": \"closed\",\n                  \"permission\": \"admin\",\n                  \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\n                  \"repositories_url\": \"https://api.github.com/teams/1/repos\",\n                  \"parent\": null\n                }\n              ]\n            },\n            \"dismiss_stale_reviews\": true,\n            \"require_code_owner_reviews\": true,\n            \"required_approving_review_count\": 2\n          },\n          \"restrictions\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions\",\n            \"users_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/users\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams\",\n            \"apps_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams\",\n            \"users\": [\n              {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              }\n            ],\n            \"teams\": [\n              {\n                \"id\": 1,\n                \"node_id\": \"MDQ6VGVhbTE=\",\n                \"url\": \"https://api.github.com/teams/1\",\n                \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\n                \"name\": \"Justice League\",\n                \"slug\": \"justice-league\",\n                \"description\": \"A great team.\",\n                \"privacy\": \"closed\",\n                \"permission\": \"admin\",\n                \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\n                \"repositories_url\": \"https://api.github.com/teams/1/repos\",\n                \"parent\": null\n              }\n            ],\n            \"apps\": [\n              {\n                \"id\": 1,\n                \"slug\": \"octoapp\",\n                \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\n                \"owner\": {\n                  \"login\": \"github\",\n                  \"id\": 1,\n                  \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n                  \"url\": \"https://api.github.com/orgs/github\",\n                  \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n                  \"events_url\": \"https://api.github.com/orgs/github/events\",\n                  \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\n                  \"issues_url\": \"https://api.github.com/orgs/github/issues\",\n                  \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\n                  \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                  \"description\": \"A great organization\"\n                },\n                \"name\": \"Octocat App\",\n                \"description\": \"\",\n                \"external_url\": \"https://example.com\",\n                \"html_url\": \"https://github.com/apps/octoapp\",\n                \"created_at\": \"2017-07-08T16:18:44-04:00\",\n                \"updated_at\": \"2017-07-08T16:18:44-04:00\",\n                \"permissions\": {\n                  \"metadata\": \"read\",\n                  \"contents\": \"read\",\n                  \"issues\": \"write\",\n                  \"single_file\": \"write\"\n                },\n                \"events\": [\n                  \"push\",\n                  \"pull_request\"\n                ]\n              }\n            ]\n          },\n          \"required_linear_history\": {\n            \"enabled\": true\n          },\n          \"allow_force_pushes\": {\n            \"enabled\": true\n          },\n          \"allow_deletions\": {\n            \"enabled\": true\n          },\n          \"required_conversation_resolution\": {\n            \"enabled\": true\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ BranchProtection

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 BranchProtection
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestBranchRestrictionPolicy_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions\",\n          \"users_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/users\",\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams\",\n          \"apps_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams\",\n          \"users\": [\n            {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            }\n          ],\n          \"teams\": [\n            {\n              \"id\": 1,\n              \"node_id\": \"MDQ6VGVhbTE=\",\n              \"url\": \"https://api.github.com/teams/1\",\n              \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\n              \"name\": \"Justice League\",\n              \"slug\": \"justice-league\",\n              \"description\": \"A great team.\",\n              \"privacy\": \"closed\",\n              \"permission\": \"admin\",\n              \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\n              \"repositories_url\": \"https://api.github.com/teams/1/repos\",\n              \"parent\": null\n            }\n          ],\n          \"apps\": [\n            {\n              \"id\": 1,\n              \"slug\": \"octoapp\",\n              \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\n              \"owner\": {\n                \"login\": \"github\",\n                \"id\": 1,\n                \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n                \"url\": \"https://api.github.com/orgs/github\",\n                \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n                \"events_url\": \"https://api.github.com/orgs/github/events\",\n                \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\n                \"issues_url\": \"https://api.github.com/orgs/github/issues\",\n                \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\n                \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"description\": \"A great organization\"\n              },\n              \"name\": \"Octocat App\",\n              \"description\": \"\",\n              \"external_url\": \"https://example.com\",\n              \"html_url\": \"https://github.com/apps/octoapp\",\n              \"created_at\": \"2017-07-08T16:18:44-04:00\",\n              \"updated_at\": \"2017-07-08T16:18:44-04:00\",\n              \"permissions\": {\n                \"metadata\": \"read\",\n                \"contents\": \"read\",\n                \"issues\": \"write\",\n                \"single_file\": \"write\"\n              },\n              \"events\": [\n                \"push\",\n                \"pull_request\"\n              ]\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ BranchRestrictionPolicy

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 BranchRestrictionPolicy
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestBranchWithProtection_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"name\": \"master\",\n          \"commit\": {\n            \"sha\": \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\n            \"node_id\": \"MDY6Q29tbWl0N2ZkMWE2MGIwMWY5MWIzMTRmNTk5NTVhNGU0ZDRlODBkOGVkZjExZA==\",\n            \"commit\": {\n              \"author\": {\n                \"name\": \"The Octocat\",\n                \"date\": \"2012-03-06T15:06:50-08:00\",\n                \"email\": \"octocat@nowhere.com\"\n              },\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\n              \"message\": \"Merge pull request #6 from Spaceghost/patch-1\\n\\nNew line at end of file.\",\n              \"tree\": {\n                \"sha\": \"b4eecafa9be2f2006ce1b709d6857b07069b4608\",\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/b4eecafa9be2f2006ce1b709d6857b07069b4608\"\n              },\n              \"committer\": {\n                \"name\": \"The Octocat\",\n                \"date\": \"2012-03-06T15:06:50-08:00\",\n                \"email\": \"octocat@nowhere.com\"\n              },\n              \"verification\": {\n                \"verified\": false,\n                \"reason\": \"unsigned\",\n                \"signature\": null,\n                \"payload\": null\n              },\n              \"comment_count\": 0\n            },\n            \"author\": {\n              \"gravatar_id\": \"\",\n              \"avatar_url\": \"https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"id\": 583231,\n              \"login\": \"octocat\",\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": true\n            },\n            \"parents\": [\n              {\n                \"sha\": \"553c2077f0edc3d5dc5d17262f6aa498e69d6f8e\",\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e\"\n              },\n              {\n                \"sha\": \"762941318ee16e59dabbacb1b4049eec22f0d303\",\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/762941318ee16e59dabbacb1b4049eec22f0d303\"\n              }\n            ],\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\n            \"committer\": {\n              \"gravatar_id\": \"\",\n              \"avatar_url\": \"https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"id\": 583231,\n              \"login\": \"octocat\",\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": true\n            },\n            \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments\"\n          },\n          \"_links\": {\n            \"html\": \"https://github.com/octocat/Hello-World/tree/master\",\n            \"self\": \"https://api.github.com/repos/octocat/Hello-World/branches/master\"\n          },\n          \"protected\": true,\n          \"protection\": {\n            \"required_status_checks\": {\n              \"enforcement_level\": \"non_admins\",\n              \"contexts\": [\n                \"ci-test\",\n                \"linter\"\n              ]\n            }\n          },\n          \"protection_url\": \"https://api.github.com/repos/octocat/hello-world/branches/master/protection\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ BranchWithProtection

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 BranchWithProtection
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCheckRun_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 4,\n          \"head_sha\": \"ce587453ced02b1526dfb4cb910479d431683101\",\n          \"node_id\": \"MDg6Q2hlY2tSdW40\",\n          \"external_id\": \"\",\n          \"url\": \"https://api.github.com/repos/github/hello-world/check-runs/4\",\n          \"html_url\": \"https://github.com/github/hello-world/runs/4\",\n          \"details_url\": \"https://example.com\",\n          \"status\": \"completed\",\n          \"conclusion\": \"neutral\",\n          \"started_at\": \"2018-05-04T01:14:52Z\",\n          \"completed_at\": \"2018-05-04T01:14:52Z\",\n          \"output\": {\n            \"title\": \"Mighty Readme report\",\n            \"summary\": \"There are 0 failures, 2 warnings, and 1 notice.\",\n            \"text\": \"You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.\",\n            \"annotations_count\": 2,\n            \"annotations_url\": \"https://api.github.com/repos/github/hello-world/check-runs/4/annotations\"\n          },\n          \"name\": \"mighty_readme\",\n          \"check_suite\": {\n            \"id\": 5\n          },\n          \"app\": {\n            \"id\": 1,\n            \"slug\": \"octoapp\",\n            \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\n            \"owner\": {\n              \"login\": \"github\",\n              \"id\": 1,\n              \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n              \"url\": \"https://api.github.com/orgs/github\",\n              \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n              \"events_url\": \"https://api.github.com/orgs/github/events\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": true\n            },\n            \"name\": \"Octocat App\",\n            \"description\": \"\",\n            \"external_url\": \"https://example.com\",\n            \"html_url\": \"https://github.com/apps/octoapp\",\n            \"created_at\": \"2017-07-08T16:18:44-04:00\",\n            \"updated_at\": \"2017-07-08T16:18:44-04:00\",\n            \"permissions\": {\n              \"metadata\": \"read\",\n              \"contents\": \"read\",\n              \"issues\": \"write\",\n              \"single_file\": \"write\"\n            },\n            \"events\": [\n              \"push\",\n              \"pull_request\"\n            ]\n          },\n          \"pull_requests\": [\n            {\n              \"url\": \"https://api.github.com/repos/github/hello-world/pulls/1\",\n              \"id\": 1934,\n              \"number\": 3956,\n              \"head\": {\n                \"ref\": \"say-hello\",\n                \"sha\": \"3dca65fa3e8d4b3da3f3d056c59aee1c50f41390\",\n                \"repo\": {\n                  \"id\": 526,\n                  \"url\": \"https://api.github.com/repos/github/hello-world\",\n                  \"name\": \"hello-world\"\n                }\n              },\n              \"base\": {\n                \"ref\": \"master\",\n                \"sha\": \"e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f\",\n                \"repo\": {\n                  \"id\": 526,\n                  \"url\": \"https://api.github.com/repos/github/hello-world\",\n                  \"name\": \"hello-world\"\n                }\n              }\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckRun

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CheckRun
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCheckRunConclusion_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"neutral\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckRunConclusion

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CheckRunConclusion
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCheckRunStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"queued\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckRunStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CheckRunStatus
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCheckSuite_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 5,\n          \"node_id\": \"MDEwOkNoZWNrU3VpdGU1\",\n          \"head_branch\": \"master\",\n          \"head_sha\": \"d6fde92930d4715a2b49857d24b940956b26d2d3\",\n          \"status\": \"completed\",\n          \"conclusion\": \"neutral\",\n          \"url\": \"https://api.github.com/repos/github/hello-world/check-suites/5\",\n          \"before\": \"146e867f55c26428e5f9fade55a9bbf5e95a7912\",\n          \"after\": \"d6fde92930d4715a2b49857d24b940956b26d2d3\",\n          \"pull_requests\": [\n\n          ],\n          \"created_at\": \"2017-07-08T16:18:44-04:00\",\n          \"updated_at\": \"2017-07-08T16:18:44-04:00\",\n          \"app\": {\n            \"id\": 1,\n            \"slug\": \"octoapp\",\n            \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\n            \"owner\": {\n              \"login\": \"github\",\n              \"id\": 1,\n              \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n              \"url\": \"https://api.github.com/orgs/github\",\n              \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n              \"events_url\": \"https://api.github.com/orgs/github/events\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": true\n            },\n            \"name\": \"Octocat App\",\n            \"description\": \"\",\n            \"external_url\": \"https://example.com\",\n            \"html_url\": \"https://github.com/apps/octoapp\",\n            \"created_at\": \"2017-07-08T16:18:44-04:00\",\n            \"updated_at\": \"2017-07-08T16:18:44-04:00\",\n            \"permissions\": {\n              \"metadata\": \"read\",\n              \"contents\": \"read\",\n              \"issues\": \"write\",\n              \"single_file\": \"write\"\n            },\n            \"events\": [\n              \"push\",\n              \"pull_request\"\n            ]\n          },\n          \"repository\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World\",\n            \"full_name\": \"octocat/Hello-World\",\n            \"template_repository\": {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World-Template\",\n              \"full_name\": \"octocat/Hello-World-Template\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks\": 9,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"watchers\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues\": 0,\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://api.github.com/licenses/mit\"\n              },\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0\n            },\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n            \"homepage\": \"https://github.com\",\n            \"language\": null,\n            \"forks_count\": 9,\n            \"stargazers_count\": 80,\n            \"watchers_count\": 80,\n            \"size\": 108,\n            \"default_branch\": \"master\",\n            \"open_issues_count\": 0,\n            \"is_template\": false,\n            \"topics\": [\n              \"octocat\",\n              \"atom\",\n              \"electron\",\n              \"api\"\n            ],\n            \"has_issues\": true,\n            \"has_projects\": true,\n            \"has_wiki\": true,\n            \"has_pages\": false,\n            \"has_downloads\": true,\n            \"archived\": false,\n            \"disabled\": false,\n            \"visibility\": \"public\",\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\n            \"created_at\": \"2011-01-26T19:01:12Z\",\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\n            \"permissions\": {\n              \"admin\": false,\n              \"push\": false,\n              \"pull\": true\n            },\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n            \"delete_branch_on_merge\": true,\n            \"subscribers_count\": 42,\n            \"network_count\": 0\n          },\n          \"head_commit\": {\n            \"id\": \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\n            \"tree_id\": \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\n            \"message\": \"Merge pull request #6 from Spaceghost/patch-1\\n\\nNew line at end of file.\",\n            \"timestamp\": \"2016-10-10T00:00:00Z\",\n            \"author\": {\n              \"name\": \"The Octocat\",\n              \"email\": \"octocat@nowhere.com\"\n            },\n            \"committer\": {\n              \"name\": \"The Octocat\",\n              \"email\": \"octocat@nowhere.com\"\n            }\n          },\n          \"latest_check_runs_count\": 1,\n          \"check_runs_url\": \"https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckSuite

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CheckSuite
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCheckSuiteConclusion_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"neutral\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckSuiteConclusion

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CheckSuiteConclusion
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCheckSuitePreference_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"preferences\": {\n            \"auto_trigger_checks\": [\n              {\n                \"app_id\": 2,\n                \"setting\": true\n              },\n              {\n                \"app_id\": 4,\n                \"setting\": false\n              }\n            ]\n          },\n          \"repository\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World\",\n            \"full_name\": \"octocat/Hello-World\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n            \"homepage\": \"https://github.com\",\n            \"language\": null,\n            \"forks_count\": 9,\n            \"stargazers_count\": 80,\n            \"watchers_count\": 80,\n            \"size\": 108,\n            \"default_branch\": \"master\",\n            \"open_issues_count\": 0,\n            \"is_template\": false,\n            \"topics\": [\n              \"octocat\",\n              \"atom\",\n              \"electron\",\n              \"api\"\n            ],\n            \"has_issues\": true,\n            \"has_projects\": true,\n            \"has_wiki\": true,\n            \"has_pages\": false,\n            \"has_downloads\": true,\n            \"archived\": false,\n            \"disabled\": false,\n            \"visibility\": \"public\",\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\n            \"created_at\": \"2011-01-26T19:01:12Z\",\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\n            \"permissions\": {\n              \"admin\": false,\n              \"push\": false,\n              \"pull\": true\n            },\n            \"template_repository\": {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World-Template\",\n              \"full_name\": \"octocat/Hello-World-Template\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks\": 9,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"watchers\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues\": 0,\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://api.github.com/licenses/mit\"\n              },\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0\n            }\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckSuitePreference

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CheckSuitePreference
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCheckSuiteStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"completed\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CheckSuiteStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CheckSuiteStatus
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestChecksListForRefOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"check_runs\": [\n            {\n              \"id\": 4,\n              \"head_sha\": \"ce587453ced02b1526dfb4cb910479d431683101\",\n              \"node_id\": \"MDg6Q2hlY2tSdW40\",\n              \"external_id\": \"\",\n              \"url\": \"https://api.github.com/repos/github/hello-world/check-runs/4\",\n              \"html_url\": \"https://github.com/github/hello-world/runs/4\",\n              \"details_url\": \"https://example.com\",\n              \"status\": \"completed\",\n              \"conclusion\": \"neutral\",\n              \"started_at\": \"2018-05-04T01:14:52Z\",\n              \"completed_at\": \"2018-05-04T01:14:52Z\",\n              \"output\": {\n                \"title\": \"Mighty Readme report\",\n                \"summary\": \"There are 0 failures, 2 warnings, and 1 notice.\",\n                \"text\": \"You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.\",\n                \"annotations_count\": 2,\n                \"annotations_url\": \"https://api.github.com/repos/github/hello-world/check-runs/4/annotations\"\n              },\n              \"name\": \"mighty_readme\",\n              \"check_suite\": {\n                \"id\": 5\n              },\n              \"app\": {\n                \"id\": 1,\n                \"slug\": \"octoapp\",\n                \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\n                \"owner\": {\n                  \"login\": \"github\",\n                  \"id\": 1,\n                  \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n                  \"url\": \"https://api.github.com/orgs/github\",\n                  \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n                  \"events_url\": \"https://api.github.com/orgs/github/events\",\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                  \"gravatar_id\": \"\",\n                  \"html_url\": \"https://github.com/octocat\",\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                  \"type\": \"User\",\n                  \"site_admin\": true\n                },\n                \"name\": \"Octocat App\",\n                \"description\": \"\",\n                \"external_url\": \"https://example.com\",\n                \"html_url\": \"https://github.com/apps/octoapp\",\n                \"created_at\": \"2017-07-08T16:18:44-04:00\",\n                \"updated_at\": \"2017-07-08T16:18:44-04:00\",\n                \"permissions\": {\n                  \"metadata\": \"read\",\n                  \"contents\": \"read\",\n                  \"issues\": \"write\",\n                  \"single_file\": \"write\"\n                },\n                \"events\": [\n                  \"push\",\n                  \"pull_request\"\n                ]\n              },\n              \"pull_requests\": [\n                {\n                  \"url\": \"https://api.github.com/repos/github/hello-world/pulls/1\",\n                  \"id\": 1934,\n                  \"number\": 3956,\n                  \"head\": {\n                    \"ref\": \"say-hello\",\n                    \"sha\": \"3dca65fa3e8d4b3da3f3d056c59aee1c50f41390\",\n                    \"repo\": {\n                      \"id\": 526,\n                      \"url\": \"https://api.github.com/repos/github/hello-world\",\n                      \"name\": \"hello-world\"\n                    }\n                  },\n                  \"base\": {\n                    \"ref\": \"master\",\n                    \"sha\": \"e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f\",\n                    \"repo\": {\n                      \"id\": 526,\n                      \"url\": \"https://api.github.com/repos/github/hello-world\",\n                      \"name\": \"hello-world\"\n                    }\n                  }\n                }\n              ]\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ChecksListForRefOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ChecksListForRefOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestChecksListForSuiteOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"check_runs\": [\n            {\n              \"id\": 4,\n              \"head_sha\": \"ce587453ced02b1526dfb4cb910479d431683101\",\n              \"node_id\": \"MDg6Q2hlY2tSdW40\",\n              \"external_id\": \"\",\n              \"url\": \"https://api.github.com/repos/github/hello-world/check-runs/4\",\n              \"html_url\": \"https://github.com/github/hello-world/runs/4\",\n              \"details_url\": \"https://example.com\",\n              \"status\": \"completed\",\n              \"conclusion\": \"neutral\",\n              \"started_at\": \"2018-05-04T01:14:52Z\",\n              \"completed_at\": \"2018-05-04T01:14:52Z\",\n              \"output\": {\n                \"title\": \"Mighty Readme report\",\n                \"summary\": \"There are 0 failures, 2 warnings, and 1 notice.\",\n                \"text\": \"You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.\",\n                \"annotations_count\": 2,\n                \"annotations_url\": \"https://api.github.com/repos/github/hello-world/check-runs/4/annotations\"\n              },\n              \"name\": \"mighty_readme\",\n              \"check_suite\": {\n                \"id\": 5\n              },\n              \"app\": {\n                \"id\": 1,\n                \"slug\": \"octoapp\",\n                \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\n                \"owner\": {\n                  \"login\": \"github\",\n                  \"id\": 1,\n                  \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n                  \"url\": \"https://api.github.com/orgs/github\",\n                  \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n                  \"events_url\": \"https://api.github.com/orgs/github/events\",\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                  \"gravatar_id\": \"\",\n                  \"html_url\": \"https://github.com/octocat\",\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                  \"type\": \"User\",\n                  \"site_admin\": true\n                },\n                \"name\": \"Octocat App\",\n                \"description\": \"\",\n                \"external_url\": \"https://example.com\",\n                \"html_url\": \"https://github.com/apps/octoapp\",\n                \"created_at\": \"2017-07-08T16:18:44-04:00\",\n                \"updated_at\": \"2017-07-08T16:18:44-04:00\",\n                \"permissions\": {\n                  \"metadata\": \"read\",\n                  \"contents\": \"read\",\n                  \"issues\": \"write\",\n                  \"single_file\": \"write\"\n                },\n                \"events\": [\n                  \"push\",\n                  \"pull_request\"\n                ]\n              },\n              \"pull_requests\": [\n                {\n                  \"url\": \"https://api.github.com/repos/github/hello-world/pulls/1\",\n                  \"id\": 1934,\n                  \"number\": 3956,\n                  \"head\": {\n                    \"ref\": \"say-hello\",\n                    \"sha\": \"3dca65fa3e8d4b3da3f3d056c59aee1c50f41390\",\n                    \"repo\": {\n                      \"id\": 526,\n                      \"url\": \"https://api.github.com/repos/github/hello-world\",\n                      \"name\": \"hello-world\"\n                    }\n                  },\n                  \"base\": {\n                    \"ref\": \"master\",\n                    \"sha\": \"e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f\",\n                    \"repo\": {\n                      \"id\": 526,\n                      \"url\": \"https://api.github.com/repos/github/hello-world\",\n                      \"name\": \"hello-world\"\n                    }\n                  }\n                }\n              ]\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ChecksListForSuiteOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ChecksListForSuiteOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestChecksListSuitesForRefOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"check_suites\": [\n            {\n              \"id\": 5,\n              \"node_id\": \"MDEwOkNoZWNrU3VpdGU1\",\n              \"head_branch\": \"master\",\n              \"head_sha\": \"d6fde92930d4715a2b49857d24b940956b26d2d3\",\n              \"status\": \"completed\",\n              \"conclusion\": \"neutral\",\n              \"url\": \"https://api.github.com/repos/github/hello-world/check-suites/5\",\n              \"before\": \"146e867f55c26428e5f9fade55a9bbf5e95a7912\",\n              \"after\": \"d6fde92930d4715a2b49857d24b940956b26d2d3\",\n              \"pull_requests\": [\n\n              ],\n              \"app\": {\n                \"id\": 1,\n                \"slug\": \"octoapp\",\n                \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\n                \"owner\": {\n                  \"login\": \"github\",\n                  \"id\": 1,\n                  \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n                  \"url\": \"https://api.github.com/orgs/github\",\n                  \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n                  \"events_url\": \"https://api.github.com/orgs/github/events\",\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                  \"gravatar_id\": \"\",\n                  \"html_url\": \"https://github.com/octocat\",\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                  \"type\": \"User\",\n                  \"site_admin\": true\n                },\n                \"name\": \"Octocat App\",\n                \"description\": \"\",\n                \"external_url\": \"https://example.com\",\n                \"html_url\": \"https://github.com/apps/octoapp\",\n                \"created_at\": \"2017-07-08T16:18:44-04:00\",\n                \"updated_at\": \"2017-07-08T16:18:44-04:00\",\n                \"permissions\": {\n                  \"metadata\": \"read\",\n                  \"contents\": \"read\",\n                  \"issues\": \"write\",\n                  \"single_file\": \"write\"\n                },\n                \"events\": [\n                  \"push\",\n                  \"pull_request\"\n                ]\n              },\n              \"repository\": {\n                \"id\": 1296269,\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n                \"name\": \"Hello-World\",\n                \"full_name\": \"octocat/Hello-World\",\n                \"owner\": {\n                  \"login\": \"octocat\",\n                  \"id\": 1,\n                  \"node_id\": \"MDQ6VXNlcjE=\",\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                  \"gravatar_id\": \"\",\n                  \"url\": \"https://api.github.com/users/octocat\",\n                  \"html_url\": \"https://github.com/octocat\",\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                  \"type\": \"User\",\n                  \"site_admin\": false\n                },\n                \"private\": false,\n                \"html_url\": \"https://github.com/octocat/Hello-World\",\n                \"description\": \"This your first repo!\",\n                \"fork\": false,\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n                \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n                \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n                \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n                \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n                \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n                \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n                \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n                \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n                \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n                \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n                \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n                \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n                \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n                \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n                \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n                \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n                \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n                \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n                \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n                \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n                \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n                \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n                \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n                \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n                \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n                \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n                \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n                \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n                \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n                \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n                \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n                \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n                \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n                \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n                \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n                \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n                \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n                \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n                \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n                \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n                \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n                \"homepage\": \"https://github.com\",\n                \"language\": null,\n                \"forks_count\": 9,\n                \"stargazers_count\": 80,\n                \"watchers_count\": 80,\n                \"size\": 108,\n                \"default_branch\": \"master\",\n                \"open_issues_count\": 0,\n                \"is_template\": true,\n                \"topics\": [\n                  \"octocat\",\n                  \"atom\",\n                  \"electron\",\n                  \"api\"\n                ],\n                \"has_issues\": true,\n                \"has_projects\": true,\n                \"has_wiki\": true,\n                \"has_pages\": false,\n                \"has_downloads\": true,\n                \"archived\": false,\n                \"disabled\": false,\n                \"visibility\": \"public\",\n                \"pushed_at\": \"2011-01-26T19:06:43Z\",\n                \"created_at\": \"2011-01-26T19:01:12Z\",\n                \"updated_at\": \"2011-01-26T19:14:43Z\",\n                \"permissions\": {\n                  \"admin\": false,\n                  \"push\": false,\n                  \"pull\": true\n                },\n                \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n                \"delete_branch_on_merge\": true,\n                \"subscribers_count\": 42,\n                \"network_count\": 0\n              },\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"head_commit\": {\n                \"id\": \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\n                \"tree_id\": \"7fd1a60b01f91b314f59955a4e4d4e80d8edf11d\",\n                \"message\": \"Merge pull request #6 from Spaceghost/patch-1\\n\\nNew line at end of file.\",\n                \"timestamp\": \"2016-10-10T00:00:00Z\",\n                \"author\": {\n                  \"name\": \"The Octocat\",\n                  \"email\": \"octocat@nowhere.com\"\n                },\n                \"committer\": {\n                  \"name\": \"The Octocat\",\n                  \"email\": \"octocat@nowhere.com\"\n                }\n              },\n              \"latest_check_runs_count\": 1,\n              \"check_runs_url\": \"https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ChecksListSuitesForRefOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ChecksListSuitesForRefOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCloneTraffic_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"count\": 173,\n          \"uniques\": 128,\n          \"clones\": [\n            {\n              \"timestamp\": \"2016-10-10T00:00:00Z\",\n              \"count\": 2,\n              \"uniques\": 1\n            },\n            {\n              \"timestamp\": \"2016-10-11T00:00:00Z\",\n              \"count\": 17,\n              \"uniques\": 16\n            },\n            {\n              \"timestamp\": \"2016-10-12T00:00:00Z\",\n              \"count\": 21,\n              \"uniques\": 15\n            },\n            {\n              \"timestamp\": \"2016-10-13T00:00:00Z\",\n              \"count\": 8,\n              \"uniques\": 7\n            },\n            {\n              \"timestamp\": \"2016-10-14T00:00:00Z\",\n              \"count\": 5,\n              \"uniques\": 5\n            },\n            {\n              \"timestamp\": \"2016-10-15T00:00:00Z\",\n              \"count\": 2,\n              \"uniques\": 2\n            },\n            {\n              \"timestamp\": \"2016-10-16T00:00:00Z\",\n              \"count\": 8,\n              \"uniques\": 7\n            },\n            {\n              \"timestamp\": \"2016-10-17T00:00:00Z\",\n              \"count\": 26,\n              \"uniques\": 15\n            },\n            {\n              \"timestamp\": \"2016-10-18T00:00:00Z\",\n              \"count\": 19,\n              \"uniques\": 17\n            },\n            {\n              \"timestamp\": \"2016-10-19T00:00:00Z\",\n              \"count\": 19,\n              \"uniques\": 14\n            },\n            {\n              \"timestamp\": \"2016-10-20T00:00:00Z\",\n              \"count\": 19,\n              \"uniques\": 15\n            },\n            {\n              \"timestamp\": \"2016-10-21T00:00:00Z\",\n              \"count\": 9,\n              \"uniques\": 7\n            },\n            {\n              \"timestamp\": \"2016-10-22T00:00:00Z\",\n              \"count\": 5,\n              \"uniques\": 5\n            },\n            {\n              \"timestamp\": \"2016-10-23T00:00:00Z\",\n              \"count\": 6,\n              \"uniques\": 5\n            },\n            {\n              \"timestamp\": \"2016-10-24T00:00:00Z\",\n              \"count\": 7,\n              \"uniques\": 5\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CloneTraffic

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CloneTraffic
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCodeOfConduct_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"key\": \"contributor_covenant\",\n          \"name\": \"Contributor Covenant\",\n          \"url\": \"https://api.github.com/codes_of_conduct/contributor_covenant\",\n          \"body\": \"# Contributor Covenant Code of Conduct\\n\\n## Our Pledge\\n\\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\\n\\n## Our Standards\\n\\nExamples of behavior that contributes to creating a positive environment include:\\n\\n* Using welcoming and inclusive language\\n* Being respectful of differing viewpoints and experiences\\n* Gracefully accepting constructive criticism\\n* Focusing on what is best for the community\\n* Showing empathy towards other community members\\n\\nExamples of unacceptable behavior by participants include:\\n\\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\\n* Trolling, insulting/derogatory comments, and personal or political attacks\\n* Public or private harassment\\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\\n* Other conduct which could reasonably be considered inappropriate in a professional setting\\n\\n## Our Responsibilities\\n\\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\\n                  to any instances of unacceptable behavior.\\n\\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\\n\\n## Scope\\n\\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\\n\\n## Enforcement\\n\\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\\n\\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\\n\\n## Attribution\\n\\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\\n\\n[homepage]: http://contributor-covenant.org\\n[version]: http://contributor-covenant.org/version/1/4/\\n\",\n          \"html_url\": \"http://contributor-covenant.org/version/1/4/\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeOfConduct

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CodeOfConduct
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCodeScanningAlert_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"number\": 42,\n          \"created_at\": \"2020-06-19T11:21:34Z\",\n          \"url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42\",\n          \"html_url\": \"https://github.com/octocat/hello-world/code-scanning/42\",\n          \"state\": \"dismissed\",\n          \"dismissed_by\": {\n            \"login\": \"octocat\",\n            \"id\": 54933897,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"dismissed_at\": \"2020-02-14T12:29:18Z\",\n          \"dismissed_reason\": \"false positive\",\n          \"rule\": {\n            \"id\": \"js/zipslip\",\n            \"severity\": \"error\",\n            \"security_severity_level\": \"high\",\n            \"description\": \"Arbitrary file write during zip extraction (\\\"Zip Slip\\\")\",\n            \"name\": \"js/zipslip\",\n            \"full_description\": \"Extracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten.\",\n            \"tags\": [\n              \"security\",\n              \"external/cwe/cwe-022\"\n            ],\n            \"help\": \"# Arbitrary file write during zip extraction (\\\"Zip Slip\\\")\\\\nExtracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten ...\"\n          },\n          \"tool\": {\n            \"name\": \"CodeQL\",\n            \"guid\": null,\n            \"version\": \"2.4.0\"\n          },\n          \"most_recent_instance\": {\n            \"ref\": \"refs/heads/main\",\n            \"analysis_key\": \".github/workflows/codeql-analysis.yml:CodeQL-Build\",\n            \"environment\": \"{}\",\n            \"state\": \"dismissed\",\n            \"commit_sha\": \"39406e42cb832f683daa691dd652a8dc36ee8930\",\n            \"message\": {\n              \"text\": \"This path depends on a user-provided value.\"\n            },\n            \"location\": {\n              \"path\": \"spec-main/api-session-spec.ts\",\n              \"start_line\": 917,\n              \"end_line\": 917,\n              \"start_column\": 7,\n              \"end_column\": 18\n            },\n            \"classifications\": [\n              \"test\"\n            ]\n          },\n          \"instances_url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42/instances\",\n          \"instances\": null\n        }"},
		{Input: "{\n          \"number\": 42,\n          \"created_at\": \"2020-08-25T21:28:36Z\",\n          \"url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42\",\n          \"html_url\": \"https://github.com/octocat/hello-world/code-scanning/42\",\n          \"state\": \"dismissed\",\n          \"dismissed_by\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"dismissed_at\": \"2020-09-02T22:34:56Z\",\n          \"dismissed_reason\": \"false positive\",\n          \"rule\": {\n            \"id\": \"js/zipslip\",\n            \"severity\": \"error\",\n            \"security_severity_level\": \"high\",\n            \"description\": \"Arbitrary file write during zip extraction (\\\"Zip Slip\\\")\",\n            \"name\": \"js/zipslip\",\n            \"full_description\": \"Extracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten.\",\n            \"tags\": [\n              \"security\",\n              \"external/cwe/cwe-022\"\n            ],\n            \"help\": \"# Arbitrary file write during zip extraction (\\\"Zip Slip\\\")\\\\nExtracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten ...\"\n          },\n          \"tool\": {\n            \"name\": \"CodeQL\",\n            \"guid\": null,\n            \"version\": \"2.4.0\"\n          },\n          \"most_recent_instance\": {\n            \"ref\": \"refs/heads/main\",\n            \"analysis_key\": \".github/workflows/codeql-analysis.yml:CodeQL-Build\",\n            \"environment\": \"{}\",\n            \"state\": \"dismissed\",\n            \"commit_sha\": \"39406e42cb832f683daa691dd652a8dc36ee8930\",\n            \"message\": {\n              \"text\": \"This path depends on a user-provided value.\"\n            },\n            \"location\": {\n              \"path\": \"spec-main/api-session-spec.ts\",\n              \"start_line\": 917,\n              \"end_line\": 917,\n              \"start_column\": 7,\n              \"end_column\": 18\n            },\n            \"classifications\": [\n              \"test\"\n            ]\n          },\n          \"instances_url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42/instances\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeScanningAlert

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CodeScanningAlert
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCodeScanningAnalysis_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"ref\": \"refs/heads/main\",\n          \"commit_sha\": \"c18c69115654ff0166991962832dc2bd7756e655\",\n          \"analysis_key\": \".github/workflows/codeql-analysis.yml:analyze\",\n          \"environment\": \"{\\\"language\\\":\\\"javascript\\\"}\",\n          \"error\": \"\",\n          \"category\": \".github/workflows/codeql-analysis.yml:analyze/language:javascript\",\n          \"created_at\": \"2021-01-13T11:55:49Z\",\n          \"results_count\": 3,\n          \"rules_count\": 67,\n          \"id\": 3602840,\n          \"url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/201\",\n          \"sarif_id\": \"47177e22-5596-11eb-80a1-c1e54ef945c6\",\n          \"tool\": {\n            \"name\": \"CodeQL\",\n            \"guid\": null,\n            \"version\": \"2.4.0\"\n          },\n          \"deletable\": true,\n          \"warning\": \"\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeScanningAnalysis

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CodeScanningAnalysis
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCodeScanningAnalysisDeletion_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"next_analysis_url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/41\",\n          \"confirm_delete_url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/41?confirm_delete\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeScanningAnalysisDeletion

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CodeScanningAnalysisDeletion
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCodeScanningSarifsReceipt_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": \"47177e22-5596-11eb-80a1-c1e54ef945c6\",\n          \"url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/sarifs/47177e22-5596-11eb-80a1-c1e54ef945c6\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeScanningSarifsReceipt

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CodeScanningSarifsReceipt
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCodeScanningSarifsStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"processing_status\": \"complete\",\n          \"analyses_url\": \"https://api.github.com/repos/octocat/hello-world/code-scanning/analyses?sarif_id=47177e22-5596-11eb-80a1-c1e54ef945c6\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CodeScanningSarifsStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CodeScanningSarifsStatus
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCombinedBillingUsage_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"days_left_in_billing_cycle\": 20,\n          \"estimated_paid_storage_for_month\": 15,\n          \"estimated_storage_for_month\": 40\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CombinedBillingUsage

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CombinedBillingUsage
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCombinedCommitStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"state\": \"success\",\n          \"statuses\": [\n            {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n              \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\n              \"id\": 1,\n              \"node_id\": \"MDY6U3RhdHVzMQ==\",\n              \"state\": \"success\",\n              \"description\": \"Build has completed successfully\",\n              \"target_url\": \"https://ci.example.com/1000/output\",\n              \"context\": \"continuous-integration/jenkins\",\n              \"created_at\": \"2012-07-20T01:19:13Z\",\n              \"updated_at\": \"2012-07-20T01:19:13Z\"\n            },\n            {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n              \"avatar_url\": \"https://github.com/images/error/other_user_happy.gif\",\n              \"id\": 2,\n              \"node_id\": \"MDY6U3RhdHVzMg==\",\n              \"state\": \"success\",\n              \"description\": \"Testing has completed successfully\",\n              \"target_url\": \"https://ci.example.com/2000/output\",\n              \"context\": \"security/brakeman\",\n              \"created_at\": \"2012-08-20T01:19:13Z\",\n              \"updated_at\": \"2012-08-20T01:19:13Z\"\n            }\n          ],\n          \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"total_count\": 2,\n          \"repository\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World\",\n            \"full_name\": \"octocat/Hello-World\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n            \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\n          },\n          \"commit_url\": \"https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e/status\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CombinedCommitStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CombinedCommitStatus
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCommit_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"node_id\": \"MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments\",\n          \"commit\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"author\": {\n              \"name\": \"Monalisa Octocat\",\n              \"email\": \"mona@github.com\",\n              \"date\": \"2011-04-14T16:00:49Z\"\n            },\n            \"committer\": {\n              \"name\": \"Monalisa Octocat\",\n              \"email\": \"mona@github.com\",\n              \"date\": \"2011-04-14T16:00:49Z\"\n            },\n            \"message\": \"Fix all the bugs\",\n            \"tree\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n              \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\n            },\n            \"comment_count\": 0,\n            \"verification\": {\n              \"verified\": false,\n              \"reason\": \"unsigned\",\n              \"signature\": null,\n              \"payload\": null\n            }\n          },\n          \"author\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"committer\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"parents\": [\n            {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n              \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\n            }\n          ],\n          \"stats\": {\n            \"additions\": 104,\n            \"deletions\": 4,\n            \"total\": 108\n          },\n          \"files\": [\n            {\n              \"filename\": \"file1.txt\",\n              \"additions\": 10,\n              \"deletions\": 2,\n              \"changes\": 12,\n              \"status\": \"modified\",\n              \"raw_url\": \"https://github.com/octocat/Hello-World/raw/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt\",\n              \"blob_url\": \"https://github.com/octocat/Hello-World/blob/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt\",\n              \"patch\": \"@@ -29,7 +29,7 @@\\n.....\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Commit

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Commit
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCommitComment_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/comments/1\",\n          \"id\": 1,\n          \"node_id\": \"MDEzOkNvbW1pdENvbW1lbnQx\",\n          \"body\": \"Great stuff\",\n          \"path\": \"file1.txt\",\n          \"position\": 4,\n          \"line\": 14,\n          \"commit_id\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"author_association\": \"COLLABORATOR\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"created_at\": \"2011-04-14T16:00:49Z\",\n          \"updated_at\": \"2011-04-14T16:00:49Z\"\n        }"},
		{Input: "{\n          \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/comments/1\",\n          \"id\": 1,\n          \"node_id\": \"MDEzOkNvbW1pdENvbW1lbnQx\",\n          \"body\": \"Nice change\",\n          \"path\": \"file1.txt\",\n          \"position\": 4,\n          \"line\": 14,\n          \"commit_id\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"author_association\": \"COLLABORATOR\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"created_at\": \"2011-04-14T16:00:49Z\",\n          \"updated_at\": \"2011-04-14T16:00:49Z\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CommitComment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CommitComment
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCommitComparison_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/compare/master...topic\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/compare/master...topic\",\n          \"permalink_url\": \"https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17\",\n          \"diff_url\": \"https://github.com/octocat/Hello-World/compare/master...topic.diff\",\n          \"patch_url\": \"https://github.com/octocat/Hello-World/compare/master...topic.patch\",\n          \"base_commit\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"node_id\": \"MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments\",\n            \"commit\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n              \"author\": {\n                \"name\": \"Monalisa Octocat\",\n                \"email\": \"mona@github.com\",\n                \"date\": \"2011-04-14T16:00:49Z\"\n              },\n              \"committer\": {\n                \"name\": \"Monalisa Octocat\",\n                \"email\": \"mona@github.com\",\n                \"date\": \"2011-04-14T16:00:49Z\"\n              },\n              \"message\": \"Fix all the bugs\",\n              \"tree\": {\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n                \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\n              },\n              \"comment_count\": 0,\n              \"verification\": {\n                \"verified\": false,\n                \"reason\": \"unsigned\",\n                \"signature\": null,\n                \"payload\": null\n              }\n            },\n            \"author\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"committer\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"parents\": [\n              {\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n                \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\n              }\n            ]\n          },\n          \"merge_base_commit\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"node_id\": \"MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments\",\n            \"commit\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n              \"author\": {\n                \"name\": \"Monalisa Octocat\",\n                \"email\": \"mona@github.com\",\n                \"date\": \"2011-04-14T16:00:49Z\"\n              },\n              \"committer\": {\n                \"name\": \"Monalisa Octocat\",\n                \"email\": \"mona@github.com\",\n                \"date\": \"2011-04-14T16:00:49Z\"\n              },\n              \"message\": \"Fix all the bugs\",\n              \"tree\": {\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n                \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\n              },\n              \"comment_count\": 0,\n              \"verification\": {\n                \"verified\": false,\n                \"reason\": \"unsigned\",\n                \"signature\": null,\n                \"payload\": null\n              }\n            },\n            \"author\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"committer\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"parents\": [\n              {\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n                \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\n              }\n            ]\n          },\n          \"status\": \"behind\",\n          \"ahead_by\": 1,\n          \"behind_by\": 2,\n          \"total_commits\": 1,\n          \"commits\": [\n            {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n              \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n              \"node_id\": \"MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments\",\n              \"commit\": {\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n                \"author\": {\n                  \"name\": \"Monalisa Octocat\",\n                  \"email\": \"mona@github.com\",\n                  \"date\": \"2011-04-14T16:00:49Z\"\n                },\n                \"committer\": {\n                  \"name\": \"Monalisa Octocat\",\n                  \"email\": \"mona@github.com\",\n                  \"date\": \"2011-04-14T16:00:49Z\"\n                },\n                \"message\": \"Fix all the bugs\",\n                \"tree\": {\n                  \"url\": \"https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n                  \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\n                },\n                \"comment_count\": 0,\n                \"verification\": {\n                  \"verified\": false,\n                  \"reason\": \"unsigned\",\n                  \"signature\": null,\n                  \"payload\": null\n                }\n              },\n              \"author\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"committer\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"parents\": [\n                {\n                  \"url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n                  \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\"\n                }\n              ]\n            }\n          ],\n          \"files\": [\n            {\n              \"sha\": \"bbcd538c8e72b8c175046e27cc8f907076331401\",\n              \"filename\": \"file1.txt\",\n              \"status\": \"added\",\n              \"additions\": 103,\n              \"deletions\": 21,\n              \"changes\": 124,\n              \"blob_url\": \"https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt\",\n              \"raw_url\": \"https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n              \"patch\": \"@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CommitComparison

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CommitComparison
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCommitComparisonStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"ahead\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CommitComparisonStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CommitComparisonStatus
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestCommunityProfile_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"health_percentage\": 100,\n          \"description\": \"My first repository on GitHub!\",\n          \"documentation\": null,\n          \"files\": {\n            \"code_of_conduct\": {\n              \"name\": \"Contributor Covenant\",\n              \"key\": \"contributor_covenant\",\n              \"url\": \"https://api.github.com/codes_of_conduct/contributor_covenant\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/CODE_OF_CONDUCT.md\"\n            },\n            \"code_of_conduct_file\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/CODE_OF_CONDUCT.md\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/CODE_OF_CONDUCT.md\"\n            },\n            \"contributing\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/CONTRIBUTING\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/CONTRIBUTING\"\n            },\n            \"issue_template\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/ISSUE_TEMPLATE\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/ISSUE_TEMPLATE\"\n            },\n            \"pull_request_template\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/PULL_REQUEST_TEMPLATE\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/PULL_REQUEST_TEMPLATE\"\n            },\n            \"license\": {\n              \"name\": \"MIT License\",\n              \"key\": \"mit\",\n              \"spdx_id\": \"MIT\",\n              \"url\": \"https://api.github.com/licenses/mit\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/LICENSE\",\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\n            },\n            \"readme\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/README.md\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/README.md\"\n            }\n          },\n          \"updated_at\": \"2017-02-28T19:09:29Z\",\n          \"content_reports_enabled\": true\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ CommunityProfile

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 CommunityProfile
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestContentFile_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"type\": \"file\",\n          \"encoding\": \"base64\",\n          \"size\": 5362,\n          \"name\": \"README.md\",\n          \"path\": \"README.md\",\n          \"content\": \"encoded content ...\",\n          \"sha\": \"3d21ec53a331a6f037a91c368710b99387d012c1\",\n          \"url\": \"https://api.github.com/repos/octokit/octokit.rb/contents/README.md\",\n          \"git_url\": \"https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1\",\n          \"html_url\": \"https://github.com/octokit/octokit.rb/blob/master/README.md\",\n          \"download_url\": \"https://raw.githubusercontent.com/octokit/octokit.rb/master/README.md\",\n          \"_links\": {\n            \"git\": \"https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1\",\n            \"self\": \"https://api.github.com/repos/octokit/octokit.rb/contents/README.md\",\n            \"html\": \"https://github.com/octokit/octokit.rb/blob/master/README.md\"\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ContentFile

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ContentFile
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestContentReferenceAttachment_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 101,\n          \"title\": \"[A-1234] Error found in core/models.py file'\",\n          \"body\": \"You have used an email that already exists for the user_email_uniq field.\\n ## DETAILS:\\n\\nThe (email)=(Octocat@github.com) already exists.\\n\\n The error was found in core/models.py in get_or_create_user at line 62.\\n\\n self.save()\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ContentReferenceAttachment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ContentReferenceAttachment
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestDeployKey_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"key\": \"ssh-rsa AAA...\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/keys/1\",\n          \"title\": \"octocat@octomac\",\n          \"verified\": true,\n          \"created_at\": \"2014-12-10T15:53:42Z\",\n          \"read_only\": true\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ DeployKey

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 DeployKey
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestDeployment_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/example/deployments/1\",\n          \"id\": 1,\n          \"node_id\": \"MDEwOkRlcGxveW1lbnQx\",\n          \"sha\": \"a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d\",\n          \"ref\": \"topic-branch\",\n          \"task\": \"deploy\",\n          \"payload\": {\n          },\n          \"original_environment\": \"staging\",\n          \"environment\": \"production\",\n          \"description\": \"Deploy request from hubot\",\n          \"creator\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"created_at\": \"2012-07-20T01:19:13Z\",\n          \"updated_at\": \"2012-07-20T01:19:13Z\",\n          \"statuses_url\": \"https://api.github.com/repos/octocat/example/deployments/1/statuses\",\n          \"repository_url\": \"https://api.github.com/repos/octocat/example\",\n          \"transient_environment\": false,\n          \"production_environment\": true\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Deployment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Deployment
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestDeploymentStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/example/deployments/42/statuses/1\",\n          \"id\": 1,\n          \"node_id\": \"MDE2OkRlcGxveW1lbnRTdGF0dXMx\",\n          \"state\": \"success\",\n          \"creator\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"description\": \"Deployment finished successfully.\",\n          \"environment\": \"production\",\n          \"target_url\": \"https://example.com/deployment/42/output\",\n          \"created_at\": \"2012-07-20T01:19:13Z\",\n          \"updated_at\": \"2012-07-20T01:19:13Z\",\n          \"deployment_url\": \"https://api.github.com/repos/octocat/example/deployments/42\",\n          \"repository_url\": \"https://api.github.com/repos/octocat/example\",\n          \"environment_url\": \"https://test-branch.lab.acme.com\",\n          \"log_url\": \"https://example.com/deployment/42/output\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ DeploymentStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 DeploymentStatus
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestDeploymentStatusState_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"success\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ DeploymentStatusState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 DeploymentStatusState
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestDiffEntryStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"added\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ DiffEntryStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 DiffEntryStatus
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"organizations\": [\n            {\n              \"login\": \"octocat\",\n              \"id\": 161335,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"url\": \"https://api.github.com/orgs/octo-org\",\n              \"repos_url\": \"https://api.github.com/orgs/octo-org/repos\",\n              \"events_url\": \"https://api.github.com/orgs/octo-org/events\",\n              \"hooks_url\": \"https://api.github.com/orgs/octo-org/hooks\",\n              \"issues_url\": \"https://api.github.com/orgs/octo-org/issues\",\n              \"members_url\": \"https://api.github.com/orgs/octo-org/members{/member}\",\n              \"public_members_url\": \"https://api.github.com/orgs/octo-org/public_members{/member}\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"description\": \"A great organization\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"organizations\": [\n            {\n              \"login\": \"octocat\",\n              \"id\": 161335,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"url\": \"https://api.github.com/orgs/octo-org\",\n              \"repos_url\": \"https://api.github.com/orgs/octo-org/repos\",\n              \"events_url\": \"https://api.github.com/orgs/octo-org/events\",\n              \"hooks_url\": \"https://api.github.com/orgs/octo-org/hooks\",\n              \"issues_url\": \"https://api.github.com/orgs/octo-org/issues\",\n              \"members_url\": \"https://api.github.com/orgs/octo-org/members{/member}\",\n              \"public_members_url\": \"https://api.github.com/orgs/octo-org/public_members{/member}\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"description\": \"A great organization\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 3,\n          \"runner_groups\": [\n            {\n              \"id\": 1,\n              \"name\": \"Default\",\n              \"visibility\": \"all\",\n              \"default\": true,\n              \"runners_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner_groups/1/runners\",\n              \"allows_public_repositories\": false\n            },\n            {\n              \"id\": 2,\n              \"name\": \"octo-runner-group\",\n              \"visibility\": \"selected\",\n              \"default\": false,\n              \"selected_organizations_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner_groups/2/organizations\",\n              \"runners_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner_groups/2/runners\",\n              \"allows_public_repositories\": true\n            },\n            {\n              \"id\": 3,\n              \"name\": \"expensive-hardware\",\n              \"visibility\": \"private\",\n              \"default\": false,\n              \"runners_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner_groups/3/runners\",\n              \"allows_public_repositories\": true\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestEnterpriseAdminListSelfHostedRunnersForEnterpriseOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 2,\n          \"runners\": [\n            {\n              \"id\": 23,\n              \"name\": \"linux_runner\",\n              \"os\": \"linux\",\n              \"status\": \"online\",\n              \"busy\": true,\n              \"labels\": [\n                {\n                  \"id\": 5,\n                  \"name\": \"self-hosted\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 7,\n                  \"name\": \"X64\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 11,\n                  \"name\": \"Linux\",\n                  \"type\": \"read-only\"\n                }\n              ]\n            },\n            {\n              \"id\": 24,\n              \"name\": \"mac_runner\",\n              \"os\": \"macos\",\n              \"status\": \"offline\",\n              \"busy\": false,\n              \"labels\": [\n                {\n                  \"id\": 5,\n                  \"name\": \"self-hosted\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 7,\n                  \"name\": \"X64\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 20,\n                  \"name\": \"macOS\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 21,\n                  \"name\": \"no-gpu\",\n                  \"type\": \"custom\"\n                }\n              ]\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnterpriseAdminListSelfHostedRunnersForEnterpriseOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 EnterpriseAdminListSelfHostedRunnersForEnterpriseOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 2,\n          \"runners\": [\n            {\n              \"id\": 23,\n              \"name\": \"linux_runner\",\n              \"os\": \"linux\",\n              \"status\": \"online\",\n              \"busy\": true,\n              \"labels\": [\n                {\n                  \"id\": 5,\n                  \"name\": \"self-hosted\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 7,\n                  \"name\": \"X64\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 11,\n                  \"name\": \"Linux\",\n                  \"type\": \"read-only\"\n                }\n              ]\n            },\n            {\n              \"id\": 24,\n              \"name\": \"mac_runner\",\n              \"os\": \"macos\",\n              \"status\": \"offline\",\n              \"busy\": false,\n              \"labels\": [\n                {\n                  \"id\": 5,\n                  \"name\": \"self-hosted\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 7,\n                  \"name\": \"X64\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 20,\n                  \"name\": \"macOS\",\n                  \"type\": \"read-only\"\n                },\n                {\n                  \"id\": 21,\n                  \"name\": \"no-gpu\",\n                  \"type\": \"custom\"\n                }\n              ]\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestEnvironmentApprovalsState_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"approved\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ EnvironmentApprovalsState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 EnvironmentApprovalsState
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestFeed_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"timeline_url\": \"https://github.com/timeline\",\n          \"user_url\": \"https://github.com/{user}\",\n          \"current_user_public_url\": \"https://github.com/octocat\",\n          \"current_user_url\": \"https://github.com/octocat.private?token=abc123\",\n          \"current_user_actor_url\": \"https://github.com/octocat.private.actor?token=abc123\",\n          \"current_user_organization_url\": \"\",\n          \"current_user_organization_urls\": [\n            \"https://github.com/organizations/github/octocat.private.atom?token=abc123\"\n          ],\n          \"security_advisories_url\": \"https://github.com/security-advisories\",\n          \"_links\": {\n            \"timeline\": {\n              \"href\": \"https://github.com/timeline\",\n              \"type\": \"application/atom+xml\"\n            },\n            \"user\": {\n              \"href\": \"https://github.com/{user}\",\n              \"type\": \"application/atom+xml\"\n            },\n            \"current_user_public\": {\n              \"href\": \"https://github.com/octocat\",\n              \"type\": \"application/atom+xml\"\n            },\n            \"current_user\": {\n              \"href\": \"https://github.com/octocat.private?token=abc123\",\n              \"type\": \"application/atom+xml\"\n            },\n            \"current_user_actor\": {\n              \"href\": \"https://github.com/octocat.private.actor?token=abc123\",\n              \"type\": \"application/atom+xml\"\n            },\n            \"current_user_organization\": {\n              \"href\": \"\",\n              \"type\": \"\"\n            },\n            \"current_user_organizations\": [\n              {\n                \"href\": \"https://github.com/organizations/github/octocat.private.atom?token=abc123\",\n                \"type\": \"application/atom+xml\"\n              }\n            ],\n            \"security_advisories\": {\n              \"href\": \"https://github.com/security-advisories\",\n              \"type\": \"application/atom+xml\"\n            }\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Feed

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Feed
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestFileCommit_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"content\": null,\n          \"commit\": {\n            \"sha\": \"7638417db6d59f3c431d3e1f261cc637155684cd\",\n            \"node_id\": \"MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==\",\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/7638417db6d59f3c431d3e1f261cc637155684cd\",\n            \"author\": {\n              \"date\": \"2014-11-07T22:01:45Z\",\n              \"name\": \"Monalisa Octocat\",\n              \"email\": \"octocat@github.com\"\n            },\n            \"committer\": {\n              \"date\": \"2014-11-07T22:01:45Z\",\n              \"name\": \"Monalisa Octocat\",\n              \"email\": \"octocat@github.com\"\n            },\n            \"message\": \"my commit message\",\n            \"tree\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb\",\n              \"sha\": \"691272480426f78a0138979dd3ce63b77f706feb\"\n            },\n            \"parents\": [\n              {\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5\",\n                \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/1acc419d4d6a9ce985db7be48c6349a0475975b5\",\n                \"sha\": \"1acc419d4d6a9ce985db7be48c6349a0475975b5\"\n              }\n            ],\n            \"verification\": {\n              \"verified\": false,\n              \"reason\": \"unsigned\",\n              \"signature\": null,\n              \"payload\": null\n            }\n          }\n        }"},
		{Input: "{\n          \"content\": {\n            \"name\": \"hello.txt\",\n            \"path\": \"notes/hello.txt\",\n            \"sha\": \"95b966ae1c166bd92f8ae7d1c313e738c731dfc3\",\n            \"size\": 9,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/notes/hello.txt\",\n            \"git_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/95b966ae1c166bd92f8ae7d1c313e738c731dfc3\",\n            \"download_url\": \"https://raw.githubusercontent.com/octocat/HelloWorld/master/notes/hello.txt\",\n            \"type\": \"file\",\n            \"_links\": {\n              \"self\": \"https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt\",\n              \"git\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/95b966ae1c166bd92f8ae7d1c313e738c731dfc3\",\n              \"html\": \"https://github.com/octocat/Hello-World/blob/master/notes/hello.txt\"\n            }\n          },\n          \"commit\": {\n            \"sha\": \"7638417db6d59f3c431d3e1f261cc637155684cd\",\n            \"node_id\": \"MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==\",\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/7638417db6d59f3c431d3e1f261cc637155684cd\",\n            \"author\": {\n              \"date\": \"2014-11-07T22:01:45Z\",\n              \"name\": \"Monalisa Octocat\",\n              \"email\": \"octocat@github.com\"\n            },\n            \"committer\": {\n              \"date\": \"2014-11-07T22:01:45Z\",\n              \"name\": \"Monalisa Octocat\",\n              \"email\": \"octocat@github.com\"\n            },\n            \"message\": \"my commit message\",\n            \"tree\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb\",\n              \"sha\": \"691272480426f78a0138979dd3ce63b77f706feb\"\n            },\n            \"parents\": [\n              {\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5\",\n                \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/1acc419d4d6a9ce985db7be48c6349a0475975b5\",\n                \"sha\": \"1acc419d4d6a9ce985db7be48c6349a0475975b5\"\n              }\n            ],\n            \"verification\": {\n              \"verified\": false,\n              \"reason\": \"unsigned\",\n              \"signature\": null,\n              \"payload\": null\n            }\n          }\n        }"},
		{Input: "{\n          \"content\": {\n            \"name\": \"hello.txt\",\n            \"path\": \"notes/hello.txt\",\n            \"sha\": \"a56507ed892d05a37c6d6128c260937ea4d287bd\",\n            \"size\": 9,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/blob/master/notes/hello.txt\",\n            \"git_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/a56507ed892d05a37c6d6128c260937ea4d287bd\",\n            \"download_url\": \"https://raw.githubusercontent.com/octocat/HelloWorld/master/notes/hello.txt\",\n            \"type\": \"file\",\n            \"_links\": {\n              \"self\": \"https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt\",\n              \"git\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/a56507ed892d05a37c6d6128c260937ea4d287bd\",\n              \"html\": \"https://github.com/octocat/Hello-World/blob/master/notes/hello.txt\"\n            }\n          },\n          \"commit\": {\n            \"sha\": \"18a43cd8e1e3a79c786e3d808a73d23b6d212b16\",\n            \"node_id\": \"MDY6Q29tbWl0MThhNDNjZDhlMWUzYTc5Yzc4NmUzZDgwOGE3M2QyM2I2ZDIxMmIxNg==\",\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/18a43cd8e1e3a79c786e3d808a73d23b6d212b16\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/18a43cd8e1e3a79c786e3d808a73d23b6d212b16\",\n            \"author\": {\n              \"date\": \"2014-11-07T22:01:45Z\",\n              \"name\": \"Monalisa Octocat\",\n              \"email\": \"octocat@github.com\"\n            },\n            \"committer\": {\n              \"date\": \"2014-11-07T22:01:45Z\",\n              \"name\": \"Monalisa Octocat\",\n              \"email\": \"octocat@github.com\"\n            },\n            \"message\": \"my commit message\",\n            \"tree\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/9a21f8e2018f42ffcf369b24d2cd20bc25c9e66f\",\n              \"sha\": \"9a21f8e2018f42ffcf369b24d2cd20bc25c9e66f\"\n            },\n            \"parents\": [\n              {\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/da5a433788da5c255edad7979b328b67d79f53f6\",\n                \"html_url\": \"https://github.com/octocat/Hello-World/git/commit/da5a433788da5c255edad7979b328b67d79f53f6\",\n                \"sha\": \"da5a433788da5c255edad7979b328b67d79f53f6\"\n              }\n            ],\n            \"verification\": {\n              \"verified\": false,\n              \"reason\": \"unsigned\",\n              \"signature\": null,\n              \"payload\": null\n            }\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ FileCommit

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 FileCommit
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestFullRepository_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1296269,\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n          \"name\": \"Hello-World\",\n          \"full_name\": \"octocat/Hello-World\",\n          \"owner\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"private\": false,\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\n          \"description\": \"This your first repo!\",\n          \"fork\": false,\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n          \"homepage\": \"https://github.com\",\n          \"language\": null,\n          \"forks_count\": 9,\n          \"forks\": 9,\n          \"stargazers_count\": 80,\n          \"watchers_count\": 80,\n          \"watchers\": 80,\n          \"size\": 108,\n          \"default_branch\": \"master\",\n          \"open_issues_count\": 0,\n          \"open_issues\": 0,\n          \"is_template\": false,\n          \"topics\": [\n            \"octocat\",\n            \"atom\",\n            \"electron\",\n            \"api\"\n          ],\n          \"has_issues\": true,\n          \"has_projects\": true,\n          \"has_wiki\": true,\n          \"has_pages\": false,\n          \"has_downloads\": true,\n          \"archived\": false,\n          \"disabled\": false,\n          \"visibility\": \"public\",\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\n          \"created_at\": \"2011-01-26T19:01:12Z\",\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\n          \"permissions\": {\n            \"pull\": true,\n            \"push\": false,\n            \"admin\": false\n          },\n          \"allow_rebase_merge\": true,\n          \"template_repository\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World-Template\",\n            \"full_name\": \"octocat/Hello-World-Template\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\n            \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\n            \"homepage\": \"https://github.com\",\n            \"language\": null,\n            \"forks\": 9,\n            \"forks_count\": 9,\n            \"stargazers_count\": 80,\n            \"watchers_count\": 80,\n            \"watchers\": 80,\n            \"size\": 108,\n            \"default_branch\": \"master\",\n            \"open_issues\": 0,\n            \"open_issues_count\": 0,\n            \"is_template\": true,\n            \"license\": {\n              \"key\": \"mit\",\n              \"name\": \"MIT License\",\n              \"url\": \"https://api.github.com/licenses/mit\",\n              \"spdx_id\": \"MIT\",\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n              \"html_url\": \"https://api.github.com/licenses/mit\"\n            },\n            \"topics\": [\n              \"octocat\",\n              \"atom\",\n              \"electron\",\n              \"api\"\n            ],\n            \"has_issues\": true,\n            \"has_projects\": true,\n            \"has_wiki\": true,\n            \"has_pages\": false,\n            \"has_downloads\": true,\n            \"archived\": false,\n            \"disabled\": false,\n            \"visibility\": \"public\",\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\n            \"created_at\": \"2011-01-26T19:01:12Z\",\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\n            \"permissions\": {\n              \"admin\": false,\n              \"push\": false,\n              \"pull\": true\n            },\n            \"allow_rebase_merge\": true,\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n            \"allow_squash_merge\": true,\n            \"allow_auto_merge\": false,\n            \"delete_branch_on_merge\": true,\n            \"allow_merge_commit\": true,\n            \"subscribers_count\": 42,\n            \"network_count\": 0\n          },\n          \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n          \"allow_squash_merge\": true,\n          \"allow_auto_merge\": false,\n          \"delete_branch_on_merge\": true,\n          \"allow_merge_commit\": true,\n          \"subscribers_count\": 42,\n          \"network_count\": 0,\n          \"license\": {\n            \"key\": \"mit\",\n            \"name\": \"MIT License\",\n            \"spdx_id\": \"MIT\",\n            \"url\": \"https://api.github.com/licenses/mit\",\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\n          },\n          \"organization\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"Organization\",\n            \"site_admin\": false\n          },\n          \"parent\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World\",\n            \"full_name\": \"octocat/Hello-World\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n            \"homepage\": \"https://github.com\",\n            \"language\": null,\n            \"forks_count\": 9,\n            \"stargazers_count\": 80,\n            \"watchers_count\": 80,\n            \"size\": 108,\n            \"default_branch\": \"master\",\n            \"open_issues_count\": 0,\n            \"is_template\": true,\n            \"topics\": [\n              \"octocat\",\n              \"atom\",\n              \"electron\",\n              \"api\"\n            ],\n            \"has_issues\": true,\n            \"has_projects\": true,\n            \"has_wiki\": true,\n            \"has_pages\": false,\n            \"has_downloads\": true,\n            \"archived\": false,\n            \"disabled\": false,\n            \"visibility\": \"public\",\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\n            \"created_at\": \"2011-01-26T19:01:12Z\",\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\n            \"permissions\": {\n              \"admin\": false,\n              \"push\": false,\n              \"pull\": true\n            },\n            \"allow_rebase_merge\": true,\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n            \"allow_squash_merge\": true,\n            \"allow_auto_merge\": false,\n            \"delete_branch_on_merge\": true,\n            \"allow_merge_commit\": true,\n            \"subscribers_count\": 42,\n            \"network_count\": 0,\n            \"license\": {\n              \"key\": \"mit\",\n              \"name\": \"MIT License\",\n              \"url\": \"https://api.github.com/licenses/mit\",\n              \"spdx_id\": \"MIT\",\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n              \"html_url\": \"https://api.github.com/licenses/mit\"\n            },\n            \"forks\": 1,\n            \"open_issues\": 1,\n            \"watchers\": 1\n          },\n          \"source\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World\",\n            \"full_name\": \"octocat/Hello-World\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n            \"homepage\": \"https://github.com\",\n            \"language\": null,\n            \"forks_count\": 9,\n            \"stargazers_count\": 80,\n            \"watchers_count\": 80,\n            \"size\": 108,\n            \"default_branch\": \"master\",\n            \"open_issues_count\": 0,\n            \"is_template\": true,\n            \"topics\": [\n              \"octocat\",\n              \"atom\",\n              \"electron\",\n              \"api\"\n            ],\n            \"has_issues\": true,\n            \"has_projects\": true,\n            \"has_wiki\": true,\n            \"has_pages\": false,\n            \"has_downloads\": true,\n            \"archived\": false,\n            \"disabled\": false,\n            \"visibility\": \"public\",\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\n            \"created_at\": \"2011-01-26T19:01:12Z\",\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\n            \"permissions\": {\n              \"admin\": false,\n              \"push\": false,\n              \"pull\": true\n            },\n            \"allow_rebase_merge\": true,\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n            \"allow_squash_merge\": true,\n            \"allow_auto_merge\": false,\n            \"delete_branch_on_merge\": true,\n            \"allow_merge_commit\": true,\n            \"subscribers_count\": 42,\n            \"network_count\": 0,\n            \"license\": {\n              \"key\": \"mit\",\n              \"name\": \"MIT License\",\n              \"url\": \"https://api.github.com/licenses/mit\",\n              \"spdx_id\": \"MIT\",\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n              \"html_url\": \"https://api.github.com/licenses/mit\"\n            },\n            \"forks\": 1,\n            \"open_issues\": 1,\n            \"watchers\": 1\n          }\n        }"},
		{Input: "{\n          \"id\": 1296269,\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n          \"name\": \"Hello-World\",\n          \"full_name\": \"octocat/Hello-World\",\n          \"owner\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"private\": false,\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\n          \"description\": \"This your first repo!\",\n          \"fork\": false,\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n          \"homepage\": \"https://github.com\",\n          \"license\": {\n            \"key\": \"mit\",\n            \"name\": \"MIT License\",\n            \"url\": \"https://api.github.com/licenses/mit\",\n            \"spdx_id\": \"MIT\",\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n            \"html_url\": \"https://github.com/licenses/mit\"\n          },\n          \"language\": null,\n          \"forks_count\": 9,\n          \"forks\": 9,\n          \"stargazers_count\": 80,\n          \"watchers_count\": 80,\n          \"watchers\": 80,\n          \"size\": 108,\n          \"default_branch\": \"master\",\n          \"open_issues_count\": 0,\n          \"open_issues\": 0,\n          \"is_template\": false,\n          \"topics\": [\n            \"octocat\",\n            \"atom\",\n            \"electron\",\n            \"api\"\n          ],\n          \"has_issues\": true,\n          \"has_projects\": true,\n          \"has_wiki\": true,\n          \"has_pages\": false,\n          \"has_downloads\": true,\n          \"archived\": false,\n          \"disabled\": false,\n          \"visibility\": \"public\",\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\n          \"created_at\": \"2011-01-26T19:01:12Z\",\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\n          \"permissions\": {\n            \"pull\": true,\n            \"push\": false,\n            \"admin\": false\n          },\n          \"allow_rebase_merge\": true,\n          \"template_repository\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World-Template\",\n            \"full_name\": \"octocat/Hello-World-Template\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\n            \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\n            \"homepage\": \"https://github.com\",\n            \"language\": null,\n            \"forks\": 9,\n            \"forks_count\": 9,\n            \"stargazers_count\": 80,\n            \"watchers_count\": 80,\n            \"watchers\": 80,\n            \"size\": 108,\n            \"default_branch\": \"master\",\n            \"open_issues\": 0,\n            \"open_issues_count\": 0,\n            \"is_template\": true,\n            \"license\": {\n              \"key\": \"mit\",\n              \"name\": \"MIT License\",\n              \"url\": \"https://api.github.com/licenses/mit\",\n              \"spdx_id\": \"MIT\",\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n              \"html_url\": \"https://api.github.com/licenses/mit\"\n            },\n            \"topics\": [\n              \"octocat\",\n              \"atom\",\n              \"electron\",\n              \"api\"\n            ],\n            \"has_issues\": true,\n            \"has_projects\": true,\n            \"has_wiki\": true,\n            \"has_pages\": false,\n            \"has_downloads\": true,\n            \"archived\": false,\n            \"disabled\": false,\n            \"visibility\": \"public\",\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\n            \"created_at\": \"2011-01-26T19:01:12Z\",\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\n            \"permissions\": {\n              \"admin\": false,\n              \"push\": false,\n              \"pull\": true\n            },\n            \"allow_rebase_merge\": true,\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n            \"allow_squash_merge\": true,\n            \"allow_auto_merge\": false,\n            \"delete_branch_on_merge\": true,\n            \"allow_merge_commit\": true,\n            \"subscribers_count\": 42,\n            \"network_count\": 0\n          },\n          \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n          \"allow_squash_merge\": true,\n          \"allow_auto_merge\": false,\n          \"delete_branch_on_merge\": true,\n          \"allow_merge_commit\": true,\n          \"allow_forking\": true,\n          \"subscribers_count\": 42,\n          \"network_count\": 0,\n          \"organization\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"Organization\",\n            \"site_admin\": false\n          },\n          \"parent\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World\",\n            \"full_name\": \"octocat/Hello-World\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n            \"homepage\": \"https://github.com\",\n            \"language\": null,\n            \"forks_count\": 9,\n            \"stargazers_count\": 80,\n            \"watchers_count\": 80,\n            \"size\": 108,\n            \"default_branch\": \"master\",\n            \"open_issues_count\": 0,\n            \"is_template\": true,\n            \"topics\": [\n              \"octocat\",\n              \"atom\",\n              \"electron\",\n              \"api\"\n            ],\n            \"has_issues\": true,\n            \"has_projects\": true,\n            \"has_wiki\": true,\n            \"has_pages\": false,\n            \"has_downloads\": true,\n            \"archived\": false,\n            \"disabled\": false,\n            \"visibility\": \"public\",\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\n            \"created_at\": \"2011-01-26T19:01:12Z\",\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\n            \"permissions\": {\n              \"admin\": false,\n              \"push\": false,\n              \"pull\": true\n            },\n            \"allow_rebase_merge\": true,\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n            \"allow_squash_merge\": true,\n            \"allow_auto_merge\": false,\n            \"delete_branch_on_merge\": true,\n            \"allow_merge_commit\": true,\n            \"subscribers_count\": 42,\n            \"network_count\": 0,\n            \"license\": {\n              \"key\": \"mit\",\n              \"name\": \"MIT License\",\n              \"url\": \"https://api.github.com/licenses/mit\",\n              \"spdx_id\": \"MIT\",\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n              \"html_url\": \"https://api.github.com/licenses/mit\"\n            },\n            \"forks\": 1,\n            \"open_issues\": 1,\n            \"watchers\": 1\n          },\n          \"source\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World\",\n            \"full_name\": \"octocat/Hello-World\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n            \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n            \"homepage\": \"https://github.com\",\n            \"language\": null,\n            \"forks_count\": 9,\n            \"stargazers_count\": 80,\n            \"watchers_count\": 80,\n            \"size\": 108,\n            \"default_branch\": \"master\",\n            \"open_issues_count\": 0,\n            \"is_template\": true,\n            \"topics\": [\n              \"octocat\",\n              \"atom\",\n              \"electron\",\n              \"api\"\n            ],\n            \"has_issues\": true,\n            \"has_projects\": true,\n            \"has_wiki\": true,\n            \"has_pages\": false,\n            \"has_downloads\": true,\n            \"archived\": false,\n            \"disabled\": false,\n            \"visibility\": \"public\",\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\n            \"created_at\": \"2011-01-26T19:01:12Z\",\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\n            \"permissions\": {\n              \"admin\": false,\n              \"push\": false,\n              \"pull\": true\n            },\n            \"allow_rebase_merge\": true,\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n            \"allow_squash_merge\": true,\n            \"allow_auto_merge\": false,\n            \"delete_branch_on_merge\": true,\n            \"allow_merge_commit\": true,\n            \"subscribers_count\": 42,\n            \"network_count\": 0,\n            \"license\": {\n              \"key\": \"mit\",\n              \"name\": \"MIT License\",\n              \"url\": \"https://api.github.com/licenses/mit\",\n              \"spdx_id\": \"MIT\",\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n              \"html_url\": \"https://api.github.com/licenses/mit\"\n            },\n            \"forks\": 1,\n            \"open_issues\": 1,\n            \"watchers\": 1\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ FullRepository

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 FullRepository
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestGistComment_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"node_id\": \"MDExOkdpc3RDb21tZW50MQ==\",\n          \"url\": \"https://api.github.com/gists/a6db0bec360bb87e9418/comments/1\",\n          \"body\": \"Just commenting for the sake of commenting\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"created_at\": \"2011-04-18T23:23:56Z\",\n          \"updated_at\": \"2011-04-18T23:23:56Z\",\n          \"author_association\": \"COLLABORATOR\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GistComment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 GistComment
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestGistSimple_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d\",\n          \"forks_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/forks\",\n          \"commits_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/commits\",\n          \"id\": \"aa5a315d61ae9438b18d\",\n          \"node_id\": \"MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk\",\n          \"git_pull_url\": \"https://gist.github.com/aa5a315d61ae9438b18d.git\",\n          \"git_push_url\": \"https://gist.github.com/aa5a315d61ae9438b18d.git\",\n          \"html_url\": \"https://gist.github.com/aa5a315d61ae9438b18d\",\n          \"created_at\": \"2010-04-14T02:15:15Z\",\n          \"updated_at\": \"2011-06-20T11:34:15Z\",\n          \"description\": \"Hello World Examples\",\n          \"comments\": 0,\n          \"comments_url\": \"https://api.github.com/gists/aa5a315d61ae9438b18d/comments/\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GistSimple

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 GistSimple
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestGistsCreateReqFiles_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"hello.rb\": {\n                        \"content\": \"puts \\\"Hello, World!\\\"\"\n                      }\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GistsCreateReqFiles
			typ = make(GistsCreateReqFiles)

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 GistsCreateReqFiles
			typ2 = make(GistsCreateReqFiles)
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestGistsCreateReqPublic1_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"true\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GistsCreateReqPublic1

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 GistsCreateReqPublic1
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestGitCommit_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"sha\": \"7638417db6d59f3c431d3e1f261cc637155684cd\",\n          \"node_id\": \"MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd\",\n          \"author\": {\n            \"date\": \"2014-11-07T22:01:45Z\",\n            \"name\": \"Monalisa Octocat\",\n            \"email\": \"octocat@github.com\"\n          },\n          \"committer\": {\n            \"date\": \"2014-11-07T22:01:45Z\",\n            \"name\": \"Monalisa Octocat\",\n            \"email\": \"octocat@github.com\"\n          },\n          \"message\": \"added readme, because im a good github citizen\",\n          \"tree\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb\",\n            \"sha\": \"691272480426f78a0138979dd3ce63b77f706feb\"\n          },\n          \"parents\": [\n            {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5\",\n              \"sha\": \"1acc419d4d6a9ce985db7be48c6349a0475975b5\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd\"\n            }\n          ],\n          \"verification\": {\n            \"verified\": false,\n            \"reason\": \"unsigned\",\n            \"signature\": null,\n            \"payload\": null\n          }\n        }"},
		{Input: "{\n          \"sha\": \"7638417db6d59f3c431d3e1f261cc637155684cd\",\n          \"node_id\": \"MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd\",\n          \"author\": {\n            \"date\": \"2014-11-07T22:01:45Z\",\n            \"name\": \"Monalisa Octocat\",\n            \"email\": \"octocat@github.com\"\n          },\n          \"committer\": {\n            \"date\": \"2014-11-07T22:01:45Z\",\n            \"name\": \"Monalisa Octocat\",\n            \"email\": \"octocat@github.com\"\n          },\n          \"message\": \"my commit message\",\n          \"tree\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees/827efc6d56897b048c772eb4087f854f46256132\",\n            \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\n          },\n          \"parents\": [\n            {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/7d1b31e74ee336d15cbd21741bc88a537ed063a0\",\n              \"sha\": \"7d1b31e74ee336d15cbd21741bc88a537ed063a0\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/commit/7d1b31e74ee336d15cbd21741bc88a537ed063a0\"\n            }\n          ],\n          \"verification\": {\n            \"verified\": false,\n            \"reason\": \"unsigned\",\n            \"signature\": null,\n            \"payload\": null\n          },\n          \"html_url\": \"https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GitCommit

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 GitCommit
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestGitRef_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"ref\": \"refs/heads/featureA\",\n          \"node_id\": \"MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlQQ==\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA\",\n          \"object\": {\n            \"type\": \"commit\",\n            \"sha\": \"aa218f56b14c9653891f9e74264a383fa43fefbd\",\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd\"\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GitRef

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 GitRef
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestGitTag_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"node_id\": \"MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==\",\n          \"tag\": \"v0.0.1\",\n          \"sha\": \"940bd336248efae0f9ee5bc7b2d5c985887b16ac\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac\",\n          \"message\": \"initial version\",\n          \"tagger\": {\n            \"name\": \"Monalisa Octocat\",\n            \"email\": \"octocat@github.com\",\n            \"date\": \"2014-11-07T22:01:45Z\"\n          },\n          \"object\": {\n            \"type\": \"commit\",\n            \"sha\": \"c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c\",\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits/c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c\"\n          },\n          \"verification\": {\n            \"verified\": false,\n            \"reason\": \"unsigned\",\n            \"signature\": null,\n            \"payload\": null\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GitTag

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 GitTag
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestGitTree_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"sha\": \"9fb037999f264ba9a7fc6274d15fa3ae2ab98312\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/trees/9fb037999f264ba9a7fc6274d15fa3ae2ab98312\",\n          \"tree\": [\n            {\n              \"path\": \"file.rb\",\n              \"mode\": \"100644\",\n              \"type\": \"blob\",\n              \"size\": 30,\n              \"sha\": \"44b4fc6d56897b048c772eb4087f854f46256132\",\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132\"\n            },\n            {\n              \"path\": \"subdir\",\n              \"mode\": \"040000\",\n              \"type\": \"tree\",\n              \"sha\": \"f484d249c660418515fb01c2b9662073663c242e\",\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/f484d249c660418515fb01c2b9662073663c242e\"\n            },\n            {\n              \"path\": \"exec_file\",\n              \"mode\": \"100755\",\n              \"type\": \"blob\",\n              \"size\": 75,\n              \"sha\": \"45b983be36b73c0788dc9cbcb76cbb80fc7bb057\",\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/45b983be36b73c0788dc9cbcb76cbb80fc7bb057\"\n            }\n          ],\n          \"truncated\": false\n        }"},
		{Input: "{\n          \"sha\": \"cd8274d15fa3ae2ab983129fb037999f264ba9a7\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7\",\n          \"tree\": [\n            {\n              \"path\": \"file.rb\",\n              \"mode\": \"100644\",\n              \"type\": \"blob\",\n              \"size\": 132,\n              \"sha\": \"7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\",\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\"\n            }\n          ],\n          \"truncated\": true\n        }"},
		{Input: "{\n          \"sha\": \"fc6274d15fa3ae2ab983129fb037999f264ba9a7\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/trees/fc6274d15fa3ae2ab983129fb037999f264ba9a7\",\n          \"tree\": [\n            {\n              \"path\": \"subdir/file.txt\",\n              \"mode\": \"100644\",\n              \"type\": \"blob\",\n              \"size\": 132,\n              \"sha\": \"7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\",\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/git/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b\"\n            }\n          ],\n          \"truncated\": false\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GitTree

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 GitTree
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestGitignoreTemplate_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"name\": \"C\",\n          \"source\": \"# Object files\\n*.o\\n\\n# Libraries\\n*.lib\\n*.a\\n\\n# Shared objects (inc. Windows DLLs)\\n*.dll\\n*.so\\n*.so.*\\n*.dylib\\n\\n# Executables\\n*.exe\\n*.out\\n*.app\\n\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GitignoreTemplate

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 GitignoreTemplate
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestGpgKey_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 3,\n          \"primary_key_id\": 2,\n          \"key_id\": \"3262EFF25BA0D270\",\n          \"public_key\": \"xsBNBFayYZ...\",\n          \"emails\": [\n            {\n              \"email\": \"mastahyeti@users.noreply.github.com\",\n              \"verified\": true\n            }\n          ],\n          \"subkeys\": [\n            {\n              \"id\": 4,\n              \"primary_key_id\": 3,\n              \"key_id\": \"4A595D4C72EE49C7\",\n              \"public_key\": \"zsBNBFayYZ...\",\n              \"emails\": [\n\n              ],\n              \"subkeys\": [\n\n              ],\n              \"can_sign\": false,\n              \"can_encrypt_comms\": true,\n              \"can_encrypt_storage\": true,\n              \"can_certify\": false,\n              \"created_at\": \"2016-03-24T11:31:04-06:00\",\n              \"expires_at\": \"2016-03-24T11:31:04-07:00\"\n            }\n          ],\n          \"can_sign\": true,\n          \"can_encrypt_comms\": false,\n          \"can_encrypt_storage\": false,\n          \"can_certify\": true,\n          \"created_at\": \"2016-03-24T11:31:04-06:00\",\n          \"expires_at\": \"2016-03-24T11:31:04-07:00\",\n          \"raw_key\": \"\\\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\\\nVersion: GnuPG v2\\\\n\\\\nmQENBFayYZ0BCAC4hScoJXXpyR+MXGcrBxElqw3FzCVvkViuyeko+Jp76QJhg8kr\\\\nucRTxbnOoHfda/FmilEa/wxf9ch5/PSrrL26FxEoPHhJolp8fnIDLQeITn94NYdB\\\\nZtnnEKslpPrG97qSUWIchvyqCPtvOb8+8fWvGx9K/ZWcEEdh1X8+WFR2jMENMeoX\\\\nwxHWQoPnS7LpX/85/M7VUcJxvDVfv+eHsnQupmE5bGarKNih0oMe3LbdN3qA5PTz\\\\nSCm6Iudar1VsQ+xTz08ymL7t4pnEtLguQ7EyatFHCjxNblv5RzxoL0tDgN3HqoDz\\\\nc7TEA+q4RtDQl9amcvQ95emnXmZ974u7UkYdABEBAAG0HlNvbWUgVXNlciA8c29t\\\\nZXVzZXJAZ21haWwuY29tPokBOAQTAQIAIgUCVrJhnQIbAwYLCQgHAwIGFQgCCQoL\\\\nBBYCAwECHgECF4AACgkQMmLv8lug0nAViQgArWjI55+7p48URr2z9Jvak+yrBTx1\\\\nzkufltQAnHTJkq+Kl9dySSmTnOop8o3rE4++IOpYV5Y36PkKf9EZMk4n1RQiDPKE\\\\nAFtRVTkRaoWzOir9KQXJPfhKrl01j/QzY+utfiMvUoBJZ9ybq8Pa885SljW9lbaX\\\\nIYw+hl8ZdJ2KStvGrEyfQvRyq3aN5c9TV//4BdGnwx7Qabq/U+G18lizG6f/yq15\\\\ned7t0KELaCfeKPvytp4VE9/z/Ksah/h3+Qilx07/oG2Ae5kC1bEC9coD/ogPUhbv\\\\nb2bsBIoY9E9YwsLoif2lU+o1t76zLgUktuNscRRUKobW028H1zuFS/XQhrkBDQRW\\\\nsmGdAQgApnyyv3i144OLYy0O4UKQxd3e10Y3WpDwfnGIBefAI1m7RxnUxBag/DsU\\\\n7gi9qLEC4VHSfq4eiNfr1LJOyCL2edTgCWFgBhVjbXjZe6YAOrAnhxwCErnN0Y7N\\\\n6s8wVh9fObSOyf8ZE6G7JeKpcq9Q6gd/KxagfD48a1v+fyRHpyQc6J9pUEmtrDJ7\\\\nBjmsd2VWzLBvNWdHyxDNtZweIaqIO9VUYYpr1mtTliNBOZLUelmgrt7HBRcJpWMA\\\\nS8muVVbuP5MK0trLBq/JB8qUH3zRzB/PhMgzmkIfjEK1VYDWm4E8DYyTWEJcHqkb\\\\neqFsNjrIlwPaA122BWC6gUOPwwH+oQARAQABiQEfBBgBAgAJBQJWsmGdAhsMAAoJ\\\\nEDJi7/JboNJwAyAIALd4xcdmGbZD98gScJzqwzkOMcO8zFHqHNvJ42xIFvGny7c0\\\\n1Rx7iyrdypOby5AxE+viQcjG4rpLZW/xKYBNGrCfDyQO7511I0v8x20EICMlMfD/\\\\nNrWQCzesEPcUlKTP07d+sFyP8AyseOidbzY/92CpskTgdSBjY/ntLSaoknl/fjJE\\\\nQM8OkPqU7IraO1Jzzdnm20d5PZL9+PIwIWdSTedU/vBMTJyNcoqvSfKf1wNC66XP\\\\nhqfYgXJE564AdWZKA3C0IyCqiv+LHwxLnUHio1a4/r91C8KPzxs6tGxRDjXLd7ms\\\\nuYFGWymiUGOE/giHlcxdYcHzwLnPDliMQOLiTkK5AQ0EVuxMygEIAOD+bW1cDTmE\\\\nBxh5JECoqeHuwgl6DlLhnubWPkQ4ZeRzBRAsFcEJQlwlJjrzFDicL+lnm6Qq4tt0\\\\n560TwHdf15/AKTZIZu7H25axvGNzgeaUkJEJdYAq9zTKWwX7wKyzBszi485nQg97\\\\nMfAqwhMpDW0Qqf8+7Ug+WEmfBSGv9uL3aQC6WEeIsHfri0n0n8v4XgwhfShXguxO\\\\nCsOztEsuW7WWKW9P4TngKKv4lCHdPlV6FwxeMzODBJvc2fkHVHnqc0PqszJ5xcF8\\\\n6gZCpMM027SbpeYWCAD5zwJyYP9ntfO1p2HjnQ1dZaP9FeNcO7uIV1Lnd1eGCu6I\\\\nsrVp5k1f3isAEQEAAYkCPgQYAQIACQUCVuxMygIbAgEpCRAyYu/yW6DScMBdIAQZ\\\\nAQIABgUCVuxMygAKCRCKohN4dhq2b4tcCACHxmOHVXNpu47OvUGYQydLgMACUlXN\\\\nlj+HfE0VReqShxdDmpasAY9IRpuMB2RsGK8GbNP+4SlOlAiPf5SMhS7nZNkNDgQQ\\\\naZ3HFpgrFmFwmE10BKT4iQtoxELLM57z0qGOAfTsEjWFQa4sF+6IHAQR/ptkdkkI\\\\nBUEXiMnAwVwBysLIJiLO8qdjB6qp52QkT074JVrwywT/P+DkMfC2k4r/AfEbf6eF\\\\ndmPDuPk6KD87+hJZsSa5MaMUBQVvRO/mgEkhJRITVu58eWGaBOcQJ8gqurhCqM5P\\\\nDfUA4TJ7wiqM6sS764vV1rOioTTXkszzhClQqET7hPVnVQjenYgv0EZHNyQH/1f1\\\\n/CYqvV1vFjM9vJjMbxXsATCkZe6wvBVKD8vLsJAr8N+onKQz+4OPc3kmKq7aESu3\\\\nCi/iuie5KKVwnuNhr9AzT61vEkKxwHcVFEvHB77F6ZAAInhRvjzmQbD2dlPLLQCC\\\\nqDj71ODSSAPTEmUy6969bgD9PfWei7kNkBIx7s3eBv8yzytSc2EcuUgopqFazquw\\\\nFs1+tqGHjBvQfTo6bqbJjp/9Ci2pvde3ElV2rAgUlb3lqXyXjRDqrXosh5GcRPQj\\\\nK8Nhj1BNhnrCVskE4BP0LYbOHuzgm86uXwGCFsY+w2VOsSm16Jx5GHyG5S5WU3+D\\\\nIts/HFYRLiFgDLmTlxo=\\\\n=+OzK\\\\n-----END PGP PUBLIC KEY BLOCK-----\\\"\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GpgKey

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 GpgKey
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestGroupMapping_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"groups\": [\n            {\n              \"group_id\": \"123\",\n              \"group_name\": \"Octocat admins\",\n              \"group_description\": \"The people who configure your octoworld.\"\n            }\n          ]\n        }"},
		{Input: "{\n          \"groups\": [\n            {\n              \"group_id\": \"123\",\n              \"group_name\": \"Octocat admins\",\n              \"group_description\": \"The people who configure your octoworld.\"\n            },\n            {\n              \"group_id\": \"456\",\n              \"group_name\": \"Octocat docs members\",\n              \"group_description\": \"The people who make your octoworld come to life.\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ GroupMapping

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 GroupMapping
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestHook_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"type\": \"Repository\",\n          \"id\": 12345678,\n          \"name\": \"web\",\n          \"active\": true,\n          \"events\": [\n            \"push\",\n            \"pull_request\"\n          ],\n          \"config\": {\n            \"content_type\": \"json\",\n            \"insecure_ssl\": \"0\",\n            \"url\": \"https://example.com/webhook\"\n          },\n          \"updated_at\": \"2019-06-03T00:57:16Z\",\n          \"created_at\": \"2019-06-03T00:57:16Z\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/12345678\",\n          \"test_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/12345678/test\",\n          \"ping_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/12345678/pings\",\n          \"deliveries_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/12345678/deliveries\",\n          \"last_response\": {\n            \"code\": null,\n            \"status\": \"unused\",\n            \"message\": null\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Hook

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Hook
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestHookDelivery_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 12345678,\n          \"guid\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\n          \"delivered_at\": \"2019-06-03T00:57:16Z\",\n          \"redelivery\": false,\n          \"duration\": 0.27,\n          \"status\": \"OK\",\n          \"status_code\": 200,\n          \"event\": \"issues\",\n          \"action\": \"opened\",\n          \"installation_id\": 123,\n          \"repository_id\": 456,\n          \"url\": \"https://www.example.com\",\n          \"request\": {\n            \"headers\": {\n              \"X-GitHub-Delivery\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\n              \"X-Hub-Signature-256\": \"sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n              \"Accept\": \"*/*\",\n              \"X-GitHub-Hook-ID\": \"42\",\n              \"User-Agent\": \"GitHub-Hookshot/b8c71d8\",\n              \"X-GitHub-Event\": \"issues\",\n              \"X-GitHub-Hook-Installation-Target-ID\": \"123\",\n              \"X-GitHub-Hook-Installation-Target-Type\": \"repository\",\n              \"content-type\": \"application/json\",\n              \"X-Hub-Signature\": \"sha1=a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d\"\n            },\n            \"payload\": {\n              \"action\": \"opened\",\n              \"issue\": {\n                \"body\": \"foo\"\n              },\n              \"repository\": {\n                \"id\": 123\n              }\n            }\n          },\n          \"response\": {\n            \"headers\": {\n              \"Content-Type\": \"text/html;charset=utf-8\"\n            },\n            \"payload\": \"ok\"\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ HookDelivery

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 HookDelivery
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestHovercard_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"contexts\": [\n            {\n              \"message\": \"Owns this repository\",\n              \"octicon\": \"repo\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Hovercard

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Hovercard
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestImport_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"vcs\": \"subversion\",\n          \"use_lfs\": true,\n          \"vcs_url\": \"http://svn.mycompany.com/svn/myproject\",\n          \"status\": \"complete\",\n          \"status_text\": \"Done\",\n          \"has_large_files\": true,\n          \"large_files_size\": 132331036,\n          \"large_files_count\": 1,\n          \"authors_count\": 4,\n          \"url\": \"https://api.github.com/repos/octocat/socm/import\",\n          \"html_url\": \"https://import.github.com/octocat/socm/import\",\n          \"authors_url\": \"https://api.github.com/repos/octocat/socm/import/authors\",\n          \"repository_url\": \"https://api.github.com/repos/octocat/socm\"\n        }"},
		{Input: "{\n          \"vcs\": \"subversion\",\n          \"use_lfs\": true,\n          \"vcs_url\": \"http://svn.mycompany.com/svn/myproject\",\n          \"status\": \"detecting\",\n          \"url\": \"https://api.github.com/repos/octocat/socm/import\",\n          \"html_url\": \"https://import.github.com/octocat/socm/import\",\n          \"authors_url\": \"https://api.github.com/repos/octocat/socm/import/authors\",\n          \"repository_url\": \"https://api.github.com/repos/octocat/socm\"\n        }"},
		{Input: "{\n          \"vcs\": \"subversion\",\n          \"use_lfs\": true,\n          \"vcs_url\": \"http://svn.mycompany.com/svn/myproject\",\n          \"status\": \"importing\",\n          \"status_text\": \"Importing...\",\n          \"has_large_files\": false,\n          \"large_files_size\": 0,\n          \"large_files_count\": 0,\n          \"authors_count\": 0,\n          \"commit_count\": 1042,\n          \"url\": \"https://api.github.com/repos/octocat/socm/import\",\n          \"html_url\": \"https://import.github.com/octocat/socm/import\",\n          \"authors_url\": \"https://api.github.com/repos/octocat/socm/import/authors\",\n          \"repository_url\": \"https://api.github.com/repos/octocat/socm\"\n        }"},
		{Input: "{\n          \"vcs\": \"tfvc\",\n          \"use_lfs\": true,\n          \"vcs_url\": \"http://tfs.mycompany.com/tfs/myproject\",\n          \"tfvc_project\": \"project1\",\n          \"status\": \"importing\",\n          \"status_text\": \"Importing...\",\n          \"has_large_files\": false,\n          \"large_files_size\": 0,\n          \"large_files_count\": 0,\n          \"authors_count\": 0,\n          \"commit_count\": 1042,\n          \"url\": \"https://api.github.com/repos/octocat/socm/import\",\n          \"html_url\": \"https://import.github.com/octocat/socm/import\",\n          \"authors_url\": \"https://api.github.com/repos/octocat/socm/import/authors\",\n          \"repository_url\": \"https://api.github.com/repos/octocat/socm\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Import

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Import
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestInstallationToken_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"token\": \"ghs_16C7e42F292c6912E7710c838347Ae178B4a\",\n          \"expires_at\": \"2016-07-11T22:14:10Z\",\n          \"permissions\": {\n            \"issues\": \"write\",\n            \"contents\": \"read\"\n          },\n          \"repository_selection\": \"selected\",\n          \"repositories\": [\n            {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"template_repository\": null,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://github.com/licenses/mit\"\n              },\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ InstallationToken

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 InstallationToken
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestIntegration_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"slug\": \"octoapp\",\n          \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\n          \"owner\": {\n            \"login\": \"github\",\n            \"id\": 1,\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n            \"url\": \"https://api.github.com/orgs/github\",\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": true\n          },\n          \"name\": \"Octocat App\",\n          \"description\": \"\",\n          \"external_url\": \"https://example.com\",\n          \"html_url\": \"https://github.com/apps/octoapp\",\n          \"created_at\": \"2017-07-08T16:18:44-04:00\",\n          \"updated_at\": \"2017-07-08T16:18:44-04:00\",\n          \"permissions\": {\n            \"metadata\": \"read\",\n            \"contents\": \"read\",\n            \"issues\": \"write\",\n            \"single_file\": \"write\"\n          },\n          \"events\": [\n            \"push\",\n            \"pull_request\"\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Integration

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Integration
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestIntegrationPermissions_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n              \"issues\": \"read\",\n              \"deployments\": \"write\"\n            }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ IntegrationPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 IntegrationPermissions
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestInteractionExpiry_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"one_month\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ InteractionExpiry

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 InteractionExpiry
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestInteractionGroup_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"collaborators_only\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ InteractionGroup

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 InteractionGroup
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestInteractionLimitResponse_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"limit\": \"collaborators_only\",\n          \"origin\": \"organization\",\n          \"expires_at\": \"2018-08-17T04:18:39Z\"\n        }"},
		{Input: "{\n          \"limit\": \"collaborators_only\",\n          \"origin\": \"repository\",\n          \"expires_at\": \"2018-08-17T04:18:39Z\"\n        }"},
		{Input: "{\n          \"limit\": \"collaborators_only\",\n          \"origin\": \"user\",\n          \"expires_at\": \"2018-08-17T04:18:39Z\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ InteractionLimitResponse

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 InteractionLimitResponse
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestIssue_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"node_id\": \"MDU6SXNzdWUx\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\n          \"repository_url\": \"https://api.github.com/repos/octocat/Hello-World\",\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}\",\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\",\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/events\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/issues/1347\",\n          \"number\": 1347,\n          \"state\": \"open\",\n          \"title\": \"Found a bug\",\n          \"body\": \"I'm having a problem with this.\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"labels\": [\n            {\n              \"id\": 208045946,\n              \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\n              \"name\": \"bug\",\n              \"description\": \"Something isn't working\",\n              \"color\": \"f29513\",\n              \"default\": true\n            }\n          ],\n          \"assignee\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"assignees\": [\n            {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            }\n          ],\n          \"milestone\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\n            \"id\": 1002604,\n            \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\n            \"number\": 1,\n            \"state\": \"open\",\n            \"title\": \"v1.0\",\n            \"description\": \"Tracking milestone for version 1.0\",\n            \"creator\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"open_issues\": 4,\n            \"closed_issues\": 8,\n            \"created_at\": \"2011-04-10T20:09:31Z\",\n            \"updated_at\": \"2014-03-03T18:58:10Z\",\n            \"closed_at\": \"2013-02-12T13:22:01Z\",\n            \"due_on\": \"2012-10-09T23:39:01Z\"\n          },\n          \"locked\": true,\n          \"active_lock_reason\": \"too heated\",\n          \"comments\": 0,\n          \"pull_request\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\n            \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\n            \"patch_url\": \"https://github.com/octocat/Hello-World/pull/1347.patch\"\n          },\n          \"closed_at\": null,\n          \"created_at\": \"2011-04-22T13:33:48Z\",\n          \"updated_at\": \"2011-04-22T13:33:48Z\",\n          \"closed_by\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"author_association\": \"COLLABORATOR\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Issue

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Issue
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestIssueComment_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"node_id\": \"MDEyOklzc3VlQ29tbWVudDE=\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments/1\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/issues/1347#issuecomment-1\",\n          \"body\": \"Me too\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"created_at\": \"2011-04-14T16:00:49Z\",\n          \"updated_at\": \"2011-04-14T16:00:49Z\",\n          \"issue_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\n          \"author_association\": \"COLLABORATOR\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ IssueComment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 IssueComment
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestIssueEvent_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"node_id\": \"MDEwOklzc3VlRXZlbnQx\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events/1\",\n          \"actor\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"event\": \"closed\",\n          \"commit_id\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"commit_url\": \"https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"created_at\": \"2011-04-14T16:00:49Z\",\n          \"issue\": {\n            \"id\": 1,\n            \"node_id\": \"MDU6SXNzdWUx\",\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\n            \"repository_url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/events\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/issues/1347\",\n            \"number\": 1347,\n            \"state\": \"open\",\n            \"title\": \"Found a bug\",\n            \"body\": \"I'm having a problem with this.\",\n            \"user\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"labels\": [\n              {\n                \"id\": 208045946,\n                \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\n                \"name\": \"bug\",\n                \"description\": \"Something isn't working\",\n                \"color\": \"f29513\",\n                \"default\": true\n              }\n            ],\n            \"assignee\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"assignees\": [\n              {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              }\n            ],\n            \"milestone\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\n              \"id\": 1002604,\n              \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\n              \"number\": 1,\n              \"state\": \"open\",\n              \"title\": \"v1.0\",\n              \"description\": \"Tracking milestone for version 1.0\",\n              \"creator\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"open_issues\": 4,\n              \"closed_issues\": 8,\n              \"created_at\": \"2011-04-10T20:09:31Z\",\n              \"updated_at\": \"2014-03-03T18:58:10Z\",\n              \"closed_at\": \"2013-02-12T13:22:01Z\",\n              \"due_on\": \"2012-10-09T23:39:01Z\"\n            },\n            \"locked\": true,\n            \"performed_via_github_app\": {\n              \"id\": 1,\n              \"slug\": \"octoapp\",\n              \"node_id\": \"MDExOkludGVncmF0aW9uMQ==\",\n              \"owner\": {\n                \"login\": \"github\",\n                \"id\": 1,\n                \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n                \"url\": \"https://api.github.com/orgs/github\",\n                \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n                \"events_url\": \"https://api.github.com/orgs/github/events\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": true\n              },\n              \"name\": \"Octocat App\",\n              \"description\": \"\",\n              \"external_url\": \"https://example.com\",\n              \"html_url\": \"https://github.com/apps/octoapp\",\n              \"created_at\": \"2017-07-08T16:18:44-04:00\",\n              \"updated_at\": \"2017-07-08T16:18:44-04:00\",\n              \"permissions\": {\n                \"metadata\": \"read\",\n                \"contents\": \"read\",\n                \"issues\": \"write\",\n                \"single_file\": \"write\"\n              },\n              \"events\": [\n                \"push\",\n                \"pull_request\"\n              ]\n            },\n            \"comments\": 0,\n            \"pull_request\": {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\",\n              \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\n              \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\n              \"patch_url\": \"https://github.com/octocat/Hello-World/pull/1347.patch\"\n            },\n            \"closed_at\": null,\n            \"created_at\": \"2011-04-22T13:33:48Z\",\n            \"updated_at\": \"2011-04-22T13:33:48Z\",\n            \"author_association\": \"COLLABORATOR\"\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ IssueEvent

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 IssueEvent
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestIssueSimple_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"node_id\": \"MDU6SXNzdWUx\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\n          \"repository_url\": \"https://api.github.com/repos/octocat/Hello-World\",\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}\",\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\",\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/events\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/issues/1347\",\n          \"number\": 1347,\n          \"state\": \"open\",\n          \"title\": \"Found a bug\",\n          \"body\": \"I'm having a problem with this.\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"labels\": [\n            {\n              \"id\": 208045946,\n              \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\n              \"name\": \"bug\",\n              \"description\": \"Something isn't working\",\n              \"color\": \"f29513\",\n              \"default\": true\n            }\n          ],\n          \"assignee\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"assignees\": [\n            {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            {\n              \"login\": \"hubot\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/hubot\",\n              \"html_url\": \"https://github.com/hubot\",\n              \"followers_url\": \"https://api.github.com/users/hubot/followers\",\n              \"following_url\": \"https://api.github.com/users/hubot/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/hubot/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/hubot/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/hubot/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/hubot/orgs\",\n              \"repos_url\": \"https://api.github.com/users/hubot/repos\",\n              \"events_url\": \"https://api.github.com/users/hubot/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/hubot/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": true\n            },\n            {\n              \"login\": \"other_user\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/other_user_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/other_user\",\n              \"html_url\": \"https://github.com/other_user\",\n              \"followers_url\": \"https://api.github.com/users/other_user/followers\",\n              \"following_url\": \"https://api.github.com/users/other_user/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/other_user/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/other_user/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/other_user/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/other_user/orgs\",\n              \"repos_url\": \"https://api.github.com/users/other_user/repos\",\n              \"events_url\": \"https://api.github.com/users/other_user/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/other_user/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            }\n          ],\n          \"milestone\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\n            \"id\": 1002604,\n            \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\n            \"number\": 1,\n            \"state\": \"open\",\n            \"title\": \"v1.0\",\n            \"description\": \"Tracking milestone for version 1.0\",\n            \"creator\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"open_issues\": 4,\n            \"closed_issues\": 8,\n            \"created_at\": \"2011-04-10T20:09:31Z\",\n            \"updated_at\": \"2014-03-03T18:58:10Z\",\n            \"closed_at\": \"2013-02-12T13:22:01Z\",\n            \"due_on\": \"2012-10-09T23:39:01Z\"\n          },\n          \"locked\": true,\n          \"active_lock_reason\": \"too heated\",\n          \"comments\": 0,\n          \"pull_request\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\n            \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\n            \"patch_url\": \"https://github.com/octocat/Hello-World/pull/1347.patch\"\n          },\n          \"closed_at\": null,\n          \"created_at\": \"2011-04-22T13:33:48Z\",\n          \"updated_at\": \"2011-04-22T13:33:48Z\",\n          \"author_association\": \"COLLABORATOR\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ IssueSimple

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 IssueSimple
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestJob_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 399444496,\n          \"run_id\": 29679449,\n          \"run_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449\",\n          \"node_id\": \"MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==\",\n          \"head_sha\": \"f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0\",\n          \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496\",\n          \"html_url\": \"https://github.com/octo-org/octo-repo/runs/399444496\",\n          \"status\": \"completed\",\n          \"conclusion\": \"success\",\n          \"started_at\": \"2020-01-20T17:42:40Z\",\n          \"completed_at\": \"2020-01-20T17:44:39Z\",\n          \"name\": \"build\",\n          \"steps\": [\n            {\n              \"name\": \"Set up job\",\n              \"status\": \"completed\",\n              \"conclusion\": \"success\",\n              \"number\": 1,\n              \"started_at\": \"2020-01-20T09:42:40.000-08:00\",\n              \"completed_at\": \"2020-01-20T09:42:41.000-08:00\"\n            },\n            {\n              \"name\": \"Run actions/checkout@v2\",\n              \"status\": \"completed\",\n              \"conclusion\": \"success\",\n              \"number\": 2,\n              \"started_at\": \"2020-01-20T09:42:41.000-08:00\",\n              \"completed_at\": \"2020-01-20T09:42:45.000-08:00\"\n            },\n            {\n              \"name\": \"Set up Ruby\",\n              \"status\": \"completed\",\n              \"conclusion\": \"success\",\n              \"number\": 3,\n              \"started_at\": \"2020-01-20T09:42:45.000-08:00\",\n              \"completed_at\": \"2020-01-20T09:42:45.000-08:00\"\n            },\n            {\n              \"name\": \"Run actions/cache@v2\",\n              \"status\": \"completed\",\n              \"conclusion\": \"success\",\n              \"number\": 4,\n              \"started_at\": \"2020-01-20T09:42:45.000-08:00\",\n              \"completed_at\": \"2020-01-20T09:42:48.000-08:00\"\n            },\n            {\n              \"name\": \"Install Bundler\",\n              \"status\": \"completed\",\n              \"conclusion\": \"success\",\n              \"number\": 5,\n              \"started_at\": \"2020-01-20T09:42:48.000-08:00\",\n              \"completed_at\": \"2020-01-20T09:42:52.000-08:00\"\n            },\n            {\n              \"name\": \"Install Gems\",\n              \"status\": \"completed\",\n              \"conclusion\": \"success\",\n              \"number\": 6,\n              \"started_at\": \"2020-01-20T09:42:52.000-08:00\",\n              \"completed_at\": \"2020-01-20T09:42:53.000-08:00\"\n            },\n            {\n              \"name\": \"Run Tests\",\n              \"status\": \"completed\",\n              \"conclusion\": \"success\",\n              \"number\": 7,\n              \"started_at\": \"2020-01-20T09:42:53.000-08:00\",\n              \"completed_at\": \"2020-01-20T09:42:59.000-08:00\"\n            },\n            {\n              \"name\": \"Deploy to Heroku\",\n              \"status\": \"completed\",\n              \"conclusion\": \"success\",\n              \"number\": 8,\n              \"started_at\": \"2020-01-20T09:42:59.000-08:00\",\n              \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\n            },\n            {\n              \"name\": \"Post actions/cache@v2\",\n              \"status\": \"completed\",\n              \"conclusion\": \"success\",\n              \"number\": 16,\n              \"started_at\": \"2020-01-20T09:44:39.000-08:00\",\n              \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\n            },\n            {\n              \"name\": \"Complete job\",\n              \"status\": \"completed\",\n              \"conclusion\": \"success\",\n              \"number\": 17,\n              \"started_at\": \"2020-01-20T09:44:39.000-08:00\",\n              \"completed_at\": \"2020-01-20T09:44:39.000-08:00\"\n            }\n          ],\n          \"check_run_url\": \"https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Job

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Job
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestJobStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"queued\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ JobStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 JobStatus
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestJobStepsItemStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"queued\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ JobStepsItemStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 JobStepsItemStatus
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestKey_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"key\": \"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234\",\n          \"id\": 2,\n          \"url\": \"https://api.github.com/user/keys/2\",\n          \"title\": \"ssh-rsa AAAAB3NzaC1yc2EAAA\",\n          \"created_at\": \"2020-06-11T21:31:57Z\",\n          \"verified\": false,\n          \"read_only\": false\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Key

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Key
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestLabel_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 208045946,\n          \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\n          \"name\": \"bug\",\n          \"description\": \"Something isn't working\",\n          \"color\": \"f29513\",\n          \"default\": true\n        }"},
		{Input: "{\n          \"id\": 208045946,\n          \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug%20:bug:\",\n          \"name\": \"bug :bug:\",\n          \"description\": \"Small bug fix required\",\n          \"color\": \"b01f26\",\n          \"default\": true\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Label

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Label
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestLanguage_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"C\": 78769,\n          \"Python\": 7769\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Language
			typ = make(Language)

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Language
			typ2 = make(Language)
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestLicense_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"key\": \"mit\",\n          \"name\": \"MIT License\",\n          \"spdx_id\": \"MIT\",\n          \"url\": \"https://api.github.com/licenses/mit\",\n          \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n          \"html_url\": \"http://choosealicense.com/licenses/mit/\",\n          \"description\": \"A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.\",\n          \"implementation\": \"Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.\",\n          \"permissions\": [\n            \"commercial-use\",\n            \"modifications\",\n            \"distribution\",\n            \"sublicense\",\n            \"private-use\"\n          ],\n          \"conditions\": [\n            \"include-copyright\"\n          ],\n          \"limitations\": [\n            \"no-liability\"\n          ],\n          \"body\": \"\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) [year] [fullname]\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\",\n          \"featured\": true\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ License

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 License
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestLicenseContent_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"name\": \"LICENSE\",\n          \"path\": \"LICENSE\",\n          \"sha\": \"401c59dcc4570b954dd6d345e76199e1f4e76266\",\n          \"size\": 1077,\n          \"url\": \"https://api.github.com/repos/benbalter/gman/contents/LICENSE?ref=master\",\n          \"html_url\": \"https://github.com/benbalter/gman/blob/master/LICENSE\",\n          \"git_url\": \"https://api.github.com/repos/benbalter/gman/git/blobs/401c59dcc4570b954dd6d345e76199e1f4e76266\",\n          \"download_url\": \"https://raw.githubusercontent.com/benbalter/gman/master/LICENSE?lab=true\",\n          \"type\": \"file\",\n          \"content\": \"VGhlIE1JVCBMaWNlbnNlIChNSVQpCgpDb3B5cmlnaHQgKGMpIDIwMTMgQmVu\\nIEJhbHRlcgoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBv\\nZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZgp0\\naGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmls\\nZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbgp0aGUgU29mdHdhcmUg\\nd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRh\\ndGlvbiB0aGUgcmlnaHRzIHRvCnVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwg\\ncHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwg\\nY29waWVzIG9mCnRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25z\\nIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywK\\nc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJv\\ndmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGlj\\nZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwKY29waWVzIG9yIHN1YnN0YW50\\naWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJ\\nUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBL\\nSU5ELCBFWFBSRVNTIE9SCklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJ\\nTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBG\\nSVRORVNTCkZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklO\\nR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUgpDT1BZ\\nUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdF\\nUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIKSU4gQU4gQUNUSU9OIE9G\\nIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBP\\nVVQgT0YgT1IgSU4KQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBU\\nSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4K\\n\",\n          \"encoding\": \"base64\",\n          \"_links\": {\n            \"self\": \"https://api.github.com/repos/benbalter/gman/contents/LICENSE?ref=master\",\n            \"git\": \"https://api.github.com/repos/benbalter/gman/git/blobs/401c59dcc4570b954dd6d345e76199e1f4e76266\",\n            \"html\": \"https://github.com/benbalter/gman/blob/master/LICENSE\"\n          },\n          \"license\": {\n            \"key\": \"mit\",\n            \"name\": \"MIT License\",\n            \"spdx_id\": \"MIT\",\n            \"url\": \"https://api.github.com/licenses/mit\",\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ LicenseContent

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 LicenseContent
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestMarketplacePurchase_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/orgs/github\",\n          \"type\": \"Organization\",\n          \"id\": 4,\n          \"login\": \"github\",\n          \"organization_billing_email\": \"billing@github.com\",\n          \"email\": \"billing@github.com\",\n          \"marketplace_pending_change\": {\n            \"effective_date\": \"2017-11-11T00:00:00Z\",\n            \"unit_count\": null,\n            \"id\": 77,\n            \"plan\": {\n              \"url\": \"https://api.github.com/marketplace_listing/plans/1111\",\n              \"accounts_url\": \"https://api.github.com/marketplace_listing/plans/1111/accounts\",\n              \"id\": 1111,\n              \"number\": 2,\n              \"name\": \"Startup\",\n              \"description\": \"A professional-grade CI solution\",\n              \"monthly_price_in_cents\": 699,\n              \"yearly_price_in_cents\": 7870,\n              \"price_model\": \"flat-rate\",\n              \"has_free_trial\": true,\n              \"state\": \"published\",\n              \"unit_name\": null,\n              \"bullets\": [\n                \"Up to 10 private repositories\",\n                \"3 concurrent builds\"\n              ]\n            }\n          },\n          \"marketplace_purchase\": {\n            \"billing_cycle\": \"monthly\",\n            \"next_billing_date\": \"2017-11-11T00:00:00Z\",\n            \"unit_count\": null,\n            \"on_free_trial\": true,\n            \"free_trial_ends_on\": \"2017-11-11T00:00:00Z\",\n            \"updated_at\": \"2017-11-02T01:12:12Z\",\n            \"plan\": {\n              \"url\": \"https://api.github.com/marketplace_listing/plans/1313\",\n              \"accounts_url\": \"https://api.github.com/marketplace_listing/plans/1313/accounts\",\n              \"id\": 1313,\n              \"number\": 3,\n              \"name\": \"Pro\",\n              \"description\": \"A professional-grade CI solution\",\n              \"monthly_price_in_cents\": 1099,\n              \"yearly_price_in_cents\": 11870,\n              \"price_model\": \"flat-rate\",\n              \"has_free_trial\": true,\n              \"unit_name\": null,\n              \"state\": \"published\",\n              \"bullets\": [\n                \"Up to 25 private repositories\",\n                \"11 concurrent builds\"\n              ]\n            }\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ MarketplacePurchase

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 MarketplacePurchase
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestMergedUpstream_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"message\": \"Successfully fetched and fast-forwarded from upstream defunkt:main\",\n          \"merge_type\": \"fast-forward\",\n          \"base_branch\": \"defunkt:main\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ MergedUpstream

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 MergedUpstream
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestMigration_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 79,\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n          \"owner\": {\n            \"login\": \"github\",\n            \"id\": 1,\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n            \"url\": \"https://api.github.com/orgs/github\",\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": true\n          },\n          \"guid\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\n          \"state\": \"exported\",\n          \"lock_repositories\": true,\n          \"exclude_attachments\": false,\n          \"exclude_releases\": false,\n          \"exclude_owner_projects\": false,\n          \"repositories\": [\n            {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"template_repository\": null,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://api.github.com/licenses/mit\"\n              },\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1\n            }\n          ],\n          \"url\": \"https://api.github.com/orgs/octo-org/migrations/79\",\n          \"created_at\": \"2015-07-06T15:33:38-07:00\",\n          \"updated_at\": \"2015-07-06T15:33:38-07:00\"\n        }"},
		{Input: "{\n          \"id\": 79,\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n          \"owner\": {\n            \"login\": \"github\",\n            \"id\": 1,\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n            \"url\": \"https://api.github.com/orgs/github\",\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": true\n          },\n          \"guid\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\n          \"state\": \"pending\",\n          \"lock_repositories\": true,\n          \"exclude_attachments\": false,\n          \"exclude_releases\": false,\n          \"exclude_owner_projects\": false,\n          \"repositories\": [\n            {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"template_repository\": null,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://api.github.com/licenses/mit\"\n              },\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1\n            }\n          ],\n          \"url\": \"https://api.github.com/orgs/octo-org/migrations/79\",\n          \"created_at\": \"2015-07-06T15:33:38-07:00\",\n          \"updated_at\": \"2015-07-06T15:33:38-07:00\"\n        }"},
		{Input: "{\n          \"id\": 79,\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n          \"owner\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"guid\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\n          \"state\": \"exported\",\n          \"lock_repositories\": true,\n          \"exclude_attachments\": false,\n          \"exclude_releases\": false,\n          \"exclude_owner_projects\": false,\n          \"repositories\": [\n            {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"template_repository\": null,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://api.github.com/licenses/mit\"\n              },\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1\n            }\n          ],\n          \"url\": \"https://api.github.com/orgs/octo-org/migrations/79\",\n          \"created_at\": \"2015-07-06T15:33:38-07:00\",\n          \"updated_at\": \"2015-07-06T15:33:38-07:00\"\n        }"},
		{Input: "{\n          \"id\": 79,\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n          \"owner\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"guid\": \"0b989ba4-242f-11e5-81e1-c7b6966d2516\",\n          \"state\": \"pending\",\n          \"lock_repositories\": true,\n          \"exclude_attachments\": false,\n          \"exclude_releases\": false,\n          \"exclude_owner_projects\": false,\n          \"repositories\": [\n            {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"template_repository\": null,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://api.github.com/licenses/mit\"\n              },\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1\n            }\n          ],\n          \"url\": \"https://api.github.com/orgs/octo-org/migrations/79\",\n          \"created_at\": \"2015-07-06T15:33:38-07:00\",\n          \"updated_at\": \"2015-07-06T15:33:38-07:00\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Migration

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Migration
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestMigrationsStartForAuthenticatedUserReqExcludeItem_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"repositories\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ MigrationsStartForAuthenticatedUserReqExcludeItem

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 MigrationsStartForAuthenticatedUserReqExcludeItem
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestMilestone_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\n          \"id\": 1002604,\n          \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\n          \"number\": 1,\n          \"state\": \"open\",\n          \"title\": \"v1.0\",\n          \"description\": \"Tracking milestone for version 1.0\",\n          \"creator\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"open_issues\": 4,\n          \"closed_issues\": 8,\n          \"created_at\": \"2011-04-10T20:09:31Z\",\n          \"updated_at\": \"2014-03-03T18:58:10Z\",\n          \"closed_at\": \"2013-02-12T13:22:01Z\",\n          \"due_on\": \"2012-10-09T23:39:01Z\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Milestone

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Milestone
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestMilestoneState_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"open\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ MilestoneState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 MilestoneState
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestMinimalRepository_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1296269,\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n          \"name\": \"Hello-World\",\n          \"full_name\": \"octocat/Hello-World\",\n          \"owner\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"private\": false,\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\n          \"description\": \"This your first repo!\",\n          \"fork\": false,\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n          \"homepage\": \"https://github.com\",\n          \"language\": null,\n          \"forks_count\": 9,\n          \"stargazers_count\": 80,\n          \"watchers_count\": 80,\n          \"size\": 108,\n          \"default_branch\": \"master\",\n          \"open_issues_count\": 0,\n          \"is_template\": false,\n          \"topics\": [\n            \"octocat\",\n            \"atom\",\n            \"electron\",\n            \"api\"\n          ],\n          \"has_issues\": true,\n          \"has_projects\": true,\n          \"has_wiki\": true,\n          \"has_pages\": false,\n          \"has_downloads\": true,\n          \"archived\": false,\n          \"disabled\": false,\n          \"visibility\": \"public\",\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\n          \"created_at\": \"2011-01-26T19:01:12Z\",\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\n          \"permissions\": {\n            \"admin\": false,\n            \"push\": false,\n            \"pull\": true\n          },\n          \"template_repository\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World-Template\",\n            \"full_name\": \"octocat/Hello-World-Template\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\n            \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\n            \"homepage\": \"https://github.com\",\n            \"language\": null,\n            \"forks\": 9,\n            \"forks_count\": 9,\n            \"stargazers_count\": 80,\n            \"watchers_count\": 80,\n            \"watchers\": 80,\n            \"size\": 108,\n            \"default_branch\": \"master\",\n            \"open_issues\": 0,\n            \"open_issues_count\": 0,\n            \"is_template\": true,\n            \"license\": {\n              \"key\": \"mit\",\n              \"name\": \"MIT License\",\n              \"url\": \"https://api.github.com/licenses/mit\",\n              \"spdx_id\": \"MIT\",\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n              \"html_url\": \"https://api.github.com/licenses/mit\"\n            },\n            \"topics\": [\n              \"octocat\",\n              \"atom\",\n              \"electron\",\n              \"api\"\n            ],\n            \"has_issues\": true,\n            \"has_projects\": true,\n            \"has_wiki\": true,\n            \"has_pages\": false,\n            \"has_downloads\": true,\n            \"archived\": false,\n            \"disabled\": false,\n            \"visibility\": \"public\",\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\n            \"created_at\": \"2011-01-26T19:01:12Z\",\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\n            \"permissions\": {\n              \"admin\": false,\n              \"push\": false,\n              \"pull\": true\n            },\n            \"allow_rebase_merge\": true,\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n            \"allow_squash_merge\": true,\n            \"allow_auto_merge\": false,\n            \"delete_branch_on_merge\": true,\n            \"allow_merge_commit\": true,\n            \"allow_forking\": true,\n            \"subscribers_count\": 42,\n            \"network_count\": 0\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ MinimalRepository

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 MinimalRepository
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestNullableIntegrationPermissions_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n              \"issues\": \"read\",\n              \"deployments\": \"write\"\n            }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ NullableIntegrationPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 NullableIntegrationPermissions
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestNullableMilestoneState_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"open\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ NullableMilestoneState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 NullableMilestoneState
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestOrgHook_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"url\": \"https://api.github.com/orgs/octocat/hooks/1\",\n          \"ping_url\": \"https://api.github.com/orgs/octocat/hooks/1/pings\",\n          \"deliveries_url\": \"https://api.github.com/orgs/octocat/hooks/1/deliveries\",\n          \"name\": \"web\",\n          \"events\": [\n            \"push\",\n            \"pull_request\"\n          ],\n          \"active\": true,\n          \"config\": {\n            \"url\": \"http://example.com\",\n            \"content_type\": \"json\"\n          },\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\n          \"created_at\": \"2011-09-06T17:26:27Z\",\n          \"type\": \"Organization\"\n        }"},
		{Input: "{\n          \"id\": 1,\n          \"url\": \"https://api.github.com/orgs/octocat/hooks/1\",\n          \"ping_url\": \"https://api.github.com/orgs/octocat/hooks/1/pings\",\n          \"deliveries_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/12345678/deliveries\",\n          \"name\": \"web\",\n          \"events\": [\n            \"pull_request\"\n          ],\n          \"active\": true,\n          \"config\": {\n            \"url\": \"http://example.com\",\n            \"content_type\": \"json\"\n          },\n          \"updated_at\": \"2011-09-06T20:39:23Z\",\n          \"created_at\": \"2011-09-06T17:26:27Z\",\n          \"type\": \"Organization\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgHook

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 OrgHook
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestOrgMembership_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/orgs/invitocat/memberships/defunkt\",\n          \"state\": \"pending\",\n          \"role\": \"admin\",\n          \"organization_url\": \"https://api.github.com/orgs/invitocat\",\n          \"organization\": {\n            \"login\": \"github\",\n            \"id\": 1,\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n            \"url\": \"https://api.github.com/orgs/github\",\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\n            \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\n            \"issues_url\": \"https://api.github.com/orgs/github/issues\",\n            \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\n            \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"description\": \"A great organization\"\n          },\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          }\n        }"},
		{Input: "{\n          \"url\": \"https://api.github.com/orgs/octocat/memberships/defunkt\",\n          \"state\": \"active\",\n          \"role\": \"admin\",\n          \"organization_url\": \"https://api.github.com/orgs/octocat\",\n          \"organization\": {\n            \"login\": \"github\",\n            \"id\": 1,\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n            \"url\": \"https://api.github.com/orgs/github\",\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\n            \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\n            \"issues_url\": \"https://api.github.com/orgs/github/issues\",\n            \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\n            \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"description\": \"A great organization\"\n          },\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgMembership

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 OrgMembership
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestOrgMembershipRole_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"admin\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgMembershipRole

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 OrgMembershipRole
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestOrgMembershipState_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"active\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgMembershipState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 OrgMembershipState
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestOrganizationActionsSecret_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"name\": \"GH_TOKEN\",\n          \"created_at\": \"2019-08-10T14:59:22Z\",\n          \"updated_at\": \"2020-01-10T14:59:22Z\",\n          \"visibility\": \"selected\",\n          \"selected_repositories_url\": \"https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrganizationActionsSecret

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 OrganizationActionsSecret
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestOrganizationFull_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"login\": \"github\",\n          \"id\": 1,\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n          \"url\": \"https://api.github.com/orgs/github\",\n          \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n          \"events_url\": \"https://api.github.com/orgs/github/events\",\n          \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\n          \"issues_url\": \"https://api.github.com/orgs/github/issues\",\n          \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\n          \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n          \"description\": \"A great organization\",\n          \"name\": \"github\",\n          \"company\": \"GitHub\",\n          \"blog\": \"https://github.com/blog\",\n          \"location\": \"San Francisco\",\n          \"email\": \"octocat@github.com\",\n          \"twitter_username\": \"github\",\n          \"is_verified\": true,\n          \"has_organization_projects\": true,\n          \"has_repository_projects\": true,\n          \"public_repos\": 2,\n          \"public_gists\": 1,\n          \"followers\": 20,\n          \"following\": 0,\n          \"html_url\": \"https://github.com/octocat\",\n          \"created_at\": \"2008-01-14T04:33:35Z\",\n          \"type\": \"Organization\",\n          \"total_private_repos\": 100,\n          \"owned_private_repos\": 100,\n          \"private_gists\": 81,\n          \"disk_usage\": 10000,\n          \"collaborators\": 8,\n          \"billing_email\": \"mona@github.com\",\n          \"plan\": {\n            \"name\": \"Medium\",\n            \"space\": 400,\n            \"private_repos\": 20\n          },\n          \"default_repository_permission\": \"read\",\n          \"members_can_create_repositories\": true,\n          \"two_factor_requirement_enabled\": true,\n          \"members_allowed_repository_creation_type\": \"all\",\n          \"members_can_create_public_repositories\": false,\n          \"members_can_create_private_repositories\": false,\n          \"members_can_create_internal_repositories\": false,\n          \"members_can_create_pages\": true,\n          \"members_can_create_public_pages\": true,\n          \"members_can_create_private_pages\": true,\n          \"updated_at\": \"2014-03-03T18:58:10Z\"\n        }"},
		{Input: "{\n          \"login\": \"github\",\n          \"id\": 1,\n          \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n          \"url\": \"https://api.github.com/orgs/github\",\n          \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n          \"events_url\": \"https://api.github.com/orgs/github/events\",\n          \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\n          \"issues_url\": \"https://api.github.com/orgs/github/issues\",\n          \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\n          \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n          \"description\": \"A great organization\",\n          \"name\": \"github\",\n          \"company\": \"GitHub\",\n          \"blog\": \"https://github.com/blog\",\n          \"location\": \"San Francisco\",\n          \"email\": \"octocat@github.com\",\n          \"twitter_username\": \"github\",\n          \"is_verified\": true,\n          \"has_organization_projects\": true,\n          \"has_repository_projects\": true,\n          \"public_repos\": 2,\n          \"public_gists\": 1,\n          \"followers\": 20,\n          \"following\": 0,\n          \"html_url\": \"https://github.com/octocat\",\n          \"created_at\": \"2008-01-14T04:33:35Z\",\n          \"updated_at\": \"2014-03-03T18:58:10Z\",\n          \"type\": \"Organization\",\n          \"total_private_repos\": 100,\n          \"owned_private_repos\": 100,\n          \"private_gists\": 81,\n          \"disk_usage\": 10000,\n          \"collaborators\": 8,\n          \"billing_email\": \"mona@github.com\",\n          \"plan\": {\n            \"name\": \"Medium\",\n            \"space\": 400,\n            \"private_repos\": 20,\n            \"filled_seats\": 4,\n            \"seats\": 5\n          },\n          \"default_repository_permission\": \"read\",\n          \"members_can_create_repositories\": true,\n          \"two_factor_requirement_enabled\": true,\n          \"members_allowed_repository_creation_type\": \"all\",\n          \"members_can_create_public_repositories\": false,\n          \"members_can_create_private_repositories\": false,\n          \"members_can_create_internal_repositories\": false,\n          \"members_can_create_pages\": true\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrganizationFull

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 OrganizationFull
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestOrganizationInvitation_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"login\": \"monalisa\",\n          \"node_id\": \"MDQ6VXNlcjE=\",\n          \"email\": \"octocat@github.com\",\n          \"role\": \"direct_member\",\n          \"created_at\": \"2016-11-30T06:46:10-08:00\",\n          \"inviter\": {\n            \"login\": \"other_user\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/other_user_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/other_user\",\n            \"html_url\": \"https://github.com/other_user\",\n            \"followers_url\": \"https://api.github.com/users/other_user/followers\",\n            \"following_url\": \"https://api.github.com/users/other_user/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/other_user/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/other_user/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/other_user/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/other_user/orgs\",\n            \"repos_url\": \"https://api.github.com/users/other_user/repos\",\n            \"events_url\": \"https://api.github.com/users/other_user/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/other_user/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"team_count\": 2,\n          \"invitation_teams_url\": \"https://api.github.com/organizations/2/invitations/1/teams\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrganizationInvitation

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 OrganizationInvitation
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestOrgsRemoveOutsideCollaboratorUnprocessableEntity_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"message\": \"You cannot specify an organization member to remove as an outside collaborator.\",\n                      \"documentation_url\": \"https://docs.github.com/rest/reference/orgs#remove-outside-collaborator\"\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgsRemoveOutsideCollaboratorUnprocessableEntity

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 OrgsRemoveOutsideCollaboratorUnprocessableEntity
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestOrgsUpdateWebhookConfigForOrgReq_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                  \"content_type\": \"json\",\n                  \"insecure_ssl\": \"0\",\n                  \"secret\": \"********\",\n                  \"url\": \"https://example.com/webhook\"\n                }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ OrgsUpdateWebhookConfigForOrgReq

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 OrgsUpdateWebhookConfigForOrgReq
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPackage_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 197,\n          \"name\": \"hello_docker\",\n          \"package_type\": \"container\",\n          \"owner\": {\n            \"login\": \"github\",\n            \"id\": 9919,\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjk5MTk=\",\n            \"avatar_url\": \"https://avatars.githubusercontent.com/u/9919?v=4\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/github\",\n            \"html_url\": \"https://github.com/github\",\n            \"followers_url\": \"https://api.github.com/users/github/followers\",\n            \"following_url\": \"https://api.github.com/users/github/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/github/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/github/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/github/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/github/orgs\",\n            \"repos_url\": \"https://api.github.com/users/github/repos\",\n            \"events_url\": \"https://api.github.com/users/github/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/github/received_events\",\n            \"type\": \"Organization\",\n            \"site_admin\": false\n          },\n          \"version_count\": 1,\n          \"visibility\": \"private\",\n          \"url\": \"https://api.github.com/orgs/github/packages/container/hello_docker\",\n          \"created_at\": \"2020-05-19T22:19:11Z\",\n          \"updated_at\": \"2020-05-19T22:19:11Z\",\n          \"html_url\": \"https://github.com/orgs/github/packages/container/package/hello_docker\"\n        }"},
		{Input: "{\n          \"id\": 40201,\n          \"name\": \"octo-name\",\n          \"package_type\": \"rubygems\",\n          \"owner\": {\n            \"login\": \"octocat\",\n            \"id\": 209477,\n            \"node_id\": \"MDQ6VXNlcjIwOTQ3Nw==\",\n            \"avatar_url\": \"https://avatars.githubusercontent.com/u/209477?v=4\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": true\n          },\n          \"version_count\": 3,\n          \"visibility\": \"public\",\n          \"url\": \"https://api.github.com/users/octocat/packages/rubygems/octo-name\",\n          \"created_at\": \"2019-10-20T14:17:14Z\",\n          \"updated_at\": \"2019-10-20T14:17:14Z\",\n          \"repository\": {\n            \"id\": 216219492,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMTYyMTk0OTI=\",\n            \"name\": \"octo-name-repo\",\n            \"full_name\": \"octocat/octo-name-repo\",\n            \"private\": false,\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 209477,\n              \"node_id\": \"MDQ6VXNlcjIwOTQ3Nw==\",\n              \"avatar_url\": \"https://avatars.githubusercontent.com/u/209477?v=4\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": true\n            },\n            \"html_url\": \"https://github.com/octocat/octo-name-repo\",\n            \"description\": \"Project for octocats\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/octo-name-repo\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/octo-name-repo/forks\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/octo-name-repo/keys{/key_id}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/octo-name-repo/collaborators{/collaborator}\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/octo-name-repo/teams\",\n            \"hooks_url\": \"https://api.github.com/repos/octocat/octo-name-repo/hooks\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/octo-name-repo/issues/events{/number}\",\n            \"events_url\": \"https://api.github.com/repos/octocat/octo-name-repo/events\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/octo-name-repo/assignees{/user}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/octo-name-repo/branches{/branch}\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/octo-name-repo/tags\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/octo-name-repo/git/blobs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/octo-name-repo/git/tags{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/octo-name-repo/git/refs{/sha}\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/octo-name-repo/git/trees{/sha}\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/octo-name-repo/statuses/{sha}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/octo-name-repo/languages\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/octo-name-repo/stargazers\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/octo-name-repo/contributors\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/octo-name-repo/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/octo-name-repo/subscription\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/octo-name-repo/commits{/sha}\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/octo-name-repo/git/commits{/sha}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/octo-name-repo/comments{/number}\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/octo-name-repo/issues/comments{/number}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/octo-name-repo/contents/{+path}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/octo-name-repo/compare/{base}...{head}\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/octo-name-repo/merges\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/octo-name-repo/{archive_format}{/ref}\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/octo-name-repo/downloads\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/octo-name-repo/issues{/number}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/octo-name-repo/pulls{/number}\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/octo-name-repo/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/octo-name-repo/notifications{?since,all,participating}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/octo-name-repo/labels{/name}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/octo-name-repo/releases{/id}\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/octo-name-repo/deployments\"\n          },\n          \"html_url\": \"https://github.com/octocat/octo-name-repo/packages/40201\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Package

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Package
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPackagePackageType_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"docker\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PackagePackageType

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PackagePackageType
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPackageVersion_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 214,\n          \"name\": \"sha256:3561f0cff06caccddb99c93bd26e712fcc56a811de0f8ea7a17bb865f30b176a\",\n          \"url\": \"https://api.github.com/users/octocat/packages/container/hello_docker/versions/214\",\n          \"package_html_url\": \"https://github.com/users/octocat/packages/container/package/hello_docker\",\n          \"created_at\": \"2020-05-15T03:46:45Z\",\n          \"updated_at\": \"2020-05-15T03:46:45Z\",\n          \"html_url\": \"https://github.com/users/octocat/packages/container/hello_docker/214\",\n          \"metadata\": {\n            \"package_type\": \"container\",\n            \"container\": {\n              \"tags\": [\n                \"1.13.6\"\n              ]\n            }\n          }\n        }"},
		{Input: "{\n          \"id\": 387039,\n          \"name\": \"0.2.0\",\n          \"url\": \"https://api.github.com/users/octocat/packages/rubygems/octo-name/versions/387039\",\n          \"package_html_url\": \"https://github.com/octocat/octo-name-repo/packages/40201\",\n          \"license\": \"MIT\",\n          \"created_at\": \"2019-12-01T20:49:29Z\",\n          \"updated_at\": \"2019-12-01T20:49:30Z\",\n          \"description\": \"Octo-name client for Ruby\",\n          \"html_url\": \"https://github.com/octocat/octo-name-repo/packages/40201?version=0.2.0\",\n          \"metadata\": {\n            \"package_type\": \"rubygems\"\n          }\n        }"},
		{Input: "{\n          \"id\": 836,\n          \"name\": \"sha256:b3d3e366b55f9a54599220198b3db5da8f53592acbbb7dc7e4e9878762fc5344\",\n          \"url\": \"https://api.github.com/orgs/github/packages/container/hello_docker/versions/836\",\n          \"package_html_url\": \"https://github.com/orgs/github/packages/container/package/hello_docker\",\n          \"created_at\": \"2020-05-19T22:19:11Z\",\n          \"updated_at\": \"2020-05-19T22:19:11Z\",\n          \"html_url\": \"https://github.com/orgs/github/packages/container/hello_docker/836\",\n          \"metadata\": {\n            \"package_type\": \"container\",\n            \"container\": {\n              \"tags\": [\n                \"latest\"\n              ]\n            }\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PackageVersion

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PackageVersion
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPackageVersionMetadataPackageType_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"docker\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PackageVersionMetadataPackageType

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PackageVersionMetadataPackageType
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPackageVisibility_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"private\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PackageVisibility

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PackageVisibility
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPackagesBillingUsage_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_gigabytes_bandwidth_used\": 50,\n          \"total_paid_gigabytes_bandwidth_used\": 40,\n          \"included_gigabytes_bandwidth\": 10\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PackagesBillingUsage

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PackagesBillingUsage
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPage_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/github/developer.github.com/pages\",\n          \"status\": \"built\",\n          \"cname\": \"developer.github.com\",\n          \"custom_404\": false,\n          \"html_url\": \"https://developer.github.com\",\n          \"source\": {\n            \"branch\": \"master\",\n            \"path\": \"/\"\n          },\n          \"public\": true,\n          \"https_certificate\": {\n            \"state\": \"approved\",\n            \"description\": \"Certificate is approved\",\n            \"domains\": [\n              \"developer.github.com\"\n            ],\n            \"expires_at\": \"2021-05-22\"\n          },\n          \"https_enforced\": true\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Page

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Page
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPageBuild_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/github/developer.github.com/pages/builds/5472601\",\n          \"status\": \"built\",\n          \"error\": {\n            \"message\": null\n          },\n          \"pusher\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"commit\": \"351391cdcb88ffae71ec3028c91f375a8036a26b\",\n          \"duration\": 2104,\n          \"created_at\": \"2014-02-10T19:00:49Z\",\n          \"updated_at\": \"2014-02-10T19:00:51Z\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PageBuild

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PageBuild
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPageBuildStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/github/developer.github.com/pages/builds/latest\",\n          \"status\": \"queued\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PageBuildStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PageBuildStatus
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPageProtectedDomainState_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"pending\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PageProtectedDomainState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PageProtectedDomainState
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPageStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"built\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PageStatus

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PageStatus
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPagesHTTPSCertificateState_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"approved\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PagesHTTPSCertificateState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PagesHTTPSCertificateState
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPagesHealthCheck_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"domain\": {\n            \"host\": \"example.com\",\n            \"uri\": \"http://example.com/\",\n            \"nameservers\": \"default\",\n            \"dns_resolves\": true,\n            \"is_proxied\": false,\n            \"is_cloudflare_ip\": false,\n            \"is_fastly_ip\": false,\n            \"is_old_ip_address\": false,\n            \"is_a_record\": true,\n            \"has_cname_record\": false,\n            \"has_mx_records_present\": false,\n            \"is_valid_domain\": true,\n            \"is_apex_domain\": true,\n            \"should_be_a_record\": true,\n            \"is_cname_to_github_user_domain\": false,\n            \"is_cname_to_pages_dot_github_dot_com\": false,\n            \"is_cname_to_fastly\": false,\n            \"is_pointed_to_github_pages_ip\": true,\n            \"is_non_github_pages_ip_present\": false,\n            \"is_pages_domain\": false,\n            \"is_served_by_pages\": true,\n            \"is_valid\": true,\n            \"reason\": null,\n            \"responds_to_https\": true,\n            \"enforces_https\": true,\n            \"https_error\": null,\n            \"is_https_eligible\": true,\n            \"caa_error\": null\n          },\n          \"alt_domain\": {\n            \"host\": \"www.example.com\",\n            \"uri\": \"http://www.example.com/\",\n            \"nameservers\": \"default\",\n            \"dns_resolves\": true,\n            \"is_proxied\": false,\n            \"is_cloudflare_ip\": false,\n            \"is_fastly_ip\": false,\n            \"is_old_ip_address\": false,\n            \"is_a_record\": true,\n            \"has_cname_record\": false,\n            \"has_mx_records_present\": false,\n            \"is_valid_domain\": true,\n            \"is_apex_domain\": true,\n            \"should_be_a_record\": true,\n            \"is_cname_to_github_user_domain\": false,\n            \"is_cname_to_pages_dot_github_dot_com\": false,\n            \"is_cname_to_fastly\": false,\n            \"is_pointed_to_github_pages_ip\": true,\n            \"is_non_github_pages_ip_present\": false,\n            \"is_pages_domain\": false,\n            \"is_served_by_pages\": true,\n            \"is_valid\": true,\n            \"reason\": null,\n            \"responds_to_https\": true,\n            \"enforces_https\": true,\n            \"https_error\": null,\n            \"is_https_eligible\": true,\n            \"caa_error\": null\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PagesHealthCheck

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PagesHealthCheck
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestParticipationStats_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"all\": [\n            11,\n            21,\n            15,\n            2,\n            8,\n            1,\n            8,\n            23,\n            17,\n            21,\n            11,\n            10,\n            33,\n            91,\n            38,\n            34,\n            22,\n            23,\n            32,\n            3,\n            43,\n            87,\n            71,\n            18,\n            13,\n            5,\n            13,\n            16,\n            66,\n            27,\n            12,\n            45,\n            110,\n            117,\n            13,\n            8,\n            18,\n            9,\n            19,\n            26,\n            39,\n            12,\n            20,\n            31,\n            46,\n            91,\n            45,\n            10,\n            24,\n            9,\n            29,\n            7\n          ],\n          \"owner\": [\n            3,\n            2,\n            3,\n            0,\n            2,\n            0,\n            5,\n            14,\n            7,\n            9,\n            1,\n            5,\n            0,\n            48,\n            19,\n            2,\n            0,\n            1,\n            10,\n            2,\n            23,\n            40,\n            35,\n            8,\n            8,\n            2,\n            10,\n            6,\n            30,\n            0,\n            2,\n            9,\n            53,\n            104,\n            3,\n            3,\n            10,\n            4,\n            7,\n            11,\n            21,\n            4,\n            4,\n            22,\n            26,\n            63,\n            11,\n            2,\n            14,\n            1,\n            10,\n            3\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ParticipationStats

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ParticipationStats
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPorterAuthor_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 2268557,\n          \"remote_id\": \"nobody@fc7da526-431c-80fe-3c8c-c148ff18d7ef\",\n          \"remote_name\": \"nobody\",\n          \"email\": \"hubot@github.com\",\n          \"name\": \"Hubot\",\n          \"url\": \"https://api.github.com/repos/octocat/socm/import/authors/2268557\",\n          \"import_url\": \"https://api.github.com/repos/octocat/socm/import\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PorterAuthor

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PorterAuthor
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPrivateUser_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"login\": \"octocat\",\n          \"id\": 1,\n          \"node_id\": \"MDQ6VXNlcjE=\",\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n          \"gravatar_id\": \"\",\n          \"url\": \"https://api.github.com/users/octocat\",\n          \"html_url\": \"https://github.com/octocat\",\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n          \"type\": \"User\",\n          \"site_admin\": false,\n          \"name\": \"monalisa octocat\",\n          \"company\": \"GitHub\",\n          \"blog\": \"https://github.com/blog\",\n          \"location\": \"San Francisco\",\n          \"email\": \"octocat@github.com\",\n          \"hireable\": false,\n          \"bio\": \"There once was...\",\n          \"twitter_username\": \"monatheoctocat\",\n          \"public_repos\": 2,\n          \"public_gists\": 1,\n          \"followers\": 20,\n          \"following\": 0,\n          \"created_at\": \"2008-01-14T04:33:35Z\",\n          \"updated_at\": \"2008-01-14T04:33:35Z\",\n          \"private_gists\": 81,\n          \"total_private_repos\": 100,\n          \"owned_private_repos\": 100,\n          \"disk_usage\": 10000,\n          \"collaborators\": 8,\n          \"two_factor_authentication\": true,\n          \"plan\": {\n            \"name\": \"Medium\",\n            \"space\": 400,\n            \"private_repos\": 20,\n            \"collaborators\": 0\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PrivateUser

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PrivateUser
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestProject_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"owner_url\": \"https://api.github.com/orgs/octocat\",\n          \"url\": \"https://api.github.com/projects/1002605\",\n          \"html_url\": \"https://github.com/orgs/api-playground/projects/1\",\n          \"columns_url\": \"https://api.github.com/projects/1002605/columns\",\n          \"id\": 1002605,\n          \"node_id\": \"MDc6UHJvamVjdDEwMDI2MDU=\",\n          \"name\": \"Organization Roadmap\",\n          \"body\": \"High-level roadmap for the upcoming year.\",\n          \"number\": 1,\n          \"state\": \"open\",\n          \"creator\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"created_at\": \"2011-04-11T20:09:31Z\",\n          \"updated_at\": \"2014-03-04T18:58:10Z\"\n        }"},
		{Input: "{\n          \"owner_url\": \"https://api.github.com/repos/api-playground/projects-test\",\n          \"url\": \"https://api.github.com/projects/1002604\",\n          \"html_url\": \"https://github.com/api-playground/projects-test/projects/1\",\n          \"columns_url\": \"https://api.github.com/projects/1002604/columns\",\n          \"id\": 1002604,\n          \"node_id\": \"MDc6UHJvamVjdDEwMDI2MDQ=\",\n          \"name\": \"Projects Documentation\",\n          \"body\": \"Developer documentation project for the developer site.\",\n          \"number\": 1,\n          \"state\": \"open\",\n          \"creator\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"created_at\": \"2011-04-10T20:09:31Z\",\n          \"updated_at\": \"2014-03-03T18:58:10Z\"\n        }"},
		{Input: "{\n          \"owner_url\": \"https://api.github.com/users/octocat\",\n          \"url\": \"https://api.github.com/projects/1002603\",\n          \"html_url\": \"https://github.com/users/octocat/projects/1\",\n          \"columns_url\": \"https://api.github.com/projects/1002603/columns\",\n          \"id\": 1002603,\n          \"node_id\": \"MDc6UHJvamVjdDEwMDI2MDM=\",\n          \"name\": \"My Projects\",\n          \"body\": \"A board to manage my personal projects.\",\n          \"number\": 1,\n          \"state\": \"open\",\n          \"creator\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"created_at\": \"2011-04-10T20:09:31Z\",\n          \"updated_at\": \"2014-03-03T18:58:10Z\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Project

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Project
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestProjectCard_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/projects/columns/cards/1478\",\n          \"id\": 1478,\n          \"node_id\": \"MDExOlByb2plY3RDYXJkMTQ3OA==\",\n          \"note\": \"Add payload for delete Project column\",\n          \"creator\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"created_at\": \"2016-09-05T14:21:06Z\",\n          \"updated_at\": \"2016-09-05T14:20:22Z\",\n          \"archived\": false,\n          \"column_url\": \"https://api.github.com/projects/columns/367\",\n          \"content_url\": \"https://api.github.com/repos/api-playground/projects-test/issues/3\",\n          \"project_url\": \"https://api.github.com/projects/120\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ProjectCard

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ProjectCard
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestProjectColumn_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                  \"url\": \"https://api.github.com/projects/columns/367\",\n                  \"project_url\": \"https://api.github.com/projects/120\",\n                  \"cards_url\": \"https://api.github.com/projects/columns/367/cards\",\n                  \"id\": 367,\n                  \"node_id\": \"MDEzOlByb2plY3RDb2x1bW4zNjc=\",\n                  \"name\": \"To Do\",\n                  \"created_at\": \"2016-09-05T14:18:44Z\",\n                  \"updated_at\": \"2016-09-05T14:22:28Z\"\n                }"},
		{Input: "{\n          \"url\": \"https://api.github.com/projects/columns/367\",\n          \"project_url\": \"https://api.github.com/projects/120\",\n          \"cards_url\": \"https://api.github.com/projects/columns/367/cards\",\n          \"id\": 367,\n          \"node_id\": \"MDEzOlByb2plY3RDb2x1bW4zNjc=\",\n          \"name\": \"To Do\",\n          \"created_at\": \"2016-09-05T14:18:44Z\",\n          \"updated_at\": \"2016-09-05T14:22:28Z\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ProjectColumn

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ProjectColumn
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestProjectsAddCollaboratorReqPermission_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"write\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ProjectsAddCollaboratorReqPermission

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ProjectsAddCollaboratorReqPermission
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestProtectedBranchAdminEnforced_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins\",\n          \"enabled\": true\n        }"},
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures\",\n          \"enabled\": true\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ProtectedBranchAdminEnforced

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ProtectedBranchAdminEnforced
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestProtectedBranchPullRequestReview_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews\",\n          \"dismissal_restrictions\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions\",\n            \"users_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams\",\n            \"users\": [\n              {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              }\n            ],\n            \"teams\": [\n              {\n                \"id\": 1,\n                \"node_id\": \"MDQ6VGVhbTE=\",\n                \"url\": \"https://api.github.com/teams/1\",\n                \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\n                \"name\": \"Justice League\",\n                \"slug\": \"justice-league\",\n                \"description\": \"A great team.\",\n                \"privacy\": \"closed\",\n                \"permission\": \"admin\",\n                \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\n                \"repositories_url\": \"https://api.github.com/teams/1/repos\",\n                \"parent\": null\n              }\n            ]\n          },\n          \"dismiss_stale_reviews\": true,\n          \"require_code_owner_reviews\": true,\n          \"required_approving_review_count\": 2\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ProtectedBranchPullRequestReview

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ProtectedBranchPullRequestReview
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPullRequest_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\",\n          \"id\": 1,\n          \"node_id\": \"MDExOlB1bGxSZXF1ZXN0MQ==\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\n          \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\n          \"patch_url\": \"https://github.com/octocat/Hello-World/pull/1347.patch\",\n          \"issue_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits\",\n          \"review_comments_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments\",\n          \"review_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}\",\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\",\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"number\": 1347,\n          \"state\": \"open\",\n          \"locked\": true,\n          \"title\": \"Amazing new feature\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"Please pull these awesome changes in!\",\n          \"labels\": [\n            {\n              \"id\": 208045946,\n              \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\n              \"name\": \"bug\",\n              \"description\": \"Something isn't working\",\n              \"color\": \"f29513\",\n              \"default\": true\n            }\n          ],\n          \"milestone\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\n            \"id\": 1002604,\n            \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\n            \"number\": 1,\n            \"state\": \"open\",\n            \"title\": \"v1.0\",\n            \"description\": \"Tracking milestone for version 1.0\",\n            \"creator\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"open_issues\": 4,\n            \"closed_issues\": 8,\n            \"created_at\": \"2011-04-10T20:09:31Z\",\n            \"updated_at\": \"2014-03-03T18:58:10Z\",\n            \"closed_at\": \"2013-02-12T13:22:01Z\",\n            \"due_on\": \"2012-10-09T23:39:01Z\"\n          },\n          \"active_lock_reason\": \"too heated\",\n          \"created_at\": \"2011-01-26T19:01:12Z\",\n          \"updated_at\": \"2011-01-26T19:01:12Z\",\n          \"closed_at\": \"2011-01-26T19:01:12Z\",\n          \"merged_at\": \"2011-01-26T19:01:12Z\",\n          \"merge_commit_sha\": \"e5bd3914e2e596debea16f433f57875b5b90bcd6\",\n          \"assignee\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"assignees\": [\n            {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            {\n              \"login\": \"hubot\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/hubot\",\n              \"html_url\": \"https://github.com/hubot\",\n              \"followers_url\": \"https://api.github.com/users/hubot/followers\",\n              \"following_url\": \"https://api.github.com/users/hubot/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/hubot/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/hubot/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/hubot/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/hubot/orgs\",\n              \"repos_url\": \"https://api.github.com/users/hubot/repos\",\n              \"events_url\": \"https://api.github.com/users/hubot/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/hubot/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": true\n            }\n          ],\n          \"requested_reviewers\": [\n            {\n              \"login\": \"other_user\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/other_user_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/other_user\",\n              \"html_url\": \"https://github.com/other_user\",\n              \"followers_url\": \"https://api.github.com/users/other_user/followers\",\n              \"following_url\": \"https://api.github.com/users/other_user/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/other_user/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/other_user/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/other_user/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/other_user/orgs\",\n              \"repos_url\": \"https://api.github.com/users/other_user/repos\",\n              \"events_url\": \"https://api.github.com/users/other_user/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/other_user/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            }\n          ],\n          \"requested_teams\": [\n            {\n              \"id\": 1,\n              \"node_id\": \"MDQ6VGVhbTE=\",\n              \"url\": \"https://api.github.com/teams/1\",\n              \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\n              \"name\": \"Justice League\",\n              \"slug\": \"justice-league\",\n              \"description\": \"A great team.\",\n              \"privacy\": \"closed\",\n              \"permission\": \"admin\",\n              \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\n              \"repositories_url\": \"https://api.github.com/teams/1/repos\"\n            }\n          ],\n          \"head\": {\n            \"label\": \"octocat:new-topic\",\n            \"ref\": \"new-topic\",\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"user\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"repo\": {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_merge_commit\": true,\n              \"allow_forking\": true,\n              \"forks\": 123,\n              \"open_issues\": 123,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\n              },\n              \"watchers\": 123\n            }\n          },\n          \"base\": {\n            \"label\": \"octocat:master\",\n            \"ref\": \"master\",\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"user\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"repo\": {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_merge_commit\": true,\n              \"forks\": 123,\n              \"open_issues\": 123,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\"\n              },\n              \"watchers\": 123\n            }\n          },\n          \"_links\": {\n            \"self\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\"\n            },\n            \"html\": {\n              \"href\": \"https://github.com/octocat/Hello-World/pull/1347\"\n            },\n            \"issue\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\"\n            },\n            \"comments\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\"\n            },\n            \"review_comments\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments\"\n            },\n            \"review_comment\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}\"\n            },\n            \"commits\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits\"\n            },\n            \"statuses\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\"\n            }\n          },\n          \"author_association\": \"OWNER\",\n          \"auto_merge\": null,\n          \"draft\": false,\n          \"merged\": false,\n          \"mergeable\": true,\n          \"rebaseable\": true,\n          \"mergeable_state\": \"clean\",\n          \"merged_by\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"comments\": 10,\n          \"review_comments\": 0,\n          \"maintainer_can_modify\": true,\n          \"commits\": 3,\n          \"additions\": 100,\n          \"deletions\": 3,\n          \"changed_files\": 5\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequest

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PullRequest
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPullRequestMergeResult_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"merged\": true,\n          \"message\": \"Pull Request successfully merged\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestMergeResult

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PullRequestMergeResult
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPullRequestReview_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 80,\n          \"node_id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"Here is the body for the review.\",\n          \"state\": \"APPROVED\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\",\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\",\n          \"_links\": {\n            \"html\": {\n              \"href\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\"\n            },\n            \"pull_request\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\"\n            }\n          },\n          \"submitted_at\": \"2019-11-17T17:43:43Z\",\n          \"commit_id\": \"ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091\",\n          \"author_association\": \"COLLABORATOR\"\n        }"},
		{Input: "{\n          \"id\": 80,\n          \"node_id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"Here is the body for the review.\",\n          \"state\": \"DISMISSED\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\",\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\",\n          \"_links\": {\n            \"html\": {\n              \"href\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\"\n            },\n            \"pull_request\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\"\n            }\n          },\n          \"submitted_at\": \"2019-11-17T17:43:43Z\",\n          \"commit_id\": \"ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091\",\n          \"author_association\": \"COLLABORATOR\"\n        }"},
		{Input: "{\n          \"id\": 80,\n          \"node_id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"This is close to perfect! Please address the suggested inline change. And add more about this.\",\n          \"state\": \"CHANGES_REQUESTED\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\",\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\",\n          \"_links\": {\n            \"html\": {\n              \"href\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\"\n            },\n            \"pull_request\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\"\n            }\n          },\n          \"submitted_at\": \"2019-11-17T17:43:43Z\",\n          \"commit_id\": \"ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091\",\n          \"author_association\": \"COLLABORATOR\"\n        }"},
		{Input: "{\n          \"id\": 80,\n          \"node_id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"This is close to perfect! Please address the suggested inline change.\",\n          \"state\": \"CHANGES_REQUESTED\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\",\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\",\n          \"_links\": {\n            \"html\": {\n              \"href\": \"https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80\"\n            },\n            \"pull_request\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/12\"\n            }\n          },\n          \"submitted_at\": \"2019-11-17T17:43:43Z\",\n          \"commit_id\": \"ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091\",\n          \"author_association\": \"COLLABORATOR\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestReview

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PullRequestReview
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPullRequestReviewComment_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments/1\",\n          \"pull_request_review_id\": 42,\n          \"id\": 10,\n          \"node_id\": \"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw\",\n          \"diff_hunk\": \"@@ -16,33 +16,40 @@ public class Connection : IConnection...\",\n          \"path\": \"file1.txt\",\n          \"position\": 1,\n          \"original_position\": 4,\n          \"commit_id\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"original_commit_id\": \"9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840\",\n          \"in_reply_to_id\": 426899381,\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"Great stuff!\",\n          \"created_at\": \"2011-04-14T16:00:49Z\",\n          \"updated_at\": \"2011-04-14T16:00:49Z\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/1#discussion-diff-1\",\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1\",\n          \"author_association\": \"NONE\",\n          \"_links\": {\n            \"self\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments/1\"\n            },\n            \"html\": {\n              \"href\": \"https://github.com/octocat/Hello-World/pull/1#discussion-diff-1\"\n            },\n            \"pull_request\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1\"\n            }\n          },\n          \"start_line\": 1,\n          \"original_start_line\": 1,\n          \"start_side\": \"RIGHT\",\n          \"line\": 2,\n          \"original_line\": 2,\n          \"side\": \"RIGHT\"\n        }"},
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments/1\",\n          \"pull_request_review_id\": 42,\n          \"id\": 10,\n          \"node_id\": \"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw\",\n          \"diff_hunk\": \"@@ -16,33 +16,40 @@ public class Connection : IConnection...\",\n          \"path\": \"file1.txt\",\n          \"position\": 1,\n          \"original_position\": 4,\n          \"commit_id\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"original_commit_id\": \"9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840\",\n          \"in_reply_to_id\": 8,\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"Great stuff!\",\n          \"created_at\": \"2011-04-14T16:00:49Z\",\n          \"updated_at\": \"2011-04-14T16:00:49Z\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/1#discussion-diff-1\",\n          \"pull_request_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1\",\n          \"author_association\": \"NONE\",\n          \"_links\": {\n            \"self\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments/1\"\n            },\n            \"html\": {\n              \"href\": \"https://github.com/octocat/Hello-World/pull/1#discussion-diff-1\"\n            },\n            \"pull_request\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1\"\n            }\n          },\n          \"start_line\": 1,\n          \"original_start_line\": 1,\n          \"start_side\": \"RIGHT\",\n          \"line\": 2,\n          \"original_line\": 2,\n          \"side\": \"RIGHT\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestReviewComment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PullRequestReviewComment
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPullRequestReviewRequest_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"users\": [\n            {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            }\n          ],\n          \"teams\": [\n            {\n              \"id\": 1,\n              \"node_id\": \"MDQ6VGVhbTE=\",\n              \"url\": \"https://api.github.com/teams/1\",\n              \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\n              \"name\": \"Justice League\",\n              \"slug\": \"justice-league\",\n              \"description\": \"A great team.\",\n              \"privacy\": \"closed\",\n              \"permission\": \"admin\",\n              \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\n              \"repositories_url\": \"https://api.github.com/teams/1/repos\",\n              \"parent\": null\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestReviewRequest

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PullRequestReviewRequest
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPullRequestSimple_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\",\n          \"id\": 1,\n          \"node_id\": \"MDExOlB1bGxSZXF1ZXN0MQ==\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\n          \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\n          \"patch_url\": \"https://github.com/octocat/Hello-World/pull/1347.patch\",\n          \"issue_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\",\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits\",\n          \"review_comments_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments\",\n          \"review_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}\",\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\",\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"number\": 1347,\n          \"state\": \"open\",\n          \"locked\": true,\n          \"title\": \"Amazing new feature\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"Please pull these awesome changes in!\",\n          \"labels\": [\n            {\n              \"id\": 208045946,\n              \"node_id\": \"MDU6TGFiZWwyMDgwNDU5NDY=\",\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/labels/bug\",\n              \"name\": \"bug\",\n              \"description\": \"Something isn't working\",\n              \"color\": \"f29513\",\n              \"default\": true\n            }\n          ],\n          \"milestone\": {\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\n            \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\n            \"id\": 1002604,\n            \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\n            \"number\": 1,\n            \"state\": \"open\",\n            \"title\": \"v1.0\",\n            \"description\": \"Tracking milestone for version 1.0\",\n            \"creator\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"open_issues\": 4,\n            \"closed_issues\": 8,\n            \"created_at\": \"2011-04-10T20:09:31Z\",\n            \"updated_at\": \"2014-03-03T18:58:10Z\",\n            \"closed_at\": \"2013-02-12T13:22:01Z\",\n            \"due_on\": \"2012-10-09T23:39:01Z\"\n          },\n          \"active_lock_reason\": \"too heated\",\n          \"created_at\": \"2011-01-26T19:01:12Z\",\n          \"updated_at\": \"2011-01-26T19:01:12Z\",\n          \"closed_at\": \"2011-01-26T19:01:12Z\",\n          \"merged_at\": \"2011-01-26T19:01:12Z\",\n          \"merge_commit_sha\": \"e5bd3914e2e596debea16f433f57875b5b90bcd6\",\n          \"assignee\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"assignees\": [\n            {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            {\n              \"login\": \"hubot\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/hubot\",\n              \"html_url\": \"https://github.com/hubot\",\n              \"followers_url\": \"https://api.github.com/users/hubot/followers\",\n              \"following_url\": \"https://api.github.com/users/hubot/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/hubot/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/hubot/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/hubot/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/hubot/orgs\",\n              \"repos_url\": \"https://api.github.com/users/hubot/repos\",\n              \"events_url\": \"https://api.github.com/users/hubot/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/hubot/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": true\n            }\n          ],\n          \"requested_reviewers\": [\n            {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            {\n              \"login\": \"hubot\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/hubot\",\n              \"html_url\": \"https://github.com/hubot\",\n              \"followers_url\": \"https://api.github.com/users/hubot/followers\",\n              \"following_url\": \"https://api.github.com/users/hubot/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/hubot/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/hubot/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/hubot/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/hubot/orgs\",\n              \"repos_url\": \"https://api.github.com/users/hubot/repos\",\n              \"events_url\": \"https://api.github.com/users/hubot/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/hubot/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": true\n            },\n            {\n              \"login\": \"other_user\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/other_user_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/other_user\",\n              \"html_url\": \"https://github.com/other_user\",\n              \"followers_url\": \"https://api.github.com/users/other_user/followers\",\n              \"following_url\": \"https://api.github.com/users/other_user/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/other_user/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/other_user/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/other_user/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/other_user/orgs\",\n              \"repos_url\": \"https://api.github.com/users/other_user/repos\",\n              \"events_url\": \"https://api.github.com/users/other_user/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/other_user/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            }\n          ],\n          \"requested_teams\": [\n            {\n              \"id\": 1,\n              \"node_id\": \"MDQ6VGVhbTE=\",\n              \"url\": \"https://api.github.com/teams/1\",\n              \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\n              \"name\": \"Justice League\",\n              \"slug\": \"justice-league\",\n              \"description\": \"A great team.\",\n              \"privacy\": \"closed\",\n              \"permission\": \"admin\",\n              \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\n              \"repositories_url\": \"https://api.github.com/teams/1/repos\",\n              \"parent\": null\n            }\n          ],\n          \"head\": {\n            \"label\": \"octocat:new-topic\",\n            \"ref\": \"new-topic\",\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"user\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"repo\": {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"template_repository\": null,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://github.com/licenses/mit\"\n              },\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1\n            }\n          },\n          \"base\": {\n            \"label\": \"octocat:master\",\n            \"ref\": \"master\",\n            \"sha\": \"6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n            \"user\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"repo\": {\n              \"id\": 1296269,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n              \"name\": \"Hello-World\",\n              \"full_name\": \"octocat/Hello-World\",\n              \"owner\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/octocat/Hello-World\",\n              \"description\": \"This your first repo!\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n              \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n              \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n              \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n              \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n              \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n              \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n              \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n              \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n              \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n              \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n              \"homepage\": \"https://github.com\",\n              \"language\": null,\n              \"forks_count\": 9,\n              \"stargazers_count\": 80,\n              \"watchers_count\": 80,\n              \"size\": 108,\n              \"default_branch\": \"master\",\n              \"open_issues_count\": 0,\n              \"is_template\": true,\n              \"topics\": [\n                \"octocat\",\n                \"atom\",\n                \"electron\",\n                \"api\"\n              ],\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_wiki\": true,\n              \"has_pages\": false,\n              \"has_downloads\": true,\n              \"archived\": false,\n              \"disabled\": false,\n              \"visibility\": \"public\",\n              \"pushed_at\": \"2011-01-26T19:06:43Z\",\n              \"created_at\": \"2011-01-26T19:01:12Z\",\n              \"updated_at\": \"2011-01-26T19:14:43Z\",\n              \"permissions\": {\n                \"admin\": false,\n                \"push\": false,\n                \"pull\": true\n              },\n              \"allow_rebase_merge\": true,\n              \"template_repository\": null,\n              \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n              \"allow_squash_merge\": true,\n              \"allow_auto_merge\": false,\n              \"delete_branch_on_merge\": true,\n              \"allow_merge_commit\": true,\n              \"subscribers_count\": 42,\n              \"network_count\": 0,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://api.github.com/licenses/mit\"\n              },\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1\n            }\n          },\n          \"_links\": {\n            \"self\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\"\n            },\n            \"html\": {\n              \"href\": \"https://github.com/octocat/Hello-World/pull/1347\"\n            },\n            \"issue\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347\"\n            },\n            \"comments\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/comments\"\n            },\n            \"review_comments\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments\"\n            },\n            \"review_comment\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}\"\n            },\n            \"commits\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits\"\n            },\n            \"statuses\": {\n              \"href\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\"\n            }\n          },\n          \"author_association\": \"OWNER\",\n          \"auto_merge\": null,\n          \"draft\": false\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestSimple

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PullRequestSimple
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPullRequestState_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"open\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullRequestState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PullRequestState
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPullsMergeConflict_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"message\": \"Head branch was modified. Review and try the merge again.\"\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullsMergeConflict

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PullsMergeConflict
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPullsMergeMethodNotAllowed_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"message\": \"Pull Request is not mergeable\"\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullsMergeMethodNotAllowed

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PullsMergeMethodNotAllowed
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestPullsUpdateBranchAccepted_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                  \"message\": \"Updating pull request branch.\",\n                  \"url\": \"https://github.com/repos/octocat/Hello-World/pulls/53\"\n                }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ PullsUpdateBranchAccepted

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 PullsUpdateBranchAccepted
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestRateLimitOverview_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"resources\": {\n            \"core\": {\n              \"limit\": 5000,\n              \"remaining\": 4999,\n              \"reset\": 1372700873,\n              \"used\": 1\n            },\n            \"search\": {\n              \"limit\": 30,\n              \"remaining\": 18,\n              \"reset\": 1372697452,\n              \"used\": 12\n            },\n            \"graphql\": {\n              \"limit\": 5000,\n              \"remaining\": 4993,\n              \"reset\": 1372700389,\n              \"used\": 7\n            },\n            \"integration_manifest\": {\n              \"limit\": 5000,\n              \"remaining\": 4999,\n              \"reset\": 1551806725,\n              \"used\": 1\n            },\n            \"code_scanning_upload\": {\n              \"limit\": 500,\n              \"remaining\": 499,\n              \"reset\": 1551806725,\n              \"used\": 1\n            }\n          },\n          \"rate\": {\n            \"limit\": 5000,\n            \"remaining\": 4999,\n            \"reset\": 1372700873,\n            \"used\": 1\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RateLimitOverview

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 RateLimitOverview
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReaction_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"node_id\": \"MDg6UmVhY3Rpb24x\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"content\": \"heart\",\n          \"created_at\": \"2016-05-20T20:09:31Z\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Reaction

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Reaction
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReactionContent_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"heart\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReactionContent

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReactionContent
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestRelease_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/releases/1\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/releases/v1.0.0\",\n          \"assets_url\": \"https://api.github.com/repos/octocat/Hello-World/releases/1/assets\",\n          \"upload_url\": \"https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}\",\n          \"tarball_url\": \"https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0\",\n          \"zipball_url\": \"https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0\",\n          \"discussion_url\": \"https://github.com/octocat/Hello-World/discussions/90\",\n          \"id\": 1,\n          \"node_id\": \"MDc6UmVsZWFzZTE=\",\n          \"tag_name\": \"v1.0.0\",\n          \"target_commitish\": \"master\",\n          \"name\": \"v1.0.0\",\n          \"body\": \"Description of the release\",\n          \"draft\": false,\n          \"prerelease\": false,\n          \"created_at\": \"2013-02-27T19:35:32Z\",\n          \"published_at\": \"2013-02-27T19:35:32Z\",\n          \"author\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"assets\": [\n            {\n              \"url\": \"https://api.github.com/repos/octocat/Hello-World/releases/assets/1\",\n              \"browser_download_url\": \"https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip\",\n              \"id\": 1,\n              \"node_id\": \"MDEyOlJlbGVhc2VBc3NldDE=\",\n              \"name\": \"example.zip\",\n              \"label\": \"short description\",\n              \"state\": \"uploaded\",\n              \"content_type\": \"application/zip\",\n              \"size\": 1024,\n              \"download_count\": 42,\n              \"created_at\": \"2013-02-27T19:35:32Z\",\n              \"updated_at\": \"2013-02-27T19:35:32Z\",\n              \"uploader\": {\n                \"login\": \"octocat\",\n                \"id\": 1,\n                \"node_id\": \"MDQ6VXNlcjE=\",\n                \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              }\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Release

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Release
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReleaseAsset_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/releases/assets/1\",\n          \"browser_download_url\": \"https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip\",\n          \"id\": 1,\n          \"node_id\": \"MDEyOlJlbGVhc2VBc3NldDE=\",\n          \"name\": \"example.zip\",\n          \"label\": \"short description\",\n          \"state\": \"uploaded\",\n          \"content_type\": \"application/zip\",\n          \"size\": 1024,\n          \"download_count\": 42,\n          \"created_at\": \"2013-02-27T19:35:32Z\",\n          \"updated_at\": \"2013-02-27T19:35:32Z\",\n          \"uploader\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReleaseAsset

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReleaseAsset
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposAddAppAccessRestrictionsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"apps\": [\n                        \"my-app\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposAddAppAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposAddAppAccessRestrictionsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposAddStatusCheckContextsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"contexts\": [\n                        \"contexts\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposAddStatusCheckContextsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposAddStatusCheckContextsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposAddTeamAccessRestrictionsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"teams\": [\n                        \"my-team\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposAddTeamAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposAddTeamAccessRestrictionsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposAddUserAccessRestrictionsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"users\": [\n                        \"mona\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposAddUserAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposAddUserAccessRestrictionsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposCreateDeploymentAccepted_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"message\": \"Auto-merged master into topic-branch on deployment.\"\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposCreateDeploymentAccepted

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposCreateDeploymentAccepted
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposDeleteForbidden_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                  \"message\": \"Organization members cannot delete repositories.\",\n                  \"documentation_url\": \"https://docs.github.com/rest/reference/repos#delete-a-repository\"\n                }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposDeleteForbidden

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposDeleteForbidden
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposRemoveAppAccessRestrictionsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"apps\": [\n                        \"my-app\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposRemoveAppAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposRemoveAppAccessRestrictionsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposRemoveStatusCheckContextsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"contexts\": [\n                        \"contexts\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposRemoveStatusCheckContextsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposRemoveStatusCheckContextsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposRemoveTeamAccessRestrictionsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"teams\": [\n                        \"my-team\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposRemoveTeamAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposRemoveTeamAccessRestrictionsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposRemoveUserAccessRestrictionsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"users\": [\n                        \"mona\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposRemoveUserAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposRemoveUserAccessRestrictionsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposSetAppAccessRestrictionsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"apps\": [\n                        \"my-app\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposSetAppAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposSetAppAccessRestrictionsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposSetStatusCheckContextsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"contexts\": [\n                        \"contexts\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposSetStatusCheckContextsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposSetStatusCheckContextsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposSetTeamAccessRestrictionsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"teams\": [\n                        \"my-team\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposSetTeamAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposSetTeamAccessRestrictionsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposSetUserAccessRestrictionsReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"users\": [\n                        \"mona\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposSetUserAccessRestrictionsReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposSetUserAccessRestrictionsReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestReposUpdateWebhookConfigForRepoReq_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                  \"content_type\": \"json\",\n                  \"insecure_ssl\": \"0\",\n                  \"secret\": \"********\",\n                  \"url\": \"https://example.com/webhook\"\n                }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ReposUpdateWebhookConfigForRepoReq

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ReposUpdateWebhookConfigForRepoReq
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestRepository_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1296269,\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n          \"name\": \"Hello-World\",\n          \"full_name\": \"octocat/Hello-World\",\n          \"owner\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"private\": false,\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\n          \"description\": \"This your first repo!\",\n          \"fork\": false,\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n          \"homepage\": \"https://github.com\",\n          \"language\": null,\n          \"forks_count\": 9,\n          \"forks\": 9,\n          \"stargazers_count\": 80,\n          \"watchers_count\": 80,\n          \"watchers\": 80,\n          \"size\": 108,\n          \"default_branch\": \"master\",\n          \"open_issues_count\": 0,\n          \"open_issues\": 0,\n          \"is_template\": false,\n          \"topics\": [\n            \"octocat\",\n            \"atom\",\n            \"electron\",\n            \"api\"\n          ],\n          \"has_issues\": true,\n          \"has_projects\": true,\n          \"has_wiki\": true,\n          \"has_pages\": false,\n          \"has_downloads\": true,\n          \"archived\": false,\n          \"disabled\": false,\n          \"visibility\": \"public\",\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\n          \"created_at\": \"2011-01-26T19:01:12Z\",\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\n          \"permissions\": {\n            \"admin\": false,\n            \"push\": false,\n            \"pull\": true\n          },\n          \"allow_rebase_merge\": true,\n          \"allow_auto_merge\": false,\n          \"license\": {\n            \"key\": \"mit\",\n            \"name\": \"MIT License\",\n            \"url\": \"https://api.github.com/licenses/mit\",\n            \"spdx_id\": \"MIT\",\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n            \"html_url\": \"https://github.com/licenses/mit\"\n          }\n        }"},
		{Input: "{\n          \"id\": 1296269,\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n          \"name\": \"Hello-World\",\n          \"full_name\": \"octocat/Hello-World\",\n          \"owner\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"private\": false,\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\n          \"description\": \"This your first repo!\",\n          \"fork\": false,\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n          \"homepage\": \"https://github.com\",\n          \"organization\": null,\n          \"language\": null,\n          \"forks\": 9,\n          \"forks_count\": 9,\n          \"stargazers_count\": 80,\n          \"watchers_count\": 80,\n          \"watchers\": 80,\n          \"size\": 108,\n          \"default_branch\": \"master\",\n          \"open_issues\": 0,\n          \"open_issues_count\": 0,\n          \"is_template\": true,\n          \"license\": {\n            \"key\": \"mit\",\n            \"name\": \"MIT License\",\n            \"url\": \"https://api.github.com/licenses/mit\",\n            \"spdx_id\": \"MIT\",\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n            \"html_url\": \"https://api.github.com/licenses/mit\"\n          },\n          \"topics\": [\n            \"octocat\",\n            \"atom\",\n            \"electron\",\n            \"api\"\n          ],\n          \"has_issues\": true,\n          \"has_projects\": true,\n          \"has_wiki\": true,\n          \"has_pages\": false,\n          \"has_downloads\": true,\n          \"archived\": false,\n          \"disabled\": false,\n          \"visibility\": \"public\",\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\n          \"created_at\": \"2011-01-26T19:01:12Z\",\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\n          \"permissions\": {\n            \"admin\": false,\n            \"push\": false,\n            \"pull\": true\n          },\n          \"allow_rebase_merge\": true,\n          \"template_repository\": null,\n          \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n          \"allow_squash_merge\": true,\n          \"allow_auto_merge\": false,\n          \"delete_branch_on_merge\": true,\n          \"allow_merge_commit\": true,\n          \"subscribers_count\": 42,\n          \"network_count\": 0\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Repository

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Repository
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestRepositoryCollaboratorPermission_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"permission\": \"admin\",\n          \"user\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RepositoryCollaboratorPermission

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 RepositoryCollaboratorPermission
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestRepositoryInvitation_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n          \"repository\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World\",\n            \"full_name\": \"octocat/Hello-World\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n            \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\n          },\n          \"invitee\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"inviter\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"permissions\": \"write\",\n          \"created_at\": \"2016-06-13T14:52:50-05:00\",\n          \"expired\": false,\n          \"url\": \"https://api.github.com/user/repository_invitations/1296269\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/invitations\"\n        }"},
		{Input: "{\n          \"id\": 1,\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n          \"repository\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World\",\n            \"full_name\": \"octocat/Hello-World\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n            \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\n          },\n          \"invitee\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"inviter\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"permissions\": \"write\",\n          \"created_at\": \"2016-06-13T14:52:50-05:00\",\n          \"url\": \"https://api.github.com/user/repository_invitations/1296269\",\n          \"html_url\": \"https://github.com/octocat/Hello-World/invitations\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RepositoryInvitation

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 RepositoryInvitation
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestRepositoryInvitationPermissions_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"read\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RepositoryInvitationPermissions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 RepositoryInvitationPermissions
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestRepositorySubscription_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"subscribed\": true,\n          \"ignored\": false,\n          \"reason\": null,\n          \"created_at\": \"2012-10-06T21:34:12Z\",\n          \"url\": \"https://api.github.com/repos/octocat/example/subscription\",\n          \"repository_url\": \"https://api.github.com/repos/octocat/example\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RepositorySubscription

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 RepositorySubscription
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestRunner_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 23,\n          \"name\": \"MBP\",\n          \"os\": \"macos\",\n          \"status\": \"online\",\n          \"busy\": true,\n          \"labels\": [\n            {\n              \"id\": 5,\n              \"name\": \"self-hosted\",\n              \"type\": \"read-only\"\n            },\n            {\n              \"id\": 7,\n              \"name\": \"X64\",\n              \"type\": \"read-only\"\n            },\n            {\n              \"id\": 20,\n              \"name\": \"macOS\",\n              \"type\": \"read-only\"\n            },\n            {\n              \"id\": 21,\n              \"name\": \"no-gpu\",\n              \"type\": \"custom\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Runner

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Runner
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestRunnerGroupsEnterprise_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 2,\n          \"name\": \"Expensive hardware runners\",\n          \"visibility\": \"selected\",\n          \"default\": false,\n          \"selected_organizations_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/organizations\",\n          \"runners_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/runners\",\n          \"allows_public_repositories\": true\n        }"},
		{Input: "{\n          \"id\": 2,\n          \"name\": \"octo-runner-group\",\n          \"visibility\": \"selected\",\n          \"default\": false,\n          \"selected_organizations_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/organizations\",\n          \"runners_url\": \"https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/runners\",\n          \"allows_public_repositories\": false\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RunnerGroupsEnterprise

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 RunnerGroupsEnterprise
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestRunnerGroupsOrg_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 2,\n          \"name\": \"octo-runner-group\",\n          \"visibility\": \"selected\",\n          \"default\": false,\n          \"selected_repositories_url\": \"https://api.github.com/orgs/octo-org/actions/runner-groups/2/repositories\",\n          \"runners_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners\",\n          \"inherited\": false,\n          \"allows_public_repositories\": true\n        }"},
		{Input: "{\n          \"id\": 2,\n          \"name\": \"octo-runner-group\",\n          \"visibility\": \"selected\",\n          \"default\": false,\n          \"selected_repositories_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/2/repositories\",\n          \"runners_url\": \"https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners\",\n          \"inherited\": false,\n          \"allows_public_repositories\": true\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ RunnerGroupsOrg

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 RunnerGroupsOrg
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestScimEnterpriseGroup_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"schemas\": [\n            \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n          ],\n          \"id\": \"abcd27f8-a9aa-11ea-8221-f59b2be9cccc\",\n          \"externalId\": null,\n          \"displayName\": \"octo-org\",\n          \"members\": [\n            {\n              \"value\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\n              \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\n              \"display\": \"octocat@github.com\"\n            }\n          ],\n          \"meta\": {\n            \"resourceType\": \"Group\",\n            \"created\": \"2020-06-09T03:10:17.000+10:00\",\n            \"lastModified\": \"2020-06-09T03:10:17.000+10:00\",\n            \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Groups/abcd27f8-a9aa-11ea-8221-f59b2be9cccc\"\n          }\n        }"},
		{Input: "{\n          \"schemas\": [\n            \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n          ],\n          \"id\": \"abcd27f8-a9aa-11ea-8221-f59b2be9cccc\",\n          \"externalId\": null,\n          \"displayName\": \"octo-org\",\n          \"members\": [\n            {\n              \"value\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\n              \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\n              \"display\": \"octocat@github.com\"\n            },\n            {\n              \"value\": \"aaaa8c34-a6b2-11ea-9d70-bbbbbd1c8fd5\",\n              \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/aaaa8c34-a6b2-11ea-9d70-bbbbbd1c8fd5\",\n              \"display\": \"hubot@example.com\"\n            }\n          ],\n          \"meta\": {\n            \"resourceType\": \"Group\",\n            \"created\": \"2020-06-09T03:10:17.000+10:0\",\n            \"lastModified\": \"2020-06-09T03:10:17.000+10:00\",\n            \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Groups/abcd27f8-a9aa-11ea-8221-f59b2be9cccc\"\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ScimEnterpriseGroup

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ScimEnterpriseGroup
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestScimEnterpriseUser_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"schemas\": [\n            \"urn:ietf:params:scim:schemas:core:2.0:User\"\n          ],\n          \"id\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\n          \"externalId\": \"00dowz5dr9oSfDFRA0h7\",\n          \"userName\": \"mona.octocat@okta.example.com\",\n          \"name\": {\n            \"givenName\": \"Mona\",\n            \"familyName\": \"Octocat\"\n          },\n          \"emails\": [\n            {\n              \"value\": \"mona.octocat@okta.example.com\",\n              \"type\": \"work\",\n              \"primary\": true\n            }\n          ],\n          \"groups\": [\n            {\n              \"value\": \"468dd3fa-a1d6-11ea-9031-15a1f0d7811d\"\n            }\n          ],\n          \"active\": true,\n          \"meta\": {\n            \"resourceType\": \"User\",\n            \"created\": \"2017-03-09T16:11:13-05:00\",\n            \"lastModified\": \"2017-03-09T16:11:13-05:00\",\n            \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\"\n          }\n        }"},
		{Input: "{\n          \"schemas\": [\n            \"urn:ietf:params:scim:schemas:core:2.0:User\"\n          ],\n          \"id\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\n          \"externalId\": \"00dowz5dr9oSfDFRA0h7\",\n          \"userName\": \"mona.octocat@okta.example.com\",\n          \"name\": {\n            \"givenName\": \"Monalisa\",\n            \"familyName\": \"Octocat\"\n          },\n          \"emails\": [\n            {\n              \"value\": \"mona.octocat@okta.example.com\",\n              \"type\": \"work\",\n              \"primary\": true\n            },\n            {\n              \"value\": \"monalisa@octocat.github.com\",\n              \"type\": \"home\"\n            }\n          ],\n          \"groups\": [\n            {\n              \"value\": \"468dd3fa-a1d6-11ea-9031-15a1f0d7811d\"\n            }\n          ],\n          \"active\": true,\n          \"meta\": {\n            \"resourceType\": \"User\",\n            \"created\": \"2017-03-09T16:11:13-05:00\",\n            \"lastModified\": \"2017-03-09T16:11:13-05:00\",\n            \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\"\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ScimEnterpriseUser

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ScimEnterpriseUser
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestScimGroupListEnterprise_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"schemas\": [\n            \"urn:ietf:params:scim:api:messages:2.0:ListResponse\"\n          ],\n          \"totalResults\": 2,\n          \"itemsPerPage\": 2,\n          \"startIndex\": 1,\n          \"Resources\": [\n            {\n              \"schemas\": [\n                \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n              ],\n              \"id\": \"abcd27f8-a9aa-11ea-8221-f59b2be9cccc\",\n              \"externalId\": null,\n              \"displayName\": \"octo-org\",\n              \"members\": [\n                {\n                  \"value\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\n                  \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\n                  \"display\": \"octocat@github.com\"\n                },\n                {\n                  \"value\": \"aaaa8c34-a6b2-11ea-9d70-bbbbbd1c8fd5\",\n                  \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/aaaa8c34-a6b2-11ea-9d70-bbbbbd1c8fd5\",\n                  \"display\": \"hubot@example.com\"\n                }\n              ],\n              \"meta\": {\n                \"resourceType\": \"Group\",\n                \"created\": \"2020-06-09T03:10:17.000+10:00\",\n                \"lastModified\": \"2020-06-09T03:10:17.000+10:00\",\n                \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Groups/abcd27f8-a9aa-11ea-8221-f59b2be9cccc\"\n              }\n            },\n            {\n              \"schemas\": [\n                \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n              ],\n              \"id\": \"5e75bbbb-aa1a-11ea-8644-75ff655cdddd\",\n              \"externalId\": null,\n              \"displayName\": \"octo-docs-org\",\n              \"members\": [\n                {\n                  \"value\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\n                  \"$ref\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\n                  \"display\": \"octocat@github.com\"\n                }\n              ],\n              \"meta\": {\n                \"resourceType\": \"Group\",\n                \"created\": \"2020-06-09T16:28:01.000+10:00\",\n                \"lastModified\": \"2020-06-09T16:28:01.000+10:00\",\n                \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Groups/5e75bbbb-aa1a-11ea-8644-75ff655cdddd\"\n              }\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ScimGroupListEnterprise

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ScimGroupListEnterprise
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestScimUserListEnterprise_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"schemas\": [\n            \"urn:ietf:params:scim:api:messages:2.0:ListResponse\"\n          ],\n          \"totalResults\": 2,\n          \"itemsPerPage\": 2,\n          \"startIndex\": 1,\n          \"Resources\": [\n            {\n              \"schemas\": [\n                \"urn:ietf:params:scim:schemas:core:2.0:User\"\n              ],\n              \"id\": \"92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\",\n              \"externalId\": \"00dowz5dr9oSfDFRA0h7\",\n              \"userName\": \"octocat@github.com\",\n              \"name\": {\n                \"givenName\": \"Mona\",\n                \"familyName\": \"Octocat\"\n              },\n              \"emails\": [\n                {\n                  \"value\": \"octocat@github.com\",\n                  \"primary\": true,\n                  \"type\": \"work\"\n                }\n              ],\n              \"groups\": [\n                {\n                  \"value\": \"468dd3fa-a1d6-11ea-9031-15a1f0d7811d\"\n                }\n              ],\n              \"active\": true,\n              \"meta\": {\n                \"resourceType\": \"User\",\n                \"created\": \"2020-05-30T04:02:34.000+10:00\",\n                \"lastModified\": \"2020-05-30T04:05:04.000+10:00\",\n                \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/92b58aaa-a1d6-11ea-8227-b9ce9e023ccc\"\n              }\n            },\n            {\n              \"schemas\": [\n                \"urn:ietf:params:scim:schemas:core:2.0:User\"\n              ],\n              \"id\": \"e18b8c34-a6b2-11ea-9d70-54abbd1c8fd5\",\n              \"externalId\": \"sdfoiausdofiua\",\n              \"userName\": \"hubot@example.com\",\n              \"name\": {\n                \"givenName\": \"hu\",\n                \"familyName\": \"bot\"\n              },\n              \"emails\": [\n                {\n                  \"value\": \"hubot@example.com\",\n                  \"type\": \"work\",\n                  \"primary\": true\n                }\n              ],\n              \"groups\": [\n\n              ],\n              \"active\": true,\n              \"meta\": {\n                \"resourceType\": \"User\",\n                \"created\": \"2020-06-05T08:29:40.000+10:00\",\n                \"lastModified\": \"2020-06-05T08:30:19.000+10:00\",\n                \"location\": \"https://api.github.com/scim/v2/enterprises/octo-corp/Users/e18b8c34-a6b2-11ea-9d70-54abbd1c8fd5\"\n              }\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ScimUserListEnterprise

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ScimUserListEnterprise
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestSearchCodeOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 7,\n          \"incomplete_results\": false,\n          \"items\": [\n            {\n              \"name\": \"classes.js\",\n              \"path\": \"src/attributes/classes.js\",\n              \"sha\": \"d7212f9dee2dcc18f084d7df8f417b80846ded5a\",\n              \"url\": \"https://api.github.com/repositories/167174/contents/src/attributes/classes.js?ref=825ac3773694e0cd23ee74895fd5aeb535b27da4\",\n              \"git_url\": \"https://api.github.com/repositories/167174/git/blobs/d7212f9dee2dcc18f084d7df8f417b80846ded5a\",\n              \"html_url\": \"https://github.com/jquery/jquery/blob/825ac3773694e0cd23ee74895fd5aeb535b27da4/src/attributes/classes.js\",\n              \"repository\": {\n                \"id\": 167174,\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkxNjcxNzQ=\",\n                \"name\": \"jquery\",\n                \"full_name\": \"jquery/jquery\",\n                \"owner\": {\n                  \"login\": \"jquery\",\n                  \"id\": 70142,\n                  \"node_id\": \"MDQ6VXNlcjcwMTQy\",\n                  \"avatar_url\": \"https://0.gravatar.com/avatar/6906f317a4733f4379b06c32229ef02f?d=https%3A%2F%2Fidenticons.github.com%2Ff426f04f2f9813718fb806b30e0093de.png\",\n                  \"gravatar_id\": \"\",\n                  \"url\": \"https://api.github.com/users/jquery\",\n                  \"html_url\": \"https://github.com/jquery\",\n                  \"followers_url\": \"https://api.github.com/users/jquery/followers\",\n                  \"following_url\": \"https://api.github.com/users/jquery/following{/other_user}\",\n                  \"gists_url\": \"https://api.github.com/users/jquery/gists{/gist_id}\",\n                  \"starred_url\": \"https://api.github.com/users/jquery/starred{/owner}{/repo}\",\n                  \"subscriptions_url\": \"https://api.github.com/users/jquery/subscriptions\",\n                  \"organizations_url\": \"https://api.github.com/users/jquery/orgs\",\n                  \"repos_url\": \"https://api.github.com/users/jquery/repos\",\n                  \"events_url\": \"https://api.github.com/users/jquery/events{/privacy}\",\n                  \"received_events_url\": \"https://api.github.com/users/jquery/received_events\",\n                  \"type\": \"Organization\",\n                  \"site_admin\": false\n                },\n                \"private\": false,\n                \"html_url\": \"https://github.com/jquery/jquery\",\n                \"description\": \"jQuery JavaScript Library\",\n                \"fork\": false,\n                \"url\": \"https://api.github.com/repos/jquery/jquery\",\n                \"forks_url\": \"https://api.github.com/repos/jquery/jquery/forks\",\n                \"keys_url\": \"https://api.github.com/repos/jquery/jquery/keys{/key_id}\",\n                \"collaborators_url\": \"https://api.github.com/repos/jquery/jquery/collaborators{/collaborator}\",\n                \"teams_url\": \"https://api.github.com/repos/jquery/jquery/teams\",\n                \"hooks_url\": \"https://api.github.com/repos/jquery/jquery/hooks\",\n                \"issue_events_url\": \"https://api.github.com/repos/jquery/jquery/issues/events{/number}\",\n                \"events_url\": \"https://api.github.com/repos/jquery/jquery/events\",\n                \"assignees_url\": \"https://api.github.com/repos/jquery/jquery/assignees{/user}\",\n                \"branches_url\": \"https://api.github.com/repos/jquery/jquery/branches{/branch}\",\n                \"tags_url\": \"https://api.github.com/repos/jquery/jquery/tags\",\n                \"blobs_url\": \"https://api.github.com/repos/jquery/jquery/git/blobs{/sha}\",\n                \"git_tags_url\": \"https://api.github.com/repos/jquery/jquery/git/tags{/sha}\",\n                \"git_refs_url\": \"https://api.github.com/repos/jquery/jquery/git/refs{/sha}\",\n                \"trees_url\": \"https://api.github.com/repos/jquery/jquery/git/trees{/sha}\",\n                \"statuses_url\": \"https://api.github.com/repos/jquery/jquery/statuses/{sha}\",\n                \"languages_url\": \"https://api.github.com/repos/jquery/jquery/languages\",\n                \"stargazers_url\": \"https://api.github.com/repos/jquery/jquery/stargazers\",\n                \"contributors_url\": \"https://api.github.com/repos/jquery/jquery/contributors\",\n                \"subscribers_url\": \"https://api.github.com/repos/jquery/jquery/subscribers\",\n                \"subscription_url\": \"https://api.github.com/repos/jquery/jquery/subscription\",\n                \"commits_url\": \"https://api.github.com/repos/jquery/jquery/commits{/sha}\",\n                \"git_commits_url\": \"https://api.github.com/repos/jquery/jquery/git/commits{/sha}\",\n                \"comments_url\": \"https://api.github.com/repos/jquery/jquery/comments{/number}\",\n                \"issue_comment_url\": \"https://api.github.com/repos/jquery/jquery/issues/comments/{number}\",\n                \"contents_url\": \"https://api.github.com/repos/jquery/jquery/contents/{+path}\",\n                \"compare_url\": \"https://api.github.com/repos/jquery/jquery/compare/{base}...{head}\",\n                \"merges_url\": \"https://api.github.com/repos/jquery/jquery/merges\",\n                \"archive_url\": \"https://api.github.com/repos/jquery/jquery/{archive_format}{/ref}\",\n                \"downloads_url\": \"https://api.github.com/repos/jquery/jquery/downloads\",\n                \"issues_url\": \"https://api.github.com/repos/jquery/jquery/issues{/number}\",\n                \"pulls_url\": \"https://api.github.com/repos/jquery/jquery/pulls{/number}\",\n                \"milestones_url\": \"https://api.github.com/repos/jquery/jquery/milestones{/number}\",\n                \"notifications_url\": \"https://api.github.com/repos/jquery/jquery/notifications{?since,all,participating}\",\n                \"labels_url\": \"https://api.github.com/repos/jquery/jquery/labels{/name}\",\n                \"deployments_url\": \"http://api.github.com/repos/octocat/Hello-World/deployments\",\n                \"releases_url\": \"http://api.github.com/repos/octocat/Hello-World/releases{/id}\"\n              },\n              \"score\": 1\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchCodeOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 SearchCodeOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestSearchCommitsOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 1,\n          \"incomplete_results\": false,\n          \"items\": [\n            {\n              \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\n              \"sha\": \"bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\n              \"html_url\": \"https://github.com/octocat/Spoon-Knife/commit/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\n              \"comments_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f/comments\",\n              \"commit\": {\n                \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\n                \"author\": {\n                  \"date\": \"2014-02-04T14:38:36-08:00\",\n                  \"name\": \"The Octocat\",\n                  \"email\": \"octocat@nowhere.com\"\n                },\n                \"committer\": {\n                  \"date\": \"2014-02-12T15:18:55-08:00\",\n                  \"name\": \"The Octocat\",\n                  \"email\": \"octocat@nowhere.com\"\n                },\n                \"message\": \"Create styles.css and updated README\",\n                \"tree\": {\n                  \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/trees/a639e96f9038797fba6e0469f94a4b0cc459fa68\",\n                  \"sha\": \"a639e96f9038797fba6e0469f94a4b0cc459fa68\"\n                },\n                \"comment_count\": 8\n              },\n              \"author\": {\n                \"login\": \"octocat\",\n                \"id\": 583231,\n                \"node_id\": \"MDQ6VXNlcjU4MzIzMQ==\",\n                \"avatar_url\": \"https://avatars.githubusercontent.com/u/583231?v=3\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/octocat\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": false\n              },\n              \"committer\": {\n              },\n              \"parents\": [\n                {\n                  \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits/a30c19e3f13765a3b48829788bc1cb8b4e95cee4\",\n                  \"html_url\": \"https://github.com/octocat/Spoon-Knife/commit/a30c19e3f13765a3b48829788bc1cb8b4e95cee4\",\n                  \"sha\": \"a30c19e3f13765a3b48829788bc1cb8b4e95cee4\"\n                }\n              ],\n              \"repository\": {\n                \"id\": 1300192,\n                \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMzAwMTky\",\n                \"name\": \"Spoon-Knife\",\n                \"full_name\": \"octocat/Spoon-Knife\",\n                \"owner\": {\n                  \"login\": \"octocat\",\n                  \"id\": 583231,\n                  \"node_id\": \"MDQ6VXNlcjU4MzIzMQ==\",\n                  \"avatar_url\": \"https://avatars.githubusercontent.com/u/583231?v=3\",\n                  \"gravatar_id\": \"\",\n                  \"url\": \"https://api.github.com/users/octocat\",\n                  \"html_url\": \"https://github.com/octocat\",\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                  \"type\": \"User\",\n                  \"site_admin\": false\n                },\n                \"private\": false,\n                \"html_url\": \"https://github.com/octocat/Spoon-Knife\",\n                \"description\": \"This repo is for demonstration purposes only.\",\n                \"fork\": false,\n                \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife\",\n                \"forks_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/forks\",\n                \"keys_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/keys{/key_id}\",\n                \"collaborators_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/collaborators{/collaborator}\",\n                \"teams_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/teams\",\n                \"hooks_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/hooks\",\n                \"issue_events_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/issues/events{/number}\",\n                \"events_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/events\",\n                \"assignees_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/assignees{/user}\",\n                \"branches_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/branches{/branch}\",\n                \"tags_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/tags\",\n                \"blobs_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/blobs{/sha}\",\n                \"git_tags_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/tags{/sha}\",\n                \"git_refs_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/refs{/sha}\",\n                \"trees_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/trees{/sha}\",\n                \"statuses_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/statuses/{sha}\",\n                \"languages_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/languages\",\n                \"stargazers_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/stargazers\",\n                \"contributors_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/contributors\",\n                \"subscribers_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/subscribers\",\n                \"subscription_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/subscription\",\n                \"commits_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits{/sha}\",\n                \"git_commits_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/commits{/sha}\",\n                \"comments_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/comments{/number}\",\n                \"issue_comment_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/issues/comments{/number}\",\n                \"contents_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/contents/{+path}\",\n                \"compare_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/compare/{base}...{head}\",\n                \"merges_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/merges\",\n                \"archive_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/{archive_format}{/ref}\",\n                \"downloads_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/downloads\",\n                \"issues_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/issues{/number}\",\n                \"pulls_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/pulls{/number}\",\n                \"milestones_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/milestones{/number}\",\n                \"notifications_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/notifications{?since,all,participating}\",\n                \"labels_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/labels{/name}\",\n                \"releases_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/releases{/id}\",\n                \"deployments_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/deployments\"\n              },\n              \"score\": 1,\n              \"node_id\": \"MDQ6VXNlcjU4MzIzMQ==\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchCommitsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 SearchCommitsOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestSearchIssuesAndPullRequestsOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 280,\n          \"incomplete_results\": false,\n          \"items\": [\n            {\n              \"url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132\",\n              \"repository_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit\",\n              \"labels_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/labels{/name}\",\n              \"comments_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/comments\",\n              \"events_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/events\",\n              \"html_url\": \"https://github.com/batterseapower/pinyin-toolkit/issues/132\",\n              \"id\": 35802,\n              \"node_id\": \"MDU6SXNzdWUzNTgwMg==\",\n              \"number\": 132,\n              \"title\": \"Line Number Indexes Beyond 20 Not Displayed\",\n              \"user\": {\n                \"login\": \"Nick3C\",\n                \"id\": 90254,\n                \"node_id\": \"MDQ6VXNlcjkwMjU0\",\n                \"avatar_url\": \"https://secure.gravatar.com/avatar/934442aadfe3b2f4630510de416c5718?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/Nick3C\",\n                \"html_url\": \"https://github.com/Nick3C\",\n                \"followers_url\": \"https://api.github.com/users/Nick3C/followers\",\n                \"following_url\": \"https://api.github.com/users/Nick3C/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/Nick3C/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/Nick3C/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/Nick3C/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/Nick3C/orgs\",\n                \"repos_url\": \"https://api.github.com/users/Nick3C/repos\",\n                \"events_url\": \"https://api.github.com/users/Nick3C/events{/privacy}\",\n                \"received_events_url\": \"https://api.github.com/users/Nick3C/received_events\",\n                \"type\": \"User\",\n                \"site_admin\": true\n              },\n              \"labels\": [\n                {\n                  \"id\": 4,\n                  \"node_id\": \"MDU6TGFiZWw0\",\n                  \"url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/labels/bug\",\n                  \"name\": \"bug\",\n                  \"color\": \"ff0000\"\n                }\n              ],\n              \"state\": \"open\",\n              \"assignee\": null,\n              \"milestone\": {\n                \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\n                \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\n                \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\n                \"id\": 1002604,\n                \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\n                \"number\": 1,\n                \"state\": \"open\",\n                \"title\": \"v1.0\",\n                \"description\": \"Tracking milestone for version 1.0\",\n                \"creator\": {\n                  \"login\": \"octocat\",\n                  \"id\": 1,\n                  \"node_id\": \"MDQ6VXNlcjE=\",\n                  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n                  \"gravatar_id\": \"\",\n                  \"url\": \"https://api.github.com/users/octocat\",\n                  \"html_url\": \"https://github.com/octocat\",\n                  \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                  \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                  \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                  \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                  \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                  \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                  \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                  \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                  \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n                  \"type\": \"User\",\n                  \"site_admin\": false\n                },\n                \"open_issues\": 4,\n                \"closed_issues\": 8,\n                \"created_at\": \"2011-04-10T20:09:31Z\",\n                \"updated_at\": \"2014-03-03T18:58:10Z\",\n                \"closed_at\": \"2013-02-12T13:22:01Z\",\n                \"due_on\": \"2012-10-09T23:39:01Z\"\n              },\n              \"comments\": 15,\n              \"created_at\": \"2009-07-12T20:10:41Z\",\n              \"updated_at\": \"2009-07-19T09:23:43Z\",\n              \"closed_at\": null,\n              \"pull_request\": {\n                \"url\": \"https://api/github.com/repos/octocat/Hello-World/pull/1347\",\n                \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\n                \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\n                \"patch_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\"\n              },\n              \"body\": \"...\",\n              \"score\": 1,\n              \"locked\": true,\n              \"author_association\": \"COLLABORATOR\"\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchIssuesAndPullRequestsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 SearchIssuesAndPullRequestsOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestSearchLabelsOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 2,\n          \"incomplete_results\": false,\n          \"items\": [\n            {\n              \"id\": 418327088,\n              \"node_id\": \"MDU6TGFiZWw0MTgzMjcwODg=\",\n              \"url\": \"https://api.github.com/repos/octocat/linguist/labels/enhancement\",\n              \"name\": \"enhancement\",\n              \"color\": \"84b6eb\",\n              \"default\": true,\n              \"description\": \"New feature or request.\",\n              \"score\": 1\n            },\n            {\n              \"id\": 418327086,\n              \"node_id\": \"MDU6TGFiZWw0MTgzMjcwODY=\",\n              \"url\": \"https://api.github.com/repos/octocat/linguist/labels/bug\",\n              \"name\": \"bug\",\n              \"color\": \"ee0701\",\n              \"default\": true,\n              \"description\": \"Something isn't working.\",\n              \"score\": 1\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchLabelsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 SearchLabelsOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestSearchReposOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 40,\n          \"incomplete_results\": false,\n          \"items\": [\n            {\n              \"id\": 3081286,\n              \"node_id\": \"MDEwOlJlcG9zaXRvcnkzMDgxMjg2\",\n              \"name\": \"Tetris\",\n              \"full_name\": \"dtrupenn/Tetris\",\n              \"owner\": {\n                \"login\": \"dtrupenn\",\n                \"id\": 872147,\n                \"node_id\": \"MDQ6VXNlcjg3MjE0Nw==\",\n                \"avatar_url\": \"https://secure.gravatar.com/avatar/e7956084e75f239de85d3a31bc172ace?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png\",\n                \"gravatar_id\": \"\",\n                \"url\": \"https://api.github.com/users/dtrupenn\",\n                \"received_events_url\": \"https://api.github.com/users/dtrupenn/received_events\",\n                \"type\": \"User\",\n                \"html_url\": \"https://github.com/octocat\",\n                \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n                \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n                \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n                \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n                \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n                \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n                \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n                \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n                \"site_admin\": true\n              },\n              \"private\": false,\n              \"html_url\": \"https://github.com/dtrupenn/Tetris\",\n              \"description\": \"A C implementation of Tetris using Pennsim through LC4\",\n              \"fork\": false,\n              \"url\": \"https://api.github.com/repos/dtrupenn/Tetris\",\n              \"created_at\": \"2012-01-01T00:31:50Z\",\n              \"updated_at\": \"2013-01-05T17:58:47Z\",\n              \"pushed_at\": \"2012-01-01T00:37:02Z\",\n              \"homepage\": \"https://github.com\",\n              \"size\": 524,\n              \"stargazers_count\": 1,\n              \"watchers_count\": 1,\n              \"language\": \"Assembly\",\n              \"forks_count\": 0,\n              \"open_issues_count\": 0,\n              \"master_branch\": \"master\",\n              \"default_branch\": \"master\",\n              \"score\": 1,\n              \"archive_url\": \"https://api.github.com/repos/dtrupenn/Tetris/{archive_format}{/ref}\",\n              \"assignees_url\": \"https://api.github.com/repos/dtrupenn/Tetris/assignees{/user}\",\n              \"blobs_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/blobs{/sha}\",\n              \"branches_url\": \"https://api.github.com/repos/dtrupenn/Tetris/branches{/branch}\",\n              \"collaborators_url\": \"https://api.github.com/repos/dtrupenn/Tetris/collaborators{/collaborator}\",\n              \"comments_url\": \"https://api.github.com/repos/dtrupenn/Tetris/comments{/number}\",\n              \"commits_url\": \"https://api.github.com/repos/dtrupenn/Tetris/commits{/sha}\",\n              \"compare_url\": \"https://api.github.com/repos/dtrupenn/Tetris/compare/{base}...{head}\",\n              \"contents_url\": \"https://api.github.com/repos/dtrupenn/Tetris/contents/{+path}\",\n              \"contributors_url\": \"https://api.github.com/repos/dtrupenn/Tetris/contributors\",\n              \"deployments_url\": \"https://api.github.com/repos/dtrupenn/Tetris/deployments\",\n              \"downloads_url\": \"https://api.github.com/repos/dtrupenn/Tetris/downloads\",\n              \"events_url\": \"https://api.github.com/repos/dtrupenn/Tetris/events\",\n              \"forks_url\": \"https://api.github.com/repos/dtrupenn/Tetris/forks\",\n              \"git_commits_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/commits{/sha}\",\n              \"git_refs_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/refs{/sha}\",\n              \"git_tags_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/tags{/sha}\",\n              \"git_url\": \"git:github.com/dtrupenn/Tetris.git\",\n              \"issue_comment_url\": \"https://api.github.com/repos/dtrupenn/Tetris/issues/comments{/number}\",\n              \"issue_events_url\": \"https://api.github.com/repos/dtrupenn/Tetris/issues/events{/number}\",\n              \"issues_url\": \"https://api.github.com/repos/dtrupenn/Tetris/issues{/number}\",\n              \"keys_url\": \"https://api.github.com/repos/dtrupenn/Tetris/keys{/key_id}\",\n              \"labels_url\": \"https://api.github.com/repos/dtrupenn/Tetris/labels{/name}\",\n              \"languages_url\": \"https://api.github.com/repos/dtrupenn/Tetris/languages\",\n              \"merges_url\": \"https://api.github.com/repos/dtrupenn/Tetris/merges\",\n              \"milestones_url\": \"https://api.github.com/repos/dtrupenn/Tetris/milestones{/number}\",\n              \"notifications_url\": \"https://api.github.com/repos/dtrupenn/Tetris/notifications{?since,all,participating}\",\n              \"pulls_url\": \"https://api.github.com/repos/dtrupenn/Tetris/pulls{/number}\",\n              \"releases_url\": \"https://api.github.com/repos/dtrupenn/Tetris/releases{/id}\",\n              \"ssh_url\": \"git@github.com:dtrupenn/Tetris.git\",\n              \"stargazers_url\": \"https://api.github.com/repos/dtrupenn/Tetris/stargazers\",\n              \"statuses_url\": \"https://api.github.com/repos/dtrupenn/Tetris/statuses/{sha}\",\n              \"subscribers_url\": \"https://api.github.com/repos/dtrupenn/Tetris/subscribers\",\n              \"subscription_url\": \"https://api.github.com/repos/dtrupenn/Tetris/subscription\",\n              \"tags_url\": \"https://api.github.com/repos/dtrupenn/Tetris/tags\",\n              \"teams_url\": \"https://api.github.com/repos/dtrupenn/Tetris/teams\",\n              \"trees_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/trees{/sha}\",\n              \"clone_url\": \"https://github.com/dtrupenn/Tetris.git\",\n              \"mirror_url\": \"git:git.example.com/dtrupenn/Tetris\",\n              \"hooks_url\": \"https://api.github.com/repos/dtrupenn/Tetris/hooks\",\n              \"svn_url\": \"https://svn.github.com/dtrupenn/Tetris\",\n              \"forks\": 1,\n              \"open_issues\": 1,\n              \"watchers\": 1,\n              \"has_issues\": true,\n              \"has_projects\": true,\n              \"has_pages\": true,\n              \"has_wiki\": true,\n              \"has_downloads\": true,\n              \"archived\": true,\n              \"disabled\": true,\n              \"license\": {\n                \"key\": \"mit\",\n                \"name\": \"MIT License\",\n                \"url\": \"https://api.github.com/licenses/mit\",\n                \"spdx_id\": \"MIT\",\n                \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n                \"html_url\": \"https://api.github.com/licenses/mit\"\n              }\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchReposOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 SearchReposOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestSearchTopicsOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 6,\n          \"incomplete_results\": false,\n          \"items\": [\n            {\n              \"name\": \"ruby\",\n              \"display_name\": \"Ruby\",\n              \"short_description\": \"Ruby is a scripting language designed for simplified object-oriented programming.\",\n              \"description\": \"Ruby was developed by\u00a0Yukihiro \\\"Matz\\\" Matsumoto\u00a0in 1995 with the intent of having an easily readable programming language. It is integrated with the Rails framework to create dynamic web-applications. Ruby's syntax is similar to that of Perl and Python.\",\n              \"created_by\": \"Yukihiro Matsumoto\",\n              \"released\": \"December 21, 1995\",\n              \"created_at\": \"2016-11-28T22:03:59Z\",\n              \"updated_at\": \"2017-10-30T18:16:32Z\",\n              \"featured\": true,\n              \"curated\": true,\n              \"score\": 1\n            },\n            {\n              \"name\": \"rails\",\n              \"display_name\": \"Rails\",\n              \"short_description\": \"Ruby on Rails (Rails) is a web application framework written in Ruby.\",\n              \"description\": \"Ruby on Rails (Rails) is a web application framework written in Ruby. It is meant to help simplify the building of complex websites.\",\n              \"created_by\": \"David Heinemeier Hansson\",\n              \"released\": \"December 13 2005\",\n              \"created_at\": \"2016-12-09T17:03:50Z\",\n              \"updated_at\": \"2017-10-30T16:20:19Z\",\n              \"featured\": true,\n              \"curated\": true,\n              \"score\": 1\n            },\n            {\n              \"name\": \"python\",\n              \"display_name\": \"Python\",\n              \"short_description\": \"Python is a dynamically typed programming language.\",\n              \"description\": \"Python is a dynamically typed programming language designed by Guido Van Rossum. Much like the programming language Ruby, Python was designed to be easily read by programmers. Because of its large following and many libraries, Python can be implemented and used to do anything from webpages to scientific research.\",\n              \"created_by\": \"Guido van Rossum\",\n              \"released\": \"February 20, 1991\",\n              \"created_at\": \"2016-12-07T00:07:02Z\",\n              \"updated_at\": \"2017-10-27T22:45:43Z\",\n              \"featured\": true,\n              \"curated\": true,\n              \"score\": 1\n            },\n            {\n              \"name\": \"jekyll\",\n              \"display_name\": \"Jekyll\",\n              \"short_description\": \"Jekyll is a simple, blog-aware static site generator.\",\n              \"description\": \"Jekyll is a blog-aware, site generator written in Ruby. It takes raw text files, runs it through a renderer and produces a publishable static website.\",\n              \"created_by\": \"Tom Preston-Werner\",\n              \"released\": \"2008\",\n              \"created_at\": \"2016-12-16T21:53:08Z\",\n              \"updated_at\": \"2017-10-27T19:00:24Z\",\n              \"featured\": true,\n              \"curated\": true,\n              \"score\": 1\n            },\n            {\n              \"name\": \"sass\",\n              \"display_name\": \"Sass\",\n              \"short_description\": \"Sass is a stable extension to classic CSS.\",\n              \"description\": \"Sass is a stylesheet language with a main implementation in Ruby. It is an extension of CSS that makes improvements to the old stylesheet format, such as being able to declare variables and using a cleaner nesting syntax.\",\n              \"created_by\": \"Hampton Catlin, Natalie Weizenbaum, Chris Eppstein\",\n              \"released\": \"November 28, 2006\",\n              \"created_at\": \"2016-12-16T21:53:45Z\",\n              \"updated_at\": \"2018-01-16T16:30:40Z\",\n              \"featured\": true,\n              \"curated\": true,\n              \"score\": 1\n            },\n            {\n              \"name\": \"homebrew\",\n              \"display_name\": \"Homebrew\",\n              \"short_description\": \"Homebrew is a package manager for macOS.\",\n              \"description\": \"Homebrew is a package manager for Apple's macOS operating system. It simplifies the installation of software and is popular in the Ruby on Rails community.\",\n              \"created_by\": \"Max Howell\",\n              \"released\": \"2009\",\n              \"created_at\": \"2016-12-17T20:30:44Z\",\n              \"updated_at\": \"2018-02-06T16:14:56Z\",\n              \"featured\": true,\n              \"curated\": true,\n              \"score\": 1\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchTopicsOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 SearchTopicsOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestSearchUsersOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"total_count\": 12,\n          \"incomplete_results\": false,\n          \"items\": [\n            {\n              \"login\": \"mojombo\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://secure.gravatar.com/avatar/25c7c18223fb42a4c6ae1c8db6f50f9b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/mojombo\",\n              \"html_url\": \"https://github.com/mojombo\",\n              \"followers_url\": \"https://api.github.com/users/mojombo/followers\",\n              \"subscriptions_url\": \"https://api.github.com/users/mojombo/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/mojombo/orgs\",\n              \"repos_url\": \"https://api.github.com/users/mojombo/repos\",\n              \"received_events_url\": \"https://api.github.com/users/mojombo/received_events\",\n              \"type\": \"User\",\n              \"score\": 1,\n              \"following_url\": \"https://api.github.com/users/mojombo/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/mojombo/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/mojombo/starred{/owner}{/repo}\",\n              \"events_url\": \"https://api.github.com/users/mojombo/events{/privacy}\",\n              \"site_admin\": true\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SearchUsersOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 SearchUsersOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestSecretScanningAlert_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"number\": 42,\n          \"created_at\": \"2020-11-06T18:18:30Z\",\n          \"url\": \"https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42\",\n          \"html_url\": \"https://github.com/owner/private-repo/security/secret-scanning/42\",\n          \"state\": \"open\",\n          \"resolution\": null,\n          \"resolved_at\": null,\n          \"resolved_by\": null,\n          \"secret_type\": \"mailchimp_api_key\",\n          \"secret\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2\"\n        }"},
		{Input: "{\n          \"number\": 42,\n          \"created_at\": \"2020-11-06T18:18:30Z\",\n          \"url\": \"https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42\",\n          \"html_url\": \"https://github.com/owner/private-repo/security/secret-scanning/42\",\n          \"state\": \"resolved\",\n          \"resolution\": \"used_in_tests\",\n          \"resolved_at\": \"2020-11-16T22:42:07Z\",\n          \"resolved_by\": {\n            \"login\": \"monalisa\",\n            \"id\": 2,\n            \"node_id\": \"MDQ6VXNlcjI=\",\n            \"avatar_url\": \"https://alambic.github.com/avatars/u/2?\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/monalisa\",\n            \"html_url\": \"https://github.com/monalisa\",\n            \"followers_url\": \"https://api.github.com/users/monalisa/followers\",\n            \"following_url\": \"https://api.github.com/users/monalisa/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/monalisa/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/monalisa/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/monalisa/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/monalisa/orgs\",\n            \"repos_url\": \"https://api.github.com/users/monalisa/repos\",\n            \"events_url\": \"https://api.github.com/users/monalisa/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/monalisa/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": true\n          },\n          \"secret_type\": \"mailchimp_api_key\",\n          \"secret\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SecretScanningAlert

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 SecretScanningAlert
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestSelectedActions_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"github_owned_allowed\": true,\n          \"verified_allowed\": false,\n          \"patterns_allowed\": [\n            \"monalisa/octocat@*\",\n            \"docker/*\"\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SelectedActions

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 SelectedActions
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestShortBlob_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\",\n          \"sha\": \"3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ShortBlob

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ShortBlob
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestStatus_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e\",\n          \"avatar_url\": \"https://github.com/images/error/hubot_happy.gif\",\n          \"id\": 1,\n          \"node_id\": \"MDY6U3RhdHVzMQ==\",\n          \"state\": \"success\",\n          \"description\": \"Build has completed successfully\",\n          \"target_url\": \"https://ci.example.com/1000/output\",\n          \"context\": \"continuous-integration/jenkins\",\n          \"created_at\": \"2012-07-20T01:19:13Z\",\n          \"updated_at\": \"2012-07-20T01:19:13Z\",\n          \"creator\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Status

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Status
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestStatusCheckPolicy_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks\",\n          \"strict\": true,\n          \"contexts\": [\n            \"continuous-integration/travis-ci\"\n          ],\n          \"contexts_url\": \"https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ StatusCheckPolicy

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 StatusCheckPolicy
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestTeamDiscussion_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"author\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"Hi! This is an area for us to collaborate as a team.\",\n          \"body_html\": \"<p>Hi! This is an area for us to collaborate as a team</p>\",\n          \"body_version\": \"0d495416a700fb06133c612575d92bfb\",\n          \"comments_count\": 0,\n          \"comments_url\": \"https://api.github.com/teams/2343027/discussions/1/comments\",\n          \"created_at\": \"2018-01-25T18:56:31Z\",\n          \"last_edited_at\": null,\n          \"html_url\": \"https://github.com/orgs/github/teams/justice-league/discussions/1\",\n          \"node_id\": \"MDE0OlRlYW1EaXNjdXNzaW9uMQ==\",\n          \"number\": 1,\n          \"pinned\": false,\n          \"private\": false,\n          \"team_url\": \"https://api.github.com/teams/2343027\",\n          \"title\": \"Our first team post\",\n          \"updated_at\": \"2018-01-25T18:56:31Z\",\n          \"url\": \"https://api.github.com/teams/2343027/discussions/1\",\n          \"reactions\": {\n            \"url\": \"https://api.github.com/teams/2343027/discussions/1/reactions\",\n            \"total_count\": 5,\n            \"+1\": 3,\n            \"-1\": 1,\n            \"laugh\": 0,\n            \"confused\": 0,\n            \"heart\": 1,\n            \"hooray\": 0,\n            \"eyes\": 1,\n            \"rocket\": 1\n          }\n        }"},
		{Input: "{\n          \"author\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"Hi! This is an area for us to collaborate as a team.\",\n          \"body_html\": \"<p>Hi! This is an area for us to collaborate as a team</p>\",\n          \"body_version\": \"0d495416a700fb06133c612575d92bfb\",\n          \"comments_count\": 1,\n          \"comments_url\": \"https://api.github.com/teams/2343027/discussions/1/comments\",\n          \"created_at\": \"2018-01-25T18:56:31Z\",\n          \"last_edited_at\": \"2018-01-26T18:22:20Z\",\n          \"html_url\": \"https://github.com/orgs/github/teams/justice-league/discussions/1\",\n          \"node_id\": \"MDE0OlRlYW1EaXNjdXNzaW9uMQ==\",\n          \"number\": 1,\n          \"pinned\": false,\n          \"private\": false,\n          \"team_url\": \"https://api.github.com/teams/2343027\",\n          \"title\": \"Welcome to our first team post\",\n          \"updated_at\": \"2018-01-26T18:22:20Z\",\n          \"url\": \"https://api.github.com/teams/2343027/discussions/1\",\n          \"reactions\": {\n            \"url\": \"https://api.github.com/teams/2343027/discussions/1/reactions\",\n            \"total_count\": 5,\n            \"+1\": 3,\n            \"-1\": 1,\n            \"laugh\": 0,\n            \"confused\": 0,\n            \"heart\": 1,\n            \"hooray\": 0,\n            \"eyes\": 1,\n            \"rocket\": 1\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamDiscussion

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 TeamDiscussion
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestTeamDiscussionComment_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"author\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"Do you like apples?\",\n          \"body_html\": \"<p>Do you like apples?</p>\",\n          \"body_version\": \"5eb32b219cdc6a5a9b29ba5d6caa9c51\",\n          \"created_at\": \"2018-01-15T23:53:58Z\",\n          \"last_edited_at\": null,\n          \"discussion_url\": \"https://api.github.com/teams/2403582/discussions/1\",\n          \"html_url\": \"https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1\",\n          \"node_id\": \"MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=\",\n          \"number\": 1,\n          \"updated_at\": \"2018-01-15T23:53:58Z\",\n          \"url\": \"https://api.github.com/teams/2403582/discussions/1/comments/1\",\n          \"reactions\": {\n            \"url\": \"https://api.github.com/teams/2403582/discussions/1/reactions\",\n            \"total_count\": 5,\n            \"+1\": 3,\n            \"-1\": 1,\n            \"laugh\": 0,\n            \"confused\": 0,\n            \"heart\": 1,\n            \"hooray\": 0,\n            \"eyes\": 1,\n            \"rocket\": 1\n          }\n        }"},
		{Input: "{\n          \"author\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"body\": \"Do you like pineapples?\",\n          \"body_html\": \"<p>Do you like pineapples?</p>\",\n          \"body_version\": \"e6907b24d9c93cc0c5024a7af5888116\",\n          \"created_at\": \"2018-01-15T23:53:58Z\",\n          \"last_edited_at\": \"2018-01-26T18:22:20Z\",\n          \"discussion_url\": \"https://api.github.com/teams/2403582/discussions/1\",\n          \"html_url\": \"https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1\",\n          \"node_id\": \"MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=\",\n          \"number\": 1,\n          \"updated_at\": \"2018-01-26T18:22:20Z\",\n          \"url\": \"https://api.github.com/teams/2403582/discussions/1/comments/1\",\n          \"reactions\": {\n            \"url\": \"https://api.github.com/teams/2403582/discussions/1/reactions\",\n            \"total_count\": 5,\n            \"+1\": 3,\n            \"-1\": 1,\n            \"laugh\": 0,\n            \"confused\": 0,\n            \"heart\": 1,\n            \"hooray\": 0,\n            \"eyes\": 1,\n            \"rocket\": 1\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamDiscussionComment

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 TeamDiscussionComment
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestTeamFull_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1,\n          \"node_id\": \"MDQ6VGVhbTE=\",\n          \"url\": \"https://api.github.com/teams/1\",\n          \"html_url\": \"https://github.com/orgs/github/teams/justice-league\",\n          \"name\": \"Justice League\",\n          \"slug\": \"justice-league\",\n          \"description\": \"A great team.\",\n          \"privacy\": \"closed\",\n          \"permission\": \"admin\",\n          \"members_url\": \"https://api.github.com/teams/1/members{/member}\",\n          \"repositories_url\": \"https://api.github.com/teams/1/repos\",\n          \"parent\": null,\n          \"members_count\": 3,\n          \"repos_count\": 10,\n          \"created_at\": \"2017-07-14T16:53:42Z\",\n          \"updated_at\": \"2017-08-17T12:37:15Z\",\n          \"organization\": {\n            \"login\": \"github\",\n            \"id\": 1,\n            \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE=\",\n            \"url\": \"https://api.github.com/orgs/github\",\n            \"repos_url\": \"https://api.github.com/orgs/github/repos\",\n            \"events_url\": \"https://api.github.com/orgs/github/events\",\n            \"hooks_url\": \"https://api.github.com/orgs/github/hooks\",\n            \"issues_url\": \"https://api.github.com/orgs/github/issues\",\n            \"members_url\": \"https://api.github.com/orgs/github/members{/member}\",\n            \"public_members_url\": \"https://api.github.com/orgs/github/public_members{/member}\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"description\": \"A great organization\",\n            \"name\": \"github\",\n            \"company\": \"GitHub\",\n            \"blog\": \"https://github.com/blog\",\n            \"location\": \"San Francisco\",\n            \"email\": \"octocat@github.com\",\n            \"is_verified\": true,\n            \"has_organization_projects\": true,\n            \"has_repository_projects\": true,\n            \"public_repos\": 2,\n            \"public_gists\": 1,\n            \"followers\": 20,\n            \"following\": 0,\n            \"html_url\": \"https://github.com/octocat\",\n            \"created_at\": \"2008-01-14T04:33:35Z\",\n            \"updated_at\": \"2017-08-17T12:37:15Z\",\n            \"type\": \"Organization\"\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamFull

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 TeamFull
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestTeamFullPrivacy_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"closed\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamFullPrivacy

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 TeamFullPrivacy
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestTeamMembership_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"url\": \"https://api.github.com/teams/1/memberships/octocat\",\n          \"role\": \"maintainer\",\n          \"state\": \"active\"\n        }"},
		{Input: "{\n          \"url\": \"https://api.github.com/teams/1/memberships/octocat\",\n          \"role\": \"member\",\n          \"state\": \"pending\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamMembership

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 TeamMembership
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestTeamMembershipRole_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"member\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamMembershipRole

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 TeamMembershipRole
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestTeamProject_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"owner_url\": \"https://api.github.com/orgs/octocat\",\n          \"url\": \"https://api.github.com/projects/1002605\",\n          \"html_url\": \"https://github.com/orgs/api-playground/projects/1\",\n          \"columns_url\": \"https://api.github.com/projects/1002605/columns\",\n          \"id\": 1002605,\n          \"node_id\": \"MDc6UHJvamVjdDEwMDI2MDU=\",\n          \"name\": \"Organization Roadmap\",\n          \"body\": \"High-level roadmap for the upcoming year.\",\n          \"number\": 1,\n          \"state\": \"open\",\n          \"creator\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"created_at\": \"2011-04-11T20:09:31Z\",\n          \"updated_at\": \"2014-03-04T18:58:10Z\",\n          \"organization_permission\": \"write\",\n          \"private\": false,\n          \"permissions\": {\n            \"read\": true,\n            \"write\": true,\n            \"admin\": false\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamProject

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 TeamProject
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestTeamRepository_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 1296269,\n          \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n          \"name\": \"Hello-World\",\n          \"full_name\": \"octocat/Hello-World\",\n          \"owner\": {\n            \"login\": \"octocat\",\n            \"id\": 1,\n            \"node_id\": \"MDQ6VXNlcjE=\",\n            \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n            \"gravatar_id\": \"\",\n            \"url\": \"https://api.github.com/users/octocat\",\n            \"html_url\": \"https://github.com/octocat\",\n            \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n            \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n            \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n            \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n            \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n            \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n            \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n            \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n            \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n            \"type\": \"User\",\n            \"site_admin\": false\n          },\n          \"private\": false,\n          \"html_url\": \"https://github.com/octocat/Hello-World\",\n          \"description\": \"This your first repo!\",\n          \"fork\": false,\n          \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n          \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n          \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n          \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n          \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n          \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n          \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n          \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n          \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n          \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n          \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n          \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n          \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n          \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n          \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n          \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n          \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n          \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n          \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n          \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n          \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n          \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n          \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n          \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n          \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n          \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n          \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n          \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n          \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n          \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n          \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n          \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n          \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n          \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n          \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n          \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n          \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n          \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n          \"clone_url\": \"https://github.com/octocat/Hello-World.git\",\n          \"mirror_url\": \"git:git.example.com/octocat/Hello-World\",\n          \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks\",\n          \"svn_url\": \"https://svn.github.com/octocat/Hello-World\",\n          \"homepage\": \"https://github.com\",\n          \"language\": null,\n          \"forks_count\": 9,\n          \"stargazers_count\": 80,\n          \"watchers_count\": 80,\n          \"size\": 108,\n          \"default_branch\": \"master\",\n          \"open_issues_count\": 0,\n          \"is_template\": false,\n          \"topics\": [\n            \"octocat\",\n            \"atom\",\n            \"electron\",\n            \"api\"\n          ],\n          \"has_issues\": true,\n          \"has_projects\": true,\n          \"has_wiki\": true,\n          \"has_pages\": false,\n          \"has_downloads\": true,\n          \"archived\": false,\n          \"disabled\": false,\n          \"visibility\": \"public\",\n          \"pushed_at\": \"2011-01-26T19:06:43Z\",\n          \"created_at\": \"2011-01-26T19:01:12Z\",\n          \"updated_at\": \"2011-01-26T19:14:43Z\",\n          \"permissions\": {\n            \"admin\": false,\n            \"push\": false,\n            \"pull\": true\n          },\n          \"allow_rebase_merge\": true,\n          \"template_repository\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World-Template\",\n            \"full_name\": \"octocat/Hello-World-Template\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World-Template\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World-Template\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World-Template.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World-Template.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}\",\n            \"clone_url\": \"https://github.com/octocat/Hello-World-Template.git\",\n            \"mirror_url\": \"git:git.example.com/octocat/Hello-World-Template\",\n            \"hooks_url\": \"https://api.github.com/repos/octocat/Hello-World-Template/hooks\",\n            \"svn_url\": \"https://svn.github.com/octocat/Hello-World-Template\",\n            \"homepage\": \"https://github.com\",\n            \"language\": null,\n            \"forks\": 9,\n            \"forks_count\": 9,\n            \"stargazers_count\": 80,\n            \"watchers_count\": 80,\n            \"watchers\": 80,\n            \"size\": 108,\n            \"default_branch\": \"master\",\n            \"open_issues\": 0,\n            \"open_issues_count\": 0,\n            \"is_template\": true,\n            \"license\": {\n              \"key\": \"mit\",\n              \"name\": \"MIT License\",\n              \"url\": \"https://api.github.com/licenses/mit\",\n              \"spdx_id\": \"MIT\",\n              \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n              \"html_url\": \"https://api.github.com/licenses/mit\"\n            },\n            \"topics\": [\n              \"octocat\",\n              \"atom\",\n              \"electron\",\n              \"api\"\n            ],\n            \"has_issues\": true,\n            \"has_projects\": true,\n            \"has_wiki\": true,\n            \"has_pages\": false,\n            \"has_downloads\": true,\n            \"archived\": false,\n            \"disabled\": false,\n            \"visibility\": \"public\",\n            \"pushed_at\": \"2011-01-26T19:06:43Z\",\n            \"created_at\": \"2011-01-26T19:01:12Z\",\n            \"updated_at\": \"2011-01-26T19:14:43Z\",\n            \"permissions\": {\n              \"admin\": false,\n              \"push\": false,\n              \"pull\": true\n            },\n            \"allow_rebase_merge\": true,\n            \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n            \"allow_squash_merge\": true,\n            \"allow_auto_merge\": false,\n            \"delete_branch_on_merge\": true,\n            \"allow_merge_commit\": true,\n            \"subscribers_count\": 42,\n            \"network_count\": 0\n          },\n          \"temp_clone_token\": \"ABTLWHOULUVAXGTRYU7OC2876QJ2O\",\n          \"allow_squash_merge\": true,\n          \"allow_auto_merge\": false,\n          \"delete_branch_on_merge\": true,\n          \"allow_merge_commit\": true,\n          \"subscribers_count\": 42,\n          \"network_count\": 0,\n          \"license\": {\n            \"key\": \"mit\",\n            \"name\": \"MIT License\",\n            \"url\": \"https://api.github.com/licenses/mit\",\n            \"spdx_id\": \"MIT\",\n            \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n            \"html_url\": \"https://api.github.com/licenses/mit\"\n          },\n          \"forks\": 1,\n          \"open_issues\": 1,\n          \"watchers\": 1\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamRepository

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 TeamRepository
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestTeamsAddOrUpdateProjectPermissionsInOrgForbidden_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"message\": \"Must have admin rights to Repository.\",\n                      \"documentation_url\": \"https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions\"\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamsAddOrUpdateProjectPermissionsInOrgForbidden

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 TeamsAddOrUpdateProjectPermissionsInOrgForbidden
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestTeamsAddOrUpdateProjectPermissionsLegacyForbidden_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"message\": \"Must have admin rights to Repository.\",\n                      \"documentation_url\": \"https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions\"\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ TeamsAddOrUpdateProjectPermissionsLegacyForbidden

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 TeamsAddOrUpdateProjectPermissionsLegacyForbidden
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestThread_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": \"1\",\n          \"repository\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World\",\n            \"full_name\": \"octocat/Hello-World\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n            \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\n          },\n          \"subject\": {\n            \"title\": \"Greetings\",\n            \"url\": \"https://api.github.com/repos/octokit/octokit.rb/issues/123\",\n            \"latest_comment_url\": \"https://api.github.com/repos/octokit/octokit.rb/issues/comments/123\",\n            \"type\": \"Issue\"\n          },\n          \"reason\": \"subscribed\",\n          \"unread\": true,\n          \"updated_at\": \"2014-11-07T22:01:45Z\",\n          \"last_read_at\": \"2014-11-07T22:01:45Z\",\n          \"url\": \"https://api.github.com/notifications/threads/1\",\n          \"subscription_url\": \"https://api.github.com/notifications/threads/1/subscription\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Thread

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Thread
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestThreadSubscription_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"subscribed\": true,\n          \"ignored\": false,\n          \"reason\": null,\n          \"created_at\": \"2012-10-06T21:34:12Z\",\n          \"url\": \"https://api.github.com/notifications/threads/1/subscription\",\n          \"thread_url\": \"https://api.github.com/notifications/threads/1\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ThreadSubscription

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ThreadSubscription
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestTopic_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"names\": [\n            \"octocat\",\n            \"atom\",\n            \"electron\",\n            \"api\"\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Topic

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Topic
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestUsersAddEmailForAuthenticatedReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"emails\": [\n                        \"octocat@github.com\",\n                        \"mona@github.com\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ UsersAddEmailForAuthenticatedReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 UsersAddEmailForAuthenticatedReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestUsersDeleteEmailForAuthenticatedReq0_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n                      \"emails\": [\n                        \"octocat@github.com\",\n                        \"mona@github.com\"\n                      ]\n                    }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ UsersDeleteEmailForAuthenticatedReq0

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 UsersDeleteEmailForAuthenticatedReq0
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestUsersGetAuthenticatedOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"login\": \"octocat\",\n          \"id\": 1,\n          \"node_id\": \"MDQ6VXNlcjE=\",\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n          \"gravatar_id\": \"\",\n          \"url\": \"https://api.github.com/users/octocat\",\n          \"html_url\": \"https://github.com/octocat\",\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n          \"type\": \"User\",\n          \"site_admin\": false,\n          \"name\": \"monalisa octocat\",\n          \"company\": \"GitHub\",\n          \"blog\": \"https://github.com/blog\",\n          \"location\": \"San Francisco\",\n          \"email\": \"octocat@github.com\",\n          \"hireable\": false,\n          \"bio\": \"There once was...\",\n          \"twitter_username\": \"monatheoctocat\",\n          \"public_repos\": 2,\n          \"public_gists\": 1,\n          \"followers\": 20,\n          \"following\": 0,\n          \"created_at\": \"2008-01-14T04:33:35Z\",\n          \"updated_at\": \"2008-01-14T04:33:35Z\"\n        }"},
		{Input: "{\n          \"login\": \"octocat\",\n          \"id\": 1,\n          \"node_id\": \"MDQ6VXNlcjE=\",\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n          \"gravatar_id\": \"\",\n          \"url\": \"https://api.github.com/users/octocat\",\n          \"html_url\": \"https://github.com/octocat\",\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n          \"type\": \"User\",\n          \"site_admin\": false,\n          \"name\": \"monalisa octocat\",\n          \"company\": \"GitHub\",\n          \"blog\": \"https://github.com/blog\",\n          \"location\": \"San Francisco\",\n          \"email\": \"octocat@github.com\",\n          \"hireable\": false,\n          \"bio\": \"There once was...\",\n          \"twitter_username\": \"monatheoctocat\",\n          \"public_repos\": 2,\n          \"public_gists\": 1,\n          \"followers\": 20,\n          \"following\": 0,\n          \"created_at\": \"2008-01-14T04:33:35Z\",\n          \"updated_at\": \"2008-01-14T04:33:35Z\",\n          \"private_gists\": 81,\n          \"total_private_repos\": 100,\n          \"owned_private_repos\": 100,\n          \"disk_usage\": 10000,\n          \"collaborators\": 8,\n          \"two_factor_authentication\": true,\n          \"plan\": {\n            \"name\": \"Medium\",\n            \"space\": 400,\n            \"private_repos\": 20,\n            \"collaborators\": 0\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ UsersGetAuthenticatedOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 UsersGetAuthenticatedOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestUsersGetByUsernameOK_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"login\": \"octocat\",\n          \"id\": 1,\n          \"node_id\": \"MDQ6VXNlcjE=\",\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n          \"gravatar_id\": \"\",\n          \"url\": \"https://api.github.com/users/octocat\",\n          \"html_url\": \"https://github.com/octocat\",\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n          \"type\": \"User\",\n          \"site_admin\": false,\n          \"name\": \"monalisa octocat\",\n          \"company\": \"GitHub\",\n          \"blog\": \"https://github.com/blog\",\n          \"location\": \"San Francisco\",\n          \"email\": \"octocat@github.com\",\n          \"hireable\": false,\n          \"bio\": \"There once was...\",\n          \"twitter_username\": \"monatheoctocat\",\n          \"public_repos\": 2,\n          \"public_gists\": 1,\n          \"followers\": 20,\n          \"following\": 0,\n          \"created_at\": \"2008-01-14T04:33:35Z\",\n          \"updated_at\": \"2008-01-14T04:33:35Z\"\n        }"},
		{Input: "{\n          \"login\": \"octocat\",\n          \"id\": 1,\n          \"node_id\": \"MDQ6VXNlcjE=\",\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n          \"gravatar_id\": \"\",\n          \"url\": \"https://api.github.com/users/octocat\",\n          \"html_url\": \"https://github.com/octocat\",\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n          \"type\": \"User\",\n          \"site_admin\": false,\n          \"name\": \"monalisa octocat\",\n          \"company\": \"GitHub\",\n          \"blog\": \"https://github.com/blog\",\n          \"location\": \"San Francisco\",\n          \"email\": \"octocat@github.com\",\n          \"hireable\": false,\n          \"bio\": \"There once was...\",\n          \"twitter_username\": \"monatheoctocat\",\n          \"public_repos\": 2,\n          \"public_gists\": 1,\n          \"followers\": 20,\n          \"following\": 0,\n          \"created_at\": \"2008-01-14T04:33:35Z\",\n          \"updated_at\": \"2008-01-14T04:33:35Z\",\n          \"plan\": {\n            \"name\": \"pro\",\n            \"space\": 976562499,\n            \"collaborators\": 0,\n            \"private_repos\": 9999\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ UsersGetByUsernameOK

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 UsersGetByUsernameOK
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestViewTraffic_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"count\": 14850,\n          \"uniques\": 3782,\n          \"views\": [\n            {\n              \"timestamp\": \"2016-10-10T00:00:00Z\",\n              \"count\": 440,\n              \"uniques\": 143\n            },\n            {\n              \"timestamp\": \"2016-10-11T00:00:00Z\",\n              \"count\": 1308,\n              \"uniques\": 414\n            },\n            {\n              \"timestamp\": \"2016-10-12T00:00:00Z\",\n              \"count\": 1486,\n              \"uniques\": 452\n            },\n            {\n              \"timestamp\": \"2016-10-13T00:00:00Z\",\n              \"count\": 1170,\n              \"uniques\": 401\n            },\n            {\n              \"timestamp\": \"2016-10-14T00:00:00Z\",\n              \"count\": 868,\n              \"uniques\": 266\n            },\n            {\n              \"timestamp\": \"2016-10-15T00:00:00Z\",\n              \"count\": 495,\n              \"uniques\": 157\n            },\n            {\n              \"timestamp\": \"2016-10-16T00:00:00Z\",\n              \"count\": 524,\n              \"uniques\": 175\n            },\n            {\n              \"timestamp\": \"2016-10-17T00:00:00Z\",\n              \"count\": 1263,\n              \"uniques\": 412\n            },\n            {\n              \"timestamp\": \"2016-10-18T00:00:00Z\",\n              \"count\": 1402,\n              \"uniques\": 417\n            },\n            {\n              \"timestamp\": \"2016-10-19T00:00:00Z\",\n              \"count\": 1394,\n              \"uniques\": 424\n            },\n            {\n              \"timestamp\": \"2016-10-20T00:00:00Z\",\n              \"count\": 1492,\n              \"uniques\": 448\n            },\n            {\n              \"timestamp\": \"2016-10-21T00:00:00Z\",\n              \"count\": 1153,\n              \"uniques\": 332\n            },\n            {\n              \"timestamp\": \"2016-10-22T00:00:00Z\",\n              \"count\": 566,\n              \"uniques\": 168\n            },\n            {\n              \"timestamp\": \"2016-10-23T00:00:00Z\",\n              \"count\": 675,\n              \"uniques\": 184\n            },\n            {\n              \"timestamp\": \"2016-10-24T00:00:00Z\",\n              \"count\": 614,\n              \"uniques\": 237\n            }\n          ]\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ ViewTraffic

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 ViewTraffic
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestWebhookConfig_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"content_type\": \"json\",\n          \"insecure_ssl\": \"0\",\n          \"secret\": \"********\",\n          \"url\": \"https://example.com/webhook\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ WebhookConfig

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 WebhookConfig
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestWorkflow_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 161335,\n          \"node_id\": \"MDg6V29ya2Zsb3cxNjEzMzU=\",\n          \"name\": \"CI\",\n          \"path\": \".github/workflows/blank.yaml\",\n          \"state\": \"active\",\n          \"created_at\": \"2020-01-08T23:48:37.000-08:00\",\n          \"updated_at\": \"2020-01-08T23:50:21.000-08:00\",\n          \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335\",\n          \"html_url\": \"https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335\",\n          \"badge_url\": \"https://github.com/octo-org/octo-repo/workflows/CI/badge.svg\"\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Workflow

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 Workflow
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestWorkflowRun_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"id\": 30433642,\n          \"name\": \"Build\",\n          \"node_id\": \"MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==\",\n          \"check_suite_id\": 42,\n          \"check_suite_node_id\": \"MDEwOkNoZWNrU3VpdGU0Mg==\",\n          \"head_branch\": \"master\",\n          \"head_sha\": \"acb5820ced9479c074f688cc328bf03f341a511d\",\n          \"run_number\": 562,\n          \"event\": \"push\",\n          \"status\": \"queued\",\n          \"conclusion\": null,\n          \"workflow_id\": 159038,\n          \"url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642\",\n          \"html_url\": \"https://github.com/octo-org/octo-repo/actions/runs/30433642\",\n          \"pull_requests\": [\n\n          ],\n          \"created_at\": \"2020-01-22T19:33:08Z\",\n          \"updated_at\": \"2020-01-22T19:33:08Z\",\n          \"jobs_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs\",\n          \"logs_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs\",\n          \"check_suite_url\": \"https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374\",\n          \"artifacts_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts\",\n          \"cancel_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel\",\n          \"rerun_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun\",\n          \"workflow_url\": \"https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038\",\n          \"head_commit\": {\n            \"id\": \"acb5820ced9479c074f688cc328bf03f341a511d\",\n            \"tree_id\": \"d23f6eedb1e1b9610bbc754ddb5197bfe7271223\",\n            \"message\": \"Create linter.yaml\",\n            \"timestamp\": \"2020-01-22T19:33:05Z\",\n            \"author\": {\n              \"name\": \"Octo Cat\",\n              \"email\": \"octocat@github.com\"\n            },\n            \"committer\": {\n              \"name\": \"GitHub\",\n              \"email\": \"noreply@github.com\"\n            }\n          },\n          \"repository\": {\n            \"id\": 1296269,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMjk2MjY5\",\n            \"name\": \"Hello-World\",\n            \"full_name\": \"octocat/Hello-World\",\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"private\": false,\n            \"html_url\": \"https://github.com/octocat/Hello-World\",\n            \"description\": \"This your first repo!\",\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octocat/Hello-World\",\n            \"archive_url\": \"https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}\",\n            \"assignees_url\": \"https://api.github.com/repos/octocat/Hello-World/assignees{/user}\",\n            \"blobs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}\",\n            \"branches_url\": \"https://api.github.com/repos/octocat/Hello-World/branches{/branch}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}\",\n            \"comments_url\": \"https://api.github.com/repos/octocat/Hello-World/comments{/number}\",\n            \"commits_url\": \"https://api.github.com/repos/octocat/Hello-World/commits{/sha}\",\n            \"compare_url\": \"https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}\",\n            \"contents_url\": \"https://api.github.com/repos/octocat/Hello-World/contents/{+path}\",\n            \"contributors_url\": \"https://api.github.com/repos/octocat/Hello-World/contributors\",\n            \"deployments_url\": \"https://api.github.com/repos/octocat/Hello-World/deployments\",\n            \"downloads_url\": \"https://api.github.com/repos/octocat/Hello-World/downloads\",\n            \"events_url\": \"https://api.github.com/repos/octocat/Hello-World/events\",\n            \"forks_url\": \"https://api.github.com/repos/octocat/Hello-World/forks\",\n            \"git_commits_url\": \"https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}\",\n            \"git_url\": \"git:github.com/octocat/Hello-World.git\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}\",\n            \"issue_events_url\": \"https://api.github.com/repos/octocat/Hello-World/issues/events{/number}\",\n            \"issues_url\": \"https://api.github.com/repos/octocat/Hello-World/issues{/number}\",\n            \"keys_url\": \"https://api.github.com/repos/octocat/Hello-World/keys{/key_id}\",\n            \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/labels{/name}\",\n            \"languages_url\": \"https://api.github.com/repos/octocat/Hello-World/languages\",\n            \"merges_url\": \"https://api.github.com/repos/octocat/Hello-World/merges\",\n            \"milestones_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}\",\n            \"pulls_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls{/number}\",\n            \"releases_url\": \"https://api.github.com/repos/octocat/Hello-World/releases{/id}\",\n            \"ssh_url\": \"git@github.com:octocat/Hello-World.git\",\n            \"stargazers_url\": \"https://api.github.com/repos/octocat/Hello-World/stargazers\",\n            \"statuses_url\": \"https://api.github.com/repos/octocat/Hello-World/statuses/{sha}\",\n            \"subscribers_url\": \"https://api.github.com/repos/octocat/Hello-World/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octocat/Hello-World/subscription\",\n            \"tags_url\": \"https://api.github.com/repos/octocat/Hello-World/tags\",\n            \"teams_url\": \"https://api.github.com/repos/octocat/Hello-World/teams\",\n            \"trees_url\": \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\",\n            \"hooks_url\": \"http://api.github.com/repos/octocat/Hello-World/hooks\"\n          },\n          \"head_repository\": {\n            \"id\": 217723378,\n            \"node_id\": \"MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=\",\n            \"name\": \"octo-repo\",\n            \"full_name\": \"octo-org/octo-repo\",\n            \"private\": true,\n            \"owner\": {\n              \"login\": \"octocat\",\n              \"id\": 1,\n              \"node_id\": \"MDQ6VXNlcjE=\",\n              \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n              \"gravatar_id\": \"\",\n              \"url\": \"https://api.github.com/users/octocat\",\n              \"html_url\": \"https://github.com/octocat\",\n              \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n              \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n              \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n              \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n              \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n              \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n              \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n              \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n              \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n              \"type\": \"User\",\n              \"site_admin\": false\n            },\n            \"html_url\": \"https://github.com/octo-org/octo-repo\",\n            \"description\": null,\n            \"fork\": false,\n            \"url\": \"https://api.github.com/repos/octo-org/octo-repo\",\n            \"forks_url\": \"https://api.github.com/repos/octo-org/octo-repo/forks\",\n            \"keys_url\": \"https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}\",\n            \"collaborators_url\": \"https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}\",\n            \"teams_url\": \"https://api.github.com/repos/octo-org/octo-repo/teams\",\n            \"hooks_url\": \"https://api.github.com/repos/octo-org/octo-repo/hooks\",\n            \"issue_events_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}\",\n            \"events_url\": \"https://api.github.com/repos/octo-org/octo-repo/events\",\n            \"assignees_url\": \"https://api.github.com/repos/octo-org/octo-repo/assignees{/user}\",\n            \"branches_url\": \"https://api.github.com/repos/octo-org/octo-repo/branches{/branch}\",\n            \"tags_url\": \"https://api.github.com/repos/octo-org/octo-repo/tags\",\n            \"blobs_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}\",\n            \"git_tags_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}\",\n            \"git_refs_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}\",\n            \"trees_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}\",\n            \"statuses_url\": \"https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}\",\n            \"languages_url\": \"https://api.github.com/repos/octo-org/octo-repo/languages\",\n            \"stargazers_url\": \"https://api.github.com/repos/octo-org/octo-repo/stargazers\",\n            \"contributors_url\": \"https://api.github.com/repos/octo-org/octo-repo/contributors\",\n            \"subscribers_url\": \"https://api.github.com/repos/octo-org/octo-repo/subscribers\",\n            \"subscription_url\": \"https://api.github.com/repos/octo-org/octo-repo/subscription\",\n            \"commits_url\": \"https://api.github.com/repos/octo-org/octo-repo/commits{/sha}\",\n            \"git_commits_url\": \"https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}\",\n            \"comments_url\": \"https://api.github.com/repos/octo-org/octo-repo/comments{/number}\",\n            \"issue_comment_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}\",\n            \"contents_url\": \"https://api.github.com/repos/octo-org/octo-repo/contents/{+path}\",\n            \"compare_url\": \"https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}\",\n            \"merges_url\": \"https://api.github.com/repos/octo-org/octo-repo/merges\",\n            \"archive_url\": \"https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}\",\n            \"downloads_url\": \"https://api.github.com/repos/octo-org/octo-repo/downloads\",\n            \"issues_url\": \"https://api.github.com/repos/octo-org/octo-repo/issues{/number}\",\n            \"pulls_url\": \"https://api.github.com/repos/octo-org/octo-repo/pulls{/number}\",\n            \"milestones_url\": \"https://api.github.com/repos/octo-org/octo-repo/milestones{/number}\",\n            \"notifications_url\": \"https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}\",\n            \"labels_url\": \"https://api.github.com/repos/octo-org/octo-repo/labels{/name}\",\n            \"releases_url\": \"https://api.github.com/repos/octo-org/octo-repo/releases{/id}\",\n            \"deployments_url\": \"https://api.github.com/repos/octo-org/octo-repo/deployments\"\n          }\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ WorkflowRun

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 WorkflowRun
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestWorkflowRunUsage_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\n          \"billable\": {\n            \"UBUNTU\": {\n              \"total_ms\": 180000,\n              \"jobs\": 1\n            },\n            \"MACOS\": {\n              \"total_ms\": 240000,\n              \"jobs\": 4\n            },\n            \"WINDOWS\": {\n              \"total_ms\": 300000,\n              \"jobs\": 2\n            }\n          },\n          \"run_duration_ms\": 500000\n        }"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ WorkflowRunUsage

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 WorkflowRunUsage
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}

func TestWorkflowState_JSON(t *testing.T) {
	t.Parallel()

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"active\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ WorkflowState

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				var validateErr *validate.Error
				if errors.As(err, &validateErr) {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Writer{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Buf), "Encoded: %s", e.Buf)

			var typ2 WorkflowState
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Buf)))
		})
	}
}
