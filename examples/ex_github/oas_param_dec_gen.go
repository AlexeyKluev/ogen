// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func decodeActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams(r *http.Request) (ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams, error) {
	var params ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsAddSelectedRepoToOrgSecretParams(r *http.Request) (ActionsAddSelectedRepoToOrgSecretParams, error) {
	var params ActionsAddSelectedRepoToOrgSecretParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsAddSelfHostedRunnerToGroupForOrgParams(r *http.Request) (ActionsAddSelfHostedRunnerToGroupForOrgParams, error) {
	var params ActionsAddSelfHostedRunnerToGroupForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsApproveWorkflowRunParams(r *http.Request) (ActionsApproveWorkflowRunParams, error) {
	var params ActionsApproveWorkflowRunParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsCancelWorkflowRunParams(r *http.Request) (ActionsCancelWorkflowRunParams, error) {
	var params ActionsCancelWorkflowRunParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsCreateOrUpdateEnvironmentSecretParams(r *http.Request) (ActionsCreateOrUpdateEnvironmentSecretParams, error) {
	var params ActionsCreateOrUpdateEnvironmentSecretParams
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "environment_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "environment_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'environment_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "environment_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.EnvironmentName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsCreateOrUpdateOrgSecretParams(r *http.Request) (ActionsCreateOrUpdateOrgSecretParams, error) {
	var params ActionsCreateOrUpdateOrgSecretParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsCreateOrUpdateRepoSecretParams(r *http.Request) (ActionsCreateOrUpdateRepoSecretParams, error) {
	var params ActionsCreateOrUpdateRepoSecretParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsCreateRegistrationTokenForOrgParams(r *http.Request) (ActionsCreateRegistrationTokenForOrgParams, error) {
	var params ActionsCreateRegistrationTokenForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsCreateRegistrationTokenForRepoParams(r *http.Request) (ActionsCreateRegistrationTokenForRepoParams, error) {
	var params ActionsCreateRegistrationTokenForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsCreateRemoveTokenForOrgParams(r *http.Request) (ActionsCreateRemoveTokenForOrgParams, error) {
	var params ActionsCreateRemoveTokenForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsCreateRemoveTokenForRepoParams(r *http.Request) (ActionsCreateRemoveTokenForRepoParams, error) {
	var params ActionsCreateRemoveTokenForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsCreateSelfHostedRunnerGroupForOrgParams(r *http.Request) (ActionsCreateSelfHostedRunnerGroupForOrgParams, error) {
	var params ActionsCreateSelfHostedRunnerGroupForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDeleteArtifactParams(r *http.Request) (ActionsDeleteArtifactParams, error) {
	var params ActionsDeleteArtifactParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "artifact_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "artifact_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'artifact_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "artifact_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ArtifactID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDeleteEnvironmentSecretParams(r *http.Request) (ActionsDeleteEnvironmentSecretParams, error) {
	var params ActionsDeleteEnvironmentSecretParams
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "environment_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "environment_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'environment_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "environment_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.EnvironmentName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDeleteOrgSecretParams(r *http.Request) (ActionsDeleteOrgSecretParams, error) {
	var params ActionsDeleteOrgSecretParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDeleteRepoSecretParams(r *http.Request) (ActionsDeleteRepoSecretParams, error) {
	var params ActionsDeleteRepoSecretParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDeleteSelfHostedRunnerFromOrgParams(r *http.Request) (ActionsDeleteSelfHostedRunnerFromOrgParams, error) {
	var params ActionsDeleteSelfHostedRunnerFromOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDeleteSelfHostedRunnerFromRepoParams(r *http.Request) (ActionsDeleteSelfHostedRunnerFromRepoParams, error) {
	var params ActionsDeleteSelfHostedRunnerFromRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDeleteSelfHostedRunnerGroupFromOrgParams(r *http.Request) (ActionsDeleteSelfHostedRunnerGroupFromOrgParams, error) {
	var params ActionsDeleteSelfHostedRunnerGroupFromOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDeleteWorkflowRunParams(r *http.Request) (ActionsDeleteWorkflowRunParams, error) {
	var params ActionsDeleteWorkflowRunParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDeleteWorkflowRunLogsParams(r *http.Request) (ActionsDeleteWorkflowRunLogsParams, error) {
	var params ActionsDeleteWorkflowRunLogsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDisableSelectedRepositoryGithubActionsOrganizationParams(r *http.Request) (ActionsDisableSelectedRepositoryGithubActionsOrganizationParams, error) {
	var params ActionsDisableSelectedRepositoryGithubActionsOrganizationParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDownloadArtifactParams(r *http.Request) (ActionsDownloadArtifactParams, error) {
	var params ActionsDownloadArtifactParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "artifact_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "artifact_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'artifact_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "artifact_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ArtifactID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "archive_format" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "archive_format")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'archive_format' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "archive_format",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ArchiveFormat = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDownloadJobLogsForWorkflowRunParams(r *http.Request) (ActionsDownloadJobLogsForWorkflowRunParams, error) {
	var params ActionsDownloadJobLogsForWorkflowRunParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "job_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "job_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'job_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "job_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.JobID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsDownloadWorkflowRunLogsParams(r *http.Request) (ActionsDownloadWorkflowRunLogsParams, error) {
	var params ActionsDownloadWorkflowRunLogsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsEnableSelectedRepositoryGithubActionsOrganizationParams(r *http.Request) (ActionsEnableSelectedRepositoryGithubActionsOrganizationParams, error) {
	var params ActionsEnableSelectedRepositoryGithubActionsOrganizationParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetAllowedActionsOrganizationParams(r *http.Request) (ActionsGetAllowedActionsOrganizationParams, error) {
	var params ActionsGetAllowedActionsOrganizationParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetAllowedActionsRepositoryParams(r *http.Request) (ActionsGetAllowedActionsRepositoryParams, error) {
	var params ActionsGetAllowedActionsRepositoryParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetArtifactParams(r *http.Request) (ActionsGetArtifactParams, error) {
	var params ActionsGetArtifactParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "artifact_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "artifact_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'artifact_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "artifact_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ArtifactID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetEnvironmentPublicKeyParams(r *http.Request) (ActionsGetEnvironmentPublicKeyParams, error) {
	var params ActionsGetEnvironmentPublicKeyParams
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "environment_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "environment_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'environment_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "environment_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.EnvironmentName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetEnvironmentSecretParams(r *http.Request) (ActionsGetEnvironmentSecretParams, error) {
	var params ActionsGetEnvironmentSecretParams
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "environment_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "environment_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'environment_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "environment_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.EnvironmentName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetGithubActionsPermissionsOrganizationParams(r *http.Request) (ActionsGetGithubActionsPermissionsOrganizationParams, error) {
	var params ActionsGetGithubActionsPermissionsOrganizationParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetGithubActionsPermissionsRepositoryParams(r *http.Request) (ActionsGetGithubActionsPermissionsRepositoryParams, error) {
	var params ActionsGetGithubActionsPermissionsRepositoryParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetJobForWorkflowRunParams(r *http.Request) (ActionsGetJobForWorkflowRunParams, error) {
	var params ActionsGetJobForWorkflowRunParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "job_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "job_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'job_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "job_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.JobID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetOrgPublicKeyParams(r *http.Request) (ActionsGetOrgPublicKeyParams, error) {
	var params ActionsGetOrgPublicKeyParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetOrgSecretParams(r *http.Request) (ActionsGetOrgSecretParams, error) {
	var params ActionsGetOrgSecretParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetRepoPublicKeyParams(r *http.Request) (ActionsGetRepoPublicKeyParams, error) {
	var params ActionsGetRepoPublicKeyParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetRepoSecretParams(r *http.Request) (ActionsGetRepoSecretParams, error) {
	var params ActionsGetRepoSecretParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetReviewsForRunParams(r *http.Request) (ActionsGetReviewsForRunParams, error) {
	var params ActionsGetReviewsForRunParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetSelfHostedRunnerForOrgParams(r *http.Request) (ActionsGetSelfHostedRunnerForOrgParams, error) {
	var params ActionsGetSelfHostedRunnerForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetSelfHostedRunnerForRepoParams(r *http.Request) (ActionsGetSelfHostedRunnerForRepoParams, error) {
	var params ActionsGetSelfHostedRunnerForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetSelfHostedRunnerGroupForOrgParams(r *http.Request) (ActionsGetSelfHostedRunnerGroupForOrgParams, error) {
	var params ActionsGetSelfHostedRunnerGroupForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetWorkflowRunParams(r *http.Request) (ActionsGetWorkflowRunParams, error) {
	var params ActionsGetWorkflowRunParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsGetWorkflowRunUsageParams(r *http.Request) (ActionsGetWorkflowRunUsageParams, error) {
	var params ActionsGetWorkflowRunUsageParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListArtifactsForRepoParams(r *http.Request) (ActionsListArtifactsForRepoParams, error) {
	var params ActionsListArtifactsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListEnvironmentSecretsParams(r *http.Request) (ActionsListEnvironmentSecretsParams, error) {
	var params ActionsListEnvironmentSecretsParams
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "environment_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "environment_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'environment_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "environment_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.EnvironmentName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListJobsForWorkflowRunParams(r *http.Request) (ActionsListJobsForWorkflowRunParams, error) {
	var params ActionsListJobsForWorkflowRunParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "filter" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["filter"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Filter = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListOrgSecretsParams(r *http.Request) (ActionsListOrgSecretsParams, error) {
	var params ActionsListOrgSecretsParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams(r *http.Request) (ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams, error) {
	var params ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListRepoSecretsParams(r *http.Request) (ActionsListRepoSecretsParams, error) {
	var params ActionsListRepoSecretsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListRepoWorkflowsParams(r *http.Request) (ActionsListRepoWorkflowsParams, error) {
	var params ActionsListRepoWorkflowsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListRunnerApplicationsForOrgParams(r *http.Request) (ActionsListRunnerApplicationsForOrgParams, error) {
	var params ActionsListRunnerApplicationsForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListRunnerApplicationsForRepoParams(r *http.Request) (ActionsListRunnerApplicationsForRepoParams, error) {
	var params ActionsListRunnerApplicationsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListSelectedReposForOrgSecretParams(r *http.Request) (ActionsListSelectedReposForOrgSecretParams, error) {
	var params ActionsListSelectedReposForOrgSecretParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams(r *http.Request) (ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams, error) {
	var params ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListSelfHostedRunnerGroupsForOrgParams(r *http.Request) (ActionsListSelfHostedRunnerGroupsForOrgParams, error) {
	var params ActionsListSelfHostedRunnerGroupsForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListSelfHostedRunnersForOrgParams(r *http.Request) (ActionsListSelfHostedRunnersForOrgParams, error) {
	var params ActionsListSelfHostedRunnersForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListSelfHostedRunnersForRepoParams(r *http.Request) (ActionsListSelfHostedRunnersForRepoParams, error) {
	var params ActionsListSelfHostedRunnersForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListSelfHostedRunnersInGroupForOrgParams(r *http.Request) (ActionsListSelfHostedRunnersInGroupForOrgParams, error) {
	var params ActionsListSelfHostedRunnersInGroupForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListWorkflowRunArtifactsParams(r *http.Request) (ActionsListWorkflowRunArtifactsParams, error) {
	var params ActionsListWorkflowRunArtifactsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsListWorkflowRunsForRepoParams(r *http.Request) (ActionsListWorkflowRunsForRepoParams, error) {
	var params ActionsListWorkflowRunsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "actor" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["actor"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Actor = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["branch"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "event" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["event"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Event = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "status" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["status"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Status = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "created" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["created"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeTime()
		if err != nil {
			return err
		}

		params.Created = time.Time(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsReRunWorkflowParams(r *http.Request) (ActionsReRunWorkflowParams, error) {
	var params ActionsReRunWorkflowParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams(r *http.Request) (ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams, error) {
	var params ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsRemoveSelectedRepoFromOrgSecretParams(r *http.Request) (ActionsRemoveSelectedRepoFromOrgSecretParams, error) {
	var params ActionsRemoveSelectedRepoFromOrgSecretParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsRemoveSelfHostedRunnerFromGroupForOrgParams(r *http.Request) (ActionsRemoveSelfHostedRunnerFromGroupForOrgParams, error) {
	var params ActionsRemoveSelfHostedRunnerFromGroupForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsRetryWorkflowParams(r *http.Request) (ActionsRetryWorkflowParams, error) {
	var params ActionsRetryWorkflowParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsSetAllowedActionsOrganizationParams(r *http.Request) (ActionsSetAllowedActionsOrganizationParams, error) {
	var params ActionsSetAllowedActionsOrganizationParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsSetAllowedActionsRepositoryParams(r *http.Request) (ActionsSetAllowedActionsRepositoryParams, error) {
	var params ActionsSetAllowedActionsRepositoryParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsSetGithubActionsPermissionsOrganizationParams(r *http.Request) (ActionsSetGithubActionsPermissionsOrganizationParams, error) {
	var params ActionsSetGithubActionsPermissionsOrganizationParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsSetGithubActionsPermissionsRepositoryParams(r *http.Request) (ActionsSetGithubActionsPermissionsRepositoryParams, error) {
	var params ActionsSetGithubActionsPermissionsRepositoryParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams(r *http.Request) (ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams, error) {
	var params ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsSetSelectedReposForOrgSecretParams(r *http.Request) (ActionsSetSelectedReposForOrgSecretParams, error) {
	var params ActionsSetSelectedReposForOrgSecretParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "secret_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'secret_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "secret_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams(r *http.Request) (ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams, error) {
	var params ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsSetSelfHostedRunnersInGroupForOrgParams(r *http.Request) (ActionsSetSelfHostedRunnersInGroupForOrgParams, error) {
	var params ActionsSetSelfHostedRunnersInGroupForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActionsUpdateSelfHostedRunnerGroupForOrgParams(r *http.Request) (ActionsUpdateSelfHostedRunnerGroupForOrgParams, error) {
	var params ActionsUpdateSelfHostedRunnerGroupForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityCheckRepoIsStarredByAuthenticatedUserParams(r *http.Request) (ActivityCheckRepoIsStarredByAuthenticatedUserParams, error) {
	var params ActivityCheckRepoIsStarredByAuthenticatedUserParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityDeleteRepoSubscriptionParams(r *http.Request) (ActivityDeleteRepoSubscriptionParams, error) {
	var params ActivityDeleteRepoSubscriptionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityDeleteThreadSubscriptionParams(r *http.Request) (ActivityDeleteThreadSubscriptionParams, error) {
	var params ActivityDeleteThreadSubscriptionParams
	// Decode param "thread_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "thread_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'thread_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "thread_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ThreadID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityGetRepoSubscriptionParams(r *http.Request) (ActivityGetRepoSubscriptionParams, error) {
	var params ActivityGetRepoSubscriptionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityGetThreadParams(r *http.Request) (ActivityGetThreadParams, error) {
	var params ActivityGetThreadParams
	// Decode param "thread_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "thread_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'thread_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "thread_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ThreadID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityGetThreadSubscriptionForAuthenticatedUserParams(r *http.Request) (ActivityGetThreadSubscriptionForAuthenticatedUserParams, error) {
	var params ActivityGetThreadSubscriptionForAuthenticatedUserParams
	// Decode param "thread_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "thread_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'thread_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "thread_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ThreadID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListEventsForAuthenticatedUserParams(r *http.Request) (ActivityListEventsForAuthenticatedUserParams, error) {
	var params ActivityListEventsForAuthenticatedUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListOrgEventsForAuthenticatedUserParams(r *http.Request) (ActivityListOrgEventsForAuthenticatedUserParams, error) {
	var params ActivityListOrgEventsForAuthenticatedUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListPublicEventsParams(r *http.Request) (ActivityListPublicEventsParams, error) {
	var params ActivityListPublicEventsParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListPublicEventsForRepoNetworkParams(r *http.Request) (ActivityListPublicEventsForRepoNetworkParams, error) {
	var params ActivityListPublicEventsForRepoNetworkParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListPublicEventsForUserParams(r *http.Request) (ActivityListPublicEventsForUserParams, error) {
	var params ActivityListPublicEventsForUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListPublicOrgEventsParams(r *http.Request) (ActivityListPublicOrgEventsParams, error) {
	var params ActivityListPublicOrgEventsParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListReceivedEventsForUserParams(r *http.Request) (ActivityListReceivedEventsForUserParams, error) {
	var params ActivityListReceivedEventsForUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListReceivedPublicEventsForUserParams(r *http.Request) (ActivityListReceivedPublicEventsForUserParams, error) {
	var params ActivityListReceivedPublicEventsForUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListRepoEventsParams(r *http.Request) (ActivityListRepoEventsParams, error) {
	var params ActivityListRepoEventsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListRepoNotificationsForAuthenticatedUserParams(r *http.Request) (ActivityListRepoNotificationsForAuthenticatedUserParams, error) {
	var params ActivityListRepoNotificationsForAuthenticatedUserParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "all" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["all"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeBool()
		if err != nil {
			return err
		}

		params.All = bool(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "participating" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["participating"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeBool()
		if err != nil {
			return err
		}

		params.Participating = bool(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "since" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["since"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeTime()
		if err != nil {
			return err
		}

		params.Since = time.Time(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "before" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["before"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeTime()
		if err != nil {
			return err
		}

		params.Before = time.Time(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListReposStarredByAuthenticatedUserParams(r *http.Request) (ActivityListReposStarredByAuthenticatedUserParams, error) {
	var params ActivityListReposStarredByAuthenticatedUserParams
	// Decode param "sort" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["sort"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Sort = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "direction" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["direction"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Direction = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListReposWatchedByUserParams(r *http.Request) (ActivityListReposWatchedByUserParams, error) {
	var params ActivityListReposWatchedByUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListWatchedReposForAuthenticatedUserParams(r *http.Request) (ActivityListWatchedReposForAuthenticatedUserParams, error) {
	var params ActivityListWatchedReposForAuthenticatedUserParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityListWatchersForRepoParams(r *http.Request) (ActivityListWatchersForRepoParams, error) {
	var params ActivityListWatchersForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityMarkRepoNotificationsAsReadParams(r *http.Request) (ActivityMarkRepoNotificationsAsReadParams, error) {
	var params ActivityMarkRepoNotificationsAsReadParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityMarkThreadAsReadParams(r *http.Request) (ActivityMarkThreadAsReadParams, error) {
	var params ActivityMarkThreadAsReadParams
	// Decode param "thread_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "thread_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'thread_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "thread_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ThreadID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivitySetRepoSubscriptionParams(r *http.Request) (ActivitySetRepoSubscriptionParams, error) {
	var params ActivitySetRepoSubscriptionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivitySetThreadSubscriptionParams(r *http.Request) (ActivitySetThreadSubscriptionParams, error) {
	var params ActivitySetThreadSubscriptionParams
	// Decode param "thread_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "thread_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'thread_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "thread_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ThreadID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityStarRepoForAuthenticatedUserParams(r *http.Request) (ActivityStarRepoForAuthenticatedUserParams, error) {
	var params ActivityStarRepoForAuthenticatedUserParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeActivityUnstarRepoForAuthenticatedUserParams(r *http.Request) (ActivityUnstarRepoForAuthenticatedUserParams, error) {
	var params ActivityUnstarRepoForAuthenticatedUserParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsAddRepoToInstallationParams(r *http.Request) (AppsAddRepoToInstallationParams, error) {
	var params AppsAddRepoToInstallationParams
	// Decode param "installation_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "installation_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'installation_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "installation_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.InstallationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsDeleteInstallationParams(r *http.Request) (AppsDeleteInstallationParams, error) {
	var params AppsDeleteInstallationParams
	// Decode param "installation_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "installation_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'installation_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "installation_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.InstallationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsGetBySlugParams(r *http.Request) (AppsGetBySlugParams, error) {
	var params AppsGetBySlugParams
	// Decode param "app_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "app_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'app_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "app_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.AppSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsGetSubscriptionPlanForAccountParams(r *http.Request) (AppsGetSubscriptionPlanForAccountParams, error) {
	var params AppsGetSubscriptionPlanForAccountParams
	// Decode param "account_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "account_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'account_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "account_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AccountID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsGetSubscriptionPlanForAccountStubbedParams(r *http.Request) (AppsGetSubscriptionPlanForAccountStubbedParams, error) {
	var params AppsGetSubscriptionPlanForAccountStubbedParams
	// Decode param "account_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "account_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'account_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "account_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AccountID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsListAccountsForPlanStubbedParams(r *http.Request) (AppsListAccountsForPlanStubbedParams, error) {
	var params AppsListAccountsForPlanStubbedParams
	// Decode param "plan_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "plan_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'plan_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "plan_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PlanID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sort" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["sort"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Sort = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "direction" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["direction"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Direction = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsListInstallationReposForAuthenticatedUserParams(r *http.Request) (AppsListInstallationReposForAuthenticatedUserParams, error) {
	var params AppsListInstallationReposForAuthenticatedUserParams
	// Decode param "installation_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "installation_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'installation_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "installation_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.InstallationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsListPlansParams(r *http.Request) (AppsListPlansParams, error) {
	var params AppsListPlansParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsListPlansStubbedParams(r *http.Request) (AppsListPlansStubbedParams, error) {
	var params AppsListPlansStubbedParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsListReposAccessibleToInstallationParams(r *http.Request) (AppsListReposAccessibleToInstallationParams, error) {
	var params AppsListReposAccessibleToInstallationParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsListSubscriptionsForAuthenticatedUserParams(r *http.Request) (AppsListSubscriptionsForAuthenticatedUserParams, error) {
	var params AppsListSubscriptionsForAuthenticatedUserParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsListSubscriptionsForAuthenticatedUserStubbedParams(r *http.Request) (AppsListSubscriptionsForAuthenticatedUserStubbedParams, error) {
	var params AppsListSubscriptionsForAuthenticatedUserStubbedParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsRemoveRepoFromInstallationParams(r *http.Request) (AppsRemoveRepoFromInstallationParams, error) {
	var params AppsRemoveRepoFromInstallationParams
	// Decode param "installation_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "installation_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'installation_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "installation_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.InstallationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repository_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repository_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repository_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repository_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RepositoryID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsSuspendInstallationParams(r *http.Request) (AppsSuspendInstallationParams, error) {
	var params AppsSuspendInstallationParams
	// Decode param "installation_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "installation_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'installation_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "installation_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.InstallationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeAppsUnsuspendInstallationParams(r *http.Request) (AppsUnsuspendInstallationParams, error) {
	var params AppsUnsuspendInstallationParams
	// Decode param "installation_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "installation_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'installation_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "installation_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.InstallationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeBillingGetGithubActionsBillingGheParams(r *http.Request) (BillingGetGithubActionsBillingGheParams, error) {
	var params BillingGetGithubActionsBillingGheParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeBillingGetGithubActionsBillingOrgParams(r *http.Request) (BillingGetGithubActionsBillingOrgParams, error) {
	var params BillingGetGithubActionsBillingOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeBillingGetGithubActionsBillingUserParams(r *http.Request) (BillingGetGithubActionsBillingUserParams, error) {
	var params BillingGetGithubActionsBillingUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeBillingGetGithubPackagesBillingGheParams(r *http.Request) (BillingGetGithubPackagesBillingGheParams, error) {
	var params BillingGetGithubPackagesBillingGheParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeBillingGetGithubPackagesBillingOrgParams(r *http.Request) (BillingGetGithubPackagesBillingOrgParams, error) {
	var params BillingGetGithubPackagesBillingOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeBillingGetGithubPackagesBillingUserParams(r *http.Request) (BillingGetGithubPackagesBillingUserParams, error) {
	var params BillingGetGithubPackagesBillingUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeBillingGetSharedStorageBillingGheParams(r *http.Request) (BillingGetSharedStorageBillingGheParams, error) {
	var params BillingGetSharedStorageBillingGheParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeBillingGetSharedStorageBillingOrgParams(r *http.Request) (BillingGetSharedStorageBillingOrgParams, error) {
	var params BillingGetSharedStorageBillingOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeBillingGetSharedStorageBillingUserParams(r *http.Request) (BillingGetSharedStorageBillingUserParams, error) {
	var params BillingGetSharedStorageBillingUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeChecksCreateParams(r *http.Request) (ChecksCreateParams, error) {
	var params ChecksCreateParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeChecksCreateSuiteParams(r *http.Request) (ChecksCreateSuiteParams, error) {
	var params ChecksCreateSuiteParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeChecksGetParams(r *http.Request) (ChecksGetParams, error) {
	var params ChecksGetParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "check_run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "check_run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'check_run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "check_run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CheckRunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeChecksGetSuiteParams(r *http.Request) (ChecksGetSuiteParams, error) {
	var params ChecksGetSuiteParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "check_suite_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "check_suite_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'check_suite_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "check_suite_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CheckSuiteID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeChecksListAnnotationsParams(r *http.Request) (ChecksListAnnotationsParams, error) {
	var params ChecksListAnnotationsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "check_run_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "check_run_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'check_run_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "check_run_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CheckRunID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeChecksListForRefParams(r *http.Request) (ChecksListForRefParams, error) {
	var params ChecksListForRefParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "ref" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "ref")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'ref' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "ref",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Ref = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "check_name" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["check_name"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.CheckName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "status" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["status"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Status = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "filter" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["filter"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Filter = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "app_id" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["app_id"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AppID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeChecksListForSuiteParams(r *http.Request) (ChecksListForSuiteParams, error) {
	var params ChecksListForSuiteParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "check_suite_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "check_suite_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'check_suite_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "check_suite_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CheckSuiteID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "check_name" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["check_name"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.CheckName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "status" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["status"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Status = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "filter" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["filter"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Filter = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeChecksListSuitesForRefParams(r *http.Request) (ChecksListSuitesForRefParams, error) {
	var params ChecksListSuitesForRefParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "ref" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "ref")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'ref' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "ref",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Ref = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "app_id" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["app_id"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AppID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "check_name" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["check_name"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.CheckName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeChecksRerequestSuiteParams(r *http.Request) (ChecksRerequestSuiteParams, error) {
	var params ChecksRerequestSuiteParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "check_suite_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "check_suite_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'check_suite_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "check_suite_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CheckSuiteID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeChecksSetSuitesPreferencesParams(r *http.Request) (ChecksSetSuitesPreferencesParams, error) {
	var params ChecksSetSuitesPreferencesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeCodeScanningDeleteAnalysisParams(r *http.Request) (CodeScanningDeleteAnalysisParams, error) {
	var params CodeScanningDeleteAnalysisParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "analysis_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "analysis_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'analysis_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "analysis_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AnalysisID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "confirm_delete" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["confirm_delete"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ConfirmDelete = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeCodeScanningGetAlertParams(r *http.Request) (CodeScanningGetAlertParams, error) {
	var params CodeScanningGetAlertParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "alert_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "alert_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'alert_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "alert_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AlertNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeCodeScanningGetAnalysisParams(r *http.Request) (CodeScanningGetAnalysisParams, error) {
	var params CodeScanningGetAnalysisParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "analysis_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "analysis_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'analysis_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "analysis_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AnalysisID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeCodeScanningGetSarifParams(r *http.Request) (CodeScanningGetSarifParams, error) {
	var params CodeScanningGetSarifParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sarif_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "sarif_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'sarif_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "sarif_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SarifID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeCodeScanningListAlertInstancesParams(r *http.Request) (CodeScanningListAlertInstancesParams, error) {
	var params CodeScanningListAlertInstancesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "alert_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "alert_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'alert_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "alert_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AlertNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "ref" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["ref"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Ref = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeCodeScanningListAlertsForRepoParams(r *http.Request) (CodeScanningListAlertsForRepoParams, error) {
	var params CodeScanningListAlertsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "tool_name" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["tool_name"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ToolName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "tool_guid" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["tool_guid"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ToolGUID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "ref" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["ref"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Ref = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "state" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["state"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.State = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeCodeScanningListRecentAnalysesParams(r *http.Request) (CodeScanningListRecentAnalysesParams, error) {
	var params CodeScanningListRecentAnalysesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "tool_name" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["tool_name"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ToolName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "tool_guid" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["tool_guid"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ToolGUID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "ref" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["ref"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Ref = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sarif_id" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["sarif_id"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SarifID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeCodeScanningUpdateAlertParams(r *http.Request) (CodeScanningUpdateAlertParams, error) {
	var params CodeScanningUpdateAlertParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "alert_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "alert_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'alert_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "alert_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AlertNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeCodeScanningUploadSarifParams(r *http.Request) (CodeScanningUploadSarifParams, error) {
	var params CodeScanningUploadSarifParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeCodesOfConductGetConductCodeParams(r *http.Request) (CodesOfConductGetConductCodeParams, error) {
	var params CodesOfConductGetConductCodeParams
	// Decode param "key" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "key")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'key' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "key",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Key = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(r *http.Request) (EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParams, error) {
	var params EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.OrgID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseParams(r *http.Request) (EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseParams, error) {
	var params EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminCreateRegistrationTokenForEnterpriseParams(r *http.Request) (EnterpriseAdminCreateRegistrationTokenForEnterpriseParams, error) {
	var params EnterpriseAdminCreateRegistrationTokenForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminCreateRemoveTokenForEnterpriseParams(r *http.Request) (EnterpriseAdminCreateRemoveTokenForEnterpriseParams, error) {
	var params EnterpriseAdminCreateRemoveTokenForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParams(r *http.Request) (EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParams, error) {
	var params EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminDeleteScimGroupFromEnterpriseParams(r *http.Request) (EnterpriseAdminDeleteScimGroupFromEnterpriseParams, error) {
	var params EnterpriseAdminDeleteScimGroupFromEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "scim_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "scim_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'scim_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "scim_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ScimGroupID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParams(r *http.Request) (EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParams, error) {
	var params EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseParams(r *http.Request) (EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseParams, error) {
	var params EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminDeleteUserFromEnterpriseParams(r *http.Request) (EnterpriseAdminDeleteUserFromEnterpriseParams, error) {
	var params EnterpriseAdminDeleteUserFromEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "scim_user_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "scim_user_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'scim_user_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "scim_user_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ScimUserID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseParams(r *http.Request) (EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseParams, error) {
	var params EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.OrgID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParams(r *http.Request) (EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParams, error) {
	var params EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.OrgID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminGetAllowedActionsEnterpriseParams(r *http.Request) (EnterpriseAdminGetAllowedActionsEnterpriseParams, error) {
	var params EnterpriseAdminGetAllowedActionsEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminGetAuditLogParams(r *http.Request) (EnterpriseAdminGetAuditLogParams, error) {
	var params EnterpriseAdminGetAuditLogParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "phrase" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["phrase"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Phrase = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "include" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["include"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Include = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "after" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["after"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.After = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "before" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["before"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Before = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "order" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["order"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Order = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminGetGithubActionsPermissionsEnterpriseParams(r *http.Request) (EnterpriseAdminGetGithubActionsPermissionsEnterpriseParams, error) {
	var params EnterpriseAdminGetGithubActionsPermissionsEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminGetProvisioningInformationForEnterpriseGroupParams(r *http.Request) (EnterpriseAdminGetProvisioningInformationForEnterpriseGroupParams, error) {
	var params EnterpriseAdminGetProvisioningInformationForEnterpriseGroupParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "scim_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "scim_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'scim_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "scim_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ScimGroupID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "excludedAttributes" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["excludedAttributes"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ExcludedAttributes = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminGetProvisioningInformationForEnterpriseUserParams(r *http.Request) (EnterpriseAdminGetProvisioningInformationForEnterpriseUserParams, error) {
	var params EnterpriseAdminGetProvisioningInformationForEnterpriseUserParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "scim_user_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "scim_user_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'scim_user_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "scim_user_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ScimUserID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminGetSelfHostedRunnerForEnterpriseParams(r *http.Request) (EnterpriseAdminGetSelfHostedRunnerForEnterpriseParams, error) {
	var params EnterpriseAdminGetSelfHostedRunnerForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParams(r *http.Request) (EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParams, error) {
	var params EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(r *http.Request) (EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseParams, error) {
	var params EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminListProvisionedGroupsEnterpriseParams(r *http.Request) (EnterpriseAdminListProvisionedGroupsEnterpriseParams, error) {
	var params EnterpriseAdminListProvisionedGroupsEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "startIndex" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["startIndex"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.StartIndex = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "count" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["count"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Count = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "filter" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["filter"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Filter = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "excludedAttributes" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["excludedAttributes"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ExcludedAttributes = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminListProvisionedIdentitiesEnterpriseParams(r *http.Request) (EnterpriseAdminListProvisionedIdentitiesEnterpriseParams, error) {
	var params EnterpriseAdminListProvisionedIdentitiesEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "startIndex" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["startIndex"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.StartIndex = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "count" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["count"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Count = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "filter" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["filter"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Filter = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminListRunnerApplicationsForEnterpriseParams(r *http.Request) (EnterpriseAdminListRunnerApplicationsForEnterpriseParams, error) {
	var params EnterpriseAdminListRunnerApplicationsForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseParams(r *http.Request) (EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseParams, error) {
	var params EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParams(r *http.Request) (EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParams, error) {
	var params EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminListSelfHostedRunnersForEnterpriseParams(r *http.Request) (EnterpriseAdminListSelfHostedRunnersForEnterpriseParams, error) {
	var params EnterpriseAdminListSelfHostedRunnersForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseParams(r *http.Request) (EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseParams, error) {
	var params EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseGroupParams(r *http.Request) (EnterpriseAdminProvisionAndInviteEnterpriseGroupParams, error) {
	var params EnterpriseAdminProvisionAndInviteEnterpriseGroupParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminProvisionAndInviteEnterpriseUserParams(r *http.Request) (EnterpriseAdminProvisionAndInviteEnterpriseUserParams, error) {
	var params EnterpriseAdminProvisionAndInviteEnterpriseUserParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(r *http.Request) (EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseParams, error) {
	var params EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.OrgID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParams(r *http.Request) (EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParams, error) {
	var params EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminSetAllowedActionsEnterpriseParams(r *http.Request) (EnterpriseAdminSetAllowedActionsEnterpriseParams, error) {
	var params EnterpriseAdminSetAllowedActionsEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminSetGithubActionsPermissionsEnterpriseParams(r *http.Request) (EnterpriseAdminSetGithubActionsPermissionsEnterpriseParams, error) {
	var params EnterpriseAdminSetGithubActionsPermissionsEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseGroupParams(r *http.Request) (EnterpriseAdminSetInformationForProvisionedEnterpriseGroupParams, error) {
	var params EnterpriseAdminSetInformationForProvisionedEnterpriseGroupParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "scim_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "scim_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'scim_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "scim_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ScimGroupID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminSetInformationForProvisionedEnterpriseUserParams(r *http.Request) (EnterpriseAdminSetInformationForProvisionedEnterpriseUserParams, error) {
	var params EnterpriseAdminSetInformationForProvisionedEnterpriseUserParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "scim_user_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "scim_user_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'scim_user_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "scim_user_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ScimUserID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseParams(r *http.Request) (EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseParams, error) {
	var params EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseParams(r *http.Request) (EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseParams, error) {
	var params EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseParams(r *http.Request) (EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseParams, error) {
	var params EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminUpdateAttributeForEnterpriseUserParams(r *http.Request) (EnterpriseAdminUpdateAttributeForEnterpriseUserParams, error) {
	var params EnterpriseAdminUpdateAttributeForEnterpriseUserParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "scim_user_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "scim_user_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'scim_user_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "scim_user_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ScimUserID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseParams(r *http.Request) (EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseParams, error) {
	var params EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseParams
	// Decode param "enterprise" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "enterprise")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'enterprise' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "enterprise",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Enterprise = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "runner_group_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "runner_group_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'runner_group_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "runner_group_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.RunnerGroupID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsCheckIsStarredParams(r *http.Request) (GistsCheckIsStarredParams, error) {
	var params GistsCheckIsStarredParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsCreateCommentParams(r *http.Request) (GistsCreateCommentParams, error) {
	var params GistsCreateCommentParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsDeleteParams(r *http.Request) (GistsDeleteParams, error) {
	var params GistsDeleteParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsDeleteCommentParams(r *http.Request) (GistsDeleteCommentParams, error) {
	var params GistsDeleteCommentParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsGetParams(r *http.Request) (GistsGetParams, error) {
	var params GistsGetParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsGetCommentParams(r *http.Request) (GistsGetCommentParams, error) {
	var params GistsGetCommentParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsListParams(r *http.Request) (GistsListParams, error) {
	var params GistsListParams
	// Decode param "since" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["since"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeTime()
		if err != nil {
			return err
		}

		params.Since = time.Time(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsListCommentsParams(r *http.Request) (GistsListCommentsParams, error) {
	var params GistsListCommentsParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsListCommitsParams(r *http.Request) (GistsListCommitsParams, error) {
	var params GistsListCommitsParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsListForksParams(r *http.Request) (GistsListForksParams, error) {
	var params GistsListForksParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsListStarredParams(r *http.Request) (GistsListStarredParams, error) {
	var params GistsListStarredParams
	// Decode param "since" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["since"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeTime()
		if err != nil {
			return err
		}

		params.Since = time.Time(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsStarParams(r *http.Request) (GistsStarParams, error) {
	var params GistsStarParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsUnstarParams(r *http.Request) (GistsUnstarParams, error) {
	var params GistsUnstarParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGistsUpdateCommentParams(r *http.Request) (GistsUpdateCommentParams, error) {
	var params GistsUpdateCommentParams
	// Decode param "gist_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gist_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gist_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gist_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.GistID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGitGetCommitParams(r *http.Request) (GitGetCommitParams, error) {
	var params GitGetCommitParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "commit_sha" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "commit_sha")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'commit_sha' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "commit_sha",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.CommitSha = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGitGetRefParams(r *http.Request) (GitGetRefParams, error) {
	var params GitGetRefParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "ref" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "ref")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'ref' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "ref",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Ref = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGitGetTagParams(r *http.Request) (GitGetTagParams, error) {
	var params GitGetTagParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "tag_sha" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "tag_sha")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'tag_sha' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "tag_sha",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TagSha = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGitListMatchingRefsParams(r *http.Request) (GitListMatchingRefsParams, error) {
	var params GitListMatchingRefsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "ref" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "ref")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'ref' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "ref",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Ref = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeGitignoreGetTemplateParams(r *http.Request) (GitignoreGetTemplateParams, error) {
	var params GitignoreGetTemplateParams
	// Decode param "name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Name = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeInteractionsRemoveRestrictionsForOrgParams(r *http.Request) (InteractionsRemoveRestrictionsForOrgParams, error) {
	var params InteractionsRemoveRestrictionsForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeInteractionsRemoveRestrictionsForRepoParams(r *http.Request) (InteractionsRemoveRestrictionsForRepoParams, error) {
	var params InteractionsRemoveRestrictionsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeInteractionsSetRestrictionsForRepoParams(r *http.Request) (InteractionsSetRestrictionsForRepoParams, error) {
	var params InteractionsSetRestrictionsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesAddAssigneesParams(r *http.Request) (IssuesAddAssigneesParams, error) {
	var params IssuesAddAssigneesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "issue_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "issue_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'issue_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "issue_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.IssueNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesCheckUserCanBeAssignedParams(r *http.Request) (IssuesCheckUserCanBeAssignedParams, error) {
	var params IssuesCheckUserCanBeAssignedParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "assignee" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "assignee")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'assignee' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "assignee",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Assignee = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesDeleteCommentParams(r *http.Request) (IssuesDeleteCommentParams, error) {
	var params IssuesDeleteCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesDeleteLabelParams(r *http.Request) (IssuesDeleteLabelParams, error) {
	var params IssuesDeleteLabelParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Name = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesDeleteMilestoneParams(r *http.Request) (IssuesDeleteMilestoneParams, error) {
	var params IssuesDeleteMilestoneParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "milestone_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "milestone_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'milestone_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "milestone_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MilestoneNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesGetCommentParams(r *http.Request) (IssuesGetCommentParams, error) {
	var params IssuesGetCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesGetEventParams(r *http.Request) (IssuesGetEventParams, error) {
	var params IssuesGetEventParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "event_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "event_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'event_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "event_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.EventID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesGetLabelParams(r *http.Request) (IssuesGetLabelParams, error) {
	var params IssuesGetLabelParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Name = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesGetMilestoneParams(r *http.Request) (IssuesGetMilestoneParams, error) {
	var params IssuesGetMilestoneParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "milestone_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "milestone_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'milestone_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "milestone_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MilestoneNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesListAssigneesParams(r *http.Request) (IssuesListAssigneesParams, error) {
	var params IssuesListAssigneesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesListCommentsParams(r *http.Request) (IssuesListCommentsParams, error) {
	var params IssuesListCommentsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "issue_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "issue_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'issue_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "issue_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.IssueNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "since" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["since"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeTime()
		if err != nil {
			return err
		}

		params.Since = time.Time(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesListLabelsForMilestoneParams(r *http.Request) (IssuesListLabelsForMilestoneParams, error) {
	var params IssuesListLabelsForMilestoneParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "milestone_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "milestone_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'milestone_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "milestone_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MilestoneNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesListLabelsForRepoParams(r *http.Request) (IssuesListLabelsForRepoParams, error) {
	var params IssuesListLabelsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesListLabelsOnIssueParams(r *http.Request) (IssuesListLabelsOnIssueParams, error) {
	var params IssuesListLabelsOnIssueParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "issue_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "issue_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'issue_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "issue_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.IssueNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesListMilestonesParams(r *http.Request) (IssuesListMilestonesParams, error) {
	var params IssuesListMilestonesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "state" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["state"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.State = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sort" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["sort"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Sort = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "direction" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["direction"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Direction = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesRemoveAllLabelsParams(r *http.Request) (IssuesRemoveAllLabelsParams, error) {
	var params IssuesRemoveAllLabelsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "issue_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "issue_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'issue_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "issue_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.IssueNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesRemoveAssigneesParams(r *http.Request) (IssuesRemoveAssigneesParams, error) {
	var params IssuesRemoveAssigneesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "issue_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "issue_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'issue_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "issue_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.IssueNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesRemoveLabelParams(r *http.Request) (IssuesRemoveLabelParams, error) {
	var params IssuesRemoveLabelParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "issue_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "issue_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'issue_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "issue_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.IssueNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Name = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesUnlockParams(r *http.Request) (IssuesUnlockParams, error) {
	var params IssuesUnlockParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "issue_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "issue_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'issue_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "issue_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.IssueNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesUpdateLabelParams(r *http.Request) (IssuesUpdateLabelParams, error) {
	var params IssuesUpdateLabelParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Name = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeIssuesUpdateMilestoneParams(r *http.Request) (IssuesUpdateMilestoneParams, error) {
	var params IssuesUpdateMilestoneParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "milestone_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "milestone_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'milestone_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "milestone_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MilestoneNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeLicensesGetParams(r *http.Request) (LicensesGetParams, error) {
	var params LicensesGetParams
	// Decode param "license" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "license")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'license' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "license",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.License = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeLicensesGetAllCommonlyUsedParams(r *http.Request) (LicensesGetAllCommonlyUsedParams, error) {
	var params LicensesGetAllCommonlyUsedParams
	// Decode param "featured" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["featured"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeBool()
		if err != nil {
			return err
		}

		params.Featured = bool(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeLicensesGetForRepoParams(r *http.Request) (LicensesGetForRepoParams, error) {
	var params LicensesGetForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMetaGetOctocatParams(r *http.Request) (MetaGetOctocatParams, error) {
	var params MetaGetOctocatParams
	// Decode param "s" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["s"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.S = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsCancelImportParams(r *http.Request) (MigrationsCancelImportParams, error) {
	var params MigrationsCancelImportParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsDeleteArchiveForAuthenticatedUserParams(r *http.Request) (MigrationsDeleteArchiveForAuthenticatedUserParams, error) {
	var params MigrationsDeleteArchiveForAuthenticatedUserParams
	// Decode param "migration_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "migration_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'migration_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "migration_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MigrationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsDeleteArchiveForOrgParams(r *http.Request) (MigrationsDeleteArchiveForOrgParams, error) {
	var params MigrationsDeleteArchiveForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "migration_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "migration_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'migration_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "migration_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MigrationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsDownloadArchiveForOrgParams(r *http.Request) (MigrationsDownloadArchiveForOrgParams, error) {
	var params MigrationsDownloadArchiveForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "migration_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "migration_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'migration_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "migration_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MigrationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsGetArchiveForAuthenticatedUserParams(r *http.Request) (MigrationsGetArchiveForAuthenticatedUserParams, error) {
	var params MigrationsGetArchiveForAuthenticatedUserParams
	// Decode param "migration_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "migration_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'migration_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "migration_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MigrationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsGetCommitAuthorsParams(r *http.Request) (MigrationsGetCommitAuthorsParams, error) {
	var params MigrationsGetCommitAuthorsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "since" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["since"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Since = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsGetImportStatusParams(r *http.Request) (MigrationsGetImportStatusParams, error) {
	var params MigrationsGetImportStatusParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsGetLargeFilesParams(r *http.Request) (MigrationsGetLargeFilesParams, error) {
	var params MigrationsGetLargeFilesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsGetStatusForAuthenticatedUserParams(r *http.Request) (MigrationsGetStatusForAuthenticatedUserParams, error) {
	var params MigrationsGetStatusForAuthenticatedUserParams
	// Decode param "migration_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "migration_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'migration_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "migration_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MigrationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "exclude" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["exclude"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeStringArray()
		if err != nil {
			return err
		}

		params.Exclude = []string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsGetStatusForOrgParams(r *http.Request) (MigrationsGetStatusForOrgParams, error) {
	var params MigrationsGetStatusForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "migration_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "migration_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'migration_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "migration_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MigrationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "exclude" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["exclude"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeStringArray()
		if err != nil {
			return err
		}

		params.Exclude = []string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsListForAuthenticatedUserParams(r *http.Request) (MigrationsListForAuthenticatedUserParams, error) {
	var params MigrationsListForAuthenticatedUserParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsListForOrgParams(r *http.Request) (MigrationsListForOrgParams, error) {
	var params MigrationsListForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "exclude" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["exclude"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeStringArray()
		if err != nil {
			return err
		}

		params.Exclude = []string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsListReposForOrgParams(r *http.Request) (MigrationsListReposForOrgParams, error) {
	var params MigrationsListReposForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "migration_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "migration_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'migration_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "migration_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MigrationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsListReposForUserParams(r *http.Request) (MigrationsListReposForUserParams, error) {
	var params MigrationsListReposForUserParams
	// Decode param "migration_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "migration_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'migration_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "migration_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MigrationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsUnlockRepoForAuthenticatedUserParams(r *http.Request) (MigrationsUnlockRepoForAuthenticatedUserParams, error) {
	var params MigrationsUnlockRepoForAuthenticatedUserParams
	// Decode param "migration_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "migration_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'migration_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "migration_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MigrationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.RepoName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsUnlockRepoForOrgParams(r *http.Request) (MigrationsUnlockRepoForOrgParams, error) {
	var params MigrationsUnlockRepoForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "migration_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "migration_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'migration_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "migration_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.MigrationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.RepoName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeMigrationsUpdateImportParams(r *http.Request) (MigrationsUpdateImportParams, error) {
	var params MigrationsUpdateImportParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOAuthAuthorizationsDeleteAuthorizationParams(r *http.Request) (OAuthAuthorizationsDeleteAuthorizationParams, error) {
	var params OAuthAuthorizationsDeleteAuthorizationParams
	// Decode param "authorization_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "authorization_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'authorization_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "authorization_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AuthorizationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOAuthAuthorizationsDeleteGrantParams(r *http.Request) (OAuthAuthorizationsDeleteGrantParams, error) {
	var params OAuthAuthorizationsDeleteGrantParams
	// Decode param "grant_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "grant_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'grant_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "grant_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.GrantID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOAuthAuthorizationsGetAuthorizationParams(r *http.Request) (OAuthAuthorizationsGetAuthorizationParams, error) {
	var params OAuthAuthorizationsGetAuthorizationParams
	// Decode param "authorization_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "authorization_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'authorization_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "authorization_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AuthorizationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOAuthAuthorizationsGetGrantParams(r *http.Request) (OAuthAuthorizationsGetGrantParams, error) {
	var params OAuthAuthorizationsGetGrantParams
	// Decode param "grant_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "grant_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'grant_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "grant_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.GrantID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOAuthAuthorizationsListAuthorizationsParams(r *http.Request) (OAuthAuthorizationsListAuthorizationsParams, error) {
	var params OAuthAuthorizationsListAuthorizationsParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "client_id" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["client_id"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ClientID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOAuthAuthorizationsListGrantsParams(r *http.Request) (OAuthAuthorizationsListGrantsParams, error) {
	var params OAuthAuthorizationsListGrantsParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "client_id" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["client_id"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ClientID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsCheckBlockedUserParams(r *http.Request) (OrgsCheckBlockedUserParams, error) {
	var params OrgsCheckBlockedUserParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsCheckMembershipForUserParams(r *http.Request) (OrgsCheckMembershipForUserParams, error) {
	var params OrgsCheckMembershipForUserParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsCheckPublicMembershipForUserParams(r *http.Request) (OrgsCheckPublicMembershipForUserParams, error) {
	var params OrgsCheckPublicMembershipForUserParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsConvertMemberToOutsideCollaboratorParams(r *http.Request) (OrgsConvertMemberToOutsideCollaboratorParams, error) {
	var params OrgsConvertMemberToOutsideCollaboratorParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsDeleteWebhookParams(r *http.Request) (OrgsDeleteWebhookParams, error) {
	var params OrgsDeleteWebhookParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "hook_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "hook_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'hook_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "hook_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.HookID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsGetParams(r *http.Request) (OrgsGetParams, error) {
	var params OrgsGetParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsGetAuditLogParams(r *http.Request) (OrgsGetAuditLogParams, error) {
	var params OrgsGetAuditLogParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "phrase" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["phrase"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Phrase = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "include" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["include"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Include = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "after" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["after"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.After = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "before" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["before"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Before = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "order" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["order"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Order = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsGetMembershipForAuthenticatedUserParams(r *http.Request) (OrgsGetMembershipForAuthenticatedUserParams, error) {
	var params OrgsGetMembershipForAuthenticatedUserParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsGetMembershipForUserParams(r *http.Request) (OrgsGetMembershipForUserParams, error) {
	var params OrgsGetMembershipForUserParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsGetWebhookParams(r *http.Request) (OrgsGetWebhookParams, error) {
	var params OrgsGetWebhookParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "hook_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "hook_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'hook_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "hook_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.HookID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsGetWebhookConfigForOrgParams(r *http.Request) (OrgsGetWebhookConfigForOrgParams, error) {
	var params OrgsGetWebhookConfigForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "hook_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "hook_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'hook_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "hook_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.HookID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsListParams(r *http.Request) (OrgsListParams, error) {
	var params OrgsListParams
	// Decode param "since" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["since"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Since = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsListBlockedUsersParams(r *http.Request) (OrgsListBlockedUsersParams, error) {
	var params OrgsListBlockedUsersParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsListFailedInvitationsParams(r *http.Request) (OrgsListFailedInvitationsParams, error) {
	var params OrgsListFailedInvitationsParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsListForAuthenticatedUserParams(r *http.Request) (OrgsListForAuthenticatedUserParams, error) {
	var params OrgsListForAuthenticatedUserParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsListForUserParams(r *http.Request) (OrgsListForUserParams, error) {
	var params OrgsListForUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsListInvitationTeamsParams(r *http.Request) (OrgsListInvitationTeamsParams, error) {
	var params OrgsListInvitationTeamsParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "invitation_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "invitation_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'invitation_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "invitation_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.InvitationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsListOutsideCollaboratorsParams(r *http.Request) (OrgsListOutsideCollaboratorsParams, error) {
	var params OrgsListOutsideCollaboratorsParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "filter" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["filter"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Filter = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsListPendingInvitationsParams(r *http.Request) (OrgsListPendingInvitationsParams, error) {
	var params OrgsListPendingInvitationsParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsListPublicMembersParams(r *http.Request) (OrgsListPublicMembersParams, error) {
	var params OrgsListPublicMembersParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsListSamlSSOAuthorizationsParams(r *http.Request) (OrgsListSamlSSOAuthorizationsParams, error) {
	var params OrgsListSamlSSOAuthorizationsParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsListWebhooksParams(r *http.Request) (OrgsListWebhooksParams, error) {
	var params OrgsListWebhooksParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsPingWebhookParams(r *http.Request) (OrgsPingWebhookParams, error) {
	var params OrgsPingWebhookParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "hook_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "hook_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'hook_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "hook_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.HookID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsRemoveMemberParams(r *http.Request) (OrgsRemoveMemberParams, error) {
	var params OrgsRemoveMemberParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsRemoveMembershipForUserParams(r *http.Request) (OrgsRemoveMembershipForUserParams, error) {
	var params OrgsRemoveMembershipForUserParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsRemoveOutsideCollaboratorParams(r *http.Request) (OrgsRemoveOutsideCollaboratorParams, error) {
	var params OrgsRemoveOutsideCollaboratorParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsRemovePublicMembershipForAuthenticatedUserParams(r *http.Request) (OrgsRemovePublicMembershipForAuthenticatedUserParams, error) {
	var params OrgsRemovePublicMembershipForAuthenticatedUserParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsRemoveSamlSSOAuthorizationParams(r *http.Request) (OrgsRemoveSamlSSOAuthorizationParams, error) {
	var params OrgsRemoveSamlSSOAuthorizationParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "credential_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "credential_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'credential_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "credential_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CredentialID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsSetPublicMembershipForAuthenticatedUserParams(r *http.Request) (OrgsSetPublicMembershipForAuthenticatedUserParams, error) {
	var params OrgsSetPublicMembershipForAuthenticatedUserParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsUnblockUserParams(r *http.Request) (OrgsUnblockUserParams, error) {
	var params OrgsUnblockUserParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeOrgsUpdateWebhookConfigForOrgParams(r *http.Request) (OrgsUpdateWebhookConfigForOrgParams, error) {
	var params OrgsUpdateWebhookConfigForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "hook_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "hook_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'hook_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "hook_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.HookID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesDeletePackageForAuthenticatedUserParams(r *http.Request) (PackagesDeletePackageForAuthenticatedUserParams, error) {
	var params PackagesDeletePackageForAuthenticatedUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesDeletePackageForOrgParams(r *http.Request) (PackagesDeletePackageForOrgParams, error) {
	var params PackagesDeletePackageForOrgParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesDeletePackageForUserParams(r *http.Request) (PackagesDeletePackageForUserParams, error) {
	var params PackagesDeletePackageForUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesDeletePackageVersionForAuthenticatedUserParams(r *http.Request) (PackagesDeletePackageVersionForAuthenticatedUserParams, error) {
	var params PackagesDeletePackageVersionForAuthenticatedUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_version_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_version_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_version_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_version_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PackageVersionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesDeletePackageVersionForOrgParams(r *http.Request) (PackagesDeletePackageVersionForOrgParams, error) {
	var params PackagesDeletePackageVersionForOrgParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_version_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_version_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_version_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_version_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PackageVersionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesDeletePackageVersionForUserParams(r *http.Request) (PackagesDeletePackageVersionForUserParams, error) {
	var params PackagesDeletePackageVersionForUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_version_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_version_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_version_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_version_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PackageVersionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams(r *http.Request) (PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams, error) {
	var params PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "state" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["state"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.State = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesGetAllPackageVersionsForPackageOwnedByOrgParams(r *http.Request) (PackagesGetAllPackageVersionsForPackageOwnedByOrgParams, error) {
	var params PackagesGetAllPackageVersionsForPackageOwnedByOrgParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "state" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["state"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.State = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesGetAllPackageVersionsForPackageOwnedByUserParams(r *http.Request) (PackagesGetAllPackageVersionsForPackageOwnedByUserParams, error) {
	var params PackagesGetAllPackageVersionsForPackageOwnedByUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesGetPackageForAuthenticatedUserParams(r *http.Request) (PackagesGetPackageForAuthenticatedUserParams, error) {
	var params PackagesGetPackageForAuthenticatedUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesGetPackageForOrganizationParams(r *http.Request) (PackagesGetPackageForOrganizationParams, error) {
	var params PackagesGetPackageForOrganizationParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesGetPackageForUserParams(r *http.Request) (PackagesGetPackageForUserParams, error) {
	var params PackagesGetPackageForUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesGetPackageVersionForAuthenticatedUserParams(r *http.Request) (PackagesGetPackageVersionForAuthenticatedUserParams, error) {
	var params PackagesGetPackageVersionForAuthenticatedUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_version_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_version_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_version_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_version_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PackageVersionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesGetPackageVersionForOrganizationParams(r *http.Request) (PackagesGetPackageVersionForOrganizationParams, error) {
	var params PackagesGetPackageVersionForOrganizationParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_version_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_version_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_version_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_version_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PackageVersionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesGetPackageVersionForUserParams(r *http.Request) (PackagesGetPackageVersionForUserParams, error) {
	var params PackagesGetPackageVersionForUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_version_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_version_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_version_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_version_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PackageVersionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesListPackagesForAuthenticatedUserParams(r *http.Request) (PackagesListPackagesForAuthenticatedUserParams, error) {
	var params PackagesListPackagesForAuthenticatedUserParams
	// Decode param "package_type" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["package_type"]
		if !ok {
			return fmt.Errorf("query parameter 'package_type' not specified")
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "visibility" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["visibility"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Visibility = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesListPackagesForOrganizationParams(r *http.Request) (PackagesListPackagesForOrganizationParams, error) {
	var params PackagesListPackagesForOrganizationParams
	// Decode param "package_type" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["package_type"]
		if !ok {
			return fmt.Errorf("query parameter 'package_type' not specified")
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "visibility" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["visibility"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Visibility = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesListPackagesForUserParams(r *http.Request) (PackagesListPackagesForUserParams, error) {
	var params PackagesListPackagesForUserParams
	// Decode param "package_type" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["package_type"]
		if !ok {
			return fmt.Errorf("query parameter 'package_type' not specified")
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "visibility" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["visibility"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Visibility = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesRestorePackageForAuthenticatedUserParams(r *http.Request) (PackagesRestorePackageForAuthenticatedUserParams, error) {
	var params PackagesRestorePackageForAuthenticatedUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "token" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["token"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Token = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesRestorePackageForOrgParams(r *http.Request) (PackagesRestorePackageForOrgParams, error) {
	var params PackagesRestorePackageForOrgParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "token" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["token"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Token = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesRestorePackageForUserParams(r *http.Request) (PackagesRestorePackageForUserParams, error) {
	var params PackagesRestorePackageForUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "token" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["token"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Token = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesRestorePackageVersionForAuthenticatedUserParams(r *http.Request) (PackagesRestorePackageVersionForAuthenticatedUserParams, error) {
	var params PackagesRestorePackageVersionForAuthenticatedUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_version_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_version_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_version_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_version_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PackageVersionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesRestorePackageVersionForOrgParams(r *http.Request) (PackagesRestorePackageVersionForOrgParams, error) {
	var params PackagesRestorePackageVersionForOrgParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_version_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_version_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_version_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_version_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PackageVersionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePackagesRestorePackageVersionForUserParams(r *http.Request) (PackagesRestorePackageVersionForUserParams, error) {
	var params PackagesRestorePackageVersionForUserParams
	// Decode param "package_type" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_type")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_type' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_type",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.PackageName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "package_version_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "package_version_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'package_version_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "package_version_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PackageVersionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsCreateColumnParams(r *http.Request) (ProjectsCreateColumnParams, error) {
	var params ProjectsCreateColumnParams
	// Decode param "project_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "project_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'project_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "project_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ProjectID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsCreateForOrgParams(r *http.Request) (ProjectsCreateForOrgParams, error) {
	var params ProjectsCreateForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsCreateForRepoParams(r *http.Request) (ProjectsCreateForRepoParams, error) {
	var params ProjectsCreateForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsDeleteParams(r *http.Request) (ProjectsDeleteParams, error) {
	var params ProjectsDeleteParams
	// Decode param "project_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "project_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'project_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "project_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ProjectID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsDeleteCardParams(r *http.Request) (ProjectsDeleteCardParams, error) {
	var params ProjectsDeleteCardParams
	// Decode param "card_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "card_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'card_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "card_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CardID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsDeleteColumnParams(r *http.Request) (ProjectsDeleteColumnParams, error) {
	var params ProjectsDeleteColumnParams
	// Decode param "column_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "column_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'column_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "column_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ColumnID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsGetParams(r *http.Request) (ProjectsGetParams, error) {
	var params ProjectsGetParams
	// Decode param "project_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "project_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'project_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "project_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ProjectID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsGetCardParams(r *http.Request) (ProjectsGetCardParams, error) {
	var params ProjectsGetCardParams
	// Decode param "card_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "card_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'card_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "card_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CardID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsGetColumnParams(r *http.Request) (ProjectsGetColumnParams, error) {
	var params ProjectsGetColumnParams
	// Decode param "column_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "column_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'column_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "column_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ColumnID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsListCardsParams(r *http.Request) (ProjectsListCardsParams, error) {
	var params ProjectsListCardsParams
	// Decode param "column_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "column_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'column_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "column_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ColumnID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "archived_state" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["archived_state"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ArchivedState = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsListColumnsParams(r *http.Request) (ProjectsListColumnsParams, error) {
	var params ProjectsListColumnsParams
	// Decode param "project_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "project_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'project_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "project_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ProjectID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsListForOrgParams(r *http.Request) (ProjectsListForOrgParams, error) {
	var params ProjectsListForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "state" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["state"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.State = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsListForRepoParams(r *http.Request) (ProjectsListForRepoParams, error) {
	var params ProjectsListForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "state" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["state"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.State = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsMoveColumnParams(r *http.Request) (ProjectsMoveColumnParams, error) {
	var params ProjectsMoveColumnParams
	// Decode param "column_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "column_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'column_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "column_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ColumnID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsUpdateParams(r *http.Request) (ProjectsUpdateParams, error) {
	var params ProjectsUpdateParams
	// Decode param "project_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "project_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'project_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "project_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ProjectID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsUpdateCardParams(r *http.Request) (ProjectsUpdateCardParams, error) {
	var params ProjectsUpdateCardParams
	// Decode param "card_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "card_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'card_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "card_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CardID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeProjectsUpdateColumnParams(r *http.Request) (ProjectsUpdateColumnParams, error) {
	var params ProjectsUpdateColumnParams
	// Decode param "column_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "column_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'column_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "column_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ColumnID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsCheckIfMergedParams(r *http.Request) (PullsCheckIfMergedParams, error) {
	var params PullsCheckIfMergedParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsCreateReplyForReviewCommentParams(r *http.Request) (PullsCreateReplyForReviewCommentParams, error) {
	var params PullsCreateReplyForReviewCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsCreateReviewParams(r *http.Request) (PullsCreateReviewParams, error) {
	var params PullsCreateReviewParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsDeletePendingReviewParams(r *http.Request) (PullsDeletePendingReviewParams, error) {
	var params PullsDeletePendingReviewParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "review_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "review_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'review_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "review_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReviewID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsDeleteReviewCommentParams(r *http.Request) (PullsDeleteReviewCommentParams, error) {
	var params PullsDeleteReviewCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsDismissReviewParams(r *http.Request) (PullsDismissReviewParams, error) {
	var params PullsDismissReviewParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "review_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "review_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'review_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "review_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReviewID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsGetParams(r *http.Request) (PullsGetParams, error) {
	var params PullsGetParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsGetReviewParams(r *http.Request) (PullsGetReviewParams, error) {
	var params PullsGetReviewParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "review_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "review_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'review_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "review_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReviewID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsGetReviewCommentParams(r *http.Request) (PullsGetReviewCommentParams, error) {
	var params PullsGetReviewCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsListCommentsForReviewParams(r *http.Request) (PullsListCommentsForReviewParams, error) {
	var params PullsListCommentsForReviewParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "review_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "review_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'review_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "review_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReviewID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsListCommitsParams(r *http.Request) (PullsListCommitsParams, error) {
	var params PullsListCommitsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsListRequestedReviewersParams(r *http.Request) (PullsListRequestedReviewersParams, error) {
	var params PullsListRequestedReviewersParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsListReviewCommentsParams(r *http.Request) (PullsListReviewCommentsParams, error) {
	var params PullsListReviewCommentsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sort" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["sort"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Sort = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "direction" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["direction"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Direction = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "since" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["since"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeTime()
		if err != nil {
			return err
		}

		params.Since = time.Time(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsListReviewCommentsForRepoParams(r *http.Request) (PullsListReviewCommentsForRepoParams, error) {
	var params PullsListReviewCommentsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sort" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["sort"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Sort = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "direction" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["direction"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Direction = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "since" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["since"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeTime()
		if err != nil {
			return err
		}

		params.Since = time.Time(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsListReviewsParams(r *http.Request) (PullsListReviewsParams, error) {
	var params PullsListReviewsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsSubmitReviewParams(r *http.Request) (PullsSubmitReviewParams, error) {
	var params PullsSubmitReviewParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "review_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "review_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'review_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "review_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReviewID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsUpdateReviewParams(r *http.Request) (PullsUpdateReviewParams, error) {
	var params PullsUpdateReviewParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pull_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "pull_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'pull_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "pull_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PullNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "review_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "review_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'review_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "review_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReviewID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodePullsUpdateReviewCommentParams(r *http.Request) (PullsUpdateReviewCommentParams, error) {
	var params PullsUpdateReviewCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsCreateForTeamDiscussionCommentInOrgParams(r *http.Request) (ReactionsCreateForTeamDiscussionCommentInOrgParams, error) {
	var params ReactionsCreateForTeamDiscussionCommentInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsCreateForTeamDiscussionCommentLegacyParams(r *http.Request) (ReactionsCreateForTeamDiscussionCommentLegacyParams, error) {
	var params ReactionsCreateForTeamDiscussionCommentLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsCreateForTeamDiscussionInOrgParams(r *http.Request) (ReactionsCreateForTeamDiscussionInOrgParams, error) {
	var params ReactionsCreateForTeamDiscussionInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsCreateForTeamDiscussionLegacyParams(r *http.Request) (ReactionsCreateForTeamDiscussionLegacyParams, error) {
	var params ReactionsCreateForTeamDiscussionLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsDeleteForCommitCommentParams(r *http.Request) (ReactionsDeleteForCommitCommentParams, error) {
	var params ReactionsDeleteForCommitCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "reaction_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "reaction_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'reaction_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "reaction_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReactionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsDeleteForIssueParams(r *http.Request) (ReactionsDeleteForIssueParams, error) {
	var params ReactionsDeleteForIssueParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "issue_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "issue_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'issue_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "issue_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.IssueNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "reaction_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "reaction_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'reaction_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "reaction_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReactionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsDeleteForIssueCommentParams(r *http.Request) (ReactionsDeleteForIssueCommentParams, error) {
	var params ReactionsDeleteForIssueCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "reaction_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "reaction_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'reaction_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "reaction_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReactionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsDeleteForPullRequestCommentParams(r *http.Request) (ReactionsDeleteForPullRequestCommentParams, error) {
	var params ReactionsDeleteForPullRequestCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "reaction_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "reaction_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'reaction_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "reaction_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReactionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsDeleteForTeamDiscussionParams(r *http.Request) (ReactionsDeleteForTeamDiscussionParams, error) {
	var params ReactionsDeleteForTeamDiscussionParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "reaction_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "reaction_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'reaction_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "reaction_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReactionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsDeleteForTeamDiscussionCommentParams(r *http.Request) (ReactionsDeleteForTeamDiscussionCommentParams, error) {
	var params ReactionsDeleteForTeamDiscussionCommentParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "reaction_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "reaction_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'reaction_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "reaction_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReactionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsDeleteLegacyParams(r *http.Request) (ReactionsDeleteLegacyParams, error) {
	var params ReactionsDeleteLegacyParams
	// Decode param "reaction_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "reaction_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'reaction_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "reaction_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReactionID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsListForCommitCommentParams(r *http.Request) (ReactionsListForCommitCommentParams, error) {
	var params ReactionsListForCommitCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "content" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["content"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Content = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsListForIssueParams(r *http.Request) (ReactionsListForIssueParams, error) {
	var params ReactionsListForIssueParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "issue_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "issue_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'issue_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "issue_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.IssueNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "content" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["content"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Content = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsListForIssueCommentParams(r *http.Request) (ReactionsListForIssueCommentParams, error) {
	var params ReactionsListForIssueCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "content" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["content"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Content = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsListForPullRequestReviewCommentParams(r *http.Request) (ReactionsListForPullRequestReviewCommentParams, error) {
	var params ReactionsListForPullRequestReviewCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "content" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["content"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Content = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsListForTeamDiscussionCommentInOrgParams(r *http.Request) (ReactionsListForTeamDiscussionCommentInOrgParams, error) {
	var params ReactionsListForTeamDiscussionCommentInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "content" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["content"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Content = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsListForTeamDiscussionCommentLegacyParams(r *http.Request) (ReactionsListForTeamDiscussionCommentLegacyParams, error) {
	var params ReactionsListForTeamDiscussionCommentLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "content" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["content"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Content = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsListForTeamDiscussionInOrgParams(r *http.Request) (ReactionsListForTeamDiscussionInOrgParams, error) {
	var params ReactionsListForTeamDiscussionInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "content" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["content"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Content = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReactionsListForTeamDiscussionLegacyParams(r *http.Request) (ReactionsListForTeamDiscussionLegacyParams, error) {
	var params ReactionsListForTeamDiscussionLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "content" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["content"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Content = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposAcceptInvitationParams(r *http.Request) (ReposAcceptInvitationParams, error) {
	var params ReposAcceptInvitationParams
	// Decode param "invitation_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "invitation_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'invitation_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "invitation_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.InvitationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposCheckCollaboratorParams(r *http.Request) (ReposCheckCollaboratorParams, error) {
	var params ReposCheckCollaboratorParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposCheckVulnerabilityAlertsParams(r *http.Request) (ReposCheckVulnerabilityAlertsParams, error) {
	var params ReposCheckVulnerabilityAlertsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposCompareCommitsParams(r *http.Request) (ReposCompareCommitsParams, error) {
	var params ReposCompareCommitsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "basehead" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "basehead")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'basehead' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "basehead",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Basehead = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposCreateCommitSignatureProtectionParams(r *http.Request) (ReposCreateCommitSignatureProtectionParams, error) {
	var params ReposCreateCommitSignatureProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposCreateCommitStatusParams(r *http.Request) (ReposCreateCommitStatusParams, error) {
	var params ReposCreateCommitStatusParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sha" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "sha")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'sha' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "sha",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Sha = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposCreateUsingTemplateParams(r *http.Request) (ReposCreateUsingTemplateParams, error) {
	var params ReposCreateUsingTemplateParams
	// Decode param "template_owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "template_owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'template_owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "template_owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TemplateOwner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "template_repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "template_repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'template_repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "template_repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TemplateRepo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeclineInvitationParams(r *http.Request) (ReposDeclineInvitationParams, error) {
	var params ReposDeclineInvitationParams
	// Decode param "invitation_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "invitation_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'invitation_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "invitation_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.InvitationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteParams(r *http.Request) (ReposDeleteParams, error) {
	var params ReposDeleteParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteAccessRestrictionsParams(r *http.Request) (ReposDeleteAccessRestrictionsParams, error) {
	var params ReposDeleteAccessRestrictionsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteAdminBranchProtectionParams(r *http.Request) (ReposDeleteAdminBranchProtectionParams, error) {
	var params ReposDeleteAdminBranchProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteAnEnvironmentParams(r *http.Request) (ReposDeleteAnEnvironmentParams, error) {
	var params ReposDeleteAnEnvironmentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "environment_name" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "environment_name")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'environment_name' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "environment_name",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.EnvironmentName = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteAutolinkParams(r *http.Request) (ReposDeleteAutolinkParams, error) {
	var params ReposDeleteAutolinkParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "autolink_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "autolink_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'autolink_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "autolink_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AutolinkID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteBranchProtectionParams(r *http.Request) (ReposDeleteBranchProtectionParams, error) {
	var params ReposDeleteBranchProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteCommitCommentParams(r *http.Request) (ReposDeleteCommitCommentParams, error) {
	var params ReposDeleteCommitCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteCommitSignatureProtectionParams(r *http.Request) (ReposDeleteCommitSignatureProtectionParams, error) {
	var params ReposDeleteCommitSignatureProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteDeployKeyParams(r *http.Request) (ReposDeleteDeployKeyParams, error) {
	var params ReposDeleteDeployKeyParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "key_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "key_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'key_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "key_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.KeyID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteDeploymentParams(r *http.Request) (ReposDeleteDeploymentParams, error) {
	var params ReposDeleteDeploymentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "deployment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "deployment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'deployment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "deployment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DeploymentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteInvitationParams(r *http.Request) (ReposDeleteInvitationParams, error) {
	var params ReposDeleteInvitationParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "invitation_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "invitation_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'invitation_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "invitation_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.InvitationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeletePullRequestReviewProtectionParams(r *http.Request) (ReposDeletePullRequestReviewProtectionParams, error) {
	var params ReposDeletePullRequestReviewProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteReleaseParams(r *http.Request) (ReposDeleteReleaseParams, error) {
	var params ReposDeleteReleaseParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "release_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "release_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'release_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "release_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReleaseID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteReleaseAssetParams(r *http.Request) (ReposDeleteReleaseAssetParams, error) {
	var params ReposDeleteReleaseAssetParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "asset_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "asset_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'asset_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "asset_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AssetID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDeleteWebhookParams(r *http.Request) (ReposDeleteWebhookParams, error) {
	var params ReposDeleteWebhookParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "hook_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "hook_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'hook_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "hook_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.HookID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDisableAutomatedSecurityFixesParams(r *http.Request) (ReposDisableAutomatedSecurityFixesParams, error) {
	var params ReposDisableAutomatedSecurityFixesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDisableLfsForRepoParams(r *http.Request) (ReposDisableLfsForRepoParams, error) {
	var params ReposDisableLfsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDisableVulnerabilityAlertsParams(r *http.Request) (ReposDisableVulnerabilityAlertsParams, error) {
	var params ReposDisableVulnerabilityAlertsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDownloadTarballArchiveParams(r *http.Request) (ReposDownloadTarballArchiveParams, error) {
	var params ReposDownloadTarballArchiveParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "ref" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "ref")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'ref' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "ref",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Ref = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposDownloadZipballArchiveParams(r *http.Request) (ReposDownloadZipballArchiveParams, error) {
	var params ReposDownloadZipballArchiveParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "ref" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "ref")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'ref' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "ref",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Ref = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposEnableAutomatedSecurityFixesParams(r *http.Request) (ReposEnableAutomatedSecurityFixesParams, error) {
	var params ReposEnableAutomatedSecurityFixesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposEnableLfsForRepoParams(r *http.Request) (ReposEnableLfsForRepoParams, error) {
	var params ReposEnableLfsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposEnableVulnerabilityAlertsParams(r *http.Request) (ReposEnableVulnerabilityAlertsParams, error) {
	var params ReposEnableVulnerabilityAlertsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetParams(r *http.Request) (ReposGetParams, error) {
	var params ReposGetParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetAccessRestrictionsParams(r *http.Request) (ReposGetAccessRestrictionsParams, error) {
	var params ReposGetAccessRestrictionsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetAdminBranchProtectionParams(r *http.Request) (ReposGetAdminBranchProtectionParams, error) {
	var params ReposGetAdminBranchProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetAllStatusCheckContextsParams(r *http.Request) (ReposGetAllStatusCheckContextsParams, error) {
	var params ReposGetAllStatusCheckContextsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetAllTopicsParams(r *http.Request) (ReposGetAllTopicsParams, error) {
	var params ReposGetAllTopicsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetAppsWithAccessToProtectedBranchParams(r *http.Request) (ReposGetAppsWithAccessToProtectedBranchParams, error) {
	var params ReposGetAppsWithAccessToProtectedBranchParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetAutolinkParams(r *http.Request) (ReposGetAutolinkParams, error) {
	var params ReposGetAutolinkParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "autolink_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "autolink_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'autolink_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "autolink_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AutolinkID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetBranchParams(r *http.Request) (ReposGetBranchParams, error) {
	var params ReposGetBranchParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetBranchProtectionParams(r *http.Request) (ReposGetBranchProtectionParams, error) {
	var params ReposGetBranchProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetClonesParams(r *http.Request) (ReposGetClonesParams, error) {
	var params ReposGetClonesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Per = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetCodeFrequencyStatsParams(r *http.Request) (ReposGetCodeFrequencyStatsParams, error) {
	var params ReposGetCodeFrequencyStatsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetCollaboratorPermissionLevelParams(r *http.Request) (ReposGetCollaboratorPermissionLevelParams, error) {
	var params ReposGetCollaboratorPermissionLevelParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetCombinedStatusForRefParams(r *http.Request) (ReposGetCombinedStatusForRefParams, error) {
	var params ReposGetCombinedStatusForRefParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "ref" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "ref")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'ref' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "ref",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Ref = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetCommitActivityStatsParams(r *http.Request) (ReposGetCommitActivityStatsParams, error) {
	var params ReposGetCommitActivityStatsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetCommitCommentParams(r *http.Request) (ReposGetCommitCommentParams, error) {
	var params ReposGetCommitCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetCommitSignatureProtectionParams(r *http.Request) (ReposGetCommitSignatureProtectionParams, error) {
	var params ReposGetCommitSignatureProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetCommunityProfileMetricsParams(r *http.Request) (ReposGetCommunityProfileMetricsParams, error) {
	var params ReposGetCommunityProfileMetricsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetContributorsStatsParams(r *http.Request) (ReposGetContributorsStatsParams, error) {
	var params ReposGetContributorsStatsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetDeployKeyParams(r *http.Request) (ReposGetDeployKeyParams, error) {
	var params ReposGetDeployKeyParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "key_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "key_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'key_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "key_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.KeyID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetDeploymentStatusParams(r *http.Request) (ReposGetDeploymentStatusParams, error) {
	var params ReposGetDeploymentStatusParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "deployment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "deployment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'deployment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "deployment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DeploymentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "status_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "status_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'status_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "status_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.StatusID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetLatestPagesBuildParams(r *http.Request) (ReposGetLatestPagesBuildParams, error) {
	var params ReposGetLatestPagesBuildParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetLatestReleaseParams(r *http.Request) (ReposGetLatestReleaseParams, error) {
	var params ReposGetLatestReleaseParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetPagesParams(r *http.Request) (ReposGetPagesParams, error) {
	var params ReposGetPagesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetPagesBuildParams(r *http.Request) (ReposGetPagesBuildParams, error) {
	var params ReposGetPagesBuildParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "build_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "build_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'build_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "build_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.BuildID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetPagesHealthCheckParams(r *http.Request) (ReposGetPagesHealthCheckParams, error) {
	var params ReposGetPagesHealthCheckParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetParticipationStatsParams(r *http.Request) (ReposGetParticipationStatsParams, error) {
	var params ReposGetParticipationStatsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetPullRequestReviewProtectionParams(r *http.Request) (ReposGetPullRequestReviewProtectionParams, error) {
	var params ReposGetPullRequestReviewProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetPunchCardStatsParams(r *http.Request) (ReposGetPunchCardStatsParams, error) {
	var params ReposGetPunchCardStatsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetReleaseParams(r *http.Request) (ReposGetReleaseParams, error) {
	var params ReposGetReleaseParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "release_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "release_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'release_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "release_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReleaseID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetReleaseAssetParams(r *http.Request) (ReposGetReleaseAssetParams, error) {
	var params ReposGetReleaseAssetParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "asset_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "asset_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'asset_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "asset_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AssetID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetReleaseByTagParams(r *http.Request) (ReposGetReleaseByTagParams, error) {
	var params ReposGetReleaseByTagParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "tag" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "tag")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'tag' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "tag",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Tag = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetStatusChecksProtectionParams(r *http.Request) (ReposGetStatusChecksProtectionParams, error) {
	var params ReposGetStatusChecksProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetTeamsWithAccessToProtectedBranchParams(r *http.Request) (ReposGetTeamsWithAccessToProtectedBranchParams, error) {
	var params ReposGetTeamsWithAccessToProtectedBranchParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetTopPathsParams(r *http.Request) (ReposGetTopPathsParams, error) {
	var params ReposGetTopPathsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetTopReferrersParams(r *http.Request) (ReposGetTopReferrersParams, error) {
	var params ReposGetTopReferrersParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetUsersWithAccessToProtectedBranchParams(r *http.Request) (ReposGetUsersWithAccessToProtectedBranchParams, error) {
	var params ReposGetUsersWithAccessToProtectedBranchParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetViewsParams(r *http.Request) (ReposGetViewsParams, error) {
	var params ReposGetViewsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Per = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetWebhookParams(r *http.Request) (ReposGetWebhookParams, error) {
	var params ReposGetWebhookParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "hook_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "hook_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'hook_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "hook_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.HookID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposGetWebhookConfigForRepoParams(r *http.Request) (ReposGetWebhookConfigForRepoParams, error) {
	var params ReposGetWebhookConfigForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "hook_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "hook_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'hook_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "hook_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.HookID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListAutolinksParams(r *http.Request) (ReposListAutolinksParams, error) {
	var params ReposListAutolinksParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListBranchesParams(r *http.Request) (ReposListBranchesParams, error) {
	var params ReposListBranchesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "protected" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["protected"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeBool()
		if err != nil {
			return err
		}

		params.Protected = bool(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListCollaboratorsParams(r *http.Request) (ReposListCollaboratorsParams, error) {
	var params ReposListCollaboratorsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "affiliation" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["affiliation"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Affiliation = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListCommentsForCommitParams(r *http.Request) (ReposListCommentsForCommitParams, error) {
	var params ReposListCommentsForCommitParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "commit_sha" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "commit_sha")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'commit_sha' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "commit_sha",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.CommitSha = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListCommitCommentsForRepoParams(r *http.Request) (ReposListCommitCommentsForRepoParams, error) {
	var params ReposListCommitCommentsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListCommitStatusesForRefParams(r *http.Request) (ReposListCommitStatusesForRefParams, error) {
	var params ReposListCommitStatusesForRefParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "ref" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "ref")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'ref' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "ref",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Ref = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListCommitsParams(r *http.Request) (ReposListCommitsParams, error) {
	var params ReposListCommitsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sha" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["sha"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Sha = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "path" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["path"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Path = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "author" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["author"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Author = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "since" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["since"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeTime()
		if err != nil {
			return err
		}

		params.Since = time.Time(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "until" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["until"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeTime()
		if err != nil {
			return err
		}

		params.Until = time.Time(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListContributorsParams(r *http.Request) (ReposListContributorsParams, error) {
	var params ReposListContributorsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "anon" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["anon"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Anon = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListDeployKeysParams(r *http.Request) (ReposListDeployKeysParams, error) {
	var params ReposListDeployKeysParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListDeploymentStatusesParams(r *http.Request) (ReposListDeploymentStatusesParams, error) {
	var params ReposListDeploymentStatusesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "deployment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "deployment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'deployment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "deployment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DeploymentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListForOrgParams(r *http.Request) (ReposListForOrgParams, error) {
	var params ReposListForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "type" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["type"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Type = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sort" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["sort"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Sort = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "direction" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["direction"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Direction = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListForUserParams(r *http.Request) (ReposListForUserParams, error) {
	var params ReposListForUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "type" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["type"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Type = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sort" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["sort"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Sort = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "direction" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["direction"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Direction = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListForksParams(r *http.Request) (ReposListForksParams, error) {
	var params ReposListForksParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sort" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["sort"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Sort = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListInvitationsParams(r *http.Request) (ReposListInvitationsParams, error) {
	var params ReposListInvitationsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListInvitationsForAuthenticatedUserParams(r *http.Request) (ReposListInvitationsForAuthenticatedUserParams, error) {
	var params ReposListInvitationsForAuthenticatedUserParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListLanguagesParams(r *http.Request) (ReposListLanguagesParams, error) {
	var params ReposListLanguagesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListPagesBuildsParams(r *http.Request) (ReposListPagesBuildsParams, error) {
	var params ReposListPagesBuildsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListPullRequestsAssociatedWithCommitParams(r *http.Request) (ReposListPullRequestsAssociatedWithCommitParams, error) {
	var params ReposListPullRequestsAssociatedWithCommitParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "commit_sha" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "commit_sha")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'commit_sha' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "commit_sha",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.CommitSha = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListReleaseAssetsParams(r *http.Request) (ReposListReleaseAssetsParams, error) {
	var params ReposListReleaseAssetsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "release_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "release_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'release_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "release_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReleaseID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListReleasesParams(r *http.Request) (ReposListReleasesParams, error) {
	var params ReposListReleasesParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListTagsParams(r *http.Request) (ReposListTagsParams, error) {
	var params ReposListTagsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListTeamsParams(r *http.Request) (ReposListTeamsParams, error) {
	var params ReposListTeamsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposListWebhooksParams(r *http.Request) (ReposListWebhooksParams, error) {
	var params ReposListWebhooksParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposMergeUpstreamParams(r *http.Request) (ReposMergeUpstreamParams, error) {
	var params ReposMergeUpstreamParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposPingWebhookParams(r *http.Request) (ReposPingWebhookParams, error) {
	var params ReposPingWebhookParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "hook_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "hook_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'hook_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "hook_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.HookID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposRemoveCollaboratorParams(r *http.Request) (ReposRemoveCollaboratorParams, error) {
	var params ReposRemoveCollaboratorParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposRemoveStatusCheckProtectionParams(r *http.Request) (ReposRemoveStatusCheckProtectionParams, error) {
	var params ReposRemoveStatusCheckProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposReplaceAllTopicsParams(r *http.Request) (ReposReplaceAllTopicsParams, error) {
	var params ReposReplaceAllTopicsParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposRequestPagesBuildParams(r *http.Request) (ReposRequestPagesBuildParams, error) {
	var params ReposRequestPagesBuildParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposSetAdminBranchProtectionParams(r *http.Request) (ReposSetAdminBranchProtectionParams, error) {
	var params ReposSetAdminBranchProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposTestPushWebhookParams(r *http.Request) (ReposTestPushWebhookParams, error) {
	var params ReposTestPushWebhookParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "hook_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "hook_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'hook_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "hook_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.HookID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposTransferParams(r *http.Request) (ReposTransferParams, error) {
	var params ReposTransferParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposUpdateBranchProtectionParams(r *http.Request) (ReposUpdateBranchProtectionParams, error) {
	var params ReposUpdateBranchProtectionParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "branch" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "branch")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'branch' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "branch",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Branch = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposUpdateCommitCommentParams(r *http.Request) (ReposUpdateCommitCommentParams, error) {
	var params ReposUpdateCommitCommentParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposUpdateInvitationParams(r *http.Request) (ReposUpdateInvitationParams, error) {
	var params ReposUpdateInvitationParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "invitation_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "invitation_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'invitation_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "invitation_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.InvitationID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposUpdateReleaseParams(r *http.Request) (ReposUpdateReleaseParams, error) {
	var params ReposUpdateReleaseParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "release_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "release_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'release_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "release_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReleaseID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposUpdateReleaseAssetParams(r *http.Request) (ReposUpdateReleaseAssetParams, error) {
	var params ReposUpdateReleaseAssetParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "asset_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "asset_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'asset_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "asset_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AssetID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposUpdateWebhookConfigForRepoParams(r *http.Request) (ReposUpdateWebhookConfigForRepoParams, error) {
	var params ReposUpdateWebhookConfigForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "hook_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "hook_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'hook_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "hook_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.HookID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeReposUploadReleaseAssetParams(r *http.Request) (ReposUploadReleaseAssetParams, error) {
	var params ReposUploadReleaseAssetParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "release_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "release_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'release_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "release_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ReleaseID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "name" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["name"]
		if !ok {
			return fmt.Errorf("query parameter 'name' not specified")
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Name = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "label" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["label"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Label = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeScimDeleteUserFromOrgParams(r *http.Request) (ScimDeleteUserFromOrgParams, error) {
	var params ScimDeleteUserFromOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "scim_user_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "scim_user_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'scim_user_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "scim_user_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.ScimUserID = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeSearchCommitsParams(r *http.Request) (SearchCommitsParams, error) {
	var params SearchCommitsParams
	// Decode param "q" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["q"]
		if !ok {
			return fmt.Errorf("query parameter 'q' not specified")
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Q = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "sort" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["sort"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Sort = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "order" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["order"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Order = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeSearchTopicsParams(r *http.Request) (SearchTopicsParams, error) {
	var params SearchTopicsParams
	// Decode param "q" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["q"]
		if !ok {
			return fmt.Errorf("query parameter 'q' not specified")
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Q = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeSecretScanningGetAlertParams(r *http.Request) (SecretScanningGetAlertParams, error) {
	var params SecretScanningGetAlertParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "alert_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "alert_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'alert_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "alert_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AlertNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeSecretScanningListAlertsForOrgParams(r *http.Request) (SecretScanningListAlertsForOrgParams, error) {
	var params SecretScanningListAlertsForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "state" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["state"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.State = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_type" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["secret_type"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeSecretScanningListAlertsForRepoParams(r *http.Request) (SecretScanningListAlertsForRepoParams, error) {
	var params SecretScanningListAlertsForRepoParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "state" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["state"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.State = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "secret_type" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["secret_type"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.SecretType = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeSecretScanningUpdateAlertParams(r *http.Request) (SecretScanningUpdateAlertParams, error) {
	var params SecretScanningUpdateAlertParams
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "alert_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "alert_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'alert_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "alert_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.AlertNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsAddMemberLegacyParams(r *http.Request) (TeamsAddMemberLegacyParams, error) {
	var params TeamsAddMemberLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsAddOrUpdateMembershipForUserInOrgParams(r *http.Request) (TeamsAddOrUpdateMembershipForUserInOrgParams, error) {
	var params TeamsAddOrUpdateMembershipForUserInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsAddOrUpdateMembershipForUserLegacyParams(r *http.Request) (TeamsAddOrUpdateMembershipForUserLegacyParams, error) {
	var params TeamsAddOrUpdateMembershipForUserLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsAddOrUpdateProjectPermissionsInOrgParams(r *http.Request) (TeamsAddOrUpdateProjectPermissionsInOrgParams, error) {
	var params TeamsAddOrUpdateProjectPermissionsInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "project_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "project_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'project_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "project_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ProjectID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsAddOrUpdateRepoPermissionsInOrgParams(r *http.Request) (TeamsAddOrUpdateRepoPermissionsInOrgParams, error) {
	var params TeamsAddOrUpdateRepoPermissionsInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsCheckPermissionsForProjectInOrgParams(r *http.Request) (TeamsCheckPermissionsForProjectInOrgParams, error) {
	var params TeamsCheckPermissionsForProjectInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "project_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "project_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'project_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "project_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ProjectID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsCheckPermissionsForProjectLegacyParams(r *http.Request) (TeamsCheckPermissionsForProjectLegacyParams, error) {
	var params TeamsCheckPermissionsForProjectLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "project_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "project_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'project_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "project_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ProjectID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsCheckPermissionsForRepoInOrgParams(r *http.Request) (TeamsCheckPermissionsForRepoInOrgParams, error) {
	var params TeamsCheckPermissionsForRepoInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsCheckPermissionsForRepoLegacyParams(r *http.Request) (TeamsCheckPermissionsForRepoLegacyParams, error) {
	var params TeamsCheckPermissionsForRepoLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsCreateDiscussionCommentInOrgParams(r *http.Request) (TeamsCreateDiscussionCommentInOrgParams, error) {
	var params TeamsCreateDiscussionCommentInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsCreateDiscussionCommentLegacyParams(r *http.Request) (TeamsCreateDiscussionCommentLegacyParams, error) {
	var params TeamsCreateDiscussionCommentLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsCreateDiscussionInOrgParams(r *http.Request) (TeamsCreateDiscussionInOrgParams, error) {
	var params TeamsCreateDiscussionInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsCreateDiscussionLegacyParams(r *http.Request) (TeamsCreateDiscussionLegacyParams, error) {
	var params TeamsCreateDiscussionLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsCreateOrUpdateIdpGroupConnectionsInOrgParams(r *http.Request) (TeamsCreateOrUpdateIdpGroupConnectionsInOrgParams, error) {
	var params TeamsCreateOrUpdateIdpGroupConnectionsInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsDeleteDiscussionCommentInOrgParams(r *http.Request) (TeamsDeleteDiscussionCommentInOrgParams, error) {
	var params TeamsDeleteDiscussionCommentInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsDeleteDiscussionCommentLegacyParams(r *http.Request) (TeamsDeleteDiscussionCommentLegacyParams, error) {
	var params TeamsDeleteDiscussionCommentLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsDeleteDiscussionInOrgParams(r *http.Request) (TeamsDeleteDiscussionInOrgParams, error) {
	var params TeamsDeleteDiscussionInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsDeleteDiscussionLegacyParams(r *http.Request) (TeamsDeleteDiscussionLegacyParams, error) {
	var params TeamsDeleteDiscussionLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsDeleteInOrgParams(r *http.Request) (TeamsDeleteInOrgParams, error) {
	var params TeamsDeleteInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsGetByNameParams(r *http.Request) (TeamsGetByNameParams, error) {
	var params TeamsGetByNameParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsGetDiscussionCommentInOrgParams(r *http.Request) (TeamsGetDiscussionCommentInOrgParams, error) {
	var params TeamsGetDiscussionCommentInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsGetDiscussionCommentLegacyParams(r *http.Request) (TeamsGetDiscussionCommentLegacyParams, error) {
	var params TeamsGetDiscussionCommentLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsGetDiscussionInOrgParams(r *http.Request) (TeamsGetDiscussionInOrgParams, error) {
	var params TeamsGetDiscussionInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsGetDiscussionLegacyParams(r *http.Request) (TeamsGetDiscussionLegacyParams, error) {
	var params TeamsGetDiscussionLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsGetLegacyParams(r *http.Request) (TeamsGetLegacyParams, error) {
	var params TeamsGetLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsGetMemberLegacyParams(r *http.Request) (TeamsGetMemberLegacyParams, error) {
	var params TeamsGetMemberLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsGetMembershipForUserInOrgParams(r *http.Request) (TeamsGetMembershipForUserInOrgParams, error) {
	var params TeamsGetMembershipForUserInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsGetMembershipForUserLegacyParams(r *http.Request) (TeamsGetMembershipForUserLegacyParams, error) {
	var params TeamsGetMembershipForUserLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListParams(r *http.Request) (TeamsListParams, error) {
	var params TeamsListParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListChildInOrgParams(r *http.Request) (TeamsListChildInOrgParams, error) {
	var params TeamsListChildInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListDiscussionCommentsInOrgParams(r *http.Request) (TeamsListDiscussionCommentsInOrgParams, error) {
	var params TeamsListDiscussionCommentsInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "direction" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["direction"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Direction = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListDiscussionCommentsLegacyParams(r *http.Request) (TeamsListDiscussionCommentsLegacyParams, error) {
	var params TeamsListDiscussionCommentsLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "direction" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["direction"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Direction = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListDiscussionsInOrgParams(r *http.Request) (TeamsListDiscussionsInOrgParams, error) {
	var params TeamsListDiscussionsInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "direction" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["direction"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Direction = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "pinned" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["pinned"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Pinned = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListDiscussionsLegacyParams(r *http.Request) (TeamsListDiscussionsLegacyParams, error) {
	var params TeamsListDiscussionsLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "direction" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["direction"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Direction = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListForAuthenticatedUserParams(r *http.Request) (TeamsListForAuthenticatedUserParams, error) {
	var params TeamsListForAuthenticatedUserParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListIdpGroupsForLegacyParams(r *http.Request) (TeamsListIdpGroupsForLegacyParams, error) {
	var params TeamsListIdpGroupsForLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListIdpGroupsForOrgParams(r *http.Request) (TeamsListIdpGroupsForOrgParams, error) {
	var params TeamsListIdpGroupsForOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Page = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListIdpGroupsInOrgParams(r *http.Request) (TeamsListIdpGroupsInOrgParams, error) {
	var params TeamsListIdpGroupsInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListMembersInOrgParams(r *http.Request) (TeamsListMembersInOrgParams, error) {
	var params TeamsListMembersInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "role" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["role"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Role = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListMembersLegacyParams(r *http.Request) (TeamsListMembersLegacyParams, error) {
	var params TeamsListMembersLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "role" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["role"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Role = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListPendingInvitationsInOrgParams(r *http.Request) (TeamsListPendingInvitationsInOrgParams, error) {
	var params TeamsListPendingInvitationsInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListPendingInvitationsLegacyParams(r *http.Request) (TeamsListPendingInvitationsLegacyParams, error) {
	var params TeamsListPendingInvitationsLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListProjectsInOrgParams(r *http.Request) (TeamsListProjectsInOrgParams, error) {
	var params TeamsListProjectsInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListProjectsLegacyParams(r *http.Request) (TeamsListProjectsLegacyParams, error) {
	var params TeamsListProjectsLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListReposInOrgParams(r *http.Request) (TeamsListReposInOrgParams, error) {
	var params TeamsListReposInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsListReposLegacyParams(r *http.Request) (TeamsListReposLegacyParams, error) {
	var params TeamsListReposLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsRemoveMemberLegacyParams(r *http.Request) (TeamsRemoveMemberLegacyParams, error) {
	var params TeamsRemoveMemberLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsRemoveMembershipForUserInOrgParams(r *http.Request) (TeamsRemoveMembershipForUserInOrgParams, error) {
	var params TeamsRemoveMembershipForUserInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsRemoveMembershipForUserLegacyParams(r *http.Request) (TeamsRemoveMembershipForUserLegacyParams, error) {
	var params TeamsRemoveMembershipForUserLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsRemoveProjectInOrgParams(r *http.Request) (TeamsRemoveProjectInOrgParams, error) {
	var params TeamsRemoveProjectInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "project_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "project_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'project_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "project_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.ProjectID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsRemoveRepoInOrgParams(r *http.Request) (TeamsRemoveRepoInOrgParams, error) {
	var params TeamsRemoveRepoInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsRemoveRepoLegacyParams(r *http.Request) (TeamsRemoveRepoLegacyParams, error) {
	var params TeamsRemoveRepoLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "owner" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "owner")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'owner' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "owner",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Owner = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "repo" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "repo")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'repo' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "repo",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Repo = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsUpdateDiscussionCommentInOrgParams(r *http.Request) (TeamsUpdateDiscussionCommentInOrgParams, error) {
	var params TeamsUpdateDiscussionCommentInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsUpdateDiscussionCommentLegacyParams(r *http.Request) (TeamsUpdateDiscussionCommentLegacyParams, error) {
	var params TeamsUpdateDiscussionCommentLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "comment_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "comment_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'comment_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "comment_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.CommentNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsUpdateDiscussionInOrgParams(r *http.Request) (TeamsUpdateDiscussionInOrgParams, error) {
	var params TeamsUpdateDiscussionInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsUpdateDiscussionLegacyParams(r *http.Request) (TeamsUpdateDiscussionLegacyParams, error) {
	var params TeamsUpdateDiscussionLegacyParams
	// Decode param "team_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.TeamID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "discussion_number" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "discussion_number")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'discussion_number' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "discussion_number",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.DiscussionNumber = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeTeamsUpdateInOrgParams(r *http.Request) (TeamsUpdateInOrgParams, error) {
	var params TeamsUpdateInOrgParams
	// Decode param "org" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "org")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'org' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "org",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Org = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "team_slug" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "team_slug")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'team_slug' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "team_slug",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TeamSlug = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersCheckBlockedParams(r *http.Request) (UsersCheckBlockedParams, error) {
	var params UsersCheckBlockedParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersCheckFollowingForUserParams(r *http.Request) (UsersCheckFollowingForUserParams, error) {
	var params UsersCheckFollowingForUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "target_user" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "target_user")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'target_user' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "target_user",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.TargetUser = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersCheckPersonIsFollowedByAuthenticatedParams(r *http.Request) (UsersCheckPersonIsFollowedByAuthenticatedParams, error) {
	var params UsersCheckPersonIsFollowedByAuthenticatedParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersDeletePublicSSHKeyForAuthenticatedParams(r *http.Request) (UsersDeletePublicSSHKeyForAuthenticatedParams, error) {
	var params UsersDeletePublicSSHKeyForAuthenticatedParams
	// Decode param "key_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "key_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'key_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "key_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.KeyID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersFollowParams(r *http.Request) (UsersFollowParams, error) {
	var params UsersFollowParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersGetGpgKeyForAuthenticatedParams(r *http.Request) (UsersGetGpgKeyForAuthenticatedParams, error) {
	var params UsersGetGpgKeyForAuthenticatedParams
	// Decode param "gpg_key_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "gpg_key_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'gpg_key_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "gpg_key_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.GpgKeyID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersGetPublicSSHKeyForAuthenticatedParams(r *http.Request) (UsersGetPublicSSHKeyForAuthenticatedParams, error) {
	var params UsersGetPublicSSHKeyForAuthenticatedParams
	// Decode param "key_id" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "key_id")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'key_id' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "key_id",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.KeyID = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersListParams(r *http.Request) (UsersListParams, error) {
	var params UsersListParams
	// Decode param "since" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["since"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Since = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersListEmailsForAuthenticatedParams(r *http.Request) (UsersListEmailsForAuthenticatedParams, error) {
	var params UsersListEmailsForAuthenticatedParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersListFollowedByAuthenticatedParams(r *http.Request) (UsersListFollowedByAuthenticatedParams, error) {
	var params UsersListFollowedByAuthenticatedParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersListFollowersForAuthenticatedUserParams(r *http.Request) (UsersListFollowersForAuthenticatedUserParams, error) {
	var params UsersListFollowersForAuthenticatedUserParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersListFollowersForUserParams(r *http.Request) (UsersListFollowersForUserParams, error) {
	var params UsersListFollowersForUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersListFollowingForUserParams(r *http.Request) (UsersListFollowingForUserParams, error) {
	var params UsersListFollowingForUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersListGpgKeysForAuthenticatedParams(r *http.Request) (UsersListGpgKeysForAuthenticatedParams, error) {
	var params UsersListGpgKeysForAuthenticatedParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersListGpgKeysForUserParams(r *http.Request) (UsersListGpgKeysForUserParams, error) {
	var params UsersListGpgKeysForUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersListPublicEmailsForAuthenticatedParams(r *http.Request) (UsersListPublicEmailsForAuthenticatedParams, error) {
	var params UsersListPublicEmailsForAuthenticatedParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersListPublicKeysForUserParams(r *http.Request) (UsersListPublicKeysForUserParams, error) {
	var params UsersListPublicKeysForUserParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersListPublicSSHKeysForAuthenticatedParams(r *http.Request) (UsersListPublicSSHKeysForAuthenticatedParams, error) {
	var params UsersListPublicSSHKeysForAuthenticatedParams
	// Decode param "per_page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["per_page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.PerPage = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	// Decode param "page" located in "Query".
	if err := func() error {
		values, ok := r.URL.Query()["page"]
		if !ok {
			return nil
		}

		d := uri.NewQueryDecoder(uri.QueryDecoderConfig{
			Values:  values,
			Style:   uri.QueryStyleForm,
			Explode: true,
		})

		v, err := d.DecodeInt()
		if err != nil {
			return err
		}

		params.Page = int(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersUnblockParams(r *http.Request) (UsersUnblockParams, error) {
	var params UsersUnblockParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}

func decodeUsersUnfollowParams(r *http.Request) (UsersUnfollowParams, error) {
	var params UsersUnfollowParams
	// Decode param "username" located in "Path".
	if err := func() error {
		param := chi.URLParam(r, "username")
		if len(param) == 0 {
			return fmt.Errorf("path parameter 'username' not specified")
		}

		d := uri.NewPathDecoder(uri.PathDecoderConfig{
			Param:   "username",
			Value:   param,
			Style:   uri.PathStyleSimple,
			Explode: false,
		})

		v, err := d.DecodeString()
		if err != nil {
			return err
		}

		params.Username = string(v)
		return nil
	}(); err != nil {
		return params, err
	}
	return params, nil
}
