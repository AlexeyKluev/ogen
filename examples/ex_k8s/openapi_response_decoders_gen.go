// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/encoding/json"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
)

func decodeGetServiceAccountIssuerOpenIDConfigurationResponse(resp *http.Response) (_ GetServiceAccountIssuerOpenIDConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response GetServiceAccountIssuerOpenIDConfigurationOK
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetServiceAccountIssuerOpenIDConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetCoreAPIVersionsResponse(resp *http.Response) (_ GetCoreAPIVersionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIVersions
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetCoreAPIVersionsUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetCoreV1APIResourcesResponse(resp *http.Response) (_ GetCoreV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetCoreV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1ComponentStatusResponse(resp *http.Response) (_ ListCoreV1ComponentStatusResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1ComponentStatusList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1ComponentStatusUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1ConfigMapForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1ConfigMapForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1ConfigMapList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1ConfigMapForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1EndpointsForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1EndpointsForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1EndpointsList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1EndpointsForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1EventForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1EventForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1EventList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1EventForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1LimitRangeForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1LimitRangeForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1LimitRangeList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1LimitRangeForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1NamespaceResponse(resp *http.Response) (_ ListCoreV1NamespaceResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1NamespaceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1NamespaceUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateCoreV1NamespaceResponse(resp *http.Response) (_ CreateCoreV1NamespaceResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1Namespace
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1Namespace
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1Namespace
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateCoreV1NamespaceUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1NodeResponse(resp *http.Response) (_ ListCoreV1NodeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1NodeList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1NodeUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateCoreV1NodeResponse(resp *http.Response) (_ CreateCoreV1NodeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1Node
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1Node
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1Node
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateCoreV1NodeUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteCoreV1CollectionNodeResponse(resp *http.Response) (_ DeleteCoreV1CollectionNodeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteCoreV1CollectionNodeUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1PersistentVolumeClaimForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1PersistentVolumeClaimForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1PersistentVolumeClaimList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1PersistentVolumeResponse(resp *http.Response) (_ ListCoreV1PersistentVolumeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1PersistentVolumeList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1PersistentVolumeUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateCoreV1PersistentVolumeResponse(resp *http.Response) (_ CreateCoreV1PersistentVolumeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1PersistentVolume
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1PersistentVolume
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1PersistentVolume
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateCoreV1PersistentVolumeUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteCoreV1CollectionPersistentVolumeResponse(resp *http.Response) (_ DeleteCoreV1CollectionPersistentVolumeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteCoreV1CollectionPersistentVolumeUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1PodForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1PodForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1PodList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1PodForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1PodTemplateForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1PodTemplateForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1PodTemplateList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1PodTemplateForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1ReplicationControllerForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1ReplicationControllerForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1ReplicationControllerList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1ReplicationControllerForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1ResourceQuotaForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1ResourceQuotaForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1ResourceQuotaList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1ResourceQuotaForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1SecretForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1SecretForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1SecretList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1SecretForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1ServiceAccountForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1ServiceAccountForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1ServiceAccountList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1ServiceAccountForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoreV1ServiceForAllNamespacesResponse(resp *http.Response) (_ ListCoreV1ServiceForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoreV1ServiceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoreV1ServiceForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1ConfigMapListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1ConfigMapListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1ConfigMapListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1EndpointsListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1EndpointsListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1EndpointsListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1EventListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1EventListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1EventListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1LimitRangeListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1LimitRangeListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1LimitRangeListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1NamespaceListResponse(resp *http.Response) (_ WatchCoreV1NamespaceListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1NamespaceListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1NodeListResponse(resp *http.Response) (_ WatchCoreV1NodeListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1NodeListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1PersistentVolumeClaimListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1PersistentVolumeListResponse(resp *http.Response) (_ WatchCoreV1PersistentVolumeListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1PersistentVolumeListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1PodListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1PodListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1PodListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1PodTemplateListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1PodTemplateListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1PodTemplateListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1ReplicationControllerListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1ReplicationControllerListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1ResourceQuotaListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1ResourceQuotaListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1SecretListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1SecretListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1SecretListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1ServiceAccountListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1ServiceAccountListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoreV1ServiceListForAllNamespacesResponse(resp *http.Response) (_ WatchCoreV1ServiceListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoreV1ServiceListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAPIVersionsResponse(resp *http.Response) (_ GetAPIVersionsResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroupList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAPIVersionsUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAdmissionregistrationAPIGroupResponse(resp *http.Response) (_ GetAdmissionregistrationAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAdmissionregistrationAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAdmissionregistrationV1APIResourcesResponse(resp *http.Response) (_ GetAdmissionregistrationV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAdmissionregistrationV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListAdmissionregistrationV1MutatingWebhookConfigurationResponse(resp *http.Response) (_ ListAdmissionregistrationV1MutatingWebhookConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateAdmissionregistrationV1MutatingWebhookConfigurationResponse(resp *http.Response) (_ CreateAdmissionregistrationV1MutatingWebhookConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResponse(resp *http.Response) (_ DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListAdmissionregistrationV1ValidatingWebhookConfigurationResponse(resp *http.Response) (_ ListAdmissionregistrationV1ValidatingWebhookConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateAdmissionregistrationV1ValidatingWebhookConfigurationResponse(resp *http.Response) (_ CreateAdmissionregistrationV1ValidatingWebhookConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResponse(resp *http.Response) (_ DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchAdmissionregistrationV1MutatingWebhookConfigurationListResponse(resp *http.Response) (_ WatchAdmissionregistrationV1MutatingWebhookConfigurationListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchAdmissionregistrationV1ValidatingWebhookConfigurationListResponse(resp *http.Response) (_ WatchAdmissionregistrationV1ValidatingWebhookConfigurationListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetApiextensionsAPIGroupResponse(resp *http.Response) (_ GetApiextensionsAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetApiextensionsAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetApiextensionsV1APIResourcesResponse(resp *http.Response) (_ GetApiextensionsV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetApiextensionsV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListApiextensionsV1CustomResourceDefinitionResponse(resp *http.Response) (_ ListApiextensionsV1CustomResourceDefinitionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListApiextensionsV1CustomResourceDefinitionUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateApiextensionsV1CustomResourceDefinitionResponse(resp *http.Response) (_ CreateApiextensionsV1CustomResourceDefinitionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateApiextensionsV1CustomResourceDefinitionUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteApiextensionsV1CollectionCustomResourceDefinitionResponse(resp *http.Response) (_ DeleteApiextensionsV1CollectionCustomResourceDefinitionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteApiextensionsV1CollectionCustomResourceDefinitionUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchApiextensionsV1CustomResourceDefinitionListResponse(resp *http.Response) (_ WatchApiextensionsV1CustomResourceDefinitionListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchApiextensionsV1CustomResourceDefinitionListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetApiregistrationAPIGroupResponse(resp *http.Response) (_ GetApiregistrationAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetApiregistrationAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetApiregistrationV1APIResourcesResponse(resp *http.Response) (_ GetApiregistrationV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetApiregistrationV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListApiregistrationV1APIServiceResponse(resp *http.Response) (_ ListApiregistrationV1APIServiceResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListApiregistrationV1APIServiceUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateApiregistrationV1APIServiceResponse(resp *http.Response) (_ CreateApiregistrationV1APIServiceResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sKubeAggregatorPkgApisApiregistrationV1APIService
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sKubeAggregatorPkgApisApiregistrationV1APIService
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sKubeAggregatorPkgApisApiregistrationV1APIService
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateApiregistrationV1APIServiceUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteApiregistrationV1CollectionAPIServiceResponse(resp *http.Response) (_ DeleteApiregistrationV1CollectionAPIServiceResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteApiregistrationV1CollectionAPIServiceUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchApiregistrationV1APIServiceListResponse(resp *http.Response) (_ WatchApiregistrationV1APIServiceListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchApiregistrationV1APIServiceListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAppsAPIGroupResponse(resp *http.Response) (_ GetAppsAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAppsAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAppsV1APIResourcesResponse(resp *http.Response) (_ GetAppsV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAppsV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListAppsV1ControllerRevisionForAllNamespacesResponse(resp *http.Response) (_ ListAppsV1ControllerRevisionForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAppsV1ControllerRevisionList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListAppsV1ControllerRevisionForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListAppsV1DaemonSetForAllNamespacesResponse(resp *http.Response) (_ ListAppsV1DaemonSetForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAppsV1DaemonSetList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListAppsV1DaemonSetForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListAppsV1DeploymentForAllNamespacesResponse(resp *http.Response) (_ ListAppsV1DeploymentForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAppsV1DeploymentList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListAppsV1DeploymentForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListAppsV1ReplicaSetForAllNamespacesResponse(resp *http.Response) (_ ListAppsV1ReplicaSetForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAppsV1ReplicaSetList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListAppsV1ReplicaSetForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListAppsV1StatefulSetForAllNamespacesResponse(resp *http.Response) (_ ListAppsV1StatefulSetForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAppsV1StatefulSetList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListAppsV1StatefulSetForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchAppsV1ControllerRevisionListForAllNamespacesResponse(resp *http.Response) (_ WatchAppsV1ControllerRevisionListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchAppsV1DaemonSetListForAllNamespacesResponse(resp *http.Response) (_ WatchAppsV1DaemonSetListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchAppsV1DaemonSetListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchAppsV1DeploymentListForAllNamespacesResponse(resp *http.Response) (_ WatchAppsV1DeploymentListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchAppsV1DeploymentListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchAppsV1ReplicaSetListForAllNamespacesResponse(resp *http.Response) (_ WatchAppsV1ReplicaSetListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchAppsV1StatefulSetListForAllNamespacesResponse(resp *http.Response) (_ WatchAppsV1StatefulSetListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchAppsV1StatefulSetListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAuthenticationAPIGroupResponse(resp *http.Response) (_ GetAuthenticationAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAuthenticationAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAuthenticationV1APIResourcesResponse(resp *http.Response) (_ GetAuthenticationV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAuthenticationV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateAuthenticationV1TokenReviewResponse(resp *http.Response) (_ CreateAuthenticationV1TokenReviewResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthenticationV1TokenReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthenticationV1TokenReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthenticationV1TokenReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateAuthenticationV1TokenReviewUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAuthorizationAPIGroupResponse(resp *http.Response) (_ GetAuthorizationAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAuthorizationAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAuthorizationV1APIResourcesResponse(resp *http.Response) (_ GetAuthorizationV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAuthorizationV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateAuthorizationV1SelfSubjectAccessReviewResponse(resp *http.Response) (_ CreateAuthorizationV1SelfSubjectAccessReviewResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthorizationV1SelfSubjectAccessReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthorizationV1SelfSubjectAccessReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthorizationV1SelfSubjectAccessReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateAuthorizationV1SelfSubjectAccessReviewUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateAuthorizationV1SelfSubjectRulesReviewResponse(resp *http.Response) (_ CreateAuthorizationV1SelfSubjectRulesReviewResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthorizationV1SelfSubjectRulesReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthorizationV1SelfSubjectRulesReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthorizationV1SelfSubjectRulesReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateAuthorizationV1SelfSubjectRulesReviewUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateAuthorizationV1SubjectAccessReviewResponse(resp *http.Response) (_ CreateAuthorizationV1SubjectAccessReviewResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthorizationV1SubjectAccessReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthorizationV1SubjectAccessReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAuthorizationV1SubjectAccessReview
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateAuthorizationV1SubjectAccessReviewUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAutoscalingAPIGroupResponse(resp *http.Response) (_ GetAutoscalingAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAutoscalingAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAutoscalingV1APIResourcesResponse(resp *http.Response) (_ GetAutoscalingV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAutoscalingV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse(resp *http.Response) (_ ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse(resp *http.Response) (_ WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAutoscalingV2beta1APIResourcesResponse(resp *http.Response) (_ GetAutoscalingV2beta1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAutoscalingV2beta1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse(resp *http.Response) (_ ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse(resp *http.Response) (_ WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetAutoscalingV2beta2APIResourcesResponse(resp *http.Response) (_ GetAutoscalingV2beta2APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetAutoscalingV2beta2APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResponse(resp *http.Response) (_ ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResponse(resp *http.Response) (_ WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetBatchAPIGroupResponse(resp *http.Response) (_ GetBatchAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetBatchAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetBatchV1APIResourcesResponse(resp *http.Response) (_ GetBatchV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetBatchV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListBatchV1CronJobForAllNamespacesResponse(resp *http.Response) (_ ListBatchV1CronJobForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIBatchV1CronJobList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListBatchV1CronJobForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListBatchV1JobForAllNamespacesResponse(resp *http.Response) (_ ListBatchV1JobForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIBatchV1JobList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListBatchV1JobForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchBatchV1CronJobListForAllNamespacesResponse(resp *http.Response) (_ WatchBatchV1CronJobListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchBatchV1CronJobListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchBatchV1JobListForAllNamespacesResponse(resp *http.Response) (_ WatchBatchV1JobListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchBatchV1JobListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetBatchV1beta1APIResourcesResponse(resp *http.Response) (_ GetBatchV1beta1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetBatchV1beta1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListBatchV1beta1CronJobForAllNamespacesResponse(resp *http.Response) (_ ListBatchV1beta1CronJobForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIBatchV1beta1CronJobList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListBatchV1beta1CronJobForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchBatchV1beta1CronJobListForAllNamespacesResponse(resp *http.Response) (_ WatchBatchV1beta1CronJobListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetCertificatesAPIGroupResponse(resp *http.Response) (_ GetCertificatesAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetCertificatesAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetCertificatesV1APIResourcesResponse(resp *http.Response) (_ GetCertificatesV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetCertificatesV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCertificatesV1CertificateSigningRequestResponse(resp *http.Response) (_ ListCertificatesV1CertificateSigningRequestResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICertificatesV1CertificateSigningRequestList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCertificatesV1CertificateSigningRequestUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateCertificatesV1CertificateSigningRequestResponse(resp *http.Response) (_ CreateCertificatesV1CertificateSigningRequestResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICertificatesV1CertificateSigningRequest
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICertificatesV1CertificateSigningRequest
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICertificatesV1CertificateSigningRequest
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateCertificatesV1CertificateSigningRequestUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteCertificatesV1CollectionCertificateSigningRequestResponse(resp *http.Response) (_ DeleteCertificatesV1CollectionCertificateSigningRequestResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteCertificatesV1CollectionCertificateSigningRequestUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCertificatesV1CertificateSigningRequestListResponse(resp *http.Response) (_ WatchCertificatesV1CertificateSigningRequestListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCertificatesV1CertificateSigningRequestListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetCoordinationAPIGroupResponse(resp *http.Response) (_ GetCoordinationAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetCoordinationAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetCoordinationV1APIResourcesResponse(resp *http.Response) (_ GetCoordinationV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetCoordinationV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListCoordinationV1LeaseForAllNamespacesResponse(resp *http.Response) (_ ListCoordinationV1LeaseForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPICoordinationV1LeaseList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListCoordinationV1LeaseForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchCoordinationV1LeaseListForAllNamespacesResponse(resp *http.Response) (_ WatchCoordinationV1LeaseListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchCoordinationV1LeaseListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetDiscoveryAPIGroupResponse(resp *http.Response) (_ GetDiscoveryAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetDiscoveryAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetDiscoveryV1APIResourcesResponse(resp *http.Response) (_ GetDiscoveryV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetDiscoveryV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListDiscoveryV1EndpointSliceForAllNamespacesResponse(resp *http.Response) (_ ListDiscoveryV1EndpointSliceForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIDiscoveryV1EndpointSliceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchDiscoveryV1EndpointSliceListForAllNamespacesResponse(resp *http.Response) (_ WatchDiscoveryV1EndpointSliceListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetDiscoveryV1beta1APIResourcesResponse(resp *http.Response) (_ GetDiscoveryV1beta1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetDiscoveryV1beta1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListDiscoveryV1beta1EndpointSliceForAllNamespacesResponse(resp *http.Response) (_ ListDiscoveryV1beta1EndpointSliceForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIDiscoveryV1beta1EndpointSliceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResponse(resp *http.Response) (_ WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetEventsAPIGroupResponse(resp *http.Response) (_ GetEventsAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetEventsAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetEventsV1APIResourcesResponse(resp *http.Response) (_ GetEventsV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetEventsV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListEventsV1EventForAllNamespacesResponse(resp *http.Response) (_ ListEventsV1EventForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIEventsV1EventList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListEventsV1EventForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchEventsV1EventListForAllNamespacesResponse(resp *http.Response) (_ WatchEventsV1EventListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchEventsV1EventListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetEventsV1beta1APIResourcesResponse(resp *http.Response) (_ GetEventsV1beta1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetEventsV1beta1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListEventsV1beta1EventForAllNamespacesResponse(resp *http.Response) (_ ListEventsV1beta1EventForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIEventsV1beta1EventList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListEventsV1beta1EventForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchEventsV1beta1EventListForAllNamespacesResponse(resp *http.Response) (_ WatchEventsV1beta1EventListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchEventsV1beta1EventListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetFlowcontrolApiserverAPIGroupResponse(resp *http.Response) (_ GetFlowcontrolApiserverAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetFlowcontrolApiserverAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetFlowcontrolApiserverV1beta1APIResourcesResponse(resp *http.Response) (_ GetFlowcontrolApiserverV1beta1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListFlowcontrolApiserverV1beta1FlowSchemaResponse(resp *http.Response) (_ ListFlowcontrolApiserverV1beta1FlowSchemaResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta1FlowSchemaList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateFlowcontrolApiserverV1beta1FlowSchemaResponse(resp *http.Response) (_ CreateFlowcontrolApiserverV1beta1FlowSchemaResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta1FlowSchema
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta1FlowSchema
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta1FlowSchema
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta1FlowSchemaUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResponse(resp *http.Response) (_ DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(resp *http.Response) (_ ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse(resp *http.Response) (_ CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResponse(resp *http.Response) (_ DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchFlowcontrolApiserverV1beta1FlowSchemaListResponse(resp *http.Response) (_ WatchFlowcontrolApiserverV1beta1FlowSchemaListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResponse(resp *http.Response) (_ WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetFlowcontrolApiserverV1beta2APIResourcesResponse(resp *http.Response) (_ GetFlowcontrolApiserverV1beta2APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListFlowcontrolApiserverV1beta2FlowSchemaResponse(resp *http.Response) (_ ListFlowcontrolApiserverV1beta2FlowSchemaResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta2FlowSchemaList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateFlowcontrolApiserverV1beta2FlowSchemaResponse(resp *http.Response) (_ CreateFlowcontrolApiserverV1beta2FlowSchemaResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta2FlowSchema
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta2FlowSchema
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta2FlowSchema
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta2FlowSchemaUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResponse(resp *http.Response) (_ DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(resp *http.Response) (_ ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse(resp *http.Response) (_ CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResponse(resp *http.Response) (_ DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchFlowcontrolApiserverV1beta2FlowSchemaListResponse(resp *http.Response) (_ WatchFlowcontrolApiserverV1beta2FlowSchemaListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResponse(resp *http.Response) (_ WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetInternalApiserverAPIGroupResponse(resp *http.Response) (_ GetInternalApiserverAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetInternalApiserverAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetInternalApiserverV1alpha1APIResourcesResponse(resp *http.Response) (_ GetInternalApiserverV1alpha1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetInternalApiserverV1alpha1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListInternalApiserverV1alpha1StorageVersionResponse(resp *http.Response) (_ ListInternalApiserverV1alpha1StorageVersionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIApiserverinternalV1alpha1StorageVersionList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListInternalApiserverV1alpha1StorageVersionUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateInternalApiserverV1alpha1StorageVersionResponse(resp *http.Response) (_ CreateInternalApiserverV1alpha1StorageVersionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIApiserverinternalV1alpha1StorageVersion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIApiserverinternalV1alpha1StorageVersion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIApiserverinternalV1alpha1StorageVersion
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateInternalApiserverV1alpha1StorageVersionUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteInternalApiserverV1alpha1CollectionStorageVersionResponse(resp *http.Response) (_ DeleteInternalApiserverV1alpha1CollectionStorageVersionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteInternalApiserverV1alpha1CollectionStorageVersionUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchInternalApiserverV1alpha1StorageVersionListResponse(resp *http.Response) (_ WatchInternalApiserverV1alpha1StorageVersionListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchInternalApiserverV1alpha1StorageVersionListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetNetworkingAPIGroupResponse(resp *http.Response) (_ GetNetworkingAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetNetworkingAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetNetworkingV1APIResourcesResponse(resp *http.Response) (_ GetNetworkingV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetNetworkingV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListNetworkingV1IngressClassResponse(resp *http.Response) (_ ListNetworkingV1IngressClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINetworkingV1IngressClassList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListNetworkingV1IngressClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateNetworkingV1IngressClassResponse(resp *http.Response) (_ CreateNetworkingV1IngressClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINetworkingV1IngressClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINetworkingV1IngressClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINetworkingV1IngressClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateNetworkingV1IngressClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteNetworkingV1CollectionIngressClassResponse(resp *http.Response) (_ DeleteNetworkingV1CollectionIngressClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteNetworkingV1CollectionIngressClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListNetworkingV1IngressForAllNamespacesResponse(resp *http.Response) (_ ListNetworkingV1IngressForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINetworkingV1IngressList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListNetworkingV1IngressForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListNetworkingV1NetworkPolicyForAllNamespacesResponse(resp *http.Response) (_ ListNetworkingV1NetworkPolicyForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINetworkingV1NetworkPolicyList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchNetworkingV1IngressClassListResponse(resp *http.Response) (_ WatchNetworkingV1IngressClassListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchNetworkingV1IngressClassListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchNetworkingV1IngressListForAllNamespacesResponse(resp *http.Response) (_ WatchNetworkingV1IngressListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchNetworkingV1IngressListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchNetworkingV1NetworkPolicyListForAllNamespacesResponse(resp *http.Response) (_ WatchNetworkingV1NetworkPolicyListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetNodeAPIGroupResponse(resp *http.Response) (_ GetNodeAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetNodeAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetNodeV1APIResourcesResponse(resp *http.Response) (_ GetNodeV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetNodeV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListNodeV1RuntimeClassResponse(resp *http.Response) (_ ListNodeV1RuntimeClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1RuntimeClassList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListNodeV1RuntimeClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateNodeV1RuntimeClassResponse(resp *http.Response) (_ CreateNodeV1RuntimeClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1RuntimeClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1RuntimeClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1RuntimeClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateNodeV1RuntimeClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteNodeV1CollectionRuntimeClassResponse(resp *http.Response) (_ DeleteNodeV1CollectionRuntimeClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteNodeV1CollectionRuntimeClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchNodeV1RuntimeClassListResponse(resp *http.Response) (_ WatchNodeV1RuntimeClassListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchNodeV1RuntimeClassListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetNodeV1alpha1APIResourcesResponse(resp *http.Response) (_ GetNodeV1alpha1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetNodeV1alpha1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListNodeV1alpha1RuntimeClassResponse(resp *http.Response) (_ ListNodeV1alpha1RuntimeClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1alpha1RuntimeClassList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListNodeV1alpha1RuntimeClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateNodeV1alpha1RuntimeClassResponse(resp *http.Response) (_ CreateNodeV1alpha1RuntimeClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1alpha1RuntimeClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1alpha1RuntimeClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1alpha1RuntimeClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateNodeV1alpha1RuntimeClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteNodeV1alpha1CollectionRuntimeClassResponse(resp *http.Response) (_ DeleteNodeV1alpha1CollectionRuntimeClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteNodeV1alpha1CollectionRuntimeClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchNodeV1alpha1RuntimeClassListResponse(resp *http.Response) (_ WatchNodeV1alpha1RuntimeClassListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchNodeV1alpha1RuntimeClassListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetNodeV1beta1APIResourcesResponse(resp *http.Response) (_ GetNodeV1beta1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetNodeV1beta1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListNodeV1beta1RuntimeClassResponse(resp *http.Response) (_ ListNodeV1beta1RuntimeClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1beta1RuntimeClassList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListNodeV1beta1RuntimeClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateNodeV1beta1RuntimeClassResponse(resp *http.Response) (_ CreateNodeV1beta1RuntimeClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1beta1RuntimeClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1beta1RuntimeClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPINodeV1beta1RuntimeClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateNodeV1beta1RuntimeClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteNodeV1beta1CollectionRuntimeClassResponse(resp *http.Response) (_ DeleteNodeV1beta1CollectionRuntimeClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteNodeV1beta1CollectionRuntimeClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchNodeV1beta1RuntimeClassListResponse(resp *http.Response) (_ WatchNodeV1beta1RuntimeClassListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchNodeV1beta1RuntimeClassListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetPolicyAPIGroupResponse(resp *http.Response) (_ GetPolicyAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetPolicyAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetPolicyV1APIResourcesResponse(resp *http.Response) (_ GetPolicyV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetPolicyV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListPolicyV1PodDisruptionBudgetForAllNamespacesResponse(resp *http.Response) (_ ListPolicyV1PodDisruptionBudgetForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIPolicyV1PodDisruptionBudgetList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchPolicyV1PodDisruptionBudgetListForAllNamespacesResponse(resp *http.Response) (_ WatchPolicyV1PodDisruptionBudgetListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetPolicyV1beta1APIResourcesResponse(resp *http.Response) (_ GetPolicyV1beta1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetPolicyV1beta1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse(resp *http.Response) (_ ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIPolicyV1beta1PodDisruptionBudgetList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListPolicyV1beta1PodSecurityPolicyResponse(resp *http.Response) (_ ListPolicyV1beta1PodSecurityPolicyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIPolicyV1beta1PodSecurityPolicyList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListPolicyV1beta1PodSecurityPolicyUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreatePolicyV1beta1PodSecurityPolicyResponse(resp *http.Response) (_ CreatePolicyV1beta1PodSecurityPolicyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIPolicyV1beta1PodSecurityPolicy
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIPolicyV1beta1PodSecurityPolicy
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIPolicyV1beta1PodSecurityPolicy
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreatePolicyV1beta1PodSecurityPolicyUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeletePolicyV1beta1CollectionPodSecurityPolicyResponse(resp *http.Response) (_ DeletePolicyV1beta1CollectionPodSecurityPolicyResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeletePolicyV1beta1CollectionPodSecurityPolicyUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse(resp *http.Response) (_ WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchPolicyV1beta1PodSecurityPolicyListResponse(resp *http.Response) (_ WatchPolicyV1beta1PodSecurityPolicyListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchPolicyV1beta1PodSecurityPolicyListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetRbacAuthorizationAPIGroupResponse(resp *http.Response) (_ GetRbacAuthorizationAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetRbacAuthorizationAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetRbacAuthorizationV1APIResourcesResponse(resp *http.Response) (_ GetRbacAuthorizationV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetRbacAuthorizationV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListRbacAuthorizationV1ClusterRoleBindingResponse(resp *http.Response) (_ ListRbacAuthorizationV1ClusterRoleBindingResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIRbacV1ClusterRoleBindingList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListRbacAuthorizationV1ClusterRoleBindingUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateRbacAuthorizationV1ClusterRoleBindingResponse(resp *http.Response) (_ CreateRbacAuthorizationV1ClusterRoleBindingResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIRbacV1ClusterRoleBinding
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIRbacV1ClusterRoleBinding
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIRbacV1ClusterRoleBinding
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateRbacAuthorizationV1ClusterRoleBindingUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse(resp *http.Response) (_ DeleteRbacAuthorizationV1CollectionClusterRoleBindingResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteRbacAuthorizationV1CollectionClusterRoleBindingUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListRbacAuthorizationV1ClusterRoleResponse(resp *http.Response) (_ ListRbacAuthorizationV1ClusterRoleResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIRbacV1ClusterRoleList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListRbacAuthorizationV1ClusterRoleUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateRbacAuthorizationV1ClusterRoleResponse(resp *http.Response) (_ CreateRbacAuthorizationV1ClusterRoleResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIRbacV1ClusterRole
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIRbacV1ClusterRole
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIRbacV1ClusterRole
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateRbacAuthorizationV1ClusterRoleUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteRbacAuthorizationV1CollectionClusterRoleResponse(resp *http.Response) (_ DeleteRbacAuthorizationV1CollectionClusterRoleResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteRbacAuthorizationV1CollectionClusterRoleUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListRbacAuthorizationV1RoleBindingForAllNamespacesResponse(resp *http.Response) (_ ListRbacAuthorizationV1RoleBindingForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIRbacV1RoleBindingList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListRbacAuthorizationV1RoleForAllNamespacesResponse(resp *http.Response) (_ ListRbacAuthorizationV1RoleForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIRbacV1RoleList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchRbacAuthorizationV1ClusterRoleBindingListResponse(resp *http.Response) (_ WatchRbacAuthorizationV1ClusterRoleBindingListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchRbacAuthorizationV1ClusterRoleListResponse(resp *http.Response) (_ WatchRbacAuthorizationV1ClusterRoleListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchRbacAuthorizationV1ClusterRoleListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse(resp *http.Response) (_ WatchRbacAuthorizationV1RoleBindingListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchRbacAuthorizationV1RoleListForAllNamespacesResponse(resp *http.Response) (_ WatchRbacAuthorizationV1RoleListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetSchedulingAPIGroupResponse(resp *http.Response) (_ GetSchedulingAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetSchedulingAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetSchedulingV1APIResourcesResponse(resp *http.Response) (_ GetSchedulingV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetSchedulingV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListSchedulingV1PriorityClassResponse(resp *http.Response) (_ ListSchedulingV1PriorityClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPISchedulingV1PriorityClassList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListSchedulingV1PriorityClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateSchedulingV1PriorityClassResponse(resp *http.Response) (_ CreateSchedulingV1PriorityClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPISchedulingV1PriorityClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPISchedulingV1PriorityClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPISchedulingV1PriorityClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateSchedulingV1PriorityClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteSchedulingV1CollectionPriorityClassResponse(resp *http.Response) (_ DeleteSchedulingV1CollectionPriorityClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteSchedulingV1CollectionPriorityClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchSchedulingV1PriorityClassListResponse(resp *http.Response) (_ WatchSchedulingV1PriorityClassListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchSchedulingV1PriorityClassListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetStorageAPIGroupResponse(resp *http.Response) (_ GetStorageAPIGroupResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIGroup
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetStorageAPIGroupUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetStorageV1APIResourcesResponse(resp *http.Response) (_ GetStorageV1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetStorageV1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListStorageV1CSIDriverResponse(resp *http.Response) (_ ListStorageV1CSIDriverResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1CSIDriverList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListStorageV1CSIDriverUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateStorageV1CSIDriverResponse(resp *http.Response) (_ CreateStorageV1CSIDriverResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1CSIDriver
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1CSIDriver
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1CSIDriver
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateStorageV1CSIDriverUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteStorageV1CollectionCSIDriverResponse(resp *http.Response) (_ DeleteStorageV1CollectionCSIDriverResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteStorageV1CollectionCSIDriverUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListStorageV1CSINodeResponse(resp *http.Response) (_ ListStorageV1CSINodeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1CSINodeList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListStorageV1CSINodeUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateStorageV1CSINodeResponse(resp *http.Response) (_ CreateStorageV1CSINodeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1CSINode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1CSINode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1CSINode
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateStorageV1CSINodeUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteStorageV1CollectionCSINodeResponse(resp *http.Response) (_ DeleteStorageV1CollectionCSINodeResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteStorageV1CollectionCSINodeUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListStorageV1StorageClassResponse(resp *http.Response) (_ ListStorageV1StorageClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1StorageClassList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListStorageV1StorageClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateStorageV1StorageClassResponse(resp *http.Response) (_ CreateStorageV1StorageClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1StorageClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1StorageClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1StorageClass
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateStorageV1StorageClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteStorageV1CollectionStorageClassResponse(resp *http.Response) (_ DeleteStorageV1CollectionStorageClassResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteStorageV1CollectionStorageClassUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListStorageV1VolumeAttachmentResponse(resp *http.Response) (_ ListStorageV1VolumeAttachmentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1VolumeAttachmentList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListStorageV1VolumeAttachmentUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeCreateStorageV1VolumeAttachmentResponse(resp *http.Response) (_ CreateStorageV1VolumeAttachmentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1VolumeAttachment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 201:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1VolumeAttachment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 202:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1VolumeAttachment
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &CreateStorageV1VolumeAttachmentUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeDeleteStorageV1CollectionVolumeAttachmentResponse(resp *http.Response) (_ DeleteStorageV1CollectionVolumeAttachmentResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1Status
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &DeleteStorageV1CollectionVolumeAttachmentUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchStorageV1CSIDriverListResponse(resp *http.Response) (_ WatchStorageV1CSIDriverListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchStorageV1CSIDriverListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchStorageV1CSINodeListResponse(resp *http.Response) (_ WatchStorageV1CSINodeListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchStorageV1CSINodeListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchStorageV1StorageClassListResponse(resp *http.Response) (_ WatchStorageV1StorageClassListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchStorageV1StorageClassListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchStorageV1VolumeAttachmentListResponse(resp *http.Response) (_ WatchStorageV1VolumeAttachmentListResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchStorageV1VolumeAttachmentListUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetStorageV1alpha1APIResourcesResponse(resp *http.Response) (_ GetStorageV1alpha1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetStorageV1alpha1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListStorageV1alpha1CSIStorageCapacityForAllNamespacesResponse(resp *http.Response) (_ ListStorageV1alpha1CSIStorageCapacityForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1alpha1CSIStorageCapacityList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResponse(resp *http.Response) (_ WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetStorageV1beta1APIResourcesResponse(resp *http.Response) (_ GetStorageV1beta1APIResourcesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1APIResourceList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetStorageV1beta1APIResourcesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeListStorageV1beta1CSIStorageCapacityForAllNamespacesResponse(resp *http.Response) (_ ListStorageV1beta1CSIStorageCapacityForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sAPIStorageV1beta1CSIStorageCapacityList
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResponse(resp *http.Response) (_ WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgApisMetaV1WatchEvent
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		case "application/json;stream=watch":
			rerr = fmt.Errorf("application/json;stream=watch decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf decoder not implemented")
			return
		case "application/vnd.kubernetes.protobuf;stream=watch":
			rerr = fmt.Errorf("application/vnd.kubernetes.protobuf;stream=watch decoder not implemented")
			return
		case "application/yaml":
			rerr = fmt.Errorf("application/yaml decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeLogFileListHandlerResponse(resp *http.Response) (_ LogFileListHandler, rerr error) {
	switch resp.StatusCode {
	case 401:
		return LogFileListHandler{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetServiceAccountIssuerOpenIDKeysetResponse(resp *http.Response) (_ GetServiceAccountIssuerOpenIDKeysetResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/jwk-set+json":
			rerr = fmt.Errorf("application/jwk-set+json decoder not implemented")
			return
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetServiceAccountIssuerOpenIDKeysetUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}

func decodeGetCodeVersionResponse(resp *http.Response) (_ GetCodeVersionResponse, rerr error) {
	switch resp.StatusCode {
	case 200:
		switch resp.Header.Get("Content-Type") {
		case "application/json":
			var response IoK8sApimachineryPkgVersionInfo
			data, err := io.ReadAll(resp.Body)
			if err != nil {
				rerr = err
				return
			}
			if err := json.Unmarshal(data, &response); err != nil {
				rerr = err
				return
			}

			return &response, nil
		default:
			rerr = fmt.Errorf("unexpected content-type: %s", resp.Header.Get("Content-Type"))
			return
		}
	case 401:
		return &GetCodeVersionUnauthorized{}, nil
	default:
		rerr = fmt.Errorf("unexpected statusCode: %d", resp.StatusCode)
		return
	}
}
