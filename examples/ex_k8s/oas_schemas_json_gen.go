// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateAdmissionregistrationV1MutatingWebhookConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAdmissionregistrationV1MutatingWebhookConfigurationResUnauthorized from json stream.
func (s *CreateAdmissionregistrationV1MutatingWebhookConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateAdmissionregistrationV1MutatingWebhookConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateAdmissionregistrationV1ValidatingWebhookConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAdmissionregistrationV1ValidatingWebhookConfigurationResUnauthorized from json stream.
func (s *CreateAdmissionregistrationV1ValidatingWebhookConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateAdmissionregistrationV1ValidatingWebhookConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateApiextensionsV1CustomResourceDefinitionResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateApiextensionsV1CustomResourceDefinitionResUnauthorized from json stream.
func (s *CreateApiextensionsV1CustomResourceDefinitionResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateApiextensionsV1CustomResourceDefinitionResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateApiregistrationV1APIServiceApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateApiregistrationV1APIServiceApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateApiregistrationV1APIServiceApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateApiregistrationV1APIServiceApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateApiregistrationV1APIServiceApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateApiregistrationV1APIServiceApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateApiregistrationV1APIServiceApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateApiregistrationV1APIServiceResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateApiregistrationV1APIServiceResUnauthorized from json stream.
func (s *CreateApiregistrationV1APIServiceResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateApiregistrationV1APIServiceResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateAuthenticationV1TokenReviewApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthenticationV1TokenReviewApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthenticationV1TokenReviewApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateAuthenticationV1TokenReviewApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthenticationV1TokenReviewApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthenticationV1TokenReviewApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateAuthenticationV1TokenReviewApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateAuthenticationV1TokenReviewResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAuthenticationV1TokenReviewResUnauthorized from json stream.
func (s *CreateAuthenticationV1TokenReviewResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateAuthenticationV1TokenReviewResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateAuthorizationV1SelfSubjectAccessReviewResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAuthorizationV1SelfSubjectAccessReviewResUnauthorized from json stream.
func (s *CreateAuthorizationV1SelfSubjectAccessReviewResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateAuthorizationV1SelfSubjectAccessReviewResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateAuthorizationV1SelfSubjectRulesReviewResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAuthorizationV1SelfSubjectRulesReviewResUnauthorized from json stream.
func (s *CreateAuthorizationV1SelfSubjectRulesReviewResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateAuthorizationV1SelfSubjectRulesReviewResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateAuthorizationV1SubjectAccessReviewResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAuthorizationV1SubjectAccessReviewResUnauthorized from json stream.
func (s *CreateAuthorizationV1SubjectAccessReviewResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateAuthorizationV1SubjectAccessReviewResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateCertificatesV1CertificateSigningRequestApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateCertificatesV1CertificateSigningRequestApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateCertificatesV1CertificateSigningRequestApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateCertificatesV1CertificateSigningRequestResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateCertificatesV1CertificateSigningRequestResUnauthorized from json stream.
func (s *CreateCertificatesV1CertificateSigningRequestResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateCertificatesV1CertificateSigningRequestResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateCoreV1NamespaceApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NamespaceApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NamespaceApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {}
func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1NamespaceApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NamespaceApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NamespaceApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateCoreV1NamespaceResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateCoreV1NamespaceResUnauthorized from json stream.
func (s *CreateCoreV1NamespaceResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateCoreV1NamespaceResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateCoreV1NodeApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {}
func (CreateCoreV1NodeApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1NodeApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateCoreV1NodeApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1NodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateCoreV1NodeResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateCoreV1NodeResUnauthorized from json stream.
func (s *CreateCoreV1NodeResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateCoreV1NodeResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateCoreV1PersistentVolumeApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1PersistentVolumeApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1PersistentVolumeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1PersistentVolumeApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1PersistentVolumeApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1PersistentVolumeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateCoreV1PersistentVolumeResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateCoreV1PersistentVolumeResUnauthorized from json stream.
func (s *CreateCoreV1PersistentVolumeResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateCoreV1PersistentVolumeResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateFlowcontrolApiserverV1beta1FlowSchemaResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateFlowcontrolApiserverV1beta1FlowSchemaResUnauthorized from json stream.
func (s *CreateFlowcontrolApiserverV1beta1FlowSchemaResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateFlowcontrolApiserverV1beta1FlowSchemaResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResUnauthorized from json stream.
func (s *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateFlowcontrolApiserverV1beta2FlowSchemaResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateFlowcontrolApiserverV1beta2FlowSchemaResUnauthorized from json stream.
func (s *CreateFlowcontrolApiserverV1beta2FlowSchemaResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateFlowcontrolApiserverV1beta2FlowSchemaResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResUnauthorized from json stream.
func (s *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateInternalApiserverV1alpha1StorageVersionResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateInternalApiserverV1alpha1StorageVersionResUnauthorized from json stream.
func (s *CreateInternalApiserverV1alpha1StorageVersionResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateInternalApiserverV1alpha1StorageVersionResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateNetworkingV1IngressClassApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNetworkingV1IngressClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNetworkingV1IngressClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNetworkingV1IngressClassApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNetworkingV1IngressClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNetworkingV1IngressClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateNetworkingV1IngressClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateNetworkingV1IngressClassResUnauthorized from json stream.
func (s *CreateNetworkingV1IngressClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateNetworkingV1IngressClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateNodeV1RuntimeClassApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1RuntimeClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {}
func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1RuntimeClassApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1RuntimeClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateNodeV1RuntimeClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateNodeV1RuntimeClassResUnauthorized from json stream.
func (s *CreateNodeV1RuntimeClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateNodeV1RuntimeClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateNodeV1alpha1RuntimeClassApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1alpha1RuntimeClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1alpha1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1alpha1RuntimeClassApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1alpha1RuntimeClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1alpha1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateNodeV1alpha1RuntimeClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateNodeV1alpha1RuntimeClassResUnauthorized from json stream.
func (s *CreateNodeV1alpha1RuntimeClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateNodeV1alpha1RuntimeClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateNodeV1beta1RuntimeClassApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1beta1RuntimeClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1beta1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1beta1RuntimeClassApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1beta1RuntimeClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1beta1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateNodeV1beta1RuntimeClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateNodeV1beta1RuntimeClassResUnauthorized from json stream.
func (s *CreateNodeV1beta1RuntimeClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateNodeV1beta1RuntimeClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreatePolicyV1beta1PodSecurityPolicyResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreatePolicyV1beta1PodSecurityPolicyResUnauthorized from json stream.
func (s *CreatePolicyV1beta1PodSecurityPolicyResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreatePolicyV1beta1PodSecurityPolicyResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateRbacAuthorizationV1ClusterRoleBindingResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateRbacAuthorizationV1ClusterRoleBindingResUnauthorized from json stream.
func (s *CreateRbacAuthorizationV1ClusterRoleBindingResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateRbacAuthorizationV1ClusterRoleBindingResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CreateRbacAuthorizationV1ClusterRoleResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateRbacAuthorizationV1ClusterRoleResUnauthorized from json stream.
func (s *CreateRbacAuthorizationV1ClusterRoleResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateRbacAuthorizationV1ClusterRoleResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateSchedulingV1PriorityClassApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateSchedulingV1PriorityClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateSchedulingV1PriorityClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateSchedulingV1PriorityClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateSchedulingV1PriorityClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateSchedulingV1PriorityClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateSchedulingV1PriorityClassApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateSchedulingV1PriorityClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateSchedulingV1PriorityClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateSchedulingV1PriorityClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateSchedulingV1PriorityClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateSchedulingV1PriorityClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateSchedulingV1PriorityClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateSchedulingV1PriorityClassResUnauthorized from json stream.
func (s *CreateSchedulingV1PriorityClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateSchedulingV1PriorityClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateStorageV1CSIDriverApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSIDriverApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSIDriverApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSIDriverApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSIDriverApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSIDriverApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateStorageV1CSIDriverResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateStorageV1CSIDriverResUnauthorized from json stream.
func (s *CreateStorageV1CSIDriverResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateStorageV1CSIDriverResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateStorageV1CSINodeApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSINodeApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSINodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSINodeApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSINodeApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSINodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateStorageV1CSINodeResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateStorageV1CSINodeResUnauthorized from json stream.
func (s *CreateStorageV1CSINodeResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateStorageV1CSINodeResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateStorageV1StorageClassApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1StorageClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1StorageClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1StorageClassApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1StorageClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1StorageClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateStorageV1StorageClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateStorageV1StorageClassResUnauthorized from json stream.
func (s *CreateStorageV1StorageClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateStorageV1StorageClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (CreateStorageV1VolumeAttachmentApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateStorageV1VolumeAttachmentApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1VolumeAttachmentApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1VolumeAttachmentApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1VolumeAttachmentApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1VolumeAttachmentApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1VolumeAttachmentApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateStorageV1VolumeAttachmentApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1VolumeAttachmentApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1VolumeAttachmentApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1VolumeAttachmentApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1VolumeAttachmentApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateStorageV1VolumeAttachmentResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateStorageV1VolumeAttachmentResUnauthorized from json stream.
func (s *CreateStorageV1VolumeAttachmentResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode CreateStorageV1VolumeAttachmentResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResUnauthorized from json stream.
func (s *DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResUnauthorized from json stream.
func (s *DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteApiextensionsV1CollectionCustomResourceDefinitionResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteApiextensionsV1CollectionCustomResourceDefinitionResUnauthorized from json stream.
func (s *DeleteApiextensionsV1CollectionCustomResourceDefinitionResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteApiextensionsV1CollectionCustomResourceDefinitionResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteApiregistrationV1CollectionAPIServiceApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteApiregistrationV1CollectionAPIServiceApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteApiregistrationV1CollectionAPIServiceApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteApiregistrationV1CollectionAPIServiceApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteApiregistrationV1CollectionAPIServiceApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteApiregistrationV1CollectionAPIServiceApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteApiregistrationV1CollectionAPIServiceResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteApiregistrationV1CollectionAPIServiceResUnauthorized from json stream.
func (s *DeleteApiregistrationV1CollectionAPIServiceResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteApiregistrationV1CollectionAPIServiceResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteCertificatesV1CollectionCertificateSigningRequestResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteCertificatesV1CollectionCertificateSigningRequestResUnauthorized from json stream.
func (s *DeleteCertificatesV1CollectionCertificateSigningRequestResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteCertificatesV1CollectionCertificateSigningRequestResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteCoreV1CollectionNodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (DeleteCoreV1CollectionNodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (DeleteCoreV1CollectionNodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (DeleteCoreV1CollectionNodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteCoreV1CollectionNodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (DeleteCoreV1CollectionNodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s DeleteCoreV1CollectionNodeResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteCoreV1CollectionNodeResUnauthorized from json stream.
func (s *DeleteCoreV1CollectionNodeResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteCoreV1CollectionNodeResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteCoreV1CollectionPersistentVolumeApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteCoreV1CollectionPersistentVolumeApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteCoreV1CollectionPersistentVolumeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteCoreV1CollectionPersistentVolumeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteCoreV1CollectionPersistentVolumeApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteCoreV1CollectionPersistentVolumeApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteCoreV1CollectionPersistentVolumeResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteCoreV1CollectionPersistentVolumeResUnauthorized from json stream.
func (s *DeleteCoreV1CollectionPersistentVolumeResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteCoreV1CollectionPersistentVolumeResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResUnauthorized from json stream.
func (s *DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResUnauthorized from json stream.
func (s *DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResUnauthorized from json stream.
func (s *DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResUnauthorized from json stream.
func (s *DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteInternalApiserverV1alpha1CollectionStorageVersionResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteInternalApiserverV1alpha1CollectionStorageVersionResUnauthorized from json stream.
func (s *DeleteInternalApiserverV1alpha1CollectionStorageVersionResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteInternalApiserverV1alpha1CollectionStorageVersionResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteNetworkingV1CollectionIngressClassApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteNetworkingV1CollectionIngressClassApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNetworkingV1CollectionIngressClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteNetworkingV1CollectionIngressClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNetworkingV1CollectionIngressClassApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteNetworkingV1CollectionIngressClassApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteNetworkingV1CollectionIngressClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteNetworkingV1CollectionIngressClassResUnauthorized from json stream.
func (s *DeleteNetworkingV1CollectionIngressClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteNetworkingV1CollectionIngressClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteNodeV1CollectionRuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (DeleteNodeV1CollectionRuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (DeleteNodeV1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteNodeV1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNodeV1CollectionRuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (DeleteNodeV1CollectionRuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s DeleteNodeV1CollectionRuntimeClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteNodeV1CollectionRuntimeClassResUnauthorized from json stream.
func (s *DeleteNodeV1CollectionRuntimeClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteNodeV1CollectionRuntimeClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteNodeV1alpha1CollectionRuntimeClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteNodeV1alpha1CollectionRuntimeClassResUnauthorized from json stream.
func (s *DeleteNodeV1alpha1CollectionRuntimeClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteNodeV1alpha1CollectionRuntimeClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteNodeV1beta1CollectionRuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteNodeV1beta1CollectionRuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNodeV1beta1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteNodeV1beta1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNodeV1beta1CollectionRuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteNodeV1beta1CollectionRuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteNodeV1beta1CollectionRuntimeClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteNodeV1beta1CollectionRuntimeClassResUnauthorized from json stream.
func (s *DeleteNodeV1beta1CollectionRuntimeClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteNodeV1beta1CollectionRuntimeClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeletePolicyV1beta1CollectionPodSecurityPolicyResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeletePolicyV1beta1CollectionPodSecurityPolicyResUnauthorized from json stream.
func (s *DeletePolicyV1beta1CollectionPodSecurityPolicyResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeletePolicyV1beta1CollectionPodSecurityPolicyResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteRbacAuthorizationV1CollectionClusterRoleBindingResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteRbacAuthorizationV1CollectionClusterRoleBindingResUnauthorized from json stream.
func (s *DeleteRbacAuthorizationV1CollectionClusterRoleBindingResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteRbacAuthorizationV1CollectionClusterRoleBindingResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteRbacAuthorizationV1CollectionClusterRoleResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteRbacAuthorizationV1CollectionClusterRoleResUnauthorized from json stream.
func (s *DeleteRbacAuthorizationV1CollectionClusterRoleResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteRbacAuthorizationV1CollectionClusterRoleResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteSchedulingV1CollectionPriorityClassApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteSchedulingV1CollectionPriorityClassApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteSchedulingV1CollectionPriorityClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteSchedulingV1CollectionPriorityClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteSchedulingV1CollectionPriorityClassApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteSchedulingV1CollectionPriorityClassApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteSchedulingV1CollectionPriorityClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteSchedulingV1CollectionPriorityClassResUnauthorized from json stream.
func (s *DeleteSchedulingV1CollectionPriorityClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteSchedulingV1CollectionPriorityClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteStorageV1CollectionCSIDriverApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (DeleteStorageV1CollectionCSIDriverApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (DeleteStorageV1CollectionCSIDriverApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteStorageV1CollectionCSIDriverApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionCSIDriverApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (DeleteStorageV1CollectionCSIDriverApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s DeleteStorageV1CollectionCSIDriverResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStorageV1CollectionCSIDriverResUnauthorized from json stream.
func (s *DeleteStorageV1CollectionCSIDriverResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteStorageV1CollectionCSIDriverResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteStorageV1CollectionCSINodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (DeleteStorageV1CollectionCSINodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (DeleteStorageV1CollectionCSINodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (DeleteStorageV1CollectionCSINodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionCSINodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (DeleteStorageV1CollectionCSINodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s DeleteStorageV1CollectionCSINodeResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStorageV1CollectionCSINodeResUnauthorized from json stream.
func (s *DeleteStorageV1CollectionCSINodeResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteStorageV1CollectionCSINodeResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteStorageV1CollectionStorageClassApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteStorageV1CollectionStorageClassApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionStorageClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteStorageV1CollectionStorageClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionStorageClassApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteStorageV1CollectionStorageClassApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteStorageV1CollectionStorageClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStorageV1CollectionStorageClassResUnauthorized from json stream.
func (s *DeleteStorageV1CollectionStorageClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteStorageV1CollectionStorageClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (DeleteStorageV1CollectionVolumeAttachmentApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteStorageV1CollectionVolumeAttachmentApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionVolumeAttachmentApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteStorageV1CollectionVolumeAttachmentApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionVolumeAttachmentApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteStorageV1CollectionVolumeAttachmentApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteStorageV1CollectionVolumeAttachmentResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStorageV1CollectionVolumeAttachmentResUnauthorized from json stream.
func (s *DeleteStorageV1CollectionVolumeAttachmentResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode DeleteStorageV1CollectionVolumeAttachmentResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAPIVersionsApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAPIVersionsApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAPIVersionsApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetAPIVersionsApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAPIVersionsApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAPIVersionsApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAPIVersionsResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAPIVersionsResUnauthorized from json stream.
func (s *GetAPIVersionsResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAPIVersionsResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAdmissionregistrationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAdmissionregistrationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAdmissionregistrationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAdmissionregistrationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAdmissionregistrationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAdmissionregistrationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAdmissionregistrationAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAdmissionregistrationAPIGroupResUnauthorized from json stream.
func (s *GetAdmissionregistrationAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAdmissionregistrationAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAdmissionregistrationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (GetAdmissionregistrationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAdmissionregistrationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetAdmissionregistrationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAdmissionregistrationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (GetAdmissionregistrationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetAdmissionregistrationV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAdmissionregistrationV1APIResourcesResUnauthorized from json stream.
func (s *GetAdmissionregistrationV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAdmissionregistrationV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetApiextensionsAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetApiextensionsAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetApiextensionsAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetApiextensionsAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetApiextensionsAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetApiextensionsAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetApiextensionsAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetApiextensionsAPIGroupResUnauthorized from json stream.
func (s *GetApiextensionsAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetApiextensionsAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetApiextensionsV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetApiextensionsV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetApiextensionsV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetApiextensionsV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetApiextensionsV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetApiextensionsV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetApiextensionsV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetApiextensionsV1APIResourcesResUnauthorized from json stream.
func (s *GetApiextensionsV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetApiextensionsV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetApiregistrationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetApiregistrationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetApiregistrationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetApiregistrationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetApiregistrationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetApiregistrationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetApiregistrationAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetApiregistrationAPIGroupResUnauthorized from json stream.
func (s *GetApiregistrationAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetApiregistrationAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetApiregistrationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetApiregistrationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetApiregistrationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetApiregistrationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetApiregistrationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetApiregistrationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetApiregistrationV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetApiregistrationV1APIResourcesResUnauthorized from json stream.
func (s *GetApiregistrationV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetApiregistrationV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAppsAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAppsAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAppsAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetAppsAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAppsAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAppsAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAppsAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAppsAPIGroupResUnauthorized from json stream.
func (s *GetAppsAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAppsAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAppsV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAppsV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAppsV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAppsV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAppsV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAppsV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAppsV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAppsV1APIResourcesResUnauthorized from json stream.
func (s *GetAppsV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAppsV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAuthenticationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAuthenticationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAuthenticationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAuthenticationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAuthenticationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAuthenticationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAuthenticationAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAuthenticationAPIGroupResUnauthorized from json stream.
func (s *GetAuthenticationAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAuthenticationAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAuthenticationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAuthenticationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAuthenticationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAuthenticationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAuthenticationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAuthenticationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAuthenticationV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAuthenticationV1APIResourcesResUnauthorized from json stream.
func (s *GetAuthenticationV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAuthenticationV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAuthorizationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAuthorizationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAuthorizationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAuthorizationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAuthorizationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAuthorizationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAuthorizationAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAuthorizationAPIGroupResUnauthorized from json stream.
func (s *GetAuthorizationAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAuthorizationAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAuthorizationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAuthorizationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAuthorizationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAuthorizationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAuthorizationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAuthorizationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAuthorizationV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAuthorizationV1APIResourcesResUnauthorized from json stream.
func (s *GetAuthorizationV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAuthorizationV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAutoscalingAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAutoscalingAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAutoscalingAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAutoscalingAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAutoscalingAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAutoscalingAPIGroupResUnauthorized from json stream.
func (s *GetAutoscalingAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAutoscalingAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAutoscalingV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAutoscalingV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAutoscalingV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAutoscalingV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAutoscalingV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAutoscalingV1APIResourcesResUnauthorized from json stream.
func (s *GetAutoscalingV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAutoscalingV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAutoscalingV2beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV2beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAutoscalingV2beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetAutoscalingV2beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAutoscalingV2beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV2beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAutoscalingV2beta1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAutoscalingV2beta1APIResourcesResUnauthorized from json stream.
func (s *GetAutoscalingV2beta1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAutoscalingV2beta1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetAutoscalingV2beta2APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV2beta2APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAutoscalingV2beta2APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetAutoscalingV2beta2APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAutoscalingV2beta2APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV2beta2APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAutoscalingV2beta2APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAutoscalingV2beta2APIResourcesResUnauthorized from json stream.
func (s *GetAutoscalingV2beta2APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetAutoscalingV2beta2APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetBatchAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetBatchAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetBatchAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetBatchAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetBatchAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetBatchAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetBatchAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetBatchAPIGroupResUnauthorized from json stream.
func (s *GetBatchAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetBatchAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetBatchV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetBatchV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetBatchV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetBatchV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetBatchV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetBatchV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetBatchV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetBatchV1APIResourcesResUnauthorized from json stream.
func (s *GetBatchV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetBatchV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetBatchV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetBatchV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetBatchV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetBatchV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetBatchV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetBatchV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetBatchV1beta1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetBatchV1beta1APIResourcesResUnauthorized from json stream.
func (s *GetBatchV1beta1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetBatchV1beta1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetCertificatesAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCertificatesAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCertificatesAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetCertificatesAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetCertificatesAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCertificatesAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCertificatesAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCertificatesAPIGroupResUnauthorized from json stream.
func (s *GetCertificatesAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetCertificatesAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetCertificatesV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCertificatesV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCertificatesV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetCertificatesV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetCertificatesV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCertificatesV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCertificatesV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCertificatesV1APIResourcesResUnauthorized from json stream.
func (s *GetCertificatesV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetCertificatesV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetCodeVersionResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCodeVersionResUnauthorized from json stream.
func (s *GetCodeVersionResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetCodeVersionResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetCoordinationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCoordinationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCoordinationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetCoordinationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetCoordinationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCoordinationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCoordinationAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCoordinationAPIGroupResUnauthorized from json stream.
func (s *GetCoordinationAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetCoordinationAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetCoordinationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCoordinationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCoordinationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetCoordinationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetCoordinationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCoordinationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCoordinationV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCoordinationV1APIResourcesResUnauthorized from json stream.
func (s *GetCoordinationV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetCoordinationV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetCoreAPIVersionsApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCoreAPIVersionsApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCoreAPIVersionsApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetCoreAPIVersionsApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCoreAPIVersionsApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCoreAPIVersionsApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCoreAPIVersionsResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCoreAPIVersionsResUnauthorized from json stream.
func (s *GetCoreAPIVersionsResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetCoreAPIVersionsResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetCoreV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCoreV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCoreV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetCoreV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetCoreV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCoreV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCoreV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCoreV1APIResourcesResUnauthorized from json stream.
func (s *GetCoreV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetCoreV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetDiscoveryAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetDiscoveryAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetDiscoveryAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetDiscoveryAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetDiscoveryAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetDiscoveryAPIGroupResUnauthorized from json stream.
func (s *GetDiscoveryAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetDiscoveryAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetDiscoveryV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetDiscoveryV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetDiscoveryV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetDiscoveryV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetDiscoveryV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetDiscoveryV1APIResourcesResUnauthorized from json stream.
func (s *GetDiscoveryV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetDiscoveryV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetDiscoveryV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetDiscoveryV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetDiscoveryV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetDiscoveryV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetDiscoveryV1beta1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetDiscoveryV1beta1APIResourcesResUnauthorized from json stream.
func (s *GetDiscoveryV1beta1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetDiscoveryV1beta1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetEventsAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetEventsAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetEventsAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetEventsAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetEventsAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetEventsAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetEventsAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetEventsAPIGroupResUnauthorized from json stream.
func (s *GetEventsAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetEventsAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetEventsV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetEventsV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetEventsV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetEventsV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetEventsV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetEventsV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetEventsV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetEventsV1APIResourcesResUnauthorized from json stream.
func (s *GetEventsV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetEventsV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetEventsV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetEventsV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetEventsV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetEventsV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetEventsV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetEventsV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetEventsV1beta1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetEventsV1beta1APIResourcesResUnauthorized from json stream.
func (s *GetEventsV1beta1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetEventsV1beta1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetFlowcontrolApiserverAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetFlowcontrolApiserverAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetFlowcontrolApiserverAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetFlowcontrolApiserverAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetFlowcontrolApiserverAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetFlowcontrolApiserverAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetFlowcontrolApiserverAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetFlowcontrolApiserverAPIGroupResUnauthorized from json stream.
func (s *GetFlowcontrolApiserverAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetFlowcontrolApiserverAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetFlowcontrolApiserverV1beta1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetFlowcontrolApiserverV1beta1APIResourcesResUnauthorized from json stream.
func (s *GetFlowcontrolApiserverV1beta1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetFlowcontrolApiserverV1beta1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetFlowcontrolApiserverV1beta2APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetFlowcontrolApiserverV1beta2APIResourcesResUnauthorized from json stream.
func (s *GetFlowcontrolApiserverV1beta2APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetFlowcontrolApiserverV1beta2APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetInternalApiserverAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetInternalApiserverAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetInternalApiserverAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetInternalApiserverAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetInternalApiserverAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetInternalApiserverAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetInternalApiserverAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetInternalApiserverAPIGroupResUnauthorized from json stream.
func (s *GetInternalApiserverAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetInternalApiserverAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetInternalApiserverV1alpha1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (GetInternalApiserverV1alpha1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetInternalApiserverV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetInternalApiserverV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetInternalApiserverV1alpha1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (GetInternalApiserverV1alpha1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetInternalApiserverV1alpha1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetInternalApiserverV1alpha1APIResourcesResUnauthorized from json stream.
func (s *GetInternalApiserverV1alpha1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetInternalApiserverV1alpha1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetNetworkingAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNetworkingAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNetworkingAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetNetworkingAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetNetworkingAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNetworkingAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNetworkingAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNetworkingAPIGroupResUnauthorized from json stream.
func (s *GetNetworkingAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetNetworkingAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetNetworkingV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNetworkingV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNetworkingV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetNetworkingV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetNetworkingV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNetworkingV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNetworkingV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNetworkingV1APIResourcesResUnauthorized from json stream.
func (s *GetNetworkingV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetNetworkingV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetNodeAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNodeAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNodeAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetNodeAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNodeAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNodeAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNodeAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNodeAPIGroupResUnauthorized from json stream.
func (s *GetNodeAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetNodeAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetNodeV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNodeV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetNodeV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetNodeV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNodeV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNodeV1APIResourcesResUnauthorized from json stream.
func (s *GetNodeV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetNodeV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetNodeV1alpha1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1alpha1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNodeV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetNodeV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetNodeV1alpha1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1alpha1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNodeV1alpha1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNodeV1alpha1APIResourcesResUnauthorized from json stream.
func (s *GetNodeV1alpha1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetNodeV1alpha1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetNodeV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNodeV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetNodeV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetNodeV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNodeV1beta1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNodeV1beta1APIResourcesResUnauthorized from json stream.
func (s *GetNodeV1beta1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetNodeV1beta1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetPolicyAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetPolicyAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetPolicyAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetPolicyAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetPolicyAPIGroupResUnauthorized from json stream.
func (s *GetPolicyAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetPolicyAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetPolicyV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetPolicyV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetPolicyV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetPolicyV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetPolicyV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetPolicyV1APIResourcesResUnauthorized from json stream.
func (s *GetPolicyV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetPolicyV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetPolicyV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetPolicyV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetPolicyV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetPolicyV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetPolicyV1beta1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetPolicyV1beta1APIResourcesResUnauthorized from json stream.
func (s *GetPolicyV1beta1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetPolicyV1beta1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetRbacAuthorizationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetRbacAuthorizationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetRbacAuthorizationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetRbacAuthorizationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetRbacAuthorizationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetRbacAuthorizationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetRbacAuthorizationAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetRbacAuthorizationAPIGroupResUnauthorized from json stream.
func (s *GetRbacAuthorizationAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetRbacAuthorizationAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetRbacAuthorizationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetRbacAuthorizationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetRbacAuthorizationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetRbacAuthorizationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetRbacAuthorizationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetRbacAuthorizationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetRbacAuthorizationV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetRbacAuthorizationV1APIResourcesResUnauthorized from json stream.
func (s *GetRbacAuthorizationV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetRbacAuthorizationV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetSchedulingAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetSchedulingAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetSchedulingAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetSchedulingAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetSchedulingAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetSchedulingAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetSchedulingAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetSchedulingAPIGroupResUnauthorized from json stream.
func (s *GetSchedulingAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetSchedulingAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetSchedulingV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetSchedulingV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetSchedulingV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetSchedulingV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetSchedulingV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetSchedulingV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetSchedulingV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetSchedulingV1APIResourcesResUnauthorized from json stream.
func (s *GetSchedulingV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetSchedulingV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON) WriteJSON(j *json.Stream) {}
func (GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetServiceAccountIssuerOpenIDConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetServiceAccountIssuerOpenIDConfigurationResUnauthorized from json stream.
func (s *GetServiceAccountIssuerOpenIDConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetServiceAccountIssuerOpenIDConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetServiceAccountIssuerOpenIDKeysetOKApplicationJwkSetJSON) WriteJSON(j *json.Stream) {}
func (GetServiceAccountIssuerOpenIDKeysetOKApplicationJwkSetJSON) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetServiceAccountIssuerOpenIDKeysetResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetServiceAccountIssuerOpenIDKeysetResUnauthorized from json stream.
func (s *GetServiceAccountIssuerOpenIDKeysetResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetServiceAccountIssuerOpenIDKeysetResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetStorageAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetStorageAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetStorageAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetStorageAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetStorageAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetStorageAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetStorageAPIGroupResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetStorageAPIGroupResUnauthorized from json stream.
func (s *GetStorageAPIGroupResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetStorageAPIGroupResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetStorageV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetStorageV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetStorageV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetStorageV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetStorageV1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetStorageV1APIResourcesResUnauthorized from json stream.
func (s *GetStorageV1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetStorageV1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetStorageV1alpha1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1alpha1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetStorageV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetStorageV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetStorageV1alpha1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1alpha1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetStorageV1alpha1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetStorageV1alpha1APIResourcesResUnauthorized from json stream.
func (s *GetStorageV1alpha1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetStorageV1alpha1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (GetStorageV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetStorageV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetStorageV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetStorageV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetStorageV1beta1APIResourcesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetStorageV1beta1APIResourcesResUnauthorized from json stream.
func (s *GetStorageV1beta1APIResourcesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode GetStorageV1beta1APIResourcesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admissionReviewVersions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.AdmissionReviewVersions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("clientConfig")
	s.ClientConfig.WriteJSON(j)
	if s.FailurePolicy.Set {
		more.More()
		j.WriteObjectField("failurePolicy")
		s.FailurePolicy.WriteJSON(j)
	}
	if s.MatchPolicy.Set {
		more.More()
		j.WriteObjectField("matchPolicy")
		s.MatchPolicy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.ObjectSelector.Set {
		more.More()
		j.WriteObjectField("objectSelector")
		s.ObjectSelector.WriteJSON(j)
	}
	if s.ReinvocationPolicy.Set {
		more.More()
		j.WriteObjectField("reinvocationPolicy")
		s.ReinvocationPolicy.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("sideEffects")
	j.WriteString(s.SideEffects)
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhook from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1MutatingWebhook to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "admissionReviewVersions":
			if err := func() error {
				s.AdmissionReviewVersions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AdmissionReviewVersions = append(s.AdmissionReviewVersions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "clientConfig":
			if err := func() error {
				if err := s.ClientConfig.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "failurePolicy":
			if err := func() error {
				s.FailurePolicy.Reset()
				if err := s.FailurePolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "matchPolicy":
			if err := func() error {
				s.MatchPolicy.Reset()
				if err := s.MatchPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespaceSelector":
			if err := func() error {
				s.NamespaceSelector.Reset()
				if err := s.NamespaceSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "objectSelector":
			if err := func() error {
				s.ObjectSelector.Reset()
				if err := s.ObjectSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reinvocationPolicy":
			if err := func() error {
				s.ReinvocationPolicy.Reset()
				if err := s.ReinvocationPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rules":
			if err := func() error {
				s.Rules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAdmissionregistrationV1RuleWithOperations
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Rules = append(s.Rules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sideEffects":
			if err := func() error {
				s.SideEffects = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "timeoutSeconds":
			if err := func() error {
				s.TimeoutSeconds.Reset()
				if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Webhooks != nil {
		more.More()
		j.WriteObjectField("webhooks")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Webhooks {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "webhooks":
			if err := func() error {
				s.Webhooks = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAdmissionregistrationV1MutatingWebhook
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Webhooks = append(s.Webhooks, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1RuleWithOperations) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroups != nil {
		more.More()
		j.WriteObjectField("apiGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiGroups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ApiVersions != nil {
		more.More()
		j.WriteObjectField("apiVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiVersions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Operations != nil {
		more.More()
		j.WriteObjectField("operations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Operations {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Resources != nil {
		more.More()
		j.WriteObjectField("resources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Resources {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Scope.Set {
		more.More()
		j.WriteObjectField("scope")
		s.Scope.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1RuleWithOperations from json stream.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1RuleWithOperations to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiGroups":
			if err := func() error {
				s.ApiGroups = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ApiGroups = append(s.ApiGroups, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "apiVersions":
			if err := func() error {
				s.ApiVersions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ApiVersions = append(s.ApiVersions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "operations":
			if err := func() error {
				s.Operations = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Operations = append(s.Operations, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resources":
			if err := func() error {
				s.Resources = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Resources = append(s.Resources, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scope":
			if err := func() error {
				s.Scope.Reset()
				if err := s.Scope.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ServiceReference from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1ServiceReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admissionReviewVersions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.AdmissionReviewVersions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("clientConfig")
	s.ClientConfig.WriteJSON(j)
	if s.FailurePolicy.Set {
		more.More()
		j.WriteObjectField("failurePolicy")
		s.FailurePolicy.WriteJSON(j)
	}
	if s.MatchPolicy.Set {
		more.More()
		j.WriteObjectField("matchPolicy")
		s.MatchPolicy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.ObjectSelector.Set {
		more.More()
		j.WriteObjectField("objectSelector")
		s.ObjectSelector.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("sideEffects")
	j.WriteString(s.SideEffects)
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhook from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1ValidatingWebhook to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "admissionReviewVersions":
			if err := func() error {
				s.AdmissionReviewVersions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AdmissionReviewVersions = append(s.AdmissionReviewVersions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "clientConfig":
			if err := func() error {
				if err := s.ClientConfig.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "failurePolicy":
			if err := func() error {
				s.FailurePolicy.Reset()
				if err := s.FailurePolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "matchPolicy":
			if err := func() error {
				s.MatchPolicy.Reset()
				if err := s.MatchPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespaceSelector":
			if err := func() error {
				s.NamespaceSelector.Reset()
				if err := s.NamespaceSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "objectSelector":
			if err := func() error {
				s.ObjectSelector.Reset()
				if err := s.ObjectSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rules":
			if err := func() error {
				s.Rules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAdmissionregistrationV1RuleWithOperations
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Rules = append(s.Rules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sideEffects":
			if err := func() error {
				s.SideEffects = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "timeoutSeconds":
			if err := func() error {
				s.TimeoutSeconds.Reset()
				if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Webhooks != nil {
		more.More()
		j.WriteObjectField("webhooks")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Webhooks {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "webhooks":
			if err := func() error {
				s.Webhooks = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAdmissionregistrationV1ValidatingWebhook
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Webhooks = append(s.Webhooks, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1WebhookClientConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CaBundle != nil {
		more.More()
		j.WriteObjectField("caBundle")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CaBundle {
			_ = elem // Unsupported kind "primitive".
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1WebhookClientConfig from json stream.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1WebhookClientConfig to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "caBundle":
			if err := func() error {
				s.CaBundle = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem byte
					if err := func() error {
						if err := fmt.Errorf(`decoding of "byte" (primitive) is not implemented`); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.CaBundle = append(s.CaBundle, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "service":
			if err := func() error {
				s.Service.Reset()
				if err := s.Service.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiServerID.Set {
		more.More()
		j.WriteObjectField("apiServerID")
		s.ApiServerID.WriteJSON(j)
	}
	if s.DecodableVersions != nil {
		more.More()
		j.WriteObjectField("decodableVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.DecodableVersions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EncodingVersion.Set {
		more.More()
		j.WriteObjectField("encodingVersion")
		s.EncodingVersion.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiServerID":
			if err := func() error {
				s.ApiServerID.Reset()
				if err := s.ApiServerID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "decodableVersions":
			if err := func() error {
				s.DecodableVersions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.DecodableVersions = append(s.DecodableVersions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "encodingVersion":
			if err := func() error {
				s.EncodingVersion.Reset()
				if err := s.EncodingVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersion from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1StorageVersion to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("reason")
	j.WriteString(s.Reason)
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionList from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1StorageVersionList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIApiserverinternalV1alpha1StorageVersion
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CommonEncodingVersion.Set {
		more.More()
		j.WriteObjectField("commonEncodingVersion")
		s.CommonEncodingVersion.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.StorageVersions != nil {
		more.More()
		j.WriteObjectField("storageVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.StorageVersions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "commonEncodingVersion":
			if err := func() error {
				s.CommonEncodingVersion.Reset()
				if err := s.CommonEncodingVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storageVersions":
			if err := func() error {
				s.StorageVersions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.StorageVersions = append(s.StorageVersions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ControllerRevision) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Data != nil {
		more.More()
		j.WriteObjectField("data")
		s.Data.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("revision")
	j.WriteInt64(s.Revision)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ControllerRevision from json stream.
func (s *IoK8sAPIAppsV1ControllerRevision) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ControllerRevision to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "data":
			if err := func() error {
				s.Data = nil
				var elem IoK8sApimachineryPkgRuntimeRawExtension
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Data = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "revision":
			if err := func() error {
				s.Revision = int64(i.Int64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ControllerRevisionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ControllerRevisionList from json stream.
func (s *IoK8sAPIAppsV1ControllerRevisionList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ControllerRevisionList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAppsV1ControllerRevision
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSet from json stream.
func (s *IoK8sAPIAppsV1DaemonSet) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSet to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetCondition from json stream.
func (s *IoK8sAPIAppsV1DaemonSetCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSetCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetList from json stream.
func (s *IoK8sAPIAppsV1DaemonSetList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSetList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAppsV1DaemonSet
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		more.More()
		j.WriteObjectField("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	if s.UpdateStrategy.Set {
		more.More()
		j.WriteObjectField("updateStrategy")
		s.UpdateStrategy.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetSpec from json stream.
func (s *IoK8sAPIAppsV1DaemonSetSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSetSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "minReadySeconds":
			if err := func() error {
				s.MinReadySeconds.Reset()
				if err := s.MinReadySeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "revisionHistoryLimit":
			if err := func() error {
				s.RevisionHistoryLimit.Reset()
				if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "template":
			if err := func() error {
				if err := s.Template.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "updateStrategy":
			if err := func() error {
				s.UpdateStrategy.Reset()
				if err := s.UpdateStrategy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CollisionCount.Set {
		more.More()
		j.WriteObjectField("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentNumberScheduled")
	j.WriteInt32(s.CurrentNumberScheduled)
	more.More()
	j.WriteObjectField("desiredNumberScheduled")
	j.WriteInt32(s.DesiredNumberScheduled)
	if s.NumberAvailable.Set {
		more.More()
		j.WriteObjectField("numberAvailable")
		s.NumberAvailable.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("numberMisscheduled")
	j.WriteInt32(s.NumberMisscheduled)
	more.More()
	j.WriteObjectField("numberReady")
	j.WriteInt32(s.NumberReady)
	if s.NumberUnavailable.Set {
		more.More()
		j.WriteObjectField("numberUnavailable")
		s.NumberUnavailable.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.UpdatedNumberScheduled.Set {
		more.More()
		j.WriteObjectField("updatedNumberScheduled")
		s.UpdatedNumberScheduled.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetStatus from json stream.
func (s *IoK8sAPIAppsV1DaemonSetStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSetStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "collisionCount":
			if err := func() error {
				s.CollisionCount.Reset()
				if err := s.CollisionCount.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAppsV1DaemonSetCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentNumberScheduled":
			if err := func() error {
				s.CurrentNumberScheduled = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "desiredNumberScheduled":
			if err := func() error {
				s.DesiredNumberScheduled = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "numberAvailable":
			if err := func() error {
				s.NumberAvailable.Reset()
				if err := s.NumberAvailable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "numberMisscheduled":
			if err := func() error {
				s.NumberMisscheduled = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "numberReady":
			if err := func() error {
				s.NumberReady = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "numberUnavailable":
			if err := func() error {
				s.NumberUnavailable.Reset()
				if err := s.NumberUnavailable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "updatedNumberScheduled":
			if err := func() error {
				s.UpdatedNumberScheduled.Reset()
				if err := s.UpdatedNumberScheduled.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetUpdateStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.RollingUpdate.Set {
		more.More()
		j.WriteObjectField("rollingUpdate")
		s.RollingUpdate.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetUpdateStrategy from json stream.
func (s *IoK8sAPIAppsV1DaemonSetUpdateStrategy) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSetUpdateStrategy to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "rollingUpdate":
			if err := func() error {
				s.RollingUpdate.Reset()
				if err := s.RollingUpdate.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1Deployment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1Deployment from json stream.
func (s *IoK8sAPIAppsV1Deployment) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1Deployment to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.LastUpdateTime.Set {
		more.More()
		j.WriteObjectField("lastUpdateTime")
		s.LastUpdateTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentCondition from json stream.
func (s *IoK8sAPIAppsV1DeploymentCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DeploymentCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastUpdateTime":
			if err := func() error {
				s.LastUpdateTime.Reset()
				if err := s.LastUpdateTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentList from json stream.
func (s *IoK8sAPIAppsV1DeploymentList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DeploymentList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAppsV1Deployment
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Paused.Set {
		more.More()
		j.WriteObjectField("paused")
		s.Paused.WriteJSON(j)
	}
	if s.ProgressDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("progressDeadlineSeconds")
		s.ProgressDeadlineSeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		more.More()
		j.WriteObjectField("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	if s.Strategy.Set {
		more.More()
		j.WriteObjectField("strategy")
		s.Strategy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentSpec from json stream.
func (s *IoK8sAPIAppsV1DeploymentSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DeploymentSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "minReadySeconds":
			if err := func() error {
				s.MinReadySeconds.Reset()
				if err := s.MinReadySeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "paused":
			if err := func() error {
				s.Paused.Reset()
				if err := s.Paused.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "progressDeadlineSeconds":
			if err := func() error {
				s.ProgressDeadlineSeconds.Reset()
				if err := s.ProgressDeadlineSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "replicas":
			if err := func() error {
				s.Replicas.Reset()
				if err := s.Replicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "revisionHistoryLimit":
			if err := func() error {
				s.RevisionHistoryLimit.Reset()
				if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "strategy":
			if err := func() error {
				s.Strategy.Reset()
				if err := s.Strategy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "template":
			if err := func() error {
				if err := s.Template.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvailableReplicas.Set {
		more.More()
		j.WriteObjectField("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	if s.CollisionCount.Set {
		more.More()
		j.WriteObjectField("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.UnavailableReplicas.Set {
		more.More()
		j.WriteObjectField("unavailableReplicas")
		s.UnavailableReplicas.WriteJSON(j)
	}
	if s.UpdatedReplicas.Set {
		more.More()
		j.WriteObjectField("updatedReplicas")
		s.UpdatedReplicas.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentStatus from json stream.
func (s *IoK8sAPIAppsV1DeploymentStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DeploymentStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "availableReplicas":
			if err := func() error {
				s.AvailableReplicas.Reset()
				if err := s.AvailableReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "collisionCount":
			if err := func() error {
				s.CollisionCount.Reset()
				if err := s.CollisionCount.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAppsV1DeploymentCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readyReplicas":
			if err := func() error {
				s.ReadyReplicas.Reset()
				if err := s.ReadyReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "replicas":
			if err := func() error {
				s.Replicas.Reset()
				if err := s.Replicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "unavailableReplicas":
			if err := func() error {
				s.UnavailableReplicas.Reset()
				if err := s.UnavailableReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "updatedReplicas":
			if err := func() error {
				s.UpdatedReplicas.Reset()
				if err := s.UpdatedReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.RollingUpdate.Set {
		more.More()
		j.WriteObjectField("rollingUpdate")
		s.RollingUpdate.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentStrategy from json stream.
func (s *IoK8sAPIAppsV1DeploymentStrategy) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DeploymentStrategy to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "rollingUpdate":
			if err := func() error {
				s.RollingUpdate.Reset()
				if err := s.RollingUpdate.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSet from json stream.
func (s *IoK8sAPIAppsV1ReplicaSet) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ReplicaSet to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetCondition from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ReplicaSetCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetList from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ReplicaSetList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAppsV1ReplicaSet
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	if s.Template.Set {
		more.More()
		j.WriteObjectField("template")
		s.Template.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetSpec from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ReplicaSetSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "minReadySeconds":
			if err := func() error {
				s.MinReadySeconds.Reset()
				if err := s.MinReadySeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "replicas":
			if err := func() error {
				s.Replicas.Reset()
				if err := s.Replicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "template":
			if err := func() error {
				s.Template.Reset()
				if err := s.Template.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvailableReplicas.Set {
		more.More()
		j.WriteObjectField("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.FullyLabeledReplicas.Set {
		more.More()
		j.WriteObjectField("fullyLabeledReplicas")
		s.FullyLabeledReplicas.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("replicas")
	j.WriteInt32(s.Replicas)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetStatus from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ReplicaSetStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "availableReplicas":
			if err := func() error {
				s.AvailableReplicas.Reset()
				if err := s.AvailableReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAppsV1ReplicaSetCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fullyLabeledReplicas":
			if err := func() error {
				s.FullyLabeledReplicas.Reset()
				if err := s.FullyLabeledReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readyReplicas":
			if err := func() error {
				s.ReadyReplicas.Reset()
				if err := s.ReadyReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "replicas":
			if err := func() error {
				s.Replicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateDaemonSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MaxSurge.Set {
		more.More()
		j.WriteObjectField("maxSurge")
		s.MaxSurge.WriteJSON(j)
	}
	if s.MaxUnavailable.Set {
		more.More()
		j.WriteObjectField("maxUnavailable")
		s.MaxUnavailable.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateDaemonSet from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateDaemonSet) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1RollingUpdateDaemonSet to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "maxSurge":
			if err := func() error {
				s.MaxSurge.Reset()
				if err := s.MaxSurge.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "maxUnavailable":
			if err := func() error {
				s.MaxUnavailable.Reset()
				if err := s.MaxUnavailable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateDeployment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MaxSurge.Set {
		more.More()
		j.WriteObjectField("maxSurge")
		s.MaxSurge.WriteJSON(j)
	}
	if s.MaxUnavailable.Set {
		more.More()
		j.WriteObjectField("maxUnavailable")
		s.MaxUnavailable.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateDeployment from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateDeployment) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1RollingUpdateDeployment to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "maxSurge":
			if err := func() error {
				s.MaxSurge.Reset()
				if err := s.MaxSurge.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "maxUnavailable":
			if err := func() error {
				s.MaxUnavailable.Reset()
				if err := s.MaxUnavailable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Partition.Set {
		more.More()
		j.WriteObjectField("partition")
		s.Partition.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "partition":
			if err := func() error {
				s.Partition.Reset()
				if err := s.Partition.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSet from json stream.
func (s *IoK8sAPIAppsV1StatefulSet) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSet to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetCondition from json stream.
func (s *IoK8sAPIAppsV1StatefulSetCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSetCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetList from json stream.
func (s *IoK8sAPIAppsV1StatefulSetList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSetList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAppsV1StatefulSet
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.PodManagementPolicy.Set {
		more.More()
		j.WriteObjectField("podManagementPolicy")
		s.PodManagementPolicy.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		more.More()
		j.WriteObjectField("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	more.More()
	j.WriteObjectField("serviceName")
	j.WriteString(s.ServiceName)
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	if s.UpdateStrategy.Set {
		more.More()
		j.WriteObjectField("updateStrategy")
		s.UpdateStrategy.WriteJSON(j)
	}
	if s.VolumeClaimTemplates != nil {
		more.More()
		j.WriteObjectField("volumeClaimTemplates")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeClaimTemplates {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetSpec from json stream.
func (s *IoK8sAPIAppsV1StatefulSetSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSetSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "minReadySeconds":
			if err := func() error {
				s.MinReadySeconds.Reset()
				if err := s.MinReadySeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "podManagementPolicy":
			if err := func() error {
				s.PodManagementPolicy.Reset()
				if err := s.PodManagementPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "replicas":
			if err := func() error {
				s.Replicas.Reset()
				if err := s.Replicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "revisionHistoryLimit":
			if err := func() error {
				s.RevisionHistoryLimit.Reset()
				if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "serviceName":
			if err := func() error {
				s.ServiceName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "template":
			if err := func() error {
				if err := s.Template.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "updateStrategy":
			if err := func() error {
				s.UpdateStrategy.Reset()
				if err := s.UpdateStrategy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeClaimTemplates":
			if err := func() error {
				s.VolumeClaimTemplates = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PersistentVolumeClaim
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.VolumeClaimTemplates = append(s.VolumeClaimTemplates, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("availableReplicas")
	j.WriteInt32(s.AvailableReplicas)
	if s.CollisionCount.Set {
		more.More()
		j.WriteObjectField("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.CurrentReplicas.Set {
		more.More()
		j.WriteObjectField("currentReplicas")
		s.CurrentReplicas.WriteJSON(j)
	}
	if s.CurrentRevision.Set {
		more.More()
		j.WriteObjectField("currentRevision")
		s.CurrentRevision.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("replicas")
	j.WriteInt32(s.Replicas)
	if s.UpdateRevision.Set {
		more.More()
		j.WriteObjectField("updateRevision")
		s.UpdateRevision.WriteJSON(j)
	}
	if s.UpdatedReplicas.Set {
		more.More()
		j.WriteObjectField("updatedReplicas")
		s.UpdatedReplicas.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetStatus from json stream.
func (s *IoK8sAPIAppsV1StatefulSetStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSetStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "availableReplicas":
			if err := func() error {
				s.AvailableReplicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "collisionCount":
			if err := func() error {
				s.CollisionCount.Reset()
				if err := s.CollisionCount.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAppsV1StatefulSetCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentReplicas":
			if err := func() error {
				s.CurrentReplicas.Reset()
				if err := s.CurrentReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentRevision":
			if err := func() error {
				s.CurrentRevision.Reset()
				if err := s.CurrentRevision.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readyReplicas":
			if err := func() error {
				s.ReadyReplicas.Reset()
				if err := s.ReadyReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "replicas":
			if err := func() error {
				s.Replicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "updateRevision":
			if err := func() error {
				s.UpdateRevision.Reset()
				if err := s.UpdateRevision.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "updatedReplicas":
			if err := func() error {
				s.UpdatedReplicas.Reset()
				if err := s.UpdatedReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetUpdateStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.RollingUpdate.Set {
		more.More()
		j.WriteObjectField("rollingUpdate")
		s.RollingUpdate.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetUpdateStrategy from json stream.
func (s *IoK8sAPIAppsV1StatefulSetUpdateStrategy) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSetUpdateStrategy to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "rollingUpdate":
			if err := func() error {
				s.RollingUpdate.Reset()
				if err := s.RollingUpdate.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReview from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReview) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthenticationV1TokenReview to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Audiences != nil {
		more.More()
		j.WriteObjectField("audiences")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Audiences {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Token.Set {
		more.More()
		j.WriteObjectField("token")
		s.Token.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReviewSpec from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReviewSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthenticationV1TokenReviewSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "audiences":
			if err := func() error {
				s.Audiences = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Audiences = append(s.Audiences, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Audiences != nil {
		more.More()
		j.WriteObjectField("audiences")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Audiences {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Authenticated.Set {
		more.More()
		j.WriteObjectField("authenticated")
		s.Authenticated.WriteJSON(j)
	}
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReviewStatus from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReviewStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthenticationV1TokenReviewStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "audiences":
			if err := func() error {
				s.Audiences = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Audiences = append(s.Audiences, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "authenticated":
			if err := func() error {
				s.Authenticated.Reset()
				if err := s.Authenticated.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1UserInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Extra != nil {
		more.More()
		j.WriteObjectField("extra")
		s.Extra.WriteJSON(j)
	}
	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthenticationV1UserInfo from json stream.
func (s *IoK8sAPIAuthenticationV1UserInfo) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthenticationV1UserInfo to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "extra":
			if err := func() error {
				s.Extra = nil
				var elem IoK8sAPIAuthenticationV1UserInfoExtra
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Extra = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "groups":
			if err := func() error {
				s.Groups = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Groups = append(s.Groups, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1UserInfoExtra) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthenticationV1UserInfoExtra from json stream.
func (s *IoK8sAPIAuthenticationV1UserInfoExtra) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthenticationV1UserInfoExtra to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1NonResourceAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.Verb.Set {
		more.More()
		j.WriteObjectField("verb")
		s.Verb.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1NonResourceAttributes from json stream.
func (s *IoK8sAPIAuthorizationV1NonResourceAttributes) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1NonResourceAttributes to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "verb":
			if err := func() error {
				s.Verb.Reset()
				if err := s.Verb.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1NonResourceRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceURLs != nil {
		more.More()
		j.WriteObjectField("nonResourceURLs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceURLs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1NonResourceRule from json stream.
func (s *IoK8sAPIAuthorizationV1NonResourceRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1NonResourceRule to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nonResourceURLs":
			if err := func() error {
				s.NonResourceURLs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.NonResourceURLs = append(s.NonResourceURLs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "verbs":
			if err := func() error {
				s.Verbs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Verbs = append(s.Verbs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1ResourceAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	if s.Subresource.Set {
		more.More()
		j.WriteObjectField("subresource")
		s.Subresource.WriteJSON(j)
	}
	if s.Verb.Set {
		more.More()
		j.WriteObjectField("verb")
		s.Verb.WriteJSON(j)
	}
	if s.Version.Set {
		more.More()
		j.WriteObjectField("version")
		s.Version.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1ResourceAttributes from json stream.
func (s *IoK8sAPIAuthorizationV1ResourceAttributes) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1ResourceAttributes to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace.Reset()
				if err := s.Namespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resource":
			if err := func() error {
				s.Resource.Reset()
				if err := s.Resource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "subresource":
			if err := func() error {
				s.Subresource.Reset()
				if err := s.Subresource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "verb":
			if err := func() error {
				s.Verb.Reset()
				if err := s.Verb.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1ResourceRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroups != nil {
		more.More()
		j.WriteObjectField("apiGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiGroups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceNames != nil {
		more.More()
		j.WriteObjectField("resourceNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Resources != nil {
		more.More()
		j.WriteObjectField("resources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Resources {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1ResourceRule from json stream.
func (s *IoK8sAPIAuthorizationV1ResourceRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1ResourceRule to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiGroups":
			if err := func() error {
				s.ApiGroups = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ApiGroups = append(s.ApiGroups, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceNames":
			if err := func() error {
				s.ResourceNames = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ResourceNames = append(s.ResourceNames, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resources":
			if err := func() error {
				s.Resources = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Resources = append(s.Resources, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "verbs":
			if err := func() error {
				s.Verbs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Verbs = append(s.Verbs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectAccessReview from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReview) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SelfSubjectAccessReview to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceAttributes.Set {
		more.More()
		j.WriteObjectField("nonResourceAttributes")
		s.NonResourceAttributes.WriteJSON(j)
	}
	if s.ResourceAttributes.Set {
		more.More()
		j.WriteObjectField("resourceAttributes")
		s.ResourceAttributes.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nonResourceAttributes":
			if err := func() error {
				s.NonResourceAttributes.Reset()
				if err := s.NonResourceAttributes.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceAttributes":
			if err := func() error {
				s.ResourceAttributes.Reset()
				if err := s.ResourceAttributes.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectRulesReview from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReview) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SelfSubjectRulesReview to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "namespace":
			if err := func() error {
				s.Namespace.Reset()
				if err := s.Namespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReview from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReview) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SubjectAccessReview to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Extra != nil {
		more.More()
		j.WriteObjectField("extra")
		s.Extra.WriteJSON(j)
	}
	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NonResourceAttributes.Set {
		more.More()
		j.WriteObjectField("nonResourceAttributes")
		s.NonResourceAttributes.WriteJSON(j)
	}
	if s.ResourceAttributes.Set {
		more.More()
		j.WriteObjectField("resourceAttributes")
		s.ResourceAttributes.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SubjectAccessReviewSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "extra":
			if err := func() error {
				s.Extra = nil
				var elem IoK8sAPIAuthorizationV1SubjectAccessReviewSpecExtra
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Extra = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "groups":
			if err := func() error {
				s.Groups = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Groups = append(s.Groups, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nonResourceAttributes":
			if err := func() error {
				s.NonResourceAttributes.Reset()
				if err := s.NonResourceAttributes.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceAttributes":
			if err := func() error {
				s.ResourceAttributes.Reset()
				if err := s.ResourceAttributes.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewSpecExtra) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReviewSpecExtra from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewSpecExtra) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SubjectAccessReviewSpecExtra to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("allowed")
	j.WriteBool(s.Allowed)
	if s.Denied.Set {
		more.More()
		j.WriteObjectField("denied")
		s.Denied.WriteJSON(j)
	}
	if s.EvaluationError.Set {
		more.More()
		j.WriteObjectField("evaluationError")
		s.EvaluationError.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReviewStatus from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SubjectAccessReviewStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "allowed":
			if err := func() error {
				s.Allowed = bool(i.Bool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "denied":
			if err := func() error {
				s.Denied.Reset()
				if err := s.Denied.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "evaluationError":
			if err := func() error {
				s.EvaluationError.Reset()
				if err := s.EvaluationError.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.EvaluationError.Set {
		more.More()
		j.WriteObjectField("evaluationError")
		s.EvaluationError.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("incomplete")
	j.WriteBool(s.Incomplete)
	more.More()
	j.WriteObjectField("nonResourceRules")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NonResourceRules {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("resourceRules")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ResourceRules {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectRulesReviewStatus from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SubjectRulesReviewStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "evaluationError":
			if err := func() error {
				s.EvaluationError.Reset()
				if err := s.EvaluationError.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "incomplete":
			if err := func() error {
				s.Incomplete = bool(i.Bool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nonResourceRules":
			if err := func() error {
				s.NonResourceRules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAuthorizationV1NonResourceRule
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.NonResourceRules = append(s.NonResourceRules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceRules":
			if err := func() error {
				s.ResourceRules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAuthorizationV1ResourceRule
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ResourceRules = append(s.ResourceRules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV1CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV1CrossVersionObjectReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV1HorizontalPodAutoscaler to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAutoscalingV1HorizontalPodAutoscaler
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	if s.MinReplicas.Set {
		more.More()
		j.WriteObjectField("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	if s.TargetCPUUtilizationPercentage.Set {
		more.More()
		j.WriteObjectField("targetCPUUtilizationPercentage")
		s.TargetCPUUtilizationPercentage.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "maxReplicas":
			if err := func() error {
				s.MaxReplicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "minReplicas":
			if err := func() error {
				s.MinReplicas.Reset()
				if err := s.MinReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scaleTargetRef":
			if err := func() error {
				if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetCPUUtilizationPercentage":
			if err := func() error {
				s.TargetCPUUtilizationPercentage.Reset()
				if err := s.TargetCPUUtilizationPercentage.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CurrentCPUUtilizationPercentage.Set {
		more.More()
		j.WriteObjectField("currentCPUUtilizationPercentage")
		s.CurrentCPUUtilizationPercentage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	more.More()
	j.WriteObjectField("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	if s.LastScaleTime.Set {
		more.More()
		j.WriteObjectField("lastScaleTime")
		s.LastScaleTime.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "currentCPUUtilizationPercentage":
			if err := func() error {
				s.CurrentCPUUtilizationPercentage.Reset()
				if err := s.CurrentCPUUtilizationPercentage.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentReplicas":
			if err := func() error {
				s.CurrentReplicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "desiredReplicas":
			if err := func() error {
				s.DesiredReplicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastScaleTime":
			if err := func() error {
				s.LastScaleTime.Reset()
				if err := s.LastScaleTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.TargetAverageUtilization.Set {
		more.More()
		j.WriteObjectField("targetAverageUtilization")
		s.TargetAverageUtilization.WriteJSON(j)
	}
	if s.TargetAverageValue.Set {
		more.More()
		j.WriteObjectField("targetAverageValue")
		s.TargetAverageValue.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "container":
			if err := func() error {
				s.Container = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetAverageUtilization":
			if err := func() error {
				s.TargetAverageUtilization.Reset()
				if err := s.TargetAverageUtilization.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetAverageValue":
			if err := func() error {
				s.TargetAverageValue.Reset()
				if err := s.TargetAverageValue.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	if s.CurrentAverageUtilization.Set {
		more.More()
		j.WriteObjectField("currentAverageUtilization")
		s.CurrentAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "container":
			if err := func() error {
				s.Container = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentAverageUtilization":
			if err := func() error {
				s.CurrentAverageUtilization.Reset()
				if err := s.CurrentAverageUtilization.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentAverageValue":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.MetricSelector.Set {
		more.More()
		j.WriteObjectField("metricSelector")
		s.MetricSelector.WriteJSON(j)
	}
	if s.TargetAverageValue.Set {
		more.More()
		j.WriteObjectField("targetAverageValue")
		s.TargetAverageValue.WriteJSON(j)
	}
	if s.TargetValue.Set {
		more.More()
		j.WriteObjectField("targetValue")
		s.TargetValue.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ExternalMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ExternalMetricSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "metricName":
			if err := func() error {
				s.MetricName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metricSelector":
			if err := func() error {
				s.MetricSelector.Reset()
				if err := s.MetricSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetAverageValue":
			if err := func() error {
				s.TargetAverageValue.Reset()
				if err := s.TargetAverageValue.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetValue":
			if err := func() error {
				s.TargetValue.Reset()
				if err := s.TargetValue.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CurrentAverageValue.Set {
		more.More()
		j.WriteObjectField("currentAverageValue")
		s.CurrentAverageValue.WriteJSON(j)
	}
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.MetricSelector.Set {
		more.More()
		j.WriteObjectField("metricSelector")
		s.MetricSelector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ExternalMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ExternalMetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "currentAverageValue":
			if err := func() error {
				s.CurrentAverageValue.Reset()
				if err := s.CurrentAverageValue.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentValue":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metricName":
			if err := func() error {
				s.MetricName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metricSelector":
			if err := func() error {
				s.MetricSelector.Reset()
				if err := s.MetricSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	if s.Metrics != nil {
		more.More()
		j.WriteObjectField("metrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Metrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.MinReplicas.Set {
		more.More()
		j.WriteObjectField("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "maxReplicas":
			if err := func() error {
				s.MaxReplicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metrics":
			if err := func() error {
				s.Metrics = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAutoscalingV2beta1MetricSpec
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Metrics = append(s.Metrics, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "minReplicas":
			if err := func() error {
				s.MinReplicas.Reset()
				if err := s.MinReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scaleTargetRef":
			if err := func() error {
				if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("conditions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Conditions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.CurrentMetrics != nil {
		more.More()
		j.WriteObjectField("currentMetrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CurrentMetrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	more.More()
	j.WriteObjectField("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	if s.LastScaleTime.Set {
		more.More()
		j.WriteObjectField("lastScaleTime")
		s.LastScaleTime.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentMetrics":
			if err := func() error {
				s.CurrentMetrics = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAutoscalingV2beta1MetricStatus
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.CurrentMetrics = append(s.CurrentMetrics, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentReplicas":
			if err := func() error {
				s.CurrentReplicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "desiredReplicas":
			if err := func() error {
				s.DesiredReplicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastScaleTime":
			if err := func() error {
				s.LastScaleTime.Reset()
				if err := s.LastScaleTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1MetricSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1MetricSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1MetricSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "containerResource":
			if err := func() error {
				s.ContainerResource.Reset()
				if err := s.ContainerResource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "external":
			if err := func() error {
				s.External.Reset()
				if err := s.External.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "object":
			if err := func() error {
				s.Object.Reset()
				if err := s.Object.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pods":
			if err := func() error {
				s.Pods.Reset()
				if err := s.Pods.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resource":
			if err := func() error {
				s.Resource.Reset()
				if err := s.Resource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1MetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1MetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1MetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "containerResource":
			if err := func() error {
				s.ContainerResource.Reset()
				if err := s.ContainerResource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "external":
			if err := func() error {
				s.External.Reset()
				if err := s.External.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "object":
			if err := func() error {
				s.Object.Reset()
				if err := s.Object.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pods":
			if err := func() error {
				s.Pods.Reset()
				if err := s.Pods.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resource":
			if err := func() error {
				s.Resource.Reset()
				if err := s.Resource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AverageValue.Set {
		more.More()
		j.WriteObjectField("averageValue")
		s.AverageValue.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	// Unsupported kind "alias".
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ObjectMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ObjectMetricSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "averageValue":
			if err := func() error {
				s.AverageValue.Reset()
				if err := s.AverageValue.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metricName":
			if err := func() error {
				s.MetricName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				s.Selector.Reset()
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "target":
			if err := func() error {
				if err := s.Target.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetValue":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AverageValue.Set {
		more.More()
		j.WriteObjectField("averageValue")
		s.AverageValue.WriteJSON(j)
	}
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ObjectMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ObjectMetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "averageValue":
			if err := func() error {
				s.AverageValue.Reset()
				if err := s.AverageValue.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentValue":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metricName":
			if err := func() error {
				s.MetricName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				s.Selector.Reset()
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "target":
			if err := func() error {
				if err := s.Target.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	// Unsupported kind "alias".
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1PodsMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1PodsMetricSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "metricName":
			if err := func() error {
				s.MetricName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				s.Selector.Reset()
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetAverageValue":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1PodsMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1PodsMetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "currentAverageValue":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metricName":
			if err := func() error {
				s.MetricName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				s.Selector.Reset()
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.TargetAverageUtilization.Set {
		more.More()
		j.WriteObjectField("targetAverageUtilization")
		s.TargetAverageUtilization.WriteJSON(j)
	}
	if s.TargetAverageValue.Set {
		more.More()
		j.WriteObjectField("targetAverageValue")
		s.TargetAverageValue.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ResourceMetricSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetAverageUtilization":
			if err := func() error {
				s.TargetAverageUtilization.Reset()
				if err := s.TargetAverageUtilization.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetAverageValue":
			if err := func() error {
				s.TargetAverageValue.Reset()
				if err := s.TargetAverageValue.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CurrentAverageUtilization.Set {
		more.More()
		j.WriteObjectField("currentAverageUtilization")
		s.CurrentAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ResourceMetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "currentAverageUtilization":
			if err := func() error {
				s.CurrentAverageUtilization.Reset()
				if err := s.CurrentAverageUtilization.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentAverageValue":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "container":
			if err := func() error {
				s.Container = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "target":
			if err := func() error {
				if err := s.Target.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "container":
			if err := func() error {
				s.Container = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "current":
			if err := func() error {
				if err := s.Current.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ExternalMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ExternalMetricSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "metric":
			if err := func() error {
				if err := s.Metric.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "target":
			if err := func() error {
				if err := s.Target.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ExternalMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ExternalMetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "current":
			if err := func() error {
				if err := s.Current.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metric":
			if err := func() error {
				if err := s.Metric.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("periodSeconds")
	j.WriteInt32(s.PeriodSeconds)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	more.More()
	j.WriteObjectField("value")
	j.WriteInt32(s.Value)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HPAScalingPolicy from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HPAScalingPolicy to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "periodSeconds":
			if err := func() error {
				s.PeriodSeconds = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingRules) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Policies != nil {
		more.More()
		j.WriteObjectField("policies")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Policies {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.SelectPolicy.Set {
		more.More()
		j.WriteObjectField("selectPolicy")
		s.SelectPolicy.WriteJSON(j)
	}
	if s.StabilizationWindowSeconds.Set {
		more.More()
		j.WriteObjectField("stabilizationWindowSeconds")
		s.StabilizationWindowSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HPAScalingRules from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HPAScalingRules to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "policies":
			if err := func() error {
				s.Policies = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAutoscalingV2beta2HPAScalingPolicy
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Policies = append(s.Policies, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selectPolicy":
			if err := func() error {
				s.SelectPolicy.Reset()
				if err := s.SelectPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "stabilizationWindowSeconds":
			if err := func() error {
				s.StabilizationWindowSeconds.Reset()
				if err := s.StabilizationWindowSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ScaleDown.Set {
		more.More()
		j.WriteObjectField("scaleDown")
		s.ScaleDown.WriteJSON(j)
	}
	if s.ScaleUp.Set {
		more.More()
		j.WriteObjectField("scaleUp")
		s.ScaleUp.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "scaleDown":
			if err := func() error {
				s.ScaleDown.Reset()
				if err := s.ScaleDown.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scaleUp":
			if err := func() error {
				s.ScaleUp.Reset()
				if err := s.ScaleUp.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Behavior.Set {
		more.More()
		j.WriteObjectField("behavior")
		s.Behavior.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	if s.Metrics != nil {
		more.More()
		j.WriteObjectField("metrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Metrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.MinReplicas.Set {
		more.More()
		j.WriteObjectField("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "behavior":
			if err := func() error {
				s.Behavior.Reset()
				if err := s.Behavior.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "maxReplicas":
			if err := func() error {
				s.MaxReplicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metrics":
			if err := func() error {
				s.Metrics = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAutoscalingV2beta2MetricSpec
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Metrics = append(s.Metrics, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "minReplicas":
			if err := func() error {
				s.MinReplicas.Reset()
				if err := s.MinReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scaleTargetRef":
			if err := func() error {
				if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("conditions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Conditions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.CurrentMetrics != nil {
		more.More()
		j.WriteObjectField("currentMetrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CurrentMetrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	more.More()
	j.WriteObjectField("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	if s.LastScaleTime.Set {
		more.More()
		j.WriteObjectField("lastScaleTime")
		s.LastScaleTime.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentMetrics":
			if err := func() error {
				s.CurrentMetrics = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIAutoscalingV2beta2MetricStatus
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.CurrentMetrics = append(s.CurrentMetrics, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentReplicas":
			if err := func() error {
				s.CurrentReplicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "desiredReplicas":
			if err := func() error {
				s.DesiredReplicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastScaleTime":
			if err := func() error {
				s.LastScaleTime.Reset()
				if err := s.LastScaleTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricIdentifier) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricIdentifier from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricIdentifier) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2MetricIdentifier to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				s.Selector.Reset()
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2MetricSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "containerResource":
			if err := func() error {
				s.ContainerResource.Reset()
				if err := s.ContainerResource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "external":
			if err := func() error {
				s.External.Reset()
				if err := s.External.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "object":
			if err := func() error {
				s.Object.Reset()
				if err := s.Object.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pods":
			if err := func() error {
				s.Pods.Reset()
				if err := s.Pods.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resource":
			if err := func() error {
				s.Resource.Reset()
				if err := s.Resource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2MetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "containerResource":
			if err := func() error {
				s.ContainerResource.Reset()
				if err := s.ContainerResource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "external":
			if err := func() error {
				s.External.Reset()
				if err := s.External.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "object":
			if err := func() error {
				s.Object.Reset()
				if err := s.Object.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pods":
			if err := func() error {
				s.Pods.Reset()
				if err := s.Pods.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resource":
			if err := func() error {
				s.Resource.Reset()
				if err := s.Resource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricTarget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AverageUtilization.Set {
		more.More()
		j.WriteObjectField("averageUtilization")
		s.AverageUtilization.WriteJSON(j)
	}
	if s.AverageValue.Set {
		more.More()
		j.WriteObjectField("averageValue")
		s.AverageValue.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricTarget from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2MetricTarget to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "averageUtilization":
			if err := func() error {
				s.AverageUtilization.Reset()
				if err := s.AverageUtilization.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "averageValue":
			if err := func() error {
				s.AverageValue.Reset()
				if err := s.AverageValue.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricValueStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AverageUtilization.Set {
		more.More()
		j.WriteObjectField("averageUtilization")
		s.AverageUtilization.WriteJSON(j)
	}
	if s.AverageValue.Set {
		more.More()
		j.WriteObjectField("averageValue")
		s.AverageValue.WriteJSON(j)
	}
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricValueStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2MetricValueStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "averageUtilization":
			if err := func() error {
				s.AverageUtilization.Reset()
				if err := s.AverageUtilization.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "averageValue":
			if err := func() error {
				s.AverageValue.Reset()
				if err := s.AverageValue.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("describedObject")
	s.DescribedObject.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ObjectMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ObjectMetricSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "describedObject":
			if err := func() error {
				if err := s.DescribedObject.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metric":
			if err := func() error {
				if err := s.Metric.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "target":
			if err := func() error {
				if err := s.Target.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("describedObject")
	s.DescribedObject.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ObjectMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ObjectMetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "current":
			if err := func() error {
				if err := s.Current.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "describedObject":
			if err := func() error {
				if err := s.DescribedObject.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metric":
			if err := func() error {
				if err := s.Metric.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2PodsMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2PodsMetricSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "metric":
			if err := func() error {
				if err := s.Metric.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "target":
			if err := func() error {
				if err := s.Target.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2PodsMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2PodsMetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "current":
			if err := func() error {
				if err := s.Current.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metric":
			if err := func() error {
				if err := s.Metric.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ResourceMetricSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "target":
			if err := func() error {
				if err := s.Target.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ResourceMetricStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "current":
			if err := func() error {
				if err := s.Current.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJob) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1CronJob from json stream.
func (s *IoK8sAPIBatchV1CronJob) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1CronJob to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1CronJobList from json stream.
func (s *IoK8sAPIBatchV1CronJobList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1CronJobList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIBatchV1CronJob
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConcurrencyPolicy.Set {
		more.More()
		j.WriteObjectField("concurrencyPolicy")
		s.ConcurrencyPolicy.WriteJSON(j)
	}
	if s.FailedJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("failedJobsHistoryLimit")
		s.FailedJobsHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("jobTemplate")
	s.JobTemplate.WriteJSON(j)
	more.More()
	j.WriteObjectField("schedule")
	j.WriteString(s.Schedule)
	if s.StartingDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("startingDeadlineSeconds")
		s.StartingDeadlineSeconds.WriteJSON(j)
	}
	if s.SuccessfulJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("successfulJobsHistoryLimit")
		s.SuccessfulJobsHistoryLimit.WriteJSON(j)
	}
	if s.Suspend.Set {
		more.More()
		j.WriteObjectField("suspend")
		s.Suspend.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1CronJobSpec from json stream.
func (s *IoK8sAPIBatchV1CronJobSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1CronJobSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "concurrencyPolicy":
			if err := func() error {
				s.ConcurrencyPolicy.Reset()
				if err := s.ConcurrencyPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "failedJobsHistoryLimit":
			if err := func() error {
				s.FailedJobsHistoryLimit.Reset()
				if err := s.FailedJobsHistoryLimit.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "jobTemplate":
			if err := func() error {
				if err := s.JobTemplate.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "schedule":
			if err := func() error {
				s.Schedule = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "startingDeadlineSeconds":
			if err := func() error {
				s.StartingDeadlineSeconds.Reset()
				if err := s.StartingDeadlineSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "successfulJobsHistoryLimit":
			if err := func() error {
				s.SuccessfulJobsHistoryLimit.Reset()
				if err := s.SuccessfulJobsHistoryLimit.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "suspend":
			if err := func() error {
				s.Suspend.Reset()
				if err := s.Suspend.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active != nil {
		more.More()
		j.WriteObjectField("active")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Active {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.LastScheduleTime.Set {
		more.More()
		j.WriteObjectField("lastScheduleTime")
		s.LastScheduleTime.WriteJSON(j)
	}
	if s.LastSuccessfulTime.Set {
		more.More()
		j.WriteObjectField("lastSuccessfulTime")
		s.LastSuccessfulTime.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1CronJobStatus from json stream.
func (s *IoK8sAPIBatchV1CronJobStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1CronJobStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "active":
			if err := func() error {
				s.Active = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ObjectReference
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Active = append(s.Active, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastScheduleTime":
			if err := func() error {
				s.LastScheduleTime.Reset()
				if err := s.LastScheduleTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastSuccessfulTime":
			if err := func() error {
				s.LastSuccessfulTime.Reset()
				if err := s.LastSuccessfulTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1Job) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1Job from json stream.
func (s *IoK8sAPIBatchV1Job) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1Job to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastProbeTime.Set {
		more.More()
		j.WriteObjectField("lastProbeTime")
		s.LastProbeTime.WriteJSON(j)
	}
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1JobCondition from json stream.
func (s *IoK8sAPIBatchV1JobCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1JobCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastProbeTime":
			if err := func() error {
				s.LastProbeTime.Reset()
				if err := s.LastProbeTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1JobList from json stream.
func (s *IoK8sAPIBatchV1JobList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1JobList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIBatchV1Job
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ActiveDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("activeDeadlineSeconds")
		s.ActiveDeadlineSeconds.WriteJSON(j)
	}
	if s.BackoffLimit.Set {
		more.More()
		j.WriteObjectField("backoffLimit")
		s.BackoffLimit.WriteJSON(j)
	}
	if s.CompletionMode.Set {
		more.More()
		j.WriteObjectField("completionMode")
		s.CompletionMode.WriteJSON(j)
	}
	if s.Completions.Set {
		more.More()
		j.WriteObjectField("completions")
		s.Completions.WriteJSON(j)
	}
	if s.ManualSelector.Set {
		more.More()
		j.WriteObjectField("manualSelector")
		s.ManualSelector.WriteJSON(j)
	}
	if s.Parallelism.Set {
		more.More()
		j.WriteObjectField("parallelism")
		s.Parallelism.WriteJSON(j)
	}
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	if s.Suspend.Set {
		more.More()
		j.WriteObjectField("suspend")
		s.Suspend.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	if s.TtlSecondsAfterFinished.Set {
		more.More()
		j.WriteObjectField("ttlSecondsAfterFinished")
		s.TtlSecondsAfterFinished.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1JobSpec from json stream.
func (s *IoK8sAPIBatchV1JobSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1JobSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "activeDeadlineSeconds":
			if err := func() error {
				s.ActiveDeadlineSeconds.Reset()
				if err := s.ActiveDeadlineSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "backoffLimit":
			if err := func() error {
				s.BackoffLimit.Reset()
				if err := s.BackoffLimit.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "completionMode":
			if err := func() error {
				s.CompletionMode.Reset()
				if err := s.CompletionMode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "completions":
			if err := func() error {
				s.Completions.Reset()
				if err := s.Completions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "manualSelector":
			if err := func() error {
				s.ManualSelector.Reset()
				if err := s.ManualSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parallelism":
			if err := func() error {
				s.Parallelism.Reset()
				if err := s.Parallelism.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				s.Selector.Reset()
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "suspend":
			if err := func() error {
				s.Suspend.Reset()
				if err := s.Suspend.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "template":
			if err := func() error {
				if err := s.Template.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ttlSecondsAfterFinished":
			if err := func() error {
				s.TtlSecondsAfterFinished.Reset()
				if err := s.TtlSecondsAfterFinished.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active.Set {
		more.More()
		j.WriteObjectField("active")
		s.Active.WriteJSON(j)
	}
	if s.CompletedIndexes.Set {
		more.More()
		j.WriteObjectField("completedIndexes")
		s.CompletedIndexes.WriteJSON(j)
	}
	if s.CompletionTime.Set {
		more.More()
		j.WriteObjectField("completionTime")
		s.CompletionTime.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Failed.Set {
		more.More()
		j.WriteObjectField("failed")
		s.Failed.WriteJSON(j)
	}
	if s.StartTime.Set {
		more.More()
		j.WriteObjectField("startTime")
		s.StartTime.WriteJSON(j)
	}
	if s.Succeeded.Set {
		more.More()
		j.WriteObjectField("succeeded")
		s.Succeeded.WriteJSON(j)
	}
	if s.UncountedTerminatedPods.Set {
		more.More()
		j.WriteObjectField("uncountedTerminatedPods")
		s.UncountedTerminatedPods.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1JobStatus from json stream.
func (s *IoK8sAPIBatchV1JobStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1JobStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "active":
			if err := func() error {
				s.Active.Reset()
				if err := s.Active.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "completedIndexes":
			if err := func() error {
				s.CompletedIndexes.Reset()
				if err := s.CompletedIndexes.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "completionTime":
			if err := func() error {
				s.CompletionTime.Reset()
				if err := s.CompletionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIBatchV1JobCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "failed":
			if err := func() error {
				s.Failed.Reset()
				if err := s.Failed.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "startTime":
			if err := func() error {
				s.StartTime.Reset()
				if err := s.StartTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "succeeded":
			if err := func() error {
				s.Succeeded.Reset()
				if err := s.Succeeded.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "uncountedTerminatedPods":
			if err := func() error {
				s.UncountedTerminatedPods.Reset()
				if err := s.UncountedTerminatedPods.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1JobTemplateSpec from json stream.
func (s *IoK8sAPIBatchV1JobTemplateSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1JobTemplateSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1UncountedTerminatedPods) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Failed != nil {
		more.More()
		j.WriteObjectField("failed")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Failed {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Succeeded != nil {
		more.More()
		j.WriteObjectField("succeeded")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Succeeded {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1UncountedTerminatedPods from json stream.
func (s *IoK8sAPIBatchV1UncountedTerminatedPods) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1UncountedTerminatedPods to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "failed":
			if err := func() error {
				s.Failed = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Failed = append(s.Failed, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "succeeded":
			if err := func() error {
				s.Succeeded = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Succeeded = append(s.Succeeded, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJob) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJob from json stream.
func (s *IoK8sAPIBatchV1beta1CronJob) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1beta1CronJob to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobList from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1beta1CronJobList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIBatchV1beta1CronJob
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConcurrencyPolicy.Set {
		more.More()
		j.WriteObjectField("concurrencyPolicy")
		s.ConcurrencyPolicy.WriteJSON(j)
	}
	if s.FailedJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("failedJobsHistoryLimit")
		s.FailedJobsHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("jobTemplate")
	s.JobTemplate.WriteJSON(j)
	more.More()
	j.WriteObjectField("schedule")
	j.WriteString(s.Schedule)
	if s.StartingDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("startingDeadlineSeconds")
		s.StartingDeadlineSeconds.WriteJSON(j)
	}
	if s.SuccessfulJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("successfulJobsHistoryLimit")
		s.SuccessfulJobsHistoryLimit.WriteJSON(j)
	}
	if s.Suspend.Set {
		more.More()
		j.WriteObjectField("suspend")
		s.Suspend.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobSpec from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1beta1CronJobSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "concurrencyPolicy":
			if err := func() error {
				s.ConcurrencyPolicy.Reset()
				if err := s.ConcurrencyPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "failedJobsHistoryLimit":
			if err := func() error {
				s.FailedJobsHistoryLimit.Reset()
				if err := s.FailedJobsHistoryLimit.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "jobTemplate":
			if err := func() error {
				if err := s.JobTemplate.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "schedule":
			if err := func() error {
				s.Schedule = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "startingDeadlineSeconds":
			if err := func() error {
				s.StartingDeadlineSeconds.Reset()
				if err := s.StartingDeadlineSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "successfulJobsHistoryLimit":
			if err := func() error {
				s.SuccessfulJobsHistoryLimit.Reset()
				if err := s.SuccessfulJobsHistoryLimit.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "suspend":
			if err := func() error {
				s.Suspend.Reset()
				if err := s.Suspend.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active != nil {
		more.More()
		j.WriteObjectField("active")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Active {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.LastScheduleTime.Set {
		more.More()
		j.WriteObjectField("lastScheduleTime")
		s.LastScheduleTime.WriteJSON(j)
	}
	if s.LastSuccessfulTime.Set {
		more.More()
		j.WriteObjectField("lastSuccessfulTime")
		s.LastSuccessfulTime.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobStatus from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1beta1CronJobStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "active":
			if err := func() error {
				s.Active = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ObjectReference
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Active = append(s.Active, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastScheduleTime":
			if err := func() error {
				s.LastScheduleTime.Reset()
				if err := s.LastScheduleTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastSuccessfulTime":
			if err := func() error {
				s.LastSuccessfulTime.Reset()
				if err := s.LastSuccessfulTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1JobTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1beta1JobTemplateSpec from json stream.
func (s *IoK8sAPIBatchV1beta1JobTemplateSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1beta1JobTemplateSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequest from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequest to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.LastUpdateTime.Set {
		more.More()
		j.WriteObjectField("lastUpdateTime")
		s.LastUpdateTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestCondition from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequestCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastUpdateTime":
			if err := func() error {
				s.LastUpdateTime.Reset()
				if err := s.LastUpdateTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestList from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequestList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICertificatesV1CertificateSigningRequest
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ExpirationSeconds.Set {
		more.More()
		j.WriteObjectField("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	if s.Extra != nil {
		more.More()
		j.WriteObjectField("extra")
		s.Extra.WriteJSON(j)
	}
	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("request")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Request {
		_ = elem // Unsupported kind "primitive".
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("signerName")
	j.WriteString(s.SignerName)
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	if s.Usages != nil {
		more.More()
		j.WriteObjectField("usages")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Usages {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestSpec from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequestSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "expirationSeconds":
			if err := func() error {
				s.ExpirationSeconds.Reset()
				if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "extra":
			if err := func() error {
				s.Extra = nil
				var elem IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Extra = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "groups":
			if err := func() error {
				s.Groups = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Groups = append(s.Groups, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "request":
			if err := func() error {
				s.Request = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem byte
					if err := func() error {
						if err := fmt.Errorf(`decoding of "byte" (primitive) is not implemented`); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Request = append(s.Request, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "signerName":
			if err := func() error {
				s.SignerName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "usages":
			if err := func() error {
				s.Usages = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Usages = append(s.Usages, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Certificate != nil {
		more.More()
		j.WriteObjectField("certificate")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Certificate {
			_ = elem // Unsupported kind "primitive".
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestStatus from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequestStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "certificate":
			if err := func() error {
				s.Certificate = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem byte
					if err := func() error {
						if err := fmt.Errorf(`decoding of "byte" (primitive) is not implemented`); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Certificate = append(s.Certificate, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICertificatesV1CertificateSigningRequestCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1Lease) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoordinationV1Lease from json stream.
func (s *IoK8sAPICoordinationV1Lease) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoordinationV1Lease to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1LeaseList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoordinationV1LeaseList from json stream.
func (s *IoK8sAPICoordinationV1LeaseList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoordinationV1LeaseList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoordinationV1Lease
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1LeaseSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AcquireTime.Set {
		more.More()
		j.WriteObjectField("acquireTime")
		s.AcquireTime.WriteJSON(j)
	}
	if s.HolderIdentity.Set {
		more.More()
		j.WriteObjectField("holderIdentity")
		s.HolderIdentity.WriteJSON(j)
	}
	if s.LeaseDurationSeconds.Set {
		more.More()
		j.WriteObjectField("leaseDurationSeconds")
		s.LeaseDurationSeconds.WriteJSON(j)
	}
	if s.LeaseTransitions.Set {
		more.More()
		j.WriteObjectField("leaseTransitions")
		s.LeaseTransitions.WriteJSON(j)
	}
	if s.RenewTime.Set {
		more.More()
		j.WriteObjectField("renewTime")
		s.RenewTime.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoordinationV1LeaseSpec from json stream.
func (s *IoK8sAPICoordinationV1LeaseSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoordinationV1LeaseSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "acquireTime":
			if err := func() error {
				s.AcquireTime.Reset()
				if err := s.AcquireTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "holderIdentity":
			if err := func() error {
				s.HolderIdentity.Reset()
				if err := s.HolderIdentity.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "leaseDurationSeconds":
			if err := func() error {
				s.LeaseDurationSeconds.Reset()
				if err := s.LeaseDurationSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "leaseTransitions":
			if err := func() error {
				s.LeaseTransitions.Reset()
				if err := s.LeaseTransitions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "renewTime":
			if err := func() error {
				s.RenewTime.Reset()
				if err := s.RenewTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Partition.Set {
		more.More()
		j.WriteObjectField("partition")
		s.Partition.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource from json stream.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "partition":
			if err := func() error {
				s.Partition.Reset()
				if err := s.Partition.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeID":
			if err := func() error {
				s.VolumeID = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Affinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NodeAffinity.Set {
		more.More()
		j.WriteObjectField("nodeAffinity")
		s.NodeAffinity.WriteJSON(j)
	}
	if s.PodAffinity.Set {
		more.More()
		j.WriteObjectField("podAffinity")
		s.PodAffinity.WriteJSON(j)
	}
	if s.PodAntiAffinity.Set {
		more.More()
		j.WriteObjectField("podAntiAffinity")
		s.PodAntiAffinity.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Affinity from json stream.
func (s *IoK8sAPICoreV1Affinity) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Affinity to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nodeAffinity":
			if err := func() error {
				s.NodeAffinity.Reset()
				if err := s.NodeAffinity.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "podAffinity":
			if err := func() error {
				s.PodAffinity.Reset()
				if err := s.PodAffinity.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "podAntiAffinity":
			if err := func() error {
				s.PodAntiAffinity.Reset()
				if err := s.PodAntiAffinity.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AttachedVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("devicePath")
	j.WriteString(s.DevicePath)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1AttachedVolume from json stream.
func (s *IoK8sAPICoreV1AttachedVolume) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1AttachedVolume to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "devicePath":
			if err := func() error {
				s.DevicePath = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CachingMode.Set {
		more.More()
		j.WriteObjectField("cachingMode")
		s.CachingMode.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("diskName")
	j.WriteString(s.DiskName)
	more.More()
	j.WriteObjectField("diskURI")
	j.WriteString(s.DiskURI)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1AzureDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1AzureDiskVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "cachingMode":
			if err := func() error {
				s.CachingMode.Reset()
				if err := s.CachingMode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "diskName":
			if err := func() error {
				s.DiskName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "diskURI":
			if err := func() error {
				s.DiskURI = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureFilePersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretName")
	j.WriteString(s.SecretName)
	if s.SecretNamespace.Set {
		more.More()
		j.WriteObjectField("secretNamespace")
		s.SecretNamespace.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("shareName")
	j.WriteString(s.ShareName)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1AzureFilePersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1AzureFilePersistentVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretName":
			if err := func() error {
				s.SecretName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretNamespace":
			if err := func() error {
				s.SecretNamespace.Reset()
				if err := s.SecretNamespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shareName":
			if err := func() error {
				s.ShareName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureFileVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretName")
	j.WriteString(s.SecretName)
	more.More()
	j.WriteObjectField("shareName")
	j.WriteString(s.ShareName)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1AzureFileVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1AzureFileVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretName":
			if err := func() error {
				s.SecretName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shareName":
			if err := func() error {
				s.ShareName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ControllerExpandSecretRef.Set {
		more.More()
		j.WriteObjectField("controllerExpandSecretRef")
		s.ControllerExpandSecretRef.WriteJSON(j)
	}
	if s.ControllerPublishSecretRef.Set {
		more.More()
		j.WriteObjectField("controllerPublishSecretRef")
		s.ControllerPublishSecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.NodePublishSecretRef.Set {
		more.More()
		j.WriteObjectField("nodePublishSecretRef")
		s.NodePublishSecretRef.WriteJSON(j)
	}
	if s.NodeStageSecretRef.Set {
		more.More()
		j.WriteObjectField("nodeStageSecretRef")
		s.NodeStageSecretRef.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.VolumeAttributes != nil {
		more.More()
		j.WriteObjectField("volumeAttributes")
		s.VolumeAttributes.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeHandle")
	j.WriteString(s.VolumeHandle)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CSIPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CSIPersistentVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "controllerExpandSecretRef":
			if err := func() error {
				s.ControllerExpandSecretRef.Reset()
				if err := s.ControllerExpandSecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "controllerPublishSecretRef":
			if err := func() error {
				s.ControllerPublishSecretRef.Reset()
				if err := s.ControllerPublishSecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "driver":
			if err := func() error {
				s.Driver = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodePublishSecretRef":
			if err := func() error {
				s.NodePublishSecretRef.Reset()
				if err := s.NodePublishSecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeStageSecretRef":
			if err := func() error {
				s.NodeStageSecretRef.Reset()
				if err := s.NodeStageSecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeAttributes":
			if err := func() error {
				s.VolumeAttributes = nil
				var elem IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.VolumeAttributes = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeHandle":
			if err := func() error {
				s.VolumeHandle = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes from json stream.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.NodePublishSecretRef.Set {
		more.More()
		j.WriteObjectField("nodePublishSecretRef")
		s.NodePublishSecretRef.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.VolumeAttributes != nil {
		more.More()
		j.WriteObjectField("volumeAttributes")
		s.VolumeAttributes.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CSIVolumeSource from json stream.
func (s *IoK8sAPICoreV1CSIVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CSIVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "driver":
			if err := func() error {
				s.Driver = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodePublishSecretRef":
			if err := func() error {
				s.NodePublishSecretRef.Reset()
				if err := s.NodePublishSecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeAttributes":
			if err := func() error {
				s.VolumeAttributes = nil
				var elem IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.VolumeAttributes = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes from json stream.
func (s *IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Capabilities) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Add != nil {
		more.More()
		j.WriteObjectField("add")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Add {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Drop != nil {
		more.More()
		j.WriteObjectField("drop")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Drop {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Capabilities from json stream.
func (s *IoK8sAPICoreV1Capabilities) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Capabilities to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "add":
			if err := func() error {
				s.Add = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Add = append(s.Add, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "drop":
			if err := func() error {
				s.Drop = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Drop = append(s.Drop, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CephFSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretFile.Set {
		more.More()
		j.WriteObjectField("secretFile")
		s.SecretFile.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CephFSPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CephFSPersistentVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "monitors":
			if err := func() error {
				s.Monitors = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Monitors = append(s.Monitors, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretFile":
			if err := func() error {
				s.SecretFile.Reset()
				if err := s.SecretFile.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CephFSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretFile.Set {
		more.More()
		j.WriteObjectField("secretFile")
		s.SecretFile.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CephFSVolumeSource from json stream.
func (s *IoK8sAPICoreV1CephFSVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CephFSVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "monitors":
			if err := func() error {
				s.Monitors = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Monitors = append(s.Monitors, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretFile":
			if err := func() error {
				s.SecretFile.Reset()
				if err := s.SecretFile.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CinderPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CinderPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CinderPersistentVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeID":
			if err := func() error {
				s.VolumeID = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CinderVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CinderVolumeSource from json stream.
func (s *IoK8sAPICoreV1CinderVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CinderVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeID":
			if err := func() error {
				s.VolumeID = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ClientIPConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ClientIPConfig from json stream.
func (s *IoK8sAPICoreV1ClientIPConfig) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ClientIPConfig to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "timeoutSeconds":
			if err := func() error {
				s.TimeoutSeconds.Reset()
				if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ComponentCondition from json stream.
func (s *IoK8sAPICoreV1ComponentCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ComponentCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ComponentStatus from json stream.
func (s *IoK8sAPICoreV1ComponentStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ComponentStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ComponentCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentStatusList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ComponentStatusList from json stream.
func (s *IoK8sAPICoreV1ComponentStatusList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ComponentStatusList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ComponentStatus
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMap) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.BinaryData != nil {
		more.More()
		j.WriteObjectField("binaryData")
		s.BinaryData.WriteJSON(j)
	}
	if s.Data != nil {
		more.More()
		j.WriteObjectField("data")
		s.Data.WriteJSON(j)
	}
	if s.Immutable.Set {
		more.More()
		j.WriteObjectField("immutable")
		s.Immutable.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMap from json stream.
func (s *IoK8sAPICoreV1ConfigMap) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMap to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "binaryData":
			if err := func() error {
				s.BinaryData = nil
				var elem IoK8sAPICoreV1ConfigMapBinaryData
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.BinaryData = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "data":
			if err := func() error {
				s.Data = nil
				var elem IoK8sAPICoreV1ConfigMapData
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Data = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "immutable":
			if err := func() error {
				s.Immutable.Reset()
				if err := s.Immutable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapBinaryData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapBinaryData from json stream.
func (s *IoK8sAPICoreV1ConfigMapBinaryData) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapBinaryData to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapData from json stream.
func (s *IoK8sAPICoreV1ConfigMapData) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapData to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapEnvSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapEnvSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapEnvSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapEnvSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "optional":
			if err := func() error {
				s.Optional.Reset()
				if err := s.Optional.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapKeySelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapKeySelector from json stream.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapKeySelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "key":
			if err := func() error {
				s.Key = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "optional":
			if err := func() error {
				s.Optional.Reset()
				if err := s.Optional.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapList from json stream.
func (s *IoK8sAPICoreV1ConfigMapList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ConfigMap
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapNodeConfigSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("kubeletConfigKey")
	j.WriteString(s.KubeletConfigKey)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapNodeConfigSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapNodeConfigSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "kubeletConfigKey":
			if err := func() error {
				s.KubeletConfigKey = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceVersion":
			if err := func() error {
				s.ResourceVersion.Reset()
				if err := s.ResourceVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapProjection from json stream.
func (s *IoK8sAPICoreV1ConfigMapProjection) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapProjection to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1KeyToPath
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "optional":
			if err := func() error {
				s.Optional.Reset()
				if err := s.Optional.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapVolumeSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "defaultMode":
			if err := func() error {
				s.DefaultMode.Reset()
				if err := s.DefaultMode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1KeyToPath
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "optional":
			if err := func() error {
				s.Optional.Reset()
				if err := s.Optional.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Container) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Args != nil {
		more.More()
		j.WriteObjectField("args")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Args {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Command != nil {
		more.More()
		j.WriteObjectField("command")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Command {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Env != nil {
		more.More()
		j.WriteObjectField("env")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Env {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EnvFrom != nil {
		more.More()
		j.WriteObjectField("envFrom")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EnvFrom {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Image.Set {
		more.More()
		j.WriteObjectField("image")
		s.Image.WriteJSON(j)
	}
	if s.ImagePullPolicy.Set {
		more.More()
		j.WriteObjectField("imagePullPolicy")
		s.ImagePullPolicy.WriteJSON(j)
	}
	if s.Lifecycle.Set {
		more.More()
		j.WriteObjectField("lifecycle")
		s.Lifecycle.WriteJSON(j)
	}
	if s.LivenessProbe.Set {
		more.More()
		j.WriteObjectField("livenessProbe")
		s.LivenessProbe.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadinessProbe.Set {
		more.More()
		j.WriteObjectField("readinessProbe")
		s.ReadinessProbe.WriteJSON(j)
	}
	if s.Resources.Set {
		more.More()
		j.WriteObjectField("resources")
		s.Resources.WriteJSON(j)
	}
	if s.SecurityContext.Set {
		more.More()
		j.WriteObjectField("securityContext")
		s.SecurityContext.WriteJSON(j)
	}
	if s.StartupProbe.Set {
		more.More()
		j.WriteObjectField("startupProbe")
		s.StartupProbe.WriteJSON(j)
	}
	if s.Stdin.Set {
		more.More()
		j.WriteObjectField("stdin")
		s.Stdin.WriteJSON(j)
	}
	if s.StdinOnce.Set {
		more.More()
		j.WriteObjectField("stdinOnce")
		s.StdinOnce.WriteJSON(j)
	}
	if s.TerminationMessagePath.Set {
		more.More()
		j.WriteObjectField("terminationMessagePath")
		s.TerminationMessagePath.WriteJSON(j)
	}
	if s.TerminationMessagePolicy.Set {
		more.More()
		j.WriteObjectField("terminationMessagePolicy")
		s.TerminationMessagePolicy.WriteJSON(j)
	}
	if s.Tty.Set {
		more.More()
		j.WriteObjectField("tty")
		s.Tty.WriteJSON(j)
	}
	if s.VolumeDevices != nil {
		more.More()
		j.WriteObjectField("volumeDevices")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeDevices {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumeMounts != nil {
		more.More()
		j.WriteObjectField("volumeMounts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeMounts {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.WorkingDir.Set {
		more.More()
		j.WriteObjectField("workingDir")
		s.WorkingDir.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Container from json stream.
func (s *IoK8sAPICoreV1Container) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Container to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "args":
			if err := func() error {
				s.Args = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Args = append(s.Args, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "command":
			if err := func() error {
				s.Command = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Command = append(s.Command, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "env":
			if err := func() error {
				s.Env = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1EnvVar
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Env = append(s.Env, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "envFrom":
			if err := func() error {
				s.EnvFrom = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1EnvFromSource
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.EnvFrom = append(s.EnvFrom, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "image":
			if err := func() error {
				s.Image.Reset()
				if err := s.Image.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "imagePullPolicy":
			if err := func() error {
				s.ImagePullPolicy.Reset()
				if err := s.ImagePullPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lifecycle":
			if err := func() error {
				s.Lifecycle.Reset()
				if err := s.Lifecycle.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "livenessProbe":
			if err := func() error {
				s.LivenessProbe.Reset()
				if err := s.LivenessProbe.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ports":
			if err := func() error {
				s.Ports = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ContainerPort
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ports = append(s.Ports, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readinessProbe":
			if err := func() error {
				s.ReadinessProbe.Reset()
				if err := s.ReadinessProbe.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resources":
			if err := func() error {
				s.Resources.Reset()
				if err := s.Resources.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "securityContext":
			if err := func() error {
				s.SecurityContext.Reset()
				if err := s.SecurityContext.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "startupProbe":
			if err := func() error {
				s.StartupProbe.Reset()
				if err := s.StartupProbe.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "stdin":
			if err := func() error {
				s.Stdin.Reset()
				if err := s.Stdin.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "stdinOnce":
			if err := func() error {
				s.StdinOnce.Reset()
				if err := s.StdinOnce.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "terminationMessagePath":
			if err := func() error {
				s.TerminationMessagePath.Reset()
				if err := s.TerminationMessagePath.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "terminationMessagePolicy":
			if err := func() error {
				s.TerminationMessagePolicy.Reset()
				if err := s.TerminationMessagePolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tty":
			if err := func() error {
				s.Tty.Reset()
				if err := s.Tty.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeDevices":
			if err := func() error {
				s.VolumeDevices = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1VolumeDevice
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.VolumeDevices = append(s.VolumeDevices, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeMounts":
			if err := func() error {
				s.VolumeMounts = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1VolumeMount
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.VolumeMounts = append(s.VolumeMounts, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "workingDir":
			if err := func() error {
				s.WorkingDir.Reset()
				if err := s.WorkingDir.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerImage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Names != nil {
		more.More()
		j.WriteObjectField("names")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Names {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.SizeBytes.Set {
		more.More()
		j.WriteObjectField("sizeBytes")
		s.SizeBytes.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerImage from json stream.
func (s *IoK8sAPICoreV1ContainerImage) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerImage to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "names":
			if err := func() error {
				s.Names = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Names = append(s.Names, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sizeBytes":
			if err := func() error {
				s.SizeBytes.Reset()
				if err := s.SizeBytes.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("containerPort")
	j.WriteInt32(s.ContainerPort)
	if s.HostIP.Set {
		more.More()
		j.WriteObjectField("hostIP")
		s.HostIP.WriteJSON(j)
	}
	if s.HostPort.Set {
		more.More()
		j.WriteObjectField("hostPort")
		s.HostPort.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerPort from json stream.
func (s *IoK8sAPICoreV1ContainerPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerPort to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "containerPort":
			if err := func() error {
				s.ContainerPort = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostIP":
			if err := func() error {
				s.HostIP.Reset()
				if err := s.HostIP.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostPort":
			if err := func() error {
				s.HostPort.Reset()
				if err := s.HostPort.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "protocol":
			if err := func() error {
				s.Protocol.Reset()
				if err := s.Protocol.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerState) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Running.Set {
		more.More()
		j.WriteObjectField("running")
		s.Running.WriteJSON(j)
	}
	if s.Terminated.Set {
		more.More()
		j.WriteObjectField("terminated")
		s.Terminated.WriteJSON(j)
	}
	if s.Waiting.Set {
		more.More()
		j.WriteObjectField("waiting")
		s.Waiting.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerState from json stream.
func (s *IoK8sAPICoreV1ContainerState) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerState to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "running":
			if err := func() error {
				s.Running.Reset()
				if err := s.Running.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "terminated":
			if err := func() error {
				s.Terminated.Reset()
				if err := s.Terminated.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "waiting":
			if err := func() error {
				s.Waiting.Reset()
				if err := s.Waiting.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateRunning) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.StartedAt.Set {
		more.More()
		j.WriteObjectField("startedAt")
		s.StartedAt.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateRunning from json stream.
func (s *IoK8sAPICoreV1ContainerStateRunning) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerStateRunning to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "startedAt":
			if err := func() error {
				s.StartedAt.Reset()
				if err := s.StartedAt.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateTerminated) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerID.Set {
		more.More()
		j.WriteObjectField("containerID")
		s.ContainerID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("exitCode")
	j.WriteInt32(s.ExitCode)
	if s.FinishedAt.Set {
		more.More()
		j.WriteObjectField("finishedAt")
		s.FinishedAt.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Signal.Set {
		more.More()
		j.WriteObjectField("signal")
		s.Signal.WriteJSON(j)
	}
	if s.StartedAt.Set {
		more.More()
		j.WriteObjectField("startedAt")
		s.StartedAt.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateTerminated from json stream.
func (s *IoK8sAPICoreV1ContainerStateTerminated) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerStateTerminated to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "containerID":
			if err := func() error {
				s.ContainerID.Reset()
				if err := s.ContainerID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "exitCode":
			if err := func() error {
				s.ExitCode = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "finishedAt":
			if err := func() error {
				s.FinishedAt.Reset()
				if err := s.FinishedAt.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "signal":
			if err := func() error {
				s.Signal.Reset()
				if err := s.Signal.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "startedAt":
			if err := func() error {
				s.StartedAt.Reset()
				if err := s.StartedAt.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateWaiting) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateWaiting from json stream.
func (s *IoK8sAPICoreV1ContainerStateWaiting) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerStateWaiting to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerID.Set {
		more.More()
		j.WriteObjectField("containerID")
		s.ContainerID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("image")
	j.WriteString(s.Image)
	more.More()
	j.WriteObjectField("imageID")
	j.WriteString(s.ImageID)
	if s.LastState.Set {
		more.More()
		j.WriteObjectField("lastState")
		s.LastState.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("ready")
	j.WriteBool(s.Ready)
	more.More()
	j.WriteObjectField("restartCount")
	j.WriteInt32(s.RestartCount)
	if s.Started.Set {
		more.More()
		j.WriteObjectField("started")
		s.Started.WriteJSON(j)
	}
	if s.State.Set {
		more.More()
		j.WriteObjectField("state")
		s.State.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerStatus from json stream.
func (s *IoK8sAPICoreV1ContainerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "containerID":
			if err := func() error {
				s.ContainerID.Reset()
				if err := s.ContainerID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "image":
			if err := func() error {
				s.Image = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "imageID":
			if err := func() error {
				s.ImageID = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastState":
			if err := func() error {
				s.LastState.Reset()
				if err := s.LastState.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ready":
			if err := func() error {
				s.Ready = bool(i.Bool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "restartCount":
			if err := func() error {
				s.RestartCount = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "started":
			if err := func() error {
				s.Started.Reset()
				if err := s.Started.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DaemonEndpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("Port")
	j.WriteInt32(s.Port)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1DaemonEndpoint from json stream.
func (s *IoK8sAPICoreV1DaemonEndpoint) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1DaemonEndpoint to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "Port":
			if err := func() error {
				s.Port = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIProjection from json stream.
func (s *IoK8sAPICoreV1DownwardAPIProjection) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1DownwardAPIProjection to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1DownwardAPIVolumeFile
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIVolumeFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FieldRef.Set {
		more.More()
		j.WriteObjectField("fieldRef")
		s.FieldRef.WriteJSON(j)
	}
	if s.Mode.Set {
		more.More()
		j.WriteObjectField("mode")
		s.Mode.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ResourceFieldRef.Set {
		more.More()
		j.WriteObjectField("resourceFieldRef")
		s.ResourceFieldRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIVolumeFile from json stream.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1DownwardAPIVolumeFile to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fieldRef":
			if err := func() error {
				s.FieldRef.Reset()
				if err := s.FieldRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mode":
			if err := func() error {
				s.Mode.Reset()
				if err := s.Mode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceFieldRef":
			if err := func() error {
				s.ResourceFieldRef.Reset()
				if err := s.ResourceFieldRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIVolumeSource from json stream.
func (s *IoK8sAPICoreV1DownwardAPIVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1DownwardAPIVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "defaultMode":
			if err := func() error {
				s.DefaultMode.Reset()
				if err := s.DefaultMode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1DownwardAPIVolumeFile
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EmptyDirVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Medium.Set {
		more.More()
		j.WriteObjectField("medium")
		s.Medium.WriteJSON(j)
	}
	if s.SizeLimit.Set {
		more.More()
		j.WriteObjectField("sizeLimit")
		s.SizeLimit.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EmptyDirVolumeSource from json stream.
func (s *IoK8sAPICoreV1EmptyDirVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EmptyDirVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "medium":
			if err := func() error {
				s.Medium.Reset()
				if err := s.Medium.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sizeLimit":
			if err := func() error {
				s.SizeLimit.Reset()
				if err := s.SizeLimit.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointAddress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ip")
	j.WriteString(s.IP)
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	if s.TargetRef.Set {
		more.More()
		j.WriteObjectField("targetRef")
		s.TargetRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EndpointAddress from json stream.
func (s *IoK8sAPICoreV1EndpointAddress) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EndpointAddress to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "hostname":
			if err := func() error {
				s.Hostname.Reset()
				if err := s.Hostname.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ip":
			if err := func() error {
				s.IP = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeName":
			if err := func() error {
				s.NodeName.Reset()
				if err := s.NodeName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetRef":
			if err := func() error {
				s.TargetRef.Reset()
				if err := s.TargetRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("port")
	j.WriteInt32(s.Port)
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EndpointPort from json stream.
func (s *IoK8sAPICoreV1EndpointPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EndpointPort to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "appProtocol":
			if err := func() error {
				s.AppProtocol.Reset()
				if err := s.AppProtocol.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				s.Port = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "protocol":
			if err := func() error {
				s.Protocol.Reset()
				if err := s.Protocol.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointSubset) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Addresses != nil {
		more.More()
		j.WriteObjectField("addresses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Addresses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NotReadyAddresses != nil {
		more.More()
		j.WriteObjectField("notReadyAddresses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NotReadyAddresses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EndpointSubset from json stream.
func (s *IoK8sAPICoreV1EndpointSubset) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EndpointSubset to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "addresses":
			if err := func() error {
				s.Addresses = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1EndpointAddress
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Addresses = append(s.Addresses, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "notReadyAddresses":
			if err := func() error {
				s.NotReadyAddresses = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1EndpointAddress
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.NotReadyAddresses = append(s.NotReadyAddresses, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ports":
			if err := func() error {
				s.Ports = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1EndpointPort
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ports = append(s.Ports, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Endpoints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Subsets != nil {
		more.More()
		j.WriteObjectField("subsets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Subsets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Endpoints from json stream.
func (s *IoK8sAPICoreV1Endpoints) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Endpoints to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "subsets":
			if err := func() error {
				s.Subsets = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1EndpointSubset
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Subsets = append(s.Subsets, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointsList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EndpointsList from json stream.
func (s *IoK8sAPICoreV1EndpointsList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EndpointsList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Endpoints
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvFromSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMapRef.Set {
		more.More()
		j.WriteObjectField("configMapRef")
		s.ConfigMapRef.WriteJSON(j)
	}
	if s.Prefix.Set {
		more.More()
		j.WriteObjectField("prefix")
		s.Prefix.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EnvFromSource from json stream.
func (s *IoK8sAPICoreV1EnvFromSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EnvFromSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "configMapRef":
			if err := func() error {
				s.ConfigMapRef.Reset()
				if err := s.ConfigMapRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "prefix":
			if err := func() error {
				s.Prefix.Reset()
				if err := s.Prefix.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvVar) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	if s.ValueFrom.Set {
		more.More()
		j.WriteObjectField("valueFrom")
		s.ValueFrom.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EnvVar from json stream.
func (s *IoK8sAPICoreV1EnvVar) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EnvVar to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "valueFrom":
			if err := func() error {
				s.ValueFrom.Reset()
				if err := s.ValueFrom.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvVarSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMapKeyRef.Set {
		more.More()
		j.WriteObjectField("configMapKeyRef")
		s.ConfigMapKeyRef.WriteJSON(j)
	}
	if s.FieldRef.Set {
		more.More()
		j.WriteObjectField("fieldRef")
		s.FieldRef.WriteJSON(j)
	}
	if s.ResourceFieldRef.Set {
		more.More()
		j.WriteObjectField("resourceFieldRef")
		s.ResourceFieldRef.WriteJSON(j)
	}
	if s.SecretKeyRef.Set {
		more.More()
		j.WriteObjectField("secretKeyRef")
		s.SecretKeyRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EnvVarSource from json stream.
func (s *IoK8sAPICoreV1EnvVarSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EnvVarSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "configMapKeyRef":
			if err := func() error {
				s.ConfigMapKeyRef.Reset()
				if err := s.ConfigMapKeyRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fieldRef":
			if err := func() error {
				s.FieldRef.Reset()
				if err := s.FieldRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceFieldRef":
			if err := func() error {
				s.ResourceFieldRef.Reset()
				if err := s.ResourceFieldRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretKeyRef":
			if err := func() error {
				s.SecretKeyRef.Reset()
				if err := s.SecretKeyRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EphemeralContainer) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Args != nil {
		more.More()
		j.WriteObjectField("args")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Args {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Command != nil {
		more.More()
		j.WriteObjectField("command")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Command {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Env != nil {
		more.More()
		j.WriteObjectField("env")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Env {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EnvFrom != nil {
		more.More()
		j.WriteObjectField("envFrom")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EnvFrom {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Image.Set {
		more.More()
		j.WriteObjectField("image")
		s.Image.WriteJSON(j)
	}
	if s.ImagePullPolicy.Set {
		more.More()
		j.WriteObjectField("imagePullPolicy")
		s.ImagePullPolicy.WriteJSON(j)
	}
	if s.Lifecycle.Set {
		more.More()
		j.WriteObjectField("lifecycle")
		s.Lifecycle.WriteJSON(j)
	}
	if s.LivenessProbe.Set {
		more.More()
		j.WriteObjectField("livenessProbe")
		s.LivenessProbe.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadinessProbe.Set {
		more.More()
		j.WriteObjectField("readinessProbe")
		s.ReadinessProbe.WriteJSON(j)
	}
	if s.Resources.Set {
		more.More()
		j.WriteObjectField("resources")
		s.Resources.WriteJSON(j)
	}
	if s.SecurityContext.Set {
		more.More()
		j.WriteObjectField("securityContext")
		s.SecurityContext.WriteJSON(j)
	}
	if s.StartupProbe.Set {
		more.More()
		j.WriteObjectField("startupProbe")
		s.StartupProbe.WriteJSON(j)
	}
	if s.Stdin.Set {
		more.More()
		j.WriteObjectField("stdin")
		s.Stdin.WriteJSON(j)
	}
	if s.StdinOnce.Set {
		more.More()
		j.WriteObjectField("stdinOnce")
		s.StdinOnce.WriteJSON(j)
	}
	if s.TargetContainerName.Set {
		more.More()
		j.WriteObjectField("targetContainerName")
		s.TargetContainerName.WriteJSON(j)
	}
	if s.TerminationMessagePath.Set {
		more.More()
		j.WriteObjectField("terminationMessagePath")
		s.TerminationMessagePath.WriteJSON(j)
	}
	if s.TerminationMessagePolicy.Set {
		more.More()
		j.WriteObjectField("terminationMessagePolicy")
		s.TerminationMessagePolicy.WriteJSON(j)
	}
	if s.Tty.Set {
		more.More()
		j.WriteObjectField("tty")
		s.Tty.WriteJSON(j)
	}
	if s.VolumeDevices != nil {
		more.More()
		j.WriteObjectField("volumeDevices")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeDevices {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumeMounts != nil {
		more.More()
		j.WriteObjectField("volumeMounts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeMounts {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.WorkingDir.Set {
		more.More()
		j.WriteObjectField("workingDir")
		s.WorkingDir.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EphemeralContainer from json stream.
func (s *IoK8sAPICoreV1EphemeralContainer) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EphemeralContainer to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "args":
			if err := func() error {
				s.Args = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Args = append(s.Args, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "command":
			if err := func() error {
				s.Command = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Command = append(s.Command, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "env":
			if err := func() error {
				s.Env = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1EnvVar
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Env = append(s.Env, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "envFrom":
			if err := func() error {
				s.EnvFrom = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1EnvFromSource
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.EnvFrom = append(s.EnvFrom, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "image":
			if err := func() error {
				s.Image.Reset()
				if err := s.Image.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "imagePullPolicy":
			if err := func() error {
				s.ImagePullPolicy.Reset()
				if err := s.ImagePullPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lifecycle":
			if err := func() error {
				s.Lifecycle.Reset()
				if err := s.Lifecycle.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "livenessProbe":
			if err := func() error {
				s.LivenessProbe.Reset()
				if err := s.LivenessProbe.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ports":
			if err := func() error {
				s.Ports = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ContainerPort
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ports = append(s.Ports, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readinessProbe":
			if err := func() error {
				s.ReadinessProbe.Reset()
				if err := s.ReadinessProbe.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resources":
			if err := func() error {
				s.Resources.Reset()
				if err := s.Resources.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "securityContext":
			if err := func() error {
				s.SecurityContext.Reset()
				if err := s.SecurityContext.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "startupProbe":
			if err := func() error {
				s.StartupProbe.Reset()
				if err := s.StartupProbe.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "stdin":
			if err := func() error {
				s.Stdin.Reset()
				if err := s.Stdin.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "stdinOnce":
			if err := func() error {
				s.StdinOnce.Reset()
				if err := s.StdinOnce.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetContainerName":
			if err := func() error {
				s.TargetContainerName.Reset()
				if err := s.TargetContainerName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "terminationMessagePath":
			if err := func() error {
				s.TerminationMessagePath.Reset()
				if err := s.TerminationMessagePath.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "terminationMessagePolicy":
			if err := func() error {
				s.TerminationMessagePolicy.Reset()
				if err := s.TerminationMessagePolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tty":
			if err := func() error {
				s.Tty.Reset()
				if err := s.Tty.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeDevices":
			if err := func() error {
				s.VolumeDevices = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1VolumeDevice
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.VolumeDevices = append(s.VolumeDevices, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeMounts":
			if err := func() error {
				s.VolumeMounts = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1VolumeMount
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.VolumeMounts = append(s.VolumeMounts, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "workingDir":
			if err := func() error {
				s.WorkingDir.Reset()
				if err := s.WorkingDir.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EphemeralVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.VolumeClaimTemplate.Set {
		more.More()
		j.WriteObjectField("volumeClaimTemplate")
		s.VolumeClaimTemplate.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EphemeralVolumeSource from json stream.
func (s *IoK8sAPICoreV1EphemeralVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EphemeralVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "volumeClaimTemplate":
			if err := func() error {
				s.VolumeClaimTemplate.Reset()
				if err := s.VolumeClaimTemplate.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Action.Set {
		more.More()
		j.WriteObjectField("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Count.Set {
		more.More()
		j.WriteObjectField("count")
		s.Count.WriteJSON(j)
	}
	if s.EventTime.Set {
		more.More()
		j.WriteObjectField("eventTime")
		s.EventTime.WriteJSON(j)
	}
	if s.FirstTimestamp.Set {
		more.More()
		j.WriteObjectField("firstTimestamp")
		s.FirstTimestamp.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("involvedObject")
	s.InvolvedObject.WriteJSON(j)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.LastTimestamp.Set {
		more.More()
		j.WriteObjectField("lastTimestamp")
		s.LastTimestamp.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("metadata")
	s.Metadata.WriteJSON(j)
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Related.Set {
		more.More()
		j.WriteObjectField("related")
		s.Related.WriteJSON(j)
	}
	if s.ReportingComponent.Set {
		more.More()
		j.WriteObjectField("reportingComponent")
		s.ReportingComponent.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		more.More()
		j.WriteObjectField("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	if s.Series.Set {
		more.More()
		j.WriteObjectField("series")
		s.Series.WriteJSON(j)
	}
	if s.Source.Set {
		more.More()
		j.WriteObjectField("source")
		s.Source.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Event from json stream.
func (s *IoK8sAPICoreV1Event) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Event to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "eventTime":
			if err := func() error {
				s.EventTime.Reset()
				if err := s.EventTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "firstTimestamp":
			if err := func() error {
				s.FirstTimestamp.Reset()
				if err := s.FirstTimestamp.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "involvedObject":
			if err := func() error {
				if err := s.InvolvedObject.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastTimestamp":
			if err := func() error {
				s.LastTimestamp.Reset()
				if err := s.LastTimestamp.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "related":
			if err := func() error {
				s.Related.Reset()
				if err := s.Related.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reportingComponent":
			if err := func() error {
				s.ReportingComponent.Reset()
				if err := s.ReportingComponent.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reportingInstance":
			if err := func() error {
				s.ReportingInstance.Reset()
				if err := s.ReportingInstance.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "series":
			if err := func() error {
				s.Series.Reset()
				if err := s.Series.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "source":
			if err := func() error {
				s.Source.Reset()
				if err := s.Source.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EventList from json stream.
func (s *IoK8sAPICoreV1EventList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EventList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Event
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Count.Set {
		more.More()
		j.WriteObjectField("count")
		s.Count.WriteJSON(j)
	}
	if s.LastObservedTime.Set {
		more.More()
		j.WriteObjectField("lastObservedTime")
		s.LastObservedTime.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EventSeries from json stream.
func (s *IoK8sAPICoreV1EventSeries) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EventSeries to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastObservedTime":
			if err := func() error {
				s.LastObservedTime.Reset()
				if err := s.LastObservedTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Component.Set {
		more.More()
		j.WriteObjectField("component")
		s.Component.WriteJSON(j)
	}
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EventSource from json stream.
func (s *IoK8sAPICoreV1EventSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EventSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "component":
			if err := func() error {
				s.Component.Reset()
				if err := s.Component.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "host":
			if err := func() error {
				s.Host.Reset()
				if err := s.Host.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ExecAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Command != nil {
		more.More()
		j.WriteObjectField("command")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Command {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ExecAction from json stream.
func (s *IoK8sAPICoreV1ExecAction) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ExecAction to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "command":
			if err := func() error {
				s.Command = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Command = append(s.Command, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FCVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Lun.Set {
		more.More()
		j.WriteObjectField("lun")
		s.Lun.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.TargetWWNs != nil {
		more.More()
		j.WriteObjectField("targetWWNs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TargetWWNs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Wwids != nil {
		more.More()
		j.WriteObjectField("wwids")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Wwids {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FCVolumeSource from json stream.
func (s *IoK8sAPICoreV1FCVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FCVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lun":
			if err := func() error {
				s.Lun.Reset()
				if err := s.Lun.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetWWNs":
			if err := func() error {
				s.TargetWWNs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.TargetWWNs = append(s.TargetWWNs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "wwids":
			if err := func() error {
				s.Wwids = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Wwids = append(s.Wwids, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Options != nil {
		more.More()
		j.WriteObjectField("options")
		s.Options.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FlexPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FlexPersistentVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "driver":
			if err := func() error {
				s.Driver = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "options":
			if err := func() error {
				s.Options = nil
				var elem IoK8sAPICoreV1FlexPersistentVolumeSourceOptions
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Options = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexPersistentVolumeSourceOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FlexPersistentVolumeSourceOptions from json stream.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSourceOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FlexPersistentVolumeSourceOptions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Options != nil {
		more.More()
		j.WriteObjectField("options")
		s.Options.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FlexVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlexVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FlexVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "driver":
			if err := func() error {
				s.Driver = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "options":
			if err := func() error {
				s.Options = nil
				var elem IoK8sAPICoreV1FlexVolumeSourceOptions
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Options = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexVolumeSourceOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FlexVolumeSourceOptions from json stream.
func (s *IoK8sAPICoreV1FlexVolumeSourceOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FlexVolumeSourceOptions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlockerVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DatasetName.Set {
		more.More()
		j.WriteObjectField("datasetName")
		s.DatasetName.WriteJSON(j)
	}
	if s.DatasetUUID.Set {
		more.More()
		j.WriteObjectField("datasetUUID")
		s.DatasetUUID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FlockerVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlockerVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FlockerVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "datasetName":
			if err := func() error {
				s.DatasetName.Reset()
				if err := s.DatasetName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "datasetUUID":
			if err := func() error {
				s.DatasetUUID.Reset()
				if err := s.DatasetUUID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GCEPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Partition.Set {
		more.More()
		j.WriteObjectField("partition")
		s.Partition.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("pdName")
	j.WriteString(s.PdName)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1GCEPersistentDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1GCEPersistentDiskVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "partition":
			if err := func() error {
				s.Partition.Reset()
				if err := s.Partition.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pdName":
			if err := func() error {
				s.PdName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GitRepoVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Directory.Set {
		more.More()
		j.WriteObjectField("directory")
		s.Directory.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("repository")
	j.WriteString(s.Repository)
	if s.Revision.Set {
		more.More()
		j.WriteObjectField("revision")
		s.Revision.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1GitRepoVolumeSource from json stream.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1GitRepoVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "directory":
			if err := func() error {
				s.Directory.Reset()
				if err := s.Directory.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "repository":
			if err := func() error {
				s.Repository = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "revision":
			if err := func() error {
				s.Revision.Reset()
				if err := s.Revision.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GlusterfsPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("endpoints")
	j.WriteString(s.Endpoints)
	if s.EndpointsNamespace.Set {
		more.More()
		j.WriteObjectField("endpointsNamespace")
		s.EndpointsNamespace.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1GlusterfsPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1GlusterfsPersistentVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "endpoints":
			if err := func() error {
				s.Endpoints = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "endpointsNamespace":
			if err := func() error {
				s.EndpointsNamespace.Reset()
				if err := s.EndpointsNamespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GlusterfsVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("endpoints")
	j.WriteString(s.Endpoints)
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1GlusterfsVolumeSource from json stream.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1GlusterfsVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "endpoints":
			if err := func() error {
				s.Endpoints = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HTTPGetAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	if s.HttpHeaders != nil {
		more.More()
		j.WriteObjectField("httpHeaders")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.HttpHeaders {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	// Unsupported kind "alias".
	if s.Scheme.Set {
		more.More()
		j.WriteObjectField("scheme")
		s.Scheme.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1HTTPGetAction from json stream.
func (s *IoK8sAPICoreV1HTTPGetAction) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1HTTPGetAction to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "host":
			if err := func() error {
				s.Host.Reset()
				if err := s.Host.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "httpHeaders":
			if err := func() error {
				s.HttpHeaders = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1HTTPHeader
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.HttpHeaders = append(s.HttpHeaders, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgUtilIntstrIntOrString" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scheme":
			if err := func() error {
				s.Scheme.Reset()
				if err := s.Scheme.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HTTPHeader) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1HTTPHeader from json stream.
func (s *IoK8sAPICoreV1HTTPHeader) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1HTTPHeader to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Handler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Exec.Set {
		more.More()
		j.WriteObjectField("exec")
		s.Exec.WriteJSON(j)
	}
	if s.HttpGet.Set {
		more.More()
		j.WriteObjectField("httpGet")
		s.HttpGet.WriteJSON(j)
	}
	if s.TcpSocket.Set {
		more.More()
		j.WriteObjectField("tcpSocket")
		s.TcpSocket.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Handler from json stream.
func (s *IoK8sAPICoreV1Handler) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Handler to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "exec":
			if err := func() error {
				s.Exec.Reset()
				if err := s.Exec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "httpGet":
			if err := func() error {
				s.HttpGet.Reset()
				if err := s.HttpGet.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tcpSocket":
			if err := func() error {
				s.TcpSocket.Reset()
				if err := s.TcpSocket.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HostAlias) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hostnames != nil {
		more.More()
		j.WriteObjectField("hostnames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Hostnames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.IP.Set {
		more.More()
		j.WriteObjectField("ip")
		s.IP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1HostAlias from json stream.
func (s *IoK8sAPICoreV1HostAlias) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1HostAlias to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "hostnames":
			if err := func() error {
				s.Hostnames = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Hostnames = append(s.Hostnames, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HostPathVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1HostPathVolumeSource from json stream.
func (s *IoK8sAPICoreV1HostPathVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1HostPathVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "path":
			if err := func() error {
				s.Path = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ISCSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChapAuthDiscovery.Set {
		more.More()
		j.WriteObjectField("chapAuthDiscovery")
		s.ChapAuthDiscovery.WriteJSON(j)
	}
	if s.ChapAuthSession.Set {
		more.More()
		j.WriteObjectField("chapAuthSession")
		s.ChapAuthSession.WriteJSON(j)
	}
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.InitiatorName.Set {
		more.More()
		j.WriteObjectField("initiatorName")
		s.InitiatorName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("iqn")
	j.WriteString(s.Iqn)
	if s.IscsiInterface.Set {
		more.More()
		j.WriteObjectField("iscsiInterface")
		s.IscsiInterface.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("lun")
	j.WriteInt32(s.Lun)
	if s.Portals != nil {
		more.More()
		j.WriteObjectField("portals")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Portals {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("targetPortal")
	j.WriteString(s.TargetPortal)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ISCSIPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ISCSIPersistentVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "chapAuthDiscovery":
			if err := func() error {
				s.ChapAuthDiscovery.Reset()
				if err := s.ChapAuthDiscovery.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chapAuthSession":
			if err := func() error {
				s.ChapAuthSession.Reset()
				if err := s.ChapAuthSession.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "initiatorName":
			if err := func() error {
				s.InitiatorName.Reset()
				if err := s.InitiatorName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "iqn":
			if err := func() error {
				s.Iqn = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "iscsiInterface":
			if err := func() error {
				s.IscsiInterface.Reset()
				if err := s.IscsiInterface.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lun":
			if err := func() error {
				s.Lun = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "portals":
			if err := func() error {
				s.Portals = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Portals = append(s.Portals, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetPortal":
			if err := func() error {
				s.TargetPortal = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ISCSIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChapAuthDiscovery.Set {
		more.More()
		j.WriteObjectField("chapAuthDiscovery")
		s.ChapAuthDiscovery.WriteJSON(j)
	}
	if s.ChapAuthSession.Set {
		more.More()
		j.WriteObjectField("chapAuthSession")
		s.ChapAuthSession.WriteJSON(j)
	}
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.InitiatorName.Set {
		more.More()
		j.WriteObjectField("initiatorName")
		s.InitiatorName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("iqn")
	j.WriteString(s.Iqn)
	if s.IscsiInterface.Set {
		more.More()
		j.WriteObjectField("iscsiInterface")
		s.IscsiInterface.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("lun")
	j.WriteInt32(s.Lun)
	if s.Portals != nil {
		more.More()
		j.WriteObjectField("portals")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Portals {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("targetPortal")
	j.WriteString(s.TargetPortal)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ISCSIVolumeSource from json stream.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ISCSIVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "chapAuthDiscovery":
			if err := func() error {
				s.ChapAuthDiscovery.Reset()
				if err := s.ChapAuthDiscovery.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chapAuthSession":
			if err := func() error {
				s.ChapAuthSession.Reset()
				if err := s.ChapAuthSession.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "initiatorName":
			if err := func() error {
				s.InitiatorName.Reset()
				if err := s.InitiatorName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "iqn":
			if err := func() error {
				s.Iqn = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "iscsiInterface":
			if err := func() error {
				s.IscsiInterface.Reset()
				if err := s.IscsiInterface.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lun":
			if err := func() error {
				s.Lun = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "portals":
			if err := func() error {
				s.Portals = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Portals = append(s.Portals, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetPortal":
			if err := func() error {
				s.TargetPortal = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1KeyToPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	if s.Mode.Set {
		more.More()
		j.WriteObjectField("mode")
		s.Mode.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1KeyToPath from json stream.
func (s *IoK8sAPICoreV1KeyToPath) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1KeyToPath to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "key":
			if err := func() error {
				s.Key = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mode":
			if err := func() error {
				s.Mode.Reset()
				if err := s.Mode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Lifecycle) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PostStart.Set {
		more.More()
		j.WriteObjectField("postStart")
		s.PostStart.WriteJSON(j)
	}
	if s.PreStop.Set {
		more.More()
		j.WriteObjectField("preStop")
		s.PreStop.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Lifecycle from json stream.
func (s *IoK8sAPICoreV1Lifecycle) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Lifecycle to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "postStart":
			if err := func() error {
				s.PostStart.Reset()
				if err := s.PostStart.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "preStop":
			if err := func() error {
				s.PreStop.Reset()
				if err := s.PreStop.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRange from json stream.
func (s *IoK8sAPICoreV1LimitRange) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRange to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Default != nil {
		more.More()
		j.WriteObjectField("default")
		s.Default.WriteJSON(j)
	}
	if s.DefaultRequest != nil {
		more.More()
		j.WriteObjectField("defaultRequest")
		s.DefaultRequest.WriteJSON(j)
	}
	if s.Max != nil {
		more.More()
		j.WriteObjectField("max")
		s.Max.WriteJSON(j)
	}
	if s.MaxLimitRequestRatio != nil {
		more.More()
		j.WriteObjectField("maxLimitRequestRatio")
		s.MaxLimitRequestRatio.WriteJSON(j)
	}
	if s.Min != nil {
		more.More()
		j.WriteObjectField("min")
		s.Min.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItem from json stream.
func (s *IoK8sAPICoreV1LimitRangeItem) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItem to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "default":
			if err := func() error {
				s.Default = nil
				var elem IoK8sAPICoreV1LimitRangeItemDefault
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Default = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "defaultRequest":
			if err := func() error {
				s.DefaultRequest = nil
				var elem IoK8sAPICoreV1LimitRangeItemDefaultRequest
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.DefaultRequest = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "max":
			if err := func() error {
				s.Max = nil
				var elem IoK8sAPICoreV1LimitRangeItemMax
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Max = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "maxLimitRequestRatio":
			if err := func() error {
				s.MaxLimitRequestRatio = nil
				var elem IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.MaxLimitRequestRatio = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "min":
			if err := func() error {
				s.Min = nil
				var elem IoK8sAPICoreV1LimitRangeItemMin
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Min = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItemDefault) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItemDefault from json stream.
func (s *IoK8sAPICoreV1LimitRangeItemDefault) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItemDefault to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItemDefaultRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItemDefaultRequest from json stream.
func (s *IoK8sAPICoreV1LimitRangeItemDefaultRequest) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItemDefaultRequest to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItemMax) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItemMax from json stream.
func (s *IoK8sAPICoreV1LimitRangeItemMax) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItemMax to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio from json stream.
func (s *IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItemMin) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItemMin from json stream.
func (s *IoK8sAPICoreV1LimitRangeItemMin) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItemMin to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeList from json stream.
func (s *IoK8sAPICoreV1LimitRangeList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1LimitRange
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("limits")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Limits {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeSpec from json stream.
func (s *IoK8sAPICoreV1LimitRangeSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "limits":
			if err := func() error {
				s.Limits = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1LimitRangeItem
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Limits = append(s.Limits, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LoadBalancerIngress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.IP.Set {
		more.More()
		j.WriteObjectField("ip")
		s.IP.WriteJSON(j)
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LoadBalancerIngress from json stream.
func (s *IoK8sAPICoreV1LoadBalancerIngress) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LoadBalancerIngress to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "hostname":
			if err := func() error {
				s.Hostname.Reset()
				if err := s.Hostname.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ports":
			if err := func() error {
				s.Ports = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PortStatus
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ports = append(s.Ports, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LoadBalancerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ingress != nil {
		more.More()
		j.WriteObjectField("ingress")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ingress {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LoadBalancerStatus from json stream.
func (s *IoK8sAPICoreV1LoadBalancerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LoadBalancerStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "ingress":
			if err := func() error {
				s.Ingress = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1LoadBalancerIngress
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ingress = append(s.Ingress, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LocalObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LocalObjectReference from json stream.
func (s *IoK8sAPICoreV1LocalObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LocalObjectReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LocalVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LocalVolumeSource from json stream.
func (s *IoK8sAPICoreV1LocalVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LocalVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NFSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("server")
	j.WriteString(s.Server)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NFSVolumeSource from json stream.
func (s *IoK8sAPICoreV1NFSVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NFSVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "path":
			if err := func() error {
				s.Path = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "server":
			if err := func() error {
				s.Server = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Namespace) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Namespace from json stream.
func (s *IoK8sAPICoreV1Namespace) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Namespace to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NamespaceCondition from json stream.
func (s *IoK8sAPICoreV1NamespaceCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NamespaceCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NamespaceList from json stream.
func (s *IoK8sAPICoreV1NamespaceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NamespaceList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Namespace
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Finalizers != nil {
		more.More()
		j.WriteObjectField("finalizers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Finalizers {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NamespaceSpec from json stream.
func (s *IoK8sAPICoreV1NamespaceSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NamespaceSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "finalizers":
			if err := func() error {
				s.Finalizers = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Finalizers = append(s.Finalizers, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NamespaceStatus from json stream.
func (s *IoK8sAPICoreV1NamespaceStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NamespaceStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1NamespaceCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "phase":
			if err := func() error {
				s.Phase.Reset()
				if err := s.Phase.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Node) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Node from json stream.
func (s *IoK8sAPICoreV1Node) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Node to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeAddress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("address")
	j.WriteString(s.Address)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeAddress from json stream.
func (s *IoK8sAPICoreV1NodeAddress) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeAddress to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "address":
			if err := func() error {
				s.Address = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PreferredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("preferredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PreferredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RequiredDuringSchedulingIgnoredDuringExecution.Set {
		more.More()
		j.WriteObjectField("requiredDuringSchedulingIgnoredDuringExecution")
		s.RequiredDuringSchedulingIgnoredDuringExecution.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeAffinity from json stream.
func (s *IoK8sAPICoreV1NodeAffinity) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeAffinity to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if err := func() error {
				s.PreferredDuringSchedulingIgnoredDuringExecution = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PreferredSchedulingTerm
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.PreferredDuringSchedulingIgnoredDuringExecution = append(s.PreferredDuringSchedulingIgnoredDuringExecution, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if err := func() error {
				s.RequiredDuringSchedulingIgnoredDuringExecution.Reset()
				if err := s.RequiredDuringSchedulingIgnoredDuringExecution.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastHeartbeatTime.Set {
		more.More()
		j.WriteObjectField("lastHeartbeatTime")
		s.LastHeartbeatTime.WriteJSON(j)
	}
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeCondition from json stream.
func (s *IoK8sAPICoreV1NodeCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastHeartbeatTime":
			if err := func() error {
				s.LastHeartbeatTime.Reset()
				if err := s.LastHeartbeatTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeConfigSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMap.Set {
		more.More()
		j.WriteObjectField("configMap")
		s.ConfigMap.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeConfigSource from json stream.
func (s *IoK8sAPICoreV1NodeConfigSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeConfigSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "configMap":
			if err := func() error {
				s.ConfigMap.Reset()
				if err := s.ConfigMap.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeConfigStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active.Set {
		more.More()
		j.WriteObjectField("active")
		s.Active.WriteJSON(j)
	}
	if s.Assigned.Set {
		more.More()
		j.WriteObjectField("assigned")
		s.Assigned.WriteJSON(j)
	}
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	if s.LastKnownGood.Set {
		more.More()
		j.WriteObjectField("lastKnownGood")
		s.LastKnownGood.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeConfigStatus from json stream.
func (s *IoK8sAPICoreV1NodeConfigStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeConfigStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "active":
			if err := func() error {
				s.Active.Reset()
				if err := s.Active.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "assigned":
			if err := func() error {
				s.Assigned.Reset()
				if err := s.Assigned.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastKnownGood":
			if err := func() error {
				s.LastKnownGood.Reset()
				if err := s.LastKnownGood.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeDaemonEndpoints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.KubeletEndpoint.Set {
		more.More()
		j.WriteObjectField("kubeletEndpoint")
		s.KubeletEndpoint.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeDaemonEndpoints from json stream.
func (s *IoK8sAPICoreV1NodeDaemonEndpoints) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeDaemonEndpoints to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "kubeletEndpoint":
			if err := func() error {
				s.KubeletEndpoint.Reset()
				if err := s.KubeletEndpoint.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeList from json stream.
func (s *IoK8sAPICoreV1NodeList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Node
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("nodeSelectorTerms")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NodeSelectorTerms {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeSelector from json stream.
func (s *IoK8sAPICoreV1NodeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeSelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nodeSelectorTerms":
			if err := func() error {
				s.NodeSelectorTerms = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1NodeSelectorTerm
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.NodeSelectorTerms = append(s.NodeSelectorTerms, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	more.More()
	j.WriteObjectField("operator")
	j.WriteString(s.Operator)
	if s.Values != nil {
		more.More()
		j.WriteObjectField("values")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Values {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeSelectorRequirement from json stream.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeSelectorRequirement to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "key":
			if err := func() error {
				s.Key = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "operator":
			if err := func() error {
				s.Operator = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "values":
			if err := func() error {
				s.Values = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Values = append(s.Values, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelectorTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchExpressions != nil {
		more.More()
		j.WriteObjectField("matchExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.MatchFields != nil {
		more.More()
		j.WriteObjectField("matchFields")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchFields {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeSelectorTerm from json stream.
func (s *IoK8sAPICoreV1NodeSelectorTerm) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeSelectorTerm to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "matchExpressions":
			if err := func() error {
				s.MatchExpressions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1NodeSelectorRequirement
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.MatchExpressions = append(s.MatchExpressions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "matchFields":
			if err := func() error {
				s.MatchFields = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1NodeSelectorRequirement
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.MatchFields = append(s.MatchFields, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigSource.Set {
		more.More()
		j.WriteObjectField("configSource")
		s.ConfigSource.WriteJSON(j)
	}
	if s.ExternalID.Set {
		more.More()
		j.WriteObjectField("externalID")
		s.ExternalID.WriteJSON(j)
	}
	if s.PodCIDR.Set {
		more.More()
		j.WriteObjectField("podCIDR")
		s.PodCIDR.WriteJSON(j)
	}
	if s.PodCIDRs != nil {
		more.More()
		j.WriteObjectField("podCIDRs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PodCIDRs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ProviderID.Set {
		more.More()
		j.WriteObjectField("providerID")
		s.ProviderID.WriteJSON(j)
	}
	if s.Taints != nil {
		more.More()
		j.WriteObjectField("taints")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Taints {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Unschedulable.Set {
		more.More()
		j.WriteObjectField("unschedulable")
		s.Unschedulable.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeSpec from json stream.
func (s *IoK8sAPICoreV1NodeSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "configSource":
			if err := func() error {
				s.ConfigSource.Reset()
				if err := s.ConfigSource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "externalID":
			if err := func() error {
				s.ExternalID.Reset()
				if err := s.ExternalID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "podCIDR":
			if err := func() error {
				s.PodCIDR.Reset()
				if err := s.PodCIDR.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "podCIDRs":
			if err := func() error {
				s.PodCIDRs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.PodCIDRs = append(s.PodCIDRs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "providerID":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "taints":
			if err := func() error {
				s.Taints = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Taint
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Taints = append(s.Taints, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "unschedulable":
			if err := func() error {
				s.Unschedulable.Reset()
				if err := s.Unschedulable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Addresses != nil {
		more.More()
		j.WriteObjectField("addresses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Addresses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Allocatable != nil {
		more.More()
		j.WriteObjectField("allocatable")
		s.Allocatable.WriteJSON(j)
	}
	if s.Capacity != nil {
		more.More()
		j.WriteObjectField("capacity")
		s.Capacity.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Config.Set {
		more.More()
		j.WriteObjectField("config")
		s.Config.WriteJSON(j)
	}
	if s.DaemonEndpoints.Set {
		more.More()
		j.WriteObjectField("daemonEndpoints")
		s.DaemonEndpoints.WriteJSON(j)
	}
	if s.Images != nil {
		more.More()
		j.WriteObjectField("images")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Images {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NodeInfo.Set {
		more.More()
		j.WriteObjectField("nodeInfo")
		s.NodeInfo.WriteJSON(j)
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	if s.VolumesAttached != nil {
		more.More()
		j.WriteObjectField("volumesAttached")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumesAttached {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumesInUse != nil {
		more.More()
		j.WriteObjectField("volumesInUse")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumesInUse {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeStatus from json stream.
func (s *IoK8sAPICoreV1NodeStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "addresses":
			if err := func() error {
				s.Addresses = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1NodeAddress
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Addresses = append(s.Addresses, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "allocatable":
			if err := func() error {
				s.Allocatable = nil
				var elem IoK8sAPICoreV1NodeStatusAllocatable
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Allocatable = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "capacity":
			if err := func() error {
				s.Capacity = nil
				var elem IoK8sAPICoreV1NodeStatusCapacity
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Capacity = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1NodeCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "config":
			if err := func() error {
				s.Config.Reset()
				if err := s.Config.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "daemonEndpoints":
			if err := func() error {
				s.DaemonEndpoints.Reset()
				if err := s.DaemonEndpoints.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "images":
			if err := func() error {
				s.Images = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ContainerImage
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Images = append(s.Images, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeInfo":
			if err := func() error {
				s.NodeInfo.Reset()
				if err := s.NodeInfo.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "phase":
			if err := func() error {
				s.Phase.Reset()
				if err := s.Phase.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumesAttached":
			if err := func() error {
				s.VolumesAttached = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1AttachedVolume
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.VolumesAttached = append(s.VolumesAttached, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumesInUse":
			if err := func() error {
				s.VolumesInUse = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.VolumesInUse = append(s.VolumesInUse, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeStatusAllocatable) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeStatusAllocatable from json stream.
func (s *IoK8sAPICoreV1NodeStatusAllocatable) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeStatusAllocatable to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeStatusCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeStatusCapacity from json stream.
func (s *IoK8sAPICoreV1NodeStatusCapacity) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeStatusCapacity to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSystemInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("architecture")
	j.WriteString(s.Architecture)
	more.More()
	j.WriteObjectField("bootID")
	j.WriteString(s.BootID)
	more.More()
	j.WriteObjectField("containerRuntimeVersion")
	j.WriteString(s.ContainerRuntimeVersion)
	more.More()
	j.WriteObjectField("kernelVersion")
	j.WriteString(s.KernelVersion)
	more.More()
	j.WriteObjectField("kubeProxyVersion")
	j.WriteString(s.KubeProxyVersion)
	more.More()
	j.WriteObjectField("kubeletVersion")
	j.WriteString(s.KubeletVersion)
	more.More()
	j.WriteObjectField("machineID")
	j.WriteString(s.MachineID)
	more.More()
	j.WriteObjectField("operatingSystem")
	j.WriteString(s.OperatingSystem)
	more.More()
	j.WriteObjectField("osImage")
	j.WriteString(s.OsImage)
	more.More()
	j.WriteObjectField("systemUUID")
	j.WriteString(s.SystemUUID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeSystemInfo from json stream.
func (s *IoK8sAPICoreV1NodeSystemInfo) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeSystemInfo to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "architecture":
			if err := func() error {
				s.Architecture = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "bootID":
			if err := func() error {
				s.BootID = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "containerRuntimeVersion":
			if err := func() error {
				s.ContainerRuntimeVersion = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kernelVersion":
			if err := func() error {
				s.KernelVersion = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kubeProxyVersion":
			if err := func() error {
				s.KubeProxyVersion = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kubeletVersion":
			if err := func() error {
				s.KubeletVersion = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "machineID":
			if err := func() error {
				s.MachineID = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "operatingSystem":
			if err := func() error {
				s.OperatingSystem = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "osImage":
			if err := func() error {
				s.OsImage = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "systemUUID":
			if err := func() error {
				s.SystemUUID = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ObjectFieldSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("fieldPath")
	j.WriteString(s.FieldPath)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ObjectFieldSelector from json stream.
func (s *IoK8sAPICoreV1ObjectFieldSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ObjectFieldSelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fieldPath":
			if err := func() error {
				s.FieldPath = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.FieldPath.Set {
		more.More()
		j.WriteObjectField("fieldPath")
		s.FieldPath.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ObjectReference from json stream.
func (s *IoK8sAPICoreV1ObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ObjectReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fieldPath":
			if err := func() error {
				s.FieldPath.Reset()
				if err := s.FieldPath.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace.Reset()
				if err := s.Namespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceVersion":
			if err := func() error {
				s.ResourceVersion.Reset()
				if err := s.ResourceVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolume from json stream.
func (s *IoK8sAPICoreV1PersistentVolume) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolume to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaim) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaim from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaim to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastProbeTime.Set {
		more.More()
		j.WriteObjectField("lastProbeTime")
		s.LastProbeTime.WriteJSON(j)
	}
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimCondition from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastProbeTime":
			if err := func() error {
				s.LastProbeTime.Reset()
				if err := s.LastProbeTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimList from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PersistentVolumeClaim
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AccessModes != nil {
		more.More()
		j.WriteObjectField("accessModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AccessModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.DataSource.Set {
		more.More()
		j.WriteObjectField("dataSource")
		s.DataSource.WriteJSON(j)
	}
	if s.DataSourceRef.Set {
		more.More()
		j.WriteObjectField("dataSourceRef")
		s.DataSourceRef.WriteJSON(j)
	}
	if s.Resources.Set {
		more.More()
		j.WriteObjectField("resources")
		s.Resources.WriteJSON(j)
	}
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	if s.StorageClassName.Set {
		more.More()
		j.WriteObjectField("storageClassName")
		s.StorageClassName.WriteJSON(j)
	}
	if s.VolumeMode.Set {
		more.More()
		j.WriteObjectField("volumeMode")
		s.VolumeMode.WriteJSON(j)
	}
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimSpec from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "accessModes":
			if err := func() error {
				s.AccessModes = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AccessModes = append(s.AccessModes, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "dataSource":
			if err := func() error {
				s.DataSource.Reset()
				if err := s.DataSource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "dataSourceRef":
			if err := func() error {
				s.DataSourceRef.Reset()
				if err := s.DataSourceRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resources":
			if err := func() error {
				s.Resources.Reset()
				if err := s.Resources.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				s.Selector.Reset()
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storageClassName":
			if err := func() error {
				s.StorageClassName.Reset()
				if err := s.StorageClassName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeMode":
			if err := func() error {
				s.VolumeMode.Reset()
				if err := s.VolumeMode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeName":
			if err := func() error {
				s.VolumeName.Reset()
				if err := s.VolumeName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AccessModes != nil {
		more.More()
		j.WriteObjectField("accessModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AccessModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Capacity != nil {
		more.More()
		j.WriteObjectField("capacity")
		s.Capacity.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimStatus from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "accessModes":
			if err := func() error {
				s.AccessModes = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AccessModes = append(s.AccessModes, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "capacity":
			if err := func() error {
				s.Capacity = nil
				var elem IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Capacity = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PersistentVolumeClaimCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "phase":
			if err := func() error {
				s.Phase.Reset()
				if err := s.Phase.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimTemplate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimTemplate from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimTemplate) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimTemplate to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("claimName")
	j.WriteString(s.ClaimName)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimVolumeSource from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "claimName":
			if err := func() error {
				s.ClaimName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeList from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PersistentVolume
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AccessModes != nil {
		more.More()
		j.WriteObjectField("accessModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AccessModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AwsElasticBlockStore.Set {
		more.More()
		j.WriteObjectField("awsElasticBlockStore")
		s.AwsElasticBlockStore.WriteJSON(j)
	}
	if s.AzureDisk.Set {
		more.More()
		j.WriteObjectField("azureDisk")
		s.AzureDisk.WriteJSON(j)
	}
	if s.AzureFile.Set {
		more.More()
		j.WriteObjectField("azureFile")
		s.AzureFile.WriteJSON(j)
	}
	if s.Capacity != nil {
		more.More()
		j.WriteObjectField("capacity")
		s.Capacity.WriteJSON(j)
	}
	if s.Cephfs.Set {
		more.More()
		j.WriteObjectField("cephfs")
		s.Cephfs.WriteJSON(j)
	}
	if s.Cinder.Set {
		more.More()
		j.WriteObjectField("cinder")
		s.Cinder.WriteJSON(j)
	}
	if s.ClaimRef.Set {
		more.More()
		j.WriteObjectField("claimRef")
		s.ClaimRef.WriteJSON(j)
	}
	if s.Csi.Set {
		more.More()
		j.WriteObjectField("csi")
		s.Csi.WriteJSON(j)
	}
	if s.Fc.Set {
		more.More()
		j.WriteObjectField("fc")
		s.Fc.WriteJSON(j)
	}
	if s.FlexVolume.Set {
		more.More()
		j.WriteObjectField("flexVolume")
		s.FlexVolume.WriteJSON(j)
	}
	if s.Flocker.Set {
		more.More()
		j.WriteObjectField("flocker")
		s.Flocker.WriteJSON(j)
	}
	if s.GcePersistentDisk.Set {
		more.More()
		j.WriteObjectField("gcePersistentDisk")
		s.GcePersistentDisk.WriteJSON(j)
	}
	if s.Glusterfs.Set {
		more.More()
		j.WriteObjectField("glusterfs")
		s.Glusterfs.WriteJSON(j)
	}
	if s.HostPath.Set {
		more.More()
		j.WriteObjectField("hostPath")
		s.HostPath.WriteJSON(j)
	}
	if s.Iscsi.Set {
		more.More()
		j.WriteObjectField("iscsi")
		s.Iscsi.WriteJSON(j)
	}
	if s.Local.Set {
		more.More()
		j.WriteObjectField("local")
		s.Local.WriteJSON(j)
	}
	if s.MountOptions != nil {
		more.More()
		j.WriteObjectField("mountOptions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MountOptions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Nfs.Set {
		more.More()
		j.WriteObjectField("nfs")
		s.Nfs.WriteJSON(j)
	}
	if s.NodeAffinity.Set {
		more.More()
		j.WriteObjectField("nodeAffinity")
		s.NodeAffinity.WriteJSON(j)
	}
	if s.PersistentVolumeReclaimPolicy.Set {
		more.More()
		j.WriteObjectField("persistentVolumeReclaimPolicy")
		s.PersistentVolumeReclaimPolicy.WriteJSON(j)
	}
	if s.PhotonPersistentDisk.Set {
		more.More()
		j.WriteObjectField("photonPersistentDisk")
		s.PhotonPersistentDisk.WriteJSON(j)
	}
	if s.PortworxVolume.Set {
		more.More()
		j.WriteObjectField("portworxVolume")
		s.PortworxVolume.WriteJSON(j)
	}
	if s.Quobyte.Set {
		more.More()
		j.WriteObjectField("quobyte")
		s.Quobyte.WriteJSON(j)
	}
	if s.Rbd.Set {
		more.More()
		j.WriteObjectField("rbd")
		s.Rbd.WriteJSON(j)
	}
	if s.ScaleIO.Set {
		more.More()
		j.WriteObjectField("scaleIO")
		s.ScaleIO.WriteJSON(j)
	}
	if s.StorageClassName.Set {
		more.More()
		j.WriteObjectField("storageClassName")
		s.StorageClassName.WriteJSON(j)
	}
	if s.Storageos.Set {
		more.More()
		j.WriteObjectField("storageos")
		s.Storageos.WriteJSON(j)
	}
	if s.VolumeMode.Set {
		more.More()
		j.WriteObjectField("volumeMode")
		s.VolumeMode.WriteJSON(j)
	}
	if s.VsphereVolume.Set {
		more.More()
		j.WriteObjectField("vsphereVolume")
		s.VsphereVolume.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeSpec from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "accessModes":
			if err := func() error {
				s.AccessModes = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AccessModes = append(s.AccessModes, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "awsElasticBlockStore":
			if err := func() error {
				s.AwsElasticBlockStore.Reset()
				if err := s.AwsElasticBlockStore.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "azureDisk":
			if err := func() error {
				s.AzureDisk.Reset()
				if err := s.AzureDisk.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "azureFile":
			if err := func() error {
				s.AzureFile.Reset()
				if err := s.AzureFile.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "capacity":
			if err := func() error {
				s.Capacity = nil
				var elem IoK8sAPICoreV1PersistentVolumeSpecCapacity
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Capacity = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "cephfs":
			if err := func() error {
				s.Cephfs.Reset()
				if err := s.Cephfs.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "cinder":
			if err := func() error {
				s.Cinder.Reset()
				if err := s.Cinder.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "claimRef":
			if err := func() error {
				s.ClaimRef.Reset()
				if err := s.ClaimRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "csi":
			if err := func() error {
				s.Csi.Reset()
				if err := s.Csi.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fc":
			if err := func() error {
				s.Fc.Reset()
				if err := s.Fc.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "flexVolume":
			if err := func() error {
				s.FlexVolume.Reset()
				if err := s.FlexVolume.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "flocker":
			if err := func() error {
				s.Flocker.Reset()
				if err := s.Flocker.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "gcePersistentDisk":
			if err := func() error {
				s.GcePersistentDisk.Reset()
				if err := s.GcePersistentDisk.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "glusterfs":
			if err := func() error {
				s.Glusterfs.Reset()
				if err := s.Glusterfs.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostPath":
			if err := func() error {
				s.HostPath.Reset()
				if err := s.HostPath.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "iscsi":
			if err := func() error {
				s.Iscsi.Reset()
				if err := s.Iscsi.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "local":
			if err := func() error {
				s.Local.Reset()
				if err := s.Local.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mountOptions":
			if err := func() error {
				s.MountOptions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.MountOptions = append(s.MountOptions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nfs":
			if err := func() error {
				s.Nfs.Reset()
				if err := s.Nfs.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeAffinity":
			if err := func() error {
				s.NodeAffinity.Reset()
				if err := s.NodeAffinity.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "persistentVolumeReclaimPolicy":
			if err := func() error {
				s.PersistentVolumeReclaimPolicy.Reset()
				if err := s.PersistentVolumeReclaimPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photonPersistentDisk":
			if err := func() error {
				s.PhotonPersistentDisk.Reset()
				if err := s.PhotonPersistentDisk.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "portworxVolume":
			if err := func() error {
				s.PortworxVolume.Reset()
				if err := s.PortworxVolume.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "quobyte":
			if err := func() error {
				s.Quobyte.Reset()
				if err := s.Quobyte.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rbd":
			if err := func() error {
				s.Rbd.Reset()
				if err := s.Rbd.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scaleIO":
			if err := func() error {
				s.ScaleIO.Reset()
				if err := s.ScaleIO.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storageClassName":
			if err := func() error {
				s.StorageClassName.Reset()
				if err := s.StorageClassName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storageos":
			if err := func() error {
				s.Storageos.Reset()
				if err := s.Storageos.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeMode":
			if err := func() error {
				s.VolumeMode.Reset()
				if err := s.VolumeMode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "vsphereVolume":
			if err := func() error {
				s.VsphereVolume.Reset()
				if err := s.VsphereVolume.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeSpecCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeSpecCapacity from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeSpecCapacity) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeSpecCapacity to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeStatus from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "phase":
			if err := func() error {
				s.Phase.Reset()
				if err := s.Phase.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("pdID")
	j.WriteString(s.PdID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PhotonPersistentDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PhotonPersistentDiskVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pdID":
			if err := func() error {
				s.PdID = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Pod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Pod from json stream.
func (s *IoK8sAPICoreV1Pod) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Pod to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PreferredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("preferredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PreferredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("requiredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RequiredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodAffinity from json stream.
func (s *IoK8sAPICoreV1PodAffinity) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodAffinity to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if err := func() error {
				s.PreferredDuringSchedulingIgnoredDuringExecution = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1WeightedPodAffinityTerm
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.PreferredDuringSchedulingIgnoredDuringExecution = append(s.PreferredDuringSchedulingIgnoredDuringExecution, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if err := func() error {
				s.RequiredDuringSchedulingIgnoredDuringExecution = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PodAffinityTerm
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.RequiredDuringSchedulingIgnoredDuringExecution = append(s.RequiredDuringSchedulingIgnoredDuringExecution, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAffinityTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LabelSelector.Set {
		more.More()
		j.WriteObjectField("labelSelector")
		s.LabelSelector.WriteJSON(j)
	}
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.Namespaces != nil {
		more.More()
		j.WriteObjectField("namespaces")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Namespaces {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("topologyKey")
	j.WriteString(s.TopologyKey)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodAffinityTerm from json stream.
func (s *IoK8sAPICoreV1PodAffinityTerm) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodAffinityTerm to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "labelSelector":
			if err := func() error {
				s.LabelSelector.Reset()
				if err := s.LabelSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespaceSelector":
			if err := func() error {
				s.NamespaceSelector.Reset()
				if err := s.NamespaceSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespaces":
			if err := func() error {
				s.Namespaces = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Namespaces = append(s.Namespaces, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "topologyKey":
			if err := func() error {
				s.TopologyKey = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAntiAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PreferredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("preferredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PreferredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("requiredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RequiredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodAntiAffinity from json stream.
func (s *IoK8sAPICoreV1PodAntiAffinity) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodAntiAffinity to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if err := func() error {
				s.PreferredDuringSchedulingIgnoredDuringExecution = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1WeightedPodAffinityTerm
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.PreferredDuringSchedulingIgnoredDuringExecution = append(s.PreferredDuringSchedulingIgnoredDuringExecution, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if err := func() error {
				s.RequiredDuringSchedulingIgnoredDuringExecution = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PodAffinityTerm
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.RequiredDuringSchedulingIgnoredDuringExecution = append(s.RequiredDuringSchedulingIgnoredDuringExecution, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastProbeTime.Set {
		more.More()
		j.WriteObjectField("lastProbeTime")
		s.LastProbeTime.WriteJSON(j)
	}
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodCondition from json stream.
func (s *IoK8sAPICoreV1PodCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastProbeTime":
			if err := func() error {
				s.LastProbeTime.Reset()
				if err := s.LastProbeTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodDNSConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Nameservers != nil {
		more.More()
		j.WriteObjectField("nameservers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Nameservers {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Options != nil {
		more.More()
		j.WriteObjectField("options")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Options {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Searches != nil {
		more.More()
		j.WriteObjectField("searches")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Searches {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodDNSConfig from json stream.
func (s *IoK8sAPICoreV1PodDNSConfig) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodDNSConfig to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nameservers":
			if err := func() error {
				s.Nameservers = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Nameservers = append(s.Nameservers, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "options":
			if err := func() error {
				s.Options = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PodDNSConfigOption
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Options = append(s.Options, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "searches":
			if err := func() error {
				s.Searches = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Searches = append(s.Searches, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodDNSConfigOption) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodDNSConfigOption from json stream.
func (s *IoK8sAPICoreV1PodDNSConfigOption) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodDNSConfigOption to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodIP) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.IP.Set {
		more.More()
		j.WriteObjectField("ip")
		s.IP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodIP from json stream.
func (s *IoK8sAPICoreV1PodIP) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodIP to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodList from json stream.
func (s *IoK8sAPICoreV1PodList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Pod
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodReadinessGate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("conditionType")
	j.WriteString(s.ConditionType)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodReadinessGate from json stream.
func (s *IoK8sAPICoreV1PodReadinessGate) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodReadinessGate to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditionType":
			if err := func() error {
				s.ConditionType = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSecurityContext) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsGroup.Set {
		more.More()
		j.WriteObjectField("fsGroup")
		s.FsGroup.WriteJSON(j)
	}
	if s.FsGroupChangePolicy.Set {
		more.More()
		j.WriteObjectField("fsGroupChangePolicy")
		s.FsGroupChangePolicy.WriteJSON(j)
	}
	if s.RunAsGroup.Set {
		more.More()
		j.WriteObjectField("runAsGroup")
		s.RunAsGroup.WriteJSON(j)
	}
	if s.RunAsNonRoot.Set {
		more.More()
		j.WriteObjectField("runAsNonRoot")
		s.RunAsNonRoot.WriteJSON(j)
	}
	if s.RunAsUser.Set {
		more.More()
		j.WriteObjectField("runAsUser")
		s.RunAsUser.WriteJSON(j)
	}
	if s.SeLinuxOptions.Set {
		more.More()
		j.WriteObjectField("seLinuxOptions")
		s.SeLinuxOptions.WriteJSON(j)
	}
	if s.SeccompProfile.Set {
		more.More()
		j.WriteObjectField("seccompProfile")
		s.SeccompProfile.WriteJSON(j)
	}
	if s.SupplementalGroups != nil {
		more.More()
		j.WriteObjectField("supplementalGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.SupplementalGroups {
			more.More()
			j.WriteInt64(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Sysctls != nil {
		more.More()
		j.WriteObjectField("sysctls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Sysctls {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.WindowsOptions.Set {
		more.More()
		j.WriteObjectField("windowsOptions")
		s.WindowsOptions.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodSecurityContext from json stream.
func (s *IoK8sAPICoreV1PodSecurityContext) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodSecurityContext to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsGroup":
			if err := func() error {
				s.FsGroup.Reset()
				if err := s.FsGroup.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fsGroupChangePolicy":
			if err := func() error {
				s.FsGroupChangePolicy.Reset()
				if err := s.FsGroupChangePolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runAsGroup":
			if err := func() error {
				s.RunAsGroup.Reset()
				if err := s.RunAsGroup.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runAsNonRoot":
			if err := func() error {
				s.RunAsNonRoot.Reset()
				if err := s.RunAsNonRoot.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runAsUser":
			if err := func() error {
				s.RunAsUser.Reset()
				if err := s.RunAsUser.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "seLinuxOptions":
			if err := func() error {
				s.SeLinuxOptions.Reset()
				if err := s.SeLinuxOptions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "seccompProfile":
			if err := func() error {
				s.SeccompProfile.Reset()
				if err := s.SeccompProfile.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "supplementalGroups":
			if err := func() error {
				s.SupplementalGroups = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem int64
					if err := func() error {
						elem = int64(i.Int64())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.SupplementalGroups = append(s.SupplementalGroups, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sysctls":
			if err := func() error {
				s.Sysctls = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Sysctl
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Sysctls = append(s.Sysctls, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "windowsOptions":
			if err := func() error {
				s.WindowsOptions.Reset()
				if err := s.WindowsOptions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ActiveDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("activeDeadlineSeconds")
		s.ActiveDeadlineSeconds.WriteJSON(j)
	}
	if s.Affinity.Set {
		more.More()
		j.WriteObjectField("affinity")
		s.Affinity.WriteJSON(j)
	}
	if s.AutomountServiceAccountToken.Set {
		more.More()
		j.WriteObjectField("automountServiceAccountToken")
		s.AutomountServiceAccountToken.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("containers")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Containers {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.DnsConfig.Set {
		more.More()
		j.WriteObjectField("dnsConfig")
		s.DnsConfig.WriteJSON(j)
	}
	if s.DnsPolicy.Set {
		more.More()
		j.WriteObjectField("dnsPolicy")
		s.DnsPolicy.WriteJSON(j)
	}
	if s.EnableServiceLinks.Set {
		more.More()
		j.WriteObjectField("enableServiceLinks")
		s.EnableServiceLinks.WriteJSON(j)
	}
	if s.EphemeralContainers != nil {
		more.More()
		j.WriteObjectField("ephemeralContainers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EphemeralContainers {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.HostAliases != nil {
		more.More()
		j.WriteObjectField("hostAliases")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.HostAliases {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.HostIPC.Set {
		more.More()
		j.WriteObjectField("hostIPC")
		s.HostIPC.WriteJSON(j)
	}
	if s.HostNetwork.Set {
		more.More()
		j.WriteObjectField("hostNetwork")
		s.HostNetwork.WriteJSON(j)
	}
	if s.HostPID.Set {
		more.More()
		j.WriteObjectField("hostPID")
		s.HostPID.WriteJSON(j)
	}
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.ImagePullSecrets != nil {
		more.More()
		j.WriteObjectField("imagePullSecrets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ImagePullSecrets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.InitContainers != nil {
		more.More()
		j.WriteObjectField("initContainers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.InitContainers {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	if s.NodeSelector != nil {
		more.More()
		j.WriteObjectField("nodeSelector")
		s.NodeSelector.WriteJSON(j)
	}
	if s.Overhead != nil {
		more.More()
		j.WriteObjectField("overhead")
		s.Overhead.WriteJSON(j)
	}
	if s.PreemptionPolicy.Set {
		more.More()
		j.WriteObjectField("preemptionPolicy")
		s.PreemptionPolicy.WriteJSON(j)
	}
	if s.Priority.Set {
		more.More()
		j.WriteObjectField("priority")
		s.Priority.WriteJSON(j)
	}
	if s.PriorityClassName.Set {
		more.More()
		j.WriteObjectField("priorityClassName")
		s.PriorityClassName.WriteJSON(j)
	}
	if s.ReadinessGates != nil {
		more.More()
		j.WriteObjectField("readinessGates")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ReadinessGates {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RestartPolicy.Set {
		more.More()
		j.WriteObjectField("restartPolicy")
		s.RestartPolicy.WriteJSON(j)
	}
	if s.RuntimeClassName.Set {
		more.More()
		j.WriteObjectField("runtimeClassName")
		s.RuntimeClassName.WriteJSON(j)
	}
	if s.SchedulerName.Set {
		more.More()
		j.WriteObjectField("schedulerName")
		s.SchedulerName.WriteJSON(j)
	}
	if s.SecurityContext.Set {
		more.More()
		j.WriteObjectField("securityContext")
		s.SecurityContext.WriteJSON(j)
	}
	if s.ServiceAccount.Set {
		more.More()
		j.WriteObjectField("serviceAccount")
		s.ServiceAccount.WriteJSON(j)
	}
	if s.ServiceAccountName.Set {
		more.More()
		j.WriteObjectField("serviceAccountName")
		s.ServiceAccountName.WriteJSON(j)
	}
	if s.SetHostnameAsFQDN.Set {
		more.More()
		j.WriteObjectField("setHostnameAsFQDN")
		s.SetHostnameAsFQDN.WriteJSON(j)
	}
	if s.ShareProcessNamespace.Set {
		more.More()
		j.WriteObjectField("shareProcessNamespace")
		s.ShareProcessNamespace.WriteJSON(j)
	}
	if s.Subdomain.Set {
		more.More()
		j.WriteObjectField("subdomain")
		s.Subdomain.WriteJSON(j)
	}
	if s.TerminationGracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("terminationGracePeriodSeconds")
		s.TerminationGracePeriodSeconds.WriteJSON(j)
	}
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.TopologySpreadConstraints != nil {
		more.More()
		j.WriteObjectField("topologySpreadConstraints")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TopologySpreadConstraints {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Volumes != nil {
		more.More()
		j.WriteObjectField("volumes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Volumes {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodSpec from json stream.
func (s *IoK8sAPICoreV1PodSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "activeDeadlineSeconds":
			if err := func() error {
				s.ActiveDeadlineSeconds.Reset()
				if err := s.ActiveDeadlineSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "affinity":
			if err := func() error {
				s.Affinity.Reset()
				if err := s.Affinity.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "automountServiceAccountToken":
			if err := func() error {
				s.AutomountServiceAccountToken.Reset()
				if err := s.AutomountServiceAccountToken.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "containers":
			if err := func() error {
				s.Containers = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Container
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Containers = append(s.Containers, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "dnsConfig":
			if err := func() error {
				s.DnsConfig.Reset()
				if err := s.DnsConfig.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "dnsPolicy":
			if err := func() error {
				s.DnsPolicy.Reset()
				if err := s.DnsPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "enableServiceLinks":
			if err := func() error {
				s.EnableServiceLinks.Reset()
				if err := s.EnableServiceLinks.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ephemeralContainers":
			if err := func() error {
				s.EphemeralContainers = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1EphemeralContainer
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.EphemeralContainers = append(s.EphemeralContainers, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostAliases":
			if err := func() error {
				s.HostAliases = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1HostAlias
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.HostAliases = append(s.HostAliases, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostIPC":
			if err := func() error {
				s.HostIPC.Reset()
				if err := s.HostIPC.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostNetwork":
			if err := func() error {
				s.HostNetwork.Reset()
				if err := s.HostNetwork.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostPID":
			if err := func() error {
				s.HostPID.Reset()
				if err := s.HostPID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostname":
			if err := func() error {
				s.Hostname.Reset()
				if err := s.Hostname.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "imagePullSecrets":
			if err := func() error {
				s.ImagePullSecrets = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1LocalObjectReference
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ImagePullSecrets = append(s.ImagePullSecrets, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "initContainers":
			if err := func() error {
				s.InitContainers = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Container
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.InitContainers = append(s.InitContainers, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeName":
			if err := func() error {
				s.NodeName.Reset()
				if err := s.NodeName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeSelector":
			if err := func() error {
				s.NodeSelector = nil
				var elem IoK8sAPICoreV1PodSpecNodeSelector
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.NodeSelector = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "overhead":
			if err := func() error {
				s.Overhead = nil
				var elem IoK8sAPICoreV1PodSpecOverhead
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Overhead = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "preemptionPolicy":
			if err := func() error {
				s.PreemptionPolicy.Reset()
				if err := s.PreemptionPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "priority":
			if err := func() error {
				s.Priority.Reset()
				if err := s.Priority.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "priorityClassName":
			if err := func() error {
				s.PriorityClassName.Reset()
				if err := s.PriorityClassName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readinessGates":
			if err := func() error {
				s.ReadinessGates = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PodReadinessGate
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ReadinessGates = append(s.ReadinessGates, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "restartPolicy":
			if err := func() error {
				s.RestartPolicy.Reset()
				if err := s.RestartPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runtimeClassName":
			if err := func() error {
				s.RuntimeClassName.Reset()
				if err := s.RuntimeClassName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "schedulerName":
			if err := func() error {
				s.SchedulerName.Reset()
				if err := s.SchedulerName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "securityContext":
			if err := func() error {
				s.SecurityContext.Reset()
				if err := s.SecurityContext.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "serviceAccount":
			if err := func() error {
				s.ServiceAccount.Reset()
				if err := s.ServiceAccount.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "serviceAccountName":
			if err := func() error {
				s.ServiceAccountName.Reset()
				if err := s.ServiceAccountName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "setHostnameAsFQDN":
			if err := func() error {
				s.SetHostnameAsFQDN.Reset()
				if err := s.SetHostnameAsFQDN.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shareProcessNamespace":
			if err := func() error {
				s.ShareProcessNamespace.Reset()
				if err := s.ShareProcessNamespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "subdomain":
			if err := func() error {
				s.Subdomain.Reset()
				if err := s.Subdomain.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "terminationGracePeriodSeconds":
			if err := func() error {
				s.TerminationGracePeriodSeconds.Reset()
				if err := s.TerminationGracePeriodSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tolerations":
			if err := func() error {
				s.Tolerations = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Toleration
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Tolerations = append(s.Tolerations, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "topologySpreadConstraints":
			if err := func() error {
				s.TopologySpreadConstraints = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1TopologySpreadConstraint
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.TopologySpreadConstraints = append(s.TopologySpreadConstraints, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumes":
			if err := func() error {
				s.Volumes = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Volume
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Volumes = append(s.Volumes, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSpecNodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodSpecNodeSelector from json stream.
func (s *IoK8sAPICoreV1PodSpecNodeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodSpecNodeSelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSpecOverhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodSpecOverhead from json stream.
func (s *IoK8sAPICoreV1PodSpecOverhead) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodSpecOverhead to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ContainerStatuses != nil {
		more.More()
		j.WriteObjectField("containerStatuses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ContainerStatuses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EphemeralContainerStatuses != nil {
		more.More()
		j.WriteObjectField("ephemeralContainerStatuses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EphemeralContainerStatuses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.HostIP.Set {
		more.More()
		j.WriteObjectField("hostIP")
		s.HostIP.WriteJSON(j)
	}
	if s.InitContainerStatuses != nil {
		more.More()
		j.WriteObjectField("initContainerStatuses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.InitContainerStatuses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.NominatedNodeName.Set {
		more.More()
		j.WriteObjectField("nominatedNodeName")
		s.NominatedNodeName.WriteJSON(j)
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	if s.PodIP.Set {
		more.More()
		j.WriteObjectField("podIP")
		s.PodIP.WriteJSON(j)
	}
	if s.PodIPs != nil {
		more.More()
		j.WriteObjectField("podIPs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PodIPs {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.QosClass.Set {
		more.More()
		j.WriteObjectField("qosClass")
		s.QosClass.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.StartTime.Set {
		more.More()
		j.WriteObjectField("startTime")
		s.StartTime.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodStatus from json stream.
func (s *IoK8sAPICoreV1PodStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PodCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "containerStatuses":
			if err := func() error {
				s.ContainerStatuses = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ContainerStatus
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ContainerStatuses = append(s.ContainerStatuses, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ephemeralContainerStatuses":
			if err := func() error {
				s.EphemeralContainerStatuses = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ContainerStatus
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.EphemeralContainerStatuses = append(s.EphemeralContainerStatuses, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostIP":
			if err := func() error {
				s.HostIP.Reset()
				if err := s.HostIP.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "initContainerStatuses":
			if err := func() error {
				s.InitContainerStatuses = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ContainerStatus
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.InitContainerStatuses = append(s.InitContainerStatuses, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nominatedNodeName":
			if err := func() error {
				s.NominatedNodeName.Reset()
				if err := s.NominatedNodeName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "phase":
			if err := func() error {
				s.Phase.Reset()
				if err := s.Phase.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "podIP":
			if err := func() error {
				s.PodIP.Reset()
				if err := s.PodIP.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "podIPs":
			if err := func() error {
				s.PodIPs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PodIP
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.PodIPs = append(s.PodIPs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "qosClass":
			if err := func() error {
				s.QosClass.Reset()
				if err := s.QosClass.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "startTime":
			if err := func() error {
				s.StartTime.Reset()
				if err := s.StartTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Template.Set {
		more.More()
		j.WriteObjectField("template")
		s.Template.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodTemplate from json stream.
func (s *IoK8sAPICoreV1PodTemplate) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodTemplate to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "template":
			if err := func() error {
				s.Template.Reset()
				if err := s.Template.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplateList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodTemplateList from json stream.
func (s *IoK8sAPICoreV1PodTemplateList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodTemplateList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1PodTemplate
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodTemplateSpec from json stream.
func (s *IoK8sAPICoreV1PodTemplateSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodTemplateSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PortStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("port")
	j.WriteInt32(s.Port)
	more.More()
	j.WriteObjectField("protocol")
	j.WriteString(s.Protocol)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PortStatus from json stream.
func (s *IoK8sAPICoreV1PortStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PortStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				s.Port = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "protocol":
			if err := func() error {
				s.Protocol = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PortworxVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PortworxVolumeSource from json stream.
func (s *IoK8sAPICoreV1PortworxVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PortworxVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeID":
			if err := func() error {
				s.VolumeID = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PreferredSchedulingTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("preference")
	s.Preference.WriteJSON(j)
	more.More()
	j.WriteObjectField("weight")
	j.WriteInt32(s.Weight)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PreferredSchedulingTerm from json stream.
func (s *IoK8sAPICoreV1PreferredSchedulingTerm) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PreferredSchedulingTerm to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "preference":
			if err := func() error {
				if err := s.Preference.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "weight":
			if err := func() error {
				s.Weight = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Probe) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Exec.Set {
		more.More()
		j.WriteObjectField("exec")
		s.Exec.WriteJSON(j)
	}
	if s.FailureThreshold.Set {
		more.More()
		j.WriteObjectField("failureThreshold")
		s.FailureThreshold.WriteJSON(j)
	}
	if s.HttpGet.Set {
		more.More()
		j.WriteObjectField("httpGet")
		s.HttpGet.WriteJSON(j)
	}
	if s.InitialDelaySeconds.Set {
		more.More()
		j.WriteObjectField("initialDelaySeconds")
		s.InitialDelaySeconds.WriteJSON(j)
	}
	if s.PeriodSeconds.Set {
		more.More()
		j.WriteObjectField("periodSeconds")
		s.PeriodSeconds.WriteJSON(j)
	}
	if s.SuccessThreshold.Set {
		more.More()
		j.WriteObjectField("successThreshold")
		s.SuccessThreshold.WriteJSON(j)
	}
	if s.TcpSocket.Set {
		more.More()
		j.WriteObjectField("tcpSocket")
		s.TcpSocket.WriteJSON(j)
	}
	if s.TerminationGracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("terminationGracePeriodSeconds")
		s.TerminationGracePeriodSeconds.WriteJSON(j)
	}
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Probe from json stream.
func (s *IoK8sAPICoreV1Probe) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Probe to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "exec":
			if err := func() error {
				s.Exec.Reset()
				if err := s.Exec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "failureThreshold":
			if err := func() error {
				s.FailureThreshold.Reset()
				if err := s.FailureThreshold.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "httpGet":
			if err := func() error {
				s.HttpGet.Reset()
				if err := s.HttpGet.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "initialDelaySeconds":
			if err := func() error {
				s.InitialDelaySeconds.Reset()
				if err := s.InitialDelaySeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "periodSeconds":
			if err := func() error {
				s.PeriodSeconds.Reset()
				if err := s.PeriodSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "successThreshold":
			if err := func() error {
				s.SuccessThreshold.Reset()
				if err := s.SuccessThreshold.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tcpSocket":
			if err := func() error {
				s.TcpSocket.Reset()
				if err := s.TcpSocket.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "terminationGracePeriodSeconds":
			if err := func() error {
				s.TerminationGracePeriodSeconds.Reset()
				if err := s.TerminationGracePeriodSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "timeoutSeconds":
			if err := func() error {
				s.TimeoutSeconds.Reset()
				if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ProjectedVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Sources != nil {
		more.More()
		j.WriteObjectField("sources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Sources {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ProjectedVolumeSource from json stream.
func (s *IoK8sAPICoreV1ProjectedVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ProjectedVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "defaultMode":
			if err := func() error {
				s.DefaultMode.Reset()
				if err := s.DefaultMode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sources":
			if err := func() error {
				s.Sources = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1VolumeProjection
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Sources = append(s.Sources, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1QuobyteVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("registry")
	j.WriteString(s.Registry)
	if s.Tenant.Set {
		more.More()
		j.WriteObjectField("tenant")
		s.Tenant.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volume")
	j.WriteString(s.Volume)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1QuobyteVolumeSource from json stream.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1QuobyteVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "registry":
			if err := func() error {
				s.Registry = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tenant":
			if err := func() error {
				s.Tenant.Reset()
				if err := s.Tenant.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volume":
			if err := func() error {
				s.Volume = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1RBDPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("image")
	j.WriteString(s.Image)
	if s.Keyring.Set {
		more.More()
		j.WriteObjectField("keyring")
		s.Keyring.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Pool.Set {
		more.More()
		j.WriteObjectField("pool")
		s.Pool.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1RBDPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1RBDPersistentVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "image":
			if err := func() error {
				s.Image = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "keyring":
			if err := func() error {
				s.Keyring.Reset()
				if err := s.Keyring.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "monitors":
			if err := func() error {
				s.Monitors = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Monitors = append(s.Monitors, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pool":
			if err := func() error {
				s.Pool.Reset()
				if err := s.Pool.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1RBDVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("image")
	j.WriteString(s.Image)
	if s.Keyring.Set {
		more.More()
		j.WriteObjectField("keyring")
		s.Keyring.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Pool.Set {
		more.More()
		j.WriteObjectField("pool")
		s.Pool.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1RBDVolumeSource from json stream.
func (s *IoK8sAPICoreV1RBDVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1RBDVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "image":
			if err := func() error {
				s.Image = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "keyring":
			if err := func() error {
				s.Keyring.Reset()
				if err := s.Keyring.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "monitors":
			if err := func() error {
				s.Monitors = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Monitors = append(s.Monitors, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pool":
			if err := func() error {
				s.Pool.Reset()
				if err := s.Pool.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationController) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationController from json stream.
func (s *IoK8sAPICoreV1ReplicationController) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationController to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerCondition from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationControllerCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerList from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationControllerList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ReplicationController
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.Selector != nil {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	if s.Template.Set {
		more.More()
		j.WriteObjectField("template")
		s.Template.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerSpec from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationControllerSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "minReadySeconds":
			if err := func() error {
				s.MinReadySeconds.Reset()
				if err := s.MinReadySeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "replicas":
			if err := func() error {
				s.Replicas.Reset()
				if err := s.Replicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				s.Selector = nil
				var elem IoK8sAPICoreV1ReplicationControllerSpecSelector
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Selector = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "template":
			if err := func() error {
				s.Template.Reset()
				if err := s.Template.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerSpecSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerSpecSelector from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerSpecSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationControllerSpecSelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvailableReplicas.Set {
		more.More()
		j.WriteObjectField("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.FullyLabeledReplicas.Set {
		more.More()
		j.WriteObjectField("fullyLabeledReplicas")
		s.FullyLabeledReplicas.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("replicas")
	j.WriteInt32(s.Replicas)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerStatus from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationControllerStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "availableReplicas":
			if err := func() error {
				s.AvailableReplicas.Reset()
				if err := s.AvailableReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ReplicationControllerCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fullyLabeledReplicas":
			if err := func() error {
				s.FullyLabeledReplicas.Reset()
				if err := s.FullyLabeledReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readyReplicas":
			if err := func() error {
				s.ReadyReplicas.Reset()
				if err := s.ReadyReplicas.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "replicas":
			if err := func() error {
				s.Replicas = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceFieldSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerName.Set {
		more.More()
		j.WriteObjectField("containerName")
		s.ContainerName.WriteJSON(j)
	}
	if s.Divisor.Set {
		more.More()
		j.WriteObjectField("divisor")
		s.Divisor.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("resource")
	j.WriteString(s.Resource)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceFieldSelector from json stream.
func (s *IoK8sAPICoreV1ResourceFieldSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceFieldSelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "containerName":
			if err := func() error {
				s.ContainerName.Reset()
				if err := s.ContainerName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "divisor":
			if err := func() error {
				s.Divisor.Reset()
				if err := s.Divisor.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resource":
			if err := func() error {
				s.Resource = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuota) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuota from json stream.
func (s *IoK8sAPICoreV1ResourceQuota) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuota to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaList from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ResourceQuota
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hard != nil {
		more.More()
		j.WriteObjectField("hard")
		s.Hard.WriteJSON(j)
	}
	if s.ScopeSelector.Set {
		more.More()
		j.WriteObjectField("scopeSelector")
		s.ScopeSelector.WriteJSON(j)
	}
	if s.Scopes != nil {
		more.More()
		j.WriteObjectField("scopes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Scopes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaSpec from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "hard":
			if err := func() error {
				s.Hard = nil
				var elem IoK8sAPICoreV1ResourceQuotaSpecHard
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Hard = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scopeSelector":
			if err := func() error {
				s.ScopeSelector.Reset()
				if err := s.ScopeSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scopes":
			if err := func() error {
				s.Scopes = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Scopes = append(s.Scopes, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaSpecHard) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaSpecHard from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaSpecHard) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaSpecHard to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hard != nil {
		more.More()
		j.WriteObjectField("hard")
		s.Hard.WriteJSON(j)
	}
	if s.Used != nil {
		more.More()
		j.WriteObjectField("used")
		s.Used.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaStatus from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "hard":
			if err := func() error {
				s.Hard = nil
				var elem IoK8sAPICoreV1ResourceQuotaStatusHard
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Hard = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "used":
			if err := func() error {
				s.Used = nil
				var elem IoK8sAPICoreV1ResourceQuotaStatusUsed
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Used = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaStatusHard) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaStatusHard from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaStatusHard) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaStatusHard to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaStatusUsed) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaStatusUsed from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaStatusUsed) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaStatusUsed to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceRequirements) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limits != nil {
		more.More()
		j.WriteObjectField("limits")
		s.Limits.WriteJSON(j)
	}
	if s.Requests != nil {
		more.More()
		j.WriteObjectField("requests")
		s.Requests.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceRequirements from json stream.
func (s *IoK8sAPICoreV1ResourceRequirements) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceRequirements to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "limits":
			if err := func() error {
				s.Limits = nil
				var elem IoK8sAPICoreV1ResourceRequirementsLimits
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Limits = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "requests":
			if err := func() error {
				s.Requests = nil
				var elem IoK8sAPICoreV1ResourceRequirementsRequests
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Requests = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceRequirementsLimits) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceRequirementsLimits from json stream.
func (s *IoK8sAPICoreV1ResourceRequirementsLimits) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceRequirementsLimits to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceRequirementsRequests) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceRequirementsRequests from json stream.
func (s *IoK8sAPICoreV1ResourceRequirementsRequests) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceRequirementsRequests to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SELinuxOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Level.Set {
		more.More()
		j.WriteObjectField("level")
		s.Level.WriteJSON(j)
	}
	if s.Role.Set {
		more.More()
		j.WriteObjectField("role")
		s.Role.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SELinuxOptions from json stream.
func (s *IoK8sAPICoreV1SELinuxOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SELinuxOptions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "level":
			if err := func() error {
				s.Level.Reset()
				if err := s.Level.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScaleIOPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("gateway")
	j.WriteString(s.Gateway)
	if s.ProtectionDomain.Set {
		more.More()
		j.WriteObjectField("protectionDomain")
		s.ProtectionDomain.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretRef")
	s.SecretRef.WriteJSON(j)
	if s.SslEnabled.Set {
		more.More()
		j.WriteObjectField("sslEnabled")
		s.SslEnabled.WriteJSON(j)
	}
	if s.StorageMode.Set {
		more.More()
		j.WriteObjectField("storageMode")
		s.StorageMode.WriteJSON(j)
	}
	if s.StoragePool.Set {
		more.More()
		j.WriteObjectField("storagePool")
		s.StoragePool.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("system")
	j.WriteString(s.System)
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ScaleIOPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ScaleIOPersistentVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "gateway":
			if err := func() error {
				s.Gateway = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "protectionDomain":
			if err := func() error {
				s.ProtectionDomain.Reset()
				if err := s.ProtectionDomain.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sslEnabled":
			if err := func() error {
				s.SslEnabled.Reset()
				if err := s.SslEnabled.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storageMode":
			if err := func() error {
				s.StorageMode.Reset()
				if err := s.StorageMode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storagePool":
			if err := func() error {
				s.StoragePool.Reset()
				if err := s.StoragePool.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "system":
			if err := func() error {
				s.System = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeName":
			if err := func() error {
				s.VolumeName.Reset()
				if err := s.VolumeName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScaleIOVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("gateway")
	j.WriteString(s.Gateway)
	if s.ProtectionDomain.Set {
		more.More()
		j.WriteObjectField("protectionDomain")
		s.ProtectionDomain.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretRef")
	s.SecretRef.WriteJSON(j)
	if s.SslEnabled.Set {
		more.More()
		j.WriteObjectField("sslEnabled")
		s.SslEnabled.WriteJSON(j)
	}
	if s.StorageMode.Set {
		more.More()
		j.WriteObjectField("storageMode")
		s.StorageMode.WriteJSON(j)
	}
	if s.StoragePool.Set {
		more.More()
		j.WriteObjectField("storagePool")
		s.StoragePool.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("system")
	j.WriteString(s.System)
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ScaleIOVolumeSource from json stream.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ScaleIOVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "gateway":
			if err := func() error {
				s.Gateway = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "protectionDomain":
			if err := func() error {
				s.ProtectionDomain.Reset()
				if err := s.ProtectionDomain.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sslEnabled":
			if err := func() error {
				s.SslEnabled.Reset()
				if err := s.SslEnabled.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storageMode":
			if err := func() error {
				s.StorageMode.Reset()
				if err := s.StorageMode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storagePool":
			if err := func() error {
				s.StoragePool.Reset()
				if err := s.StoragePool.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "system":
			if err := func() error {
				s.System = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeName":
			if err := func() error {
				s.VolumeName.Reset()
				if err := s.VolumeName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScopeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchExpressions != nil {
		more.More()
		j.WriteObjectField("matchExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ScopeSelector from json stream.
func (s *IoK8sAPICoreV1ScopeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ScopeSelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "matchExpressions":
			if err := func() error {
				s.MatchExpressions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ScopedResourceSelectorRequirement
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.MatchExpressions = append(s.MatchExpressions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScopedResourceSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("operator")
	j.WriteString(s.Operator)
	more.More()
	j.WriteObjectField("scopeName")
	j.WriteString(s.ScopeName)
	if s.Values != nil {
		more.More()
		j.WriteObjectField("values")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Values {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ScopedResourceSelectorRequirement from json stream.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ScopedResourceSelectorRequirement to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "operator":
			if err := func() error {
				s.Operator = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scopeName":
			if err := func() error {
				s.ScopeName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "values":
			if err := func() error {
				s.Values = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Values = append(s.Values, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SeccompProfile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LocalhostProfile.Set {
		more.More()
		j.WriteObjectField("localhostProfile")
		s.LocalhostProfile.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SeccompProfile from json stream.
func (s *IoK8sAPICoreV1SeccompProfile) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SeccompProfile to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "localhostProfile":
			if err := func() error {
				s.LocalhostProfile.Reset()
				if err := s.LocalhostProfile.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Secret) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Data != nil {
		more.More()
		j.WriteObjectField("data")
		s.Data.WriteJSON(j)
	}
	if s.Immutable.Set {
		more.More()
		j.WriteObjectField("immutable")
		s.Immutable.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.StringData != nil {
		more.More()
		j.WriteObjectField("stringData")
		s.StringData.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Secret from json stream.
func (s *IoK8sAPICoreV1Secret) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Secret to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "data":
			if err := func() error {
				s.Data = nil
				var elem IoK8sAPICoreV1SecretData
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Data = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "immutable":
			if err := func() error {
				s.Immutable.Reset()
				if err := s.Immutable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "stringData":
			if err := func() error {
				s.StringData = nil
				var elem IoK8sAPICoreV1SecretStringData
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.StringData = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretData from json stream.
func (s *IoK8sAPICoreV1SecretData) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretData to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretEnvSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretEnvSource from json stream.
func (s *IoK8sAPICoreV1SecretEnvSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretEnvSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "optional":
			if err := func() error {
				s.Optional.Reset()
				if err := s.Optional.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretKeySelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretKeySelector from json stream.
func (s *IoK8sAPICoreV1SecretKeySelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretKeySelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "key":
			if err := func() error {
				s.Key = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "optional":
			if err := func() error {
				s.Optional.Reset()
				if err := s.Optional.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretList from json stream.
func (s *IoK8sAPICoreV1SecretList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Secret
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretProjection from json stream.
func (s *IoK8sAPICoreV1SecretProjection) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretProjection to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1KeyToPath
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "optional":
			if err := func() error {
				s.Optional.Reset()
				if err := s.Optional.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretReference from json stream.
func (s *IoK8sAPICoreV1SecretReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace.Reset()
				if err := s.Namespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretStringData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretStringData from json stream.
func (s *IoK8sAPICoreV1SecretStringData) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretStringData to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	if s.SecretName.Set {
		more.More()
		j.WriteObjectField("secretName")
		s.SecretName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretVolumeSource from json stream.
func (s *IoK8sAPICoreV1SecretVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "defaultMode":
			if err := func() error {
				s.DefaultMode.Reset()
				if err := s.DefaultMode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1KeyToPath
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "optional":
			if err := func() error {
				s.Optional.Reset()
				if err := s.Optional.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretName":
			if err := func() error {
				s.SecretName.Reset()
				if err := s.SecretName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecurityContext) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowPrivilegeEscalation.Set {
		more.More()
		j.WriteObjectField("allowPrivilegeEscalation")
		s.AllowPrivilegeEscalation.WriteJSON(j)
	}
	if s.Capabilities.Set {
		more.More()
		j.WriteObjectField("capabilities")
		s.Capabilities.WriteJSON(j)
	}
	if s.Privileged.Set {
		more.More()
		j.WriteObjectField("privileged")
		s.Privileged.WriteJSON(j)
	}
	if s.ProcMount.Set {
		more.More()
		j.WriteObjectField("procMount")
		s.ProcMount.WriteJSON(j)
	}
	if s.ReadOnlyRootFilesystem.Set {
		more.More()
		j.WriteObjectField("readOnlyRootFilesystem")
		s.ReadOnlyRootFilesystem.WriteJSON(j)
	}
	if s.RunAsGroup.Set {
		more.More()
		j.WriteObjectField("runAsGroup")
		s.RunAsGroup.WriteJSON(j)
	}
	if s.RunAsNonRoot.Set {
		more.More()
		j.WriteObjectField("runAsNonRoot")
		s.RunAsNonRoot.WriteJSON(j)
	}
	if s.RunAsUser.Set {
		more.More()
		j.WriteObjectField("runAsUser")
		s.RunAsUser.WriteJSON(j)
	}
	if s.SeLinuxOptions.Set {
		more.More()
		j.WriteObjectField("seLinuxOptions")
		s.SeLinuxOptions.WriteJSON(j)
	}
	if s.SeccompProfile.Set {
		more.More()
		j.WriteObjectField("seccompProfile")
		s.SeccompProfile.WriteJSON(j)
	}
	if s.WindowsOptions.Set {
		more.More()
		j.WriteObjectField("windowsOptions")
		s.WindowsOptions.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecurityContext from json stream.
func (s *IoK8sAPICoreV1SecurityContext) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecurityContext to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "allowPrivilegeEscalation":
			if err := func() error {
				s.AllowPrivilegeEscalation.Reset()
				if err := s.AllowPrivilegeEscalation.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "capabilities":
			if err := func() error {
				s.Capabilities.Reset()
				if err := s.Capabilities.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "privileged":
			if err := func() error {
				s.Privileged.Reset()
				if err := s.Privileged.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "procMount":
			if err := func() error {
				s.ProcMount.Reset()
				if err := s.ProcMount.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnlyRootFilesystem":
			if err := func() error {
				s.ReadOnlyRootFilesystem.Reset()
				if err := s.ReadOnlyRootFilesystem.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runAsGroup":
			if err := func() error {
				s.RunAsGroup.Reset()
				if err := s.RunAsGroup.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runAsNonRoot":
			if err := func() error {
				s.RunAsNonRoot.Reset()
				if err := s.RunAsNonRoot.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runAsUser":
			if err := func() error {
				s.RunAsUser.Reset()
				if err := s.RunAsUser.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "seLinuxOptions":
			if err := func() error {
				s.SeLinuxOptions.Reset()
				if err := s.SeLinuxOptions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "seccompProfile":
			if err := func() error {
				s.SeccompProfile.Reset()
				if err := s.SeccompProfile.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "windowsOptions":
			if err := func() error {
				s.WindowsOptions.Reset()
				if err := s.WindowsOptions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Service) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Service from json stream.
func (s *IoK8sAPICoreV1Service) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Service to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccount) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.AutomountServiceAccountToken.Set {
		more.More()
		j.WriteObjectField("automountServiceAccountToken")
		s.AutomountServiceAccountToken.WriteJSON(j)
	}
	if s.ImagePullSecrets != nil {
		more.More()
		j.WriteObjectField("imagePullSecrets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ImagePullSecrets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Secrets != nil {
		more.More()
		j.WriteObjectField("secrets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Secrets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccount from json stream.
func (s *IoK8sAPICoreV1ServiceAccount) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceAccount to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "automountServiceAccountToken":
			if err := func() error {
				s.AutomountServiceAccountToken.Reset()
				if err := s.AutomountServiceAccountToken.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "imagePullSecrets":
			if err := func() error {
				s.ImagePullSecrets = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1LocalObjectReference
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ImagePullSecrets = append(s.ImagePullSecrets, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secrets":
			if err := func() error {
				s.Secrets = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ObjectReference
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Secrets = append(s.Secrets, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccountList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccountList from json stream.
func (s *IoK8sAPICoreV1ServiceAccountList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceAccountList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ServiceAccount
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccountTokenProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Audience.Set {
		more.More()
		j.WriteObjectField("audience")
		s.Audience.WriteJSON(j)
	}
	if s.ExpirationSeconds.Set {
		more.More()
		j.WriteObjectField("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccountTokenProjection from json stream.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceAccountTokenProjection to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "audience":
			if err := func() error {
				s.Audience.Reset()
				if err := s.Audience.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "expirationSeconds":
			if err := func() error {
				s.ExpirationSeconds.Reset()
				if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceList from json stream.
func (s *IoK8sAPICoreV1ServiceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Service
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServicePort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.NodePort.Set {
		more.More()
		j.WriteObjectField("nodePort")
		s.NodePort.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("port")
	j.WriteInt32(s.Port)
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	if s.TargetPort.Set {
		more.More()
		j.WriteObjectField("targetPort")
		s.TargetPort.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServicePort from json stream.
func (s *IoK8sAPICoreV1ServicePort) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServicePort to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "appProtocol":
			if err := func() error {
				s.AppProtocol.Reset()
				if err := s.AppProtocol.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodePort":
			if err := func() error {
				s.NodePort.Reset()
				if err := s.NodePort.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				s.Port = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "protocol":
			if err := func() error {
				s.Protocol.Reset()
				if err := s.Protocol.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetPort":
			if err := func() error {
				s.TargetPort.Reset()
				if err := s.TargetPort.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllocateLoadBalancerNodePorts.Set {
		more.More()
		j.WriteObjectField("allocateLoadBalancerNodePorts")
		s.AllocateLoadBalancerNodePorts.WriteJSON(j)
	}
	if s.ClusterIP.Set {
		more.More()
		j.WriteObjectField("clusterIP")
		s.ClusterIP.WriteJSON(j)
	}
	if s.ClusterIPs != nil {
		more.More()
		j.WriteObjectField("clusterIPs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ClusterIPs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ExternalIPs != nil {
		more.More()
		j.WriteObjectField("externalIPs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ExternalIPs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ExternalName.Set {
		more.More()
		j.WriteObjectField("externalName")
		s.ExternalName.WriteJSON(j)
	}
	if s.ExternalTrafficPolicy.Set {
		more.More()
		j.WriteObjectField("externalTrafficPolicy")
		s.ExternalTrafficPolicy.WriteJSON(j)
	}
	if s.HealthCheckNodePort.Set {
		more.More()
		j.WriteObjectField("healthCheckNodePort")
		s.HealthCheckNodePort.WriteJSON(j)
	}
	if s.InternalTrafficPolicy.Set {
		more.More()
		j.WriteObjectField("internalTrafficPolicy")
		s.InternalTrafficPolicy.WriteJSON(j)
	}
	if s.IpFamilies != nil {
		more.More()
		j.WriteObjectField("ipFamilies")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.IpFamilies {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.IpFamilyPolicy.Set {
		more.More()
		j.WriteObjectField("ipFamilyPolicy")
		s.IpFamilyPolicy.WriteJSON(j)
	}
	if s.LoadBalancerClass.Set {
		more.More()
		j.WriteObjectField("loadBalancerClass")
		s.LoadBalancerClass.WriteJSON(j)
	}
	if s.LoadBalancerIP.Set {
		more.More()
		j.WriteObjectField("loadBalancerIP")
		s.LoadBalancerIP.WriteJSON(j)
	}
	if s.LoadBalancerSourceRanges != nil {
		more.More()
		j.WriteObjectField("loadBalancerSourceRanges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.LoadBalancerSourceRanges {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.PublishNotReadyAddresses.Set {
		more.More()
		j.WriteObjectField("publishNotReadyAddresses")
		s.PublishNotReadyAddresses.WriteJSON(j)
	}
	if s.Selector != nil {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	if s.SessionAffinity.Set {
		more.More()
		j.WriteObjectField("sessionAffinity")
		s.SessionAffinity.WriteJSON(j)
	}
	if s.SessionAffinityConfig.Set {
		more.More()
		j.WriteObjectField("sessionAffinityConfig")
		s.SessionAffinityConfig.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceSpec from json stream.
func (s *IoK8sAPICoreV1ServiceSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "allocateLoadBalancerNodePorts":
			if err := func() error {
				s.AllocateLoadBalancerNodePorts.Reset()
				if err := s.AllocateLoadBalancerNodePorts.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "clusterIP":
			if err := func() error {
				s.ClusterIP.Reset()
				if err := s.ClusterIP.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "clusterIPs":
			if err := func() error {
				s.ClusterIPs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ClusterIPs = append(s.ClusterIPs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "externalIPs":
			if err := func() error {
				s.ExternalIPs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ExternalIPs = append(s.ExternalIPs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "externalName":
			if err := func() error {
				s.ExternalName.Reset()
				if err := s.ExternalName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "externalTrafficPolicy":
			if err := func() error {
				s.ExternalTrafficPolicy.Reset()
				if err := s.ExternalTrafficPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "healthCheckNodePort":
			if err := func() error {
				s.HealthCheckNodePort.Reset()
				if err := s.HealthCheckNodePort.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "internalTrafficPolicy":
			if err := func() error {
				s.InternalTrafficPolicy.Reset()
				if err := s.InternalTrafficPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ipFamilies":
			if err := func() error {
				s.IpFamilies = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.IpFamilies = append(s.IpFamilies, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ipFamilyPolicy":
			if err := func() error {
				s.IpFamilyPolicy.Reset()
				if err := s.IpFamilyPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "loadBalancerClass":
			if err := func() error {
				s.LoadBalancerClass.Reset()
				if err := s.LoadBalancerClass.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "loadBalancerIP":
			if err := func() error {
				s.LoadBalancerIP.Reset()
				if err := s.LoadBalancerIP.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "loadBalancerSourceRanges":
			if err := func() error {
				s.LoadBalancerSourceRanges = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.LoadBalancerSourceRanges = append(s.LoadBalancerSourceRanges, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ports":
			if err := func() error {
				s.Ports = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1ServicePort
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ports = append(s.Ports, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "publishNotReadyAddresses":
			if err := func() error {
				s.PublishNotReadyAddresses.Reset()
				if err := s.PublishNotReadyAddresses.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				s.Selector = nil
				var elem IoK8sAPICoreV1ServiceSpecSelector
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Selector = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sessionAffinity":
			if err := func() error {
				s.SessionAffinity.Reset()
				if err := s.SessionAffinity.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sessionAffinityConfig":
			if err := func() error {
				s.SessionAffinityConfig.Reset()
				if err := s.SessionAffinityConfig.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceSpecSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceSpecSelector from json stream.
func (s *IoK8sAPICoreV1ServiceSpecSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceSpecSelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.LoadBalancer.Set {
		more.More()
		j.WriteObjectField("loadBalancer")
		s.LoadBalancer.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceStatus from json stream.
func (s *IoK8sAPICoreV1ServiceStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1Condition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "loadBalancer":
			if err := func() error {
				s.LoadBalancer.Reset()
				if err := s.LoadBalancer.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SessionAffinityConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ClientIP.Set {
		more.More()
		j.WriteObjectField("clientIP")
		s.ClientIP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SessionAffinityConfig from json stream.
func (s *IoK8sAPICoreV1SessionAffinityConfig) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SessionAffinityConfig to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "clientIP":
			if err := func() error {
				s.ClientIP.Reset()
				if err := s.ClientIP.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1StorageOSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	if s.VolumeNamespace.Set {
		more.More()
		j.WriteObjectField("volumeNamespace")
		s.VolumeNamespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1StorageOSPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1StorageOSPersistentVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeName":
			if err := func() error {
				s.VolumeName.Reset()
				if err := s.VolumeName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeNamespace":
			if err := func() error {
				s.VolumeNamespace.Reset()
				if err := s.VolumeNamespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1StorageOSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	if s.VolumeNamespace.Set {
		more.More()
		j.WriteObjectField("volumeNamespace")
		s.VolumeNamespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1StorageOSVolumeSource from json stream.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1StorageOSVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretRef":
			if err := func() error {
				s.SecretRef.Reset()
				if err := s.SecretRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeName":
			if err := func() error {
				s.VolumeName.Reset()
				if err := s.VolumeName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeNamespace":
			if err := func() error {
				s.VolumeNamespace.Reset()
				if err := s.VolumeNamespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Sysctl) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Sysctl from json stream.
func (s *IoK8sAPICoreV1Sysctl) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Sysctl to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TCPSocketAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	// Unsupported kind "alias".
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1TCPSocketAction from json stream.
func (s *IoK8sAPICoreV1TCPSocketAction) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1TCPSocketAction to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "host":
			if err := func() error {
				s.Host.Reset()
				if err := s.Host.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgUtilIntstrIntOrString" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Taint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("effect")
	j.WriteString(s.Effect)
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	if s.TimeAdded.Set {
		more.More()
		j.WriteObjectField("timeAdded")
		s.TimeAdded.WriteJSON(j)
	}
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Taint from json stream.
func (s *IoK8sAPICoreV1Taint) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Taint to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "effect":
			if err := func() error {
				s.Effect = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "key":
			if err := func() error {
				s.Key = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "timeAdded":
			if err := func() error {
				s.TimeAdded.Reset()
				if err := s.TimeAdded.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Toleration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Effect.Set {
		more.More()
		j.WriteObjectField("effect")
		s.Effect.WriteJSON(j)
	}
	if s.Key.Set {
		more.More()
		j.WriteObjectField("key")
		s.Key.WriteJSON(j)
	}
	if s.Operator.Set {
		more.More()
		j.WriteObjectField("operator")
		s.Operator.WriteJSON(j)
	}
	if s.TolerationSeconds.Set {
		more.More()
		j.WriteObjectField("tolerationSeconds")
		s.TolerationSeconds.WriteJSON(j)
	}
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Toleration from json stream.
func (s *IoK8sAPICoreV1Toleration) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Toleration to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "effect":
			if err := func() error {
				s.Effect.Reset()
				if err := s.Effect.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "operator":
			if err := func() error {
				s.Operator.Reset()
				if err := s.Operator.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tolerationSeconds":
			if err := func() error {
				s.TolerationSeconds.Reset()
				if err := s.TolerationSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySelectorLabelRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	more.More()
	j.WriteObjectField("values")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Values {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1TopologySelectorLabelRequirement from json stream.
func (s *IoK8sAPICoreV1TopologySelectorLabelRequirement) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1TopologySelectorLabelRequirement to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "key":
			if err := func() error {
				s.Key = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "values":
			if err := func() error {
				s.Values = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Values = append(s.Values, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySelectorTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchLabelExpressions != nil {
		more.More()
		j.WriteObjectField("matchLabelExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchLabelExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1TopologySelectorTerm from json stream.
func (s *IoK8sAPICoreV1TopologySelectorTerm) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1TopologySelectorTerm to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "matchLabelExpressions":
			if err := func() error {
				s.MatchLabelExpressions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1TopologySelectorLabelRequirement
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.MatchLabelExpressions = append(s.MatchLabelExpressions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySpreadConstraint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LabelSelector.Set {
		more.More()
		j.WriteObjectField("labelSelector")
		s.LabelSelector.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("maxSkew")
	j.WriteInt32(s.MaxSkew)
	more.More()
	j.WriteObjectField("topologyKey")
	j.WriteString(s.TopologyKey)
	more.More()
	j.WriteObjectField("whenUnsatisfiable")
	j.WriteString(s.WhenUnsatisfiable)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1TopologySpreadConstraint from json stream.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1TopologySpreadConstraint to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "labelSelector":
			if err := func() error {
				s.LabelSelector.Reset()
				if err := s.LabelSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "maxSkew":
			if err := func() error {
				s.MaxSkew = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "topologyKey":
			if err := func() error {
				s.TopologyKey = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "whenUnsatisfiable":
			if err := func() error {
				s.WhenUnsatisfiable = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TypedLocalObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroup.Set {
		more.More()
		j.WriteObjectField("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1TypedLocalObjectReference from json stream.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1TypedLocalObjectReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiGroup":
			if err := func() error {
				s.ApiGroup.Reset()
				if err := s.ApiGroup.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Volume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AwsElasticBlockStore.Set {
		more.More()
		j.WriteObjectField("awsElasticBlockStore")
		s.AwsElasticBlockStore.WriteJSON(j)
	}
	if s.AzureDisk.Set {
		more.More()
		j.WriteObjectField("azureDisk")
		s.AzureDisk.WriteJSON(j)
	}
	if s.AzureFile.Set {
		more.More()
		j.WriteObjectField("azureFile")
		s.AzureFile.WriteJSON(j)
	}
	if s.Cephfs.Set {
		more.More()
		j.WriteObjectField("cephfs")
		s.Cephfs.WriteJSON(j)
	}
	if s.Cinder.Set {
		more.More()
		j.WriteObjectField("cinder")
		s.Cinder.WriteJSON(j)
	}
	if s.ConfigMap.Set {
		more.More()
		j.WriteObjectField("configMap")
		s.ConfigMap.WriteJSON(j)
	}
	if s.Csi.Set {
		more.More()
		j.WriteObjectField("csi")
		s.Csi.WriteJSON(j)
	}
	if s.DownwardAPI.Set {
		more.More()
		j.WriteObjectField("downwardAPI")
		s.DownwardAPI.WriteJSON(j)
	}
	if s.EmptyDir.Set {
		more.More()
		j.WriteObjectField("emptyDir")
		s.EmptyDir.WriteJSON(j)
	}
	if s.Ephemeral.Set {
		more.More()
		j.WriteObjectField("ephemeral")
		s.Ephemeral.WriteJSON(j)
	}
	if s.Fc.Set {
		more.More()
		j.WriteObjectField("fc")
		s.Fc.WriteJSON(j)
	}
	if s.FlexVolume.Set {
		more.More()
		j.WriteObjectField("flexVolume")
		s.FlexVolume.WriteJSON(j)
	}
	if s.Flocker.Set {
		more.More()
		j.WriteObjectField("flocker")
		s.Flocker.WriteJSON(j)
	}
	if s.GcePersistentDisk.Set {
		more.More()
		j.WriteObjectField("gcePersistentDisk")
		s.GcePersistentDisk.WriteJSON(j)
	}
	if s.GitRepo.Set {
		more.More()
		j.WriteObjectField("gitRepo")
		s.GitRepo.WriteJSON(j)
	}
	if s.Glusterfs.Set {
		more.More()
		j.WriteObjectField("glusterfs")
		s.Glusterfs.WriteJSON(j)
	}
	if s.HostPath.Set {
		more.More()
		j.WriteObjectField("hostPath")
		s.HostPath.WriteJSON(j)
	}
	if s.Iscsi.Set {
		more.More()
		j.WriteObjectField("iscsi")
		s.Iscsi.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Nfs.Set {
		more.More()
		j.WriteObjectField("nfs")
		s.Nfs.WriteJSON(j)
	}
	if s.PersistentVolumeClaim.Set {
		more.More()
		j.WriteObjectField("persistentVolumeClaim")
		s.PersistentVolumeClaim.WriteJSON(j)
	}
	if s.PhotonPersistentDisk.Set {
		more.More()
		j.WriteObjectField("photonPersistentDisk")
		s.PhotonPersistentDisk.WriteJSON(j)
	}
	if s.PortworxVolume.Set {
		more.More()
		j.WriteObjectField("portworxVolume")
		s.PortworxVolume.WriteJSON(j)
	}
	if s.Projected.Set {
		more.More()
		j.WriteObjectField("projected")
		s.Projected.WriteJSON(j)
	}
	if s.Quobyte.Set {
		more.More()
		j.WriteObjectField("quobyte")
		s.Quobyte.WriteJSON(j)
	}
	if s.Rbd.Set {
		more.More()
		j.WriteObjectField("rbd")
		s.Rbd.WriteJSON(j)
	}
	if s.ScaleIO.Set {
		more.More()
		j.WriteObjectField("scaleIO")
		s.ScaleIO.WriteJSON(j)
	}
	if s.Secret.Set {
		more.More()
		j.WriteObjectField("secret")
		s.Secret.WriteJSON(j)
	}
	if s.Storageos.Set {
		more.More()
		j.WriteObjectField("storageos")
		s.Storageos.WriteJSON(j)
	}
	if s.VsphereVolume.Set {
		more.More()
		j.WriteObjectField("vsphereVolume")
		s.VsphereVolume.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Volume from json stream.
func (s *IoK8sAPICoreV1Volume) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Volume to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "awsElasticBlockStore":
			if err := func() error {
				s.AwsElasticBlockStore.Reset()
				if err := s.AwsElasticBlockStore.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "azureDisk":
			if err := func() error {
				s.AzureDisk.Reset()
				if err := s.AzureDisk.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "azureFile":
			if err := func() error {
				s.AzureFile.Reset()
				if err := s.AzureFile.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "cephfs":
			if err := func() error {
				s.Cephfs.Reset()
				if err := s.Cephfs.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "cinder":
			if err := func() error {
				s.Cinder.Reset()
				if err := s.Cinder.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "configMap":
			if err := func() error {
				s.ConfigMap.Reset()
				if err := s.ConfigMap.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "csi":
			if err := func() error {
				s.Csi.Reset()
				if err := s.Csi.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "downwardAPI":
			if err := func() error {
				s.DownwardAPI.Reset()
				if err := s.DownwardAPI.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "emptyDir":
			if err := func() error {
				s.EmptyDir.Reset()
				if err := s.EmptyDir.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ephemeral":
			if err := func() error {
				s.Ephemeral.Reset()
				if err := s.Ephemeral.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fc":
			if err := func() error {
				s.Fc.Reset()
				if err := s.Fc.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "flexVolume":
			if err := func() error {
				s.FlexVolume.Reset()
				if err := s.FlexVolume.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "flocker":
			if err := func() error {
				s.Flocker.Reset()
				if err := s.Flocker.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "gcePersistentDisk":
			if err := func() error {
				s.GcePersistentDisk.Reset()
				if err := s.GcePersistentDisk.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "gitRepo":
			if err := func() error {
				s.GitRepo.Reset()
				if err := s.GitRepo.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "glusterfs":
			if err := func() error {
				s.Glusterfs.Reset()
				if err := s.Glusterfs.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostPath":
			if err := func() error {
				s.HostPath.Reset()
				if err := s.HostPath.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "iscsi":
			if err := func() error {
				s.Iscsi.Reset()
				if err := s.Iscsi.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nfs":
			if err := func() error {
				s.Nfs.Reset()
				if err := s.Nfs.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "persistentVolumeClaim":
			if err := func() error {
				s.PersistentVolumeClaim.Reset()
				if err := s.PersistentVolumeClaim.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photonPersistentDisk":
			if err := func() error {
				s.PhotonPersistentDisk.Reset()
				if err := s.PhotonPersistentDisk.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "portworxVolume":
			if err := func() error {
				s.PortworxVolume.Reset()
				if err := s.PortworxVolume.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "projected":
			if err := func() error {
				s.Projected.Reset()
				if err := s.Projected.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "quobyte":
			if err := func() error {
				s.Quobyte.Reset()
				if err := s.Quobyte.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rbd":
			if err := func() error {
				s.Rbd.Reset()
				if err := s.Rbd.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scaleIO":
			if err := func() error {
				s.ScaleIO.Reset()
				if err := s.ScaleIO.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secret":
			if err := func() error {
				s.Secret.Reset()
				if err := s.Secret.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storageos":
			if err := func() error {
				s.Storageos.Reset()
				if err := s.Storageos.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "vsphereVolume":
			if err := func() error {
				s.VsphereVolume.Reset()
				if err := s.VsphereVolume.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeDevice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("devicePath")
	j.WriteString(s.DevicePath)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1VolumeDevice from json stream.
func (s *IoK8sAPICoreV1VolumeDevice) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1VolumeDevice to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "devicePath":
			if err := func() error {
				s.DevicePath = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeMount) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("mountPath")
	j.WriteString(s.MountPath)
	if s.MountPropagation.Set {
		more.More()
		j.WriteObjectField("mountPropagation")
		s.MountPropagation.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SubPath.Set {
		more.More()
		j.WriteObjectField("subPath")
		s.SubPath.WriteJSON(j)
	}
	if s.SubPathExpr.Set {
		more.More()
		j.WriteObjectField("subPathExpr")
		s.SubPathExpr.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1VolumeMount from json stream.
func (s *IoK8sAPICoreV1VolumeMount) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1VolumeMount to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "mountPath":
			if err := func() error {
				s.MountPath = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mountPropagation":
			if err := func() error {
				s.MountPropagation.Reset()
				if err := s.MountPropagation.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "subPath":
			if err := func() error {
				s.SubPath.Reset()
				if err := s.SubPath.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "subPathExpr":
			if err := func() error {
				s.SubPathExpr.Reset()
				if err := s.SubPathExpr.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeNodeAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Required.Set {
		more.More()
		j.WriteObjectField("required")
		s.Required.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1VolumeNodeAffinity from json stream.
func (s *IoK8sAPICoreV1VolumeNodeAffinity) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1VolumeNodeAffinity to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "required":
			if err := func() error {
				s.Required.Reset()
				if err := s.Required.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMap.Set {
		more.More()
		j.WriteObjectField("configMap")
		s.ConfigMap.WriteJSON(j)
	}
	if s.DownwardAPI.Set {
		more.More()
		j.WriteObjectField("downwardAPI")
		s.DownwardAPI.WriteJSON(j)
	}
	if s.Secret.Set {
		more.More()
		j.WriteObjectField("secret")
		s.Secret.WriteJSON(j)
	}
	if s.ServiceAccountToken.Set {
		more.More()
		j.WriteObjectField("serviceAccountToken")
		s.ServiceAccountToken.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1VolumeProjection from json stream.
func (s *IoK8sAPICoreV1VolumeProjection) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1VolumeProjection to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "configMap":
			if err := func() error {
				s.ConfigMap.Reset()
				if err := s.ConfigMap.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "downwardAPI":
			if err := func() error {
				s.DownwardAPI.Reset()
				if err := s.DownwardAPI.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secret":
			if err := func() error {
				s.Secret.Reset()
				if err := s.Secret.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "serviceAccountToken":
			if err := func() error {
				s.ServiceAccountToken.Reset()
				if err := s.ServiceAccountToken.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.StoragePolicyID.Set {
		more.More()
		j.WriteObjectField("storagePolicyID")
		s.StoragePolicyID.WriteJSON(j)
	}
	if s.StoragePolicyName.Set {
		more.More()
		j.WriteObjectField("storagePolicyName")
		s.StoragePolicyName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumePath")
	j.WriteString(s.VolumePath)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1VsphereVirtualDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1VsphereVirtualDiskVolumeSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "fsType":
			if err := func() error {
				s.FsType.Reset()
				if err := s.FsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storagePolicyID":
			if err := func() error {
				s.StoragePolicyID.Reset()
				if err := s.StoragePolicyID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storagePolicyName":
			if err := func() error {
				s.StoragePolicyName.Reset()
				if err := s.StoragePolicyName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumePath":
			if err := func() error {
				s.VolumePath = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1WeightedPodAffinityTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("podAffinityTerm")
	s.PodAffinityTerm.WriteJSON(j)
	more.More()
	j.WriteObjectField("weight")
	j.WriteInt32(s.Weight)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1WeightedPodAffinityTerm from json stream.
func (s *IoK8sAPICoreV1WeightedPodAffinityTerm) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1WeightedPodAffinityTerm to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "podAffinityTerm":
			if err := func() error {
				if err := s.PodAffinityTerm.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "weight":
			if err := func() error {
				s.Weight = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1WindowsSecurityContextOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.GmsaCredentialSpec.Set {
		more.More()
		j.WriteObjectField("gmsaCredentialSpec")
		s.GmsaCredentialSpec.WriteJSON(j)
	}
	if s.GmsaCredentialSpecName.Set {
		more.More()
		j.WriteObjectField("gmsaCredentialSpecName")
		s.GmsaCredentialSpecName.WriteJSON(j)
	}
	if s.HostProcess.Set {
		more.More()
		j.WriteObjectField("hostProcess")
		s.HostProcess.WriteJSON(j)
	}
	if s.RunAsUserName.Set {
		more.More()
		j.WriteObjectField("runAsUserName")
		s.RunAsUserName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1WindowsSecurityContextOptions from json stream.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1WindowsSecurityContextOptions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "gmsaCredentialSpec":
			if err := func() error {
				s.GmsaCredentialSpec.Reset()
				if err := s.GmsaCredentialSpec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "gmsaCredentialSpecName":
			if err := func() error {
				s.GmsaCredentialSpecName.Reset()
				if err := s.GmsaCredentialSpecName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostProcess":
			if err := func() error {
				s.HostProcess.Reset()
				if err := s.HostProcess.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runAsUserName":
			if err := func() error {
				s.RunAsUserName.Reset()
				if err := s.RunAsUserName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1Endpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addresses")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Addresses {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Conditions.Set {
		more.More()
		j.WriteObjectField("conditions")
		s.Conditions.WriteJSON(j)
	}
	if s.DeprecatedTopology != nil {
		more.More()
		j.WriteObjectField("deprecatedTopology")
		s.DeprecatedTopology.WriteJSON(j)
	}
	if s.Hints.Set {
		more.More()
		j.WriteObjectField("hints")
		s.Hints.WriteJSON(j)
	}
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	if s.TargetRef.Set {
		more.More()
		j.WriteObjectField("targetRef")
		s.TargetRef.WriteJSON(j)
	}
	if s.Zone.Set {
		more.More()
		j.WriteObjectField("zone")
		s.Zone.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1Endpoint from json stream.
func (s *IoK8sAPIDiscoveryV1Endpoint) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1Endpoint to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "addresses":
			if err := func() error {
				s.Addresses = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Addresses = append(s.Addresses, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions.Reset()
				if err := s.Conditions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deprecatedTopology":
			if err := func() error {
				s.DeprecatedTopology = nil
				var elem IoK8sAPIDiscoveryV1EndpointDeprecatedTopology
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.DeprecatedTopology = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hints":
			if err := func() error {
				s.Hints.Reset()
				if err := s.Hints.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostname":
			if err := func() error {
				s.Hostname.Reset()
				if err := s.Hostname.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeName":
			if err := func() error {
				s.NodeName.Reset()
				if err := s.NodeName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetRef":
			if err := func() error {
				s.TargetRef.Reset()
				if err := s.TargetRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "zone":
			if err := func() error {
				s.Zone.Reset()
				if err := s.Zone.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointConditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ready.Set {
		more.More()
		j.WriteObjectField("ready")
		s.Ready.WriteJSON(j)
	}
	if s.Serving.Set {
		more.More()
		j.WriteObjectField("serving")
		s.Serving.WriteJSON(j)
	}
	if s.Terminating.Set {
		more.More()
		j.WriteObjectField("terminating")
		s.Terminating.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointConditions from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointConditions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "ready":
			if err := func() error {
				s.Ready.Reset()
				if err := s.Ready.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "serving":
			if err := func() error {
				s.Serving.Reset()
				if err := s.Serving.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "terminating":
			if err := func() error {
				s.Terminating.Reset()
				if err := s.Terminating.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointDeprecatedTopology) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointDeprecatedTopology from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointDeprecatedTopology) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointDeprecatedTopology to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointHints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ForZones != nil {
		more.More()
		j.WriteObjectField("forZones")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ForZones {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointHints from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointHints) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointHints to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "forZones":
			if err := func() error {
				s.ForZones = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIDiscoveryV1ForZone
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ForZones = append(s.ForZones, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointPort from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointPort to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "appProtocol":
			if err := func() error {
				s.AppProtocol.Reset()
				if err := s.AppProtocol.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "protocol":
			if err := func() error {
				s.Protocol.Reset()
				if err := s.Protocol.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointSlice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addressType")
	j.WriteString(s.AddressType)
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("endpoints")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Endpoints {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointSlice from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointSlice to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "addressType":
			if err := func() error {
				s.AddressType = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "endpoints":
			if err := func() error {
				s.Endpoints = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIDiscoveryV1Endpoint
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Endpoints = append(s.Endpoints, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ports":
			if err := func() error {
				s.Ports = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIDiscoveryV1EndpointPort
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ports = append(s.Ports, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointSliceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointSliceList from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointSliceList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIDiscoveryV1EndpointSlice
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1ForZone) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1ForZone from json stream.
func (s *IoK8sAPIDiscoveryV1ForZone) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1ForZone to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1Endpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addresses")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Addresses {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Conditions.Set {
		more.More()
		j.WriteObjectField("conditions")
		s.Conditions.WriteJSON(j)
	}
	if s.Hints.Set {
		more.More()
		j.WriteObjectField("hints")
		s.Hints.WriteJSON(j)
	}
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	if s.TargetRef.Set {
		more.More()
		j.WriteObjectField("targetRef")
		s.TargetRef.WriteJSON(j)
	}
	if s.Topology != nil {
		more.More()
		j.WriteObjectField("topology")
		s.Topology.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1Endpoint from json stream.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1Endpoint to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "addresses":
			if err := func() error {
				s.Addresses = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Addresses = append(s.Addresses, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions.Reset()
				if err := s.Conditions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hints":
			if err := func() error {
				s.Hints.Reset()
				if err := s.Hints.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostname":
			if err := func() error {
				s.Hostname.Reset()
				if err := s.Hostname.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeName":
			if err := func() error {
				s.NodeName.Reset()
				if err := s.NodeName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "targetRef":
			if err := func() error {
				s.TargetRef.Reset()
				if err := s.TargetRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "topology":
			if err := func() error {
				s.Topology = nil
				var elem IoK8sAPIDiscoveryV1beta1EndpointTopology
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Topology = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointConditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ready.Set {
		more.More()
		j.WriteObjectField("ready")
		s.Ready.WriteJSON(j)
	}
	if s.Serving.Set {
		more.More()
		j.WriteObjectField("serving")
		s.Serving.WriteJSON(j)
	}
	if s.Terminating.Set {
		more.More()
		j.WriteObjectField("terminating")
		s.Terminating.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointConditions from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointConditions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "ready":
			if err := func() error {
				s.Ready.Reset()
				if err := s.Ready.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "serving":
			if err := func() error {
				s.Serving.Reset()
				if err := s.Serving.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "terminating":
			if err := func() error {
				s.Terminating.Reset()
				if err := s.Terminating.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointHints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ForZones != nil {
		more.More()
		j.WriteObjectField("forZones")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ForZones {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointHints from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointHints) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointHints to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "forZones":
			if err := func() error {
				s.ForZones = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIDiscoveryV1beta1ForZone
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ForZones = append(s.ForZones, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointPort from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointPort to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "appProtocol":
			if err := func() error {
				s.AppProtocol.Reset()
				if err := s.AppProtocol.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "protocol":
			if err := func() error {
				s.Protocol.Reset()
				if err := s.Protocol.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointSlice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addressType")
	j.WriteString(s.AddressType)
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("endpoints")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Endpoints {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointSlice from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointSlice to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "addressType":
			if err := func() error {
				s.AddressType = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "endpoints":
			if err := func() error {
				s.Endpoints = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIDiscoveryV1beta1Endpoint
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Endpoints = append(s.Endpoints, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ports":
			if err := func() error {
				s.Ports = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIDiscoveryV1beta1EndpointPort
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ports = append(s.Ports, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointSliceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointSliceList from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointSliceList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIDiscoveryV1beta1EndpointSlice
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointTopology) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointTopology from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointTopology) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointTopology to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1ForZone) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1ForZone from json stream.
func (s *IoK8sAPIDiscoveryV1beta1ForZone) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1ForZone to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Action.Set {
		more.More()
		j.WriteObjectField("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.DeprecatedCount.Set {
		more.More()
		j.WriteObjectField("deprecatedCount")
		s.DeprecatedCount.WriteJSON(j)
	}
	if s.DeprecatedFirstTimestamp.Set {
		more.More()
		j.WriteObjectField("deprecatedFirstTimestamp")
		s.DeprecatedFirstTimestamp.WriteJSON(j)
	}
	if s.DeprecatedLastTimestamp.Set {
		more.More()
		j.WriteObjectField("deprecatedLastTimestamp")
		s.DeprecatedLastTimestamp.WriteJSON(j)
	}
	if s.DeprecatedSource.Set {
		more.More()
		j.WriteObjectField("deprecatedSource")
		s.DeprecatedSource.WriteJSON(j)
	}
	// Unsupported kind "alias".
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Note.Set {
		more.More()
		j.WriteObjectField("note")
		s.Note.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Regarding.Set {
		more.More()
		j.WriteObjectField("regarding")
		s.Regarding.WriteJSON(j)
	}
	if s.Related.Set {
		more.More()
		j.WriteObjectField("related")
		s.Related.WriteJSON(j)
	}
	if s.ReportingController.Set {
		more.More()
		j.WriteObjectField("reportingController")
		s.ReportingController.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		more.More()
		j.WriteObjectField("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	if s.Series.Set {
		more.More()
		j.WriteObjectField("series")
		s.Series.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1Event from json stream.
func (s *IoK8sAPIEventsV1Event) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1Event to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deprecatedCount":
			if err := func() error {
				s.DeprecatedCount.Reset()
				if err := s.DeprecatedCount.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deprecatedFirstTimestamp":
			if err := func() error {
				s.DeprecatedFirstTimestamp.Reset()
				if err := s.DeprecatedFirstTimestamp.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deprecatedLastTimestamp":
			if err := func() error {
				s.DeprecatedLastTimestamp.Reset()
				if err := s.DeprecatedLastTimestamp.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deprecatedSource":
			if err := func() error {
				s.DeprecatedSource.Reset()
				if err := s.DeprecatedSource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "eventTime":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgApisMetaV1MicroTime" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "note":
			if err := func() error {
				s.Note.Reset()
				if err := s.Note.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "regarding":
			if err := func() error {
				s.Regarding.Reset()
				if err := s.Regarding.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "related":
			if err := func() error {
				s.Related.Reset()
				if err := s.Related.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reportingController":
			if err := func() error {
				s.ReportingController.Reset()
				if err := s.ReportingController.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reportingInstance":
			if err := func() error {
				s.ReportingInstance.Reset()
				if err := s.ReportingInstance.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "series":
			if err := func() error {
				s.Series.Reset()
				if err := s.Series.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1EventList from json stream.
func (s *IoK8sAPIEventsV1EventList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1EventList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIEventsV1Event
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("count")
	j.WriteInt32(s.Count)
	// Unsupported kind "alias".
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1EventSeries from json stream.
func (s *IoK8sAPIEventsV1EventSeries) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1EventSeries to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "count":
			if err := func() error {
				s.Count = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastObservedTime":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgApisMetaV1MicroTime" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Action.Set {
		more.More()
		j.WriteObjectField("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.DeprecatedCount.Set {
		more.More()
		j.WriteObjectField("deprecatedCount")
		s.DeprecatedCount.WriteJSON(j)
	}
	if s.DeprecatedFirstTimestamp.Set {
		more.More()
		j.WriteObjectField("deprecatedFirstTimestamp")
		s.DeprecatedFirstTimestamp.WriteJSON(j)
	}
	if s.DeprecatedLastTimestamp.Set {
		more.More()
		j.WriteObjectField("deprecatedLastTimestamp")
		s.DeprecatedLastTimestamp.WriteJSON(j)
	}
	if s.DeprecatedSource.Set {
		more.More()
		j.WriteObjectField("deprecatedSource")
		s.DeprecatedSource.WriteJSON(j)
	}
	// Unsupported kind "alias".
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Note.Set {
		more.More()
		j.WriteObjectField("note")
		s.Note.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Regarding.Set {
		more.More()
		j.WriteObjectField("regarding")
		s.Regarding.WriteJSON(j)
	}
	if s.Related.Set {
		more.More()
		j.WriteObjectField("related")
		s.Related.WriteJSON(j)
	}
	if s.ReportingController.Set {
		more.More()
		j.WriteObjectField("reportingController")
		s.ReportingController.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		more.More()
		j.WriteObjectField("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	if s.Series.Set {
		more.More()
		j.WriteObjectField("series")
		s.Series.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1beta1Event from json stream.
func (s *IoK8sAPIEventsV1beta1Event) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1beta1Event to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deprecatedCount":
			if err := func() error {
				s.DeprecatedCount.Reset()
				if err := s.DeprecatedCount.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deprecatedFirstTimestamp":
			if err := func() error {
				s.DeprecatedFirstTimestamp.Reset()
				if err := s.DeprecatedFirstTimestamp.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deprecatedLastTimestamp":
			if err := func() error {
				s.DeprecatedLastTimestamp.Reset()
				if err := s.DeprecatedLastTimestamp.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deprecatedSource":
			if err := func() error {
				s.DeprecatedSource.Reset()
				if err := s.DeprecatedSource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "eventTime":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgApisMetaV1MicroTime" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "note":
			if err := func() error {
				s.Note.Reset()
				if err := s.Note.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "regarding":
			if err := func() error {
				s.Regarding.Reset()
				if err := s.Regarding.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "related":
			if err := func() error {
				s.Related.Reset()
				if err := s.Related.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reportingController":
			if err := func() error {
				s.ReportingController.Reset()
				if err := s.ReportingController.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reportingInstance":
			if err := func() error {
				s.ReportingInstance.Reset()
				if err := s.ReportingInstance.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "series":
			if err := func() error {
				s.Series.Reset()
				if err := s.Series.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1beta1EventList from json stream.
func (s *IoK8sAPIEventsV1beta1EventList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1beta1EventList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIEventsV1beta1Event
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("count")
	j.WriteInt32(s.Count)
	// Unsupported kind "alias".
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1beta1EventSeries from json stream.
func (s *IoK8sAPIEventsV1beta1EventSeries) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1beta1EventSeries to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "count":
			if err := func() error {
				s.Count = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "lastObservedTime":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgApisMetaV1MicroTime" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchema) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchema from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowSchema to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowSchemaList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta1FlowSchema
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DistinguisherMethod.Set {
		more.More()
		j.WriteObjectField("distinguisherMethod")
		s.DistinguisherMethod.WriteJSON(j)
	}
	if s.MatchingPrecedence.Set {
		more.More()
		j.WriteObjectField("matchingPrecedence")
		s.MatchingPrecedence.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("priorityLevelConfiguration")
	s.PriorityLevelConfiguration.WriteJSON(j)
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "distinguisherMethod":
			if err := func() error {
				s.DistinguisherMethod.Reset()
				if err := s.DistinguisherMethod.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "matchingPrecedence":
			if err := func() error {
				s.MatchingPrecedence.Reset()
				if err := s.MatchingPrecedence.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "priorityLevelConfiguration":
			if err := func() error {
				if err := s.PriorityLevelConfiguration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rules":
			if err := func() error {
				s.Rules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Rules = append(s.Rules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1GroupSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1GroupSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1GroupSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1GroupSubject to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1LimitResponse) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Queuing.Set {
		more.More()
		j.WriteObjectField("queuing")
		s.Queuing.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1LimitResponse from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1LimitResponse) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1LimitResponse to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "queuing":
			if err := func() error {
				s.Queuing.Reset()
				if err := s.Queuing.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AssuredConcurrencyShares.Set {
		more.More()
		j.WriteObjectField("assuredConcurrencyShares")
		s.AssuredConcurrencyShares.WriteJSON(j)
	}
	if s.LimitResponse.Set {
		more.More()
		j.WriteObjectField("limitResponse")
		s.LimitResponse.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "assuredConcurrencyShares":
			if err := func() error {
				s.AssuredConcurrencyShares.Reset()
				if err := s.AssuredConcurrencyShares.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "limitResponse":
			if err := func() error {
				s.LimitResponse.Reset()
				if err := s.LimitResponse.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("nonResourceURLs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NonResourceURLs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nonResourceURLs":
			if err := func() error {
				s.NonResourceURLs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.NonResourceURLs = append(s.NonResourceURLs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "verbs":
			if err := func() error {
				s.Verbs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Verbs = append(s.Verbs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceRules != nil {
		more.More()
		j.WriteObjectField("nonResourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceRules != nil {
		more.More()
		j.WriteObjectField("resourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("subjects")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Subjects {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nonResourceRules":
			if err := func() error {
				s.NonResourceRules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.NonResourceRules = append(s.NonResourceRules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceRules":
			if err := func() error {
				s.ResourceRules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ResourceRules = append(s.ResourceRules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "subjects":
			if err := func() error {
				s.Subjects = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta1Subject
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Subjects = append(s.Subjects, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limited.Set {
		more.More()
		j.WriteObjectField("limited")
		s.Limited.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "limited":
			if err := func() error {
				s.Limited.Reset()
				if err := s.Limited.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HandSize.Set {
		more.More()
		j.WriteObjectField("handSize")
		s.HandSize.WriteJSON(j)
	}
	if s.QueueLengthLimit.Set {
		more.More()
		j.WriteObjectField("queueLengthLimit")
		s.QueueLengthLimit.WriteJSON(j)
	}
	if s.Queues.Set {
		more.More()
		j.WriteObjectField("queues")
		s.Queues.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1QueuingConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1QueuingConfiguration to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "handSize":
			if err := func() error {
				s.HandSize.Reset()
				if err := s.HandSize.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "queueLengthLimit":
			if err := func() error {
				s.QueueLengthLimit.Reset()
				if err := s.QueueLengthLimit.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "queues":
			if err := func() error {
				s.Queues.Reset()
				if err := s.Queues.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiGroups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ApiGroups {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.ClusterScope.Set {
		more.More()
		j.WriteObjectField("clusterScope")
		s.ClusterScope.WriteJSON(j)
	}
	if s.Namespaces != nil {
		more.More()
		j.WriteObjectField("namespaces")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Namespaces {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("resources")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Resources {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiGroups":
			if err := func() error {
				s.ApiGroups = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ApiGroups = append(s.ApiGroups, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "clusterScope":
			if err := func() error {
				s.ClusterScope.Reset()
				if err := s.ClusterScope.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespaces":
			if err := func() error {
				s.Namespaces = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Namespaces = append(s.Namespaces, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resources":
			if err := func() error {
				s.Resources = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Resources = append(s.Resources, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "verbs":
			if err := func() error {
				s.Verbs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Verbs = append(s.Verbs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	if s.ServiceAccount.Set {
		more.More()
		j.WriteObjectField("serviceAccount")
		s.ServiceAccount.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1Subject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1Subject to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "serviceAccount":
			if err := func() error {
				s.ServiceAccount.Reset()
				if err := s.ServiceAccount.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1UserSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1UserSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1UserSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1UserSubject to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchema) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchema from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowSchema to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowSchemaList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta2FlowSchema
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DistinguisherMethod.Set {
		more.More()
		j.WriteObjectField("distinguisherMethod")
		s.DistinguisherMethod.WriteJSON(j)
	}
	if s.MatchingPrecedence.Set {
		more.More()
		j.WriteObjectField("matchingPrecedence")
		s.MatchingPrecedence.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("priorityLevelConfiguration")
	s.PriorityLevelConfiguration.WriteJSON(j)
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "distinguisherMethod":
			if err := func() error {
				s.DistinguisherMethod.Reset()
				if err := s.DistinguisherMethod.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "matchingPrecedence":
			if err := func() error {
				s.MatchingPrecedence.Reset()
				if err := s.MatchingPrecedence.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "priorityLevelConfiguration":
			if err := func() error {
				if err := s.PriorityLevelConfiguration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rules":
			if err := func() error {
				s.Rules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Rules = append(s.Rules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2GroupSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2GroupSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2GroupSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2GroupSubject to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2LimitResponse) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Queuing.Set {
		more.More()
		j.WriteObjectField("queuing")
		s.Queuing.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2LimitResponse from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2LimitResponse) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2LimitResponse to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "queuing":
			if err := func() error {
				s.Queuing.Reset()
				if err := s.Queuing.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AssuredConcurrencyShares.Set {
		more.More()
		j.WriteObjectField("assuredConcurrencyShares")
		s.AssuredConcurrencyShares.WriteJSON(j)
	}
	if s.LimitResponse.Set {
		more.More()
		j.WriteObjectField("limitResponse")
		s.LimitResponse.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "assuredConcurrencyShares":
			if err := func() error {
				s.AssuredConcurrencyShares.Reset()
				if err := s.AssuredConcurrencyShares.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "limitResponse":
			if err := func() error {
				s.LimitResponse.Reset()
				if err := s.LimitResponse.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("nonResourceURLs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NonResourceURLs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nonResourceURLs":
			if err := func() error {
				s.NonResourceURLs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.NonResourceURLs = append(s.NonResourceURLs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "verbs":
			if err := func() error {
				s.Verbs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Verbs = append(s.Verbs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceRules != nil {
		more.More()
		j.WriteObjectField("nonResourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceRules != nil {
		more.More()
		j.WriteObjectField("resourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("subjects")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Subjects {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nonResourceRules":
			if err := func() error {
				s.NonResourceRules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.NonResourceRules = append(s.NonResourceRules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceRules":
			if err := func() error {
				s.ResourceRules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ResourceRules = append(s.ResourceRules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "subjects":
			if err := func() error {
				s.Subjects = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta2Subject
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Subjects = append(s.Subjects, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limited.Set {
		more.More()
		j.WriteObjectField("limited")
		s.Limited.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "limited":
			if err := func() error {
				s.Limited.Reset()
				if err := s.Limited.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HandSize.Set {
		more.More()
		j.WriteObjectField("handSize")
		s.HandSize.WriteJSON(j)
	}
	if s.QueueLengthLimit.Set {
		more.More()
		j.WriteObjectField("queueLengthLimit")
		s.QueueLengthLimit.WriteJSON(j)
	}
	if s.Queues.Set {
		more.More()
		j.WriteObjectField("queues")
		s.Queues.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2QueuingConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2QueuingConfiguration to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "handSize":
			if err := func() error {
				s.HandSize.Reset()
				if err := s.HandSize.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "queueLengthLimit":
			if err := func() error {
				s.QueueLengthLimit.Reset()
				if err := s.QueueLengthLimit.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "queues":
			if err := func() error {
				s.Queues.Reset()
				if err := s.Queues.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiGroups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ApiGroups {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.ClusterScope.Set {
		more.More()
		j.WriteObjectField("clusterScope")
		s.ClusterScope.WriteJSON(j)
	}
	if s.Namespaces != nil {
		more.More()
		j.WriteObjectField("namespaces")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Namespaces {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("resources")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Resources {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiGroups":
			if err := func() error {
				s.ApiGroups = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ApiGroups = append(s.ApiGroups, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "clusterScope":
			if err := func() error {
				s.ClusterScope.Reset()
				if err := s.ClusterScope.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespaces":
			if err := func() error {
				s.Namespaces = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Namespaces = append(s.Namespaces, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resources":
			if err := func() error {
				s.Resources = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Resources = append(s.Resources, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "verbs":
			if err := func() error {
				s.Verbs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Verbs = append(s.Verbs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	if s.ServiceAccount.Set {
		more.More()
		j.WriteObjectField("serviceAccount")
		s.ServiceAccount.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2Subject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2Subject to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "serviceAccount":
			if err := func() error {
				s.ServiceAccount.Reset()
				if err := s.ServiceAccount.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user":
			if err := func() error {
				s.User.Reset()
				if err := s.User.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2UserSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2UserSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2UserSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2UserSubject to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1HTTPIngressPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("backend")
	s.Backend.WriteJSON(j)
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("pathType")
	j.WriteString(s.PathType)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1HTTPIngressPath from json stream.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1HTTPIngressPath to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "backend":
			if err := func() error {
				if err := s.Backend.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pathType":
			if err := func() error {
				s.PathType = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1HTTPIngressRuleValue) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("paths")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Paths {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1HTTPIngressRuleValue from json stream.
func (s *IoK8sAPINetworkingV1HTTPIngressRuleValue) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1HTTPIngressRuleValue to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "paths":
			if err := func() error {
				s.Paths = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1HTTPIngressPath
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Paths = append(s.Paths, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IPBlock) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("cidr")
	j.WriteString(s.Cidr)
	if s.Except != nil {
		more.More()
		j.WriteObjectField("except")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Except {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IPBlock from json stream.
func (s *IoK8sAPINetworkingV1IPBlock) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IPBlock to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "cidr":
			if err := func() error {
				s.Cidr = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "except":
			if err := func() error {
				s.Except = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Except = append(s.Except, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1Ingress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1Ingress from json stream.
func (s *IoK8sAPINetworkingV1Ingress) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1Ingress to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressBackend) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressBackend from json stream.
func (s *IoK8sAPINetworkingV1IngressBackend) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressBackend to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "resource":
			if err := func() error {
				s.Resource.Reset()
				if err := s.Resource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "service":
			if err := func() error {
				s.Service.Reset()
				if err := s.Service.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClass from json stream.
func (s *IoK8sAPINetworkingV1IngressClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressClass to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassList from json stream.
func (s *IoK8sAPINetworkingV1IngressClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressClassList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1IngressClass
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassParametersReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroup.Set {
		more.More()
		j.WriteObjectField("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Scope.Set {
		more.More()
		j.WriteObjectField("scope")
		s.Scope.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassParametersReference from json stream.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressClassParametersReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiGroup":
			if err := func() error {
				s.ApiGroup.Reset()
				if err := s.ApiGroup.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace.Reset()
				if err := s.Namespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scope":
			if err := func() error {
				s.Scope.Reset()
				if err := s.Scope.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Controller.Set {
		more.More()
		j.WriteObjectField("controller")
		s.Controller.WriteJSON(j)
	}
	if s.Parameters.Set {
		more.More()
		j.WriteObjectField("parameters")
		s.Parameters.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassSpec from json stream.
func (s *IoK8sAPINetworkingV1IngressClassSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressClassSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "controller":
			if err := func() error {
				s.Controller.Reset()
				if err := s.Controller.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parameters":
			if err := func() error {
				s.Parameters.Reset()
				if err := s.Parameters.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressList from json stream.
func (s *IoK8sAPINetworkingV1IngressList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1Ingress
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	if s.HTTP.Set {
		more.More()
		j.WriteObjectField("http")
		s.HTTP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressRule from json stream.
func (s *IoK8sAPINetworkingV1IngressRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressRule to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "host":
			if err := func() error {
				s.Host.Reset()
				if err := s.Host.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "http":
			if err := func() error {
				s.HTTP.Reset()
				if err := s.HTTP.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressServiceBackend) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressServiceBackend from json stream.
func (s *IoK8sAPINetworkingV1IngressServiceBackend) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressServiceBackend to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultBackend.Set {
		more.More()
		j.WriteObjectField("defaultBackend")
		s.DefaultBackend.WriteJSON(j)
	}
	if s.IngressClassName.Set {
		more.More()
		j.WriteObjectField("ingressClassName")
		s.IngressClassName.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.TLS != nil {
		more.More()
		j.WriteObjectField("tls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TLS {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressSpec from json stream.
func (s *IoK8sAPINetworkingV1IngressSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "defaultBackend":
			if err := func() error {
				s.DefaultBackend.Reset()
				if err := s.DefaultBackend.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ingressClassName":
			if err := func() error {
				s.IngressClassName.Reset()
				if err := s.IngressClassName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rules":
			if err := func() error {
				s.Rules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1IngressRule
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Rules = append(s.Rules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tls":
			if err := func() error {
				s.TLS = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1IngressTLS
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.TLS = append(s.TLS, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LoadBalancer.Set {
		more.More()
		j.WriteObjectField("loadBalancer")
		s.LoadBalancer.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressStatus from json stream.
func (s *IoK8sAPINetworkingV1IngressStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "loadBalancer":
			if err := func() error {
				s.LoadBalancer.Reset()
				if err := s.LoadBalancer.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressTLS) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hosts != nil {
		more.More()
		j.WriteObjectField("hosts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Hosts {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.SecretName.Set {
		more.More()
		j.WriteObjectField("secretName")
		s.SecretName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressTLS from json stream.
func (s *IoK8sAPINetworkingV1IngressTLS) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressTLS to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "hosts":
			if err := func() error {
				s.Hosts = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Hosts = append(s.Hosts, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secretName":
			if err := func() error {
				s.SecretName.Reset()
				if err := s.SecretName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicy from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicy) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicy to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyEgressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.To != nil {
		more.More()
		j.WriteObjectField("to")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.To {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyEgressRule from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyEgressRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicyEgressRule to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "ports":
			if err := func() error {
				s.Ports = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1NetworkPolicyPort
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ports = append(s.Ports, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "to":
			if err := func() error {
				s.To = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1NetworkPolicyPeer
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.To = append(s.To, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyIngressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.From != nil {
		more.More()
		j.WriteObjectField("from")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.From {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyIngressRule from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyIngressRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicyIngressRule to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "from":
			if err := func() error {
				s.From = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1NetworkPolicyPeer
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.From = append(s.From, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ports":
			if err := func() error {
				s.Ports = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1NetworkPolicyPort
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ports = append(s.Ports, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyList from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicyList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1NetworkPolicy
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyPeer) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.IpBlock.Set {
		more.More()
		j.WriteObjectField("ipBlock")
		s.IpBlock.WriteJSON(j)
	}
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.PodSelector.Set {
		more.More()
		j.WriteObjectField("podSelector")
		s.PodSelector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyPeer from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicyPeer to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "ipBlock":
			if err := func() error {
				s.IpBlock.Reset()
				if err := s.IpBlock.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespaceSelector":
			if err := func() error {
				s.NamespaceSelector.Reset()
				if err := s.NamespaceSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "podSelector":
			if err := func() error {
				s.PodSelector.Reset()
				if err := s.PodSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.EndPort.Set {
		more.More()
		j.WriteObjectField("endPort")
		s.EndPort.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyPort from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicyPort to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "endPort":
			if err := func() error {
				s.EndPort.Reset()
				if err := s.EndPort.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "protocol":
			if err := func() error {
				s.Protocol.Reset()
				if err := s.Protocol.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicySpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Egress != nil {
		more.More()
		j.WriteObjectField("egress")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Egress {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ingress != nil {
		more.More()
		j.WriteObjectField("ingress")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ingress {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("podSelector")
	s.PodSelector.WriteJSON(j)
	if s.PolicyTypes != nil {
		more.More()
		j.WriteObjectField("policyTypes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PolicyTypes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicySpec from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicySpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "egress":
			if err := func() error {
				s.Egress = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1NetworkPolicyEgressRule
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Egress = append(s.Egress, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ingress":
			if err := func() error {
				s.Ingress = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINetworkingV1NetworkPolicyIngressRule
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ingress = append(s.Ingress, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "podSelector":
			if err := func() error {
				if err := s.PodSelector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "policyTypes":
			if err := func() error {
				s.PolicyTypes = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.PolicyTypes = append(s.PolicyTypes, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1ServiceBackendPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Number.Set {
		more.More()
		j.WriteObjectField("number")
		s.Number.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1ServiceBackendPort from json stream.
func (s *IoK8sAPINetworkingV1ServiceBackendPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1ServiceBackendPort to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PodFixed != nil {
		more.More()
		j.WriteObjectField("podFixed")
		s.PodFixed.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1Overhead from json stream.
func (s *IoK8sAPINodeV1Overhead) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1Overhead to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "podFixed":
			if err := func() error {
				s.PodFixed = nil
				var elem IoK8sAPINodeV1OverheadPodFixed
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.PodFixed = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1OverheadPodFixed) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1OverheadPodFixed from json stream.
func (s *IoK8sAPINodeV1OverheadPodFixed) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1OverheadPodFixed to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("handler")
	j.WriteString(s.Handler)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Overhead.Set {
		more.More()
		j.WriteObjectField("overhead")
		s.Overhead.WriteJSON(j)
	}
	if s.Scheduling.Set {
		more.More()
		j.WriteObjectField("scheduling")
		s.Scheduling.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1RuntimeClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1RuntimeClass to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "handler":
			if err := func() error {
				s.Handler = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "overhead":
			if err := func() error {
				s.Overhead.Reset()
				if err := s.Overhead.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scheduling":
			if err := func() error {
				s.Scheduling.Reset()
				if err := s.Scheduling.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1RuntimeClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1RuntimeClassList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINodeV1RuntimeClass
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NodeSelector != nil {
		more.More()
		j.WriteObjectField("nodeSelector")
		s.NodeSelector.WriteJSON(j)
	}
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1Scheduling from json stream.
func (s *IoK8sAPINodeV1Scheduling) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1Scheduling to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nodeSelector":
			if err := func() error {
				s.NodeSelector = nil
				var elem IoK8sAPINodeV1SchedulingNodeSelector
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.NodeSelector = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tolerations":
			if err := func() error {
				s.Tolerations = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Toleration
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Tolerations = append(s.Tolerations, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1SchedulingNodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1SchedulingNodeSelector from json stream.
func (s *IoK8sAPINodeV1SchedulingNodeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1SchedulingNodeSelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PodFixed != nil {
		more.More()
		j.WriteObjectField("podFixed")
		s.PodFixed.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1Overhead from json stream.
func (s *IoK8sAPINodeV1alpha1Overhead) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1Overhead to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "podFixed":
			if err := func() error {
				s.PodFixed = nil
				var elem IoK8sAPINodeV1alpha1OverheadPodFixed
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.PodFixed = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1OverheadPodFixed) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1OverheadPodFixed from json stream.
func (s *IoK8sAPINodeV1alpha1OverheadPodFixed) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1OverheadPodFixed to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1RuntimeClass to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1RuntimeClassList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINodeV1alpha1RuntimeClass
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClassSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Overhead.Set {
		more.More()
		j.WriteObjectField("overhead")
		s.Overhead.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("runtimeHandler")
	j.WriteString(s.RuntimeHandler)
	if s.Scheduling.Set {
		more.More()
		j.WriteObjectField("scheduling")
		s.Scheduling.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClassSpec from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1RuntimeClassSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "overhead":
			if err := func() error {
				s.Overhead.Reset()
				if err := s.Overhead.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runtimeHandler":
			if err := func() error {
				s.RuntimeHandler = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scheduling":
			if err := func() error {
				s.Scheduling.Reset()
				if err := s.Scheduling.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NodeSelector != nil {
		more.More()
		j.WriteObjectField("nodeSelector")
		s.NodeSelector.WriteJSON(j)
	}
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1Scheduling from json stream.
func (s *IoK8sAPINodeV1alpha1Scheduling) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1Scheduling to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nodeSelector":
			if err := func() error {
				s.NodeSelector = nil
				var elem IoK8sAPINodeV1alpha1SchedulingNodeSelector
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.NodeSelector = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tolerations":
			if err := func() error {
				s.Tolerations = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Toleration
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Tolerations = append(s.Tolerations, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1SchedulingNodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1SchedulingNodeSelector from json stream.
func (s *IoK8sAPINodeV1alpha1SchedulingNodeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1SchedulingNodeSelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PodFixed != nil {
		more.More()
		j.WriteObjectField("podFixed")
		s.PodFixed.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1Overhead from json stream.
func (s *IoK8sAPINodeV1beta1Overhead) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1Overhead to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "podFixed":
			if err := func() error {
				s.PodFixed = nil
				var elem IoK8sAPINodeV1beta1OverheadPodFixed
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.PodFixed = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1OverheadPodFixed) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1OverheadPodFixed from json stream.
func (s *IoK8sAPINodeV1beta1OverheadPodFixed) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1OverheadPodFixed to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("handler")
	j.WriteString(s.Handler)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Overhead.Set {
		more.More()
		j.WriteObjectField("overhead")
		s.Overhead.WriteJSON(j)
	}
	if s.Scheduling.Set {
		more.More()
		j.WriteObjectField("scheduling")
		s.Scheduling.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1beta1RuntimeClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1RuntimeClass to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "handler":
			if err := func() error {
				s.Handler = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "overhead":
			if err := func() error {
				s.Overhead.Reset()
				if err := s.Overhead.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scheduling":
			if err := func() error {
				s.Scheduling.Reset()
				if err := s.Scheduling.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1RuntimeClassList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPINodeV1beta1RuntimeClass
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NodeSelector != nil {
		more.More()
		j.WriteObjectField("nodeSelector")
		s.NodeSelector.WriteJSON(j)
	}
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1Scheduling from json stream.
func (s *IoK8sAPINodeV1beta1Scheduling) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1Scheduling to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "nodeSelector":
			if err := func() error {
				s.NodeSelector = nil
				var elem IoK8sAPINodeV1beta1SchedulingNodeSelector
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.NodeSelector = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tolerations":
			if err := func() error {
				s.Tolerations = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1Toleration
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Tolerations = append(s.Tolerations, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1SchedulingNodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1SchedulingNodeSelector from json stream.
func (s *IoK8sAPINodeV1beta1SchedulingNodeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1SchedulingNodeSelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudget from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1PodDisruptionBudget to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetList from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1PodDisruptionBudgetList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIPolicyV1PodDisruptionBudget
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MaxUnavailable.Set {
		more.More()
		j.WriteObjectField("maxUnavailable")
		s.MaxUnavailable.WriteJSON(j)
	}
	if s.MinAvailable.Set {
		more.More()
		j.WriteObjectField("minAvailable")
		s.MinAvailable.WriteJSON(j)
	}
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetSpec from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1PodDisruptionBudgetSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "maxUnavailable":
			if err := func() error {
				s.MaxUnavailable.Reset()
				if err := s.MaxUnavailable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "minAvailable":
			if err := func() error {
				s.MinAvailable.Reset()
				if err := s.MinAvailable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				s.Selector.Reset()
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentHealthy")
	j.WriteInt32(s.CurrentHealthy)
	more.More()
	j.WriteObjectField("desiredHealthy")
	j.WriteInt32(s.DesiredHealthy)
	if s.DisruptedPods != nil {
		more.More()
		j.WriteObjectField("disruptedPods")
		s.DisruptedPods.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("disruptionsAllowed")
	j.WriteInt32(s.DisruptionsAllowed)
	more.More()
	j.WriteObjectField("expectedPods")
	j.WriteInt32(s.ExpectedPods)
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetStatus from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1PodDisruptionBudgetStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1Condition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentHealthy":
			if err := func() error {
				s.CurrentHealthy = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "desiredHealthy":
			if err := func() error {
				s.DesiredHealthy = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disruptedPods":
			if err := func() error {
				s.DisruptedPods = nil
				var elem IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.DisruptedPods = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disruptionsAllowed":
			if err := func() error {
				s.DisruptionsAllowed = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "expectedPods":
			if err := func() error {
				s.ExpectedPods = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedCSIDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedCSIDriver from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedCSIDriver) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1AllowedCSIDriver to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedFlexVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedFlexVolume from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedFlexVolume) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1AllowedFlexVolume to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "driver":
			if err := func() error {
				s.Driver = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedHostPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PathPrefix.Set {
		more.More()
		j.WriteObjectField("pathPrefix")
		s.PathPrefix.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedHostPath from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedHostPath) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1AllowedHostPath to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "pathPrefix":
			if err := func() error {
				s.PathPrefix.Reset()
				if err := s.PathPrefix.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnly":
			if err := func() error {
				s.ReadOnly.Reset()
				if err := s.ReadOnly.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Rule.Set {
		more.More()
		j.WriteObjectField("rule")
		s.Rule.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1FSGroupStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1FSGroupStrategyOptions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "ranges":
			if err := func() error {
				s.Ranges = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIPolicyV1beta1IDRange
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ranges = append(s.Ranges, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1HostPortRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("max")
	j.WriteInt32(s.Max)
	more.More()
	j.WriteObjectField("min")
	j.WriteInt32(s.Min)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1HostPortRange from json stream.
func (s *IoK8sAPIPolicyV1beta1HostPortRange) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1HostPortRange to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "max":
			if err := func() error {
				s.Max = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "min":
			if err := func() error {
				s.Min = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1IDRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("max")
	j.WriteInt64(s.Max)
	more.More()
	j.WriteObjectField("min")
	j.WriteInt64(s.Min)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1IDRange from json stream.
func (s *IoK8sAPIPolicyV1beta1IDRange) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1IDRange to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "max":
			if err := func() error {
				s.Max = int64(i.Int64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "min":
			if err := func() error {
				s.Min = int64(i.Int64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudget from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodDisruptionBudget to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetList from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodDisruptionBudgetList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIPolicyV1beta1PodDisruptionBudget
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MaxUnavailable.Set {
		more.More()
		j.WriteObjectField("maxUnavailable")
		s.MaxUnavailable.WriteJSON(j)
	}
	if s.MinAvailable.Set {
		more.More()
		j.WriteObjectField("minAvailable")
		s.MinAvailable.WriteJSON(j)
	}
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "maxUnavailable":
			if err := func() error {
				s.MaxUnavailable.Reset()
				if err := s.MaxUnavailable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "minAvailable":
			if err := func() error {
				s.MinAvailable.Reset()
				if err := s.MinAvailable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selector":
			if err := func() error {
				s.Selector.Reset()
				if err := s.Selector.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentHealthy")
	j.WriteInt32(s.CurrentHealthy)
	more.More()
	j.WriteObjectField("desiredHealthy")
	j.WriteInt32(s.DesiredHealthy)
	if s.DisruptedPods != nil {
		more.More()
		j.WriteObjectField("disruptedPods")
		s.DisruptedPods.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("disruptionsAllowed")
	j.WriteInt32(s.DisruptionsAllowed)
	more.More()
	j.WriteObjectField("expectedPods")
	j.WriteInt32(s.ExpectedPods)
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1Condition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currentHealthy":
			if err := func() error {
				s.CurrentHealthy = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "desiredHealthy":
			if err := func() error {
				s.DesiredHealthy = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disruptedPods":
			if err := func() error {
				s.DisruptedPods = nil
				var elem IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.DisruptedPods = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disruptionsAllowed":
			if err := func() error {
				s.DisruptionsAllowed = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "expectedPods":
			if err := func() error {
				s.ExpectedPods = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicy from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodSecurityPolicy to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicyList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicyList from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodSecurityPolicyList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIPolicyV1beta1PodSecurityPolicy
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowPrivilegeEscalation.Set {
		more.More()
		j.WriteObjectField("allowPrivilegeEscalation")
		s.AllowPrivilegeEscalation.WriteJSON(j)
	}
	if s.AllowedCSIDrivers != nil {
		more.More()
		j.WriteObjectField("allowedCSIDrivers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedCSIDrivers {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedCapabilities != nil {
		more.More()
		j.WriteObjectField("allowedCapabilities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedCapabilities {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedFlexVolumes != nil {
		more.More()
		j.WriteObjectField("allowedFlexVolumes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedFlexVolumes {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedHostPaths != nil {
		more.More()
		j.WriteObjectField("allowedHostPaths")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedHostPaths {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedProcMountTypes != nil {
		more.More()
		j.WriteObjectField("allowedProcMountTypes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedProcMountTypes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedUnsafeSysctls != nil {
		more.More()
		j.WriteObjectField("allowedUnsafeSysctls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedUnsafeSysctls {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.DefaultAddCapabilities != nil {
		more.More()
		j.WriteObjectField("defaultAddCapabilities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.DefaultAddCapabilities {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.DefaultAllowPrivilegeEscalation.Set {
		more.More()
		j.WriteObjectField("defaultAllowPrivilegeEscalation")
		s.DefaultAllowPrivilegeEscalation.WriteJSON(j)
	}
	if s.ForbiddenSysctls != nil {
		more.More()
		j.WriteObjectField("forbiddenSysctls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ForbiddenSysctls {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("fsGroup")
	s.FsGroup.WriteJSON(j)
	if s.HostIPC.Set {
		more.More()
		j.WriteObjectField("hostIPC")
		s.HostIPC.WriteJSON(j)
	}
	if s.HostNetwork.Set {
		more.More()
		j.WriteObjectField("hostNetwork")
		s.HostNetwork.WriteJSON(j)
	}
	if s.HostPID.Set {
		more.More()
		j.WriteObjectField("hostPID")
		s.HostPID.WriteJSON(j)
	}
	if s.HostPorts != nil {
		more.More()
		j.WriteObjectField("hostPorts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.HostPorts {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Privileged.Set {
		more.More()
		j.WriteObjectField("privileged")
		s.Privileged.WriteJSON(j)
	}
	if s.ReadOnlyRootFilesystem.Set {
		more.More()
		j.WriteObjectField("readOnlyRootFilesystem")
		s.ReadOnlyRootFilesystem.WriteJSON(j)
	}
	if s.RequiredDropCapabilities != nil {
		more.More()
		j.WriteObjectField("requiredDropCapabilities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RequiredDropCapabilities {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RunAsGroup.Set {
		more.More()
		j.WriteObjectField("runAsGroup")
		s.RunAsGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("runAsUser")
	s.RunAsUser.WriteJSON(j)
	if s.RuntimeClass.Set {
		more.More()
		j.WriteObjectField("runtimeClass")
		s.RuntimeClass.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("seLinux")
	s.SeLinux.WriteJSON(j)
	more.More()
	j.WriteObjectField("supplementalGroups")
	s.SupplementalGroups.WriteJSON(j)
	if s.Volumes != nil {
		more.More()
		j.WriteObjectField("volumes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Volumes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicySpec from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodSecurityPolicySpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "allowPrivilegeEscalation":
			if err := func() error {
				s.AllowPrivilegeEscalation.Reset()
				if err := s.AllowPrivilegeEscalation.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "allowedCSIDrivers":
			if err := func() error {
				s.AllowedCSIDrivers = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIPolicyV1beta1AllowedCSIDriver
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedCSIDrivers = append(s.AllowedCSIDrivers, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "allowedCapabilities":
			if err := func() error {
				s.AllowedCapabilities = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedCapabilities = append(s.AllowedCapabilities, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "allowedFlexVolumes":
			if err := func() error {
				s.AllowedFlexVolumes = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIPolicyV1beta1AllowedFlexVolume
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedFlexVolumes = append(s.AllowedFlexVolumes, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "allowedHostPaths":
			if err := func() error {
				s.AllowedHostPaths = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIPolicyV1beta1AllowedHostPath
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedHostPaths = append(s.AllowedHostPaths, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "allowedProcMountTypes":
			if err := func() error {
				s.AllowedProcMountTypes = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedProcMountTypes = append(s.AllowedProcMountTypes, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "allowedUnsafeSysctls":
			if err := func() error {
				s.AllowedUnsafeSysctls = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedUnsafeSysctls = append(s.AllowedUnsafeSysctls, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "defaultAddCapabilities":
			if err := func() error {
				s.DefaultAddCapabilities = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.DefaultAddCapabilities = append(s.DefaultAddCapabilities, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "defaultAllowPrivilegeEscalation":
			if err := func() error {
				s.DefaultAllowPrivilegeEscalation.Reset()
				if err := s.DefaultAllowPrivilegeEscalation.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forbiddenSysctls":
			if err := func() error {
				s.ForbiddenSysctls = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ForbiddenSysctls = append(s.ForbiddenSysctls, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fsGroup":
			if err := func() error {
				if err := s.FsGroup.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostIPC":
			if err := func() error {
				s.HostIPC.Reset()
				if err := s.HostIPC.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostNetwork":
			if err := func() error {
				s.HostNetwork.Reset()
				if err := s.HostNetwork.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostPID":
			if err := func() error {
				s.HostPID.Reset()
				if err := s.HostPID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hostPorts":
			if err := func() error {
				s.HostPorts = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIPolicyV1beta1HostPortRange
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.HostPorts = append(s.HostPorts, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "privileged":
			if err := func() error {
				s.Privileged.Reset()
				if err := s.Privileged.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "readOnlyRootFilesystem":
			if err := func() error {
				s.ReadOnlyRootFilesystem.Reset()
				if err := s.ReadOnlyRootFilesystem.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "requiredDropCapabilities":
			if err := func() error {
				s.RequiredDropCapabilities = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.RequiredDropCapabilities = append(s.RequiredDropCapabilities, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runAsGroup":
			if err := func() error {
				s.RunAsGroup.Reset()
				if err := s.RunAsGroup.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runAsUser":
			if err := func() error {
				if err := s.RunAsUser.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "runtimeClass":
			if err := func() error {
				s.RuntimeClass.Reset()
				if err := s.RuntimeClass.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "seLinux":
			if err := func() error {
				if err := s.SeLinux.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "supplementalGroups":
			if err := func() error {
				if err := s.SupplementalGroups.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumes":
			if err := func() error {
				s.Volumes = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Volumes = append(s.Volumes, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("rule")
	j.WriteString(s.Rule)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "ranges":
			if err := func() error {
				s.Ranges = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIPolicyV1beta1IDRange
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ranges = append(s.Ranges, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rule":
			if err := func() error {
				s.Rule = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("rule")
	j.WriteString(s.Rule)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "ranges":
			if err := func() error {
				s.Ranges = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIPolicyV1beta1IDRange
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ranges = append(s.Ranges, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rule":
			if err := func() error {
				s.Rule = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("allowedRuntimeClassNames")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.AllowedRuntimeClassNames {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.DefaultRuntimeClassName.Set {
		more.More()
		j.WriteObjectField("defaultRuntimeClassName")
		s.DefaultRuntimeClassName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "allowedRuntimeClassNames":
			if err := func() error {
				s.AllowedRuntimeClassNames = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedRuntimeClassNames = append(s.AllowedRuntimeClassNames, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "defaultRuntimeClassName":
			if err := func() error {
				s.DefaultRuntimeClassName.Reset()
				if err := s.DefaultRuntimeClassName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("rule")
	j.WriteString(s.Rule)
	if s.SeLinuxOptions.Set {
		more.More()
		j.WriteObjectField("seLinuxOptions")
		s.SeLinuxOptions.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1SELinuxStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1SELinuxStrategyOptions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "rule":
			if err := func() error {
				s.Rule = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "seLinuxOptions":
			if err := func() error {
				s.SeLinuxOptions.Reset()
				if err := s.SeLinuxOptions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Rule.Set {
		more.More()
		j.WriteObjectField("rule")
		s.Rule.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "ranges":
			if err := func() error {
				s.Ranges = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIPolicyV1beta1IDRange
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Ranges = append(s.Ranges, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rule":
			if err := func() error {
				s.Rule.Reset()
				if err := s.Rule.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1AggregationRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ClusterRoleSelectors != nil {
		more.More()
		j.WriteObjectField("clusterRoleSelectors")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ClusterRoleSelectors {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1AggregationRule from json stream.
func (s *IoK8sAPIRbacV1AggregationRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1AggregationRule to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "clusterRoleSelectors":
			if err := func() error {
				s.ClusterRoleSelectors = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1LabelSelector
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ClusterRoleSelectors = append(s.ClusterRoleSelectors, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRole) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AggregationRule.Set {
		more.More()
		j.WriteObjectField("aggregationRule")
		s.AggregationRule.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRole from json stream.
func (s *IoK8sAPIRbacV1ClusterRole) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1ClusterRole to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "aggregationRule":
			if err := func() error {
				s.AggregationRule.Reset()
				if err := s.AggregationRule.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rules":
			if err := func() error {
				s.Rules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIRbacV1PolicyRule
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Rules = append(s.Rules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleBinding) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("roleRef")
	s.RoleRef.WriteJSON(j)
	if s.Subjects != nil {
		more.More()
		j.WriteObjectField("subjects")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Subjects {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleBinding from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1ClusterRoleBinding to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "roleRef":
			if err := func() error {
				if err := s.RoleRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "subjects":
			if err := func() error {
				s.Subjects = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIRbacV1Subject
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Subjects = append(s.Subjects, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleBindingList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleBindingList from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1ClusterRoleBindingList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIRbacV1ClusterRoleBinding
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleList from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1ClusterRoleList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIRbacV1ClusterRole
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1PolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroups != nil {
		more.More()
		j.WriteObjectField("apiGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiGroups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NonResourceURLs != nil {
		more.More()
		j.WriteObjectField("nonResourceURLs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceURLs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceNames != nil {
		more.More()
		j.WriteObjectField("resourceNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Resources != nil {
		more.More()
		j.WriteObjectField("resources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Resources {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1PolicyRule from json stream.
func (s *IoK8sAPIRbacV1PolicyRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1PolicyRule to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiGroups":
			if err := func() error {
				s.ApiGroups = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ApiGroups = append(s.ApiGroups, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nonResourceURLs":
			if err := func() error {
				s.NonResourceURLs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.NonResourceURLs = append(s.NonResourceURLs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceNames":
			if err := func() error {
				s.ResourceNames = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ResourceNames = append(s.ResourceNames, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resources":
			if err := func() error {
				s.Resources = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Resources = append(s.Resources, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "verbs":
			if err := func() error {
				s.Verbs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Verbs = append(s.Verbs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1Role) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1Role from json stream.
func (s *IoK8sAPIRbacV1Role) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1Role to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "rules":
			if err := func() error {
				s.Rules = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIRbacV1PolicyRule
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Rules = append(s.Rules, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleBinding) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("roleRef")
	s.RoleRef.WriteJSON(j)
	if s.Subjects != nil {
		more.More()
		j.WriteObjectField("subjects")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Subjects {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1RoleBinding from json stream.
func (s *IoK8sAPIRbacV1RoleBinding) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1RoleBinding to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "roleRef":
			if err := func() error {
				if err := s.RoleRef.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "subjects":
			if err := func() error {
				s.Subjects = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIRbacV1Subject
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Subjects = append(s.Subjects, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleBindingList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1RoleBindingList from json stream.
func (s *IoK8sAPIRbacV1RoleBindingList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1RoleBindingList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIRbacV1RoleBinding
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1RoleList from json stream.
func (s *IoK8sAPIRbacV1RoleList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1RoleList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIRbacV1Role
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleRef) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiGroup")
	j.WriteString(s.ApiGroup)
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1RoleRef from json stream.
func (s *IoK8sAPIRbacV1RoleRef) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1RoleRef to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiGroup":
			if err := func() error {
				s.ApiGroup = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroup.Set {
		more.More()
		j.WriteObjectField("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1Subject from json stream.
func (s *IoK8sAPIRbacV1Subject) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1Subject to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiGroup":
			if err := func() error {
				s.ApiGroup.Reset()
				if err := s.ApiGroup.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace.Reset()
				if err := s.Namespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPISchedulingV1PriorityClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.GlobalDefault.Set {
		more.More()
		j.WriteObjectField("globalDefault")
		s.GlobalDefault.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.PreemptionPolicy.Set {
		more.More()
		j.WriteObjectField("preemptionPolicy")
		s.PreemptionPolicy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("value")
	j.WriteInt32(s.Value)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPISchedulingV1PriorityClass from json stream.
func (s *IoK8sAPISchedulingV1PriorityClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPISchedulingV1PriorityClass to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "globalDefault":
			if err := func() error {
				s.GlobalDefault.Reset()
				if err := s.GlobalDefault.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "preemptionPolicy":
			if err := func() error {
				s.PreemptionPolicy.Reset()
				if err := s.PreemptionPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPISchedulingV1PriorityClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPISchedulingV1PriorityClassList from json stream.
func (s *IoK8sAPISchedulingV1PriorityClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPISchedulingV1PriorityClassList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPISchedulingV1PriorityClass
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriver from json stream.
func (s *IoK8sAPIStorageV1CSIDriver) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSIDriver to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriverList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriverList from json stream.
func (s *IoK8sAPIStorageV1CSIDriverList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSIDriverList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIStorageV1CSIDriver
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriverSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AttachRequired.Set {
		more.More()
		j.WriteObjectField("attachRequired")
		s.AttachRequired.WriteJSON(j)
	}
	if s.FsGroupPolicy.Set {
		more.More()
		j.WriteObjectField("fsGroupPolicy")
		s.FsGroupPolicy.WriteJSON(j)
	}
	if s.PodInfoOnMount.Set {
		more.More()
		j.WriteObjectField("podInfoOnMount")
		s.PodInfoOnMount.WriteJSON(j)
	}
	if s.RequiresRepublish.Set {
		more.More()
		j.WriteObjectField("requiresRepublish")
		s.RequiresRepublish.WriteJSON(j)
	}
	if s.StorageCapacity.Set {
		more.More()
		j.WriteObjectField("storageCapacity")
		s.StorageCapacity.WriteJSON(j)
	}
	if s.TokenRequests != nil {
		more.More()
		j.WriteObjectField("tokenRequests")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TokenRequests {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumeLifecycleModes != nil {
		more.More()
		j.WriteObjectField("volumeLifecycleModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeLifecycleModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriverSpec from json stream.
func (s *IoK8sAPIStorageV1CSIDriverSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSIDriverSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "attachRequired":
			if err := func() error {
				s.AttachRequired.Reset()
				if err := s.AttachRequired.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fsGroupPolicy":
			if err := func() error {
				s.FsGroupPolicy.Reset()
				if err := s.FsGroupPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "podInfoOnMount":
			if err := func() error {
				s.PodInfoOnMount.Reset()
				if err := s.PodInfoOnMount.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "requiresRepublish":
			if err := func() error {
				s.RequiresRepublish.Reset()
				if err := s.RequiresRepublish.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storageCapacity":
			if err := func() error {
				s.StorageCapacity.Reset()
				if err := s.StorageCapacity.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tokenRequests":
			if err := func() error {
				s.TokenRequests = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIStorageV1TokenRequest
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.TokenRequests = append(s.TokenRequests, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeLifecycleModes":
			if err := func() error {
				s.VolumeLifecycleModes = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.VolumeLifecycleModes = append(s.VolumeLifecycleModes, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINode) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSINode from json stream.
func (s *IoK8sAPIStorageV1CSINode) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSINode to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Allocatable.Set {
		more.More()
		j.WriteObjectField("allocatable")
		s.Allocatable.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("nodeID")
	j.WriteString(s.NodeID)
	if s.TopologyKeys != nil {
		more.More()
		j.WriteObjectField("topologyKeys")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TopologyKeys {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeDriver from json stream.
func (s *IoK8sAPIStorageV1CSINodeDriver) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSINodeDriver to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "allocatable":
			if err := func() error {
				s.Allocatable.Reset()
				if err := s.Allocatable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeID":
			if err := func() error {
				s.NodeID = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "topologyKeys":
			if err := func() error {
				s.TopologyKeys = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.TopologyKeys = append(s.TopologyKeys, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeList from json stream.
func (s *IoK8sAPIStorageV1CSINodeList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSINodeList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIStorageV1CSINode
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("drivers")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Drivers {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeSpec from json stream.
func (s *IoK8sAPIStorageV1CSINodeSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSINodeSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "drivers":
			if err := func() error {
				s.Drivers = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIStorageV1CSINodeDriver
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Drivers = append(s.Drivers, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1StorageClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowVolumeExpansion.Set {
		more.More()
		j.WriteObjectField("allowVolumeExpansion")
		s.AllowVolumeExpansion.WriteJSON(j)
	}
	if s.AllowedTopologies != nil {
		more.More()
		j.WriteObjectField("allowedTopologies")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedTopologies {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.MountOptions != nil {
		more.More()
		j.WriteObjectField("mountOptions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MountOptions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Parameters != nil {
		more.More()
		j.WriteObjectField("parameters")
		s.Parameters.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("provisioner")
	j.WriteString(s.Provisioner)
	if s.ReclaimPolicy.Set {
		more.More()
		j.WriteObjectField("reclaimPolicy")
		s.ReclaimPolicy.WriteJSON(j)
	}
	if s.VolumeBindingMode.Set {
		more.More()
		j.WriteObjectField("volumeBindingMode")
		s.VolumeBindingMode.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1StorageClass from json stream.
func (s *IoK8sAPIStorageV1StorageClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1StorageClass to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "allowVolumeExpansion":
			if err := func() error {
				s.AllowVolumeExpansion.Reset()
				if err := s.AllowVolumeExpansion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "allowedTopologies":
			if err := func() error {
				s.AllowedTopologies = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPICoreV1TopologySelectorTerm
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllowedTopologies = append(s.AllowedTopologies, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mountOptions":
			if err := func() error {
				s.MountOptions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.MountOptions = append(s.MountOptions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parameters":
			if err := func() error {
				s.Parameters = nil
				var elem IoK8sAPIStorageV1StorageClassParameters
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Parameters = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "provisioner":
			if err := func() error {
				s.Provisioner = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reclaimPolicy":
			if err := func() error {
				s.ReclaimPolicy.Reset()
				if err := s.ReclaimPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "volumeBindingMode":
			if err := func() error {
				s.VolumeBindingMode.Reset()
				if err := s.VolumeBindingMode.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1StorageClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1StorageClassList from json stream.
func (s *IoK8sAPIStorageV1StorageClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1StorageClassList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIStorageV1StorageClass
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1StorageClassParameters) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1StorageClassParameters from json stream.
func (s *IoK8sAPIStorageV1StorageClassParameters) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1StorageClassParameters to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1TokenRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("audience")
	j.WriteString(s.Audience)
	if s.ExpirationSeconds.Set {
		more.More()
		j.WriteObjectField("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1TokenRequest from json stream.
func (s *IoK8sAPIStorageV1TokenRequest) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1TokenRequest to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "audience":
			if err := func() error {
				s.Audience = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "expirationSeconds":
			if err := func() error {
				s.ExpirationSeconds.Reset()
				if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachment from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachment) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachment to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentList from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachmentList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIStorageV1VolumeAttachment
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.InlineVolumeSpec.Set {
		more.More()
		j.WriteObjectField("inlineVolumeSpec")
		s.InlineVolumeSpec.WriteJSON(j)
	}
	if s.PersistentVolumeName.Set {
		more.More()
		j.WriteObjectField("persistentVolumeName")
		s.PersistentVolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentSource from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachmentSource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "inlineVolumeSpec":
			if err := func() error {
				s.InlineVolumeSpec.Reset()
				if err := s.InlineVolumeSpec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "persistentVolumeName":
			if err := func() error {
				s.PersistentVolumeName.Reset()
				if err := s.PersistentVolumeName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("attacher")
	j.WriteString(s.Attacher)
	more.More()
	j.WriteObjectField("nodeName")
	j.WriteString(s.NodeName)
	more.More()
	j.WriteObjectField("source")
	s.Source.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentSpec from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachmentSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "attacher":
			if err := func() error {
				s.Attacher = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeName":
			if err := func() error {
				s.NodeName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "source":
			if err := func() error {
				if err := s.Source.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AttachError.Set {
		more.More()
		j.WriteObjectField("attachError")
		s.AttachError.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("attached")
	j.WriteBool(s.Attached)
	if s.AttachmentMetadata != nil {
		more.More()
		j.WriteObjectField("attachmentMetadata")
		s.AttachmentMetadata.WriteJSON(j)
	}
	if s.DetachError.Set {
		more.More()
		j.WriteObjectField("detachError")
		s.DetachError.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentStatus from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachmentStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "attachError":
			if err := func() error {
				s.AttachError.Reset()
				if err := s.AttachError.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "attached":
			if err := func() error {
				s.Attached = bool(i.Bool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "attachmentMetadata":
			if err := func() error {
				s.AttachmentMetadata = nil
				var elem IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.AttachmentMetadata = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "detachError":
			if err := func() error {
				s.DetachError.Reset()
				if err := s.DetachError.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeError) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Time.Set {
		more.More()
		j.WriteObjectField("time")
		s.Time.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeError from json stream.
func (s *IoK8sAPIStorageV1VolumeError) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeError to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "time":
			if err := func() error {
				s.Time.Reset()
				if err := s.Time.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeNodeResources) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Count.Set {
		more.More()
		j.WriteObjectField("count")
		s.Count.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeNodeResources from json stream.
func (s *IoK8sAPIStorageV1VolumeNodeResources) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeNodeResources to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Capacity.Set {
		more.More()
		j.WriteObjectField("capacity")
		s.Capacity.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.MaximumVolumeSize.Set {
		more.More()
		j.WriteObjectField("maximumVolumeSize")
		s.MaximumVolumeSize.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.NodeTopology.Set {
		more.More()
		j.WriteObjectField("nodeTopology")
		s.NodeTopology.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("storageClassName")
	j.WriteString(s.StorageClassName)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1alpha1CSIStorageCapacity from json stream.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1alpha1CSIStorageCapacity to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "capacity":
			if err := func() error {
				s.Capacity.Reset()
				if err := s.Capacity.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "maximumVolumeSize":
			if err := func() error {
				s.MaximumVolumeSize.Reset()
				if err := s.MaximumVolumeSize.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeTopology":
			if err := func() error {
				s.NodeTopology.Reset()
				if err := s.NodeTopology.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storageClassName":
			if err := func() error {
				s.StorageClassName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacityList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1alpha1CSIStorageCapacityList from json stream.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1alpha1CSIStorageCapacityList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIStorageV1alpha1CSIStorageCapacity
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Capacity.Set {
		more.More()
		j.WriteObjectField("capacity")
		s.Capacity.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.MaximumVolumeSize.Set {
		more.More()
		j.WriteObjectField("maximumVolumeSize")
		s.MaximumVolumeSize.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.NodeTopology.Set {
		more.More()
		j.WriteObjectField("nodeTopology")
		s.NodeTopology.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("storageClassName")
	j.WriteString(s.StorageClassName)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1beta1CSIStorageCapacity from json stream.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1beta1CSIStorageCapacity to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "capacity":
			if err := func() error {
				s.Capacity.Reset()
				if err := s.Capacity.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "maximumVolumeSize":
			if err := func() error {
				s.MaximumVolumeSize.Reset()
				if err := s.MaximumVolumeSize.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nodeTopology":
			if err := func() error {
				s.NodeTopology.Reset()
				if err := s.NodeTopology.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storageClassName":
			if err := func() error {
				s.StorageClassName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacityList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1beta1CSIStorageCapacityList from json stream.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1beta1CSIStorageCapacityList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sAPIStorageV1beta1CSIStorageCapacity
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.Format.Set {
		more.More()
		j.WriteObjectField("format")
		s.Format.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("jsonPath")
	j.WriteString(s.JsonPath)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Priority.Set {
		more.More()
		j.WriteObjectField("priority")
		s.Priority.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "format":
			if err := func() error {
				s.Format.Reset()
				if err := s.Format.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "jsonPath":
			if err := func() error {
				s.JsonPath = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "priority":
			if err := func() error {
				s.Priority.Reset()
				if err := s.Priority.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("strategy")
	j.WriteString(s.Strategy)
	if s.Webhook.Set {
		more.More()
		j.WriteObjectField("webhook")
		s.Webhook.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "strategy":
			if err := func() error {
				s.Strategy = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "webhook":
			if err := func() error {
				s.Webhook.Reset()
				if err := s.Webhook.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Categories != nil {
		more.More()
		j.WriteObjectField("categories")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Categories {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	if s.ListKind.Set {
		more.More()
		j.WriteObjectField("listKind")
		s.ListKind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("plural")
	j.WriteString(s.Plural)
	if s.ShortNames != nil {
		more.More()
		j.WriteObjectField("shortNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ShortNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Singular.Set {
		more.More()
		j.WriteObjectField("singular")
		s.Singular.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "categories":
			if err := func() error {
				s.Categories = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Categories = append(s.Categories, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "listKind":
			if err := func() error {
				s.ListKind.Reset()
				if err := s.ListKind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "plural":
			if err := func() error {
				s.Plural = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shortNames":
			if err := func() error {
				s.ShortNames = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ShortNames = append(s.ShortNames, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "singular":
			if err := func() error {
				s.Singular.Reset()
				if err := s.Singular.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conversion.Set {
		more.More()
		j.WriteObjectField("conversion")
		s.Conversion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("group")
	j.WriteString(s.Group)
	more.More()
	j.WriteObjectField("names")
	s.Names.WriteJSON(j)
	if s.PreserveUnknownFields.Set {
		more.More()
		j.WriteObjectField("preserveUnknownFields")
		s.PreserveUnknownFields.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scope")
	j.WriteString(s.Scope)
	more.More()
	j.WriteObjectField("versions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Versions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conversion":
			if err := func() error {
				s.Conversion.Reset()
				if err := s.Conversion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "group":
			if err := func() error {
				s.Group = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "names":
			if err := func() error {
				if err := s.Names.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "preserveUnknownFields":
			if err := func() error {
				s.PreserveUnknownFields.Reset()
				if err := s.PreserveUnknownFields.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scope":
			if err := func() error {
				s.Scope = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "versions":
			if err := func() error {
				s.Versions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Versions = append(s.Versions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AcceptedNames.Set {
		more.More()
		j.WriteObjectField("acceptedNames")
		s.AcceptedNames.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.StoredVersions != nil {
		more.More()
		j.WriteObjectField("storedVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.StoredVersions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "acceptedNames":
			if err := func() error {
				s.AcceptedNames.Reset()
				if err := s.AcceptedNames.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storedVersions":
			if err := func() error {
				s.StoredVersions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.StoredVersions = append(s.StoredVersions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AdditionalPrinterColumns != nil {
		more.More()
		j.WriteObjectField("additionalPrinterColumns")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AdditionalPrinterColumns {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Deprecated.Set {
		more.More()
		j.WriteObjectField("deprecated")
		s.Deprecated.WriteJSON(j)
	}
	if s.DeprecationWarning.Set {
		more.More()
		j.WriteObjectField("deprecationWarning")
		s.DeprecationWarning.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Schema.Set {
		more.More()
		j.WriteObjectField("schema")
		s.Schema.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("served")
	j.WriteBool(s.Served)
	more.More()
	j.WriteObjectField("storage")
	j.WriteBool(s.Storage)
	if s.Subresources.Set {
		more.More()
		j.WriteObjectField("subresources")
		s.Subresources.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "additionalPrinterColumns":
			if err := func() error {
				s.AdditionalPrinterColumns = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AdditionalPrinterColumns = append(s.AdditionalPrinterColumns, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deprecated":
			if err := func() error {
				s.Deprecated.Reset()
				if err := s.Deprecated.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deprecationWarning":
			if err := func() error {
				s.DeprecationWarning.Reset()
				if err := s.DeprecationWarning.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "schema":
			if err := func() error {
				s.Schema.Reset()
				if err := s.Schema.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "served":
			if err := func() error {
				s.Served = bool(i.Bool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storage":
			if err := func() error {
				s.Storage = bool(i.Bool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "subresources":
			if err := func() error {
				s.Subresources.Reset()
				if err := s.Subresources.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LabelSelectorPath.Set {
		more.More()
		j.WriteObjectField("labelSelectorPath")
		s.LabelSelectorPath.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("specReplicasPath")
	j.WriteString(s.SpecReplicasPath)
	more.More()
	j.WriteObjectField("statusReplicasPath")
	j.WriteString(s.StatusReplicasPath)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "labelSelectorPath":
			if err := func() error {
				s.LabelSelectorPath.Reset()
				if err := s.LabelSelectorPath.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "specReplicasPath":
			if err := func() error {
				s.SpecReplicasPath = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "statusReplicasPath":
			if err := func() error {
				s.StatusReplicasPath = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Scale.Set {
		more.More()
		j.WriteObjectField("scale")
		s.Scale.WriteJSON(j)
	}
	if s.Status != nil {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "scale":
			if err := func() error {
				s.Scale.Reset()
				if err := s.Scale.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = nil
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Status = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.OpenAPIV3Schema.Set {
		more.More()
		j.WriteObjectField("openAPIV3Schema")
		s.OpenAPIV3Schema.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "openAPIV3Schema":
			if err := func() error {
				s.OpenAPIV3Schema.Reset()
				if err := s.OpenAPIV3Schema.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ref.Set {
		more.More()
		j.WriteObjectField("$ref")
		s.Ref.WriteJSON(j)
	}
	if s.Schema.Set {
		more.More()
		j.WriteObjectField("$schema")
		s.Schema.WriteJSON(j)
	}
	if s.AdditionalItems != nil {
		more.More()
		j.WriteObjectField("additionalItems")
		s.AdditionalItems.WriteJSON(j)
	}
	if s.AdditionalProperties != nil {
		more.More()
		j.WriteObjectField("additionalProperties")
		s.AdditionalProperties.WriteJSON(j)
	}
	if s.AllOf != nil {
		more.More()
		j.WriteObjectField("allOf")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllOf {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AnyOf != nil {
		more.More()
		j.WriteObjectField("anyOf")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AnyOf {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Default != nil {
		more.More()
		j.WriteObjectField("default")
		s.Default.WriteJSON(j)
	}
	if s.Definitions != nil {
		more.More()
		j.WriteObjectField("definitions")
		s.Definitions.WriteJSON(j)
	}
	if s.Dependencies != nil {
		more.More()
		j.WriteObjectField("dependencies")
		s.Dependencies.WriteJSON(j)
	}
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.Enum != nil {
		more.More()
		j.WriteObjectField("enum")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Enum {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Example != nil {
		more.More()
		j.WriteObjectField("example")
		s.Example.WriteJSON(j)
	}
	if s.ExclusiveMaximum.Set {
		more.More()
		j.WriteObjectField("exclusiveMaximum")
		s.ExclusiveMaximum.WriteJSON(j)
	}
	if s.ExclusiveMinimum.Set {
		more.More()
		j.WriteObjectField("exclusiveMinimum")
		s.ExclusiveMinimum.WriteJSON(j)
	}
	if s.ExternalDocs.Set {
		more.More()
		j.WriteObjectField("externalDocs")
		s.ExternalDocs.WriteJSON(j)
	}
	if s.Format.Set {
		more.More()
		j.WriteObjectField("format")
		s.Format.WriteJSON(j)
	}
	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		s.Items.WriteJSON(j)
	}
	if s.MaxItems.Set {
		more.More()
		j.WriteObjectField("maxItems")
		s.MaxItems.WriteJSON(j)
	}
	if s.MaxLength.Set {
		more.More()
		j.WriteObjectField("maxLength")
		s.MaxLength.WriteJSON(j)
	}
	if s.MaxProperties.Set {
		more.More()
		j.WriteObjectField("maxProperties")
		s.MaxProperties.WriteJSON(j)
	}
	if s.Maximum.Set {
		more.More()
		j.WriteObjectField("maximum")
		s.Maximum.WriteJSON(j)
	}
	if s.MinItems.Set {
		more.More()
		j.WriteObjectField("minItems")
		s.MinItems.WriteJSON(j)
	}
	if s.MinLength.Set {
		more.More()
		j.WriteObjectField("minLength")
		s.MinLength.WriteJSON(j)
	}
	if s.MinProperties.Set {
		more.More()
		j.WriteObjectField("minProperties")
		s.MinProperties.WriteJSON(j)
	}
	if s.Minimum.Set {
		more.More()
		j.WriteObjectField("minimum")
		s.Minimum.WriteJSON(j)
	}
	if s.MultipleOf.Set {
		more.More()
		j.WriteObjectField("multipleOf")
		s.MultipleOf.WriteJSON(j)
	}
	if s.Not != nil {
		more.More()
		j.WriteObjectField("not")
		s.Not.WriteJSON(j)
	}
	if s.Nullable.Set {
		more.More()
		j.WriteObjectField("nullable")
		s.Nullable.WriteJSON(j)
	}
	if s.OneOf != nil {
		more.More()
		j.WriteObjectField("oneOf")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.OneOf {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Pattern.Set {
		more.More()
		j.WriteObjectField("pattern")
		s.Pattern.WriteJSON(j)
	}
	if s.PatternProperties != nil {
		more.More()
		j.WriteObjectField("patternProperties")
		s.PatternProperties.WriteJSON(j)
	}
	if s.Properties != nil {
		more.More()
		j.WriteObjectField("properties")
		s.Properties.WriteJSON(j)
	}
	if s.Required != nil {
		more.More()
		j.WriteObjectField("required")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Required {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	if s.UniqueItems.Set {
		more.More()
		j.WriteObjectField("uniqueItems")
		s.UniqueItems.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusEmbeddedMinusResource.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-embedded-resource")
		s.XMinusKubernetesMinusEmbeddedMinusResource.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusIntMinusOrMinusString.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-int-or-string")
		s.XMinusKubernetesMinusIntMinusOrMinusString.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusListMinusMapMinusKeys != nil {
		more.More()
		j.WriteObjectField("x-kubernetes-list-map-keys")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.XMinusKubernetesMinusListMinusMapMinusKeys {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.XMinusKubernetesMinusListMinusType.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-list-type")
		s.XMinusKubernetesMinusListMinusType.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusMapMinusType.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-map-type")
		s.XMinusKubernetesMinusMapMinusType.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-preserve-unknown-fields")
		s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "$ref":
			if err := func() error {
				s.Ref.Reset()
				if err := s.Ref.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "$schema":
			if err := func() error {
				s.Schema.Reset()
				if err := s.Schema.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "additionalItems":
			if err := func() error {
				s.AdditionalItems = nil
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.AdditionalItems = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "additionalProperties":
			if err := func() error {
				s.AdditionalProperties = nil
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.AdditionalProperties = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "allOf":
			if err := func() error {
				s.AllOf = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AllOf = append(s.AllOf, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "anyOf":
			if err := func() error {
				s.AnyOf = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.AnyOf = append(s.AnyOf, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "default":
			if err := func() error {
				s.Default = nil
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Default = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "definitions":
			if err := func() error {
				s.Definitions = nil
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Definitions = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "dependencies":
			if err := func() error {
				s.Dependencies = nil
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Dependencies = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "enum":
			if err := func() error {
				s.Enum = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Enum = append(s.Enum, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "example":
			if err := func() error {
				s.Example = nil
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Example = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "exclusiveMaximum":
			if err := func() error {
				s.ExclusiveMaximum.Reset()
				if err := s.ExclusiveMaximum.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "exclusiveMinimum":
			if err := func() error {
				s.ExclusiveMinimum.Reset()
				if err := s.ExclusiveMinimum.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "externalDocs":
			if err := func() error {
				s.ExternalDocs.Reset()
				if err := s.ExternalDocs.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "format":
			if err := func() error {
				s.Format.Reset()
				if err := s.Format.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Items = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "maxItems":
			if err := func() error {
				s.MaxItems.Reset()
				if err := s.MaxItems.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "maxLength":
			if err := func() error {
				s.MaxLength.Reset()
				if err := s.MaxLength.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "maxProperties":
			if err := func() error {
				s.MaxProperties.Reset()
				if err := s.MaxProperties.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "maximum":
			if err := func() error {
				s.Maximum.Reset()
				if err := s.Maximum.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "minItems":
			if err := func() error {
				s.MinItems.Reset()
				if err := s.MinItems.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "minLength":
			if err := func() error {
				s.MinLength.Reset()
				if err := s.MinLength.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "minProperties":
			if err := func() error {
				s.MinProperties.Reset()
				if err := s.MinProperties.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "minimum":
			if err := func() error {
				s.Minimum.Reset()
				if err := s.Minimum.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "multipleOf":
			if err := func() error {
				s.MultipleOf.Reset()
				if err := s.MultipleOf.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "not":
			if err := func() error {
				s.Not = nil
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Not = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "nullable":
			if err := func() error {
				s.Nullable.Reset()
				if err := s.Nullable.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "oneOf":
			if err := func() error {
				s.OneOf = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.OneOf = append(s.OneOf, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pattern":
			if err := func() error {
				s.Pattern.Reset()
				if err := s.Pattern.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "patternProperties":
			if err := func() error {
				s.PatternProperties = nil
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.PatternProperties = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "properties":
			if err := func() error {
				s.Properties = nil
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Properties = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "required":
			if err := func() error {
				s.Required = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Required = append(s.Required, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "uniqueItems":
			if err := func() error {
				s.UniqueItems.Reset()
				if err := s.UniqueItems.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "x-kubernetes-embedded-resource":
			if err := func() error {
				s.XMinusKubernetesMinusEmbeddedMinusResource.Reset()
				if err := s.XMinusKubernetesMinusEmbeddedMinusResource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "x-kubernetes-int-or-string":
			if err := func() error {
				s.XMinusKubernetesMinusIntMinusOrMinusString.Reset()
				if err := s.XMinusKubernetesMinusIntMinusOrMinusString.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "x-kubernetes-list-map-keys":
			if err := func() error {
				s.XMinusKubernetesMinusListMinusMapMinusKeys = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.XMinusKubernetesMinusListMinusMapMinusKeys = append(s.XMinusKubernetesMinusListMinusMapMinusKeys, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "x-kubernetes-list-type":
			if err := func() error {
				s.XMinusKubernetesMinusListMinusType.Reset()
				if err := s.XMinusKubernetesMinusListMinusType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "x-kubernetes-map-type":
			if err := func() error {
				s.XMinusKubernetesMinusMapMinusType.Reset()
				if err := s.XMinusKubernetesMinusMapMinusType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "x-kubernetes-preserve-unknown-fields":
			if err := func() error {
				s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.Reset()
				if err := s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "path":
			if err := func() error {
				s.Path.Reset()
				if err := s.Path.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CaBundle != nil {
		more.More()
		j.WriteObjectField("caBundle")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CaBundle {
			_ = elem // Unsupported kind "primitive".
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "caBundle":
			if err := func() error {
				s.CaBundle = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem byte
					if err := func() error {
						if err := fmt.Errorf(`decoding of "byte" (primitive) is not implemented`); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.CaBundle = append(s.CaBundle, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "service":
			if err := func() error {
				s.Service.Reset()
				if err := s.Service.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ClientConfig.Set {
		more.More()
		j.WriteObjectField("clientConfig")
		s.ClientConfig.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("conversionReviewVersions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ConversionReviewVersions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "clientConfig":
			if err := func() error {
				s.ClientConfig.Reset()
				if err := s.ClientConfig.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "conversionReviewVersions":
			if err := func() error {
				s.ConversionReviewVersions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ConversionReviewVersions = append(s.ConversionReviewVersions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (IoK8sApimachineryPkgAPIResourceQuantity) WriteJSON(j *json.Stream)    {}
func (IoK8sApimachineryPkgAPIResourceQuantity) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIGroup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.PreferredVersion.Set {
		more.More()
		j.WriteObjectField("preferredVersion")
		s.PreferredVersion.WriteJSON(j)
	}
	if s.ServerAddressByClientCIDRs != nil {
		more.More()
		j.WriteObjectField("serverAddressByClientCIDRs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ServerAddressByClientCIDRs {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("versions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Versions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIGroup from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1APIGroup to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "preferredVersion":
			if err := func() error {
				s.PreferredVersion.Reset()
				if err := s.PreferredVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "serverAddressByClientCIDRs":
			if err := func() error {
				s.ServerAddressByClientCIDRs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ServerAddressByClientCIDRs = append(s.ServerAddressByClientCIDRs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "versions":
			if err := func() error {
				s.Versions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Versions = append(s.Versions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIGroupList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("groups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Groups {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIGroupList from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1APIGroupList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "groups":
			if err := func() error {
				s.Groups = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1APIGroup
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Groups = append(s.Groups, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIResource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Categories != nil {
		more.More()
		j.WriteObjectField("categories")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Categories {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespaced")
	j.WriteBool(s.Namespaced)
	if s.ShortNames != nil {
		more.More()
		j.WriteObjectField("shortNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ShortNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("singularName")
	j.WriteString(s.SingularName)
	if s.StorageVersionHash.Set {
		more.More()
		j.WriteObjectField("storageVersionHash")
		s.StorageVersionHash.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Version.Set {
		more.More()
		j.WriteObjectField("version")
		s.Version.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIResource from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1APIResource to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "categories":
			if err := func() error {
				s.Categories = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Categories = append(s.Categories, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespaced":
			if err := func() error {
				s.Namespaced = bool(i.Bool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shortNames":
			if err := func() error {
				s.ShortNames = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ShortNames = append(s.ShortNames, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "singularName":
			if err := func() error {
				s.SingularName = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "storageVersionHash":
			if err := func() error {
				s.StorageVersionHash.Reset()
				if err := s.StorageVersionHash.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "verbs":
			if err := func() error {
				s.Verbs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Verbs = append(s.Verbs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIResourceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("groupVersion")
	j.WriteString(s.GroupVersion)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("resources")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Resources {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIResourceList from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1APIResourceList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "groupVersion":
			if err := func() error {
				s.GroupVersion = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resources":
			if err := func() error {
				s.Resources = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1APIResource
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Resources = append(s.Resources, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIVersions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("serverAddressByClientCIDRs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ServerAddressByClientCIDRs {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("versions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Versions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIVersions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1APIVersions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "serverAddressByClientCIDRs":
			if err := func() error {
				s.ServerAddressByClientCIDRs = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ServerAddressByClientCIDRs = append(s.ServerAddressByClientCIDRs, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "versions":
			if err := func() error {
				s.Versions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Versions = append(s.Versions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Condition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("reason")
	j.WriteString(s.Reason)
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Condition from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1Condition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgApisMetaV1Time" (alias) is not implemented`); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "observedGeneration":
			if err := func() error {
				s.ObservedGeneration.Reset()
				if err := s.ObservedGeneration.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1DeleteOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.DryRun != nil {
		more.More()
		j.WriteObjectField("dryRun")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.DryRun {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.GracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("gracePeriodSeconds")
		s.GracePeriodSeconds.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.OrphanDependents.Set {
		more.More()
		j.WriteObjectField("orphanDependents")
		s.OrphanDependents.WriteJSON(j)
	}
	if s.Preconditions.Set {
		more.More()
		j.WriteObjectField("preconditions")
		s.Preconditions.WriteJSON(j)
	}
	if s.PropagationPolicy.Set {
		more.More()
		j.WriteObjectField("propagationPolicy")
		s.PropagationPolicy.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1DeleteOptions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1DeleteOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1DeleteOptions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "dryRun":
			if err := func() error {
				s.DryRun = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.DryRun = append(s.DryRun, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "gracePeriodSeconds":
			if err := func() error {
				s.GracePeriodSeconds.Reset()
				if err := s.GracePeriodSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "orphanDependents":
			if err := func() error {
				s.OrphanDependents.Reset()
				if err := s.OrphanDependents.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "preconditions":
			if err := func() error {
				s.Preconditions.Reset()
				if err := s.Preconditions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "propagationPolicy":
			if err := func() error {
				s.PropagationPolicy.Reset()
				if err := s.PropagationPolicy.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1FieldsV1) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1FieldsV1 from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1FieldsV1) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1FieldsV1 to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("groupVersion")
	j.WriteString(s.GroupVersion)
	more.More()
	j.WriteObjectField("version")
	j.WriteString(s.Version)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "groupVersion":
			if err := func() error {
				s.GroupVersion = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "version":
			if err := func() error {
				s.Version = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchExpressions != nil {
		more.More()
		j.WriteObjectField("matchExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.MatchLabels != nil {
		more.More()
		j.WriteObjectField("matchLabels")
		s.MatchLabels.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1LabelSelector from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1LabelSelector to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "matchExpressions":
			if err := func() error {
				s.MatchExpressions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.MatchExpressions = append(s.MatchExpressions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "matchLabels":
			if err := func() error {
				s.MatchLabels = nil
				var elem IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.MatchLabels = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	more.More()
	j.WriteObjectField("operator")
	j.WriteString(s.Operator)
	if s.Values != nil {
		more.More()
		j.WriteObjectField("values")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Values {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "key":
			if err := func() error {
				s.Key = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "operator":
			if err := func() error {
				s.Operator = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "values":
			if err := func() error {
				s.Values = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Values = append(s.Values, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ListMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Continue.Set {
		more.More()
		j.WriteObjectField("continue")
		s.Continue.WriteJSON(j)
	}
	if s.RemainingItemCount.Set {
		more.More()
		j.WriteObjectField("remainingItemCount")
		s.RemainingItemCount.WriteJSON(j)
	}
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.SelfLink.Set {
		more.More()
		j.WriteObjectField("selfLink")
		s.SelfLink.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ListMeta from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ListMeta to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "continue":
			if err := func() error {
				s.Continue.Reset()
				if err := s.Continue.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "remainingItemCount":
			if err := func() error {
				s.RemainingItemCount.Reset()
				if err := s.RemainingItemCount.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceVersion":
			if err := func() error {
				s.ResourceVersion.Reset()
				if err := s.ResourceVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selfLink":
			if err := func() error {
				s.SelfLink.Reset()
				if err := s.SelfLink.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.FieldsType.Set {
		more.More()
		j.WriteObjectField("fieldsType")
		s.FieldsType.WriteJSON(j)
	}
	if s.FieldsV1 != nil {
		more.More()
		j.WriteObjectField("fieldsV1")
		s.FieldsV1.WriteJSON(j)
	}
	if s.Manager.Set {
		more.More()
		j.WriteObjectField("manager")
		s.Manager.WriteJSON(j)
	}
	if s.Operation.Set {
		more.More()
		j.WriteObjectField("operation")
		s.Operation.WriteJSON(j)
	}
	if s.Subresource.Set {
		more.More()
		j.WriteObjectField("subresource")
		s.Subresource.WriteJSON(j)
	}
	if s.Time.Set {
		more.More()
		j.WriteObjectField("time")
		s.Time.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fieldsType":
			if err := func() error {
				s.FieldsType.Reset()
				if err := s.FieldsType.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "fieldsV1":
			if err := func() error {
				s.FieldsV1 = nil
				var elem IoK8sApimachineryPkgApisMetaV1FieldsV1
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.FieldsV1 = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "manager":
			if err := func() error {
				s.Manager.Reset()
				if err := s.Manager.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "operation":
			if err := func() error {
				s.Operation.Reset()
				if err := s.Operation.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "subresource":
			if err := func() error {
				s.Subresource.Reset()
				if err := s.Subresource.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "time":
			if err := func() error {
				s.Time.Reset()
				if err := s.Time.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (IoK8sApimachineryPkgApisMetaV1MicroTime) WriteJSON(j *json.Stream)    {}
func (IoK8sApimachineryPkgApisMetaV1MicroTime) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ObjectMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Annotations != nil {
		more.More()
		j.WriteObjectField("annotations")
		s.Annotations.WriteJSON(j)
	}
	if s.ClusterName.Set {
		more.More()
		j.WriteObjectField("clusterName")
		s.ClusterName.WriteJSON(j)
	}
	if s.CreationTimestamp.Set {
		more.More()
		j.WriteObjectField("creationTimestamp")
		s.CreationTimestamp.WriteJSON(j)
	}
	if s.DeletionGracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("deletionGracePeriodSeconds")
		s.DeletionGracePeriodSeconds.WriteJSON(j)
	}
	if s.DeletionTimestamp.Set {
		more.More()
		j.WriteObjectField("deletionTimestamp")
		s.DeletionTimestamp.WriteJSON(j)
	}
	if s.Finalizers != nil {
		more.More()
		j.WriteObjectField("finalizers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Finalizers {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.GenerateName.Set {
		more.More()
		j.WriteObjectField("generateName")
		s.GenerateName.WriteJSON(j)
	}
	if s.Generation.Set {
		more.More()
		j.WriteObjectField("generation")
		s.Generation.WriteJSON(j)
	}
	if s.Labels != nil {
		more.More()
		j.WriteObjectField("labels")
		s.Labels.WriteJSON(j)
	}
	if s.ManagedFields != nil {
		more.More()
		j.WriteObjectField("managedFields")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ManagedFields {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.OwnerReferences != nil {
		more.More()
		j.WriteObjectField("ownerReferences")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.OwnerReferences {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.SelfLink.Set {
		more.More()
		j.WriteObjectField("selfLink")
		s.SelfLink.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ObjectMeta from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ObjectMeta to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "annotations":
			if err := func() error {
				s.Annotations = nil
				var elem IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Annotations = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "clusterName":
			if err := func() error {
				s.ClusterName.Reset()
				if err := s.ClusterName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "creationTimestamp":
			if err := func() error {
				s.CreationTimestamp.Reset()
				if err := s.CreationTimestamp.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deletionGracePeriodSeconds":
			if err := func() error {
				s.DeletionGracePeriodSeconds.Reset()
				if err := s.DeletionGracePeriodSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "deletionTimestamp":
			if err := func() error {
				s.DeletionTimestamp.Reset()
				if err := s.DeletionTimestamp.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "finalizers":
			if err := func() error {
				s.Finalizers = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem string
					if err := func() error {
						elem = string(i.Str())
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Finalizers = append(s.Finalizers, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "generateName":
			if err := func() error {
				s.GenerateName.Reset()
				if err := s.GenerateName.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "generation":
			if err := func() error {
				s.Generation.Reset()
				if err := s.Generation.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "labels":
			if err := func() error {
				s.Labels = nil
				var elem IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Labels = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "managedFields":
			if err := func() error {
				s.ManagedFields = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.ManagedFields = append(s.ManagedFields, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace.Reset()
				if err := s.Namespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ownerReferences":
			if err := func() error {
				s.OwnerReferences = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1OwnerReference
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.OwnerReferences = append(s.OwnerReferences, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "resourceVersion":
			if err := func() error {
				s.ResourceVersion.Reset()
				if err := s.ResourceVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "selfLink":
			if err := func() error {
				s.SelfLink.Reset()
				if err := s.SelfLink.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1OwnerReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiVersion")
	j.WriteString(s.ApiVersion)
	if s.BlockOwnerDeletion.Set {
		more.More()
		j.WriteObjectField("blockOwnerDeletion")
		s.BlockOwnerDeletion.WriteJSON(j)
	}
	if s.Controller.Set {
		more.More()
		j.WriteObjectField("controller")
		s.Controller.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("uid")
	j.WriteString(s.UID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1OwnerReference from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1OwnerReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "blockOwnerDeletion":
			if err := func() error {
				s.BlockOwnerDeletion.Reset()
				if err := s.BlockOwnerDeletion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "controller":
			if err := func() error {
				s.Controller.Reset()
				if err := s.Controller.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "uid":
			if err := func() error {
				s.UID = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Preconditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Preconditions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Preconditions) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1Preconditions to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "resourceVersion":
			if err := func() error {
				s.ResourceVersion.Reset()
				if err := s.ResourceVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("clientCIDR")
	j.WriteString(s.ClientCIDR)
	more.More()
	j.WriteObjectField("serverAddress")
	j.WriteString(s.ServerAddress)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "clientCIDR":
			if err := func() error {
				s.ClientCIDR = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "serverAddress":
			if err := func() error {
				s.ServerAddress = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Status) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Code.Set {
		more.More()
		j.WriteObjectField("code")
		s.Code.WriteJSON(j)
	}
	if s.Details.Set {
		more.More()
		j.WriteObjectField("details")
		s.Details.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Status from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Status) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1Status to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "details":
			if err := func() error {
				s.Details.Reset()
				if err := s.Details.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1StatusCause) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Field.Set {
		more.More()
		j.WriteObjectField("field")
		s.Field.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1StatusCause from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1StatusCause) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1StatusCause to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "field":
			if err := func() error {
				s.Field.Reset()
				if err := s.Field.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1StatusDetails) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Causes != nil {
		more.More()
		j.WriteObjectField("causes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Causes {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.RetryAfterSeconds.Set {
		more.More()
		j.WriteObjectField("retryAfterSeconds")
		s.RetryAfterSeconds.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1StatusDetails from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1StatusDetails) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1StatusDetails to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "causes":
			if err := func() error {
				s.Causes = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sApimachineryPkgApisMetaV1StatusCause
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Causes = append(s.Causes, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "retryAfterSeconds":
			if err := func() error {
				s.RetryAfterSeconds.Reset()
				if err := s.RetryAfterSeconds.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (IoK8sApimachineryPkgApisMetaV1Time) WriteJSON(j *json.Stream)    {}
func (IoK8sApimachineryPkgApisMetaV1Time) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1WatchEvent) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("object")
	s.Object.WriteJSON(j)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1WatchEvent from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1WatchEvent) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1WatchEvent to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "object":
			if err := func() error {
				if err := s.Object.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgRuntimeRawExtension) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgRuntimeRawExtension from json stream.
func (s *IoK8sApimachineryPkgRuntimeRawExtension) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgRuntimeRawExtension to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (IoK8sApimachineryPkgUtilIntstrIntOrString) WriteJSON(j *json.Stream)    {}
func (IoK8sApimachineryPkgUtilIntstrIntOrString) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgVersionInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("buildDate")
	j.WriteString(s.BuildDate)
	more.More()
	j.WriteObjectField("compiler")
	j.WriteString(s.Compiler)
	more.More()
	j.WriteObjectField("gitCommit")
	j.WriteString(s.GitCommit)
	more.More()
	j.WriteObjectField("gitTreeState")
	j.WriteString(s.GitTreeState)
	more.More()
	j.WriteObjectField("gitVersion")
	j.WriteString(s.GitVersion)
	more.More()
	j.WriteObjectField("goVersion")
	j.WriteString(s.GoVersion)
	more.More()
	j.WriteObjectField("major")
	j.WriteString(s.Major)
	more.More()
	j.WriteObjectField("minor")
	j.WriteString(s.Minor)
	more.More()
	j.WriteObjectField("platform")
	j.WriteString(s.Platform)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgVersionInfo from json stream.
func (s *IoK8sApimachineryPkgVersionInfo) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgVersionInfo to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "buildDate":
			if err := func() error {
				s.BuildDate = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "compiler":
			if err := func() error {
				s.Compiler = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "gitCommit":
			if err := func() error {
				s.GitCommit = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "gitTreeState":
			if err := func() error {
				s.GitTreeState = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "gitVersion":
			if err := func() error {
				s.GitVersion = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "goVersion":
			if err := func() error {
				s.GoVersion = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "major":
			if err := func() error {
				s.Major = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "minor":
			if err := func() error {
				s.Minor = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "platform":
			if err := func() error {
				s.Platform = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIService from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1APIService to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "spec":
			if err := func() error {
				s.Spec.Reset()
				if err := s.Spec.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "lastTransitionTime":
			if err := func() error {
				s.LastTransitionTime.Reset()
				if err := s.LastTransitionTime.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "status":
			if err := func() error {
				s.Status = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.Str())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "apiVersion":
			if err := func() error {
				s.ApiVersion.Reset()
				if err := s.ApiVersion.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "items":
			if err := func() error {
				s.Items = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sKubeAggregatorPkgApisApiregistrationV1APIService
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Items = append(s.Items, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "kind":
			if err := func() error {
				s.Kind.Reset()
				if err := s.Kind.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "metadata":
			if err := func() error {
				s.Metadata.Reset()
				if err := s.Metadata.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CaBundle != nil {
		more.More()
		j.WriteObjectField("caBundle")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CaBundle {
			_ = elem // Unsupported kind "primitive".
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("groupPriorityMinimum")
	j.WriteInt32(s.GroupPriorityMinimum)
	if s.InsecureSkipTLSVerify.Set {
		more.More()
		j.WriteObjectField("insecureSkipTLSVerify")
		s.InsecureSkipTLSVerify.WriteJSON(j)
	}
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	if s.Version.Set {
		more.More()
		j.WriteObjectField("version")
		s.Version.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("versionPriority")
	j.WriteInt32(s.VersionPriority)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "caBundle":
			if err := func() error {
				s.CaBundle = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem byte
					if err := func() error {
						if err := fmt.Errorf(`decoding of "byte" (primitive) is not implemented`); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.CaBundle = append(s.CaBundle, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "groupPriorityMinimum":
			if err := func() error {
				s.GroupPriorityMinimum = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "insecureSkipTLSVerify":
			if err := func() error {
				s.InsecureSkipTLSVerify.Reset()
				if err := s.InsecureSkipTLSVerify.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "service":
			if err := func() error {
				s.Service.Reset()
				if err := s.Service.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "versionPriority":
			if err := func() error {
				s.VersionPriority = int32(i.Int32())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "conditions":
			if err := func() error {
				s.Conditions = nil
				var retErr error
				i.Array(func(i *json.Iter) bool {
					var elem IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition
					if err := func() error {
						if err := elem.ReadJSON(i); err != nil {
							return err
						}
						return i.Error
					}(); err != nil {
						retErr = err
						return false
					}
					s.Conditions = append(s.Conditions, elem)
					return true
				})
				if retErr != nil {
					return retErr
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "namespace":
			if err := func() error {
				s.Namespace.Reset()
				if err := s.Namespace.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "port":
			if err := func() error {
				s.Port.Reset()
				if err := s.Port.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAdmissionregistrationV1MutatingWebhookConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAdmissionregistrationV1MutatingWebhookConfigurationResUnauthorized from json stream.
func (s *ListAdmissionregistrationV1MutatingWebhookConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListAdmissionregistrationV1MutatingWebhookConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAdmissionregistrationV1ValidatingWebhookConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAdmissionregistrationV1ValidatingWebhookConfigurationResUnauthorized from json stream.
func (s *ListAdmissionregistrationV1ValidatingWebhookConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListAdmissionregistrationV1ValidatingWebhookConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListApiextensionsV1CustomResourceDefinitionApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListApiextensionsV1CustomResourceDefinitionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiextensionsV1CustomResourceDefinitionApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListApiextensionsV1CustomResourceDefinitionApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiextensionsV1CustomResourceDefinitionApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListApiextensionsV1CustomResourceDefinitionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListApiextensionsV1CustomResourceDefinitionResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListApiextensionsV1CustomResourceDefinitionResUnauthorized from json stream.
func (s *ListApiextensionsV1CustomResourceDefinitionResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListApiextensionsV1CustomResourceDefinitionResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListApiregistrationV1APIServiceApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListApiregistrationV1APIServiceApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListApiregistrationV1APIServiceApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListApiregistrationV1APIServiceApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiregistrationV1APIServiceApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListApiregistrationV1APIServiceApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiregistrationV1APIServiceApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListApiregistrationV1APIServiceApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListApiregistrationV1APIServiceResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListApiregistrationV1APIServiceResUnauthorized from json stream.
func (s *ListApiregistrationV1APIServiceResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListApiregistrationV1APIServiceResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ControllerRevisionForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1ControllerRevisionForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ControllerRevisionForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1ControllerRevisionForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ControllerRevisionForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1ControllerRevisionForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAppsV1ControllerRevisionForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAppsV1ControllerRevisionForAllNamespacesResUnauthorized from json stream.
func (s *ListAppsV1ControllerRevisionForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListAppsV1ControllerRevisionForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListAppsV1DaemonSetForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1DaemonSetForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListAppsV1DaemonSetForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1DaemonSetForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DaemonSetForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1DaemonSetForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DaemonSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1DaemonSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DaemonSetForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1DaemonSetForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListAppsV1DaemonSetForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAppsV1DaemonSetForAllNamespacesResUnauthorized from json stream.
func (s *ListAppsV1DaemonSetForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListAppsV1DaemonSetForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListAppsV1DeploymentForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1DeploymentForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListAppsV1DeploymentForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1DeploymentForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DeploymentForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1DeploymentForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DeploymentForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1DeploymentForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DeploymentForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1DeploymentForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListAppsV1DeploymentForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAppsV1DeploymentForAllNamespacesResUnauthorized from json stream.
func (s *ListAppsV1DeploymentForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListAppsV1DeploymentForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListAppsV1ReplicaSetForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1ReplicaSetForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListAppsV1ReplicaSetForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1ReplicaSetForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ReplicaSetForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1ReplicaSetForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ReplicaSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1ReplicaSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ReplicaSetForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1ReplicaSetForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListAppsV1ReplicaSetForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAppsV1ReplicaSetForAllNamespacesResUnauthorized from json stream.
func (s *ListAppsV1ReplicaSetForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListAppsV1ReplicaSetForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListAppsV1StatefulSetForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1StatefulSetForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1StatefulSetForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1StatefulSetForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1StatefulSetForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1StatefulSetForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1StatefulSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1StatefulSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1StatefulSetForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1StatefulSetForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAppsV1StatefulSetForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAppsV1StatefulSetForAllNamespacesResUnauthorized from json stream.
func (s *ListAppsV1StatefulSetForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListAppsV1StatefulSetForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResUnauthorized from json stream.
func (s *ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResUnauthorized from json stream.
func (s *ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResUnauthorized from json stream.
func (s *ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListBatchV1CronJobForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListBatchV1CronJobForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListBatchV1CronJobForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListBatchV1CronJobForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1CronJobForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1CronJobForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1CronJobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1CronJobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1CronJobForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListBatchV1CronJobForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListBatchV1CronJobForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListBatchV1CronJobForAllNamespacesResUnauthorized from json stream.
func (s *ListBatchV1CronJobForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListBatchV1CronJobForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListBatchV1JobForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListBatchV1JobForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListBatchV1JobForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListBatchV1JobForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1JobForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListBatchV1JobForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1JobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1JobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1JobForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListBatchV1JobForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListBatchV1JobForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListBatchV1JobForAllNamespacesResUnauthorized from json stream.
func (s *ListBatchV1JobForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListBatchV1JobForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListBatchV1beta1CronJobForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListBatchV1beta1CronJobForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1beta1CronJobForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1beta1CronJobForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1beta1CronJobForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1beta1CronJobForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1beta1CronJobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1beta1CronJobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1beta1CronJobForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListBatchV1beta1CronJobForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListBatchV1beta1CronJobForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListBatchV1beta1CronJobForAllNamespacesResUnauthorized from json stream.
func (s *ListBatchV1beta1CronJobForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListBatchV1beta1CronJobForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCertificatesV1CertificateSigningRequestApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCertificatesV1CertificateSigningRequestApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCertificatesV1CertificateSigningRequestApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCertificatesV1CertificateSigningRequestApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCertificatesV1CertificateSigningRequestApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCertificatesV1CertificateSigningRequestApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCertificatesV1CertificateSigningRequestResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCertificatesV1CertificateSigningRequestResUnauthorized from json stream.
func (s *ListCertificatesV1CertificateSigningRequestResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCertificatesV1CertificateSigningRequestResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoordinationV1LeaseForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoordinationV1LeaseForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoordinationV1LeaseForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoordinationV1LeaseForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoordinationV1LeaseForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoordinationV1LeaseForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoordinationV1LeaseForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoordinationV1LeaseForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoordinationV1LeaseForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoordinationV1LeaseForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoordinationV1LeaseForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoordinationV1LeaseForAllNamespacesResUnauthorized from json stream.
func (s *ListCoordinationV1LeaseForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoordinationV1LeaseForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1ComponentStatusApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ComponentStatusApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1ComponentStatusApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ComponentStatusApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1ComponentStatusApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ComponentStatusApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ComponentStatusApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ComponentStatusApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ComponentStatusApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ComponentStatusApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ComponentStatusResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ComponentStatusResUnauthorized from json stream.
func (s *ListCoreV1ComponentStatusResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1ComponentStatusResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1ConfigMapForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ConfigMapForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1ConfigMapForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ConfigMapForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ConfigMapForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ConfigMapForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ConfigMapForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ConfigMapForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ConfigMapForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ConfigMapForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ConfigMapForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ConfigMapForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1ConfigMapForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1ConfigMapForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1EndpointsForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1EndpointsForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1EndpointsForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1EndpointsForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EndpointsForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1EndpointsForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EndpointsForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1EndpointsForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EndpointsForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1EndpointsForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1EndpointsForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1EndpointsForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1EndpointsForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1EndpointsForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1EventForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1EventForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1EventForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1EventForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EventForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1EventForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EventForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1EventForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1EventForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1EventForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1EventForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1EventForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1LimitRangeForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1LimitRangeForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1LimitRangeForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1LimitRangeForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1LimitRangeForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1LimitRangeForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1LimitRangeForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1LimitRangeForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1LimitRangeForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1LimitRangeForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1LimitRangeForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1LimitRangeForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1LimitRangeForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1LimitRangeForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1NamespaceApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NamespaceApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NamespaceApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NamespaceApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NamespaceApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NamespaceApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NamespaceApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1NamespaceApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1NamespaceApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NamespaceApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1NamespaceResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1NamespaceResUnauthorized from json stream.
func (s *ListCoreV1NamespaceResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1NamespaceResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1NodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NodeApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NodeApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NodeApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1NodeApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1NodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1NodeResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1NodeResUnauthorized from json stream.
func (s *ListCoreV1NodeResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1NodeResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1PersistentVolumeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1PersistentVolumeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1PersistentVolumeApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PersistentVolumeApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PersistentVolumeApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1PersistentVolumeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1PersistentVolumeClaimForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1PersistentVolumeClaimForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1PersistentVolumeClaimForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1PersistentVolumeClaimForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1PersistentVolumeResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1PersistentVolumeResUnauthorized from json stream.
func (s *ListCoreV1PersistentVolumeResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1PersistentVolumeResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1PodForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1PodForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1PodForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PodForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PodForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PodForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1PodForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1PodForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1PodForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1PodForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1PodForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1PodTemplateForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PodTemplateForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodTemplateForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PodTemplateForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodTemplateForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PodTemplateForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodTemplateForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PodTemplateForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodTemplateForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PodTemplateForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1PodTemplateForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1PodTemplateForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1PodTemplateForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1PodTemplateForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ReplicationControllerForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ReplicationControllerForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ReplicationControllerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ReplicationControllerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ReplicationControllerForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ReplicationControllerForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ReplicationControllerForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ReplicationControllerForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1ReplicationControllerForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1ReplicationControllerForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ResourceQuotaForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ResourceQuotaForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ResourceQuotaForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ResourceQuotaForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ResourceQuotaForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ResourceQuotaForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ResourceQuotaForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ResourceQuotaForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1ResourceQuotaForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1ResourceQuotaForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1SecretForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1SecretForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1SecretForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1SecretForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1SecretForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1SecretForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1SecretForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1SecretForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1SecretForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1SecretForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1SecretForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1SecretForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1SecretForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1SecretForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1ServiceAccountForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ServiceAccountForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceAccountForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ServiceAccountForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceAccountForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ServiceAccountForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceAccountForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ServiceAccountForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceAccountForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ServiceAccountForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ServiceAccountForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ServiceAccountForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1ServiceAccountForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1ServiceAccountForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListCoreV1ServiceForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ServiceForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1ServiceForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ServiceForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ServiceForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ServiceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ServiceForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ServiceForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ServiceForAllNamespacesResUnauthorized from json stream.
func (s *ListCoreV1ServiceForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListCoreV1ServiceForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListDiscoveryV1EndpointSliceForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListDiscoveryV1EndpointSliceForAllNamespacesResUnauthorized from json stream.
func (s *ListDiscoveryV1EndpointSliceForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListDiscoveryV1EndpointSliceForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListDiscoveryV1beta1EndpointSliceForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListDiscoveryV1beta1EndpointSliceForAllNamespacesResUnauthorized from json stream.
func (s *ListDiscoveryV1beta1EndpointSliceForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListDiscoveryV1beta1EndpointSliceForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListEventsV1EventForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListEventsV1EventForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListEventsV1EventForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListEventsV1EventForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1EventForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListEventsV1EventForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListEventsV1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1EventForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListEventsV1EventForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListEventsV1EventForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListEventsV1EventForAllNamespacesResUnauthorized from json stream.
func (s *ListEventsV1EventForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListEventsV1EventForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListEventsV1beta1EventForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListEventsV1beta1EventForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1beta1EventForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListEventsV1beta1EventForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1beta1EventForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListEventsV1beta1EventForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1beta1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListEventsV1beta1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1beta1EventForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListEventsV1beta1EventForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListEventsV1beta1EventForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListEventsV1beta1EventForAllNamespacesResUnauthorized from json stream.
func (s *ListEventsV1beta1EventForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListEventsV1beta1EventForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListFlowcontrolApiserverV1beta1FlowSchemaResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListFlowcontrolApiserverV1beta1FlowSchemaResUnauthorized from json stream.
func (s *ListFlowcontrolApiserverV1beta1FlowSchemaResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListFlowcontrolApiserverV1beta1FlowSchemaResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResUnauthorized from json stream.
func (s *ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListFlowcontrolApiserverV1beta2FlowSchemaResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListFlowcontrolApiserverV1beta2FlowSchemaResUnauthorized from json stream.
func (s *ListFlowcontrolApiserverV1beta2FlowSchemaResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListFlowcontrolApiserverV1beta2FlowSchemaResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResUnauthorized from json stream.
func (s *ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListInternalApiserverV1alpha1StorageVersionApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListInternalApiserverV1alpha1StorageVersionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListInternalApiserverV1alpha1StorageVersionApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListInternalApiserverV1alpha1StorageVersionApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListInternalApiserverV1alpha1StorageVersionApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListInternalApiserverV1alpha1StorageVersionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListInternalApiserverV1alpha1StorageVersionResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListInternalApiserverV1alpha1StorageVersionResUnauthorized from json stream.
func (s *ListInternalApiserverV1alpha1StorageVersionResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListInternalApiserverV1alpha1StorageVersionResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListNetworkingV1IngressClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListNetworkingV1IngressClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListNetworkingV1IngressClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1IngressClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1IngressClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1IngressClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListNetworkingV1IngressClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListNetworkingV1IngressClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNetworkingV1IngressClassResUnauthorized from json stream.
func (s *ListNetworkingV1IngressClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListNetworkingV1IngressClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListNetworkingV1IngressForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1IngressForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1IngressForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1IngressForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1IngressForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1IngressForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListNetworkingV1IngressForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNetworkingV1IngressForAllNamespacesResUnauthorized from json stream.
func (s *ListNetworkingV1IngressForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListNetworkingV1IngressForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListNetworkingV1NetworkPolicyForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNetworkingV1NetworkPolicyForAllNamespacesResUnauthorized from json stream.
func (s *ListNetworkingV1NetworkPolicyForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListNetworkingV1NetworkPolicyForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListNodeV1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListNodeV1RuntimeClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1RuntimeClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListNodeV1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListNodeV1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNodeV1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListNodeV1RuntimeClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNodeV1RuntimeClassResUnauthorized from json stream.
func (s *ListNodeV1RuntimeClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListNodeV1RuntimeClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListNodeV1alpha1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1alpha1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListNodeV1alpha1RuntimeClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListNodeV1alpha1RuntimeClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1alpha1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1alpha1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListNodeV1alpha1RuntimeClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNodeV1alpha1RuntimeClassResUnauthorized from json stream.
func (s *ListNodeV1alpha1RuntimeClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListNodeV1alpha1RuntimeClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListNodeV1beta1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1beta1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListNodeV1beta1RuntimeClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListNodeV1beta1RuntimeClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1beta1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1beta1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListNodeV1beta1RuntimeClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNodeV1beta1RuntimeClassResUnauthorized from json stream.
func (s *ListNodeV1beta1RuntimeClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListNodeV1beta1RuntimeClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListPolicyV1PodDisruptionBudgetForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListPolicyV1PodDisruptionBudgetForAllNamespacesResUnauthorized from json stream.
func (s *ListPolicyV1PodDisruptionBudgetForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListPolicyV1PodDisruptionBudgetForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResUnauthorized from json stream.
func (s *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListPolicyV1beta1PodSecurityPolicyApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListPolicyV1beta1PodSecurityPolicyApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListPolicyV1beta1PodSecurityPolicyApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListPolicyV1beta1PodSecurityPolicyApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodSecurityPolicyApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListPolicyV1beta1PodSecurityPolicyApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListPolicyV1beta1PodSecurityPolicyResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListPolicyV1beta1PodSecurityPolicyResUnauthorized from json stream.
func (s *ListPolicyV1beta1PodSecurityPolicyResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListPolicyV1beta1PodSecurityPolicyResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListRbacAuthorizationV1ClusterRoleApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListRbacAuthorizationV1ClusterRoleApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListRbacAuthorizationV1ClusterRoleApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListRbacAuthorizationV1ClusterRoleApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListRbacAuthorizationV1ClusterRoleApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

func (ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListRbacAuthorizationV1ClusterRoleBindingResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListRbacAuthorizationV1ClusterRoleBindingResUnauthorized from json stream.
func (s *ListRbacAuthorizationV1ClusterRoleBindingResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListRbacAuthorizationV1ClusterRoleBindingResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ListRbacAuthorizationV1ClusterRoleResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListRbacAuthorizationV1ClusterRoleResUnauthorized from json stream.
func (s *ListRbacAuthorizationV1ClusterRoleResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListRbacAuthorizationV1ClusterRoleResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListRbacAuthorizationV1RoleBindingForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListRbacAuthorizationV1RoleBindingForAllNamespacesResUnauthorized from json stream.
func (s *ListRbacAuthorizationV1RoleBindingForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListRbacAuthorizationV1RoleBindingForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListRbacAuthorizationV1RoleForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListRbacAuthorizationV1RoleForAllNamespacesResUnauthorized from json stream.
func (s *ListRbacAuthorizationV1RoleForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListRbacAuthorizationV1RoleForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListSchedulingV1PriorityClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListSchedulingV1PriorityClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListSchedulingV1PriorityClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListSchedulingV1PriorityClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListSchedulingV1PriorityClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListSchedulingV1PriorityClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListSchedulingV1PriorityClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListSchedulingV1PriorityClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListSchedulingV1PriorityClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListSchedulingV1PriorityClassResUnauthorized from json stream.
func (s *ListSchedulingV1PriorityClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListSchedulingV1PriorityClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListStorageV1CSIDriverApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSIDriverApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1CSIDriverApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSIDriverApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1CSIDriverApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1CSIDriverApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1CSIDriverApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1CSIDriverApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1CSIDriverApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSIDriverApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListStorageV1CSIDriverResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1CSIDriverResUnauthorized from json stream.
func (s *ListStorageV1CSIDriverResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListStorageV1CSIDriverResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListStorageV1CSINodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSINodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1CSINodeApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSINodeApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1CSINodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1CSINodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1CSINodeApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1CSINodeApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1CSINodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSINodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListStorageV1CSINodeResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1CSINodeResUnauthorized from json stream.
func (s *ListStorageV1CSINodeResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListStorageV1CSINodeResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListStorageV1StorageClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1StorageClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1StorageClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1StorageClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1StorageClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1StorageClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1StorageClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1StorageClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1StorageClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1StorageClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListStorageV1StorageClassResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1StorageClassResUnauthorized from json stream.
func (s *ListStorageV1StorageClassResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListStorageV1StorageClassResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListStorageV1VolumeAttachmentApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1VolumeAttachmentApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1VolumeAttachmentApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1VolumeAttachmentApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1VolumeAttachmentApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1VolumeAttachmentApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1VolumeAttachmentApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1VolumeAttachmentApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListStorageV1VolumeAttachmentResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1VolumeAttachmentResUnauthorized from json stream.
func (s *ListStorageV1VolumeAttachmentResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListStorageV1VolumeAttachmentResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListStorageV1alpha1CSIStorageCapacityForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1alpha1CSIStorageCapacityForAllNamespacesResUnauthorized from json stream.
func (s *ListStorageV1alpha1CSIStorageCapacityForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListStorageV1alpha1CSIStorageCapacityForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListStorageV1beta1CSIStorageCapacityForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1beta1CSIStorageCapacityForAllNamespacesResUnauthorized from json stream.
func (s *ListStorageV1beta1CSIStorageCapacityForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode ListStorageV1beta1CSIStorageCapacityForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s LogFileListHandlerResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads LogFileListHandlerResUnauthorized from json stream.
func (s *LogFileListHandlerResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode LogFileListHandlerResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(j *json.Stream) {
	j.WriteBool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptBool to nil`)
	}
	switch i.WhatIsNext() {
	case json.Bool:
		o.Set = true
		o.Value = bool(i.Bool())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptBool", i.WhatIsNext())
	}
}

// WriteJSON writes json value of float64 to json stream.
func (o OptFloat64) WriteJSON(j *json.Stream) {
	j.WriteFloat64(float64(o.Value))
}

// ReadJSON reads json value of float64 from json iterator.
func (o *OptFloat64) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptFloat64 to nil`)
	}
	switch i.WhatIsNext() {
	case json.Number:
		o.Set = true
		o.Value = float64(i.Float64())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptFloat64", i.WhatIsNext())
	}
}

// WriteJSON writes json value of int32 to json stream.
func (o OptInt32) WriteJSON(j *json.Stream) {
	j.WriteInt32(int32(o.Value))
}

// ReadJSON reads json value of int32 from json iterator.
func (o *OptInt32) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptInt32 to nil`)
	}
	switch i.WhatIsNext() {
	case json.Number:
		o.Set = true
		o.Value = int32(i.Int32())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptInt32", i.WhatIsNext())
	}
}

// WriteJSON writes json value of int64 to json stream.
func (o OptInt64) WriteJSON(j *json.Stream) {
	j.WriteInt64(int64(o.Value))
}

// ReadJSON reads json value of int64 from json iterator.
func (o *OptInt64) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptInt64 to nil`)
	}
	switch i.WhatIsNext() {
	case json.Number:
		o.Set = true
		o.Value = int64(i.Int64())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptInt64", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAdmissionregistrationV1ServiceReference to json stream.
func (o OptIoK8sAPIAdmissionregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAdmissionregistrationV1ServiceReference from json iterator.
func (o *OptIoK8sAPIAdmissionregistrationV1ServiceReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAdmissionregistrationV1ServiceReference to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAdmissionregistrationV1ServiceReference", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DaemonSetSpec to json stream.
func (o OptIoK8sAPIAppsV1DaemonSetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DaemonSetSpec from json iterator.
func (o *OptIoK8sAPIAppsV1DaemonSetSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DaemonSetSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DaemonSetSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DaemonSetStatus to json stream.
func (o OptIoK8sAPIAppsV1DaemonSetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DaemonSetStatus from json iterator.
func (o *OptIoK8sAPIAppsV1DaemonSetStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DaemonSetStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DaemonSetStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DaemonSetUpdateStrategy to json stream.
func (o OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DaemonSetUpdateStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DaemonSetUpdateStrategy to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DaemonSetUpdateStrategy", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DeploymentSpec to json stream.
func (o OptIoK8sAPIAppsV1DeploymentSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DeploymentSpec from json iterator.
func (o *OptIoK8sAPIAppsV1DeploymentSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DeploymentSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DeploymentSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DeploymentStatus to json stream.
func (o OptIoK8sAPIAppsV1DeploymentStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DeploymentStatus from json iterator.
func (o *OptIoK8sAPIAppsV1DeploymentStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DeploymentStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DeploymentStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DeploymentStrategy to json stream.
func (o OptIoK8sAPIAppsV1DeploymentStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DeploymentStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1DeploymentStrategy) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DeploymentStrategy to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DeploymentStrategy", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1ReplicaSetSpec to json stream.
func (o OptIoK8sAPIAppsV1ReplicaSetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1ReplicaSetSpec from json iterator.
func (o *OptIoK8sAPIAppsV1ReplicaSetSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1ReplicaSetSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1ReplicaSetSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1ReplicaSetStatus to json stream.
func (o OptIoK8sAPIAppsV1ReplicaSetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1ReplicaSetStatus from json iterator.
func (o *OptIoK8sAPIAppsV1ReplicaSetStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1ReplicaSetStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1ReplicaSetStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1RollingUpdateDaemonSet to json stream.
func (o OptIoK8sAPIAppsV1RollingUpdateDaemonSet) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1RollingUpdateDaemonSet from json iterator.
func (o *OptIoK8sAPIAppsV1RollingUpdateDaemonSet) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1RollingUpdateDaemonSet to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1RollingUpdateDaemonSet", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1RollingUpdateDeployment to json stream.
func (o OptIoK8sAPIAppsV1RollingUpdateDeployment) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1RollingUpdateDeployment from json iterator.
func (o *OptIoK8sAPIAppsV1RollingUpdateDeployment) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1RollingUpdateDeployment to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1RollingUpdateDeployment", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy to json stream.
func (o OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1StatefulSetSpec to json stream.
func (o OptIoK8sAPIAppsV1StatefulSetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1StatefulSetSpec from json iterator.
func (o *OptIoK8sAPIAppsV1StatefulSetSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1StatefulSetSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1StatefulSetSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1StatefulSetStatus to json stream.
func (o OptIoK8sAPIAppsV1StatefulSetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1StatefulSetStatus from json iterator.
func (o *OptIoK8sAPIAppsV1StatefulSetStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1StatefulSetStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1StatefulSetStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1StatefulSetUpdateStrategy to json stream.
func (o OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1StatefulSetUpdateStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1StatefulSetUpdateStrategy to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1StatefulSetUpdateStrategy", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthenticationV1TokenReviewStatus to json stream.
func (o OptIoK8sAPIAuthenticationV1TokenReviewStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthenticationV1TokenReviewStatus from json iterator.
func (o *OptIoK8sAPIAuthenticationV1TokenReviewStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthenticationV1TokenReviewStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthenticationV1TokenReviewStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthenticationV1UserInfo to json stream.
func (o OptIoK8sAPIAuthenticationV1UserInfo) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthenticationV1UserInfo from json iterator.
func (o *OptIoK8sAPIAuthenticationV1UserInfo) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthenticationV1UserInfo to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthenticationV1UserInfo", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1NonResourceAttributes to json stream.
func (o OptIoK8sAPIAuthorizationV1NonResourceAttributes) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1NonResourceAttributes from json iterator.
func (o *OptIoK8sAPIAuthorizationV1NonResourceAttributes) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthorizationV1NonResourceAttributes to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthorizationV1NonResourceAttributes", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1ResourceAttributes to json stream.
func (o OptIoK8sAPIAuthorizationV1ResourceAttributes) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1ResourceAttributes from json iterator.
func (o *OptIoK8sAPIAuthorizationV1ResourceAttributes) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthorizationV1ResourceAttributes to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthorizationV1ResourceAttributes", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1SubjectAccessReviewStatus to json stream.
func (o OptIoK8sAPIAuthorizationV1SubjectAccessReviewStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1SubjectAccessReviewStatus from json iterator.
func (o *OptIoK8sAPIAuthorizationV1SubjectAccessReviewStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthorizationV1SubjectAccessReviewStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthorizationV1SubjectAccessReviewStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1SubjectRulesReviewStatus to json stream.
func (o OptIoK8sAPIAuthorizationV1SubjectRulesReviewStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1SubjectRulesReviewStatus from json iterator.
func (o *OptIoK8sAPIAuthorizationV1SubjectRulesReviewStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthorizationV1SubjectRulesReviewStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthorizationV1SubjectRulesReviewStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec to json stream.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec from json iterator.
func (o *OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus to json stream.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ExternalMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ExternalMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ExternalMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ExternalMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ObjectMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ObjectMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ObjectMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ObjectMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1PodsMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1PodsMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1PodsMetricSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1PodsMetricSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1PodsMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1PodsMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ExternalMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ExternalMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ExternalMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ExternalMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HPAScalingRules to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HPAScalingRules from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2HPAScalingRules to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2HPAScalingRules", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ObjectMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ObjectMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ObjectMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ObjectMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2PodsMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2PodsMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2PodsMetricSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2PodsMetricSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2PodsMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2PodsMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1CronJobSpec to json stream.
func (o OptIoK8sAPIBatchV1CronJobSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1CronJobSpec from json iterator.
func (o *OptIoK8sAPIBatchV1CronJobSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1CronJobSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1CronJobSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1CronJobStatus to json stream.
func (o OptIoK8sAPIBatchV1CronJobStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1CronJobStatus from json iterator.
func (o *OptIoK8sAPIBatchV1CronJobStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1CronJobStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1CronJobStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1JobSpec to json stream.
func (o OptIoK8sAPIBatchV1JobSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1JobSpec from json iterator.
func (o *OptIoK8sAPIBatchV1JobSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1JobSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1JobSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1JobStatus to json stream.
func (o OptIoK8sAPIBatchV1JobStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1JobStatus from json iterator.
func (o *OptIoK8sAPIBatchV1JobStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1JobStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1JobStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1UncountedTerminatedPods to json stream.
func (o OptIoK8sAPIBatchV1UncountedTerminatedPods) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1UncountedTerminatedPods from json iterator.
func (o *OptIoK8sAPIBatchV1UncountedTerminatedPods) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1UncountedTerminatedPods to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1UncountedTerminatedPods", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1beta1CronJobSpec to json stream.
func (o OptIoK8sAPIBatchV1beta1CronJobSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1beta1CronJobSpec from json iterator.
func (o *OptIoK8sAPIBatchV1beta1CronJobSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1beta1CronJobSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1beta1CronJobSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1beta1CronJobStatus to json stream.
func (o OptIoK8sAPIBatchV1beta1CronJobStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1beta1CronJobStatus from json iterator.
func (o *OptIoK8sAPIBatchV1beta1CronJobStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1beta1CronJobStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1beta1CronJobStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICertificatesV1CertificateSigningRequestStatus to json stream.
func (o OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICertificatesV1CertificateSigningRequestStatus from json iterator.
func (o *OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICertificatesV1CertificateSigningRequestStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICertificatesV1CertificateSigningRequestStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoordinationV1LeaseSpec to json stream.
func (o OptIoK8sAPICoordinationV1LeaseSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoordinationV1LeaseSpec from json iterator.
func (o *OptIoK8sAPICoordinationV1LeaseSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoordinationV1LeaseSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoordinationV1LeaseSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1Affinity to json stream.
func (o OptIoK8sAPICoreV1Affinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Affinity from json iterator.
func (o *OptIoK8sAPICoreV1Affinity) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1Affinity to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1Affinity", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1AzureDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AzureDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AzureDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AzureDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1AzureDiskVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1AzureDiskVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1AzureFilePersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AzureFilePersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1AzureFilePersistentVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1AzureFilePersistentVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1AzureFileVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AzureFileVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AzureFileVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AzureFileVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1AzureFileVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1AzureFileVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CSIPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CSIPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CSIPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CSIPersistentVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CSIPersistentVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CSIVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CSIVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CSIVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CSIVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CSIVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CSIVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1Capabilities to json stream.
func (o OptIoK8sAPICoreV1Capabilities) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Capabilities from json iterator.
func (o *OptIoK8sAPICoreV1Capabilities) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1Capabilities to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1Capabilities", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CephFSPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CephFSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CephFSPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CephFSPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CephFSPersistentVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CephFSPersistentVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CephFSVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CephFSVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CephFSVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CephFSVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CephFSVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CephFSVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CinderPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CinderPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CinderPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CinderPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CinderPersistentVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CinderPersistentVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CinderVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CinderVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CinderVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CinderVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CinderVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CinderVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ClientIPConfig to json stream.
func (o OptIoK8sAPICoreV1ClientIPConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ClientIPConfig from json iterator.
func (o *OptIoK8sAPICoreV1ClientIPConfig) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ClientIPConfig to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ClientIPConfig", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapEnvSource to json stream.
func (o OptIoK8sAPICoreV1ConfigMapEnvSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapEnvSource from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapEnvSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ConfigMapEnvSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ConfigMapEnvSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapKeySelector to json stream.
func (o OptIoK8sAPICoreV1ConfigMapKeySelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapKeySelector from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapKeySelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ConfigMapKeySelector to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ConfigMapKeySelector", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapNodeConfigSource to json stream.
func (o OptIoK8sAPICoreV1ConfigMapNodeConfigSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapNodeConfigSource from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapNodeConfigSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ConfigMapNodeConfigSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ConfigMapNodeConfigSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapProjection to json stream.
func (o OptIoK8sAPICoreV1ConfigMapProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapProjection from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapProjection) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ConfigMapProjection to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ConfigMapProjection", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ConfigMapVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ConfigMapVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ConfigMapVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerState to json stream.
func (o OptIoK8sAPICoreV1ContainerState) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerState from json iterator.
func (o *OptIoK8sAPICoreV1ContainerState) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ContainerState to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ContainerState", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerStateRunning to json stream.
func (o OptIoK8sAPICoreV1ContainerStateRunning) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerStateRunning from json iterator.
func (o *OptIoK8sAPICoreV1ContainerStateRunning) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ContainerStateRunning to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ContainerStateRunning", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerStateTerminated to json stream.
func (o OptIoK8sAPICoreV1ContainerStateTerminated) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerStateTerminated from json iterator.
func (o *OptIoK8sAPICoreV1ContainerStateTerminated) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ContainerStateTerminated to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ContainerStateTerminated", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerStateWaiting to json stream.
func (o OptIoK8sAPICoreV1ContainerStateWaiting) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerStateWaiting from json iterator.
func (o *OptIoK8sAPICoreV1ContainerStateWaiting) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ContainerStateWaiting to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ContainerStateWaiting", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1DaemonEndpoint to json stream.
func (o OptIoK8sAPICoreV1DaemonEndpoint) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1DaemonEndpoint from json iterator.
func (o *OptIoK8sAPICoreV1DaemonEndpoint) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1DaemonEndpoint to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1DaemonEndpoint", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1DownwardAPIProjection to json stream.
func (o OptIoK8sAPICoreV1DownwardAPIProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1DownwardAPIProjection from json iterator.
func (o *OptIoK8sAPICoreV1DownwardAPIProjection) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1DownwardAPIProjection to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1DownwardAPIProjection", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1DownwardAPIVolumeSource to json stream.
func (o OptIoK8sAPICoreV1DownwardAPIVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1DownwardAPIVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1DownwardAPIVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1DownwardAPIVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1DownwardAPIVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1EmptyDirVolumeSource to json stream.
func (o OptIoK8sAPICoreV1EmptyDirVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EmptyDirVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1EmptyDirVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1EmptyDirVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1EmptyDirVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1EnvVarSource to json stream.
func (o OptIoK8sAPICoreV1EnvVarSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EnvVarSource from json iterator.
func (o *OptIoK8sAPICoreV1EnvVarSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1EnvVarSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1EnvVarSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1EphemeralVolumeSource to json stream.
func (o OptIoK8sAPICoreV1EphemeralVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EphemeralVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1EphemeralVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1EphemeralVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1EphemeralVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1EventSeries to json stream.
func (o OptIoK8sAPICoreV1EventSeries) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EventSeries from json iterator.
func (o *OptIoK8sAPICoreV1EventSeries) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1EventSeries to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1EventSeries", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1EventSource to json stream.
func (o OptIoK8sAPICoreV1EventSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EventSource from json iterator.
func (o *OptIoK8sAPICoreV1EventSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1EventSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1EventSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ExecAction to json stream.
func (o OptIoK8sAPICoreV1ExecAction) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ExecAction from json iterator.
func (o *OptIoK8sAPICoreV1ExecAction) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ExecAction to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ExecAction", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1FCVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FCVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FCVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FCVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1FCVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1FCVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1FlexPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FlexPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FlexPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FlexPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1FlexPersistentVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1FlexPersistentVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1FlexVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FlexVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FlexVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FlexVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1FlexVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1FlexVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1FlockerVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FlockerVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FlockerVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FlockerVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1FlockerVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1FlockerVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1GCEPersistentDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GCEPersistentDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1GitRepoVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GitRepoVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GitRepoVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GitRepoVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1GitRepoVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1GitRepoVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1GlusterfsPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GlusterfsPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1GlusterfsVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GlusterfsVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GlusterfsVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GlusterfsVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1GlusterfsVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1GlusterfsVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1HTTPGetAction to json stream.
func (o OptIoK8sAPICoreV1HTTPGetAction) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1HTTPGetAction from json iterator.
func (o *OptIoK8sAPICoreV1HTTPGetAction) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1HTTPGetAction to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1HTTPGetAction", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1Handler to json stream.
func (o OptIoK8sAPICoreV1Handler) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Handler from json iterator.
func (o *OptIoK8sAPICoreV1Handler) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1Handler to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1Handler", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1HostPathVolumeSource to json stream.
func (o OptIoK8sAPICoreV1HostPathVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1HostPathVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1HostPathVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1HostPathVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1HostPathVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ISCSIPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ISCSIPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ISCSIPersistentVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ISCSIPersistentVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ISCSIVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ISCSIVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ISCSIVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ISCSIVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ISCSIVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ISCSIVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1Lifecycle to json stream.
func (o OptIoK8sAPICoreV1Lifecycle) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Lifecycle from json iterator.
func (o *OptIoK8sAPICoreV1Lifecycle) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1Lifecycle to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1Lifecycle", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1LimitRangeSpec to json stream.
func (o OptIoK8sAPICoreV1LimitRangeSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LimitRangeSpec from json iterator.
func (o *OptIoK8sAPICoreV1LimitRangeSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1LimitRangeSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1LimitRangeSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1LoadBalancerStatus to json stream.
func (o OptIoK8sAPICoreV1LoadBalancerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LoadBalancerStatus from json iterator.
func (o *OptIoK8sAPICoreV1LoadBalancerStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1LoadBalancerStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1LoadBalancerStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1LocalObjectReference to json stream.
func (o OptIoK8sAPICoreV1LocalObjectReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LocalObjectReference from json iterator.
func (o *OptIoK8sAPICoreV1LocalObjectReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1LocalObjectReference to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1LocalObjectReference", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1LocalVolumeSource to json stream.
func (o OptIoK8sAPICoreV1LocalVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LocalVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1LocalVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1LocalVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1LocalVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NFSVolumeSource to json stream.
func (o OptIoK8sAPICoreV1NFSVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NFSVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1NFSVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NFSVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NFSVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NamespaceSpec to json stream.
func (o OptIoK8sAPICoreV1NamespaceSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NamespaceSpec from json iterator.
func (o *OptIoK8sAPICoreV1NamespaceSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NamespaceSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NamespaceSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NamespaceStatus to json stream.
func (o OptIoK8sAPICoreV1NamespaceStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NamespaceStatus from json iterator.
func (o *OptIoK8sAPICoreV1NamespaceStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NamespaceStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NamespaceStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeAffinity to json stream.
func (o OptIoK8sAPICoreV1NodeAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeAffinity from json iterator.
func (o *OptIoK8sAPICoreV1NodeAffinity) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeAffinity to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeAffinity", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeConfigSource to json stream.
func (o OptIoK8sAPICoreV1NodeConfigSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeConfigSource from json iterator.
func (o *OptIoK8sAPICoreV1NodeConfigSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeConfigSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeConfigSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeConfigStatus to json stream.
func (o OptIoK8sAPICoreV1NodeConfigStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeConfigStatus from json iterator.
func (o *OptIoK8sAPICoreV1NodeConfigStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeConfigStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeConfigStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeDaemonEndpoints to json stream.
func (o OptIoK8sAPICoreV1NodeDaemonEndpoints) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeDaemonEndpoints from json iterator.
func (o *OptIoK8sAPICoreV1NodeDaemonEndpoints) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeDaemonEndpoints to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeDaemonEndpoints", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeSelector to json stream.
func (o OptIoK8sAPICoreV1NodeSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeSelector from json iterator.
func (o *OptIoK8sAPICoreV1NodeSelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeSelector to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeSelector", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeSpec to json stream.
func (o OptIoK8sAPICoreV1NodeSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeSpec from json iterator.
func (o *OptIoK8sAPICoreV1NodeSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeStatus to json stream.
func (o OptIoK8sAPICoreV1NodeStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeStatus from json iterator.
func (o *OptIoK8sAPICoreV1NodeStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeSystemInfo to json stream.
func (o OptIoK8sAPICoreV1NodeSystemInfo) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeSystemInfo from json iterator.
func (o *OptIoK8sAPICoreV1NodeSystemInfo) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeSystemInfo to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeSystemInfo", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ObjectFieldSelector to json stream.
func (o OptIoK8sAPICoreV1ObjectFieldSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ObjectFieldSelector from json iterator.
func (o *OptIoK8sAPICoreV1ObjectFieldSelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ObjectFieldSelector to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ObjectFieldSelector", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ObjectReference to json stream.
func (o OptIoK8sAPICoreV1ObjectReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ObjectReference from json iterator.
func (o *OptIoK8sAPICoreV1ObjectReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ObjectReference to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ObjectReference", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimSpec to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimSpec from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeClaimSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeClaimSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimStatus to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimStatus from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeClaimStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeClaimStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimTemplate to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimTemplate from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeClaimTemplate to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeClaimTemplate", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimVolumeSource to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeSpec to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeSpec from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeStatus to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeStatus from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PhotonPersistentDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PhotonPersistentDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodAffinity to json stream.
func (o OptIoK8sAPICoreV1PodAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodAffinity from json iterator.
func (o *OptIoK8sAPICoreV1PodAffinity) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodAffinity to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodAffinity", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodAntiAffinity to json stream.
func (o OptIoK8sAPICoreV1PodAntiAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodAntiAffinity from json iterator.
func (o *OptIoK8sAPICoreV1PodAntiAffinity) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodAntiAffinity to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodAntiAffinity", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodDNSConfig to json stream.
func (o OptIoK8sAPICoreV1PodDNSConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodDNSConfig from json iterator.
func (o *OptIoK8sAPICoreV1PodDNSConfig) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodDNSConfig to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodDNSConfig", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodSecurityContext to json stream.
func (o OptIoK8sAPICoreV1PodSecurityContext) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodSecurityContext from json iterator.
func (o *OptIoK8sAPICoreV1PodSecurityContext) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodSecurityContext to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodSecurityContext", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodSpec to json stream.
func (o OptIoK8sAPICoreV1PodSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodSpec from json iterator.
func (o *OptIoK8sAPICoreV1PodSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodStatus to json stream.
func (o OptIoK8sAPICoreV1PodStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodStatus from json iterator.
func (o *OptIoK8sAPICoreV1PodStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodTemplateSpec to json stream.
func (o OptIoK8sAPICoreV1PodTemplateSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodTemplateSpec from json iterator.
func (o *OptIoK8sAPICoreV1PodTemplateSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodTemplateSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodTemplateSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PortworxVolumeSource to json stream.
func (o OptIoK8sAPICoreV1PortworxVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PortworxVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1PortworxVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PortworxVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PortworxVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1Probe to json stream.
func (o OptIoK8sAPICoreV1Probe) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Probe from json iterator.
func (o *OptIoK8sAPICoreV1Probe) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1Probe to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1Probe", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ProjectedVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ProjectedVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ProjectedVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ProjectedVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ProjectedVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ProjectedVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1QuobyteVolumeSource to json stream.
func (o OptIoK8sAPICoreV1QuobyteVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1QuobyteVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1QuobyteVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1QuobyteVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1QuobyteVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1RBDPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1RBDPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1RBDPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1RBDPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1RBDPersistentVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1RBDPersistentVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1RBDVolumeSource to json stream.
func (o OptIoK8sAPICoreV1RBDVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1RBDVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1RBDVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1RBDVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1RBDVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ReplicationControllerSpec to json stream.
func (o OptIoK8sAPICoreV1ReplicationControllerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ReplicationControllerSpec from json iterator.
func (o *OptIoK8sAPICoreV1ReplicationControllerSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ReplicationControllerSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ReplicationControllerSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ReplicationControllerStatus to json stream.
func (o OptIoK8sAPICoreV1ReplicationControllerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ReplicationControllerStatus from json iterator.
func (o *OptIoK8sAPICoreV1ReplicationControllerStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ReplicationControllerStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ReplicationControllerStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceFieldSelector to json stream.
func (o OptIoK8sAPICoreV1ResourceFieldSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceFieldSelector from json iterator.
func (o *OptIoK8sAPICoreV1ResourceFieldSelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ResourceFieldSelector to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ResourceFieldSelector", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceQuotaSpec to json stream.
func (o OptIoK8sAPICoreV1ResourceQuotaSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceQuotaSpec from json iterator.
func (o *OptIoK8sAPICoreV1ResourceQuotaSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ResourceQuotaSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ResourceQuotaSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceQuotaStatus to json stream.
func (o OptIoK8sAPICoreV1ResourceQuotaStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceQuotaStatus from json iterator.
func (o *OptIoK8sAPICoreV1ResourceQuotaStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ResourceQuotaStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ResourceQuotaStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceRequirements to json stream.
func (o OptIoK8sAPICoreV1ResourceRequirements) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceRequirements from json iterator.
func (o *OptIoK8sAPICoreV1ResourceRequirements) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ResourceRequirements to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ResourceRequirements", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SELinuxOptions to json stream.
func (o OptIoK8sAPICoreV1SELinuxOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SELinuxOptions from json iterator.
func (o *OptIoK8sAPICoreV1SELinuxOptions) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SELinuxOptions to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SELinuxOptions", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ScaleIOPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ScaleIOPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ScaleIOVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ScaleIOVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ScaleIOVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ScaleIOVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ScaleIOVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ScaleIOVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ScopeSelector to json stream.
func (o OptIoK8sAPICoreV1ScopeSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ScopeSelector from json iterator.
func (o *OptIoK8sAPICoreV1ScopeSelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ScopeSelector to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ScopeSelector", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SeccompProfile to json stream.
func (o OptIoK8sAPICoreV1SeccompProfile) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SeccompProfile from json iterator.
func (o *OptIoK8sAPICoreV1SeccompProfile) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SeccompProfile to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SeccompProfile", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretEnvSource to json stream.
func (o OptIoK8sAPICoreV1SecretEnvSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretEnvSource from json iterator.
func (o *OptIoK8sAPICoreV1SecretEnvSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecretEnvSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecretEnvSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretKeySelector to json stream.
func (o OptIoK8sAPICoreV1SecretKeySelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretKeySelector from json iterator.
func (o *OptIoK8sAPICoreV1SecretKeySelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecretKeySelector to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecretKeySelector", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretProjection to json stream.
func (o OptIoK8sAPICoreV1SecretProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretProjection from json iterator.
func (o *OptIoK8sAPICoreV1SecretProjection) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecretProjection to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecretProjection", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretReference to json stream.
func (o OptIoK8sAPICoreV1SecretReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretReference from json iterator.
func (o *OptIoK8sAPICoreV1SecretReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecretReference to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecretReference", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretVolumeSource to json stream.
func (o OptIoK8sAPICoreV1SecretVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1SecretVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecretVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecretVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecurityContext to json stream.
func (o OptIoK8sAPICoreV1SecurityContext) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecurityContext from json iterator.
func (o *OptIoK8sAPICoreV1SecurityContext) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecurityContext to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecurityContext", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ServiceAccountTokenProjection to json stream.
func (o OptIoK8sAPICoreV1ServiceAccountTokenProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ServiceAccountTokenProjection from json iterator.
func (o *OptIoK8sAPICoreV1ServiceAccountTokenProjection) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ServiceAccountTokenProjection to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ServiceAccountTokenProjection", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ServiceSpec to json stream.
func (o OptIoK8sAPICoreV1ServiceSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ServiceSpec from json iterator.
func (o *OptIoK8sAPICoreV1ServiceSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ServiceSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ServiceSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ServiceStatus to json stream.
func (o OptIoK8sAPICoreV1ServiceStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ServiceStatus from json iterator.
func (o *OptIoK8sAPICoreV1ServiceStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ServiceStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ServiceStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SessionAffinityConfig to json stream.
func (o OptIoK8sAPICoreV1SessionAffinityConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SessionAffinityConfig from json iterator.
func (o *OptIoK8sAPICoreV1SessionAffinityConfig) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SessionAffinityConfig to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SessionAffinityConfig", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1StorageOSPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1StorageOSPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1StorageOSPersistentVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1StorageOSPersistentVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1StorageOSVolumeSource to json stream.
func (o OptIoK8sAPICoreV1StorageOSVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1StorageOSVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1StorageOSVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1StorageOSVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1StorageOSVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1TCPSocketAction to json stream.
func (o OptIoK8sAPICoreV1TCPSocketAction) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1TCPSocketAction from json iterator.
func (o *OptIoK8sAPICoreV1TCPSocketAction) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1TCPSocketAction to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1TCPSocketAction", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1TypedLocalObjectReference to json stream.
func (o OptIoK8sAPICoreV1TypedLocalObjectReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1TypedLocalObjectReference from json iterator.
func (o *OptIoK8sAPICoreV1TypedLocalObjectReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1TypedLocalObjectReference to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1TypedLocalObjectReference", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1VolumeNodeAffinity to json stream.
func (o OptIoK8sAPICoreV1VolumeNodeAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1VolumeNodeAffinity from json iterator.
func (o *OptIoK8sAPICoreV1VolumeNodeAffinity) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1VolumeNodeAffinity to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1VolumeNodeAffinity", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1VsphereVirtualDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1VsphereVirtualDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1WindowsSecurityContextOptions to json stream.
func (o OptIoK8sAPICoreV1WindowsSecurityContextOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1WindowsSecurityContextOptions from json iterator.
func (o *OptIoK8sAPICoreV1WindowsSecurityContextOptions) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1WindowsSecurityContextOptions to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1WindowsSecurityContextOptions", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1EndpointConditions to json stream.
func (o OptIoK8sAPIDiscoveryV1EndpointConditions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1EndpointConditions from json iterator.
func (o *OptIoK8sAPIDiscoveryV1EndpointConditions) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIDiscoveryV1EndpointConditions to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIDiscoveryV1EndpointConditions", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1EndpointHints to json stream.
func (o OptIoK8sAPIDiscoveryV1EndpointHints) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1EndpointHints from json iterator.
func (o *OptIoK8sAPIDiscoveryV1EndpointHints) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIDiscoveryV1EndpointHints to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIDiscoveryV1EndpointHints", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1beta1EndpointConditions to json stream.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointConditions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1beta1EndpointConditions from json iterator.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointConditions) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIDiscoveryV1beta1EndpointConditions to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIDiscoveryV1beta1EndpointConditions", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1beta1EndpointHints to json stream.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointHints) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1beta1EndpointHints from json iterator.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointHints) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIDiscoveryV1beta1EndpointHints to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIDiscoveryV1beta1EndpointHints", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIEventsV1EventSeries to json stream.
func (o OptIoK8sAPIEventsV1EventSeries) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIEventsV1EventSeries from json iterator.
func (o *OptIoK8sAPIEventsV1EventSeries) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIEventsV1EventSeries to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIEventsV1EventSeries", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIEventsV1beta1EventSeries to json stream.
func (o OptIoK8sAPIEventsV1beta1EventSeries) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIEventsV1beta1EventSeries from json iterator.
func (o *OptIoK8sAPIEventsV1beta1EventSeries) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIEventsV1beta1EventSeries to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIEventsV1beta1EventSeries", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1GroupSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1GroupSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1GroupSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1GroupSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1GroupSubject to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1GroupSubject", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1LimitResponse to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitResponse) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1LimitResponse from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1LimitResponse) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1LimitResponse to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1LimitResponse", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1QueuingConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1QueuingConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1UserSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1UserSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1UserSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1UserSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1UserSubject to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1UserSubject", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2GroupSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2GroupSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2GroupSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2GroupSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2GroupSubject to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2GroupSubject", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2LimitResponse to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitResponse) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2LimitResponse from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2LimitResponse) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2LimitResponse to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2LimitResponse", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2QueuingConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2QueuingConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2UserSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2UserSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2UserSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2UserSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2UserSubject to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2UserSubject", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1HTTPIngressRuleValue to json stream.
func (o OptIoK8sAPINetworkingV1HTTPIngressRuleValue) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1HTTPIngressRuleValue from json iterator.
func (o *OptIoK8sAPINetworkingV1HTTPIngressRuleValue) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1HTTPIngressRuleValue to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1HTTPIngressRuleValue", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IPBlock to json stream.
func (o OptIoK8sAPINetworkingV1IPBlock) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IPBlock from json iterator.
func (o *OptIoK8sAPINetworkingV1IPBlock) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IPBlock to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IPBlock", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressBackend to json stream.
func (o OptIoK8sAPINetworkingV1IngressBackend) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressBackend from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressBackend) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressBackend to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressBackend", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressClassParametersReference to json stream.
func (o OptIoK8sAPINetworkingV1IngressClassParametersReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressClassParametersReference from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressClassParametersReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressClassParametersReference to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressClassParametersReference", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressClassSpec to json stream.
func (o OptIoK8sAPINetworkingV1IngressClassSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressClassSpec from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressClassSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressClassSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressClassSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressServiceBackend to json stream.
func (o OptIoK8sAPINetworkingV1IngressServiceBackend) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressServiceBackend from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressServiceBackend) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressServiceBackend to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressServiceBackend", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressSpec to json stream.
func (o OptIoK8sAPINetworkingV1IngressSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressSpec from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressStatus to json stream.
func (o OptIoK8sAPINetworkingV1IngressStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressStatus from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1NetworkPolicySpec to json stream.
func (o OptIoK8sAPINetworkingV1NetworkPolicySpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1NetworkPolicySpec from json iterator.
func (o *OptIoK8sAPINetworkingV1NetworkPolicySpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1NetworkPolicySpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1NetworkPolicySpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1ServiceBackendPort to json stream.
func (o OptIoK8sAPINetworkingV1ServiceBackendPort) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1ServiceBackendPort from json iterator.
func (o *OptIoK8sAPINetworkingV1ServiceBackendPort) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1ServiceBackendPort to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1ServiceBackendPort", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1Overhead to json stream.
func (o OptIoK8sAPINodeV1Overhead) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1Overhead from json iterator.
func (o *OptIoK8sAPINodeV1Overhead) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1Overhead to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1Overhead", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1Scheduling to json stream.
func (o OptIoK8sAPINodeV1Scheduling) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1Scheduling from json iterator.
func (o *OptIoK8sAPINodeV1Scheduling) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1Scheduling to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1Scheduling", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1alpha1Overhead to json stream.
func (o OptIoK8sAPINodeV1alpha1Overhead) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1alpha1Overhead from json iterator.
func (o *OptIoK8sAPINodeV1alpha1Overhead) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1alpha1Overhead to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1alpha1Overhead", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1alpha1Scheduling to json stream.
func (o OptIoK8sAPINodeV1alpha1Scheduling) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1alpha1Scheduling from json iterator.
func (o *OptIoK8sAPINodeV1alpha1Scheduling) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1alpha1Scheduling to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1alpha1Scheduling", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1beta1Overhead to json stream.
func (o OptIoK8sAPINodeV1beta1Overhead) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1beta1Overhead from json iterator.
func (o *OptIoK8sAPINodeV1beta1Overhead) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1beta1Overhead to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1beta1Overhead", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1beta1Scheduling to json stream.
func (o OptIoK8sAPINodeV1beta1Scheduling) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1beta1Scheduling from json iterator.
func (o *OptIoK8sAPINodeV1beta1Scheduling) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1beta1Scheduling to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1beta1Scheduling", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1PodDisruptionBudgetSpec to json stream.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1PodDisruptionBudgetSpec from json iterator.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1PodDisruptionBudgetStatus to json stream.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1PodDisruptionBudgetStatus from json iterator.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec to json stream.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus to json stream.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1PodSecurityPolicySpec to json stream.
func (o OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1PodSecurityPolicySpec from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions to json stream.
func (o OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions to json stream.
func (o OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIRbacV1AggregationRule to json stream.
func (o OptIoK8sAPIRbacV1AggregationRule) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIRbacV1AggregationRule from json iterator.
func (o *OptIoK8sAPIRbacV1AggregationRule) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIRbacV1AggregationRule to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIRbacV1AggregationRule", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIStorageV1VolumeAttachmentStatus to json stream.
func (o OptIoK8sAPIStorageV1VolumeAttachmentStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIStorageV1VolumeAttachmentStatus from json iterator.
func (o *OptIoK8sAPIStorageV1VolumeAttachmentStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIStorageV1VolumeAttachmentStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIStorageV1VolumeAttachmentStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIStorageV1VolumeError to json stream.
func (o OptIoK8sAPIStorageV1VolumeError) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIStorageV1VolumeError from json iterator.
func (o *OptIoK8sAPIStorageV1VolumeError) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIStorageV1VolumeError to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIStorageV1VolumeError", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sAPIStorageV1VolumeNodeResources to json stream.
func (o OptIoK8sAPIStorageV1VolumeNodeResources) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIStorageV1VolumeNodeResources from json iterator.
func (o *OptIoK8sAPIStorageV1VolumeNodeResources) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sAPIStorageV1VolumeNodeResources to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIStorageV1VolumeNodeResources", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgAPIResourceQuantity to json stream.
func (o OptIoK8sApimachineryPkgAPIResourceQuantity) WriteJSON(j *json.Stream) {
}

// ReadJSON reads json value of IoK8sApimachineryPkgAPIResourceQuantity from json iterator.
func (o *OptIoK8sApimachineryPkgAPIResourceQuantity) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgAPIResourceQuantity to nil`)
	}
	switch i.WhatIsNext() {
	case json.String:
		o.Set = true
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgAPIResourceQuantity", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1LabelSelector to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1LabelSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1LabelSelector from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1LabelSelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1LabelSelector to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1LabelSelector", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1ListMeta to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1ListMeta) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1ListMeta from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1ListMeta) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1ListMeta to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1ListMeta", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1MicroTime to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1MicroTime) WriteJSON(j *json.Stream) {
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1MicroTime from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1MicroTime) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1MicroTime to nil`)
	}
	switch i.WhatIsNext() {
	case json.String:
		o.Set = true
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1MicroTime", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1ObjectMeta to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1ObjectMeta from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1ObjectMeta to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1ObjectMeta", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1Preconditions to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1Preconditions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1Preconditions from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1Preconditions) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1Preconditions to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1Preconditions", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1StatusDetails to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1StatusDetails) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1StatusDetails from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1StatusDetails) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1StatusDetails to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1StatusDetails", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1Time to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1Time) WriteJSON(j *json.Stream) {
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1Time from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1Time) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1Time to nil`)
	}
	switch i.WhatIsNext() {
	case json.String:
		o.Set = true
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1Time", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgUtilIntstrIntOrString to json stream.
func (o OptIoK8sApimachineryPkgUtilIntstrIntOrString) WriteJSON(j *json.Stream) {
}

// ReadJSON reads json value of IoK8sApimachineryPkgUtilIntstrIntOrString from json iterator.
func (o *OptIoK8sApimachineryPkgUtilIntstrIntOrString) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgUtilIntstrIntOrString to nil`)
	}
	switch i.WhatIsNext() {
	case json.String:
		o.Set = true
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgUtilIntstrIntOrString", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec to json stream.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec from json iterator.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus to json stream.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus from json iterator.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus", i.WhatIsNext())
	}
}

// WriteJSON writes json value of IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference to json stream.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference from json iterator.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference to nil`)
	}
	switch i.WhatIsNext() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference", i.WhatIsNext())
	}
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(i *json.Iter) error {
	if o == nil {
		fmt.Errorf(`invalid: unable to decode OptString to nil`)
	}
	switch i.WhatIsNext() {
	case json.String:
		o.Set = true
		o.Value = string(i.Str())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %q while reading OptString", i.WhatIsNext())
	}
}

func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAdmissionregistrationV1MutatingWebhookConfigurationListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAdmissionregistrationV1MutatingWebhookConfigurationListResUnauthorized from json stream.
func (s *WatchAdmissionregistrationV1MutatingWebhookConfigurationListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchAdmissionregistrationV1MutatingWebhookConfigurationListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAdmissionregistrationV1ValidatingWebhookConfigurationListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAdmissionregistrationV1ValidatingWebhookConfigurationListResUnauthorized from json stream.
func (s *WatchAdmissionregistrationV1ValidatingWebhookConfigurationListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchAdmissionregistrationV1ValidatingWebhookConfigurationListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiextensionsV1CustomResourceDefinitionListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchApiextensionsV1CustomResourceDefinitionListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiextensionsV1CustomResourceDefinitionListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchApiextensionsV1CustomResourceDefinitionListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiextensionsV1CustomResourceDefinitionListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchApiextensionsV1CustomResourceDefinitionListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchApiextensionsV1CustomResourceDefinitionListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchApiextensionsV1CustomResourceDefinitionListResUnauthorized from json stream.
func (s *WatchApiextensionsV1CustomResourceDefinitionListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchApiextensionsV1CustomResourceDefinitionListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchApiregistrationV1APIServiceListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchApiregistrationV1APIServiceListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchApiregistrationV1APIServiceListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchApiregistrationV1APIServiceListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiregistrationV1APIServiceListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchApiregistrationV1APIServiceListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiregistrationV1APIServiceListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchApiregistrationV1APIServiceListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiregistrationV1APIServiceListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchApiregistrationV1APIServiceListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchApiregistrationV1APIServiceListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchApiregistrationV1APIServiceListResUnauthorized from json stream.
func (s *WatchApiregistrationV1APIServiceListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchApiregistrationV1APIServiceListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAppsV1ControllerRevisionListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAppsV1ControllerRevisionListForAllNamespacesResUnauthorized from json stream.
func (s *WatchAppsV1ControllerRevisionListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchAppsV1ControllerRevisionListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DaemonSetListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DaemonSetListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DaemonSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DaemonSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DaemonSetListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1DaemonSetListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAppsV1DaemonSetListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAppsV1DaemonSetListForAllNamespacesResUnauthorized from json stream.
func (s *WatchAppsV1DaemonSetListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchAppsV1DaemonSetListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchAppsV1DeploymentListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1DeploymentListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DeploymentListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DeploymentListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DeploymentListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DeploymentListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DeploymentListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DeploymentListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DeploymentListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1DeploymentListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAppsV1DeploymentListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAppsV1DeploymentListForAllNamespacesResUnauthorized from json stream.
func (s *WatchAppsV1DeploymentListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchAppsV1DeploymentListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAppsV1ReplicaSetListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAppsV1ReplicaSetListForAllNamespacesResUnauthorized from json stream.
func (s *WatchAppsV1ReplicaSetListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchAppsV1ReplicaSetListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1StatefulSetListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1StatefulSetListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1StatefulSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1StatefulSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1StatefulSetListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1StatefulSetListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAppsV1StatefulSetListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAppsV1StatefulSetListForAllNamespacesResUnauthorized from json stream.
func (s *WatchAppsV1StatefulSetListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchAppsV1StatefulSetListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResUnauthorized from json stream.
func (s *WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResUnauthorized from json stream.
func (s *WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResUnauthorized from json stream.
func (s *WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchBatchV1CronJobListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchBatchV1CronJobListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1CronJobListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1CronJobListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1CronJobListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1CronJobListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1CronJobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1CronJobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1CronJobListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchBatchV1CronJobListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchBatchV1CronJobListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchBatchV1CronJobListForAllNamespacesResUnauthorized from json stream.
func (s *WatchBatchV1CronJobListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchBatchV1CronJobListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchBatchV1JobListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchBatchV1JobListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchBatchV1JobListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchBatchV1JobListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1JobListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1JobListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1JobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1JobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1JobListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchBatchV1JobListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchBatchV1JobListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchBatchV1JobListForAllNamespacesResUnauthorized from json stream.
func (s *WatchBatchV1JobListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchBatchV1JobListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchBatchV1beta1CronJobListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchBatchV1beta1CronJobListForAllNamespacesResUnauthorized from json stream.
func (s *WatchBatchV1beta1CronJobListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchBatchV1beta1CronJobListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCertificatesV1CertificateSigningRequestListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCertificatesV1CertificateSigningRequestListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCertificatesV1CertificateSigningRequestListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCertificatesV1CertificateSigningRequestListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCertificatesV1CertificateSigningRequestListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCertificatesV1CertificateSigningRequestListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCertificatesV1CertificateSigningRequestListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCertificatesV1CertificateSigningRequestListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCertificatesV1CertificateSigningRequestListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCertificatesV1CertificateSigningRequestListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCertificatesV1CertificateSigningRequestListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCertificatesV1CertificateSigningRequestListResUnauthorized from json stream.
func (s *WatchCertificatesV1CertificateSigningRequestListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCertificatesV1CertificateSigningRequestListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoordinationV1LeaseListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoordinationV1LeaseListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoordinationV1LeaseListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoordinationV1LeaseListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoordinationV1LeaseListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoordinationV1LeaseListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoordinationV1LeaseListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoordinationV1LeaseListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoordinationV1LeaseListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoordinationV1LeaseListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ConfigMapListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ConfigMapListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ConfigMapListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ConfigMapListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ConfigMapListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ConfigMapListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1ConfigMapListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1ConfigMapListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1ConfigMapListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1ConfigMapListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1EndpointsListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1EndpointsListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EndpointsListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1EndpointsListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EndpointsListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1EndpointsListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EndpointsListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1EndpointsListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EndpointsListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1EndpointsListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1EndpointsListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1EndpointsListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1EndpointsListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1EndpointsListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1EventListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1EventListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1EventListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1EventListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EventListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1EventListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1EventListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1EventListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1EventListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1EventListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1LimitRangeListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1LimitRangeListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1LimitRangeListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1LimitRangeListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1LimitRangeListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1LimitRangeListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1LimitRangeListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1LimitRangeListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1LimitRangeListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1LimitRangeListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1NamespaceListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NamespaceListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1NamespaceListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NamespaceListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1NamespaceListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1NamespaceListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1NamespaceListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1NamespaceListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1NamespaceListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NamespaceListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1NamespaceListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1NamespaceListResUnauthorized from json stream.
func (s *WatchCoreV1NamespaceListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1NamespaceListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1NodeListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NodeListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1NodeListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NodeListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1NodeListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NodeListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1NodeListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1NodeListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1NodeListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NodeListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1NodeListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1NodeListResUnauthorized from json stream.
func (s *WatchCoreV1NodeListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1NodeListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1PersistentVolumeClaimListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1PersistentVolumeClaimListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1PersistentVolumeClaimListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1PersistentVolumeClaimListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1PersistentVolumeListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1PersistentVolumeListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1PersistentVolumeListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1PersistentVolumeListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1PersistentVolumeListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1PersistentVolumeListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1PersistentVolumeListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1PersistentVolumeListResUnauthorized from json stream.
func (s *WatchCoreV1PersistentVolumeListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1PersistentVolumeListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1PodListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1PodListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1PodListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1PodListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PodListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PodListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1PodListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1PodListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1PodListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1PodListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1PodListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodTemplateListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PodTemplateListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodTemplateListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PodTemplateListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodTemplateListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1PodTemplateListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1PodTemplateListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1PodTemplateListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1PodTemplateListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1PodTemplateListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1ReplicationControllerListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1ReplicationControllerListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1ReplicationControllerListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1ReplicationControllerListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1ResourceQuotaListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1ResourceQuotaListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1ResourceQuotaListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1ResourceQuotaListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1SecretListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1SecretListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1SecretListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1SecretListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1SecretListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1SecretListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1SecretListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1SecretListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1SecretListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1SecretListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1SecretListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1SecretListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1SecretListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1SecretListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1ServiceAccountListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1ServiceAccountListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1ServiceAccountListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1ServiceAccountListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchCoreV1ServiceListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ServiceListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ServiceListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ServiceListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ServiceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ServiceListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1ServiceListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1ServiceListForAllNamespacesResUnauthorized from json stream.
func (s *WatchCoreV1ServiceListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchCoreV1ServiceListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchDiscoveryV1EndpointSliceListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchDiscoveryV1EndpointSliceListForAllNamespacesResUnauthorized from json stream.
func (s *WatchDiscoveryV1EndpointSliceListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchDiscoveryV1EndpointSliceListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResUnauthorized from json stream.
func (s *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchEventsV1EventListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchEventsV1EventListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1EventListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchEventsV1EventListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchEventsV1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchEventsV1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1EventListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchEventsV1EventListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchEventsV1EventListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchEventsV1EventListForAllNamespacesResUnauthorized from json stream.
func (s *WatchEventsV1EventListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchEventsV1EventListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchEventsV1beta1EventListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchEventsV1beta1EventListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1beta1EventListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchEventsV1beta1EventListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1beta1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchEventsV1beta1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1beta1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchEventsV1beta1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1beta1EventListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchEventsV1beta1EventListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchEventsV1beta1EventListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchEventsV1beta1EventListForAllNamespacesResUnauthorized from json stream.
func (s *WatchEventsV1beta1EventListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchEventsV1beta1EventListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchFlowcontrolApiserverV1beta1FlowSchemaListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchFlowcontrolApiserverV1beta1FlowSchemaListResUnauthorized from json stream.
func (s *WatchFlowcontrolApiserverV1beta1FlowSchemaListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchFlowcontrolApiserverV1beta1FlowSchemaListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResUnauthorized from json stream.
func (s *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchFlowcontrolApiserverV1beta2FlowSchemaListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchFlowcontrolApiserverV1beta2FlowSchemaListResUnauthorized from json stream.
func (s *WatchFlowcontrolApiserverV1beta2FlowSchemaListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchFlowcontrolApiserverV1beta2FlowSchemaListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResUnauthorized from json stream.
func (s *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchInternalApiserverV1alpha1StorageVersionListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchInternalApiserverV1alpha1StorageVersionListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchInternalApiserverV1alpha1StorageVersionListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchInternalApiserverV1alpha1StorageVersionListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchInternalApiserverV1alpha1StorageVersionListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchInternalApiserverV1alpha1StorageVersionListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchInternalApiserverV1alpha1StorageVersionListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchInternalApiserverV1alpha1StorageVersionListResUnauthorized from json stream.
func (s *WatchInternalApiserverV1alpha1StorageVersionListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchInternalApiserverV1alpha1StorageVersionListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchNetworkingV1IngressClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchNetworkingV1IngressClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchNetworkingV1IngressClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchNetworkingV1IngressClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1IngressClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1IngressClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchNetworkingV1IngressClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchNetworkingV1IngressClassListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNetworkingV1IngressClassListResUnauthorized from json stream.
func (s *WatchNetworkingV1IngressClassListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchNetworkingV1IngressClassListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchNetworkingV1IngressListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchNetworkingV1IngressListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1IngressListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1IngressListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1IngressListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchNetworkingV1IngressListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchNetworkingV1IngressListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNetworkingV1IngressListForAllNamespacesResUnauthorized from json stream.
func (s *WatchNetworkingV1IngressListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchNetworkingV1IngressListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchNetworkingV1NetworkPolicyListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNetworkingV1NetworkPolicyListForAllNamespacesResUnauthorized from json stream.
func (s *WatchNetworkingV1NetworkPolicyListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchNetworkingV1NetworkPolicyListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchNodeV1RuntimeClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1RuntimeClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchNodeV1RuntimeClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchNodeV1RuntimeClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1RuntimeClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchNodeV1RuntimeClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNodeV1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1RuntimeClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1RuntimeClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchNodeV1RuntimeClassListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNodeV1RuntimeClassListResUnauthorized from json stream.
func (s *WatchNodeV1RuntimeClassListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchNodeV1RuntimeClassListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchNodeV1alpha1RuntimeClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1alpha1RuntimeClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchNodeV1alpha1RuntimeClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchNodeV1alpha1RuntimeClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1alpha1RuntimeClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchNodeV1alpha1RuntimeClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1alpha1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNodeV1alpha1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1alpha1RuntimeClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1alpha1RuntimeClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchNodeV1alpha1RuntimeClassListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNodeV1alpha1RuntimeClassListResUnauthorized from json stream.
func (s *WatchNodeV1alpha1RuntimeClassListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchNodeV1alpha1RuntimeClassListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchNodeV1beta1RuntimeClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1beta1RuntimeClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchNodeV1beta1RuntimeClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchNodeV1beta1RuntimeClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1beta1RuntimeClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchNodeV1beta1RuntimeClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1beta1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNodeV1beta1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1beta1RuntimeClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1beta1RuntimeClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchNodeV1beta1RuntimeClassListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNodeV1beta1RuntimeClassListResUnauthorized from json stream.
func (s *WatchNodeV1beta1RuntimeClassListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchNodeV1beta1RuntimeClassListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchPolicyV1PodDisruptionBudgetListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchPolicyV1PodDisruptionBudgetListForAllNamespacesResUnauthorized from json stream.
func (s *WatchPolicyV1PodDisruptionBudgetListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchPolicyV1PodDisruptionBudgetListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResUnauthorized from json stream.
func (s *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodSecurityPolicyListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodSecurityPolicyListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodSecurityPolicyListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodSecurityPolicyListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodSecurityPolicyListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchPolicyV1beta1PodSecurityPolicyListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchPolicyV1beta1PodSecurityPolicyListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchPolicyV1beta1PodSecurityPolicyListResUnauthorized from json stream.
func (s *WatchPolicyV1beta1PodSecurityPolicyListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchPolicyV1beta1PodSecurityPolicyListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchRbacAuthorizationV1ClusterRoleBindingListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchRbacAuthorizationV1ClusterRoleBindingListResUnauthorized from json stream.
func (s *WatchRbacAuthorizationV1ClusterRoleBindingListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchRbacAuthorizationV1ClusterRoleBindingListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchRbacAuthorizationV1ClusterRoleListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1ClusterRoleListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1ClusterRoleListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchRbacAuthorizationV1ClusterRoleListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchRbacAuthorizationV1ClusterRoleListResUnauthorized from json stream.
func (s *WatchRbacAuthorizationV1ClusterRoleListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchRbacAuthorizationV1ClusterRoleListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchRbacAuthorizationV1RoleBindingListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchRbacAuthorizationV1RoleBindingListForAllNamespacesResUnauthorized from json stream.
func (s *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchRbacAuthorizationV1RoleBindingListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchRbacAuthorizationV1RoleListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchRbacAuthorizationV1RoleListForAllNamespacesResUnauthorized from json stream.
func (s *WatchRbacAuthorizationV1RoleListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchRbacAuthorizationV1RoleListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchSchedulingV1PriorityClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchSchedulingV1PriorityClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchSchedulingV1PriorityClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchSchedulingV1PriorityClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchSchedulingV1PriorityClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchSchedulingV1PriorityClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchSchedulingV1PriorityClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchSchedulingV1PriorityClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchSchedulingV1PriorityClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchSchedulingV1PriorityClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchSchedulingV1PriorityClassListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchSchedulingV1PriorityClassListResUnauthorized from json stream.
func (s *WatchSchedulingV1PriorityClassListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchSchedulingV1PriorityClassListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchStorageV1CSIDriverListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1CSIDriverListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchStorageV1CSIDriverListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1CSIDriverListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1CSIDriverListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1CSIDriverListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1CSIDriverListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1CSIDriverListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1CSIDriverListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1CSIDriverListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1CSIDriverListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1CSIDriverListResUnauthorized from json stream.
func (s *WatchStorageV1CSIDriverListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchStorageV1CSIDriverListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchStorageV1CSINodeListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1CSINodeListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchStorageV1CSINodeListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1CSINodeListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchStorageV1CSINodeListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1CSINodeListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1CSINodeListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1CSINodeListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1CSINodeListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1CSINodeListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1CSINodeListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1CSINodeListResUnauthorized from json stream.
func (s *WatchStorageV1CSINodeListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchStorageV1CSINodeListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchStorageV1StorageClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1StorageClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchStorageV1StorageClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1StorageClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1StorageClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1StorageClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1StorageClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1StorageClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1StorageClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1StorageClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1StorageClassListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1StorageClassListResUnauthorized from json stream.
func (s *WatchStorageV1StorageClassListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchStorageV1StorageClassListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchStorageV1VolumeAttachmentListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1VolumeAttachmentListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchStorageV1VolumeAttachmentListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1VolumeAttachmentListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1VolumeAttachmentListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1VolumeAttachmentListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1VolumeAttachmentListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1VolumeAttachmentListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1VolumeAttachmentListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1VolumeAttachmentListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1VolumeAttachmentListResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1VolumeAttachmentListResUnauthorized from json stream.
func (s *WatchStorageV1VolumeAttachmentListResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchStorageV1VolumeAttachmentListResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResUnauthorized from json stream.
func (s *WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResUnauthorized from json stream.
func (s *WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		fmt.Errorf(`invalid: unable to decode WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesResUnauthorized to nil`)
	}
	var retErr error
	i.Object(func(i *json.Iter, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}
