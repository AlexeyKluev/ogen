// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized from json stream.
func (s *CreateAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (CreateAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized from json stream.
func (s *CreateAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateApiextensionsV1CustomResourceDefinitionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateApiextensionsV1CustomResourceDefinitionUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateApiextensionsV1CustomResourceDefinitionUnauthorized from json stream.
func (s *CreateApiextensionsV1CustomResourceDefinitionUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateApiextensionsV1CustomResourceDefinitionUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateApiregistrationV1APIServiceApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateApiregistrationV1APIServiceApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateApiregistrationV1APIServiceApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateApiregistrationV1APIServiceApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateApiregistrationV1APIServiceApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateApiregistrationV1APIServiceApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateApiregistrationV1APIServiceApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateApiregistrationV1APIServiceApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateApiregistrationV1APIServiceUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateApiregistrationV1APIServiceUnauthorized from json stream.
func (s *CreateApiregistrationV1APIServiceUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateApiregistrationV1APIServiceUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateAuthenticationV1TokenReviewApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthenticationV1TokenReviewApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthenticationV1TokenReviewApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateAuthenticationV1TokenReviewApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAuthenticationV1TokenReviewApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthenticationV1TokenReviewApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthenticationV1TokenReviewApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthenticationV1TokenReviewApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateAuthenticationV1TokenReviewApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateAuthenticationV1TokenReviewUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAuthenticationV1TokenReviewUnauthorized from json stream.
func (s *CreateAuthenticationV1TokenReviewUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateAuthenticationV1TokenReviewUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectAccessReviewApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateAuthorizationV1SelfSubjectAccessReviewUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAuthorizationV1SelfSubjectAccessReviewUnauthorized from json stream.
func (s *CreateAuthorizationV1SelfSubjectAccessReviewUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateAuthorizationV1SelfSubjectAccessReviewUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SelfSubjectRulesReviewApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateAuthorizationV1SelfSubjectRulesReviewUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAuthorizationV1SelfSubjectRulesReviewUnauthorized from json stream.
func (s *CreateAuthorizationV1SelfSubjectRulesReviewUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateAuthorizationV1SelfSubjectRulesReviewUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateAuthorizationV1SubjectAccessReviewApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateAuthorizationV1SubjectAccessReviewApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateAuthorizationV1SubjectAccessReviewUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateAuthorizationV1SubjectAccessReviewUnauthorized from json stream.
func (s *CreateAuthorizationV1SubjectAccessReviewUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateAuthorizationV1SubjectAccessReviewUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateCertificatesV1CertificateSigningRequestApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateCertificatesV1CertificateSigningRequestApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateCertificatesV1CertificateSigningRequestApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCertificatesV1CertificateSigningRequestApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateCertificatesV1CertificateSigningRequestApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateCertificatesV1CertificateSigningRequestUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateCertificatesV1CertificateSigningRequestUnauthorized from json stream.
func (s *CreateCertificatesV1CertificateSigningRequestUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateCertificatesV1CertificateSigningRequestUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateCoreV1NamespaceApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NamespaceApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NamespaceApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {}
func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateCoreV1NamespaceApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1NamespaceApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NamespaceApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NamespaceApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NamespaceApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateCoreV1NamespaceUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateCoreV1NamespaceUnauthorized from json stream.
func (s *CreateCoreV1NamespaceUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateCoreV1NamespaceUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateCoreV1NodeApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {}
func (CreateCoreV1NodeApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1NodeApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateCoreV1NodeApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1NodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1NodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1NodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateCoreV1NodeUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateCoreV1NodeUnauthorized from json stream.
func (s *CreateCoreV1NodeUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateCoreV1NodeUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateCoreV1PersistentVolumeApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1PersistentVolumeApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1PersistentVolumeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateCoreV1PersistentVolumeApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1PersistentVolumeApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateCoreV1PersistentVolumeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateCoreV1PersistentVolumeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateCoreV1PersistentVolumeUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateCoreV1PersistentVolumeUnauthorized from json stream.
func (s *CreateCoreV1PersistentVolumeUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateCoreV1PersistentVolumeUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateFlowcontrolApiserverV1beta1FlowSchemaUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateFlowcontrolApiserverV1beta1FlowSchemaUnauthorized from json stream.
func (s *CreateFlowcontrolApiserverV1beta1FlowSchemaUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateFlowcontrolApiserverV1beta1FlowSchemaUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized from json stream.
func (s *CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateFlowcontrolApiserverV1beta2FlowSchemaUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateFlowcontrolApiserverV1beta2FlowSchemaUnauthorized from json stream.
func (s *CreateFlowcontrolApiserverV1beta2FlowSchemaUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateFlowcontrolApiserverV1beta2FlowSchemaUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized from json stream.
func (s *CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONCreated) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlAccepted) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlCreated) WriteJSON(j *json.Stream) {
}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateInternalApiserverV1alpha1StorageVersionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateInternalApiserverV1alpha1StorageVersionUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateInternalApiserverV1alpha1StorageVersionUnauthorized from json stream.
func (s *CreateInternalApiserverV1alpha1StorageVersionUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateInternalApiserverV1alpha1StorageVersionUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateNetworkingV1IngressClassApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNetworkingV1IngressClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNetworkingV1IngressClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateNetworkingV1IngressClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNetworkingV1IngressClassApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNetworkingV1IngressClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNetworkingV1IngressClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateNetworkingV1IngressClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateNetworkingV1IngressClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateNetworkingV1IngressClassUnauthorized from json stream.
func (s *CreateNetworkingV1IngressClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateNetworkingV1IngressClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateNodeV1RuntimeClassApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1RuntimeClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {}
func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateNodeV1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1RuntimeClassApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1RuntimeClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateNodeV1RuntimeClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateNodeV1RuntimeClassUnauthorized from json stream.
func (s *CreateNodeV1RuntimeClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateNodeV1RuntimeClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateNodeV1alpha1RuntimeClassApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1alpha1RuntimeClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1alpha1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1alpha1RuntimeClassApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1alpha1RuntimeClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1alpha1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1alpha1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateNodeV1alpha1RuntimeClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateNodeV1alpha1RuntimeClassUnauthorized from json stream.
func (s *CreateNodeV1alpha1RuntimeClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateNodeV1alpha1RuntimeClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateNodeV1beta1RuntimeClassApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1beta1RuntimeClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1beta1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateNodeV1beta1RuntimeClassApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1beta1RuntimeClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateNodeV1beta1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateNodeV1beta1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateNodeV1beta1RuntimeClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateNodeV1beta1RuntimeClassUnauthorized from json stream.
func (s *CreateNodeV1beta1RuntimeClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateNodeV1beta1RuntimeClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreatePolicyV1beta1PodSecurityPolicyApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreatePolicyV1beta1PodSecurityPolicyUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreatePolicyV1beta1PodSecurityPolicyUnauthorized from json stream.
func (s *CreatePolicyV1beta1PodSecurityPolicyUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreatePolicyV1beta1PodSecurityPolicyUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateRbacAuthorizationV1ClusterRoleApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlCreated) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (CreateRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s CreateRbacAuthorizationV1ClusterRoleBindingUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateRbacAuthorizationV1ClusterRoleBindingUnauthorized from json stream.
func (s *CreateRbacAuthorizationV1ClusterRoleBindingUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateRbacAuthorizationV1ClusterRoleBindingUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CreateRbacAuthorizationV1ClusterRoleUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateRbacAuthorizationV1ClusterRoleUnauthorized from json stream.
func (s *CreateRbacAuthorizationV1ClusterRoleUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateRbacAuthorizationV1ClusterRoleUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateSchedulingV1PriorityClassApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateSchedulingV1PriorityClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateSchedulingV1PriorityClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateSchedulingV1PriorityClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateSchedulingV1PriorityClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateSchedulingV1PriorityClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateSchedulingV1PriorityClassApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateSchedulingV1PriorityClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateSchedulingV1PriorityClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateSchedulingV1PriorityClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateSchedulingV1PriorityClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateSchedulingV1PriorityClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateSchedulingV1PriorityClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateSchedulingV1PriorityClassUnauthorized from json stream.
func (s *CreateSchedulingV1PriorityClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateSchedulingV1PriorityClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateStorageV1CSIDriverApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSIDriverApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSIDriverApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSIDriverApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSIDriverApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSIDriverApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSIDriverApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSIDriverApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateStorageV1CSIDriverUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateStorageV1CSIDriverUnauthorized from json stream.
func (s *CreateStorageV1CSIDriverUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateStorageV1CSIDriverUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateStorageV1CSINodeApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSINodeApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSINodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateStorageV1CSINodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1CSINodeApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSINodeApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1CSINodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1CSINodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateStorageV1CSINodeUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateStorageV1CSINodeUnauthorized from json stream.
func (s *CreateStorageV1CSINodeUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateStorageV1CSINodeUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateStorageV1StorageClassApplicationJSONAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationJSONAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1StorageClassApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1StorageClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {}
func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateStorageV1StorageClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1StorageClassApplicationYamlAccepted) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationYamlAccepted) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1StorageClassApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1StorageClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1StorageClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateStorageV1StorageClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateStorageV1StorageClassUnauthorized from json stream.
func (s *CreateStorageV1StorageClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateStorageV1StorageClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (CreateStorageV1VolumeAttachmentApplicationJSONAccepted) WriteJSON(j *json.Stream) {}
func (CreateStorageV1VolumeAttachmentApplicationJSONAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1VolumeAttachmentApplicationJSONCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1VolumeAttachmentApplicationJSONCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1VolumeAttachmentApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1VolumeAttachmentApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufAccepted) WriteJSON(j *json.Stream) {
}
func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufCreated) WriteJSON(j *json.Stream) {
}
func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufCreated) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (CreateStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1VolumeAttachmentApplicationYamlAccepted) WriteJSON(j *json.Stream) {}
func (CreateStorageV1VolumeAttachmentApplicationYamlAccepted) ReadJSON(i *json.Iter) error {
	return nil
}

func (CreateStorageV1VolumeAttachmentApplicationYamlCreated) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1VolumeAttachmentApplicationYamlCreated) ReadJSON(i *json.Iter) error { return nil }

func (CreateStorageV1VolumeAttachmentApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (CreateStorageV1VolumeAttachmentApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s CreateStorageV1VolumeAttachmentUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads CreateStorageV1VolumeAttachmentUnauthorized from json stream.
func (s *CreateStorageV1VolumeAttachmentUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateStorageV1VolumeAttachmentUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationUnauthorized from json stream.
func (s *DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationUnauthorized from json stream.
func (s *DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteApiextensionsV1CollectionCustomResourceDefinitionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteApiextensionsV1CollectionCustomResourceDefinitionUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteApiextensionsV1CollectionCustomResourceDefinitionUnauthorized from json stream.
func (s *DeleteApiextensionsV1CollectionCustomResourceDefinitionUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteApiextensionsV1CollectionCustomResourceDefinitionUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteApiregistrationV1CollectionAPIServiceApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteApiregistrationV1CollectionAPIServiceApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteApiregistrationV1CollectionAPIServiceApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteApiregistrationV1CollectionAPIServiceApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteApiregistrationV1CollectionAPIServiceApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteApiregistrationV1CollectionAPIServiceApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteApiregistrationV1CollectionAPIServiceUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteApiregistrationV1CollectionAPIServiceUnauthorized from json stream.
func (s *DeleteApiregistrationV1CollectionAPIServiceUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteApiregistrationV1CollectionAPIServiceUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteCertificatesV1CollectionCertificateSigningRequestApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteCertificatesV1CollectionCertificateSigningRequestUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteCertificatesV1CollectionCertificateSigningRequestUnauthorized from json stream.
func (s *DeleteCertificatesV1CollectionCertificateSigningRequestUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteCertificatesV1CollectionCertificateSigningRequestUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteCoreV1CollectionNodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (DeleteCoreV1CollectionNodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (DeleteCoreV1CollectionNodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (DeleteCoreV1CollectionNodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteCoreV1CollectionNodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (DeleteCoreV1CollectionNodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s DeleteCoreV1CollectionNodeUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteCoreV1CollectionNodeUnauthorized from json stream.
func (s *DeleteCoreV1CollectionNodeUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteCoreV1CollectionNodeUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteCoreV1CollectionPersistentVolumeApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteCoreV1CollectionPersistentVolumeApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteCoreV1CollectionPersistentVolumeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteCoreV1CollectionPersistentVolumeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteCoreV1CollectionPersistentVolumeApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteCoreV1CollectionPersistentVolumeApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteCoreV1CollectionPersistentVolumeUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteCoreV1CollectionPersistentVolumeUnauthorized from json stream.
func (s *DeleteCoreV1CollectionPersistentVolumeUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteCoreV1CollectionPersistentVolumeUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaUnauthorized from json stream.
func (s *DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteFlowcontrolApiserverV1beta1CollectionFlowSchemaUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationUnauthorized from json stream.
func (s *DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaUnauthorized from json stream.
func (s *DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationUnauthorized from json stream.
func (s *DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteInternalApiserverV1alpha1CollectionStorageVersionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteInternalApiserverV1alpha1CollectionStorageVersionUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteInternalApiserverV1alpha1CollectionStorageVersionUnauthorized from json stream.
func (s *DeleteInternalApiserverV1alpha1CollectionStorageVersionUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteInternalApiserverV1alpha1CollectionStorageVersionUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteNetworkingV1CollectionIngressClassApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteNetworkingV1CollectionIngressClassApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNetworkingV1CollectionIngressClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteNetworkingV1CollectionIngressClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNetworkingV1CollectionIngressClassApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteNetworkingV1CollectionIngressClassApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteNetworkingV1CollectionIngressClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteNetworkingV1CollectionIngressClassUnauthorized from json stream.
func (s *DeleteNetworkingV1CollectionIngressClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteNetworkingV1CollectionIngressClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteNodeV1CollectionRuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (DeleteNodeV1CollectionRuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (DeleteNodeV1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteNodeV1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNodeV1CollectionRuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (DeleteNodeV1CollectionRuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s DeleteNodeV1CollectionRuntimeClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteNodeV1CollectionRuntimeClassUnauthorized from json stream.
func (s *DeleteNodeV1CollectionRuntimeClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteNodeV1CollectionRuntimeClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteNodeV1alpha1CollectionRuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteNodeV1alpha1CollectionRuntimeClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteNodeV1alpha1CollectionRuntimeClassUnauthorized from json stream.
func (s *DeleteNodeV1alpha1CollectionRuntimeClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteNodeV1alpha1CollectionRuntimeClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteNodeV1beta1CollectionRuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteNodeV1beta1CollectionRuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNodeV1beta1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteNodeV1beta1CollectionRuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteNodeV1beta1CollectionRuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteNodeV1beta1CollectionRuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteNodeV1beta1CollectionRuntimeClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteNodeV1beta1CollectionRuntimeClassUnauthorized from json stream.
func (s *DeleteNodeV1beta1CollectionRuntimeClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteNodeV1beta1CollectionRuntimeClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeletePolicyV1beta1CollectionPodSecurityPolicyApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeletePolicyV1beta1CollectionPodSecurityPolicyUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeletePolicyV1beta1CollectionPodSecurityPolicyUnauthorized from json stream.
func (s *DeletePolicyV1beta1CollectionPodSecurityPolicyUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeletePolicyV1beta1CollectionPodSecurityPolicyUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteRbacAuthorizationV1CollectionClusterRoleApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (DeleteRbacAuthorizationV1CollectionClusterRoleBindingApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteRbacAuthorizationV1CollectionClusterRoleBindingUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteRbacAuthorizationV1CollectionClusterRoleBindingUnauthorized from json stream.
func (s *DeleteRbacAuthorizationV1CollectionClusterRoleBindingUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteRbacAuthorizationV1CollectionClusterRoleBindingUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeleteRbacAuthorizationV1CollectionClusterRoleUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteRbacAuthorizationV1CollectionClusterRoleUnauthorized from json stream.
func (s *DeleteRbacAuthorizationV1CollectionClusterRoleUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteRbacAuthorizationV1CollectionClusterRoleUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteSchedulingV1CollectionPriorityClassApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteSchedulingV1CollectionPriorityClassApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteSchedulingV1CollectionPriorityClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteSchedulingV1CollectionPriorityClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteSchedulingV1CollectionPriorityClassApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteSchedulingV1CollectionPriorityClassApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteSchedulingV1CollectionPriorityClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteSchedulingV1CollectionPriorityClassUnauthorized from json stream.
func (s *DeleteSchedulingV1CollectionPriorityClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteSchedulingV1CollectionPriorityClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteStorageV1CollectionCSIDriverApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (DeleteStorageV1CollectionCSIDriverApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (DeleteStorageV1CollectionCSIDriverApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteStorageV1CollectionCSIDriverApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionCSIDriverApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (DeleteStorageV1CollectionCSIDriverApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s DeleteStorageV1CollectionCSIDriverUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStorageV1CollectionCSIDriverUnauthorized from json stream.
func (s *DeleteStorageV1CollectionCSIDriverUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteStorageV1CollectionCSIDriverUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteStorageV1CollectionCSINodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (DeleteStorageV1CollectionCSINodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (DeleteStorageV1CollectionCSINodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (DeleteStorageV1CollectionCSINodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionCSINodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (DeleteStorageV1CollectionCSINodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s DeleteStorageV1CollectionCSINodeUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStorageV1CollectionCSINodeUnauthorized from json stream.
func (s *DeleteStorageV1CollectionCSINodeUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteStorageV1CollectionCSINodeUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteStorageV1CollectionStorageClassApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteStorageV1CollectionStorageClassApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionStorageClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteStorageV1CollectionStorageClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionStorageClassApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteStorageV1CollectionStorageClassApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteStorageV1CollectionStorageClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStorageV1CollectionStorageClassUnauthorized from json stream.
func (s *DeleteStorageV1CollectionStorageClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteStorageV1CollectionStorageClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (DeleteStorageV1CollectionVolumeAttachmentApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (DeleteStorageV1CollectionVolumeAttachmentApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionVolumeAttachmentApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (DeleteStorageV1CollectionVolumeAttachmentApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (DeleteStorageV1CollectionVolumeAttachmentApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (DeleteStorageV1CollectionVolumeAttachmentApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s DeleteStorageV1CollectionVolumeAttachmentUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads DeleteStorageV1CollectionVolumeAttachmentUnauthorized from json stream.
func (s *DeleteStorageV1CollectionVolumeAttachmentUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteStorageV1CollectionVolumeAttachmentUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAPIVersionsApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAPIVersionsApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAPIVersionsApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetAPIVersionsApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAPIVersionsApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAPIVersionsApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAPIVersionsUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAPIVersionsUnauthorized from json stream.
func (s *GetAPIVersionsUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAPIVersionsUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAdmissionregistrationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAdmissionregistrationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAdmissionregistrationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAdmissionregistrationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAdmissionregistrationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAdmissionregistrationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAdmissionregistrationAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAdmissionregistrationAPIGroupUnauthorized from json stream.
func (s *GetAdmissionregistrationAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAdmissionregistrationAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAdmissionregistrationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (GetAdmissionregistrationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAdmissionregistrationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetAdmissionregistrationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAdmissionregistrationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (GetAdmissionregistrationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetAdmissionregistrationV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAdmissionregistrationV1APIResourcesUnauthorized from json stream.
func (s *GetAdmissionregistrationV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAdmissionregistrationV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetApiextensionsAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetApiextensionsAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetApiextensionsAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetApiextensionsAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetApiextensionsAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetApiextensionsAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetApiextensionsAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetApiextensionsAPIGroupUnauthorized from json stream.
func (s *GetApiextensionsAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetApiextensionsAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetApiextensionsV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetApiextensionsV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetApiextensionsV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetApiextensionsV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetApiextensionsV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetApiextensionsV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetApiextensionsV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetApiextensionsV1APIResourcesUnauthorized from json stream.
func (s *GetApiextensionsV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetApiextensionsV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetApiregistrationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetApiregistrationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetApiregistrationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetApiregistrationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetApiregistrationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetApiregistrationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetApiregistrationAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetApiregistrationAPIGroupUnauthorized from json stream.
func (s *GetApiregistrationAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetApiregistrationAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetApiregistrationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetApiregistrationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetApiregistrationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetApiregistrationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetApiregistrationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetApiregistrationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetApiregistrationV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetApiregistrationV1APIResourcesUnauthorized from json stream.
func (s *GetApiregistrationV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetApiregistrationV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAppsAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAppsAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAppsAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetAppsAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAppsAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAppsAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAppsAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAppsAPIGroupUnauthorized from json stream.
func (s *GetAppsAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAppsAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAppsV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAppsV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAppsV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAppsV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAppsV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAppsV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAppsV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAppsV1APIResourcesUnauthorized from json stream.
func (s *GetAppsV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAppsV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAuthenticationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAuthenticationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAuthenticationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAuthenticationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAuthenticationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAuthenticationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAuthenticationAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAuthenticationAPIGroupUnauthorized from json stream.
func (s *GetAuthenticationAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAuthenticationAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAuthenticationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAuthenticationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAuthenticationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAuthenticationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAuthenticationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAuthenticationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAuthenticationV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAuthenticationV1APIResourcesUnauthorized from json stream.
func (s *GetAuthenticationV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAuthenticationV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAuthorizationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAuthorizationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAuthorizationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAuthorizationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAuthorizationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAuthorizationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAuthorizationAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAuthorizationAPIGroupUnauthorized from json stream.
func (s *GetAuthorizationAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAuthorizationAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAuthorizationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAuthorizationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAuthorizationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAuthorizationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAuthorizationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAuthorizationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAuthorizationV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAuthorizationV1APIResourcesUnauthorized from json stream.
func (s *GetAuthorizationV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAuthorizationV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAutoscalingAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAutoscalingAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAutoscalingAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAutoscalingAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAutoscalingAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAutoscalingAPIGroupUnauthorized from json stream.
func (s *GetAutoscalingAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAutoscalingAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAutoscalingV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAutoscalingV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetAutoscalingV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAutoscalingV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAutoscalingV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAutoscalingV1APIResourcesUnauthorized from json stream.
func (s *GetAutoscalingV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAutoscalingV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAutoscalingV2beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV2beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAutoscalingV2beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetAutoscalingV2beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAutoscalingV2beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV2beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAutoscalingV2beta1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAutoscalingV2beta1APIResourcesUnauthorized from json stream.
func (s *GetAutoscalingV2beta1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAutoscalingV2beta1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetAutoscalingV2beta2APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV2beta2APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetAutoscalingV2beta2APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetAutoscalingV2beta2APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetAutoscalingV2beta2APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetAutoscalingV2beta2APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetAutoscalingV2beta2APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetAutoscalingV2beta2APIResourcesUnauthorized from json stream.
func (s *GetAutoscalingV2beta2APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetAutoscalingV2beta2APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetBatchAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetBatchAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetBatchAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetBatchAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetBatchAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetBatchAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetBatchAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetBatchAPIGroupUnauthorized from json stream.
func (s *GetBatchAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetBatchAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetBatchV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetBatchV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetBatchV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetBatchV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetBatchV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetBatchV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetBatchV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetBatchV1APIResourcesUnauthorized from json stream.
func (s *GetBatchV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetBatchV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetBatchV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetBatchV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetBatchV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetBatchV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetBatchV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetBatchV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetBatchV1beta1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetBatchV1beta1APIResourcesUnauthorized from json stream.
func (s *GetBatchV1beta1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetBatchV1beta1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetCertificatesAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCertificatesAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCertificatesAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetCertificatesAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetCertificatesAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCertificatesAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCertificatesAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCertificatesAPIGroupUnauthorized from json stream.
func (s *GetCertificatesAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetCertificatesAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetCertificatesV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCertificatesV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCertificatesV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetCertificatesV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetCertificatesV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCertificatesV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCertificatesV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCertificatesV1APIResourcesUnauthorized from json stream.
func (s *GetCertificatesV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetCertificatesV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GetCodeVersionUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCodeVersionUnauthorized from json stream.
func (s *GetCodeVersionUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetCodeVersionUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetCoordinationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCoordinationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCoordinationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetCoordinationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetCoordinationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCoordinationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCoordinationAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCoordinationAPIGroupUnauthorized from json stream.
func (s *GetCoordinationAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetCoordinationAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetCoordinationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCoordinationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCoordinationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetCoordinationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetCoordinationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCoordinationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCoordinationV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCoordinationV1APIResourcesUnauthorized from json stream.
func (s *GetCoordinationV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetCoordinationV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetCoreAPIVersionsApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCoreAPIVersionsApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCoreAPIVersionsApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetCoreAPIVersionsApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCoreAPIVersionsApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCoreAPIVersionsApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCoreAPIVersionsUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCoreAPIVersionsUnauthorized from json stream.
func (s *GetCoreAPIVersionsUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetCoreAPIVersionsUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetCoreV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetCoreV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetCoreV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetCoreV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetCoreV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetCoreV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetCoreV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetCoreV1APIResourcesUnauthorized from json stream.
func (s *GetCoreV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetCoreV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetDiscoveryAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetDiscoveryAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetDiscoveryAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetDiscoveryAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetDiscoveryAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetDiscoveryAPIGroupUnauthorized from json stream.
func (s *GetDiscoveryAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetDiscoveryAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetDiscoveryV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetDiscoveryV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetDiscoveryV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetDiscoveryV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetDiscoveryV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetDiscoveryV1APIResourcesUnauthorized from json stream.
func (s *GetDiscoveryV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetDiscoveryV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetDiscoveryV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetDiscoveryV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetDiscoveryV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetDiscoveryV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetDiscoveryV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetDiscoveryV1beta1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetDiscoveryV1beta1APIResourcesUnauthorized from json stream.
func (s *GetDiscoveryV1beta1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetDiscoveryV1beta1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetEventsAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetEventsAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetEventsAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetEventsAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetEventsAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetEventsAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetEventsAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetEventsAPIGroupUnauthorized from json stream.
func (s *GetEventsAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetEventsAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetEventsV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetEventsV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetEventsV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetEventsV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetEventsV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetEventsV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetEventsV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetEventsV1APIResourcesUnauthorized from json stream.
func (s *GetEventsV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetEventsV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetEventsV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetEventsV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetEventsV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetEventsV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetEventsV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetEventsV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetEventsV1beta1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetEventsV1beta1APIResourcesUnauthorized from json stream.
func (s *GetEventsV1beta1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetEventsV1beta1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetFlowcontrolApiserverAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetFlowcontrolApiserverAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetFlowcontrolApiserverAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetFlowcontrolApiserverAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetFlowcontrolApiserverAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetFlowcontrolApiserverAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetFlowcontrolApiserverAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetFlowcontrolApiserverAPIGroupUnauthorized from json stream.
func (s *GetFlowcontrolApiserverAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetFlowcontrolApiserverAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (GetFlowcontrolApiserverV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized from json stream.
func (s *GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (GetFlowcontrolApiserverV1beta2APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized from json stream.
func (s *GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetInternalApiserverAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetInternalApiserverAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetInternalApiserverAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetInternalApiserverAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetInternalApiserverAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetInternalApiserverAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetInternalApiserverAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetInternalApiserverAPIGroupUnauthorized from json stream.
func (s *GetInternalApiserverAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetInternalApiserverAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetInternalApiserverV1alpha1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (GetInternalApiserverV1alpha1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetInternalApiserverV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetInternalApiserverV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetInternalApiserverV1alpha1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (GetInternalApiserverV1alpha1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetInternalApiserverV1alpha1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetInternalApiserverV1alpha1APIResourcesUnauthorized from json stream.
func (s *GetInternalApiserverV1alpha1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetInternalApiserverV1alpha1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetNetworkingAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNetworkingAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNetworkingAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetNetworkingAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetNetworkingAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNetworkingAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNetworkingAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNetworkingAPIGroupUnauthorized from json stream.
func (s *GetNetworkingAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetNetworkingAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetNetworkingV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNetworkingV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNetworkingV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetNetworkingV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetNetworkingV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNetworkingV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNetworkingV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNetworkingV1APIResourcesUnauthorized from json stream.
func (s *GetNetworkingV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetNetworkingV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetNodeAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNodeAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNodeAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetNodeAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNodeAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNodeAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNodeAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNodeAPIGroupUnauthorized from json stream.
func (s *GetNodeAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetNodeAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetNodeV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNodeV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetNodeV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetNodeV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNodeV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNodeV1APIResourcesUnauthorized from json stream.
func (s *GetNodeV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetNodeV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetNodeV1alpha1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1alpha1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNodeV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetNodeV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetNodeV1alpha1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1alpha1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNodeV1alpha1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNodeV1alpha1APIResourcesUnauthorized from json stream.
func (s *GetNodeV1alpha1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetNodeV1alpha1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetNodeV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetNodeV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetNodeV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetNodeV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetNodeV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetNodeV1beta1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetNodeV1beta1APIResourcesUnauthorized from json stream.
func (s *GetNodeV1beta1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetNodeV1beta1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetPolicyAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetPolicyAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetPolicyAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetPolicyAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetPolicyAPIGroupUnauthorized from json stream.
func (s *GetPolicyAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetPolicyAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetPolicyV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetPolicyV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetPolicyV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetPolicyV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetPolicyV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetPolicyV1APIResourcesUnauthorized from json stream.
func (s *GetPolicyV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetPolicyV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetPolicyV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetPolicyV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetPolicyV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetPolicyV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetPolicyV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetPolicyV1beta1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetPolicyV1beta1APIResourcesUnauthorized from json stream.
func (s *GetPolicyV1beta1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetPolicyV1beta1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetRbacAuthorizationAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetRbacAuthorizationAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetRbacAuthorizationAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetRbacAuthorizationAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetRbacAuthorizationAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetRbacAuthorizationAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetRbacAuthorizationAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetRbacAuthorizationAPIGroupUnauthorized from json stream.
func (s *GetRbacAuthorizationAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetRbacAuthorizationAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetRbacAuthorizationV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetRbacAuthorizationV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetRbacAuthorizationV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (GetRbacAuthorizationV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetRbacAuthorizationV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetRbacAuthorizationV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetRbacAuthorizationV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetRbacAuthorizationV1APIResourcesUnauthorized from json stream.
func (s *GetRbacAuthorizationV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetRbacAuthorizationV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetSchedulingAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetSchedulingAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetSchedulingAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetSchedulingAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetSchedulingAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetSchedulingAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetSchedulingAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetSchedulingAPIGroupUnauthorized from json stream.
func (s *GetSchedulingAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetSchedulingAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetSchedulingV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetSchedulingV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetSchedulingV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetSchedulingV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetSchedulingV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetSchedulingV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetSchedulingV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetSchedulingV1APIResourcesUnauthorized from json stream.
func (s *GetSchedulingV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetSchedulingV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON) WriteJSON(j *json.Stream) {}
func (GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetServiceAccountIssuerOpenIDConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetServiceAccountIssuerOpenIDConfigurationUnauthorized from json stream.
func (s *GetServiceAccountIssuerOpenIDConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetServiceAccountIssuerOpenIDConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetServiceAccountIssuerOpenIDKeysetOKApplicationJwkSetJSON) WriteJSON(j *json.Stream) {}
func (GetServiceAccountIssuerOpenIDKeysetOKApplicationJwkSetJSON) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s GetServiceAccountIssuerOpenIDKeysetUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetServiceAccountIssuerOpenIDKeysetUnauthorized from json stream.
func (s *GetServiceAccountIssuerOpenIDKeysetUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetServiceAccountIssuerOpenIDKeysetUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetStorageAPIGroupApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetStorageAPIGroupApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetStorageAPIGroupApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (GetStorageAPIGroupApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (GetStorageAPIGroupApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetStorageAPIGroupApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetStorageAPIGroupUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetStorageAPIGroupUnauthorized from json stream.
func (s *GetStorageAPIGroupUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetStorageAPIGroupUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetStorageV1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetStorageV1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetStorageV1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetStorageV1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetStorageV1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetStorageV1APIResourcesUnauthorized from json stream.
func (s *GetStorageV1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetStorageV1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetStorageV1alpha1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1alpha1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetStorageV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetStorageV1alpha1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetStorageV1alpha1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1alpha1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetStorageV1alpha1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetStorageV1alpha1APIResourcesUnauthorized from json stream.
func (s *GetStorageV1alpha1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetStorageV1alpha1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (GetStorageV1beta1APIResourcesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1beta1APIResourcesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (GetStorageV1beta1APIResourcesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (GetStorageV1beta1APIResourcesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (GetStorageV1beta1APIResourcesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (GetStorageV1beta1APIResourcesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s GetStorageV1beta1APIResourcesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads GetStorageV1beta1APIResourcesUnauthorized from json stream.
func (s *GetStorageV1beta1APIResourcesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetStorageV1beta1APIResourcesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admissionReviewVersions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.AdmissionReviewVersions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("clientConfig")
	s.ClientConfig.WriteJSON(j)
	if s.FailurePolicy.Set {
		more.More()
		j.WriteObjectField("failurePolicy")
		s.FailurePolicy.WriteJSON(j)
	}
	if s.MatchPolicy.Set {
		more.More()
		j.WriteObjectField("matchPolicy")
		s.MatchPolicy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.ObjectSelector.Set {
		more.More()
		j.WriteObjectField("objectSelector")
		s.ObjectSelector.WriteJSON(j)
	}
	if s.ReinvocationPolicy.Set {
		more.More()
		j.WriteObjectField("reinvocationPolicy")
		s.ReinvocationPolicy.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("sideEffects")
	j.WriteString(s.SideEffects)
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhook from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1MutatingWebhook to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "admissionReviewVersions":
			s.AdmissionReviewVersions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AdmissionReviewVersions = append(s.AdmissionReviewVersions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "clientConfig":
			if err := s.ClientConfig.ReadJSON(i); err != nil {
				return err
			}
		case "failurePolicy":
			s.FailurePolicy.Reset()
			if err := s.FailurePolicy.ReadJSON(i); err != nil {
				return err
			}
		case "matchPolicy":
			s.MatchPolicy.Reset()
			if err := s.MatchPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "namespaceSelector":
			s.NamespaceSelector.Reset()
			if err := s.NamespaceSelector.ReadJSON(i); err != nil {
				return err
			}
		case "objectSelector":
			s.ObjectSelector.Reset()
			if err := s.ObjectSelector.ReadJSON(i); err != nil {
				return err
			}
		case "reinvocationPolicy":
			s.ReinvocationPolicy.Reset()
			if err := s.ReinvocationPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "rules":
			s.Rules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAdmissionregistrationV1RuleWithOperations
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Rules = append(s.Rules, elem)
				return nil
			}); err != nil {
				return err
			}
		case "sideEffects":
			v, err := i.Str()
			s.SideEffects = string(v)
			if err != nil {
				return err
			}
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Webhooks != nil {
		more.More()
		j.WriteObjectField("webhooks")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Webhooks {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "webhooks":
			s.Webhooks = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAdmissionregistrationV1MutatingWebhook
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Webhooks = append(s.Webhooks, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1RuleWithOperations) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroups != nil {
		more.More()
		j.WriteObjectField("apiGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiGroups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ApiVersions != nil {
		more.More()
		j.WriteObjectField("apiVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiVersions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Operations != nil {
		more.More()
		j.WriteObjectField("operations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Operations {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Resources != nil {
		more.More()
		j.WriteObjectField("resources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Resources {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Scope.Set {
		more.More()
		j.WriteObjectField("scope")
		s.Scope.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1RuleWithOperations from json stream.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1RuleWithOperations to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiGroups":
			s.ApiGroups = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ApiGroups = append(s.ApiGroups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "apiVersions":
			s.ApiVersions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ApiVersions = append(s.ApiVersions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "operations":
			s.Operations = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Operations = append(s.Operations, elem)
				return nil
			}); err != nil {
				return err
			}
		case "resources":
			s.Resources = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Resources = append(s.Resources, elem)
				return nil
			}); err != nil {
				return err
			}
		case "scope":
			s.Scope.Reset()
			if err := s.Scope.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ServiceReference from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1ServiceReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "namespace":
			v, err := i.Str()
			s.Namespace = string(v)
			if err != nil {
				return err
			}
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				return err
			}
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admissionReviewVersions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.AdmissionReviewVersions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("clientConfig")
	s.ClientConfig.WriteJSON(j)
	if s.FailurePolicy.Set {
		more.More()
		j.WriteObjectField("failurePolicy")
		s.FailurePolicy.WriteJSON(j)
	}
	if s.MatchPolicy.Set {
		more.More()
		j.WriteObjectField("matchPolicy")
		s.MatchPolicy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.ObjectSelector.Set {
		more.More()
		j.WriteObjectField("objectSelector")
		s.ObjectSelector.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("sideEffects")
	j.WriteString(s.SideEffects)
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhook from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1ValidatingWebhook to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "admissionReviewVersions":
			s.AdmissionReviewVersions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AdmissionReviewVersions = append(s.AdmissionReviewVersions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "clientConfig":
			if err := s.ClientConfig.ReadJSON(i); err != nil {
				return err
			}
		case "failurePolicy":
			s.FailurePolicy.Reset()
			if err := s.FailurePolicy.ReadJSON(i); err != nil {
				return err
			}
		case "matchPolicy":
			s.MatchPolicy.Reset()
			if err := s.MatchPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "namespaceSelector":
			s.NamespaceSelector.Reset()
			if err := s.NamespaceSelector.ReadJSON(i); err != nil {
				return err
			}
		case "objectSelector":
			s.ObjectSelector.Reset()
			if err := s.ObjectSelector.ReadJSON(i); err != nil {
				return err
			}
		case "rules":
			s.Rules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAdmissionregistrationV1RuleWithOperations
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Rules = append(s.Rules, elem)
				return nil
			}); err != nil {
				return err
			}
		case "sideEffects":
			v, err := i.Str()
			s.SideEffects = string(v)
			if err != nil {
				return err
			}
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Webhooks != nil {
		more.More()
		j.WriteObjectField("webhooks")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Webhooks {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "webhooks":
			s.Webhooks = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAdmissionregistrationV1ValidatingWebhook
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Webhooks = append(s.Webhooks, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1WebhookClientConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CaBundle != nil {
		more.More()
		j.WriteObjectField("caBundle")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CaBundle {
			_ = elem // Unsupported kind "primitive".
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1WebhookClientConfig from json stream.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAdmissionregistrationV1WebhookClientConfig to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "caBundle":
			s.CaBundle = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem byte
				if err := fmt.Errorf(`decoding of "byte" (primitive) is not implemented`); err != nil {
					return err
				}
				s.CaBundle = append(s.CaBundle, elem)
				return nil
			}); err != nil {
				return err
			}
		case "service":
			s.Service.Reset()
			if err := s.Service.ReadJSON(i); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiServerID.Set {
		more.More()
		j.WriteObjectField("apiServerID")
		s.ApiServerID.WriteJSON(j)
	}
	if s.DecodableVersions != nil {
		more.More()
		j.WriteObjectField("decodableVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.DecodableVersions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EncodingVersion.Set {
		more.More()
		j.WriteObjectField("encodingVersion")
		s.EncodingVersion.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiServerID":
			s.ApiServerID.Reset()
			if err := s.ApiServerID.ReadJSON(i); err != nil {
				return err
			}
		case "decodableVersions":
			s.DecodableVersions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.DecodableVersions = append(s.DecodableVersions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "encodingVersion":
			s.EncodingVersion.Reset()
			if err := s.EncodingVersion.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersion from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1StorageVersion to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("reason")
	j.WriteString(s.Reason)
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			v, err := i.Str()
			s.Reason = string(v)
			if err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionList from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1StorageVersionList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIApiserverinternalV1alpha1StorageVersion
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CommonEncodingVersion.Set {
		more.More()
		j.WriteObjectField("commonEncodingVersion")
		s.CommonEncodingVersion.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.StorageVersions != nil {
		more.More()
		j.WriteObjectField("storageVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.StorageVersions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "commonEncodingVersion":
			s.CommonEncodingVersion.Reset()
			if err := s.CommonEncodingVersion.ReadJSON(i); err != nil {
				return err
			}
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "storageVersions":
			s.StorageVersions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.StorageVersions = append(s.StorageVersions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ControllerRevision) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Data != nil {
		more.More()
		j.WriteObjectField("data")
		s.Data.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("revision")
	j.WriteInt64(s.Revision)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ControllerRevision from json stream.
func (s *IoK8sAPIAppsV1ControllerRevision) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ControllerRevision to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "data":
			s.Data = nil
			var elem IoK8sApimachineryPkgRuntimeRawExtension
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Data = &elem
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "revision":
			v, err := i.Int64()
			s.Revision = int64(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ControllerRevisionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ControllerRevisionList from json stream.
func (s *IoK8sAPIAppsV1ControllerRevisionList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ControllerRevisionList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAppsV1ControllerRevision
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSet from json stream.
func (s *IoK8sAPIAppsV1DaemonSet) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSet to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetCondition from json stream.
func (s *IoK8sAPIAppsV1DaemonSetCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSetCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetList from json stream.
func (s *IoK8sAPIAppsV1DaemonSetList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSetList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAppsV1DaemonSet
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		more.More()
		j.WriteObjectField("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	if s.UpdateStrategy.Set {
		more.More()
		j.WriteObjectField("updateStrategy")
		s.UpdateStrategy.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetSpec from json stream.
func (s *IoK8sAPIAppsV1DaemonSetSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSetSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				return err
			}
		case "revisionHistoryLimit":
			s.RevisionHistoryLimit.Reset()
			if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
				return err
			}
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				return err
			}
		case "updateStrategy":
			s.UpdateStrategy.Reset()
			if err := s.UpdateStrategy.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CollisionCount.Set {
		more.More()
		j.WriteObjectField("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentNumberScheduled")
	j.WriteInt32(s.CurrentNumberScheduled)
	more.More()
	j.WriteObjectField("desiredNumberScheduled")
	j.WriteInt32(s.DesiredNumberScheduled)
	if s.NumberAvailable.Set {
		more.More()
		j.WriteObjectField("numberAvailable")
		s.NumberAvailable.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("numberMisscheduled")
	j.WriteInt32(s.NumberMisscheduled)
	more.More()
	j.WriteObjectField("numberReady")
	j.WriteInt32(s.NumberReady)
	if s.NumberUnavailable.Set {
		more.More()
		j.WriteObjectField("numberUnavailable")
		s.NumberUnavailable.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.UpdatedNumberScheduled.Set {
		more.More()
		j.WriteObjectField("updatedNumberScheduled")
		s.UpdatedNumberScheduled.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetStatus from json stream.
func (s *IoK8sAPIAppsV1DaemonSetStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSetStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "collisionCount":
			s.CollisionCount.Reset()
			if err := s.CollisionCount.ReadJSON(i); err != nil {
				return err
			}
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAppsV1DaemonSetCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "currentNumberScheduled":
			v, err := i.Int32()
			s.CurrentNumberScheduled = int32(v)
			if err != nil {
				return err
			}
		case "desiredNumberScheduled":
			v, err := i.Int32()
			s.DesiredNumberScheduled = int32(v)
			if err != nil {
				return err
			}
		case "numberAvailable":
			s.NumberAvailable.Reset()
			if err := s.NumberAvailable.ReadJSON(i); err != nil {
				return err
			}
		case "numberMisscheduled":
			v, err := i.Int32()
			s.NumberMisscheduled = int32(v)
			if err != nil {
				return err
			}
		case "numberReady":
			v, err := i.Int32()
			s.NumberReady = int32(v)
			if err != nil {
				return err
			}
		case "numberUnavailable":
			s.NumberUnavailable.Reset()
			if err := s.NumberUnavailable.ReadJSON(i); err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		case "updatedNumberScheduled":
			s.UpdatedNumberScheduled.Reset()
			if err := s.UpdatedNumberScheduled.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetUpdateStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.RollingUpdate.Set {
		more.More()
		j.WriteObjectField("rollingUpdate")
		s.RollingUpdate.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetUpdateStrategy from json stream.
func (s *IoK8sAPIAppsV1DaemonSetUpdateStrategy) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DaemonSetUpdateStrategy to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "rollingUpdate":
			s.RollingUpdate.Reset()
			if err := s.RollingUpdate.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1Deployment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1Deployment from json stream.
func (s *IoK8sAPIAppsV1Deployment) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1Deployment to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.LastUpdateTime.Set {
		more.More()
		j.WriteObjectField("lastUpdateTime")
		s.LastUpdateTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentCondition from json stream.
func (s *IoK8sAPIAppsV1DeploymentCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DeploymentCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "lastUpdateTime":
			s.LastUpdateTime.Reset()
			if err := s.LastUpdateTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentList from json stream.
func (s *IoK8sAPIAppsV1DeploymentList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DeploymentList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAppsV1Deployment
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Paused.Set {
		more.More()
		j.WriteObjectField("paused")
		s.Paused.WriteJSON(j)
	}
	if s.ProgressDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("progressDeadlineSeconds")
		s.ProgressDeadlineSeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		more.More()
		j.WriteObjectField("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	if s.Strategy.Set {
		more.More()
		j.WriteObjectField("strategy")
		s.Strategy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentSpec from json stream.
func (s *IoK8sAPIAppsV1DeploymentSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DeploymentSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				return err
			}
		case "paused":
			s.Paused.Reset()
			if err := s.Paused.ReadJSON(i); err != nil {
				return err
			}
		case "progressDeadlineSeconds":
			s.ProgressDeadlineSeconds.Reset()
			if err := s.ProgressDeadlineSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				return err
			}
		case "revisionHistoryLimit":
			s.RevisionHistoryLimit.Reset()
			if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
				return err
			}
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		case "strategy":
			s.Strategy.Reset()
			if err := s.Strategy.ReadJSON(i); err != nil {
				return err
			}
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvailableReplicas.Set {
		more.More()
		j.WriteObjectField("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	if s.CollisionCount.Set {
		more.More()
		j.WriteObjectField("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.UnavailableReplicas.Set {
		more.More()
		j.WriteObjectField("unavailableReplicas")
		s.UnavailableReplicas.WriteJSON(j)
	}
	if s.UpdatedReplicas.Set {
		more.More()
		j.WriteObjectField("updatedReplicas")
		s.UpdatedReplicas.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentStatus from json stream.
func (s *IoK8sAPIAppsV1DeploymentStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DeploymentStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "availableReplicas":
			s.AvailableReplicas.Reset()
			if err := s.AvailableReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "collisionCount":
			s.CollisionCount.Reset()
			if err := s.CollisionCount.ReadJSON(i); err != nil {
				return err
			}
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAppsV1DeploymentCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				return err
			}
		case "unavailableReplicas":
			s.UnavailableReplicas.Reset()
			if err := s.UnavailableReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "updatedReplicas":
			s.UpdatedReplicas.Reset()
			if err := s.UpdatedReplicas.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.RollingUpdate.Set {
		more.More()
		j.WriteObjectField("rollingUpdate")
		s.RollingUpdate.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentStrategy from json stream.
func (s *IoK8sAPIAppsV1DeploymentStrategy) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1DeploymentStrategy to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "rollingUpdate":
			s.RollingUpdate.Reset()
			if err := s.RollingUpdate.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSet from json stream.
func (s *IoK8sAPIAppsV1ReplicaSet) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ReplicaSet to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetCondition from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ReplicaSetCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetList from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ReplicaSetList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAppsV1ReplicaSet
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	if s.Template.Set {
		more.More()
		j.WriteObjectField("template")
		s.Template.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetSpec from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ReplicaSetSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				return err
			}
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				return err
			}
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		case "template":
			s.Template.Reset()
			if err := s.Template.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvailableReplicas.Set {
		more.More()
		j.WriteObjectField("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.FullyLabeledReplicas.Set {
		more.More()
		j.WriteObjectField("fullyLabeledReplicas")
		s.FullyLabeledReplicas.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("replicas")
	j.WriteInt32(s.Replicas)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetStatus from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1ReplicaSetStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "availableReplicas":
			s.AvailableReplicas.Reset()
			if err := s.AvailableReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAppsV1ReplicaSetCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "fullyLabeledReplicas":
			s.FullyLabeledReplicas.Reset()
			if err := s.FullyLabeledReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "replicas":
			v, err := i.Int32()
			s.Replicas = int32(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateDaemonSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MaxSurge.Set {
		more.More()
		j.WriteObjectField("maxSurge")
		s.MaxSurge.WriteJSON(j)
	}
	if s.MaxUnavailable.Set {
		more.More()
		j.WriteObjectField("maxUnavailable")
		s.MaxUnavailable.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateDaemonSet from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateDaemonSet) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1RollingUpdateDaemonSet to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "maxSurge":
			s.MaxSurge.Reset()
			if err := s.MaxSurge.ReadJSON(i); err != nil {
				return err
			}
		case "maxUnavailable":
			s.MaxUnavailable.Reset()
			if err := s.MaxUnavailable.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateDeployment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MaxSurge.Set {
		more.More()
		j.WriteObjectField("maxSurge")
		s.MaxSurge.WriteJSON(j)
	}
	if s.MaxUnavailable.Set {
		more.More()
		j.WriteObjectField("maxUnavailable")
		s.MaxUnavailable.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateDeployment from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateDeployment) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1RollingUpdateDeployment to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "maxSurge":
			s.MaxSurge.Reset()
			if err := s.MaxSurge.ReadJSON(i); err != nil {
				return err
			}
		case "maxUnavailable":
			s.MaxUnavailable.Reset()
			if err := s.MaxUnavailable.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Partition.Set {
		more.More()
		j.WriteObjectField("partition")
		s.Partition.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "partition":
			s.Partition.Reset()
			if err := s.Partition.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSet from json stream.
func (s *IoK8sAPIAppsV1StatefulSet) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSet to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetCondition from json stream.
func (s *IoK8sAPIAppsV1StatefulSetCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSetCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetList from json stream.
func (s *IoK8sAPIAppsV1StatefulSetList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSetList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAppsV1StatefulSet
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.PodManagementPolicy.Set {
		more.More()
		j.WriteObjectField("podManagementPolicy")
		s.PodManagementPolicy.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		more.More()
		j.WriteObjectField("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	more.More()
	j.WriteObjectField("serviceName")
	j.WriteString(s.ServiceName)
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	if s.UpdateStrategy.Set {
		more.More()
		j.WriteObjectField("updateStrategy")
		s.UpdateStrategy.WriteJSON(j)
	}
	if s.VolumeClaimTemplates != nil {
		more.More()
		j.WriteObjectField("volumeClaimTemplates")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeClaimTemplates {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetSpec from json stream.
func (s *IoK8sAPIAppsV1StatefulSetSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSetSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				return err
			}
		case "podManagementPolicy":
			s.PodManagementPolicy.Reset()
			if err := s.PodManagementPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				return err
			}
		case "revisionHistoryLimit":
			s.RevisionHistoryLimit.Reset()
			if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
				return err
			}
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		case "serviceName":
			v, err := i.Str()
			s.ServiceName = string(v)
			if err != nil {
				return err
			}
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				return err
			}
		case "updateStrategy":
			s.UpdateStrategy.Reset()
			if err := s.UpdateStrategy.ReadJSON(i); err != nil {
				return err
			}
		case "volumeClaimTemplates":
			s.VolumeClaimTemplates = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PersistentVolumeClaim
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.VolumeClaimTemplates = append(s.VolumeClaimTemplates, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("availableReplicas")
	j.WriteInt32(s.AvailableReplicas)
	if s.CollisionCount.Set {
		more.More()
		j.WriteObjectField("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.CurrentReplicas.Set {
		more.More()
		j.WriteObjectField("currentReplicas")
		s.CurrentReplicas.WriteJSON(j)
	}
	if s.CurrentRevision.Set {
		more.More()
		j.WriteObjectField("currentRevision")
		s.CurrentRevision.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("replicas")
	j.WriteInt32(s.Replicas)
	if s.UpdateRevision.Set {
		more.More()
		j.WriteObjectField("updateRevision")
		s.UpdateRevision.WriteJSON(j)
	}
	if s.UpdatedReplicas.Set {
		more.More()
		j.WriteObjectField("updatedReplicas")
		s.UpdatedReplicas.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetStatus from json stream.
func (s *IoK8sAPIAppsV1StatefulSetStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSetStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "availableReplicas":
			v, err := i.Int32()
			s.AvailableReplicas = int32(v)
			if err != nil {
				return err
			}
		case "collisionCount":
			s.CollisionCount.Reset()
			if err := s.CollisionCount.ReadJSON(i); err != nil {
				return err
			}
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAppsV1StatefulSetCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "currentReplicas":
			s.CurrentReplicas.Reset()
			if err := s.CurrentReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "currentRevision":
			s.CurrentRevision.Reset()
			if err := s.CurrentRevision.ReadJSON(i); err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "replicas":
			v, err := i.Int32()
			s.Replicas = int32(v)
			if err != nil {
				return err
			}
		case "updateRevision":
			s.UpdateRevision.Reset()
			if err := s.UpdateRevision.ReadJSON(i); err != nil {
				return err
			}
		case "updatedReplicas":
			s.UpdatedReplicas.Reset()
			if err := s.UpdatedReplicas.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetUpdateStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.RollingUpdate.Set {
		more.More()
		j.WriteObjectField("rollingUpdate")
		s.RollingUpdate.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetUpdateStrategy from json stream.
func (s *IoK8sAPIAppsV1StatefulSetUpdateStrategy) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAppsV1StatefulSetUpdateStrategy to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "rollingUpdate":
			s.RollingUpdate.Reset()
			if err := s.RollingUpdate.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReview from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReview) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthenticationV1TokenReview to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Audiences != nil {
		more.More()
		j.WriteObjectField("audiences")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Audiences {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Token.Set {
		more.More()
		j.WriteObjectField("token")
		s.Token.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReviewSpec from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReviewSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthenticationV1TokenReviewSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "audiences":
			s.Audiences = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Audiences = append(s.Audiences, elem)
				return nil
			}); err != nil {
				return err
			}
		case "token":
			s.Token.Reset()
			if err := s.Token.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Audiences != nil {
		more.More()
		j.WriteObjectField("audiences")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Audiences {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Authenticated.Set {
		more.More()
		j.WriteObjectField("authenticated")
		s.Authenticated.WriteJSON(j)
	}
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReviewStatus from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReviewStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthenticationV1TokenReviewStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "audiences":
			s.Audiences = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Audiences = append(s.Audiences, elem)
				return nil
			}); err != nil {
				return err
			}
		case "authenticated":
			s.Authenticated.Reset()
			if err := s.Authenticated.ReadJSON(i); err != nil {
				return err
			}
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1UserInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Extra != nil {
		more.More()
		j.WriteObjectField("extra")
		s.Extra.WriteJSON(j)
	}
	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthenticationV1UserInfo from json stream.
func (s *IoK8sAPIAuthenticationV1UserInfo) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthenticationV1UserInfo to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "extra":
			s.Extra = nil
			var elem IoK8sAPIAuthenticationV1UserInfoExtra
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Extra = &elem
		case "groups":
			s.Groups = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				return err
			}
		case "username":
			s.Username.Reset()
			if err := s.Username.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1UserInfoExtra) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthenticationV1UserInfoExtra from json stream.
func (s *IoK8sAPIAuthenticationV1UserInfoExtra) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthenticationV1UserInfoExtra to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1NonResourceAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.Verb.Set {
		more.More()
		j.WriteObjectField("verb")
		s.Verb.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1NonResourceAttributes from json stream.
func (s *IoK8sAPIAuthorizationV1NonResourceAttributes) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1NonResourceAttributes to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				return err
			}
		case "verb":
			s.Verb.Reset()
			if err := s.Verb.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1NonResourceRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceURLs != nil {
		more.More()
		j.WriteObjectField("nonResourceURLs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceURLs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1NonResourceRule from json stream.
func (s *IoK8sAPIAuthorizationV1NonResourceRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1NonResourceRule to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nonResourceURLs":
			s.NonResourceURLs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.NonResourceURLs = append(s.NonResourceURLs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "verbs":
			s.Verbs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Verbs = append(s.Verbs, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1ResourceAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	if s.Subresource.Set {
		more.More()
		j.WriteObjectField("subresource")
		s.Subresource.WriteJSON(j)
	}
	if s.Verb.Set {
		more.More()
		j.WriteObjectField("verb")
		s.Verb.WriteJSON(j)
	}
	if s.Version.Set {
		more.More()
		j.WriteObjectField("version")
		s.Version.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1ResourceAttributes from json stream.
func (s *IoK8sAPIAuthorizationV1ResourceAttributes) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1ResourceAttributes to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				return err
			}
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				return err
			}
		case "subresource":
			s.Subresource.Reset()
			if err := s.Subresource.ReadJSON(i); err != nil {
				return err
			}
		case "verb":
			s.Verb.Reset()
			if err := s.Verb.ReadJSON(i); err != nil {
				return err
			}
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1ResourceRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroups != nil {
		more.More()
		j.WriteObjectField("apiGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiGroups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceNames != nil {
		more.More()
		j.WriteObjectField("resourceNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Resources != nil {
		more.More()
		j.WriteObjectField("resources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Resources {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1ResourceRule from json stream.
func (s *IoK8sAPIAuthorizationV1ResourceRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1ResourceRule to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiGroups":
			s.ApiGroups = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ApiGroups = append(s.ApiGroups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "resourceNames":
			s.ResourceNames = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ResourceNames = append(s.ResourceNames, elem)
				return nil
			}); err != nil {
				return err
			}
		case "resources":
			s.Resources = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Resources = append(s.Resources, elem)
				return nil
			}); err != nil {
				return err
			}
		case "verbs":
			s.Verbs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Verbs = append(s.Verbs, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectAccessReview from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReview) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SelfSubjectAccessReview to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceAttributes.Set {
		more.More()
		j.WriteObjectField("nonResourceAttributes")
		s.NonResourceAttributes.WriteJSON(j)
	}
	if s.ResourceAttributes.Set {
		more.More()
		j.WriteObjectField("resourceAttributes")
		s.ResourceAttributes.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nonResourceAttributes":
			s.NonResourceAttributes.Reset()
			if err := s.NonResourceAttributes.ReadJSON(i); err != nil {
				return err
			}
		case "resourceAttributes":
			s.ResourceAttributes.Reset()
			if err := s.ResourceAttributes.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectRulesReview from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReview) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SelfSubjectRulesReview to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReview from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReview) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SubjectAccessReview to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Extra != nil {
		more.More()
		j.WriteObjectField("extra")
		s.Extra.WriteJSON(j)
	}
	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NonResourceAttributes.Set {
		more.More()
		j.WriteObjectField("nonResourceAttributes")
		s.NonResourceAttributes.WriteJSON(j)
	}
	if s.ResourceAttributes.Set {
		more.More()
		j.WriteObjectField("resourceAttributes")
		s.ResourceAttributes.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SubjectAccessReviewSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "extra":
			s.Extra = nil
			var elem IoK8sAPIAuthorizationV1SubjectAccessReviewSpecExtra
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Extra = &elem
		case "groups":
			s.Groups = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "nonResourceAttributes":
			s.NonResourceAttributes.Reset()
			if err := s.NonResourceAttributes.ReadJSON(i); err != nil {
				return err
			}
		case "resourceAttributes":
			s.ResourceAttributes.Reset()
			if err := s.ResourceAttributes.ReadJSON(i); err != nil {
				return err
			}
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewSpecExtra) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReviewSpecExtra from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewSpecExtra) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SubjectAccessReviewSpecExtra to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("allowed")
	j.WriteBool(s.Allowed)
	if s.Denied.Set {
		more.More()
		j.WriteObjectField("denied")
		s.Denied.WriteJSON(j)
	}
	if s.EvaluationError.Set {
		more.More()
		j.WriteObjectField("evaluationError")
		s.EvaluationError.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReviewStatus from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SubjectAccessReviewStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "allowed":
			v, err := i.Bool()
			s.Allowed = bool(v)
			if err != nil {
				return err
			}
		case "denied":
			s.Denied.Reset()
			if err := s.Denied.ReadJSON(i); err != nil {
				return err
			}
		case "evaluationError":
			s.EvaluationError.Reset()
			if err := s.EvaluationError.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.EvaluationError.Set {
		more.More()
		j.WriteObjectField("evaluationError")
		s.EvaluationError.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("incomplete")
	j.WriteBool(s.Incomplete)
	more.More()
	j.WriteObjectField("nonResourceRules")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NonResourceRules {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("resourceRules")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ResourceRules {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectRulesReviewStatus from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAuthorizationV1SubjectRulesReviewStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "evaluationError":
			s.EvaluationError.Reset()
			if err := s.EvaluationError.ReadJSON(i); err != nil {
				return err
			}
		case "incomplete":
			v, err := i.Bool()
			s.Incomplete = bool(v)
			if err != nil {
				return err
			}
		case "nonResourceRules":
			s.NonResourceRules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAuthorizationV1NonResourceRule
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.NonResourceRules = append(s.NonResourceRules, elem)
				return nil
			}); err != nil {
				return err
			}
		case "resourceRules":
			s.ResourceRules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAuthorizationV1ResourceRule
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ResourceRules = append(s.ResourceRules, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV1CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV1CrossVersionObjectReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV1HorizontalPodAutoscaler to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAutoscalingV1HorizontalPodAutoscaler
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	if s.MinReplicas.Set {
		more.More()
		j.WriteObjectField("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	if s.TargetCPUUtilizationPercentage.Set {
		more.More()
		j.WriteObjectField("targetCPUUtilizationPercentage")
		s.TargetCPUUtilizationPercentage.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "maxReplicas":
			v, err := i.Int32()
			s.MaxReplicas = int32(v)
			if err != nil {
				return err
			}
		case "minReplicas":
			s.MinReplicas.Reset()
			if err := s.MinReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "scaleTargetRef":
			if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
				return err
			}
		case "targetCPUUtilizationPercentage":
			s.TargetCPUUtilizationPercentage.Reset()
			if err := s.TargetCPUUtilizationPercentage.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CurrentCPUUtilizationPercentage.Set {
		more.More()
		j.WriteObjectField("currentCPUUtilizationPercentage")
		s.CurrentCPUUtilizationPercentage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	more.More()
	j.WriteObjectField("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	if s.LastScaleTime.Set {
		more.More()
		j.WriteObjectField("lastScaleTime")
		s.LastScaleTime.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "currentCPUUtilizationPercentage":
			s.CurrentCPUUtilizationPercentage.Reset()
			if err := s.CurrentCPUUtilizationPercentage.ReadJSON(i); err != nil {
				return err
			}
		case "currentReplicas":
			v, err := i.Int32()
			s.CurrentReplicas = int32(v)
			if err != nil {
				return err
			}
		case "desiredReplicas":
			v, err := i.Int32()
			s.DesiredReplicas = int32(v)
			if err != nil {
				return err
			}
		case "lastScaleTime":
			s.LastScaleTime.Reset()
			if err := s.LastScaleTime.ReadJSON(i); err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.TargetAverageUtilization.Set {
		more.More()
		j.WriteObjectField("targetAverageUtilization")
		s.TargetAverageUtilization.WriteJSON(j)
	}
	if s.TargetAverageValue.Set {
		more.More()
		j.WriteObjectField("targetAverageValue")
		s.TargetAverageValue.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "container":
			v, err := i.Str()
			s.Container = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "targetAverageUtilization":
			s.TargetAverageUtilization.Reset()
			if err := s.TargetAverageUtilization.ReadJSON(i); err != nil {
				return err
			}
		case "targetAverageValue":
			s.TargetAverageValue.Reset()
			if err := s.TargetAverageValue.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	if s.CurrentAverageUtilization.Set {
		more.More()
		j.WriteObjectField("currentAverageUtilization")
		s.CurrentAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "container":
			v, err := i.Str()
			s.Container = string(v)
			if err != nil {
				return err
			}
		case "currentAverageUtilization":
			s.CurrentAverageUtilization.Reset()
			if err := s.CurrentAverageUtilization.ReadJSON(i); err != nil {
				return err
			}
		case "currentAverageValue":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.MetricSelector.Set {
		more.More()
		j.WriteObjectField("metricSelector")
		s.MetricSelector.WriteJSON(j)
	}
	if s.TargetAverageValue.Set {
		more.More()
		j.WriteObjectField("targetAverageValue")
		s.TargetAverageValue.WriteJSON(j)
	}
	if s.TargetValue.Set {
		more.More()
		j.WriteObjectField("targetValue")
		s.TargetValue.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ExternalMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ExternalMetricSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "metricName":
			v, err := i.Str()
			s.MetricName = string(v)
			if err != nil {
				return err
			}
		case "metricSelector":
			s.MetricSelector.Reset()
			if err := s.MetricSelector.ReadJSON(i); err != nil {
				return err
			}
		case "targetAverageValue":
			s.TargetAverageValue.Reset()
			if err := s.TargetAverageValue.ReadJSON(i); err != nil {
				return err
			}
		case "targetValue":
			s.TargetValue.Reset()
			if err := s.TargetValue.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CurrentAverageValue.Set {
		more.More()
		j.WriteObjectField("currentAverageValue")
		s.CurrentAverageValue.WriteJSON(j)
	}
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.MetricSelector.Set {
		more.More()
		j.WriteObjectField("metricSelector")
		s.MetricSelector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ExternalMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ExternalMetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "currentAverageValue":
			s.CurrentAverageValue.Reset()
			if err := s.CurrentAverageValue.ReadJSON(i); err != nil {
				return err
			}
		case "currentValue":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
				return err
			}
		case "metricName":
			v, err := i.Str()
			s.MetricName = string(v)
			if err != nil {
				return err
			}
		case "metricSelector":
			s.MetricSelector.Reset()
			if err := s.MetricSelector.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	if s.Metrics != nil {
		more.More()
		j.WriteObjectField("metrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Metrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.MinReplicas.Set {
		more.More()
		j.WriteObjectField("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "maxReplicas":
			v, err := i.Int32()
			s.MaxReplicas = int32(v)
			if err != nil {
				return err
			}
		case "metrics":
			s.Metrics = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAutoscalingV2beta1MetricSpec
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Metrics = append(s.Metrics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "minReplicas":
			s.MinReplicas.Reset()
			if err := s.MinReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "scaleTargetRef":
			if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("conditions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Conditions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.CurrentMetrics != nil {
		more.More()
		j.WriteObjectField("currentMetrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CurrentMetrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	more.More()
	j.WriteObjectField("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	if s.LastScaleTime.Set {
		more.More()
		j.WriteObjectField("lastScaleTime")
		s.LastScaleTime.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "currentMetrics":
			s.CurrentMetrics = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAutoscalingV2beta1MetricStatus
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.CurrentMetrics = append(s.CurrentMetrics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "currentReplicas":
			v, err := i.Int32()
			s.CurrentReplicas = int32(v)
			if err != nil {
				return err
			}
		case "desiredReplicas":
			v, err := i.Int32()
			s.DesiredReplicas = int32(v)
			if err != nil {
				return err
			}
		case "lastScaleTime":
			s.LastScaleTime.Reset()
			if err := s.LastScaleTime.ReadJSON(i); err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1MetricSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1MetricSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1MetricSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "containerResource":
			s.ContainerResource.Reset()
			if err := s.ContainerResource.ReadJSON(i); err != nil {
				return err
			}
		case "external":
			s.External.Reset()
			if err := s.External.ReadJSON(i); err != nil {
				return err
			}
		case "object":
			s.Object.Reset()
			if err := s.Object.ReadJSON(i); err != nil {
				return err
			}
		case "pods":
			s.Pods.Reset()
			if err := s.Pods.ReadJSON(i); err != nil {
				return err
			}
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1MetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1MetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1MetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "containerResource":
			s.ContainerResource.Reset()
			if err := s.ContainerResource.ReadJSON(i); err != nil {
				return err
			}
		case "external":
			s.External.Reset()
			if err := s.External.ReadJSON(i); err != nil {
				return err
			}
		case "object":
			s.Object.Reset()
			if err := s.Object.ReadJSON(i); err != nil {
				return err
			}
		case "pods":
			s.Pods.Reset()
			if err := s.Pods.ReadJSON(i); err != nil {
				return err
			}
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AverageValue.Set {
		more.More()
		j.WriteObjectField("averageValue")
		s.AverageValue.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	// Unsupported kind "alias".
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ObjectMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ObjectMetricSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "averageValue":
			s.AverageValue.Reset()
			if err := s.AverageValue.ReadJSON(i); err != nil {
				return err
			}
		case "metricName":
			v, err := i.Str()
			s.MetricName = string(v)
			if err != nil {
				return err
			}
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				return err
			}
		case "targetValue":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AverageValue.Set {
		more.More()
		j.WriteObjectField("averageValue")
		s.AverageValue.WriteJSON(j)
	}
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ObjectMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ObjectMetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "averageValue":
			s.AverageValue.Reset()
			if err := s.AverageValue.ReadJSON(i); err != nil {
				return err
			}
		case "currentValue":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
				return err
			}
		case "metricName":
			v, err := i.Str()
			s.MetricName = string(v)
			if err != nil {
				return err
			}
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	// Unsupported kind "alias".
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1PodsMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1PodsMetricSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "metricName":
			v, err := i.Str()
			s.MetricName = string(v)
			if err != nil {
				return err
			}
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		case "targetAverageValue":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1PodsMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1PodsMetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "currentAverageValue":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
				return err
			}
		case "metricName":
			v, err := i.Str()
			s.MetricName = string(v)
			if err != nil {
				return err
			}
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.TargetAverageUtilization.Set {
		more.More()
		j.WriteObjectField("targetAverageUtilization")
		s.TargetAverageUtilization.WriteJSON(j)
	}
	if s.TargetAverageValue.Set {
		more.More()
		j.WriteObjectField("targetAverageValue")
		s.TargetAverageValue.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ResourceMetricSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "targetAverageUtilization":
			s.TargetAverageUtilization.Reset()
			if err := s.TargetAverageUtilization.ReadJSON(i); err != nil {
				return err
			}
		case "targetAverageValue":
			s.TargetAverageValue.Reset()
			if err := s.TargetAverageValue.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CurrentAverageUtilization.Set {
		more.More()
		j.WriteObjectField("currentAverageUtilization")
		s.CurrentAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta1ResourceMetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "currentAverageUtilization":
			s.CurrentAverageUtilization.Reset()
			if err := s.CurrentAverageUtilization.ReadJSON(i); err != nil {
				return err
			}
		case "currentAverageValue":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgAPIResourceQuantity" (alias) is not implemented`); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "container":
			v, err := i.Str()
			s.Container = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "container":
			v, err := i.Str()
			s.Container = string(v)
			if err != nil {
				return err
			}
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ExternalMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ExternalMetricSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				return err
			}
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ExternalMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ExternalMetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				return err
			}
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("periodSeconds")
	j.WriteInt32(s.PeriodSeconds)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	more.More()
	j.WriteObjectField("value")
	j.WriteInt32(s.Value)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HPAScalingPolicy from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HPAScalingPolicy to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "periodSeconds":
			v, err := i.Int32()
			s.PeriodSeconds = int32(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "value":
			v, err := i.Int32()
			s.Value = int32(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingRules) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Policies != nil {
		more.More()
		j.WriteObjectField("policies")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Policies {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.SelectPolicy.Set {
		more.More()
		j.WriteObjectField("selectPolicy")
		s.SelectPolicy.WriteJSON(j)
	}
	if s.StabilizationWindowSeconds.Set {
		more.More()
		j.WriteObjectField("stabilizationWindowSeconds")
		s.StabilizationWindowSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HPAScalingRules from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HPAScalingRules to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "policies":
			s.Policies = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAutoscalingV2beta2HPAScalingPolicy
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Policies = append(s.Policies, elem)
				return nil
			}); err != nil {
				return err
			}
		case "selectPolicy":
			s.SelectPolicy.Reset()
			if err := s.SelectPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "stabilizationWindowSeconds":
			s.StabilizationWindowSeconds.Reset()
			if err := s.StabilizationWindowSeconds.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ScaleDown.Set {
		more.More()
		j.WriteObjectField("scaleDown")
		s.ScaleDown.WriteJSON(j)
	}
	if s.ScaleUp.Set {
		more.More()
		j.WriteObjectField("scaleUp")
		s.ScaleUp.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "scaleDown":
			s.ScaleDown.Reset()
			if err := s.ScaleDown.ReadJSON(i); err != nil {
				return err
			}
		case "scaleUp":
			s.ScaleUp.Reset()
			if err := s.ScaleUp.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Behavior.Set {
		more.More()
		j.WriteObjectField("behavior")
		s.Behavior.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	if s.Metrics != nil {
		more.More()
		j.WriteObjectField("metrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Metrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.MinReplicas.Set {
		more.More()
		j.WriteObjectField("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "behavior":
			s.Behavior.Reset()
			if err := s.Behavior.ReadJSON(i); err != nil {
				return err
			}
		case "maxReplicas":
			v, err := i.Int32()
			s.MaxReplicas = int32(v)
			if err != nil {
				return err
			}
		case "metrics":
			s.Metrics = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAutoscalingV2beta2MetricSpec
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Metrics = append(s.Metrics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "minReplicas":
			s.MinReplicas.Reset()
			if err := s.MinReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "scaleTargetRef":
			if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("conditions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Conditions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.CurrentMetrics != nil {
		more.More()
		j.WriteObjectField("currentMetrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CurrentMetrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	more.More()
	j.WriteObjectField("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	if s.LastScaleTime.Set {
		more.More()
		j.WriteObjectField("lastScaleTime")
		s.LastScaleTime.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "currentMetrics":
			s.CurrentMetrics = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIAutoscalingV2beta2MetricStatus
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.CurrentMetrics = append(s.CurrentMetrics, elem)
				return nil
			}); err != nil {
				return err
			}
		case "currentReplicas":
			v, err := i.Int32()
			s.CurrentReplicas = int32(v)
			if err != nil {
				return err
			}
		case "desiredReplicas":
			v, err := i.Int32()
			s.DesiredReplicas = int32(v)
			if err != nil {
				return err
			}
		case "lastScaleTime":
			s.LastScaleTime.Reset()
			if err := s.LastScaleTime.ReadJSON(i); err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricIdentifier) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricIdentifier from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricIdentifier) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2MetricIdentifier to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2MetricSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "containerResource":
			s.ContainerResource.Reset()
			if err := s.ContainerResource.ReadJSON(i); err != nil {
				return err
			}
		case "external":
			s.External.Reset()
			if err := s.External.ReadJSON(i); err != nil {
				return err
			}
		case "object":
			s.Object.Reset()
			if err := s.Object.ReadJSON(i); err != nil {
				return err
			}
		case "pods":
			s.Pods.Reset()
			if err := s.Pods.ReadJSON(i); err != nil {
				return err
			}
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2MetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "containerResource":
			s.ContainerResource.Reset()
			if err := s.ContainerResource.ReadJSON(i); err != nil {
				return err
			}
		case "external":
			s.External.Reset()
			if err := s.External.ReadJSON(i); err != nil {
				return err
			}
		case "object":
			s.Object.Reset()
			if err := s.Object.ReadJSON(i); err != nil {
				return err
			}
		case "pods":
			s.Pods.Reset()
			if err := s.Pods.ReadJSON(i); err != nil {
				return err
			}
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricTarget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AverageUtilization.Set {
		more.More()
		j.WriteObjectField("averageUtilization")
		s.AverageUtilization.WriteJSON(j)
	}
	if s.AverageValue.Set {
		more.More()
		j.WriteObjectField("averageValue")
		s.AverageValue.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricTarget from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2MetricTarget to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "averageUtilization":
			s.AverageUtilization.Reset()
			if err := s.AverageUtilization.ReadJSON(i); err != nil {
				return err
			}
		case "averageValue":
			s.AverageValue.Reset()
			if err := s.AverageValue.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricValueStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AverageUtilization.Set {
		more.More()
		j.WriteObjectField("averageUtilization")
		s.AverageUtilization.WriteJSON(j)
	}
	if s.AverageValue.Set {
		more.More()
		j.WriteObjectField("averageValue")
		s.AverageValue.WriteJSON(j)
	}
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricValueStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2MetricValueStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "averageUtilization":
			s.AverageUtilization.Reset()
			if err := s.AverageUtilization.ReadJSON(i); err != nil {
				return err
			}
		case "averageValue":
			s.AverageValue.Reset()
			if err := s.AverageValue.ReadJSON(i); err != nil {
				return err
			}
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("describedObject")
	s.DescribedObject.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ObjectMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ObjectMetricSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "describedObject":
			if err := s.DescribedObject.ReadJSON(i); err != nil {
				return err
			}
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				return err
			}
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("describedObject")
	s.DescribedObject.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ObjectMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ObjectMetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				return err
			}
		case "describedObject":
			if err := s.DescribedObject.ReadJSON(i); err != nil {
				return err
			}
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2PodsMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2PodsMetricSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				return err
			}
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2PodsMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2PodsMetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				return err
			}
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ResourceMetricSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIAutoscalingV2beta2ResourceMetricStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJob) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1CronJob from json stream.
func (s *IoK8sAPIBatchV1CronJob) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1CronJob to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1CronJobList from json stream.
func (s *IoK8sAPIBatchV1CronJobList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1CronJobList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIBatchV1CronJob
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConcurrencyPolicy.Set {
		more.More()
		j.WriteObjectField("concurrencyPolicy")
		s.ConcurrencyPolicy.WriteJSON(j)
	}
	if s.FailedJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("failedJobsHistoryLimit")
		s.FailedJobsHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("jobTemplate")
	s.JobTemplate.WriteJSON(j)
	more.More()
	j.WriteObjectField("schedule")
	j.WriteString(s.Schedule)
	if s.StartingDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("startingDeadlineSeconds")
		s.StartingDeadlineSeconds.WriteJSON(j)
	}
	if s.SuccessfulJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("successfulJobsHistoryLimit")
		s.SuccessfulJobsHistoryLimit.WriteJSON(j)
	}
	if s.Suspend.Set {
		more.More()
		j.WriteObjectField("suspend")
		s.Suspend.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1CronJobSpec from json stream.
func (s *IoK8sAPIBatchV1CronJobSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1CronJobSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "concurrencyPolicy":
			s.ConcurrencyPolicy.Reset()
			if err := s.ConcurrencyPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "failedJobsHistoryLimit":
			s.FailedJobsHistoryLimit.Reset()
			if err := s.FailedJobsHistoryLimit.ReadJSON(i); err != nil {
				return err
			}
		case "jobTemplate":
			if err := s.JobTemplate.ReadJSON(i); err != nil {
				return err
			}
		case "schedule":
			v, err := i.Str()
			s.Schedule = string(v)
			if err != nil {
				return err
			}
		case "startingDeadlineSeconds":
			s.StartingDeadlineSeconds.Reset()
			if err := s.StartingDeadlineSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "successfulJobsHistoryLimit":
			s.SuccessfulJobsHistoryLimit.Reset()
			if err := s.SuccessfulJobsHistoryLimit.ReadJSON(i); err != nil {
				return err
			}
		case "suspend":
			s.Suspend.Reset()
			if err := s.Suspend.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active != nil {
		more.More()
		j.WriteObjectField("active")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Active {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.LastScheduleTime.Set {
		more.More()
		j.WriteObjectField("lastScheduleTime")
		s.LastScheduleTime.WriteJSON(j)
	}
	if s.LastSuccessfulTime.Set {
		more.More()
		j.WriteObjectField("lastSuccessfulTime")
		s.LastSuccessfulTime.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1CronJobStatus from json stream.
func (s *IoK8sAPIBatchV1CronJobStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1CronJobStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "active":
			s.Active = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ObjectReference
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Active = append(s.Active, elem)
				return nil
			}); err != nil {
				return err
			}
		case "lastScheduleTime":
			s.LastScheduleTime.Reset()
			if err := s.LastScheduleTime.ReadJSON(i); err != nil {
				return err
			}
		case "lastSuccessfulTime":
			s.LastSuccessfulTime.Reset()
			if err := s.LastSuccessfulTime.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1Job) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1Job from json stream.
func (s *IoK8sAPIBatchV1Job) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1Job to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastProbeTime.Set {
		more.More()
		j.WriteObjectField("lastProbeTime")
		s.LastProbeTime.WriteJSON(j)
	}
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1JobCondition from json stream.
func (s *IoK8sAPIBatchV1JobCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1JobCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastProbeTime":
			s.LastProbeTime.Reset()
			if err := s.LastProbeTime.ReadJSON(i); err != nil {
				return err
			}
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1JobList from json stream.
func (s *IoK8sAPIBatchV1JobList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1JobList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIBatchV1Job
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ActiveDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("activeDeadlineSeconds")
		s.ActiveDeadlineSeconds.WriteJSON(j)
	}
	if s.BackoffLimit.Set {
		more.More()
		j.WriteObjectField("backoffLimit")
		s.BackoffLimit.WriteJSON(j)
	}
	if s.CompletionMode.Set {
		more.More()
		j.WriteObjectField("completionMode")
		s.CompletionMode.WriteJSON(j)
	}
	if s.Completions.Set {
		more.More()
		j.WriteObjectField("completions")
		s.Completions.WriteJSON(j)
	}
	if s.ManualSelector.Set {
		more.More()
		j.WriteObjectField("manualSelector")
		s.ManualSelector.WriteJSON(j)
	}
	if s.Parallelism.Set {
		more.More()
		j.WriteObjectField("parallelism")
		s.Parallelism.WriteJSON(j)
	}
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	if s.Suspend.Set {
		more.More()
		j.WriteObjectField("suspend")
		s.Suspend.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	if s.TtlSecondsAfterFinished.Set {
		more.More()
		j.WriteObjectField("ttlSecondsAfterFinished")
		s.TtlSecondsAfterFinished.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1JobSpec from json stream.
func (s *IoK8sAPIBatchV1JobSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1JobSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "activeDeadlineSeconds":
			s.ActiveDeadlineSeconds.Reset()
			if err := s.ActiveDeadlineSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "backoffLimit":
			s.BackoffLimit.Reset()
			if err := s.BackoffLimit.ReadJSON(i); err != nil {
				return err
			}
		case "completionMode":
			s.CompletionMode.Reset()
			if err := s.CompletionMode.ReadJSON(i); err != nil {
				return err
			}
		case "completions":
			s.Completions.Reset()
			if err := s.Completions.ReadJSON(i); err != nil {
				return err
			}
		case "manualSelector":
			s.ManualSelector.Reset()
			if err := s.ManualSelector.ReadJSON(i); err != nil {
				return err
			}
		case "parallelism":
			s.Parallelism.Reset()
			if err := s.Parallelism.ReadJSON(i); err != nil {
				return err
			}
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		case "suspend":
			s.Suspend.Reset()
			if err := s.Suspend.ReadJSON(i); err != nil {
				return err
			}
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				return err
			}
		case "ttlSecondsAfterFinished":
			s.TtlSecondsAfterFinished.Reset()
			if err := s.TtlSecondsAfterFinished.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active.Set {
		more.More()
		j.WriteObjectField("active")
		s.Active.WriteJSON(j)
	}
	if s.CompletedIndexes.Set {
		more.More()
		j.WriteObjectField("completedIndexes")
		s.CompletedIndexes.WriteJSON(j)
	}
	if s.CompletionTime.Set {
		more.More()
		j.WriteObjectField("completionTime")
		s.CompletionTime.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Failed.Set {
		more.More()
		j.WriteObjectField("failed")
		s.Failed.WriteJSON(j)
	}
	if s.StartTime.Set {
		more.More()
		j.WriteObjectField("startTime")
		s.StartTime.WriteJSON(j)
	}
	if s.Succeeded.Set {
		more.More()
		j.WriteObjectField("succeeded")
		s.Succeeded.WriteJSON(j)
	}
	if s.UncountedTerminatedPods.Set {
		more.More()
		j.WriteObjectField("uncountedTerminatedPods")
		s.UncountedTerminatedPods.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1JobStatus from json stream.
func (s *IoK8sAPIBatchV1JobStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1JobStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(i); err != nil {
				return err
			}
		case "completedIndexes":
			s.CompletedIndexes.Reset()
			if err := s.CompletedIndexes.ReadJSON(i); err != nil {
				return err
			}
		case "completionTime":
			s.CompletionTime.Reset()
			if err := s.CompletionTime.ReadJSON(i); err != nil {
				return err
			}
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIBatchV1JobCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "failed":
			s.Failed.Reset()
			if err := s.Failed.ReadJSON(i); err != nil {
				return err
			}
		case "startTime":
			s.StartTime.Reset()
			if err := s.StartTime.ReadJSON(i); err != nil {
				return err
			}
		case "succeeded":
			s.Succeeded.Reset()
			if err := s.Succeeded.ReadJSON(i); err != nil {
				return err
			}
		case "uncountedTerminatedPods":
			s.UncountedTerminatedPods.Reset()
			if err := s.UncountedTerminatedPods.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1JobTemplateSpec from json stream.
func (s *IoK8sAPIBatchV1JobTemplateSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1JobTemplateSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1UncountedTerminatedPods) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Failed != nil {
		more.More()
		j.WriteObjectField("failed")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Failed {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Succeeded != nil {
		more.More()
		j.WriteObjectField("succeeded")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Succeeded {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1UncountedTerminatedPods from json stream.
func (s *IoK8sAPIBatchV1UncountedTerminatedPods) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1UncountedTerminatedPods to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "failed":
			s.Failed = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Failed = append(s.Failed, elem)
				return nil
			}); err != nil {
				return err
			}
		case "succeeded":
			s.Succeeded = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Succeeded = append(s.Succeeded, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJob) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJob from json stream.
func (s *IoK8sAPIBatchV1beta1CronJob) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1beta1CronJob to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobList from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1beta1CronJobList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIBatchV1beta1CronJob
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConcurrencyPolicy.Set {
		more.More()
		j.WriteObjectField("concurrencyPolicy")
		s.ConcurrencyPolicy.WriteJSON(j)
	}
	if s.FailedJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("failedJobsHistoryLimit")
		s.FailedJobsHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("jobTemplate")
	s.JobTemplate.WriteJSON(j)
	more.More()
	j.WriteObjectField("schedule")
	j.WriteString(s.Schedule)
	if s.StartingDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("startingDeadlineSeconds")
		s.StartingDeadlineSeconds.WriteJSON(j)
	}
	if s.SuccessfulJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("successfulJobsHistoryLimit")
		s.SuccessfulJobsHistoryLimit.WriteJSON(j)
	}
	if s.Suspend.Set {
		more.More()
		j.WriteObjectField("suspend")
		s.Suspend.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobSpec from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1beta1CronJobSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "concurrencyPolicy":
			s.ConcurrencyPolicy.Reset()
			if err := s.ConcurrencyPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "failedJobsHistoryLimit":
			s.FailedJobsHistoryLimit.Reset()
			if err := s.FailedJobsHistoryLimit.ReadJSON(i); err != nil {
				return err
			}
		case "jobTemplate":
			if err := s.JobTemplate.ReadJSON(i); err != nil {
				return err
			}
		case "schedule":
			v, err := i.Str()
			s.Schedule = string(v)
			if err != nil {
				return err
			}
		case "startingDeadlineSeconds":
			s.StartingDeadlineSeconds.Reset()
			if err := s.StartingDeadlineSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "successfulJobsHistoryLimit":
			s.SuccessfulJobsHistoryLimit.Reset()
			if err := s.SuccessfulJobsHistoryLimit.ReadJSON(i); err != nil {
				return err
			}
		case "suspend":
			s.Suspend.Reset()
			if err := s.Suspend.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active != nil {
		more.More()
		j.WriteObjectField("active")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Active {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.LastScheduleTime.Set {
		more.More()
		j.WriteObjectField("lastScheduleTime")
		s.LastScheduleTime.WriteJSON(j)
	}
	if s.LastSuccessfulTime.Set {
		more.More()
		j.WriteObjectField("lastSuccessfulTime")
		s.LastSuccessfulTime.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobStatus from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1beta1CronJobStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "active":
			s.Active = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ObjectReference
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Active = append(s.Active, elem)
				return nil
			}); err != nil {
				return err
			}
		case "lastScheduleTime":
			s.LastScheduleTime.Reset()
			if err := s.LastScheduleTime.ReadJSON(i); err != nil {
				return err
			}
		case "lastSuccessfulTime":
			s.LastSuccessfulTime.Reset()
			if err := s.LastSuccessfulTime.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1JobTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIBatchV1beta1JobTemplateSpec from json stream.
func (s *IoK8sAPIBatchV1beta1JobTemplateSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIBatchV1beta1JobTemplateSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequest from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequest to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.LastUpdateTime.Set {
		more.More()
		j.WriteObjectField("lastUpdateTime")
		s.LastUpdateTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestCondition from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequestCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "lastUpdateTime":
			s.LastUpdateTime.Reset()
			if err := s.LastUpdateTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestList from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequestList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICertificatesV1CertificateSigningRequest
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ExpirationSeconds.Set {
		more.More()
		j.WriteObjectField("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	if s.Extra != nil {
		more.More()
		j.WriteObjectField("extra")
		s.Extra.WriteJSON(j)
	}
	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("request")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Request {
		_ = elem // Unsupported kind "primitive".
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("signerName")
	j.WriteString(s.SignerName)
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	if s.Usages != nil {
		more.More()
		j.WriteObjectField("usages")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Usages {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestSpec from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequestSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "expirationSeconds":
			s.ExpirationSeconds.Reset()
			if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "extra":
			s.Extra = nil
			var elem IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Extra = &elem
		case "groups":
			s.Groups = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "request":
			s.Request = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem byte
				if err := fmt.Errorf(`decoding of "byte" (primitive) is not implemented`); err != nil {
					return err
				}
				s.Request = append(s.Request, elem)
				return nil
			}); err != nil {
				return err
			}
		case "signerName":
			v, err := i.Str()
			s.SignerName = string(v)
			if err != nil {
				return err
			}
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				return err
			}
		case "usages":
			s.Usages = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Usages = append(s.Usages, elem)
				return nil
			}); err != nil {
				return err
			}
		case "username":
			s.Username.Reset()
			if err := s.Username.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Certificate != nil {
		more.More()
		j.WriteObjectField("certificate")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Certificate {
			_ = elem // Unsupported kind "primitive".
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestStatus from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICertificatesV1CertificateSigningRequestStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "certificate":
			s.Certificate = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem byte
				if err := fmt.Errorf(`decoding of "byte" (primitive) is not implemented`); err != nil {
					return err
				}
				s.Certificate = append(s.Certificate, elem)
				return nil
			}); err != nil {
				return err
			}
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICertificatesV1CertificateSigningRequestCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1Lease) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoordinationV1Lease from json stream.
func (s *IoK8sAPICoordinationV1Lease) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoordinationV1Lease to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1LeaseList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoordinationV1LeaseList from json stream.
func (s *IoK8sAPICoordinationV1LeaseList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoordinationV1LeaseList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoordinationV1Lease
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1LeaseSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AcquireTime.Set {
		more.More()
		j.WriteObjectField("acquireTime")
		s.AcquireTime.WriteJSON(j)
	}
	if s.HolderIdentity.Set {
		more.More()
		j.WriteObjectField("holderIdentity")
		s.HolderIdentity.WriteJSON(j)
	}
	if s.LeaseDurationSeconds.Set {
		more.More()
		j.WriteObjectField("leaseDurationSeconds")
		s.LeaseDurationSeconds.WriteJSON(j)
	}
	if s.LeaseTransitions.Set {
		more.More()
		j.WriteObjectField("leaseTransitions")
		s.LeaseTransitions.WriteJSON(j)
	}
	if s.RenewTime.Set {
		more.More()
		j.WriteObjectField("renewTime")
		s.RenewTime.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoordinationV1LeaseSpec from json stream.
func (s *IoK8sAPICoordinationV1LeaseSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoordinationV1LeaseSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "acquireTime":
			s.AcquireTime.Reset()
			if err := s.AcquireTime.ReadJSON(i); err != nil {
				return err
			}
		case "holderIdentity":
			s.HolderIdentity.Reset()
			if err := s.HolderIdentity.ReadJSON(i); err != nil {
				return err
			}
		case "leaseDurationSeconds":
			s.LeaseDurationSeconds.Reset()
			if err := s.LeaseDurationSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "leaseTransitions":
			s.LeaseTransitions.Reset()
			if err := s.LeaseTransitions.ReadJSON(i); err != nil {
				return err
			}
		case "renewTime":
			s.RenewTime.Reset()
			if err := s.RenewTime.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Partition.Set {
		more.More()
		j.WriteObjectField("partition")
		s.Partition.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource from json stream.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "partition":
			s.Partition.Reset()
			if err := s.Partition.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "volumeID":
			v, err := i.Str()
			s.VolumeID = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Affinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NodeAffinity.Set {
		more.More()
		j.WriteObjectField("nodeAffinity")
		s.NodeAffinity.WriteJSON(j)
	}
	if s.PodAffinity.Set {
		more.More()
		j.WriteObjectField("podAffinity")
		s.PodAffinity.WriteJSON(j)
	}
	if s.PodAntiAffinity.Set {
		more.More()
		j.WriteObjectField("podAntiAffinity")
		s.PodAntiAffinity.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Affinity from json stream.
func (s *IoK8sAPICoreV1Affinity) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Affinity to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nodeAffinity":
			s.NodeAffinity.Reset()
			if err := s.NodeAffinity.ReadJSON(i); err != nil {
				return err
			}
		case "podAffinity":
			s.PodAffinity.Reset()
			if err := s.PodAffinity.ReadJSON(i); err != nil {
				return err
			}
		case "podAntiAffinity":
			s.PodAntiAffinity.Reset()
			if err := s.PodAntiAffinity.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AttachedVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("devicePath")
	j.WriteString(s.DevicePath)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1AttachedVolume from json stream.
func (s *IoK8sAPICoreV1AttachedVolume) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1AttachedVolume to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "devicePath":
			v, err := i.Str()
			s.DevicePath = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CachingMode.Set {
		more.More()
		j.WriteObjectField("cachingMode")
		s.CachingMode.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("diskName")
	j.WriteString(s.DiskName)
	more.More()
	j.WriteObjectField("diskURI")
	j.WriteString(s.DiskURI)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1AzureDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1AzureDiskVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "cachingMode":
			s.CachingMode.Reset()
			if err := s.CachingMode.ReadJSON(i); err != nil {
				return err
			}
		case "diskName":
			v, err := i.Str()
			s.DiskName = string(v)
			if err != nil {
				return err
			}
		case "diskURI":
			v, err := i.Str()
			s.DiskURI = string(v)
			if err != nil {
				return err
			}
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureFilePersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretName")
	j.WriteString(s.SecretName)
	if s.SecretNamespace.Set {
		more.More()
		j.WriteObjectField("secretNamespace")
		s.SecretNamespace.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("shareName")
	j.WriteString(s.ShareName)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1AzureFilePersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1AzureFilePersistentVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretName":
			v, err := i.Str()
			s.SecretName = string(v)
			if err != nil {
				return err
			}
		case "secretNamespace":
			s.SecretNamespace.Reset()
			if err := s.SecretNamespace.ReadJSON(i); err != nil {
				return err
			}
		case "shareName":
			v, err := i.Str()
			s.ShareName = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureFileVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretName")
	j.WriteString(s.SecretName)
	more.More()
	j.WriteObjectField("shareName")
	j.WriteString(s.ShareName)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1AzureFileVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1AzureFileVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretName":
			v, err := i.Str()
			s.SecretName = string(v)
			if err != nil {
				return err
			}
		case "shareName":
			v, err := i.Str()
			s.ShareName = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ControllerExpandSecretRef.Set {
		more.More()
		j.WriteObjectField("controllerExpandSecretRef")
		s.ControllerExpandSecretRef.WriteJSON(j)
	}
	if s.ControllerPublishSecretRef.Set {
		more.More()
		j.WriteObjectField("controllerPublishSecretRef")
		s.ControllerPublishSecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.NodePublishSecretRef.Set {
		more.More()
		j.WriteObjectField("nodePublishSecretRef")
		s.NodePublishSecretRef.WriteJSON(j)
	}
	if s.NodeStageSecretRef.Set {
		more.More()
		j.WriteObjectField("nodeStageSecretRef")
		s.NodeStageSecretRef.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.VolumeAttributes != nil {
		more.More()
		j.WriteObjectField("volumeAttributes")
		s.VolumeAttributes.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeHandle")
	j.WriteString(s.VolumeHandle)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CSIPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CSIPersistentVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "controllerExpandSecretRef":
			s.ControllerExpandSecretRef.Reset()
			if err := s.ControllerExpandSecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "controllerPublishSecretRef":
			s.ControllerPublishSecretRef.Reset()
			if err := s.ControllerPublishSecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "driver":
			v, err := i.Str()
			s.Driver = string(v)
			if err != nil {
				return err
			}
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "nodePublishSecretRef":
			s.NodePublishSecretRef.Reset()
			if err := s.NodePublishSecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "nodeStageSecretRef":
			s.NodeStageSecretRef.Reset()
			if err := s.NodeStageSecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "volumeAttributes":
			s.VolumeAttributes = nil
			var elem IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.VolumeAttributes = &elem
		case "volumeHandle":
			v, err := i.Str()
			s.VolumeHandle = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes from json stream.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.NodePublishSecretRef.Set {
		more.More()
		j.WriteObjectField("nodePublishSecretRef")
		s.NodePublishSecretRef.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.VolumeAttributes != nil {
		more.More()
		j.WriteObjectField("volumeAttributes")
		s.VolumeAttributes.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CSIVolumeSource from json stream.
func (s *IoK8sAPICoreV1CSIVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CSIVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "driver":
			v, err := i.Str()
			s.Driver = string(v)
			if err != nil {
				return err
			}
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "nodePublishSecretRef":
			s.NodePublishSecretRef.Reset()
			if err := s.NodePublishSecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "volumeAttributes":
			s.VolumeAttributes = nil
			var elem IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.VolumeAttributes = &elem
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes from json stream.
func (s *IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Capabilities) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Add != nil {
		more.More()
		j.WriteObjectField("add")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Add {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Drop != nil {
		more.More()
		j.WriteObjectField("drop")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Drop {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Capabilities from json stream.
func (s *IoK8sAPICoreV1Capabilities) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Capabilities to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "add":
			s.Add = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Add = append(s.Add, elem)
				return nil
			}); err != nil {
				return err
			}
		case "drop":
			s.Drop = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Drop = append(s.Drop, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CephFSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretFile.Set {
		more.More()
		j.WriteObjectField("secretFile")
		s.SecretFile.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CephFSPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CephFSPersistentVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "monitors":
			s.Monitors = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Monitors = append(s.Monitors, elem)
				return nil
			}); err != nil {
				return err
			}
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretFile":
			s.SecretFile.Reset()
			if err := s.SecretFile.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CephFSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretFile.Set {
		more.More()
		j.WriteObjectField("secretFile")
		s.SecretFile.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CephFSVolumeSource from json stream.
func (s *IoK8sAPICoreV1CephFSVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CephFSVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "monitors":
			s.Monitors = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Monitors = append(s.Monitors, elem)
				return nil
			}); err != nil {
				return err
			}
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretFile":
			s.SecretFile.Reset()
			if err := s.SecretFile.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CinderPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CinderPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CinderPersistentVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "volumeID":
			v, err := i.Str()
			s.VolumeID = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CinderVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1CinderVolumeSource from json stream.
func (s *IoK8sAPICoreV1CinderVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1CinderVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "volumeID":
			v, err := i.Str()
			s.VolumeID = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ClientIPConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ClientIPConfig from json stream.
func (s *IoK8sAPICoreV1ClientIPConfig) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ClientIPConfig to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ComponentCondition from json stream.
func (s *IoK8sAPICoreV1ComponentCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ComponentCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ComponentStatus from json stream.
func (s *IoK8sAPICoreV1ComponentStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ComponentStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ComponentCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentStatusList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ComponentStatusList from json stream.
func (s *IoK8sAPICoreV1ComponentStatusList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ComponentStatusList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ComponentStatus
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMap) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.BinaryData != nil {
		more.More()
		j.WriteObjectField("binaryData")
		s.BinaryData.WriteJSON(j)
	}
	if s.Data != nil {
		more.More()
		j.WriteObjectField("data")
		s.Data.WriteJSON(j)
	}
	if s.Immutable.Set {
		more.More()
		j.WriteObjectField("immutable")
		s.Immutable.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMap from json stream.
func (s *IoK8sAPICoreV1ConfigMap) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMap to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "binaryData":
			s.BinaryData = nil
			var elem IoK8sAPICoreV1ConfigMapBinaryData
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.BinaryData = &elem
		case "data":
			s.Data = nil
			var elem IoK8sAPICoreV1ConfigMapData
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Data = &elem
		case "immutable":
			s.Immutable.Reset()
			if err := s.Immutable.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapBinaryData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapBinaryData from json stream.
func (s *IoK8sAPICoreV1ConfigMapBinaryData) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapBinaryData to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapData from json stream.
func (s *IoK8sAPICoreV1ConfigMapData) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapData to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapEnvSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapEnvSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapEnvSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapEnvSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapKeySelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapKeySelector from json stream.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapKeySelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "key":
			v, err := i.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapList from json stream.
func (s *IoK8sAPICoreV1ConfigMapList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ConfigMap
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapNodeConfigSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("kubeletConfigKey")
	j.WriteString(s.KubeletConfigKey)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapNodeConfigSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapNodeConfigSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "kubeletConfigKey":
			v, err := i.Str()
			s.KubeletConfigKey = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "namespace":
			v, err := i.Str()
			s.Namespace = string(v)
			if err != nil {
				return err
			}
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				return err
			}
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapProjection from json stream.
func (s *IoK8sAPICoreV1ConfigMapProjection) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapProjection to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1KeyToPath
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapVolumeSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ConfigMapVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1KeyToPath
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Container) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Args != nil {
		more.More()
		j.WriteObjectField("args")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Args {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Command != nil {
		more.More()
		j.WriteObjectField("command")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Command {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Env != nil {
		more.More()
		j.WriteObjectField("env")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Env {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EnvFrom != nil {
		more.More()
		j.WriteObjectField("envFrom")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EnvFrom {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Image.Set {
		more.More()
		j.WriteObjectField("image")
		s.Image.WriteJSON(j)
	}
	if s.ImagePullPolicy.Set {
		more.More()
		j.WriteObjectField("imagePullPolicy")
		s.ImagePullPolicy.WriteJSON(j)
	}
	if s.Lifecycle.Set {
		more.More()
		j.WriteObjectField("lifecycle")
		s.Lifecycle.WriteJSON(j)
	}
	if s.LivenessProbe.Set {
		more.More()
		j.WriteObjectField("livenessProbe")
		s.LivenessProbe.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadinessProbe.Set {
		more.More()
		j.WriteObjectField("readinessProbe")
		s.ReadinessProbe.WriteJSON(j)
	}
	if s.Resources.Set {
		more.More()
		j.WriteObjectField("resources")
		s.Resources.WriteJSON(j)
	}
	if s.SecurityContext.Set {
		more.More()
		j.WriteObjectField("securityContext")
		s.SecurityContext.WriteJSON(j)
	}
	if s.StartupProbe.Set {
		more.More()
		j.WriteObjectField("startupProbe")
		s.StartupProbe.WriteJSON(j)
	}
	if s.Stdin.Set {
		more.More()
		j.WriteObjectField("stdin")
		s.Stdin.WriteJSON(j)
	}
	if s.StdinOnce.Set {
		more.More()
		j.WriteObjectField("stdinOnce")
		s.StdinOnce.WriteJSON(j)
	}
	if s.TerminationMessagePath.Set {
		more.More()
		j.WriteObjectField("terminationMessagePath")
		s.TerminationMessagePath.WriteJSON(j)
	}
	if s.TerminationMessagePolicy.Set {
		more.More()
		j.WriteObjectField("terminationMessagePolicy")
		s.TerminationMessagePolicy.WriteJSON(j)
	}
	if s.Tty.Set {
		more.More()
		j.WriteObjectField("tty")
		s.Tty.WriteJSON(j)
	}
	if s.VolumeDevices != nil {
		more.More()
		j.WriteObjectField("volumeDevices")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeDevices {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumeMounts != nil {
		more.More()
		j.WriteObjectField("volumeMounts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeMounts {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.WorkingDir.Set {
		more.More()
		j.WriteObjectField("workingDir")
		s.WorkingDir.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Container from json stream.
func (s *IoK8sAPICoreV1Container) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Container to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "args":
			s.Args = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Args = append(s.Args, elem)
				return nil
			}); err != nil {
				return err
			}
		case "command":
			s.Command = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Command = append(s.Command, elem)
				return nil
			}); err != nil {
				return err
			}
		case "env":
			s.Env = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1EnvVar
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Env = append(s.Env, elem)
				return nil
			}); err != nil {
				return err
			}
		case "envFrom":
			s.EnvFrom = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1EnvFromSource
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.EnvFrom = append(s.EnvFrom, elem)
				return nil
			}); err != nil {
				return err
			}
		case "image":
			s.Image.Reset()
			if err := s.Image.ReadJSON(i); err != nil {
				return err
			}
		case "imagePullPolicy":
			s.ImagePullPolicy.Reset()
			if err := s.ImagePullPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "lifecycle":
			s.Lifecycle.Reset()
			if err := s.Lifecycle.ReadJSON(i); err != nil {
				return err
			}
		case "livenessProbe":
			s.LivenessProbe.Reset()
			if err := s.LivenessProbe.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "ports":
			s.Ports = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ContainerPort
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ports = append(s.Ports, elem)
				return nil
			}); err != nil {
				return err
			}
		case "readinessProbe":
			s.ReadinessProbe.Reset()
			if err := s.ReadinessProbe.ReadJSON(i); err != nil {
				return err
			}
		case "resources":
			s.Resources.Reset()
			if err := s.Resources.ReadJSON(i); err != nil {
				return err
			}
		case "securityContext":
			s.SecurityContext.Reset()
			if err := s.SecurityContext.ReadJSON(i); err != nil {
				return err
			}
		case "startupProbe":
			s.StartupProbe.Reset()
			if err := s.StartupProbe.ReadJSON(i); err != nil {
				return err
			}
		case "stdin":
			s.Stdin.Reset()
			if err := s.Stdin.ReadJSON(i); err != nil {
				return err
			}
		case "stdinOnce":
			s.StdinOnce.Reset()
			if err := s.StdinOnce.ReadJSON(i); err != nil {
				return err
			}
		case "terminationMessagePath":
			s.TerminationMessagePath.Reset()
			if err := s.TerminationMessagePath.ReadJSON(i); err != nil {
				return err
			}
		case "terminationMessagePolicy":
			s.TerminationMessagePolicy.Reset()
			if err := s.TerminationMessagePolicy.ReadJSON(i); err != nil {
				return err
			}
		case "tty":
			s.Tty.Reset()
			if err := s.Tty.ReadJSON(i); err != nil {
				return err
			}
		case "volumeDevices":
			s.VolumeDevices = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1VolumeDevice
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.VolumeDevices = append(s.VolumeDevices, elem)
				return nil
			}); err != nil {
				return err
			}
		case "volumeMounts":
			s.VolumeMounts = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1VolumeMount
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.VolumeMounts = append(s.VolumeMounts, elem)
				return nil
			}); err != nil {
				return err
			}
		case "workingDir":
			s.WorkingDir.Reset()
			if err := s.WorkingDir.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerImage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Names != nil {
		more.More()
		j.WriteObjectField("names")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Names {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.SizeBytes.Set {
		more.More()
		j.WriteObjectField("sizeBytes")
		s.SizeBytes.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerImage from json stream.
func (s *IoK8sAPICoreV1ContainerImage) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerImage to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "names":
			s.Names = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Names = append(s.Names, elem)
				return nil
			}); err != nil {
				return err
			}
		case "sizeBytes":
			s.SizeBytes.Reset()
			if err := s.SizeBytes.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("containerPort")
	j.WriteInt32(s.ContainerPort)
	if s.HostIP.Set {
		more.More()
		j.WriteObjectField("hostIP")
		s.HostIP.WriteJSON(j)
	}
	if s.HostPort.Set {
		more.More()
		j.WriteObjectField("hostPort")
		s.HostPort.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerPort from json stream.
func (s *IoK8sAPICoreV1ContainerPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerPort to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "containerPort":
			v, err := i.Int32()
			s.ContainerPort = int32(v)
			if err != nil {
				return err
			}
		case "hostIP":
			s.HostIP.Reset()
			if err := s.HostIP.ReadJSON(i); err != nil {
				return err
			}
		case "hostPort":
			s.HostPort.Reset()
			if err := s.HostPort.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerState) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Running.Set {
		more.More()
		j.WriteObjectField("running")
		s.Running.WriteJSON(j)
	}
	if s.Terminated.Set {
		more.More()
		j.WriteObjectField("terminated")
		s.Terminated.WriteJSON(j)
	}
	if s.Waiting.Set {
		more.More()
		j.WriteObjectField("waiting")
		s.Waiting.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerState from json stream.
func (s *IoK8sAPICoreV1ContainerState) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerState to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "running":
			s.Running.Reset()
			if err := s.Running.ReadJSON(i); err != nil {
				return err
			}
		case "terminated":
			s.Terminated.Reset()
			if err := s.Terminated.ReadJSON(i); err != nil {
				return err
			}
		case "waiting":
			s.Waiting.Reset()
			if err := s.Waiting.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateRunning) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.StartedAt.Set {
		more.More()
		j.WriteObjectField("startedAt")
		s.StartedAt.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateRunning from json stream.
func (s *IoK8sAPICoreV1ContainerStateRunning) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerStateRunning to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "startedAt":
			s.StartedAt.Reset()
			if err := s.StartedAt.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateTerminated) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerID.Set {
		more.More()
		j.WriteObjectField("containerID")
		s.ContainerID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("exitCode")
	j.WriteInt32(s.ExitCode)
	if s.FinishedAt.Set {
		more.More()
		j.WriteObjectField("finishedAt")
		s.FinishedAt.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Signal.Set {
		more.More()
		j.WriteObjectField("signal")
		s.Signal.WriteJSON(j)
	}
	if s.StartedAt.Set {
		more.More()
		j.WriteObjectField("startedAt")
		s.StartedAt.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateTerminated from json stream.
func (s *IoK8sAPICoreV1ContainerStateTerminated) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerStateTerminated to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "containerID":
			s.ContainerID.Reset()
			if err := s.ContainerID.ReadJSON(i); err != nil {
				return err
			}
		case "exitCode":
			v, err := i.Int32()
			s.ExitCode = int32(v)
			if err != nil {
				return err
			}
		case "finishedAt":
			s.FinishedAt.Reset()
			if err := s.FinishedAt.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "signal":
			s.Signal.Reset()
			if err := s.Signal.ReadJSON(i); err != nil {
				return err
			}
		case "startedAt":
			s.StartedAt.Reset()
			if err := s.StartedAt.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateWaiting) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateWaiting from json stream.
func (s *IoK8sAPICoreV1ContainerStateWaiting) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerStateWaiting to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerID.Set {
		more.More()
		j.WriteObjectField("containerID")
		s.ContainerID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("image")
	j.WriteString(s.Image)
	more.More()
	j.WriteObjectField("imageID")
	j.WriteString(s.ImageID)
	if s.LastState.Set {
		more.More()
		j.WriteObjectField("lastState")
		s.LastState.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("ready")
	j.WriteBool(s.Ready)
	more.More()
	j.WriteObjectField("restartCount")
	j.WriteInt32(s.RestartCount)
	if s.Started.Set {
		more.More()
		j.WriteObjectField("started")
		s.Started.WriteJSON(j)
	}
	if s.State.Set {
		more.More()
		j.WriteObjectField("state")
		s.State.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ContainerStatus from json stream.
func (s *IoK8sAPICoreV1ContainerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ContainerStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "containerID":
			s.ContainerID.Reset()
			if err := s.ContainerID.ReadJSON(i); err != nil {
				return err
			}
		case "image":
			v, err := i.Str()
			s.Image = string(v)
			if err != nil {
				return err
			}
		case "imageID":
			v, err := i.Str()
			s.ImageID = string(v)
			if err != nil {
				return err
			}
		case "lastState":
			s.LastState.Reset()
			if err := s.LastState.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "ready":
			v, err := i.Bool()
			s.Ready = bool(v)
			if err != nil {
				return err
			}
		case "restartCount":
			v, err := i.Int32()
			s.RestartCount = int32(v)
			if err != nil {
				return err
			}
		case "started":
			s.Started.Reset()
			if err := s.Started.ReadJSON(i); err != nil {
				return err
			}
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DaemonEndpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("Port")
	j.WriteInt32(s.Port)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1DaemonEndpoint from json stream.
func (s *IoK8sAPICoreV1DaemonEndpoint) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1DaemonEndpoint to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "Port":
			v, err := i.Int32()
			s.Port = int32(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIProjection from json stream.
func (s *IoK8sAPICoreV1DownwardAPIProjection) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1DownwardAPIProjection to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1DownwardAPIVolumeFile
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIVolumeFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FieldRef.Set {
		more.More()
		j.WriteObjectField("fieldRef")
		s.FieldRef.WriteJSON(j)
	}
	if s.Mode.Set {
		more.More()
		j.WriteObjectField("mode")
		s.Mode.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ResourceFieldRef.Set {
		more.More()
		j.WriteObjectField("resourceFieldRef")
		s.ResourceFieldRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIVolumeFile from json stream.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1DownwardAPIVolumeFile to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fieldRef":
			s.FieldRef.Reset()
			if err := s.FieldRef.ReadJSON(i); err != nil {
				return err
			}
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(i); err != nil {
				return err
			}
		case "path":
			v, err := i.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "resourceFieldRef":
			s.ResourceFieldRef.Reset()
			if err := s.ResourceFieldRef.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIVolumeSource from json stream.
func (s *IoK8sAPICoreV1DownwardAPIVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1DownwardAPIVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1DownwardAPIVolumeFile
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EmptyDirVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Medium.Set {
		more.More()
		j.WriteObjectField("medium")
		s.Medium.WriteJSON(j)
	}
	if s.SizeLimit.Set {
		more.More()
		j.WriteObjectField("sizeLimit")
		s.SizeLimit.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EmptyDirVolumeSource from json stream.
func (s *IoK8sAPICoreV1EmptyDirVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EmptyDirVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "medium":
			s.Medium.Reset()
			if err := s.Medium.ReadJSON(i); err != nil {
				return err
			}
		case "sizeLimit":
			s.SizeLimit.Reset()
			if err := s.SizeLimit.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointAddress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ip")
	j.WriteString(s.IP)
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	if s.TargetRef.Set {
		more.More()
		j.WriteObjectField("targetRef")
		s.TargetRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EndpointAddress from json stream.
func (s *IoK8sAPICoreV1EndpointAddress) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EndpointAddress to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				return err
			}
		case "ip":
			v, err := i.Str()
			s.IP = string(v)
			if err != nil {
				return err
			}
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				return err
			}
		case "targetRef":
			s.TargetRef.Reset()
			if err := s.TargetRef.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("port")
	j.WriteInt32(s.Port)
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EndpointPort from json stream.
func (s *IoK8sAPICoreV1EndpointPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EndpointPort to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "port":
			v, err := i.Int32()
			s.Port = int32(v)
			if err != nil {
				return err
			}
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointSubset) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Addresses != nil {
		more.More()
		j.WriteObjectField("addresses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Addresses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NotReadyAddresses != nil {
		more.More()
		j.WriteObjectField("notReadyAddresses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NotReadyAddresses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EndpointSubset from json stream.
func (s *IoK8sAPICoreV1EndpointSubset) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EndpointSubset to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "addresses":
			s.Addresses = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1EndpointAddress
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Addresses = append(s.Addresses, elem)
				return nil
			}); err != nil {
				return err
			}
		case "notReadyAddresses":
			s.NotReadyAddresses = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1EndpointAddress
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.NotReadyAddresses = append(s.NotReadyAddresses, elem)
				return nil
			}); err != nil {
				return err
			}
		case "ports":
			s.Ports = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1EndpointPort
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ports = append(s.Ports, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Endpoints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Subsets != nil {
		more.More()
		j.WriteObjectField("subsets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Subsets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Endpoints from json stream.
func (s *IoK8sAPICoreV1Endpoints) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Endpoints to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "subsets":
			s.Subsets = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1EndpointSubset
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Subsets = append(s.Subsets, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointsList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EndpointsList from json stream.
func (s *IoK8sAPICoreV1EndpointsList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EndpointsList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Endpoints
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvFromSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMapRef.Set {
		more.More()
		j.WriteObjectField("configMapRef")
		s.ConfigMapRef.WriteJSON(j)
	}
	if s.Prefix.Set {
		more.More()
		j.WriteObjectField("prefix")
		s.Prefix.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EnvFromSource from json stream.
func (s *IoK8sAPICoreV1EnvFromSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EnvFromSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "configMapRef":
			s.ConfigMapRef.Reset()
			if err := s.ConfigMapRef.ReadJSON(i); err != nil {
				return err
			}
		case "prefix":
			s.Prefix.Reset()
			if err := s.Prefix.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvVar) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	if s.ValueFrom.Set {
		more.More()
		j.WriteObjectField("valueFrom")
		s.ValueFrom.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EnvVar from json stream.
func (s *IoK8sAPICoreV1EnvVar) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EnvVar to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				return err
			}
		case "valueFrom":
			s.ValueFrom.Reset()
			if err := s.ValueFrom.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvVarSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMapKeyRef.Set {
		more.More()
		j.WriteObjectField("configMapKeyRef")
		s.ConfigMapKeyRef.WriteJSON(j)
	}
	if s.FieldRef.Set {
		more.More()
		j.WriteObjectField("fieldRef")
		s.FieldRef.WriteJSON(j)
	}
	if s.ResourceFieldRef.Set {
		more.More()
		j.WriteObjectField("resourceFieldRef")
		s.ResourceFieldRef.WriteJSON(j)
	}
	if s.SecretKeyRef.Set {
		more.More()
		j.WriteObjectField("secretKeyRef")
		s.SecretKeyRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EnvVarSource from json stream.
func (s *IoK8sAPICoreV1EnvVarSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EnvVarSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "configMapKeyRef":
			s.ConfigMapKeyRef.Reset()
			if err := s.ConfigMapKeyRef.ReadJSON(i); err != nil {
				return err
			}
		case "fieldRef":
			s.FieldRef.Reset()
			if err := s.FieldRef.ReadJSON(i); err != nil {
				return err
			}
		case "resourceFieldRef":
			s.ResourceFieldRef.Reset()
			if err := s.ResourceFieldRef.ReadJSON(i); err != nil {
				return err
			}
		case "secretKeyRef":
			s.SecretKeyRef.Reset()
			if err := s.SecretKeyRef.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EphemeralContainer) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Args != nil {
		more.More()
		j.WriteObjectField("args")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Args {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Command != nil {
		more.More()
		j.WriteObjectField("command")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Command {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Env != nil {
		more.More()
		j.WriteObjectField("env")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Env {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EnvFrom != nil {
		more.More()
		j.WriteObjectField("envFrom")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EnvFrom {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Image.Set {
		more.More()
		j.WriteObjectField("image")
		s.Image.WriteJSON(j)
	}
	if s.ImagePullPolicy.Set {
		more.More()
		j.WriteObjectField("imagePullPolicy")
		s.ImagePullPolicy.WriteJSON(j)
	}
	if s.Lifecycle.Set {
		more.More()
		j.WriteObjectField("lifecycle")
		s.Lifecycle.WriteJSON(j)
	}
	if s.LivenessProbe.Set {
		more.More()
		j.WriteObjectField("livenessProbe")
		s.LivenessProbe.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadinessProbe.Set {
		more.More()
		j.WriteObjectField("readinessProbe")
		s.ReadinessProbe.WriteJSON(j)
	}
	if s.Resources.Set {
		more.More()
		j.WriteObjectField("resources")
		s.Resources.WriteJSON(j)
	}
	if s.SecurityContext.Set {
		more.More()
		j.WriteObjectField("securityContext")
		s.SecurityContext.WriteJSON(j)
	}
	if s.StartupProbe.Set {
		more.More()
		j.WriteObjectField("startupProbe")
		s.StartupProbe.WriteJSON(j)
	}
	if s.Stdin.Set {
		more.More()
		j.WriteObjectField("stdin")
		s.Stdin.WriteJSON(j)
	}
	if s.StdinOnce.Set {
		more.More()
		j.WriteObjectField("stdinOnce")
		s.StdinOnce.WriteJSON(j)
	}
	if s.TargetContainerName.Set {
		more.More()
		j.WriteObjectField("targetContainerName")
		s.TargetContainerName.WriteJSON(j)
	}
	if s.TerminationMessagePath.Set {
		more.More()
		j.WriteObjectField("terminationMessagePath")
		s.TerminationMessagePath.WriteJSON(j)
	}
	if s.TerminationMessagePolicy.Set {
		more.More()
		j.WriteObjectField("terminationMessagePolicy")
		s.TerminationMessagePolicy.WriteJSON(j)
	}
	if s.Tty.Set {
		more.More()
		j.WriteObjectField("tty")
		s.Tty.WriteJSON(j)
	}
	if s.VolumeDevices != nil {
		more.More()
		j.WriteObjectField("volumeDevices")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeDevices {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumeMounts != nil {
		more.More()
		j.WriteObjectField("volumeMounts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeMounts {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.WorkingDir.Set {
		more.More()
		j.WriteObjectField("workingDir")
		s.WorkingDir.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EphemeralContainer from json stream.
func (s *IoK8sAPICoreV1EphemeralContainer) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EphemeralContainer to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "args":
			s.Args = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Args = append(s.Args, elem)
				return nil
			}); err != nil {
				return err
			}
		case "command":
			s.Command = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Command = append(s.Command, elem)
				return nil
			}); err != nil {
				return err
			}
		case "env":
			s.Env = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1EnvVar
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Env = append(s.Env, elem)
				return nil
			}); err != nil {
				return err
			}
		case "envFrom":
			s.EnvFrom = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1EnvFromSource
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.EnvFrom = append(s.EnvFrom, elem)
				return nil
			}); err != nil {
				return err
			}
		case "image":
			s.Image.Reset()
			if err := s.Image.ReadJSON(i); err != nil {
				return err
			}
		case "imagePullPolicy":
			s.ImagePullPolicy.Reset()
			if err := s.ImagePullPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "lifecycle":
			s.Lifecycle.Reset()
			if err := s.Lifecycle.ReadJSON(i); err != nil {
				return err
			}
		case "livenessProbe":
			s.LivenessProbe.Reset()
			if err := s.LivenessProbe.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "ports":
			s.Ports = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ContainerPort
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ports = append(s.Ports, elem)
				return nil
			}); err != nil {
				return err
			}
		case "readinessProbe":
			s.ReadinessProbe.Reset()
			if err := s.ReadinessProbe.ReadJSON(i); err != nil {
				return err
			}
		case "resources":
			s.Resources.Reset()
			if err := s.Resources.ReadJSON(i); err != nil {
				return err
			}
		case "securityContext":
			s.SecurityContext.Reset()
			if err := s.SecurityContext.ReadJSON(i); err != nil {
				return err
			}
		case "startupProbe":
			s.StartupProbe.Reset()
			if err := s.StartupProbe.ReadJSON(i); err != nil {
				return err
			}
		case "stdin":
			s.Stdin.Reset()
			if err := s.Stdin.ReadJSON(i); err != nil {
				return err
			}
		case "stdinOnce":
			s.StdinOnce.Reset()
			if err := s.StdinOnce.ReadJSON(i); err != nil {
				return err
			}
		case "targetContainerName":
			s.TargetContainerName.Reset()
			if err := s.TargetContainerName.ReadJSON(i); err != nil {
				return err
			}
		case "terminationMessagePath":
			s.TerminationMessagePath.Reset()
			if err := s.TerminationMessagePath.ReadJSON(i); err != nil {
				return err
			}
		case "terminationMessagePolicy":
			s.TerminationMessagePolicy.Reset()
			if err := s.TerminationMessagePolicy.ReadJSON(i); err != nil {
				return err
			}
		case "tty":
			s.Tty.Reset()
			if err := s.Tty.ReadJSON(i); err != nil {
				return err
			}
		case "volumeDevices":
			s.VolumeDevices = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1VolumeDevice
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.VolumeDevices = append(s.VolumeDevices, elem)
				return nil
			}); err != nil {
				return err
			}
		case "volumeMounts":
			s.VolumeMounts = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1VolumeMount
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.VolumeMounts = append(s.VolumeMounts, elem)
				return nil
			}); err != nil {
				return err
			}
		case "workingDir":
			s.WorkingDir.Reset()
			if err := s.WorkingDir.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EphemeralVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.VolumeClaimTemplate.Set {
		more.More()
		j.WriteObjectField("volumeClaimTemplate")
		s.VolumeClaimTemplate.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EphemeralVolumeSource from json stream.
func (s *IoK8sAPICoreV1EphemeralVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EphemeralVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "volumeClaimTemplate":
			s.VolumeClaimTemplate.Reset()
			if err := s.VolumeClaimTemplate.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Action.Set {
		more.More()
		j.WriteObjectField("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Count.Set {
		more.More()
		j.WriteObjectField("count")
		s.Count.WriteJSON(j)
	}
	if s.EventTime.Set {
		more.More()
		j.WriteObjectField("eventTime")
		s.EventTime.WriteJSON(j)
	}
	if s.FirstTimestamp.Set {
		more.More()
		j.WriteObjectField("firstTimestamp")
		s.FirstTimestamp.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("involvedObject")
	s.InvolvedObject.WriteJSON(j)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.LastTimestamp.Set {
		more.More()
		j.WriteObjectField("lastTimestamp")
		s.LastTimestamp.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("metadata")
	s.Metadata.WriteJSON(j)
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Related.Set {
		more.More()
		j.WriteObjectField("related")
		s.Related.WriteJSON(j)
	}
	if s.ReportingComponent.Set {
		more.More()
		j.WriteObjectField("reportingComponent")
		s.ReportingComponent.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		more.More()
		j.WriteObjectField("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	if s.Series.Set {
		more.More()
		j.WriteObjectField("series")
		s.Series.WriteJSON(j)
	}
	if s.Source.Set {
		more.More()
		j.WriteObjectField("source")
		s.Source.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Event from json stream.
func (s *IoK8sAPICoreV1Event) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Event to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(i); err != nil {
				return err
			}
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "count":
			s.Count.Reset()
			if err := s.Count.ReadJSON(i); err != nil {
				return err
			}
		case "eventTime":
			s.EventTime.Reset()
			if err := s.EventTime.ReadJSON(i); err != nil {
				return err
			}
		case "firstTimestamp":
			s.FirstTimestamp.Reset()
			if err := s.FirstTimestamp.ReadJSON(i); err != nil {
				return err
			}
		case "involvedObject":
			if err := s.InvolvedObject.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "lastTimestamp":
			s.LastTimestamp.Reset()
			if err := s.LastTimestamp.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "related":
			s.Related.Reset()
			if err := s.Related.ReadJSON(i); err != nil {
				return err
			}
		case "reportingComponent":
			s.ReportingComponent.Reset()
			if err := s.ReportingComponent.ReadJSON(i); err != nil {
				return err
			}
		case "reportingInstance":
			s.ReportingInstance.Reset()
			if err := s.ReportingInstance.ReadJSON(i); err != nil {
				return err
			}
		case "series":
			s.Series.Reset()
			if err := s.Series.ReadJSON(i); err != nil {
				return err
			}
		case "source":
			s.Source.Reset()
			if err := s.Source.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EventList from json stream.
func (s *IoK8sAPICoreV1EventList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EventList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Event
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Count.Set {
		more.More()
		j.WriteObjectField("count")
		s.Count.WriteJSON(j)
	}
	if s.LastObservedTime.Set {
		more.More()
		j.WriteObjectField("lastObservedTime")
		s.LastObservedTime.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EventSeries from json stream.
func (s *IoK8sAPICoreV1EventSeries) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EventSeries to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "count":
			s.Count.Reset()
			if err := s.Count.ReadJSON(i); err != nil {
				return err
			}
		case "lastObservedTime":
			s.LastObservedTime.Reset()
			if err := s.LastObservedTime.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Component.Set {
		more.More()
		j.WriteObjectField("component")
		s.Component.WriteJSON(j)
	}
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1EventSource from json stream.
func (s *IoK8sAPICoreV1EventSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1EventSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "component":
			s.Component.Reset()
			if err := s.Component.ReadJSON(i); err != nil {
				return err
			}
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ExecAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Command != nil {
		more.More()
		j.WriteObjectField("command")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Command {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ExecAction from json stream.
func (s *IoK8sAPICoreV1ExecAction) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ExecAction to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "command":
			s.Command = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Command = append(s.Command, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FCVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Lun.Set {
		more.More()
		j.WriteObjectField("lun")
		s.Lun.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.TargetWWNs != nil {
		more.More()
		j.WriteObjectField("targetWWNs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TargetWWNs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Wwids != nil {
		more.More()
		j.WriteObjectField("wwids")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Wwids {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FCVolumeSource from json stream.
func (s *IoK8sAPICoreV1FCVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FCVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "lun":
			s.Lun.Reset()
			if err := s.Lun.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "targetWWNs":
			s.TargetWWNs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.TargetWWNs = append(s.TargetWWNs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "wwids":
			s.Wwids = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Wwids = append(s.Wwids, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Options != nil {
		more.More()
		j.WriteObjectField("options")
		s.Options.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FlexPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FlexPersistentVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "driver":
			v, err := i.Str()
			s.Driver = string(v)
			if err != nil {
				return err
			}
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "options":
			s.Options = nil
			var elem IoK8sAPICoreV1FlexPersistentVolumeSourceOptions
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Options = &elem
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexPersistentVolumeSourceOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FlexPersistentVolumeSourceOptions from json stream.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSourceOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FlexPersistentVolumeSourceOptions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Options != nil {
		more.More()
		j.WriteObjectField("options")
		s.Options.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FlexVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlexVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FlexVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "driver":
			v, err := i.Str()
			s.Driver = string(v)
			if err != nil {
				return err
			}
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "options":
			s.Options = nil
			var elem IoK8sAPICoreV1FlexVolumeSourceOptions
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Options = &elem
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexVolumeSourceOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FlexVolumeSourceOptions from json stream.
func (s *IoK8sAPICoreV1FlexVolumeSourceOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FlexVolumeSourceOptions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlockerVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DatasetName.Set {
		more.More()
		j.WriteObjectField("datasetName")
		s.DatasetName.WriteJSON(j)
	}
	if s.DatasetUUID.Set {
		more.More()
		j.WriteObjectField("datasetUUID")
		s.DatasetUUID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1FlockerVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlockerVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1FlockerVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "datasetName":
			s.DatasetName.Reset()
			if err := s.DatasetName.ReadJSON(i); err != nil {
				return err
			}
		case "datasetUUID":
			s.DatasetUUID.Reset()
			if err := s.DatasetUUID.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GCEPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Partition.Set {
		more.More()
		j.WriteObjectField("partition")
		s.Partition.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("pdName")
	j.WriteString(s.PdName)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1GCEPersistentDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1GCEPersistentDiskVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "partition":
			s.Partition.Reset()
			if err := s.Partition.ReadJSON(i); err != nil {
				return err
			}
		case "pdName":
			v, err := i.Str()
			s.PdName = string(v)
			if err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GitRepoVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Directory.Set {
		more.More()
		j.WriteObjectField("directory")
		s.Directory.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("repository")
	j.WriteString(s.Repository)
	if s.Revision.Set {
		more.More()
		j.WriteObjectField("revision")
		s.Revision.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1GitRepoVolumeSource from json stream.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1GitRepoVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "directory":
			s.Directory.Reset()
			if err := s.Directory.ReadJSON(i); err != nil {
				return err
			}
		case "repository":
			v, err := i.Str()
			s.Repository = string(v)
			if err != nil {
				return err
			}
		case "revision":
			s.Revision.Reset()
			if err := s.Revision.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GlusterfsPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("endpoints")
	j.WriteString(s.Endpoints)
	if s.EndpointsNamespace.Set {
		more.More()
		j.WriteObjectField("endpointsNamespace")
		s.EndpointsNamespace.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1GlusterfsPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1GlusterfsPersistentVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "endpoints":
			v, err := i.Str()
			s.Endpoints = string(v)
			if err != nil {
				return err
			}
		case "endpointsNamespace":
			s.EndpointsNamespace.Reset()
			if err := s.EndpointsNamespace.ReadJSON(i); err != nil {
				return err
			}
		case "path":
			v, err := i.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GlusterfsVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("endpoints")
	j.WriteString(s.Endpoints)
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1GlusterfsVolumeSource from json stream.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1GlusterfsVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "endpoints":
			v, err := i.Str()
			s.Endpoints = string(v)
			if err != nil {
				return err
			}
		case "path":
			v, err := i.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HTTPGetAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	if s.HttpHeaders != nil {
		more.More()
		j.WriteObjectField("httpHeaders")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.HttpHeaders {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	// Unsupported kind "alias".
	if s.Scheme.Set {
		more.More()
		j.WriteObjectField("scheme")
		s.Scheme.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1HTTPGetAction from json stream.
func (s *IoK8sAPICoreV1HTTPGetAction) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1HTTPGetAction to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				return err
			}
		case "httpHeaders":
			s.HttpHeaders = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1HTTPHeader
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.HttpHeaders = append(s.HttpHeaders, elem)
				return nil
			}); err != nil {
				return err
			}
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				return err
			}
		case "port":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgUtilIntstrIntOrString" (alias) is not implemented`); err != nil {
				return err
			}
		case "scheme":
			s.Scheme.Reset()
			if err := s.Scheme.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HTTPHeader) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1HTTPHeader from json stream.
func (s *IoK8sAPICoreV1HTTPHeader) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1HTTPHeader to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "value":
			v, err := i.Str()
			s.Value = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Handler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Exec.Set {
		more.More()
		j.WriteObjectField("exec")
		s.Exec.WriteJSON(j)
	}
	if s.HttpGet.Set {
		more.More()
		j.WriteObjectField("httpGet")
		s.HttpGet.WriteJSON(j)
	}
	if s.TcpSocket.Set {
		more.More()
		j.WriteObjectField("tcpSocket")
		s.TcpSocket.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Handler from json stream.
func (s *IoK8sAPICoreV1Handler) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Handler to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "exec":
			s.Exec.Reset()
			if err := s.Exec.ReadJSON(i); err != nil {
				return err
			}
		case "httpGet":
			s.HttpGet.Reset()
			if err := s.HttpGet.ReadJSON(i); err != nil {
				return err
			}
		case "tcpSocket":
			s.TcpSocket.Reset()
			if err := s.TcpSocket.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HostAlias) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hostnames != nil {
		more.More()
		j.WriteObjectField("hostnames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Hostnames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.IP.Set {
		more.More()
		j.WriteObjectField("ip")
		s.IP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1HostAlias from json stream.
func (s *IoK8sAPICoreV1HostAlias) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1HostAlias to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "hostnames":
			s.Hostnames = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Hostnames = append(s.Hostnames, elem)
				return nil
			}); err != nil {
				return err
			}
		case "ip":
			s.IP.Reset()
			if err := s.IP.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HostPathVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1HostPathVolumeSource from json stream.
func (s *IoK8sAPICoreV1HostPathVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1HostPathVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "path":
			v, err := i.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ISCSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChapAuthDiscovery.Set {
		more.More()
		j.WriteObjectField("chapAuthDiscovery")
		s.ChapAuthDiscovery.WriteJSON(j)
	}
	if s.ChapAuthSession.Set {
		more.More()
		j.WriteObjectField("chapAuthSession")
		s.ChapAuthSession.WriteJSON(j)
	}
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.InitiatorName.Set {
		more.More()
		j.WriteObjectField("initiatorName")
		s.InitiatorName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("iqn")
	j.WriteString(s.Iqn)
	if s.IscsiInterface.Set {
		more.More()
		j.WriteObjectField("iscsiInterface")
		s.IscsiInterface.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("lun")
	j.WriteInt32(s.Lun)
	if s.Portals != nil {
		more.More()
		j.WriteObjectField("portals")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Portals {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("targetPortal")
	j.WriteString(s.TargetPortal)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ISCSIPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ISCSIPersistentVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "chapAuthDiscovery":
			s.ChapAuthDiscovery.Reset()
			if err := s.ChapAuthDiscovery.ReadJSON(i); err != nil {
				return err
			}
		case "chapAuthSession":
			s.ChapAuthSession.Reset()
			if err := s.ChapAuthSession.ReadJSON(i); err != nil {
				return err
			}
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "initiatorName":
			s.InitiatorName.Reset()
			if err := s.InitiatorName.ReadJSON(i); err != nil {
				return err
			}
		case "iqn":
			v, err := i.Str()
			s.Iqn = string(v)
			if err != nil {
				return err
			}
		case "iscsiInterface":
			s.IscsiInterface.Reset()
			if err := s.IscsiInterface.ReadJSON(i); err != nil {
				return err
			}
		case "lun":
			v, err := i.Int32()
			s.Lun = int32(v)
			if err != nil {
				return err
			}
		case "portals":
			s.Portals = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Portals = append(s.Portals, elem)
				return nil
			}); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "targetPortal":
			v, err := i.Str()
			s.TargetPortal = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ISCSIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChapAuthDiscovery.Set {
		more.More()
		j.WriteObjectField("chapAuthDiscovery")
		s.ChapAuthDiscovery.WriteJSON(j)
	}
	if s.ChapAuthSession.Set {
		more.More()
		j.WriteObjectField("chapAuthSession")
		s.ChapAuthSession.WriteJSON(j)
	}
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.InitiatorName.Set {
		more.More()
		j.WriteObjectField("initiatorName")
		s.InitiatorName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("iqn")
	j.WriteString(s.Iqn)
	if s.IscsiInterface.Set {
		more.More()
		j.WriteObjectField("iscsiInterface")
		s.IscsiInterface.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("lun")
	j.WriteInt32(s.Lun)
	if s.Portals != nil {
		more.More()
		j.WriteObjectField("portals")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Portals {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("targetPortal")
	j.WriteString(s.TargetPortal)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ISCSIVolumeSource from json stream.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ISCSIVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "chapAuthDiscovery":
			s.ChapAuthDiscovery.Reset()
			if err := s.ChapAuthDiscovery.ReadJSON(i); err != nil {
				return err
			}
		case "chapAuthSession":
			s.ChapAuthSession.Reset()
			if err := s.ChapAuthSession.ReadJSON(i); err != nil {
				return err
			}
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "initiatorName":
			s.InitiatorName.Reset()
			if err := s.InitiatorName.ReadJSON(i); err != nil {
				return err
			}
		case "iqn":
			v, err := i.Str()
			s.Iqn = string(v)
			if err != nil {
				return err
			}
		case "iscsiInterface":
			s.IscsiInterface.Reset()
			if err := s.IscsiInterface.ReadJSON(i); err != nil {
				return err
			}
		case "lun":
			v, err := i.Int32()
			s.Lun = int32(v)
			if err != nil {
				return err
			}
		case "portals":
			s.Portals = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Portals = append(s.Portals, elem)
				return nil
			}); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "targetPortal":
			v, err := i.Str()
			s.TargetPortal = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1KeyToPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	if s.Mode.Set {
		more.More()
		j.WriteObjectField("mode")
		s.Mode.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1KeyToPath from json stream.
func (s *IoK8sAPICoreV1KeyToPath) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1KeyToPath to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "key":
			v, err := i.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(i); err != nil {
				return err
			}
		case "path":
			v, err := i.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Lifecycle) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PostStart.Set {
		more.More()
		j.WriteObjectField("postStart")
		s.PostStart.WriteJSON(j)
	}
	if s.PreStop.Set {
		more.More()
		j.WriteObjectField("preStop")
		s.PreStop.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Lifecycle from json stream.
func (s *IoK8sAPICoreV1Lifecycle) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Lifecycle to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "postStart":
			s.PostStart.Reset()
			if err := s.PostStart.ReadJSON(i); err != nil {
				return err
			}
		case "preStop":
			s.PreStop.Reset()
			if err := s.PreStop.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRange from json stream.
func (s *IoK8sAPICoreV1LimitRange) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRange to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Default != nil {
		more.More()
		j.WriteObjectField("default")
		s.Default.WriteJSON(j)
	}
	if s.DefaultRequest != nil {
		more.More()
		j.WriteObjectField("defaultRequest")
		s.DefaultRequest.WriteJSON(j)
	}
	if s.Max != nil {
		more.More()
		j.WriteObjectField("max")
		s.Max.WriteJSON(j)
	}
	if s.MaxLimitRequestRatio != nil {
		more.More()
		j.WriteObjectField("maxLimitRequestRatio")
		s.MaxLimitRequestRatio.WriteJSON(j)
	}
	if s.Min != nil {
		more.More()
		j.WriteObjectField("min")
		s.Min.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItem from json stream.
func (s *IoK8sAPICoreV1LimitRangeItem) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItem to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "default":
			s.Default = nil
			var elem IoK8sAPICoreV1LimitRangeItemDefault
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Default = &elem
		case "defaultRequest":
			s.DefaultRequest = nil
			var elem IoK8sAPICoreV1LimitRangeItemDefaultRequest
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.DefaultRequest = &elem
		case "max":
			s.Max = nil
			var elem IoK8sAPICoreV1LimitRangeItemMax
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Max = &elem
		case "maxLimitRequestRatio":
			s.MaxLimitRequestRatio = nil
			var elem IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.MaxLimitRequestRatio = &elem
		case "min":
			s.Min = nil
			var elem IoK8sAPICoreV1LimitRangeItemMin
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Min = &elem
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItemDefault) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItemDefault from json stream.
func (s *IoK8sAPICoreV1LimitRangeItemDefault) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItemDefault to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItemDefaultRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItemDefaultRequest from json stream.
func (s *IoK8sAPICoreV1LimitRangeItemDefaultRequest) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItemDefaultRequest to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItemMax) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItemMax from json stream.
func (s *IoK8sAPICoreV1LimitRangeItemMax) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItemMax to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio from json stream.
func (s *IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItemMin) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItemMin from json stream.
func (s *IoK8sAPICoreV1LimitRangeItemMin) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeItemMin to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeList from json stream.
func (s *IoK8sAPICoreV1LimitRangeList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1LimitRange
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("limits")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Limits {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeSpec from json stream.
func (s *IoK8sAPICoreV1LimitRangeSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LimitRangeSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "limits":
			s.Limits = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1LimitRangeItem
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Limits = append(s.Limits, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LoadBalancerIngress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.IP.Set {
		more.More()
		j.WriteObjectField("ip")
		s.IP.WriteJSON(j)
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LoadBalancerIngress from json stream.
func (s *IoK8sAPICoreV1LoadBalancerIngress) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LoadBalancerIngress to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				return err
			}
		case "ip":
			s.IP.Reset()
			if err := s.IP.ReadJSON(i); err != nil {
				return err
			}
		case "ports":
			s.Ports = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PortStatus
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ports = append(s.Ports, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LoadBalancerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ingress != nil {
		more.More()
		j.WriteObjectField("ingress")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ingress {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LoadBalancerStatus from json stream.
func (s *IoK8sAPICoreV1LoadBalancerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LoadBalancerStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "ingress":
			s.Ingress = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1LoadBalancerIngress
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ingress = append(s.Ingress, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LocalObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LocalObjectReference from json stream.
func (s *IoK8sAPICoreV1LocalObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LocalObjectReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LocalVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1LocalVolumeSource from json stream.
func (s *IoK8sAPICoreV1LocalVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1LocalVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "path":
			v, err := i.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NFSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("server")
	j.WriteString(s.Server)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NFSVolumeSource from json stream.
func (s *IoK8sAPICoreV1NFSVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NFSVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "path":
			v, err := i.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "server":
			v, err := i.Str()
			s.Server = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Namespace) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Namespace from json stream.
func (s *IoK8sAPICoreV1Namespace) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Namespace to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NamespaceCondition from json stream.
func (s *IoK8sAPICoreV1NamespaceCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NamespaceCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NamespaceList from json stream.
func (s *IoK8sAPICoreV1NamespaceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NamespaceList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Namespace
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Finalizers != nil {
		more.More()
		j.WriteObjectField("finalizers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Finalizers {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NamespaceSpec from json stream.
func (s *IoK8sAPICoreV1NamespaceSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NamespaceSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "finalizers":
			s.Finalizers = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Finalizers = append(s.Finalizers, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NamespaceStatus from json stream.
func (s *IoK8sAPICoreV1NamespaceStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NamespaceStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1NamespaceCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Node) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Node from json stream.
func (s *IoK8sAPICoreV1Node) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Node to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeAddress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("address")
	j.WriteString(s.Address)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeAddress from json stream.
func (s *IoK8sAPICoreV1NodeAddress) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeAddress to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "address":
			v, err := i.Str()
			s.Address = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PreferredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("preferredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PreferredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RequiredDuringSchedulingIgnoredDuringExecution.Set {
		more.More()
		j.WriteObjectField("requiredDuringSchedulingIgnoredDuringExecution")
		s.RequiredDuringSchedulingIgnoredDuringExecution.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeAffinity from json stream.
func (s *IoK8sAPICoreV1NodeAffinity) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeAffinity to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			s.PreferredDuringSchedulingIgnoredDuringExecution = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PreferredSchedulingTerm
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.PreferredDuringSchedulingIgnoredDuringExecution = append(s.PreferredDuringSchedulingIgnoredDuringExecution, elem)
				return nil
			}); err != nil {
				return err
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			s.RequiredDuringSchedulingIgnoredDuringExecution.Reset()
			if err := s.RequiredDuringSchedulingIgnoredDuringExecution.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastHeartbeatTime.Set {
		more.More()
		j.WriteObjectField("lastHeartbeatTime")
		s.LastHeartbeatTime.WriteJSON(j)
	}
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeCondition from json stream.
func (s *IoK8sAPICoreV1NodeCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastHeartbeatTime":
			s.LastHeartbeatTime.Reset()
			if err := s.LastHeartbeatTime.ReadJSON(i); err != nil {
				return err
			}
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeConfigSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMap.Set {
		more.More()
		j.WriteObjectField("configMap")
		s.ConfigMap.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeConfigSource from json stream.
func (s *IoK8sAPICoreV1NodeConfigSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeConfigSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "configMap":
			s.ConfigMap.Reset()
			if err := s.ConfigMap.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeConfigStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active.Set {
		more.More()
		j.WriteObjectField("active")
		s.Active.WriteJSON(j)
	}
	if s.Assigned.Set {
		more.More()
		j.WriteObjectField("assigned")
		s.Assigned.WriteJSON(j)
	}
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	if s.LastKnownGood.Set {
		more.More()
		j.WriteObjectField("lastKnownGood")
		s.LastKnownGood.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeConfigStatus from json stream.
func (s *IoK8sAPICoreV1NodeConfigStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeConfigStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(i); err != nil {
				return err
			}
		case "assigned":
			s.Assigned.Reset()
			if err := s.Assigned.ReadJSON(i); err != nil {
				return err
			}
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				return err
			}
		case "lastKnownGood":
			s.LastKnownGood.Reset()
			if err := s.LastKnownGood.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeDaemonEndpoints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.KubeletEndpoint.Set {
		more.More()
		j.WriteObjectField("kubeletEndpoint")
		s.KubeletEndpoint.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeDaemonEndpoints from json stream.
func (s *IoK8sAPICoreV1NodeDaemonEndpoints) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeDaemonEndpoints to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "kubeletEndpoint":
			s.KubeletEndpoint.Reset()
			if err := s.KubeletEndpoint.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeList from json stream.
func (s *IoK8sAPICoreV1NodeList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Node
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("nodeSelectorTerms")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NodeSelectorTerms {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeSelector from json stream.
func (s *IoK8sAPICoreV1NodeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeSelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nodeSelectorTerms":
			s.NodeSelectorTerms = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1NodeSelectorTerm
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.NodeSelectorTerms = append(s.NodeSelectorTerms, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	more.More()
	j.WriteObjectField("operator")
	j.WriteString(s.Operator)
	if s.Values != nil {
		more.More()
		j.WriteObjectField("values")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Values {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeSelectorRequirement from json stream.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeSelectorRequirement to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "key":
			v, err := i.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "operator":
			v, err := i.Str()
			s.Operator = string(v)
			if err != nil {
				return err
			}
		case "values":
			s.Values = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Values = append(s.Values, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelectorTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchExpressions != nil {
		more.More()
		j.WriteObjectField("matchExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.MatchFields != nil {
		more.More()
		j.WriteObjectField("matchFields")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchFields {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeSelectorTerm from json stream.
func (s *IoK8sAPICoreV1NodeSelectorTerm) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeSelectorTerm to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "matchExpressions":
			s.MatchExpressions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1NodeSelectorRequirement
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.MatchExpressions = append(s.MatchExpressions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "matchFields":
			s.MatchFields = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1NodeSelectorRequirement
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.MatchFields = append(s.MatchFields, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigSource.Set {
		more.More()
		j.WriteObjectField("configSource")
		s.ConfigSource.WriteJSON(j)
	}
	if s.ExternalID.Set {
		more.More()
		j.WriteObjectField("externalID")
		s.ExternalID.WriteJSON(j)
	}
	if s.PodCIDR.Set {
		more.More()
		j.WriteObjectField("podCIDR")
		s.PodCIDR.WriteJSON(j)
	}
	if s.PodCIDRs != nil {
		more.More()
		j.WriteObjectField("podCIDRs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PodCIDRs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ProviderID.Set {
		more.More()
		j.WriteObjectField("providerID")
		s.ProviderID.WriteJSON(j)
	}
	if s.Taints != nil {
		more.More()
		j.WriteObjectField("taints")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Taints {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Unschedulable.Set {
		more.More()
		j.WriteObjectField("unschedulable")
		s.Unschedulable.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeSpec from json stream.
func (s *IoK8sAPICoreV1NodeSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "configSource":
			s.ConfigSource.Reset()
			if err := s.ConfigSource.ReadJSON(i); err != nil {
				return err
			}
		case "externalID":
			s.ExternalID.Reset()
			if err := s.ExternalID.ReadJSON(i); err != nil {
				return err
			}
		case "podCIDR":
			s.PodCIDR.Reset()
			if err := s.PodCIDR.ReadJSON(i); err != nil {
				return err
			}
		case "podCIDRs":
			s.PodCIDRs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.PodCIDRs = append(s.PodCIDRs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "providerID":
			s.ProviderID.Reset()
			if err := s.ProviderID.ReadJSON(i); err != nil {
				return err
			}
		case "taints":
			s.Taints = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Taint
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Taints = append(s.Taints, elem)
				return nil
			}); err != nil {
				return err
			}
		case "unschedulable":
			s.Unschedulable.Reset()
			if err := s.Unschedulable.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Addresses != nil {
		more.More()
		j.WriteObjectField("addresses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Addresses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Allocatable != nil {
		more.More()
		j.WriteObjectField("allocatable")
		s.Allocatable.WriteJSON(j)
	}
	if s.Capacity != nil {
		more.More()
		j.WriteObjectField("capacity")
		s.Capacity.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Config.Set {
		more.More()
		j.WriteObjectField("config")
		s.Config.WriteJSON(j)
	}
	if s.DaemonEndpoints.Set {
		more.More()
		j.WriteObjectField("daemonEndpoints")
		s.DaemonEndpoints.WriteJSON(j)
	}
	if s.Images != nil {
		more.More()
		j.WriteObjectField("images")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Images {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NodeInfo.Set {
		more.More()
		j.WriteObjectField("nodeInfo")
		s.NodeInfo.WriteJSON(j)
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	if s.VolumesAttached != nil {
		more.More()
		j.WriteObjectField("volumesAttached")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumesAttached {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumesInUse != nil {
		more.More()
		j.WriteObjectField("volumesInUse")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumesInUse {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeStatus from json stream.
func (s *IoK8sAPICoreV1NodeStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "addresses":
			s.Addresses = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1NodeAddress
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Addresses = append(s.Addresses, elem)
				return nil
			}); err != nil {
				return err
			}
		case "allocatable":
			s.Allocatable = nil
			var elem IoK8sAPICoreV1NodeStatusAllocatable
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Allocatable = &elem
		case "capacity":
			s.Capacity = nil
			var elem IoK8sAPICoreV1NodeStatusCapacity
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Capacity = &elem
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1NodeCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "config":
			s.Config.Reset()
			if err := s.Config.ReadJSON(i); err != nil {
				return err
			}
		case "daemonEndpoints":
			s.DaemonEndpoints.Reset()
			if err := s.DaemonEndpoints.ReadJSON(i); err != nil {
				return err
			}
		case "images":
			s.Images = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ContainerImage
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Images = append(s.Images, elem)
				return nil
			}); err != nil {
				return err
			}
		case "nodeInfo":
			s.NodeInfo.Reset()
			if err := s.NodeInfo.ReadJSON(i); err != nil {
				return err
			}
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				return err
			}
		case "volumesAttached":
			s.VolumesAttached = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1AttachedVolume
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.VolumesAttached = append(s.VolumesAttached, elem)
				return nil
			}); err != nil {
				return err
			}
		case "volumesInUse":
			s.VolumesInUse = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.VolumesInUse = append(s.VolumesInUse, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeStatusAllocatable) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeStatusAllocatable from json stream.
func (s *IoK8sAPICoreV1NodeStatusAllocatable) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeStatusAllocatable to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeStatusCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeStatusCapacity from json stream.
func (s *IoK8sAPICoreV1NodeStatusCapacity) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeStatusCapacity to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSystemInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("architecture")
	j.WriteString(s.Architecture)
	more.More()
	j.WriteObjectField("bootID")
	j.WriteString(s.BootID)
	more.More()
	j.WriteObjectField("containerRuntimeVersion")
	j.WriteString(s.ContainerRuntimeVersion)
	more.More()
	j.WriteObjectField("kernelVersion")
	j.WriteString(s.KernelVersion)
	more.More()
	j.WriteObjectField("kubeProxyVersion")
	j.WriteString(s.KubeProxyVersion)
	more.More()
	j.WriteObjectField("kubeletVersion")
	j.WriteString(s.KubeletVersion)
	more.More()
	j.WriteObjectField("machineID")
	j.WriteString(s.MachineID)
	more.More()
	j.WriteObjectField("operatingSystem")
	j.WriteString(s.OperatingSystem)
	more.More()
	j.WriteObjectField("osImage")
	j.WriteString(s.OsImage)
	more.More()
	j.WriteObjectField("systemUUID")
	j.WriteString(s.SystemUUID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1NodeSystemInfo from json stream.
func (s *IoK8sAPICoreV1NodeSystemInfo) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1NodeSystemInfo to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "architecture":
			v, err := i.Str()
			s.Architecture = string(v)
			if err != nil {
				return err
			}
		case "bootID":
			v, err := i.Str()
			s.BootID = string(v)
			if err != nil {
				return err
			}
		case "containerRuntimeVersion":
			v, err := i.Str()
			s.ContainerRuntimeVersion = string(v)
			if err != nil {
				return err
			}
		case "kernelVersion":
			v, err := i.Str()
			s.KernelVersion = string(v)
			if err != nil {
				return err
			}
		case "kubeProxyVersion":
			v, err := i.Str()
			s.KubeProxyVersion = string(v)
			if err != nil {
				return err
			}
		case "kubeletVersion":
			v, err := i.Str()
			s.KubeletVersion = string(v)
			if err != nil {
				return err
			}
		case "machineID":
			v, err := i.Str()
			s.MachineID = string(v)
			if err != nil {
				return err
			}
		case "operatingSystem":
			v, err := i.Str()
			s.OperatingSystem = string(v)
			if err != nil {
				return err
			}
		case "osImage":
			v, err := i.Str()
			s.OsImage = string(v)
			if err != nil {
				return err
			}
		case "systemUUID":
			v, err := i.Str()
			s.SystemUUID = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ObjectFieldSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("fieldPath")
	j.WriteString(s.FieldPath)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ObjectFieldSelector from json stream.
func (s *IoK8sAPICoreV1ObjectFieldSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ObjectFieldSelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "fieldPath":
			v, err := i.Str()
			s.FieldPath = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.FieldPath.Set {
		more.More()
		j.WriteObjectField("fieldPath")
		s.FieldPath.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ObjectReference from json stream.
func (s *IoK8sAPICoreV1ObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ObjectReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "fieldPath":
			s.FieldPath.Reset()
			if err := s.FieldPath.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				return err
			}
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				return err
			}
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolume from json stream.
func (s *IoK8sAPICoreV1PersistentVolume) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolume to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaim) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaim from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaim to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastProbeTime.Set {
		more.More()
		j.WriteObjectField("lastProbeTime")
		s.LastProbeTime.WriteJSON(j)
	}
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimCondition from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastProbeTime":
			s.LastProbeTime.Reset()
			if err := s.LastProbeTime.ReadJSON(i); err != nil {
				return err
			}
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimList from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PersistentVolumeClaim
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AccessModes != nil {
		more.More()
		j.WriteObjectField("accessModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AccessModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.DataSource.Set {
		more.More()
		j.WriteObjectField("dataSource")
		s.DataSource.WriteJSON(j)
	}
	if s.DataSourceRef.Set {
		more.More()
		j.WriteObjectField("dataSourceRef")
		s.DataSourceRef.WriteJSON(j)
	}
	if s.Resources.Set {
		more.More()
		j.WriteObjectField("resources")
		s.Resources.WriteJSON(j)
	}
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	if s.StorageClassName.Set {
		more.More()
		j.WriteObjectField("storageClassName")
		s.StorageClassName.WriteJSON(j)
	}
	if s.VolumeMode.Set {
		more.More()
		j.WriteObjectField("volumeMode")
		s.VolumeMode.WriteJSON(j)
	}
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimSpec from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "accessModes":
			s.AccessModes = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AccessModes = append(s.AccessModes, elem)
				return nil
			}); err != nil {
				return err
			}
		case "dataSource":
			s.DataSource.Reset()
			if err := s.DataSource.ReadJSON(i); err != nil {
				return err
			}
		case "dataSourceRef":
			s.DataSourceRef.Reset()
			if err := s.DataSourceRef.ReadJSON(i); err != nil {
				return err
			}
		case "resources":
			s.Resources.Reset()
			if err := s.Resources.ReadJSON(i); err != nil {
				return err
			}
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		case "storageClassName":
			s.StorageClassName.Reset()
			if err := s.StorageClassName.ReadJSON(i); err != nil {
				return err
			}
		case "volumeMode":
			s.VolumeMode.Reset()
			if err := s.VolumeMode.ReadJSON(i); err != nil {
				return err
			}
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AccessModes != nil {
		more.More()
		j.WriteObjectField("accessModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AccessModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Capacity != nil {
		more.More()
		j.WriteObjectField("capacity")
		s.Capacity.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimStatus from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "accessModes":
			s.AccessModes = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AccessModes = append(s.AccessModes, elem)
				return nil
			}); err != nil {
				return err
			}
		case "capacity":
			s.Capacity = nil
			var elem IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Capacity = &elem
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PersistentVolumeClaimCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimTemplate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimTemplate from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimTemplate) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimTemplate to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("claimName")
	j.WriteString(s.ClaimName)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimVolumeSource from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeClaimVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "claimName":
			v, err := i.Str()
			s.ClaimName = string(v)
			if err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeList from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PersistentVolume
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AccessModes != nil {
		more.More()
		j.WriteObjectField("accessModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AccessModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AwsElasticBlockStore.Set {
		more.More()
		j.WriteObjectField("awsElasticBlockStore")
		s.AwsElasticBlockStore.WriteJSON(j)
	}
	if s.AzureDisk.Set {
		more.More()
		j.WriteObjectField("azureDisk")
		s.AzureDisk.WriteJSON(j)
	}
	if s.AzureFile.Set {
		more.More()
		j.WriteObjectField("azureFile")
		s.AzureFile.WriteJSON(j)
	}
	if s.Capacity != nil {
		more.More()
		j.WriteObjectField("capacity")
		s.Capacity.WriteJSON(j)
	}
	if s.Cephfs.Set {
		more.More()
		j.WriteObjectField("cephfs")
		s.Cephfs.WriteJSON(j)
	}
	if s.Cinder.Set {
		more.More()
		j.WriteObjectField("cinder")
		s.Cinder.WriteJSON(j)
	}
	if s.ClaimRef.Set {
		more.More()
		j.WriteObjectField("claimRef")
		s.ClaimRef.WriteJSON(j)
	}
	if s.Csi.Set {
		more.More()
		j.WriteObjectField("csi")
		s.Csi.WriteJSON(j)
	}
	if s.Fc.Set {
		more.More()
		j.WriteObjectField("fc")
		s.Fc.WriteJSON(j)
	}
	if s.FlexVolume.Set {
		more.More()
		j.WriteObjectField("flexVolume")
		s.FlexVolume.WriteJSON(j)
	}
	if s.Flocker.Set {
		more.More()
		j.WriteObjectField("flocker")
		s.Flocker.WriteJSON(j)
	}
	if s.GcePersistentDisk.Set {
		more.More()
		j.WriteObjectField("gcePersistentDisk")
		s.GcePersistentDisk.WriteJSON(j)
	}
	if s.Glusterfs.Set {
		more.More()
		j.WriteObjectField("glusterfs")
		s.Glusterfs.WriteJSON(j)
	}
	if s.HostPath.Set {
		more.More()
		j.WriteObjectField("hostPath")
		s.HostPath.WriteJSON(j)
	}
	if s.Iscsi.Set {
		more.More()
		j.WriteObjectField("iscsi")
		s.Iscsi.WriteJSON(j)
	}
	if s.Local.Set {
		more.More()
		j.WriteObjectField("local")
		s.Local.WriteJSON(j)
	}
	if s.MountOptions != nil {
		more.More()
		j.WriteObjectField("mountOptions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MountOptions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Nfs.Set {
		more.More()
		j.WriteObjectField("nfs")
		s.Nfs.WriteJSON(j)
	}
	if s.NodeAffinity.Set {
		more.More()
		j.WriteObjectField("nodeAffinity")
		s.NodeAffinity.WriteJSON(j)
	}
	if s.PersistentVolumeReclaimPolicy.Set {
		more.More()
		j.WriteObjectField("persistentVolumeReclaimPolicy")
		s.PersistentVolumeReclaimPolicy.WriteJSON(j)
	}
	if s.PhotonPersistentDisk.Set {
		more.More()
		j.WriteObjectField("photonPersistentDisk")
		s.PhotonPersistentDisk.WriteJSON(j)
	}
	if s.PortworxVolume.Set {
		more.More()
		j.WriteObjectField("portworxVolume")
		s.PortworxVolume.WriteJSON(j)
	}
	if s.Quobyte.Set {
		more.More()
		j.WriteObjectField("quobyte")
		s.Quobyte.WriteJSON(j)
	}
	if s.Rbd.Set {
		more.More()
		j.WriteObjectField("rbd")
		s.Rbd.WriteJSON(j)
	}
	if s.ScaleIO.Set {
		more.More()
		j.WriteObjectField("scaleIO")
		s.ScaleIO.WriteJSON(j)
	}
	if s.StorageClassName.Set {
		more.More()
		j.WriteObjectField("storageClassName")
		s.StorageClassName.WriteJSON(j)
	}
	if s.Storageos.Set {
		more.More()
		j.WriteObjectField("storageos")
		s.Storageos.WriteJSON(j)
	}
	if s.VolumeMode.Set {
		more.More()
		j.WriteObjectField("volumeMode")
		s.VolumeMode.WriteJSON(j)
	}
	if s.VsphereVolume.Set {
		more.More()
		j.WriteObjectField("vsphereVolume")
		s.VsphereVolume.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeSpec from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "accessModes":
			s.AccessModes = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AccessModes = append(s.AccessModes, elem)
				return nil
			}); err != nil {
				return err
			}
		case "awsElasticBlockStore":
			s.AwsElasticBlockStore.Reset()
			if err := s.AwsElasticBlockStore.ReadJSON(i); err != nil {
				return err
			}
		case "azureDisk":
			s.AzureDisk.Reset()
			if err := s.AzureDisk.ReadJSON(i); err != nil {
				return err
			}
		case "azureFile":
			s.AzureFile.Reset()
			if err := s.AzureFile.ReadJSON(i); err != nil {
				return err
			}
		case "capacity":
			s.Capacity = nil
			var elem IoK8sAPICoreV1PersistentVolumeSpecCapacity
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Capacity = &elem
		case "cephfs":
			s.Cephfs.Reset()
			if err := s.Cephfs.ReadJSON(i); err != nil {
				return err
			}
		case "cinder":
			s.Cinder.Reset()
			if err := s.Cinder.ReadJSON(i); err != nil {
				return err
			}
		case "claimRef":
			s.ClaimRef.Reset()
			if err := s.ClaimRef.ReadJSON(i); err != nil {
				return err
			}
		case "csi":
			s.Csi.Reset()
			if err := s.Csi.ReadJSON(i); err != nil {
				return err
			}
		case "fc":
			s.Fc.Reset()
			if err := s.Fc.ReadJSON(i); err != nil {
				return err
			}
		case "flexVolume":
			s.FlexVolume.Reset()
			if err := s.FlexVolume.ReadJSON(i); err != nil {
				return err
			}
		case "flocker":
			s.Flocker.Reset()
			if err := s.Flocker.ReadJSON(i); err != nil {
				return err
			}
		case "gcePersistentDisk":
			s.GcePersistentDisk.Reset()
			if err := s.GcePersistentDisk.ReadJSON(i); err != nil {
				return err
			}
		case "glusterfs":
			s.Glusterfs.Reset()
			if err := s.Glusterfs.ReadJSON(i); err != nil {
				return err
			}
		case "hostPath":
			s.HostPath.Reset()
			if err := s.HostPath.ReadJSON(i); err != nil {
				return err
			}
		case "iscsi":
			s.Iscsi.Reset()
			if err := s.Iscsi.ReadJSON(i); err != nil {
				return err
			}
		case "local":
			s.Local.Reset()
			if err := s.Local.ReadJSON(i); err != nil {
				return err
			}
		case "mountOptions":
			s.MountOptions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.MountOptions = append(s.MountOptions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "nfs":
			s.Nfs.Reset()
			if err := s.Nfs.ReadJSON(i); err != nil {
				return err
			}
		case "nodeAffinity":
			s.NodeAffinity.Reset()
			if err := s.NodeAffinity.ReadJSON(i); err != nil {
				return err
			}
		case "persistentVolumeReclaimPolicy":
			s.PersistentVolumeReclaimPolicy.Reset()
			if err := s.PersistentVolumeReclaimPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "photonPersistentDisk":
			s.PhotonPersistentDisk.Reset()
			if err := s.PhotonPersistentDisk.ReadJSON(i); err != nil {
				return err
			}
		case "portworxVolume":
			s.PortworxVolume.Reset()
			if err := s.PortworxVolume.ReadJSON(i); err != nil {
				return err
			}
		case "quobyte":
			s.Quobyte.Reset()
			if err := s.Quobyte.ReadJSON(i); err != nil {
				return err
			}
		case "rbd":
			s.Rbd.Reset()
			if err := s.Rbd.ReadJSON(i); err != nil {
				return err
			}
		case "scaleIO":
			s.ScaleIO.Reset()
			if err := s.ScaleIO.ReadJSON(i); err != nil {
				return err
			}
		case "storageClassName":
			s.StorageClassName.Reset()
			if err := s.StorageClassName.ReadJSON(i); err != nil {
				return err
			}
		case "storageos":
			s.Storageos.Reset()
			if err := s.Storageos.ReadJSON(i); err != nil {
				return err
			}
		case "volumeMode":
			s.VolumeMode.Reset()
			if err := s.VolumeMode.ReadJSON(i); err != nil {
				return err
			}
		case "vsphereVolume":
			s.VsphereVolume.Reset()
			if err := s.VsphereVolume.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeSpecCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeSpecCapacity from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeSpecCapacity) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeSpecCapacity to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeStatus from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PersistentVolumeStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("pdID")
	j.WriteString(s.PdID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PhotonPersistentDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PhotonPersistentDiskVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "pdID":
			v, err := i.Str()
			s.PdID = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Pod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Pod from json stream.
func (s *IoK8sAPICoreV1Pod) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Pod to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PreferredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("preferredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PreferredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("requiredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RequiredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodAffinity from json stream.
func (s *IoK8sAPICoreV1PodAffinity) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodAffinity to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			s.PreferredDuringSchedulingIgnoredDuringExecution = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1WeightedPodAffinityTerm
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.PreferredDuringSchedulingIgnoredDuringExecution = append(s.PreferredDuringSchedulingIgnoredDuringExecution, elem)
				return nil
			}); err != nil {
				return err
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			s.RequiredDuringSchedulingIgnoredDuringExecution = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PodAffinityTerm
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.RequiredDuringSchedulingIgnoredDuringExecution = append(s.RequiredDuringSchedulingIgnoredDuringExecution, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAffinityTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LabelSelector.Set {
		more.More()
		j.WriteObjectField("labelSelector")
		s.LabelSelector.WriteJSON(j)
	}
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.Namespaces != nil {
		more.More()
		j.WriteObjectField("namespaces")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Namespaces {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("topologyKey")
	j.WriteString(s.TopologyKey)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodAffinityTerm from json stream.
func (s *IoK8sAPICoreV1PodAffinityTerm) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodAffinityTerm to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "labelSelector":
			s.LabelSelector.Reset()
			if err := s.LabelSelector.ReadJSON(i); err != nil {
				return err
			}
		case "namespaceSelector":
			s.NamespaceSelector.Reset()
			if err := s.NamespaceSelector.ReadJSON(i); err != nil {
				return err
			}
		case "namespaces":
			s.Namespaces = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Namespaces = append(s.Namespaces, elem)
				return nil
			}); err != nil {
				return err
			}
		case "topologyKey":
			v, err := i.Str()
			s.TopologyKey = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAntiAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PreferredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("preferredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PreferredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("requiredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RequiredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodAntiAffinity from json stream.
func (s *IoK8sAPICoreV1PodAntiAffinity) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodAntiAffinity to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			s.PreferredDuringSchedulingIgnoredDuringExecution = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1WeightedPodAffinityTerm
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.PreferredDuringSchedulingIgnoredDuringExecution = append(s.PreferredDuringSchedulingIgnoredDuringExecution, elem)
				return nil
			}); err != nil {
				return err
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			s.RequiredDuringSchedulingIgnoredDuringExecution = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PodAffinityTerm
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.RequiredDuringSchedulingIgnoredDuringExecution = append(s.RequiredDuringSchedulingIgnoredDuringExecution, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastProbeTime.Set {
		more.More()
		j.WriteObjectField("lastProbeTime")
		s.LastProbeTime.WriteJSON(j)
	}
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodCondition from json stream.
func (s *IoK8sAPICoreV1PodCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastProbeTime":
			s.LastProbeTime.Reset()
			if err := s.LastProbeTime.ReadJSON(i); err != nil {
				return err
			}
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodDNSConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Nameservers != nil {
		more.More()
		j.WriteObjectField("nameservers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Nameservers {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Options != nil {
		more.More()
		j.WriteObjectField("options")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Options {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Searches != nil {
		more.More()
		j.WriteObjectField("searches")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Searches {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodDNSConfig from json stream.
func (s *IoK8sAPICoreV1PodDNSConfig) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodDNSConfig to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nameservers":
			s.Nameservers = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Nameservers = append(s.Nameservers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "options":
			s.Options = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PodDNSConfigOption
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Options = append(s.Options, elem)
				return nil
			}); err != nil {
				return err
			}
		case "searches":
			s.Searches = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Searches = append(s.Searches, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodDNSConfigOption) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodDNSConfigOption from json stream.
func (s *IoK8sAPICoreV1PodDNSConfigOption) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodDNSConfigOption to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodIP) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.IP.Set {
		more.More()
		j.WriteObjectField("ip")
		s.IP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodIP from json stream.
func (s *IoK8sAPICoreV1PodIP) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodIP to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "ip":
			s.IP.Reset()
			if err := s.IP.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodList from json stream.
func (s *IoK8sAPICoreV1PodList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Pod
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodReadinessGate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("conditionType")
	j.WriteString(s.ConditionType)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodReadinessGate from json stream.
func (s *IoK8sAPICoreV1PodReadinessGate) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodReadinessGate to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditionType":
			v, err := i.Str()
			s.ConditionType = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSecurityContext) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsGroup.Set {
		more.More()
		j.WriteObjectField("fsGroup")
		s.FsGroup.WriteJSON(j)
	}
	if s.FsGroupChangePolicy.Set {
		more.More()
		j.WriteObjectField("fsGroupChangePolicy")
		s.FsGroupChangePolicy.WriteJSON(j)
	}
	if s.RunAsGroup.Set {
		more.More()
		j.WriteObjectField("runAsGroup")
		s.RunAsGroup.WriteJSON(j)
	}
	if s.RunAsNonRoot.Set {
		more.More()
		j.WriteObjectField("runAsNonRoot")
		s.RunAsNonRoot.WriteJSON(j)
	}
	if s.RunAsUser.Set {
		more.More()
		j.WriteObjectField("runAsUser")
		s.RunAsUser.WriteJSON(j)
	}
	if s.SeLinuxOptions.Set {
		more.More()
		j.WriteObjectField("seLinuxOptions")
		s.SeLinuxOptions.WriteJSON(j)
	}
	if s.SeccompProfile.Set {
		more.More()
		j.WriteObjectField("seccompProfile")
		s.SeccompProfile.WriteJSON(j)
	}
	if s.SupplementalGroups != nil {
		more.More()
		j.WriteObjectField("supplementalGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.SupplementalGroups {
			more.More()
			j.WriteInt64(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Sysctls != nil {
		more.More()
		j.WriteObjectField("sysctls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Sysctls {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.WindowsOptions.Set {
		more.More()
		j.WriteObjectField("windowsOptions")
		s.WindowsOptions.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodSecurityContext from json stream.
func (s *IoK8sAPICoreV1PodSecurityContext) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodSecurityContext to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsGroup":
			s.FsGroup.Reset()
			if err := s.FsGroup.ReadJSON(i); err != nil {
				return err
			}
		case "fsGroupChangePolicy":
			s.FsGroupChangePolicy.Reset()
			if err := s.FsGroupChangePolicy.ReadJSON(i); err != nil {
				return err
			}
		case "runAsGroup":
			s.RunAsGroup.Reset()
			if err := s.RunAsGroup.ReadJSON(i); err != nil {
				return err
			}
		case "runAsNonRoot":
			s.RunAsNonRoot.Reset()
			if err := s.RunAsNonRoot.ReadJSON(i); err != nil {
				return err
			}
		case "runAsUser":
			s.RunAsUser.Reset()
			if err := s.RunAsUser.ReadJSON(i); err != nil {
				return err
			}
		case "seLinuxOptions":
			s.SeLinuxOptions.Reset()
			if err := s.SeLinuxOptions.ReadJSON(i); err != nil {
				return err
			}
		case "seccompProfile":
			s.SeccompProfile.Reset()
			if err := s.SeccompProfile.ReadJSON(i); err != nil {
				return err
			}
		case "supplementalGroups":
			s.SupplementalGroups = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem int64
				v, err := i.Int64()
				elem = int64(v)
				if err != nil {
					return err
				}
				s.SupplementalGroups = append(s.SupplementalGroups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "sysctls":
			s.Sysctls = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Sysctl
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Sysctls = append(s.Sysctls, elem)
				return nil
			}); err != nil {
				return err
			}
		case "windowsOptions":
			s.WindowsOptions.Reset()
			if err := s.WindowsOptions.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ActiveDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("activeDeadlineSeconds")
		s.ActiveDeadlineSeconds.WriteJSON(j)
	}
	if s.Affinity.Set {
		more.More()
		j.WriteObjectField("affinity")
		s.Affinity.WriteJSON(j)
	}
	if s.AutomountServiceAccountToken.Set {
		more.More()
		j.WriteObjectField("automountServiceAccountToken")
		s.AutomountServiceAccountToken.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("containers")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Containers {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.DnsConfig.Set {
		more.More()
		j.WriteObjectField("dnsConfig")
		s.DnsConfig.WriteJSON(j)
	}
	if s.DnsPolicy.Set {
		more.More()
		j.WriteObjectField("dnsPolicy")
		s.DnsPolicy.WriteJSON(j)
	}
	if s.EnableServiceLinks.Set {
		more.More()
		j.WriteObjectField("enableServiceLinks")
		s.EnableServiceLinks.WriteJSON(j)
	}
	if s.EphemeralContainers != nil {
		more.More()
		j.WriteObjectField("ephemeralContainers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EphemeralContainers {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.HostAliases != nil {
		more.More()
		j.WriteObjectField("hostAliases")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.HostAliases {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.HostIPC.Set {
		more.More()
		j.WriteObjectField("hostIPC")
		s.HostIPC.WriteJSON(j)
	}
	if s.HostNetwork.Set {
		more.More()
		j.WriteObjectField("hostNetwork")
		s.HostNetwork.WriteJSON(j)
	}
	if s.HostPID.Set {
		more.More()
		j.WriteObjectField("hostPID")
		s.HostPID.WriteJSON(j)
	}
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.ImagePullSecrets != nil {
		more.More()
		j.WriteObjectField("imagePullSecrets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ImagePullSecrets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.InitContainers != nil {
		more.More()
		j.WriteObjectField("initContainers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.InitContainers {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	if s.NodeSelector != nil {
		more.More()
		j.WriteObjectField("nodeSelector")
		s.NodeSelector.WriteJSON(j)
	}
	if s.Overhead != nil {
		more.More()
		j.WriteObjectField("overhead")
		s.Overhead.WriteJSON(j)
	}
	if s.PreemptionPolicy.Set {
		more.More()
		j.WriteObjectField("preemptionPolicy")
		s.PreemptionPolicy.WriteJSON(j)
	}
	if s.Priority.Set {
		more.More()
		j.WriteObjectField("priority")
		s.Priority.WriteJSON(j)
	}
	if s.PriorityClassName.Set {
		more.More()
		j.WriteObjectField("priorityClassName")
		s.PriorityClassName.WriteJSON(j)
	}
	if s.ReadinessGates != nil {
		more.More()
		j.WriteObjectField("readinessGates")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ReadinessGates {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RestartPolicy.Set {
		more.More()
		j.WriteObjectField("restartPolicy")
		s.RestartPolicy.WriteJSON(j)
	}
	if s.RuntimeClassName.Set {
		more.More()
		j.WriteObjectField("runtimeClassName")
		s.RuntimeClassName.WriteJSON(j)
	}
	if s.SchedulerName.Set {
		more.More()
		j.WriteObjectField("schedulerName")
		s.SchedulerName.WriteJSON(j)
	}
	if s.SecurityContext.Set {
		more.More()
		j.WriteObjectField("securityContext")
		s.SecurityContext.WriteJSON(j)
	}
	if s.ServiceAccount.Set {
		more.More()
		j.WriteObjectField("serviceAccount")
		s.ServiceAccount.WriteJSON(j)
	}
	if s.ServiceAccountName.Set {
		more.More()
		j.WriteObjectField("serviceAccountName")
		s.ServiceAccountName.WriteJSON(j)
	}
	if s.SetHostnameAsFQDN.Set {
		more.More()
		j.WriteObjectField("setHostnameAsFQDN")
		s.SetHostnameAsFQDN.WriteJSON(j)
	}
	if s.ShareProcessNamespace.Set {
		more.More()
		j.WriteObjectField("shareProcessNamespace")
		s.ShareProcessNamespace.WriteJSON(j)
	}
	if s.Subdomain.Set {
		more.More()
		j.WriteObjectField("subdomain")
		s.Subdomain.WriteJSON(j)
	}
	if s.TerminationGracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("terminationGracePeriodSeconds")
		s.TerminationGracePeriodSeconds.WriteJSON(j)
	}
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.TopologySpreadConstraints != nil {
		more.More()
		j.WriteObjectField("topologySpreadConstraints")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TopologySpreadConstraints {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Volumes != nil {
		more.More()
		j.WriteObjectField("volumes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Volumes {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodSpec from json stream.
func (s *IoK8sAPICoreV1PodSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "activeDeadlineSeconds":
			s.ActiveDeadlineSeconds.Reset()
			if err := s.ActiveDeadlineSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "affinity":
			s.Affinity.Reset()
			if err := s.Affinity.ReadJSON(i); err != nil {
				return err
			}
		case "automountServiceAccountToken":
			s.AutomountServiceAccountToken.Reset()
			if err := s.AutomountServiceAccountToken.ReadJSON(i); err != nil {
				return err
			}
		case "containers":
			s.Containers = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Container
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Containers = append(s.Containers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "dnsConfig":
			s.DnsConfig.Reset()
			if err := s.DnsConfig.ReadJSON(i); err != nil {
				return err
			}
		case "dnsPolicy":
			s.DnsPolicy.Reset()
			if err := s.DnsPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "enableServiceLinks":
			s.EnableServiceLinks.Reset()
			if err := s.EnableServiceLinks.ReadJSON(i); err != nil {
				return err
			}
		case "ephemeralContainers":
			s.EphemeralContainers = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1EphemeralContainer
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.EphemeralContainers = append(s.EphemeralContainers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "hostAliases":
			s.HostAliases = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1HostAlias
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.HostAliases = append(s.HostAliases, elem)
				return nil
			}); err != nil {
				return err
			}
		case "hostIPC":
			s.HostIPC.Reset()
			if err := s.HostIPC.ReadJSON(i); err != nil {
				return err
			}
		case "hostNetwork":
			s.HostNetwork.Reset()
			if err := s.HostNetwork.ReadJSON(i); err != nil {
				return err
			}
		case "hostPID":
			s.HostPID.Reset()
			if err := s.HostPID.ReadJSON(i); err != nil {
				return err
			}
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				return err
			}
		case "imagePullSecrets":
			s.ImagePullSecrets = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1LocalObjectReference
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ImagePullSecrets = append(s.ImagePullSecrets, elem)
				return nil
			}); err != nil {
				return err
			}
		case "initContainers":
			s.InitContainers = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Container
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.InitContainers = append(s.InitContainers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				return err
			}
		case "nodeSelector":
			s.NodeSelector = nil
			var elem IoK8sAPICoreV1PodSpecNodeSelector
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.NodeSelector = &elem
		case "overhead":
			s.Overhead = nil
			var elem IoK8sAPICoreV1PodSpecOverhead
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Overhead = &elem
		case "preemptionPolicy":
			s.PreemptionPolicy.Reset()
			if err := s.PreemptionPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "priority":
			s.Priority.Reset()
			if err := s.Priority.ReadJSON(i); err != nil {
				return err
			}
		case "priorityClassName":
			s.PriorityClassName.Reset()
			if err := s.PriorityClassName.ReadJSON(i); err != nil {
				return err
			}
		case "readinessGates":
			s.ReadinessGates = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PodReadinessGate
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ReadinessGates = append(s.ReadinessGates, elem)
				return nil
			}); err != nil {
				return err
			}
		case "restartPolicy":
			s.RestartPolicy.Reset()
			if err := s.RestartPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "runtimeClassName":
			s.RuntimeClassName.Reset()
			if err := s.RuntimeClassName.ReadJSON(i); err != nil {
				return err
			}
		case "schedulerName":
			s.SchedulerName.Reset()
			if err := s.SchedulerName.ReadJSON(i); err != nil {
				return err
			}
		case "securityContext":
			s.SecurityContext.Reset()
			if err := s.SecurityContext.ReadJSON(i); err != nil {
				return err
			}
		case "serviceAccount":
			s.ServiceAccount.Reset()
			if err := s.ServiceAccount.ReadJSON(i); err != nil {
				return err
			}
		case "serviceAccountName":
			s.ServiceAccountName.Reset()
			if err := s.ServiceAccountName.ReadJSON(i); err != nil {
				return err
			}
		case "setHostnameAsFQDN":
			s.SetHostnameAsFQDN.Reset()
			if err := s.SetHostnameAsFQDN.ReadJSON(i); err != nil {
				return err
			}
		case "shareProcessNamespace":
			s.ShareProcessNamespace.Reset()
			if err := s.ShareProcessNamespace.ReadJSON(i); err != nil {
				return err
			}
		case "subdomain":
			s.Subdomain.Reset()
			if err := s.Subdomain.ReadJSON(i); err != nil {
				return err
			}
		case "terminationGracePeriodSeconds":
			s.TerminationGracePeriodSeconds.Reset()
			if err := s.TerminationGracePeriodSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "tolerations":
			s.Tolerations = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Toleration
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Tolerations = append(s.Tolerations, elem)
				return nil
			}); err != nil {
				return err
			}
		case "topologySpreadConstraints":
			s.TopologySpreadConstraints = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1TopologySpreadConstraint
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.TopologySpreadConstraints = append(s.TopologySpreadConstraints, elem)
				return nil
			}); err != nil {
				return err
			}
		case "volumes":
			s.Volumes = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Volume
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Volumes = append(s.Volumes, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSpecNodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodSpecNodeSelector from json stream.
func (s *IoK8sAPICoreV1PodSpecNodeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodSpecNodeSelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSpecOverhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodSpecOverhead from json stream.
func (s *IoK8sAPICoreV1PodSpecOverhead) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodSpecOverhead to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ContainerStatuses != nil {
		more.More()
		j.WriteObjectField("containerStatuses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ContainerStatuses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EphemeralContainerStatuses != nil {
		more.More()
		j.WriteObjectField("ephemeralContainerStatuses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EphemeralContainerStatuses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.HostIP.Set {
		more.More()
		j.WriteObjectField("hostIP")
		s.HostIP.WriteJSON(j)
	}
	if s.InitContainerStatuses != nil {
		more.More()
		j.WriteObjectField("initContainerStatuses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.InitContainerStatuses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.NominatedNodeName.Set {
		more.More()
		j.WriteObjectField("nominatedNodeName")
		s.NominatedNodeName.WriteJSON(j)
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	if s.PodIP.Set {
		more.More()
		j.WriteObjectField("podIP")
		s.PodIP.WriteJSON(j)
	}
	if s.PodIPs != nil {
		more.More()
		j.WriteObjectField("podIPs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PodIPs {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.QosClass.Set {
		more.More()
		j.WriteObjectField("qosClass")
		s.QosClass.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.StartTime.Set {
		more.More()
		j.WriteObjectField("startTime")
		s.StartTime.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodStatus from json stream.
func (s *IoK8sAPICoreV1PodStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PodCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "containerStatuses":
			s.ContainerStatuses = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ContainerStatus
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ContainerStatuses = append(s.ContainerStatuses, elem)
				return nil
			}); err != nil {
				return err
			}
		case "ephemeralContainerStatuses":
			s.EphemeralContainerStatuses = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ContainerStatus
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.EphemeralContainerStatuses = append(s.EphemeralContainerStatuses, elem)
				return nil
			}); err != nil {
				return err
			}
		case "hostIP":
			s.HostIP.Reset()
			if err := s.HostIP.ReadJSON(i); err != nil {
				return err
			}
		case "initContainerStatuses":
			s.InitContainerStatuses = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ContainerStatus
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.InitContainerStatuses = append(s.InitContainerStatuses, elem)
				return nil
			}); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "nominatedNodeName":
			s.NominatedNodeName.Reset()
			if err := s.NominatedNodeName.ReadJSON(i); err != nil {
				return err
			}
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				return err
			}
		case "podIP":
			s.PodIP.Reset()
			if err := s.PodIP.ReadJSON(i); err != nil {
				return err
			}
		case "podIPs":
			s.PodIPs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PodIP
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.PodIPs = append(s.PodIPs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "qosClass":
			s.QosClass.Reset()
			if err := s.QosClass.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "startTime":
			s.StartTime.Reset()
			if err := s.StartTime.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Template.Set {
		more.More()
		j.WriteObjectField("template")
		s.Template.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodTemplate from json stream.
func (s *IoK8sAPICoreV1PodTemplate) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodTemplate to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "template":
			s.Template.Reset()
			if err := s.Template.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplateList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodTemplateList from json stream.
func (s *IoK8sAPICoreV1PodTemplateList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodTemplateList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1PodTemplate
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PodTemplateSpec from json stream.
func (s *IoK8sAPICoreV1PodTemplateSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PodTemplateSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PortStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("port")
	j.WriteInt32(s.Port)
	more.More()
	j.WriteObjectField("protocol")
	j.WriteString(s.Protocol)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PortStatus from json stream.
func (s *IoK8sAPICoreV1PortStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PortStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				return err
			}
		case "port":
			v, err := i.Int32()
			s.Port = int32(v)
			if err != nil {
				return err
			}
		case "protocol":
			v, err := i.Str()
			s.Protocol = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PortworxVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PortworxVolumeSource from json stream.
func (s *IoK8sAPICoreV1PortworxVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PortworxVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "volumeID":
			v, err := i.Str()
			s.VolumeID = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PreferredSchedulingTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("preference")
	s.Preference.WriteJSON(j)
	more.More()
	j.WriteObjectField("weight")
	j.WriteInt32(s.Weight)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1PreferredSchedulingTerm from json stream.
func (s *IoK8sAPICoreV1PreferredSchedulingTerm) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1PreferredSchedulingTerm to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "preference":
			if err := s.Preference.ReadJSON(i); err != nil {
				return err
			}
		case "weight":
			v, err := i.Int32()
			s.Weight = int32(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Probe) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Exec.Set {
		more.More()
		j.WriteObjectField("exec")
		s.Exec.WriteJSON(j)
	}
	if s.FailureThreshold.Set {
		more.More()
		j.WriteObjectField("failureThreshold")
		s.FailureThreshold.WriteJSON(j)
	}
	if s.HttpGet.Set {
		more.More()
		j.WriteObjectField("httpGet")
		s.HttpGet.WriteJSON(j)
	}
	if s.InitialDelaySeconds.Set {
		more.More()
		j.WriteObjectField("initialDelaySeconds")
		s.InitialDelaySeconds.WriteJSON(j)
	}
	if s.PeriodSeconds.Set {
		more.More()
		j.WriteObjectField("periodSeconds")
		s.PeriodSeconds.WriteJSON(j)
	}
	if s.SuccessThreshold.Set {
		more.More()
		j.WriteObjectField("successThreshold")
		s.SuccessThreshold.WriteJSON(j)
	}
	if s.TcpSocket.Set {
		more.More()
		j.WriteObjectField("tcpSocket")
		s.TcpSocket.WriteJSON(j)
	}
	if s.TerminationGracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("terminationGracePeriodSeconds")
		s.TerminationGracePeriodSeconds.WriteJSON(j)
	}
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Probe from json stream.
func (s *IoK8sAPICoreV1Probe) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Probe to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "exec":
			s.Exec.Reset()
			if err := s.Exec.ReadJSON(i); err != nil {
				return err
			}
		case "failureThreshold":
			s.FailureThreshold.Reset()
			if err := s.FailureThreshold.ReadJSON(i); err != nil {
				return err
			}
		case "httpGet":
			s.HttpGet.Reset()
			if err := s.HttpGet.ReadJSON(i); err != nil {
				return err
			}
		case "initialDelaySeconds":
			s.InitialDelaySeconds.Reset()
			if err := s.InitialDelaySeconds.ReadJSON(i); err != nil {
				return err
			}
		case "periodSeconds":
			s.PeriodSeconds.Reset()
			if err := s.PeriodSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "successThreshold":
			s.SuccessThreshold.Reset()
			if err := s.SuccessThreshold.ReadJSON(i); err != nil {
				return err
			}
		case "tcpSocket":
			s.TcpSocket.Reset()
			if err := s.TcpSocket.ReadJSON(i); err != nil {
				return err
			}
		case "terminationGracePeriodSeconds":
			s.TerminationGracePeriodSeconds.Reset()
			if err := s.TerminationGracePeriodSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ProjectedVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Sources != nil {
		more.More()
		j.WriteObjectField("sources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Sources {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ProjectedVolumeSource from json stream.
func (s *IoK8sAPICoreV1ProjectedVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ProjectedVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				return err
			}
		case "sources":
			s.Sources = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1VolumeProjection
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Sources = append(s.Sources, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1QuobyteVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("registry")
	j.WriteString(s.Registry)
	if s.Tenant.Set {
		more.More()
		j.WriteObjectField("tenant")
		s.Tenant.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volume")
	j.WriteString(s.Volume)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1QuobyteVolumeSource from json stream.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1QuobyteVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "registry":
			v, err := i.Str()
			s.Registry = string(v)
			if err != nil {
				return err
			}
		case "tenant":
			s.Tenant.Reset()
			if err := s.Tenant.ReadJSON(i); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				return err
			}
		case "volume":
			v, err := i.Str()
			s.Volume = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1RBDPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("image")
	j.WriteString(s.Image)
	if s.Keyring.Set {
		more.More()
		j.WriteObjectField("keyring")
		s.Keyring.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Pool.Set {
		more.More()
		j.WriteObjectField("pool")
		s.Pool.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1RBDPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1RBDPersistentVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "image":
			v, err := i.Str()
			s.Image = string(v)
			if err != nil {
				return err
			}
		case "keyring":
			s.Keyring.Reset()
			if err := s.Keyring.ReadJSON(i); err != nil {
				return err
			}
		case "monitors":
			s.Monitors = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Monitors = append(s.Monitors, elem)
				return nil
			}); err != nil {
				return err
			}
		case "pool":
			s.Pool.Reset()
			if err := s.Pool.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1RBDVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("image")
	j.WriteString(s.Image)
	if s.Keyring.Set {
		more.More()
		j.WriteObjectField("keyring")
		s.Keyring.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Pool.Set {
		more.More()
		j.WriteObjectField("pool")
		s.Pool.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1RBDVolumeSource from json stream.
func (s *IoK8sAPICoreV1RBDVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1RBDVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "image":
			v, err := i.Str()
			s.Image = string(v)
			if err != nil {
				return err
			}
		case "keyring":
			s.Keyring.Reset()
			if err := s.Keyring.ReadJSON(i); err != nil {
				return err
			}
		case "monitors":
			s.Monitors = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Monitors = append(s.Monitors, elem)
				return nil
			}); err != nil {
				return err
			}
		case "pool":
			s.Pool.Reset()
			if err := s.Pool.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationController) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationController from json stream.
func (s *IoK8sAPICoreV1ReplicationController) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationController to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerCondition from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationControllerCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerList from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationControllerList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ReplicationController
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.Selector != nil {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	if s.Template.Set {
		more.More()
		j.WriteObjectField("template")
		s.Template.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerSpec from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationControllerSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				return err
			}
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				return err
			}
		case "selector":
			s.Selector = nil
			var elem IoK8sAPICoreV1ReplicationControllerSpecSelector
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Selector = &elem
		case "template":
			s.Template.Reset()
			if err := s.Template.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerSpecSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerSpecSelector from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerSpecSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationControllerSpecSelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvailableReplicas.Set {
		more.More()
		j.WriteObjectField("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.FullyLabeledReplicas.Set {
		more.More()
		j.WriteObjectField("fullyLabeledReplicas")
		s.FullyLabeledReplicas.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("replicas")
	j.WriteInt32(s.Replicas)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerStatus from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ReplicationControllerStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "availableReplicas":
			s.AvailableReplicas.Reset()
			if err := s.AvailableReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ReplicationControllerCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "fullyLabeledReplicas":
			s.FullyLabeledReplicas.Reset()
			if err := s.FullyLabeledReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				return err
			}
		case "replicas":
			v, err := i.Int32()
			s.Replicas = int32(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceFieldSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerName.Set {
		more.More()
		j.WriteObjectField("containerName")
		s.ContainerName.WriteJSON(j)
	}
	if s.Divisor.Set {
		more.More()
		j.WriteObjectField("divisor")
		s.Divisor.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("resource")
	j.WriteString(s.Resource)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceFieldSelector from json stream.
func (s *IoK8sAPICoreV1ResourceFieldSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceFieldSelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "containerName":
			s.ContainerName.Reset()
			if err := s.ContainerName.ReadJSON(i); err != nil {
				return err
			}
		case "divisor":
			s.Divisor.Reset()
			if err := s.Divisor.ReadJSON(i); err != nil {
				return err
			}
		case "resource":
			v, err := i.Str()
			s.Resource = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuota) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuota from json stream.
func (s *IoK8sAPICoreV1ResourceQuota) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuota to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaList from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ResourceQuota
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hard != nil {
		more.More()
		j.WriteObjectField("hard")
		s.Hard.WriteJSON(j)
	}
	if s.ScopeSelector.Set {
		more.More()
		j.WriteObjectField("scopeSelector")
		s.ScopeSelector.WriteJSON(j)
	}
	if s.Scopes != nil {
		more.More()
		j.WriteObjectField("scopes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Scopes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaSpec from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "hard":
			s.Hard = nil
			var elem IoK8sAPICoreV1ResourceQuotaSpecHard
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Hard = &elem
		case "scopeSelector":
			s.ScopeSelector.Reset()
			if err := s.ScopeSelector.ReadJSON(i); err != nil {
				return err
			}
		case "scopes":
			s.Scopes = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Scopes = append(s.Scopes, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaSpecHard) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaSpecHard from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaSpecHard) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaSpecHard to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hard != nil {
		more.More()
		j.WriteObjectField("hard")
		s.Hard.WriteJSON(j)
	}
	if s.Used != nil {
		more.More()
		j.WriteObjectField("used")
		s.Used.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaStatus from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "hard":
			s.Hard = nil
			var elem IoK8sAPICoreV1ResourceQuotaStatusHard
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Hard = &elem
		case "used":
			s.Used = nil
			var elem IoK8sAPICoreV1ResourceQuotaStatusUsed
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Used = &elem
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaStatusHard) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaStatusHard from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaStatusHard) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaStatusHard to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaStatusUsed) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaStatusUsed from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaStatusUsed) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceQuotaStatusUsed to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceRequirements) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limits != nil {
		more.More()
		j.WriteObjectField("limits")
		s.Limits.WriteJSON(j)
	}
	if s.Requests != nil {
		more.More()
		j.WriteObjectField("requests")
		s.Requests.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceRequirements from json stream.
func (s *IoK8sAPICoreV1ResourceRequirements) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceRequirements to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "limits":
			s.Limits = nil
			var elem IoK8sAPICoreV1ResourceRequirementsLimits
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Limits = &elem
		case "requests":
			s.Requests = nil
			var elem IoK8sAPICoreV1ResourceRequirementsRequests
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Requests = &elem
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceRequirementsLimits) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceRequirementsLimits from json stream.
func (s *IoK8sAPICoreV1ResourceRequirementsLimits) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceRequirementsLimits to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceRequirementsRequests) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ResourceRequirementsRequests from json stream.
func (s *IoK8sAPICoreV1ResourceRequirementsRequests) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ResourceRequirementsRequests to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SELinuxOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Level.Set {
		more.More()
		j.WriteObjectField("level")
		s.Level.WriteJSON(j)
	}
	if s.Role.Set {
		more.More()
		j.WriteObjectField("role")
		s.Role.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SELinuxOptions from json stream.
func (s *IoK8sAPICoreV1SELinuxOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SELinuxOptions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "level":
			s.Level.Reset()
			if err := s.Level.ReadJSON(i); err != nil {
				return err
			}
		case "role":
			s.Role.Reset()
			if err := s.Role.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScaleIOPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("gateway")
	j.WriteString(s.Gateway)
	if s.ProtectionDomain.Set {
		more.More()
		j.WriteObjectField("protectionDomain")
		s.ProtectionDomain.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretRef")
	s.SecretRef.WriteJSON(j)
	if s.SslEnabled.Set {
		more.More()
		j.WriteObjectField("sslEnabled")
		s.SslEnabled.WriteJSON(j)
	}
	if s.StorageMode.Set {
		more.More()
		j.WriteObjectField("storageMode")
		s.StorageMode.WriteJSON(j)
	}
	if s.StoragePool.Set {
		more.More()
		j.WriteObjectField("storagePool")
		s.StoragePool.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("system")
	j.WriteString(s.System)
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ScaleIOPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ScaleIOPersistentVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "gateway":
			v, err := i.Str()
			s.Gateway = string(v)
			if err != nil {
				return err
			}
		case "protectionDomain":
			s.ProtectionDomain.Reset()
			if err := s.ProtectionDomain.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "sslEnabled":
			s.SslEnabled.Reset()
			if err := s.SslEnabled.ReadJSON(i); err != nil {
				return err
			}
		case "storageMode":
			s.StorageMode.Reset()
			if err := s.StorageMode.ReadJSON(i); err != nil {
				return err
			}
		case "storagePool":
			s.StoragePool.Reset()
			if err := s.StoragePool.ReadJSON(i); err != nil {
				return err
			}
		case "system":
			v, err := i.Str()
			s.System = string(v)
			if err != nil {
				return err
			}
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScaleIOVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("gateway")
	j.WriteString(s.Gateway)
	if s.ProtectionDomain.Set {
		more.More()
		j.WriteObjectField("protectionDomain")
		s.ProtectionDomain.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretRef")
	s.SecretRef.WriteJSON(j)
	if s.SslEnabled.Set {
		more.More()
		j.WriteObjectField("sslEnabled")
		s.SslEnabled.WriteJSON(j)
	}
	if s.StorageMode.Set {
		more.More()
		j.WriteObjectField("storageMode")
		s.StorageMode.WriteJSON(j)
	}
	if s.StoragePool.Set {
		more.More()
		j.WriteObjectField("storagePool")
		s.StoragePool.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("system")
	j.WriteString(s.System)
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ScaleIOVolumeSource from json stream.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ScaleIOVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "gateway":
			v, err := i.Str()
			s.Gateway = string(v)
			if err != nil {
				return err
			}
		case "protectionDomain":
			s.ProtectionDomain.Reset()
			if err := s.ProtectionDomain.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "sslEnabled":
			s.SslEnabled.Reset()
			if err := s.SslEnabled.ReadJSON(i); err != nil {
				return err
			}
		case "storageMode":
			s.StorageMode.Reset()
			if err := s.StorageMode.ReadJSON(i); err != nil {
				return err
			}
		case "storagePool":
			s.StoragePool.Reset()
			if err := s.StoragePool.ReadJSON(i); err != nil {
				return err
			}
		case "system":
			v, err := i.Str()
			s.System = string(v)
			if err != nil {
				return err
			}
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScopeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchExpressions != nil {
		more.More()
		j.WriteObjectField("matchExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ScopeSelector from json stream.
func (s *IoK8sAPICoreV1ScopeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ScopeSelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "matchExpressions":
			s.MatchExpressions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ScopedResourceSelectorRequirement
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.MatchExpressions = append(s.MatchExpressions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScopedResourceSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("operator")
	j.WriteString(s.Operator)
	more.More()
	j.WriteObjectField("scopeName")
	j.WriteString(s.ScopeName)
	if s.Values != nil {
		more.More()
		j.WriteObjectField("values")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Values {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ScopedResourceSelectorRequirement from json stream.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ScopedResourceSelectorRequirement to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "operator":
			v, err := i.Str()
			s.Operator = string(v)
			if err != nil {
				return err
			}
		case "scopeName":
			v, err := i.Str()
			s.ScopeName = string(v)
			if err != nil {
				return err
			}
		case "values":
			s.Values = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Values = append(s.Values, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SeccompProfile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LocalhostProfile.Set {
		more.More()
		j.WriteObjectField("localhostProfile")
		s.LocalhostProfile.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SeccompProfile from json stream.
func (s *IoK8sAPICoreV1SeccompProfile) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SeccompProfile to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "localhostProfile":
			s.LocalhostProfile.Reset()
			if err := s.LocalhostProfile.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Secret) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Data != nil {
		more.More()
		j.WriteObjectField("data")
		s.Data.WriteJSON(j)
	}
	if s.Immutable.Set {
		more.More()
		j.WriteObjectField("immutable")
		s.Immutable.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.StringData != nil {
		more.More()
		j.WriteObjectField("stringData")
		s.StringData.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Secret from json stream.
func (s *IoK8sAPICoreV1Secret) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Secret to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "data":
			s.Data = nil
			var elem IoK8sAPICoreV1SecretData
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Data = &elem
		case "immutable":
			s.Immutable.Reset()
			if err := s.Immutable.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "stringData":
			s.StringData = nil
			var elem IoK8sAPICoreV1SecretStringData
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.StringData = &elem
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretData from json stream.
func (s *IoK8sAPICoreV1SecretData) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretData to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretEnvSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretEnvSource from json stream.
func (s *IoK8sAPICoreV1SecretEnvSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretEnvSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretKeySelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretKeySelector from json stream.
func (s *IoK8sAPICoreV1SecretKeySelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretKeySelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "key":
			v, err := i.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretList from json stream.
func (s *IoK8sAPICoreV1SecretList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Secret
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretProjection from json stream.
func (s *IoK8sAPICoreV1SecretProjection) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretProjection to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1KeyToPath
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretReference from json stream.
func (s *IoK8sAPICoreV1SecretReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretStringData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretStringData from json stream.
func (s *IoK8sAPICoreV1SecretStringData) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretStringData to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	if s.SecretName.Set {
		more.More()
		j.WriteObjectField("secretName")
		s.SecretName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecretVolumeSource from json stream.
func (s *IoK8sAPICoreV1SecretVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecretVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1KeyToPath
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				return err
			}
		case "secretName":
			s.SecretName.Reset()
			if err := s.SecretName.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecurityContext) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowPrivilegeEscalation.Set {
		more.More()
		j.WriteObjectField("allowPrivilegeEscalation")
		s.AllowPrivilegeEscalation.WriteJSON(j)
	}
	if s.Capabilities.Set {
		more.More()
		j.WriteObjectField("capabilities")
		s.Capabilities.WriteJSON(j)
	}
	if s.Privileged.Set {
		more.More()
		j.WriteObjectField("privileged")
		s.Privileged.WriteJSON(j)
	}
	if s.ProcMount.Set {
		more.More()
		j.WriteObjectField("procMount")
		s.ProcMount.WriteJSON(j)
	}
	if s.ReadOnlyRootFilesystem.Set {
		more.More()
		j.WriteObjectField("readOnlyRootFilesystem")
		s.ReadOnlyRootFilesystem.WriteJSON(j)
	}
	if s.RunAsGroup.Set {
		more.More()
		j.WriteObjectField("runAsGroup")
		s.RunAsGroup.WriteJSON(j)
	}
	if s.RunAsNonRoot.Set {
		more.More()
		j.WriteObjectField("runAsNonRoot")
		s.RunAsNonRoot.WriteJSON(j)
	}
	if s.RunAsUser.Set {
		more.More()
		j.WriteObjectField("runAsUser")
		s.RunAsUser.WriteJSON(j)
	}
	if s.SeLinuxOptions.Set {
		more.More()
		j.WriteObjectField("seLinuxOptions")
		s.SeLinuxOptions.WriteJSON(j)
	}
	if s.SeccompProfile.Set {
		more.More()
		j.WriteObjectField("seccompProfile")
		s.SeccompProfile.WriteJSON(j)
	}
	if s.WindowsOptions.Set {
		more.More()
		j.WriteObjectField("windowsOptions")
		s.WindowsOptions.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SecurityContext from json stream.
func (s *IoK8sAPICoreV1SecurityContext) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SecurityContext to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "allowPrivilegeEscalation":
			s.AllowPrivilegeEscalation.Reset()
			if err := s.AllowPrivilegeEscalation.ReadJSON(i); err != nil {
				return err
			}
		case "capabilities":
			s.Capabilities.Reset()
			if err := s.Capabilities.ReadJSON(i); err != nil {
				return err
			}
		case "privileged":
			s.Privileged.Reset()
			if err := s.Privileged.ReadJSON(i); err != nil {
				return err
			}
		case "procMount":
			s.ProcMount.Reset()
			if err := s.ProcMount.ReadJSON(i); err != nil {
				return err
			}
		case "readOnlyRootFilesystem":
			s.ReadOnlyRootFilesystem.Reset()
			if err := s.ReadOnlyRootFilesystem.ReadJSON(i); err != nil {
				return err
			}
		case "runAsGroup":
			s.RunAsGroup.Reset()
			if err := s.RunAsGroup.ReadJSON(i); err != nil {
				return err
			}
		case "runAsNonRoot":
			s.RunAsNonRoot.Reset()
			if err := s.RunAsNonRoot.ReadJSON(i); err != nil {
				return err
			}
		case "runAsUser":
			s.RunAsUser.Reset()
			if err := s.RunAsUser.ReadJSON(i); err != nil {
				return err
			}
		case "seLinuxOptions":
			s.SeLinuxOptions.Reset()
			if err := s.SeLinuxOptions.ReadJSON(i); err != nil {
				return err
			}
		case "seccompProfile":
			s.SeccompProfile.Reset()
			if err := s.SeccompProfile.ReadJSON(i); err != nil {
				return err
			}
		case "windowsOptions":
			s.WindowsOptions.Reset()
			if err := s.WindowsOptions.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Service) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Service from json stream.
func (s *IoK8sAPICoreV1Service) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Service to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccount) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.AutomountServiceAccountToken.Set {
		more.More()
		j.WriteObjectField("automountServiceAccountToken")
		s.AutomountServiceAccountToken.WriteJSON(j)
	}
	if s.ImagePullSecrets != nil {
		more.More()
		j.WriteObjectField("imagePullSecrets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ImagePullSecrets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Secrets != nil {
		more.More()
		j.WriteObjectField("secrets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Secrets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccount from json stream.
func (s *IoK8sAPICoreV1ServiceAccount) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceAccount to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "automountServiceAccountToken":
			s.AutomountServiceAccountToken.Reset()
			if err := s.AutomountServiceAccountToken.ReadJSON(i); err != nil {
				return err
			}
		case "imagePullSecrets":
			s.ImagePullSecrets = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1LocalObjectReference
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ImagePullSecrets = append(s.ImagePullSecrets, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "secrets":
			s.Secrets = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ObjectReference
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Secrets = append(s.Secrets, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccountList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccountList from json stream.
func (s *IoK8sAPICoreV1ServiceAccountList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceAccountList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ServiceAccount
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccountTokenProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Audience.Set {
		more.More()
		j.WriteObjectField("audience")
		s.Audience.WriteJSON(j)
	}
	if s.ExpirationSeconds.Set {
		more.More()
		j.WriteObjectField("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccountTokenProjection from json stream.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceAccountTokenProjection to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "audience":
			s.Audience.Reset()
			if err := s.Audience.ReadJSON(i); err != nil {
				return err
			}
		case "expirationSeconds":
			s.ExpirationSeconds.Reset()
			if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "path":
			v, err := i.Str()
			s.Path = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceList from json stream.
func (s *IoK8sAPICoreV1ServiceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Service
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServicePort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.NodePort.Set {
		more.More()
		j.WriteObjectField("nodePort")
		s.NodePort.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("port")
	j.WriteInt32(s.Port)
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	if s.TargetPort.Set {
		more.More()
		j.WriteObjectField("targetPort")
		s.TargetPort.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServicePort from json stream.
func (s *IoK8sAPICoreV1ServicePort) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServicePort to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "nodePort":
			s.NodePort.Reset()
			if err := s.NodePort.ReadJSON(i); err != nil {
				return err
			}
		case "port":
			v, err := i.Int32()
			s.Port = int32(v)
			if err != nil {
				return err
			}
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				return err
			}
		case "targetPort":
			s.TargetPort.Reset()
			if err := s.TargetPort.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllocateLoadBalancerNodePorts.Set {
		more.More()
		j.WriteObjectField("allocateLoadBalancerNodePorts")
		s.AllocateLoadBalancerNodePorts.WriteJSON(j)
	}
	if s.ClusterIP.Set {
		more.More()
		j.WriteObjectField("clusterIP")
		s.ClusterIP.WriteJSON(j)
	}
	if s.ClusterIPs != nil {
		more.More()
		j.WriteObjectField("clusterIPs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ClusterIPs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ExternalIPs != nil {
		more.More()
		j.WriteObjectField("externalIPs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ExternalIPs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ExternalName.Set {
		more.More()
		j.WriteObjectField("externalName")
		s.ExternalName.WriteJSON(j)
	}
	if s.ExternalTrafficPolicy.Set {
		more.More()
		j.WriteObjectField("externalTrafficPolicy")
		s.ExternalTrafficPolicy.WriteJSON(j)
	}
	if s.HealthCheckNodePort.Set {
		more.More()
		j.WriteObjectField("healthCheckNodePort")
		s.HealthCheckNodePort.WriteJSON(j)
	}
	if s.InternalTrafficPolicy.Set {
		more.More()
		j.WriteObjectField("internalTrafficPolicy")
		s.InternalTrafficPolicy.WriteJSON(j)
	}
	if s.IpFamilies != nil {
		more.More()
		j.WriteObjectField("ipFamilies")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.IpFamilies {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.IpFamilyPolicy.Set {
		more.More()
		j.WriteObjectField("ipFamilyPolicy")
		s.IpFamilyPolicy.WriteJSON(j)
	}
	if s.LoadBalancerClass.Set {
		more.More()
		j.WriteObjectField("loadBalancerClass")
		s.LoadBalancerClass.WriteJSON(j)
	}
	if s.LoadBalancerIP.Set {
		more.More()
		j.WriteObjectField("loadBalancerIP")
		s.LoadBalancerIP.WriteJSON(j)
	}
	if s.LoadBalancerSourceRanges != nil {
		more.More()
		j.WriteObjectField("loadBalancerSourceRanges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.LoadBalancerSourceRanges {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.PublishNotReadyAddresses.Set {
		more.More()
		j.WriteObjectField("publishNotReadyAddresses")
		s.PublishNotReadyAddresses.WriteJSON(j)
	}
	if s.Selector != nil {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	if s.SessionAffinity.Set {
		more.More()
		j.WriteObjectField("sessionAffinity")
		s.SessionAffinity.WriteJSON(j)
	}
	if s.SessionAffinityConfig.Set {
		more.More()
		j.WriteObjectField("sessionAffinityConfig")
		s.SessionAffinityConfig.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceSpec from json stream.
func (s *IoK8sAPICoreV1ServiceSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "allocateLoadBalancerNodePorts":
			s.AllocateLoadBalancerNodePorts.Reset()
			if err := s.AllocateLoadBalancerNodePorts.ReadJSON(i); err != nil {
				return err
			}
		case "clusterIP":
			s.ClusterIP.Reset()
			if err := s.ClusterIP.ReadJSON(i); err != nil {
				return err
			}
		case "clusterIPs":
			s.ClusterIPs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ClusterIPs = append(s.ClusterIPs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "externalIPs":
			s.ExternalIPs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ExternalIPs = append(s.ExternalIPs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "externalName":
			s.ExternalName.Reset()
			if err := s.ExternalName.ReadJSON(i); err != nil {
				return err
			}
		case "externalTrafficPolicy":
			s.ExternalTrafficPolicy.Reset()
			if err := s.ExternalTrafficPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "healthCheckNodePort":
			s.HealthCheckNodePort.Reset()
			if err := s.HealthCheckNodePort.ReadJSON(i); err != nil {
				return err
			}
		case "internalTrafficPolicy":
			s.InternalTrafficPolicy.Reset()
			if err := s.InternalTrafficPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "ipFamilies":
			s.IpFamilies = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.IpFamilies = append(s.IpFamilies, elem)
				return nil
			}); err != nil {
				return err
			}
		case "ipFamilyPolicy":
			s.IpFamilyPolicy.Reset()
			if err := s.IpFamilyPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "loadBalancerClass":
			s.LoadBalancerClass.Reset()
			if err := s.LoadBalancerClass.ReadJSON(i); err != nil {
				return err
			}
		case "loadBalancerIP":
			s.LoadBalancerIP.Reset()
			if err := s.LoadBalancerIP.ReadJSON(i); err != nil {
				return err
			}
		case "loadBalancerSourceRanges":
			s.LoadBalancerSourceRanges = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.LoadBalancerSourceRanges = append(s.LoadBalancerSourceRanges, elem)
				return nil
			}); err != nil {
				return err
			}
		case "ports":
			s.Ports = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1ServicePort
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ports = append(s.Ports, elem)
				return nil
			}); err != nil {
				return err
			}
		case "publishNotReadyAddresses":
			s.PublishNotReadyAddresses.Reset()
			if err := s.PublishNotReadyAddresses.ReadJSON(i); err != nil {
				return err
			}
		case "selector":
			s.Selector = nil
			var elem IoK8sAPICoreV1ServiceSpecSelector
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Selector = &elem
		case "sessionAffinity":
			s.SessionAffinity.Reset()
			if err := s.SessionAffinity.ReadJSON(i); err != nil {
				return err
			}
		case "sessionAffinityConfig":
			s.SessionAffinityConfig.Reset()
			if err := s.SessionAffinityConfig.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceSpecSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceSpecSelector from json stream.
func (s *IoK8sAPICoreV1ServiceSpecSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceSpecSelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.LoadBalancer.Set {
		more.More()
		j.WriteObjectField("loadBalancer")
		s.LoadBalancer.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1ServiceStatus from json stream.
func (s *IoK8sAPICoreV1ServiceStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1ServiceStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1Condition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "loadBalancer":
			s.LoadBalancer.Reset()
			if err := s.LoadBalancer.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SessionAffinityConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ClientIP.Set {
		more.More()
		j.WriteObjectField("clientIP")
		s.ClientIP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1SessionAffinityConfig from json stream.
func (s *IoK8sAPICoreV1SessionAffinityConfig) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1SessionAffinityConfig to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "clientIP":
			s.ClientIP.Reset()
			if err := s.ClientIP.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1StorageOSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	if s.VolumeNamespace.Set {
		more.More()
		j.WriteObjectField("volumeNamespace")
		s.VolumeNamespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1StorageOSPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1StorageOSPersistentVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				return err
			}
		case "volumeNamespace":
			s.VolumeNamespace.Reset()
			if err := s.VolumeNamespace.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1StorageOSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	if s.VolumeNamespace.Set {
		more.More()
		j.WriteObjectField("volumeNamespace")
		s.VolumeNamespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1StorageOSVolumeSource from json stream.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1StorageOSVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				return err
			}
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				return err
			}
		case "volumeNamespace":
			s.VolumeNamespace.Reset()
			if err := s.VolumeNamespace.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Sysctl) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Sysctl from json stream.
func (s *IoK8sAPICoreV1Sysctl) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Sysctl to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "value":
			v, err := i.Str()
			s.Value = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TCPSocketAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	// Unsupported kind "alias".
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1TCPSocketAction from json stream.
func (s *IoK8sAPICoreV1TCPSocketAction) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1TCPSocketAction to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				return err
			}
		case "port":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgUtilIntstrIntOrString" (alias) is not implemented`); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Taint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("effect")
	j.WriteString(s.Effect)
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	if s.TimeAdded.Set {
		more.More()
		j.WriteObjectField("timeAdded")
		s.TimeAdded.WriteJSON(j)
	}
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Taint from json stream.
func (s *IoK8sAPICoreV1Taint) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Taint to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "effect":
			v, err := i.Str()
			s.Effect = string(v)
			if err != nil {
				return err
			}
		case "key":
			v, err := i.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "timeAdded":
			s.TimeAdded.Reset()
			if err := s.TimeAdded.ReadJSON(i); err != nil {
				return err
			}
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Toleration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Effect.Set {
		more.More()
		j.WriteObjectField("effect")
		s.Effect.WriteJSON(j)
	}
	if s.Key.Set {
		more.More()
		j.WriteObjectField("key")
		s.Key.WriteJSON(j)
	}
	if s.Operator.Set {
		more.More()
		j.WriteObjectField("operator")
		s.Operator.WriteJSON(j)
	}
	if s.TolerationSeconds.Set {
		more.More()
		j.WriteObjectField("tolerationSeconds")
		s.TolerationSeconds.WriteJSON(j)
	}
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Toleration from json stream.
func (s *IoK8sAPICoreV1Toleration) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Toleration to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "effect":
			s.Effect.Reset()
			if err := s.Effect.ReadJSON(i); err != nil {
				return err
			}
		case "key":
			s.Key.Reset()
			if err := s.Key.ReadJSON(i); err != nil {
				return err
			}
		case "operator":
			s.Operator.Reset()
			if err := s.Operator.ReadJSON(i); err != nil {
				return err
			}
		case "tolerationSeconds":
			s.TolerationSeconds.Reset()
			if err := s.TolerationSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySelectorLabelRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	more.More()
	j.WriteObjectField("values")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Values {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1TopologySelectorLabelRequirement from json stream.
func (s *IoK8sAPICoreV1TopologySelectorLabelRequirement) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1TopologySelectorLabelRequirement to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "key":
			v, err := i.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "values":
			s.Values = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Values = append(s.Values, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySelectorTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchLabelExpressions != nil {
		more.More()
		j.WriteObjectField("matchLabelExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchLabelExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1TopologySelectorTerm from json stream.
func (s *IoK8sAPICoreV1TopologySelectorTerm) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1TopologySelectorTerm to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "matchLabelExpressions":
			s.MatchLabelExpressions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1TopologySelectorLabelRequirement
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.MatchLabelExpressions = append(s.MatchLabelExpressions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySpreadConstraint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LabelSelector.Set {
		more.More()
		j.WriteObjectField("labelSelector")
		s.LabelSelector.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("maxSkew")
	j.WriteInt32(s.MaxSkew)
	more.More()
	j.WriteObjectField("topologyKey")
	j.WriteString(s.TopologyKey)
	more.More()
	j.WriteObjectField("whenUnsatisfiable")
	j.WriteString(s.WhenUnsatisfiable)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1TopologySpreadConstraint from json stream.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1TopologySpreadConstraint to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "labelSelector":
			s.LabelSelector.Reset()
			if err := s.LabelSelector.ReadJSON(i); err != nil {
				return err
			}
		case "maxSkew":
			v, err := i.Int32()
			s.MaxSkew = int32(v)
			if err != nil {
				return err
			}
		case "topologyKey":
			v, err := i.Str()
			s.TopologyKey = string(v)
			if err != nil {
				return err
			}
		case "whenUnsatisfiable":
			v, err := i.Str()
			s.WhenUnsatisfiable = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TypedLocalObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroup.Set {
		more.More()
		j.WriteObjectField("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1TypedLocalObjectReference from json stream.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1TypedLocalObjectReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiGroup":
			s.ApiGroup.Reset()
			if err := s.ApiGroup.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Volume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AwsElasticBlockStore.Set {
		more.More()
		j.WriteObjectField("awsElasticBlockStore")
		s.AwsElasticBlockStore.WriteJSON(j)
	}
	if s.AzureDisk.Set {
		more.More()
		j.WriteObjectField("azureDisk")
		s.AzureDisk.WriteJSON(j)
	}
	if s.AzureFile.Set {
		more.More()
		j.WriteObjectField("azureFile")
		s.AzureFile.WriteJSON(j)
	}
	if s.Cephfs.Set {
		more.More()
		j.WriteObjectField("cephfs")
		s.Cephfs.WriteJSON(j)
	}
	if s.Cinder.Set {
		more.More()
		j.WriteObjectField("cinder")
		s.Cinder.WriteJSON(j)
	}
	if s.ConfigMap.Set {
		more.More()
		j.WriteObjectField("configMap")
		s.ConfigMap.WriteJSON(j)
	}
	if s.Csi.Set {
		more.More()
		j.WriteObjectField("csi")
		s.Csi.WriteJSON(j)
	}
	if s.DownwardAPI.Set {
		more.More()
		j.WriteObjectField("downwardAPI")
		s.DownwardAPI.WriteJSON(j)
	}
	if s.EmptyDir.Set {
		more.More()
		j.WriteObjectField("emptyDir")
		s.EmptyDir.WriteJSON(j)
	}
	if s.Ephemeral.Set {
		more.More()
		j.WriteObjectField("ephemeral")
		s.Ephemeral.WriteJSON(j)
	}
	if s.Fc.Set {
		more.More()
		j.WriteObjectField("fc")
		s.Fc.WriteJSON(j)
	}
	if s.FlexVolume.Set {
		more.More()
		j.WriteObjectField("flexVolume")
		s.FlexVolume.WriteJSON(j)
	}
	if s.Flocker.Set {
		more.More()
		j.WriteObjectField("flocker")
		s.Flocker.WriteJSON(j)
	}
	if s.GcePersistentDisk.Set {
		more.More()
		j.WriteObjectField("gcePersistentDisk")
		s.GcePersistentDisk.WriteJSON(j)
	}
	if s.GitRepo.Set {
		more.More()
		j.WriteObjectField("gitRepo")
		s.GitRepo.WriteJSON(j)
	}
	if s.Glusterfs.Set {
		more.More()
		j.WriteObjectField("glusterfs")
		s.Glusterfs.WriteJSON(j)
	}
	if s.HostPath.Set {
		more.More()
		j.WriteObjectField("hostPath")
		s.HostPath.WriteJSON(j)
	}
	if s.Iscsi.Set {
		more.More()
		j.WriteObjectField("iscsi")
		s.Iscsi.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Nfs.Set {
		more.More()
		j.WriteObjectField("nfs")
		s.Nfs.WriteJSON(j)
	}
	if s.PersistentVolumeClaim.Set {
		more.More()
		j.WriteObjectField("persistentVolumeClaim")
		s.PersistentVolumeClaim.WriteJSON(j)
	}
	if s.PhotonPersistentDisk.Set {
		more.More()
		j.WriteObjectField("photonPersistentDisk")
		s.PhotonPersistentDisk.WriteJSON(j)
	}
	if s.PortworxVolume.Set {
		more.More()
		j.WriteObjectField("portworxVolume")
		s.PortworxVolume.WriteJSON(j)
	}
	if s.Projected.Set {
		more.More()
		j.WriteObjectField("projected")
		s.Projected.WriteJSON(j)
	}
	if s.Quobyte.Set {
		more.More()
		j.WriteObjectField("quobyte")
		s.Quobyte.WriteJSON(j)
	}
	if s.Rbd.Set {
		more.More()
		j.WriteObjectField("rbd")
		s.Rbd.WriteJSON(j)
	}
	if s.ScaleIO.Set {
		more.More()
		j.WriteObjectField("scaleIO")
		s.ScaleIO.WriteJSON(j)
	}
	if s.Secret.Set {
		more.More()
		j.WriteObjectField("secret")
		s.Secret.WriteJSON(j)
	}
	if s.Storageos.Set {
		more.More()
		j.WriteObjectField("storageos")
		s.Storageos.WriteJSON(j)
	}
	if s.VsphereVolume.Set {
		more.More()
		j.WriteObjectField("vsphereVolume")
		s.VsphereVolume.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1Volume from json stream.
func (s *IoK8sAPICoreV1Volume) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1Volume to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "awsElasticBlockStore":
			s.AwsElasticBlockStore.Reset()
			if err := s.AwsElasticBlockStore.ReadJSON(i); err != nil {
				return err
			}
		case "azureDisk":
			s.AzureDisk.Reset()
			if err := s.AzureDisk.ReadJSON(i); err != nil {
				return err
			}
		case "azureFile":
			s.AzureFile.Reset()
			if err := s.AzureFile.ReadJSON(i); err != nil {
				return err
			}
		case "cephfs":
			s.Cephfs.Reset()
			if err := s.Cephfs.ReadJSON(i); err != nil {
				return err
			}
		case "cinder":
			s.Cinder.Reset()
			if err := s.Cinder.ReadJSON(i); err != nil {
				return err
			}
		case "configMap":
			s.ConfigMap.Reset()
			if err := s.ConfigMap.ReadJSON(i); err != nil {
				return err
			}
		case "csi":
			s.Csi.Reset()
			if err := s.Csi.ReadJSON(i); err != nil {
				return err
			}
		case "downwardAPI":
			s.DownwardAPI.Reset()
			if err := s.DownwardAPI.ReadJSON(i); err != nil {
				return err
			}
		case "emptyDir":
			s.EmptyDir.Reset()
			if err := s.EmptyDir.ReadJSON(i); err != nil {
				return err
			}
		case "ephemeral":
			s.Ephemeral.Reset()
			if err := s.Ephemeral.ReadJSON(i); err != nil {
				return err
			}
		case "fc":
			s.Fc.Reset()
			if err := s.Fc.ReadJSON(i); err != nil {
				return err
			}
		case "flexVolume":
			s.FlexVolume.Reset()
			if err := s.FlexVolume.ReadJSON(i); err != nil {
				return err
			}
		case "flocker":
			s.Flocker.Reset()
			if err := s.Flocker.ReadJSON(i); err != nil {
				return err
			}
		case "gcePersistentDisk":
			s.GcePersistentDisk.Reset()
			if err := s.GcePersistentDisk.ReadJSON(i); err != nil {
				return err
			}
		case "gitRepo":
			s.GitRepo.Reset()
			if err := s.GitRepo.ReadJSON(i); err != nil {
				return err
			}
		case "glusterfs":
			s.Glusterfs.Reset()
			if err := s.Glusterfs.ReadJSON(i); err != nil {
				return err
			}
		case "hostPath":
			s.HostPath.Reset()
			if err := s.HostPath.ReadJSON(i); err != nil {
				return err
			}
		case "iscsi":
			s.Iscsi.Reset()
			if err := s.Iscsi.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "nfs":
			s.Nfs.Reset()
			if err := s.Nfs.ReadJSON(i); err != nil {
				return err
			}
		case "persistentVolumeClaim":
			s.PersistentVolumeClaim.Reset()
			if err := s.PersistentVolumeClaim.ReadJSON(i); err != nil {
				return err
			}
		case "photonPersistentDisk":
			s.PhotonPersistentDisk.Reset()
			if err := s.PhotonPersistentDisk.ReadJSON(i); err != nil {
				return err
			}
		case "portworxVolume":
			s.PortworxVolume.Reset()
			if err := s.PortworxVolume.ReadJSON(i); err != nil {
				return err
			}
		case "projected":
			s.Projected.Reset()
			if err := s.Projected.ReadJSON(i); err != nil {
				return err
			}
		case "quobyte":
			s.Quobyte.Reset()
			if err := s.Quobyte.ReadJSON(i); err != nil {
				return err
			}
		case "rbd":
			s.Rbd.Reset()
			if err := s.Rbd.ReadJSON(i); err != nil {
				return err
			}
		case "scaleIO":
			s.ScaleIO.Reset()
			if err := s.ScaleIO.ReadJSON(i); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(i); err != nil {
				return err
			}
		case "storageos":
			s.Storageos.Reset()
			if err := s.Storageos.ReadJSON(i); err != nil {
				return err
			}
		case "vsphereVolume":
			s.VsphereVolume.Reset()
			if err := s.VsphereVolume.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeDevice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("devicePath")
	j.WriteString(s.DevicePath)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1VolumeDevice from json stream.
func (s *IoK8sAPICoreV1VolumeDevice) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1VolumeDevice to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "devicePath":
			v, err := i.Str()
			s.DevicePath = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeMount) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("mountPath")
	j.WriteString(s.MountPath)
	if s.MountPropagation.Set {
		more.More()
		j.WriteObjectField("mountPropagation")
		s.MountPropagation.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SubPath.Set {
		more.More()
		j.WriteObjectField("subPath")
		s.SubPath.WriteJSON(j)
	}
	if s.SubPathExpr.Set {
		more.More()
		j.WriteObjectField("subPathExpr")
		s.SubPathExpr.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1VolumeMount from json stream.
func (s *IoK8sAPICoreV1VolumeMount) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1VolumeMount to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "mountPath":
			v, err := i.Str()
			s.MountPath = string(v)
			if err != nil {
				return err
			}
		case "mountPropagation":
			s.MountPropagation.Reset()
			if err := s.MountPropagation.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		case "subPath":
			s.SubPath.Reset()
			if err := s.SubPath.ReadJSON(i); err != nil {
				return err
			}
		case "subPathExpr":
			s.SubPathExpr.Reset()
			if err := s.SubPathExpr.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeNodeAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Required.Set {
		more.More()
		j.WriteObjectField("required")
		s.Required.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1VolumeNodeAffinity from json stream.
func (s *IoK8sAPICoreV1VolumeNodeAffinity) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1VolumeNodeAffinity to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "required":
			s.Required.Reset()
			if err := s.Required.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMap.Set {
		more.More()
		j.WriteObjectField("configMap")
		s.ConfigMap.WriteJSON(j)
	}
	if s.DownwardAPI.Set {
		more.More()
		j.WriteObjectField("downwardAPI")
		s.DownwardAPI.WriteJSON(j)
	}
	if s.Secret.Set {
		more.More()
		j.WriteObjectField("secret")
		s.Secret.WriteJSON(j)
	}
	if s.ServiceAccountToken.Set {
		more.More()
		j.WriteObjectField("serviceAccountToken")
		s.ServiceAccountToken.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1VolumeProjection from json stream.
func (s *IoK8sAPICoreV1VolumeProjection) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1VolumeProjection to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "configMap":
			s.ConfigMap.Reset()
			if err := s.ConfigMap.ReadJSON(i); err != nil {
				return err
			}
		case "downwardAPI":
			s.DownwardAPI.Reset()
			if err := s.DownwardAPI.ReadJSON(i); err != nil {
				return err
			}
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(i); err != nil {
				return err
			}
		case "serviceAccountToken":
			s.ServiceAccountToken.Reset()
			if err := s.ServiceAccountToken.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.StoragePolicyID.Set {
		more.More()
		j.WriteObjectField("storagePolicyID")
		s.StoragePolicyID.WriteJSON(j)
	}
	if s.StoragePolicyName.Set {
		more.More()
		j.WriteObjectField("storagePolicyName")
		s.StoragePolicyName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumePath")
	j.WriteString(s.VolumePath)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1VsphereVirtualDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1VsphereVirtualDiskVolumeSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				return err
			}
		case "storagePolicyID":
			s.StoragePolicyID.Reset()
			if err := s.StoragePolicyID.ReadJSON(i); err != nil {
				return err
			}
		case "storagePolicyName":
			s.StoragePolicyName.Reset()
			if err := s.StoragePolicyName.ReadJSON(i); err != nil {
				return err
			}
		case "volumePath":
			v, err := i.Str()
			s.VolumePath = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1WeightedPodAffinityTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("podAffinityTerm")
	s.PodAffinityTerm.WriteJSON(j)
	more.More()
	j.WriteObjectField("weight")
	j.WriteInt32(s.Weight)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1WeightedPodAffinityTerm from json stream.
func (s *IoK8sAPICoreV1WeightedPodAffinityTerm) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1WeightedPodAffinityTerm to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "podAffinityTerm":
			if err := s.PodAffinityTerm.ReadJSON(i); err != nil {
				return err
			}
		case "weight":
			v, err := i.Int32()
			s.Weight = int32(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1WindowsSecurityContextOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.GmsaCredentialSpec.Set {
		more.More()
		j.WriteObjectField("gmsaCredentialSpec")
		s.GmsaCredentialSpec.WriteJSON(j)
	}
	if s.GmsaCredentialSpecName.Set {
		more.More()
		j.WriteObjectField("gmsaCredentialSpecName")
		s.GmsaCredentialSpecName.WriteJSON(j)
	}
	if s.HostProcess.Set {
		more.More()
		j.WriteObjectField("hostProcess")
		s.HostProcess.WriteJSON(j)
	}
	if s.RunAsUserName.Set {
		more.More()
		j.WriteObjectField("runAsUserName")
		s.RunAsUserName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPICoreV1WindowsSecurityContextOptions from json stream.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPICoreV1WindowsSecurityContextOptions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "gmsaCredentialSpec":
			s.GmsaCredentialSpec.Reset()
			if err := s.GmsaCredentialSpec.ReadJSON(i); err != nil {
				return err
			}
		case "gmsaCredentialSpecName":
			s.GmsaCredentialSpecName.Reset()
			if err := s.GmsaCredentialSpecName.ReadJSON(i); err != nil {
				return err
			}
		case "hostProcess":
			s.HostProcess.Reset()
			if err := s.HostProcess.ReadJSON(i); err != nil {
				return err
			}
		case "runAsUserName":
			s.RunAsUserName.Reset()
			if err := s.RunAsUserName.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1Endpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addresses")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Addresses {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Conditions.Set {
		more.More()
		j.WriteObjectField("conditions")
		s.Conditions.WriteJSON(j)
	}
	if s.DeprecatedTopology != nil {
		more.More()
		j.WriteObjectField("deprecatedTopology")
		s.DeprecatedTopology.WriteJSON(j)
	}
	if s.Hints.Set {
		more.More()
		j.WriteObjectField("hints")
		s.Hints.WriteJSON(j)
	}
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	if s.TargetRef.Set {
		more.More()
		j.WriteObjectField("targetRef")
		s.TargetRef.WriteJSON(j)
	}
	if s.Zone.Set {
		more.More()
		j.WriteObjectField("zone")
		s.Zone.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1Endpoint from json stream.
func (s *IoK8sAPIDiscoveryV1Endpoint) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1Endpoint to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "addresses":
			s.Addresses = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Addresses = append(s.Addresses, elem)
				return nil
			}); err != nil {
				return err
			}
		case "conditions":
			s.Conditions.Reset()
			if err := s.Conditions.ReadJSON(i); err != nil {
				return err
			}
		case "deprecatedTopology":
			s.DeprecatedTopology = nil
			var elem IoK8sAPIDiscoveryV1EndpointDeprecatedTopology
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.DeprecatedTopology = &elem
		case "hints":
			s.Hints.Reset()
			if err := s.Hints.ReadJSON(i); err != nil {
				return err
			}
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				return err
			}
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				return err
			}
		case "targetRef":
			s.TargetRef.Reset()
			if err := s.TargetRef.ReadJSON(i); err != nil {
				return err
			}
		case "zone":
			s.Zone.Reset()
			if err := s.Zone.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointConditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ready.Set {
		more.More()
		j.WriteObjectField("ready")
		s.Ready.WriteJSON(j)
	}
	if s.Serving.Set {
		more.More()
		j.WriteObjectField("serving")
		s.Serving.WriteJSON(j)
	}
	if s.Terminating.Set {
		more.More()
		j.WriteObjectField("terminating")
		s.Terminating.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointConditions from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointConditions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "ready":
			s.Ready.Reset()
			if err := s.Ready.ReadJSON(i); err != nil {
				return err
			}
		case "serving":
			s.Serving.Reset()
			if err := s.Serving.ReadJSON(i); err != nil {
				return err
			}
		case "terminating":
			s.Terminating.Reset()
			if err := s.Terminating.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointDeprecatedTopology) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointDeprecatedTopology from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointDeprecatedTopology) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointDeprecatedTopology to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointHints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ForZones != nil {
		more.More()
		j.WriteObjectField("forZones")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ForZones {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointHints from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointHints) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointHints to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "forZones":
			s.ForZones = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIDiscoveryV1ForZone
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ForZones = append(s.ForZones, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointPort from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointPort to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				return err
			}
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointSlice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addressType")
	j.WriteString(s.AddressType)
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("endpoints")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Endpoints {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointSlice from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointSlice to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "addressType":
			v, err := i.Str()
			s.AddressType = string(v)
			if err != nil {
				return err
			}
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "endpoints":
			s.Endpoints = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIDiscoveryV1Endpoint
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Endpoints = append(s.Endpoints, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "ports":
			s.Ports = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIDiscoveryV1EndpointPort
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ports = append(s.Ports, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointSliceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointSliceList from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1EndpointSliceList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIDiscoveryV1EndpointSlice
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1ForZone) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1ForZone from json stream.
func (s *IoK8sAPIDiscoveryV1ForZone) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1ForZone to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1Endpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addresses")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Addresses {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Conditions.Set {
		more.More()
		j.WriteObjectField("conditions")
		s.Conditions.WriteJSON(j)
	}
	if s.Hints.Set {
		more.More()
		j.WriteObjectField("hints")
		s.Hints.WriteJSON(j)
	}
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	if s.TargetRef.Set {
		more.More()
		j.WriteObjectField("targetRef")
		s.TargetRef.WriteJSON(j)
	}
	if s.Topology != nil {
		more.More()
		j.WriteObjectField("topology")
		s.Topology.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1Endpoint from json stream.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1Endpoint to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "addresses":
			s.Addresses = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Addresses = append(s.Addresses, elem)
				return nil
			}); err != nil {
				return err
			}
		case "conditions":
			s.Conditions.Reset()
			if err := s.Conditions.ReadJSON(i); err != nil {
				return err
			}
		case "hints":
			s.Hints.Reset()
			if err := s.Hints.ReadJSON(i); err != nil {
				return err
			}
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				return err
			}
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				return err
			}
		case "targetRef":
			s.TargetRef.Reset()
			if err := s.TargetRef.ReadJSON(i); err != nil {
				return err
			}
		case "topology":
			s.Topology = nil
			var elem IoK8sAPIDiscoveryV1beta1EndpointTopology
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Topology = &elem
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointConditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ready.Set {
		more.More()
		j.WriteObjectField("ready")
		s.Ready.WriteJSON(j)
	}
	if s.Serving.Set {
		more.More()
		j.WriteObjectField("serving")
		s.Serving.WriteJSON(j)
	}
	if s.Terminating.Set {
		more.More()
		j.WriteObjectField("terminating")
		s.Terminating.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointConditions from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointConditions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "ready":
			s.Ready.Reset()
			if err := s.Ready.ReadJSON(i); err != nil {
				return err
			}
		case "serving":
			s.Serving.Reset()
			if err := s.Serving.ReadJSON(i); err != nil {
				return err
			}
		case "terminating":
			s.Terminating.Reset()
			if err := s.Terminating.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointHints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ForZones != nil {
		more.More()
		j.WriteObjectField("forZones")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ForZones {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointHints from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointHints) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointHints to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "forZones":
			s.ForZones = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIDiscoveryV1beta1ForZone
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ForZones = append(s.ForZones, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointPort from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointPort to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				return err
			}
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointSlice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addressType")
	j.WriteString(s.AddressType)
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("endpoints")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Endpoints {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointSlice from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointSlice to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "addressType":
			v, err := i.Str()
			s.AddressType = string(v)
			if err != nil {
				return err
			}
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "endpoints":
			s.Endpoints = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIDiscoveryV1beta1Endpoint
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Endpoints = append(s.Endpoints, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "ports":
			s.Ports = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIDiscoveryV1beta1EndpointPort
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ports = append(s.Ports, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointSliceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointSliceList from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointSliceList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIDiscoveryV1beta1EndpointSlice
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointTopology) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointTopology from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointTopology) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1EndpointTopology to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1ForZone) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1ForZone from json stream.
func (s *IoK8sAPIDiscoveryV1beta1ForZone) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIDiscoveryV1beta1ForZone to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Action.Set {
		more.More()
		j.WriteObjectField("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.DeprecatedCount.Set {
		more.More()
		j.WriteObjectField("deprecatedCount")
		s.DeprecatedCount.WriteJSON(j)
	}
	if s.DeprecatedFirstTimestamp.Set {
		more.More()
		j.WriteObjectField("deprecatedFirstTimestamp")
		s.DeprecatedFirstTimestamp.WriteJSON(j)
	}
	if s.DeprecatedLastTimestamp.Set {
		more.More()
		j.WriteObjectField("deprecatedLastTimestamp")
		s.DeprecatedLastTimestamp.WriteJSON(j)
	}
	if s.DeprecatedSource.Set {
		more.More()
		j.WriteObjectField("deprecatedSource")
		s.DeprecatedSource.WriteJSON(j)
	}
	// Unsupported kind "alias".
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Note.Set {
		more.More()
		j.WriteObjectField("note")
		s.Note.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Regarding.Set {
		more.More()
		j.WriteObjectField("regarding")
		s.Regarding.WriteJSON(j)
	}
	if s.Related.Set {
		more.More()
		j.WriteObjectField("related")
		s.Related.WriteJSON(j)
	}
	if s.ReportingController.Set {
		more.More()
		j.WriteObjectField("reportingController")
		s.ReportingController.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		more.More()
		j.WriteObjectField("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	if s.Series.Set {
		more.More()
		j.WriteObjectField("series")
		s.Series.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1Event from json stream.
func (s *IoK8sAPIEventsV1Event) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1Event to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(i); err != nil {
				return err
			}
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "deprecatedCount":
			s.DeprecatedCount.Reset()
			if err := s.DeprecatedCount.ReadJSON(i); err != nil {
				return err
			}
		case "deprecatedFirstTimestamp":
			s.DeprecatedFirstTimestamp.Reset()
			if err := s.DeprecatedFirstTimestamp.ReadJSON(i); err != nil {
				return err
			}
		case "deprecatedLastTimestamp":
			s.DeprecatedLastTimestamp.Reset()
			if err := s.DeprecatedLastTimestamp.ReadJSON(i); err != nil {
				return err
			}
		case "deprecatedSource":
			s.DeprecatedSource.Reset()
			if err := s.DeprecatedSource.ReadJSON(i); err != nil {
				return err
			}
		case "eventTime":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgApisMetaV1MicroTime" (alias) is not implemented`); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "regarding":
			s.Regarding.Reset()
			if err := s.Regarding.ReadJSON(i); err != nil {
				return err
			}
		case "related":
			s.Related.Reset()
			if err := s.Related.ReadJSON(i); err != nil {
				return err
			}
		case "reportingController":
			s.ReportingController.Reset()
			if err := s.ReportingController.ReadJSON(i); err != nil {
				return err
			}
		case "reportingInstance":
			s.ReportingInstance.Reset()
			if err := s.ReportingInstance.ReadJSON(i); err != nil {
				return err
			}
		case "series":
			s.Series.Reset()
			if err := s.Series.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1EventList from json stream.
func (s *IoK8sAPIEventsV1EventList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1EventList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIEventsV1Event
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("count")
	j.WriteInt32(s.Count)
	// Unsupported kind "alias".
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1EventSeries from json stream.
func (s *IoK8sAPIEventsV1EventSeries) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1EventSeries to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "count":
			v, err := i.Int32()
			s.Count = int32(v)
			if err != nil {
				return err
			}
		case "lastObservedTime":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgApisMetaV1MicroTime" (alias) is not implemented`); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Action.Set {
		more.More()
		j.WriteObjectField("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.DeprecatedCount.Set {
		more.More()
		j.WriteObjectField("deprecatedCount")
		s.DeprecatedCount.WriteJSON(j)
	}
	if s.DeprecatedFirstTimestamp.Set {
		more.More()
		j.WriteObjectField("deprecatedFirstTimestamp")
		s.DeprecatedFirstTimestamp.WriteJSON(j)
	}
	if s.DeprecatedLastTimestamp.Set {
		more.More()
		j.WriteObjectField("deprecatedLastTimestamp")
		s.DeprecatedLastTimestamp.WriteJSON(j)
	}
	if s.DeprecatedSource.Set {
		more.More()
		j.WriteObjectField("deprecatedSource")
		s.DeprecatedSource.WriteJSON(j)
	}
	// Unsupported kind "alias".
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Note.Set {
		more.More()
		j.WriteObjectField("note")
		s.Note.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Regarding.Set {
		more.More()
		j.WriteObjectField("regarding")
		s.Regarding.WriteJSON(j)
	}
	if s.Related.Set {
		more.More()
		j.WriteObjectField("related")
		s.Related.WriteJSON(j)
	}
	if s.ReportingController.Set {
		more.More()
		j.WriteObjectField("reportingController")
		s.ReportingController.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		more.More()
		j.WriteObjectField("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	if s.Series.Set {
		more.More()
		j.WriteObjectField("series")
		s.Series.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1beta1Event from json stream.
func (s *IoK8sAPIEventsV1beta1Event) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1beta1Event to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(i); err != nil {
				return err
			}
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "deprecatedCount":
			s.DeprecatedCount.Reset()
			if err := s.DeprecatedCount.ReadJSON(i); err != nil {
				return err
			}
		case "deprecatedFirstTimestamp":
			s.DeprecatedFirstTimestamp.Reset()
			if err := s.DeprecatedFirstTimestamp.ReadJSON(i); err != nil {
				return err
			}
		case "deprecatedLastTimestamp":
			s.DeprecatedLastTimestamp.Reset()
			if err := s.DeprecatedLastTimestamp.ReadJSON(i); err != nil {
				return err
			}
		case "deprecatedSource":
			s.DeprecatedSource.Reset()
			if err := s.DeprecatedSource.ReadJSON(i); err != nil {
				return err
			}
		case "eventTime":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgApisMetaV1MicroTime" (alias) is not implemented`); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "regarding":
			s.Regarding.Reset()
			if err := s.Regarding.ReadJSON(i); err != nil {
				return err
			}
		case "related":
			s.Related.Reset()
			if err := s.Related.ReadJSON(i); err != nil {
				return err
			}
		case "reportingController":
			s.ReportingController.Reset()
			if err := s.ReportingController.ReadJSON(i); err != nil {
				return err
			}
		case "reportingInstance":
			s.ReportingInstance.Reset()
			if err := s.ReportingInstance.ReadJSON(i); err != nil {
				return err
			}
		case "series":
			s.Series.Reset()
			if err := s.Series.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1beta1EventList from json stream.
func (s *IoK8sAPIEventsV1beta1EventList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1beta1EventList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIEventsV1beta1Event
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("count")
	j.WriteInt32(s.Count)
	// Unsupported kind "alias".
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIEventsV1beta1EventSeries from json stream.
func (s *IoK8sAPIEventsV1beta1EventSeries) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIEventsV1beta1EventSeries to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "count":
			v, err := i.Int32()
			s.Count = int32(v)
			if err != nil {
				return err
			}
		case "lastObservedTime":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgApisMetaV1MicroTime" (alias) is not implemented`); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchema) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchema from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowSchema to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowSchemaList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta1FlowSchema
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DistinguisherMethod.Set {
		more.More()
		j.WriteObjectField("distinguisherMethod")
		s.DistinguisherMethod.WriteJSON(j)
	}
	if s.MatchingPrecedence.Set {
		more.More()
		j.WriteObjectField("matchingPrecedence")
		s.MatchingPrecedence.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("priorityLevelConfiguration")
	s.PriorityLevelConfiguration.WriteJSON(j)
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "distinguisherMethod":
			s.DistinguisherMethod.Reset()
			if err := s.DistinguisherMethod.ReadJSON(i); err != nil {
				return err
			}
		case "matchingPrecedence":
			s.MatchingPrecedence.Reset()
			if err := s.MatchingPrecedence.ReadJSON(i); err != nil {
				return err
			}
		case "priorityLevelConfiguration":
			if err := s.PriorityLevelConfiguration.ReadJSON(i); err != nil {
				return err
			}
		case "rules":
			s.Rules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Rules = append(s.Rules, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1GroupSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1GroupSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1GroupSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1GroupSubject to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1LimitResponse) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Queuing.Set {
		more.More()
		j.WriteObjectField("queuing")
		s.Queuing.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1LimitResponse from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1LimitResponse) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1LimitResponse to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "queuing":
			s.Queuing.Reset()
			if err := s.Queuing.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AssuredConcurrencyShares.Set {
		more.More()
		j.WriteObjectField("assuredConcurrencyShares")
		s.AssuredConcurrencyShares.WriteJSON(j)
	}
	if s.LimitResponse.Set {
		more.More()
		j.WriteObjectField("limitResponse")
		s.LimitResponse.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "assuredConcurrencyShares":
			s.AssuredConcurrencyShares.Reset()
			if err := s.AssuredConcurrencyShares.ReadJSON(i); err != nil {
				return err
			}
		case "limitResponse":
			s.LimitResponse.Reset()
			if err := s.LimitResponse.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("nonResourceURLs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NonResourceURLs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nonResourceURLs":
			s.NonResourceURLs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.NonResourceURLs = append(s.NonResourceURLs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "verbs":
			s.Verbs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Verbs = append(s.Verbs, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceRules != nil {
		more.More()
		j.WriteObjectField("nonResourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceRules != nil {
		more.More()
		j.WriteObjectField("resourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("subjects")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Subjects {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nonResourceRules":
			s.NonResourceRules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.NonResourceRules = append(s.NonResourceRules, elem)
				return nil
			}); err != nil {
				return err
			}
		case "resourceRules":
			s.ResourceRules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ResourceRules = append(s.ResourceRules, elem)
				return nil
			}); err != nil {
				return err
			}
		case "subjects":
			s.Subjects = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta1Subject
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Subjects = append(s.Subjects, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limited.Set {
		more.More()
		j.WriteObjectField("limited")
		s.Limited.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "limited":
			s.Limited.Reset()
			if err := s.Limited.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HandSize.Set {
		more.More()
		j.WriteObjectField("handSize")
		s.HandSize.WriteJSON(j)
	}
	if s.QueueLengthLimit.Set {
		more.More()
		j.WriteObjectField("queueLengthLimit")
		s.QueueLengthLimit.WriteJSON(j)
	}
	if s.Queues.Set {
		more.More()
		j.WriteObjectField("queues")
		s.Queues.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1QueuingConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1QueuingConfiguration to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "handSize":
			s.HandSize.Reset()
			if err := s.HandSize.ReadJSON(i); err != nil {
				return err
			}
		case "queueLengthLimit":
			s.QueueLengthLimit.Reset()
			if err := s.QueueLengthLimit.ReadJSON(i); err != nil {
				return err
			}
		case "queues":
			s.Queues.Reset()
			if err := s.Queues.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiGroups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ApiGroups {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.ClusterScope.Set {
		more.More()
		j.WriteObjectField("clusterScope")
		s.ClusterScope.WriteJSON(j)
	}
	if s.Namespaces != nil {
		more.More()
		j.WriteObjectField("namespaces")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Namespaces {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("resources")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Resources {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiGroups":
			s.ApiGroups = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ApiGroups = append(s.ApiGroups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "clusterScope":
			s.ClusterScope.Reset()
			if err := s.ClusterScope.ReadJSON(i); err != nil {
				return err
			}
		case "namespaces":
			s.Namespaces = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Namespaces = append(s.Namespaces, elem)
				return nil
			}); err != nil {
				return err
			}
		case "resources":
			s.Resources = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Resources = append(s.Resources, elem)
				return nil
			}); err != nil {
				return err
			}
		case "verbs":
			s.Verbs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Verbs = append(s.Verbs, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "namespace":
			v, err := i.Str()
			s.Namespace = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	if s.ServiceAccount.Set {
		more.More()
		j.WriteObjectField("serviceAccount")
		s.ServiceAccount.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1Subject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1Subject to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "serviceAccount":
			s.ServiceAccount.Reset()
			if err := s.ServiceAccount.ReadJSON(i); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1UserSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1UserSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1UserSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta1UserSubject to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchema) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchema from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowSchema to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowSchemaList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta2FlowSchema
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DistinguisherMethod.Set {
		more.More()
		j.WriteObjectField("distinguisherMethod")
		s.DistinguisherMethod.WriteJSON(j)
	}
	if s.MatchingPrecedence.Set {
		more.More()
		j.WriteObjectField("matchingPrecedence")
		s.MatchingPrecedence.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("priorityLevelConfiguration")
	s.PriorityLevelConfiguration.WriteJSON(j)
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "distinguisherMethod":
			s.DistinguisherMethod.Reset()
			if err := s.DistinguisherMethod.ReadJSON(i); err != nil {
				return err
			}
		case "matchingPrecedence":
			s.MatchingPrecedence.Reset()
			if err := s.MatchingPrecedence.ReadJSON(i); err != nil {
				return err
			}
		case "priorityLevelConfiguration":
			if err := s.PriorityLevelConfiguration.ReadJSON(i); err != nil {
				return err
			}
		case "rules":
			s.Rules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Rules = append(s.Rules, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2GroupSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2GroupSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2GroupSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2GroupSubject to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2LimitResponse) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Queuing.Set {
		more.More()
		j.WriteObjectField("queuing")
		s.Queuing.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2LimitResponse from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2LimitResponse) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2LimitResponse to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "queuing":
			s.Queuing.Reset()
			if err := s.Queuing.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AssuredConcurrencyShares.Set {
		more.More()
		j.WriteObjectField("assuredConcurrencyShares")
		s.AssuredConcurrencyShares.WriteJSON(j)
	}
	if s.LimitResponse.Set {
		more.More()
		j.WriteObjectField("limitResponse")
		s.LimitResponse.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "assuredConcurrencyShares":
			s.AssuredConcurrencyShares.Reset()
			if err := s.AssuredConcurrencyShares.ReadJSON(i); err != nil {
				return err
			}
		case "limitResponse":
			s.LimitResponse.Reset()
			if err := s.LimitResponse.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("nonResourceURLs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NonResourceURLs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nonResourceURLs":
			s.NonResourceURLs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.NonResourceURLs = append(s.NonResourceURLs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "verbs":
			s.Verbs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Verbs = append(s.Verbs, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceRules != nil {
		more.More()
		j.WriteObjectField("nonResourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceRules != nil {
		more.More()
		j.WriteObjectField("resourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("subjects")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Subjects {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nonResourceRules":
			s.NonResourceRules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.NonResourceRules = append(s.NonResourceRules, elem)
				return nil
			}); err != nil {
				return err
			}
		case "resourceRules":
			s.ResourceRules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ResourceRules = append(s.ResourceRules, elem)
				return nil
			}); err != nil {
				return err
			}
		case "subjects":
			s.Subjects = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta2Subject
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Subjects = append(s.Subjects, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limited.Set {
		more.More()
		j.WriteObjectField("limited")
		s.Limited.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "limited":
			s.Limited.Reset()
			if err := s.Limited.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HandSize.Set {
		more.More()
		j.WriteObjectField("handSize")
		s.HandSize.WriteJSON(j)
	}
	if s.QueueLengthLimit.Set {
		more.More()
		j.WriteObjectField("queueLengthLimit")
		s.QueueLengthLimit.WriteJSON(j)
	}
	if s.Queues.Set {
		more.More()
		j.WriteObjectField("queues")
		s.Queues.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2QueuingConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2QueuingConfiguration to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "handSize":
			s.HandSize.Reset()
			if err := s.HandSize.ReadJSON(i); err != nil {
				return err
			}
		case "queueLengthLimit":
			s.QueueLengthLimit.Reset()
			if err := s.QueueLengthLimit.ReadJSON(i); err != nil {
				return err
			}
		case "queues":
			s.Queues.Reset()
			if err := s.Queues.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiGroups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ApiGroups {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.ClusterScope.Set {
		more.More()
		j.WriteObjectField("clusterScope")
		s.ClusterScope.WriteJSON(j)
	}
	if s.Namespaces != nil {
		more.More()
		j.WriteObjectField("namespaces")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Namespaces {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("resources")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Resources {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiGroups":
			s.ApiGroups = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ApiGroups = append(s.ApiGroups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "clusterScope":
			s.ClusterScope.Reset()
			if err := s.ClusterScope.ReadJSON(i); err != nil {
				return err
			}
		case "namespaces":
			s.Namespaces = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Namespaces = append(s.Namespaces, elem)
				return nil
			}); err != nil {
				return err
			}
		case "resources":
			s.Resources = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Resources = append(s.Resources, elem)
				return nil
			}); err != nil {
				return err
			}
		case "verbs":
			s.Verbs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Verbs = append(s.Verbs, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "namespace":
			v, err := i.Str()
			s.Namespace = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	if s.ServiceAccount.Set {
		more.More()
		j.WriteObjectField("serviceAccount")
		s.ServiceAccount.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2Subject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2Subject to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "serviceAccount":
			s.ServiceAccount.Reset()
			if err := s.ServiceAccount.ReadJSON(i); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2UserSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2UserSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2UserSubject) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIFlowcontrolV1beta2UserSubject to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1HTTPIngressPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("backend")
	s.Backend.WriteJSON(j)
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("pathType")
	j.WriteString(s.PathType)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1HTTPIngressPath from json stream.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1HTTPIngressPath to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "backend":
			if err := s.Backend.ReadJSON(i); err != nil {
				return err
			}
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				return err
			}
		case "pathType":
			v, err := i.Str()
			s.PathType = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1HTTPIngressRuleValue) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("paths")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Paths {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1HTTPIngressRuleValue from json stream.
func (s *IoK8sAPINetworkingV1HTTPIngressRuleValue) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1HTTPIngressRuleValue to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "paths":
			s.Paths = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1HTTPIngressPath
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Paths = append(s.Paths, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IPBlock) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("cidr")
	j.WriteString(s.Cidr)
	if s.Except != nil {
		more.More()
		j.WriteObjectField("except")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Except {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IPBlock from json stream.
func (s *IoK8sAPINetworkingV1IPBlock) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IPBlock to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "cidr":
			v, err := i.Str()
			s.Cidr = string(v)
			if err != nil {
				return err
			}
		case "except":
			s.Except = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Except = append(s.Except, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1Ingress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1Ingress from json stream.
func (s *IoK8sAPINetworkingV1Ingress) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1Ingress to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressBackend) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressBackend from json stream.
func (s *IoK8sAPINetworkingV1IngressBackend) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressBackend to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				return err
			}
		case "service":
			s.Service.Reset()
			if err := s.Service.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClass from json stream.
func (s *IoK8sAPINetworkingV1IngressClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressClass to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassList from json stream.
func (s *IoK8sAPINetworkingV1IngressClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressClassList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1IngressClass
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassParametersReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroup.Set {
		more.More()
		j.WriteObjectField("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Scope.Set {
		more.More()
		j.WriteObjectField("scope")
		s.Scope.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassParametersReference from json stream.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressClassParametersReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiGroup":
			s.ApiGroup.Reset()
			if err := s.ApiGroup.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				return err
			}
		case "scope":
			s.Scope.Reset()
			if err := s.Scope.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Controller.Set {
		more.More()
		j.WriteObjectField("controller")
		s.Controller.WriteJSON(j)
	}
	if s.Parameters.Set {
		more.More()
		j.WriteObjectField("parameters")
		s.Parameters.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassSpec from json stream.
func (s *IoK8sAPINetworkingV1IngressClassSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressClassSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "controller":
			s.Controller.Reset()
			if err := s.Controller.ReadJSON(i); err != nil {
				return err
			}
		case "parameters":
			s.Parameters.Reset()
			if err := s.Parameters.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressList from json stream.
func (s *IoK8sAPINetworkingV1IngressList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1Ingress
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	if s.HTTP.Set {
		more.More()
		j.WriteObjectField("http")
		s.HTTP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressRule from json stream.
func (s *IoK8sAPINetworkingV1IngressRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressRule to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				return err
			}
		case "http":
			s.HTTP.Reset()
			if err := s.HTTP.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressServiceBackend) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressServiceBackend from json stream.
func (s *IoK8sAPINetworkingV1IngressServiceBackend) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressServiceBackend to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultBackend.Set {
		more.More()
		j.WriteObjectField("defaultBackend")
		s.DefaultBackend.WriteJSON(j)
	}
	if s.IngressClassName.Set {
		more.More()
		j.WriteObjectField("ingressClassName")
		s.IngressClassName.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.TLS != nil {
		more.More()
		j.WriteObjectField("tls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TLS {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressSpec from json stream.
func (s *IoK8sAPINetworkingV1IngressSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "defaultBackend":
			s.DefaultBackend.Reset()
			if err := s.DefaultBackend.ReadJSON(i); err != nil {
				return err
			}
		case "ingressClassName":
			s.IngressClassName.Reset()
			if err := s.IngressClassName.ReadJSON(i); err != nil {
				return err
			}
		case "rules":
			s.Rules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1IngressRule
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Rules = append(s.Rules, elem)
				return nil
			}); err != nil {
				return err
			}
		case "tls":
			s.TLS = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1IngressTLS
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.TLS = append(s.TLS, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LoadBalancer.Set {
		more.More()
		j.WriteObjectField("loadBalancer")
		s.LoadBalancer.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressStatus from json stream.
func (s *IoK8sAPINetworkingV1IngressStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "loadBalancer":
			s.LoadBalancer.Reset()
			if err := s.LoadBalancer.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressTLS) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hosts != nil {
		more.More()
		j.WriteObjectField("hosts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Hosts {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.SecretName.Set {
		more.More()
		j.WriteObjectField("secretName")
		s.SecretName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1IngressTLS from json stream.
func (s *IoK8sAPINetworkingV1IngressTLS) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1IngressTLS to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "hosts":
			s.Hosts = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Hosts = append(s.Hosts, elem)
				return nil
			}); err != nil {
				return err
			}
		case "secretName":
			s.SecretName.Reset()
			if err := s.SecretName.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicy from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicy) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicy to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyEgressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.To != nil {
		more.More()
		j.WriteObjectField("to")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.To {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyEgressRule from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyEgressRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicyEgressRule to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "ports":
			s.Ports = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1NetworkPolicyPort
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ports = append(s.Ports, elem)
				return nil
			}); err != nil {
				return err
			}
		case "to":
			s.To = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1NetworkPolicyPeer
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.To = append(s.To, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyIngressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.From != nil {
		more.More()
		j.WriteObjectField("from")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.From {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyIngressRule from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyIngressRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicyIngressRule to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "from":
			s.From = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1NetworkPolicyPeer
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.From = append(s.From, elem)
				return nil
			}); err != nil {
				return err
			}
		case "ports":
			s.Ports = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1NetworkPolicyPort
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ports = append(s.Ports, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyList from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicyList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1NetworkPolicy
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyPeer) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.IpBlock.Set {
		more.More()
		j.WriteObjectField("ipBlock")
		s.IpBlock.WriteJSON(j)
	}
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.PodSelector.Set {
		more.More()
		j.WriteObjectField("podSelector")
		s.PodSelector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyPeer from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicyPeer to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "ipBlock":
			s.IpBlock.Reset()
			if err := s.IpBlock.ReadJSON(i); err != nil {
				return err
			}
		case "namespaceSelector":
			s.NamespaceSelector.Reset()
			if err := s.NamespaceSelector.ReadJSON(i); err != nil {
				return err
			}
		case "podSelector":
			s.PodSelector.Reset()
			if err := s.PodSelector.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.EndPort.Set {
		more.More()
		j.WriteObjectField("endPort")
		s.EndPort.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyPort from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicyPort to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "endPort":
			s.EndPort.Reset()
			if err := s.EndPort.ReadJSON(i); err != nil {
				return err
			}
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				return err
			}
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicySpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Egress != nil {
		more.More()
		j.WriteObjectField("egress")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Egress {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ingress != nil {
		more.More()
		j.WriteObjectField("ingress")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ingress {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("podSelector")
	s.PodSelector.WriteJSON(j)
	if s.PolicyTypes != nil {
		more.More()
		j.WriteObjectField("policyTypes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PolicyTypes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicySpec from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1NetworkPolicySpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "egress":
			s.Egress = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1NetworkPolicyEgressRule
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Egress = append(s.Egress, elem)
				return nil
			}); err != nil {
				return err
			}
		case "ingress":
			s.Ingress = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINetworkingV1NetworkPolicyIngressRule
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ingress = append(s.Ingress, elem)
				return nil
			}); err != nil {
				return err
			}
		case "podSelector":
			if err := s.PodSelector.ReadJSON(i); err != nil {
				return err
			}
		case "policyTypes":
			s.PolicyTypes = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.PolicyTypes = append(s.PolicyTypes, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1ServiceBackendPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Number.Set {
		more.More()
		j.WriteObjectField("number")
		s.Number.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINetworkingV1ServiceBackendPort from json stream.
func (s *IoK8sAPINetworkingV1ServiceBackendPort) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINetworkingV1ServiceBackendPort to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "number":
			s.Number.Reset()
			if err := s.Number.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PodFixed != nil {
		more.More()
		j.WriteObjectField("podFixed")
		s.PodFixed.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1Overhead from json stream.
func (s *IoK8sAPINodeV1Overhead) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1Overhead to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "podFixed":
			s.PodFixed = nil
			var elem IoK8sAPINodeV1OverheadPodFixed
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.PodFixed = &elem
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1OverheadPodFixed) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1OverheadPodFixed from json stream.
func (s *IoK8sAPINodeV1OverheadPodFixed) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1OverheadPodFixed to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("handler")
	j.WriteString(s.Handler)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Overhead.Set {
		more.More()
		j.WriteObjectField("overhead")
		s.Overhead.WriteJSON(j)
	}
	if s.Scheduling.Set {
		more.More()
		j.WriteObjectField("scheduling")
		s.Scheduling.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1RuntimeClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1RuntimeClass to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "handler":
			v, err := i.Str()
			s.Handler = string(v)
			if err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "overhead":
			s.Overhead.Reset()
			if err := s.Overhead.ReadJSON(i); err != nil {
				return err
			}
		case "scheduling":
			s.Scheduling.Reset()
			if err := s.Scheduling.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1RuntimeClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1RuntimeClassList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINodeV1RuntimeClass
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NodeSelector != nil {
		more.More()
		j.WriteObjectField("nodeSelector")
		s.NodeSelector.WriteJSON(j)
	}
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1Scheduling from json stream.
func (s *IoK8sAPINodeV1Scheduling) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1Scheduling to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nodeSelector":
			s.NodeSelector = nil
			var elem IoK8sAPINodeV1SchedulingNodeSelector
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.NodeSelector = &elem
		case "tolerations":
			s.Tolerations = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Toleration
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Tolerations = append(s.Tolerations, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1SchedulingNodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1SchedulingNodeSelector from json stream.
func (s *IoK8sAPINodeV1SchedulingNodeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1SchedulingNodeSelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PodFixed != nil {
		more.More()
		j.WriteObjectField("podFixed")
		s.PodFixed.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1Overhead from json stream.
func (s *IoK8sAPINodeV1alpha1Overhead) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1Overhead to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "podFixed":
			s.PodFixed = nil
			var elem IoK8sAPINodeV1alpha1OverheadPodFixed
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.PodFixed = &elem
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1OverheadPodFixed) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1OverheadPodFixed from json stream.
func (s *IoK8sAPINodeV1alpha1OverheadPodFixed) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1OverheadPodFixed to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1RuntimeClass to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1RuntimeClassList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINodeV1alpha1RuntimeClass
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClassSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Overhead.Set {
		more.More()
		j.WriteObjectField("overhead")
		s.Overhead.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("runtimeHandler")
	j.WriteString(s.RuntimeHandler)
	if s.Scheduling.Set {
		more.More()
		j.WriteObjectField("scheduling")
		s.Scheduling.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClassSpec from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1RuntimeClassSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "overhead":
			s.Overhead.Reset()
			if err := s.Overhead.ReadJSON(i); err != nil {
				return err
			}
		case "runtimeHandler":
			v, err := i.Str()
			s.RuntimeHandler = string(v)
			if err != nil {
				return err
			}
		case "scheduling":
			s.Scheduling.Reset()
			if err := s.Scheduling.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NodeSelector != nil {
		more.More()
		j.WriteObjectField("nodeSelector")
		s.NodeSelector.WriteJSON(j)
	}
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1Scheduling from json stream.
func (s *IoK8sAPINodeV1alpha1Scheduling) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1Scheduling to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nodeSelector":
			s.NodeSelector = nil
			var elem IoK8sAPINodeV1alpha1SchedulingNodeSelector
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.NodeSelector = &elem
		case "tolerations":
			s.Tolerations = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Toleration
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Tolerations = append(s.Tolerations, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1SchedulingNodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1alpha1SchedulingNodeSelector from json stream.
func (s *IoK8sAPINodeV1alpha1SchedulingNodeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1alpha1SchedulingNodeSelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PodFixed != nil {
		more.More()
		j.WriteObjectField("podFixed")
		s.PodFixed.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1Overhead from json stream.
func (s *IoK8sAPINodeV1beta1Overhead) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1Overhead to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "podFixed":
			s.PodFixed = nil
			var elem IoK8sAPINodeV1beta1OverheadPodFixed
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.PodFixed = &elem
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1OverheadPodFixed) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1OverheadPodFixed from json stream.
func (s *IoK8sAPINodeV1beta1OverheadPodFixed) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1OverheadPodFixed to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("handler")
	j.WriteString(s.Handler)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Overhead.Set {
		more.More()
		j.WriteObjectField("overhead")
		s.Overhead.WriteJSON(j)
	}
	if s.Scheduling.Set {
		more.More()
		j.WriteObjectField("scheduling")
		s.Scheduling.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1beta1RuntimeClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1RuntimeClass to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "handler":
			v, err := i.Str()
			s.Handler = string(v)
			if err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "overhead":
			s.Overhead.Reset()
			if err := s.Overhead.ReadJSON(i); err != nil {
				return err
			}
		case "scheduling":
			s.Scheduling.Reset()
			if err := s.Scheduling.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1RuntimeClassList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPINodeV1beta1RuntimeClass
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NodeSelector != nil {
		more.More()
		j.WriteObjectField("nodeSelector")
		s.NodeSelector.WriteJSON(j)
	}
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1Scheduling from json stream.
func (s *IoK8sAPINodeV1beta1Scheduling) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1Scheduling to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "nodeSelector":
			s.NodeSelector = nil
			var elem IoK8sAPINodeV1beta1SchedulingNodeSelector
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.NodeSelector = &elem
		case "tolerations":
			s.Tolerations = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1Toleration
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Tolerations = append(s.Tolerations, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1SchedulingNodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPINodeV1beta1SchedulingNodeSelector from json stream.
func (s *IoK8sAPINodeV1beta1SchedulingNodeSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPINodeV1beta1SchedulingNodeSelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudget from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1PodDisruptionBudget to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetList from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1PodDisruptionBudgetList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIPolicyV1PodDisruptionBudget
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MaxUnavailable.Set {
		more.More()
		j.WriteObjectField("maxUnavailable")
		s.MaxUnavailable.WriteJSON(j)
	}
	if s.MinAvailable.Set {
		more.More()
		j.WriteObjectField("minAvailable")
		s.MinAvailable.WriteJSON(j)
	}
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetSpec from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1PodDisruptionBudgetSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "maxUnavailable":
			s.MaxUnavailable.Reset()
			if err := s.MaxUnavailable.ReadJSON(i); err != nil {
				return err
			}
		case "minAvailable":
			s.MinAvailable.Reset()
			if err := s.MinAvailable.ReadJSON(i); err != nil {
				return err
			}
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentHealthy")
	j.WriteInt32(s.CurrentHealthy)
	more.More()
	j.WriteObjectField("desiredHealthy")
	j.WriteInt32(s.DesiredHealthy)
	if s.DisruptedPods != nil {
		more.More()
		j.WriteObjectField("disruptedPods")
		s.DisruptedPods.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("disruptionsAllowed")
	j.WriteInt32(s.DisruptionsAllowed)
	more.More()
	j.WriteObjectField("expectedPods")
	j.WriteInt32(s.ExpectedPods)
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetStatus from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1PodDisruptionBudgetStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1Condition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "currentHealthy":
			v, err := i.Int32()
			s.CurrentHealthy = int32(v)
			if err != nil {
				return err
			}
		case "desiredHealthy":
			v, err := i.Int32()
			s.DesiredHealthy = int32(v)
			if err != nil {
				return err
			}
		case "disruptedPods":
			s.DisruptedPods = nil
			var elem IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.DisruptedPods = &elem
		case "disruptionsAllowed":
			v, err := i.Int32()
			s.DisruptionsAllowed = int32(v)
			if err != nil {
				return err
			}
		case "expectedPods":
			v, err := i.Int32()
			s.ExpectedPods = int32(v)
			if err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedCSIDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedCSIDriver from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedCSIDriver) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1AllowedCSIDriver to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedFlexVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedFlexVolume from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedFlexVolume) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1AllowedFlexVolume to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "driver":
			v, err := i.Str()
			s.Driver = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedHostPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PathPrefix.Set {
		more.More()
		j.WriteObjectField("pathPrefix")
		s.PathPrefix.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedHostPath from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedHostPath) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1AllowedHostPath to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "pathPrefix":
			s.PathPrefix.Reset()
			if err := s.PathPrefix.ReadJSON(i); err != nil {
				return err
			}
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Rule.Set {
		more.More()
		j.WriteObjectField("rule")
		s.Rule.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1FSGroupStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1FSGroupStrategyOptions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "ranges":
			s.Ranges = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIPolicyV1beta1IDRange
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ranges = append(s.Ranges, elem)
				return nil
			}); err != nil {
				return err
			}
		case "rule":
			s.Rule.Reset()
			if err := s.Rule.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1HostPortRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("max")
	j.WriteInt32(s.Max)
	more.More()
	j.WriteObjectField("min")
	j.WriteInt32(s.Min)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1HostPortRange from json stream.
func (s *IoK8sAPIPolicyV1beta1HostPortRange) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1HostPortRange to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "max":
			v, err := i.Int32()
			s.Max = int32(v)
			if err != nil {
				return err
			}
		case "min":
			v, err := i.Int32()
			s.Min = int32(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1IDRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("max")
	j.WriteInt64(s.Max)
	more.More()
	j.WriteObjectField("min")
	j.WriteInt64(s.Min)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1IDRange from json stream.
func (s *IoK8sAPIPolicyV1beta1IDRange) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1IDRange to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "max":
			v, err := i.Int64()
			s.Max = int64(v)
			if err != nil {
				return err
			}
		case "min":
			v, err := i.Int64()
			s.Min = int64(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudget from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodDisruptionBudget to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetList from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodDisruptionBudgetList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIPolicyV1beta1PodDisruptionBudget
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MaxUnavailable.Set {
		more.More()
		j.WriteObjectField("maxUnavailable")
		s.MaxUnavailable.WriteJSON(j)
	}
	if s.MinAvailable.Set {
		more.More()
		j.WriteObjectField("minAvailable")
		s.MinAvailable.WriteJSON(j)
	}
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "maxUnavailable":
			s.MaxUnavailable.Reset()
			if err := s.MaxUnavailable.ReadJSON(i); err != nil {
				return err
			}
		case "minAvailable":
			s.MinAvailable.Reset()
			if err := s.MinAvailable.ReadJSON(i); err != nil {
				return err
			}
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentHealthy")
	j.WriteInt32(s.CurrentHealthy)
	more.More()
	j.WriteObjectField("desiredHealthy")
	j.WriteInt32(s.DesiredHealthy)
	if s.DisruptedPods != nil {
		more.More()
		j.WriteObjectField("disruptedPods")
		s.DisruptedPods.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("disruptionsAllowed")
	j.WriteInt32(s.DisruptionsAllowed)
	more.More()
	j.WriteObjectField("expectedPods")
	j.WriteInt32(s.ExpectedPods)
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1Condition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "currentHealthy":
			v, err := i.Int32()
			s.CurrentHealthy = int32(v)
			if err != nil {
				return err
			}
		case "desiredHealthy":
			v, err := i.Int32()
			s.DesiredHealthy = int32(v)
			if err != nil {
				return err
			}
		case "disruptedPods":
			s.DisruptedPods = nil
			var elem IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.DisruptedPods = &elem
		case "disruptionsAllowed":
			v, err := i.Int32()
			s.DisruptionsAllowed = int32(v)
			if err != nil {
				return err
			}
		case "expectedPods":
			v, err := i.Int32()
			s.ExpectedPods = int32(v)
			if err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicy from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodSecurityPolicy to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicyList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicyList from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodSecurityPolicyList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIPolicyV1beta1PodSecurityPolicy
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowPrivilegeEscalation.Set {
		more.More()
		j.WriteObjectField("allowPrivilegeEscalation")
		s.AllowPrivilegeEscalation.WriteJSON(j)
	}
	if s.AllowedCSIDrivers != nil {
		more.More()
		j.WriteObjectField("allowedCSIDrivers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedCSIDrivers {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedCapabilities != nil {
		more.More()
		j.WriteObjectField("allowedCapabilities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedCapabilities {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedFlexVolumes != nil {
		more.More()
		j.WriteObjectField("allowedFlexVolumes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedFlexVolumes {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedHostPaths != nil {
		more.More()
		j.WriteObjectField("allowedHostPaths")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedHostPaths {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedProcMountTypes != nil {
		more.More()
		j.WriteObjectField("allowedProcMountTypes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedProcMountTypes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedUnsafeSysctls != nil {
		more.More()
		j.WriteObjectField("allowedUnsafeSysctls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedUnsafeSysctls {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.DefaultAddCapabilities != nil {
		more.More()
		j.WriteObjectField("defaultAddCapabilities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.DefaultAddCapabilities {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.DefaultAllowPrivilegeEscalation.Set {
		more.More()
		j.WriteObjectField("defaultAllowPrivilegeEscalation")
		s.DefaultAllowPrivilegeEscalation.WriteJSON(j)
	}
	if s.ForbiddenSysctls != nil {
		more.More()
		j.WriteObjectField("forbiddenSysctls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ForbiddenSysctls {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("fsGroup")
	s.FsGroup.WriteJSON(j)
	if s.HostIPC.Set {
		more.More()
		j.WriteObjectField("hostIPC")
		s.HostIPC.WriteJSON(j)
	}
	if s.HostNetwork.Set {
		more.More()
		j.WriteObjectField("hostNetwork")
		s.HostNetwork.WriteJSON(j)
	}
	if s.HostPID.Set {
		more.More()
		j.WriteObjectField("hostPID")
		s.HostPID.WriteJSON(j)
	}
	if s.HostPorts != nil {
		more.More()
		j.WriteObjectField("hostPorts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.HostPorts {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Privileged.Set {
		more.More()
		j.WriteObjectField("privileged")
		s.Privileged.WriteJSON(j)
	}
	if s.ReadOnlyRootFilesystem.Set {
		more.More()
		j.WriteObjectField("readOnlyRootFilesystem")
		s.ReadOnlyRootFilesystem.WriteJSON(j)
	}
	if s.RequiredDropCapabilities != nil {
		more.More()
		j.WriteObjectField("requiredDropCapabilities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RequiredDropCapabilities {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RunAsGroup.Set {
		more.More()
		j.WriteObjectField("runAsGroup")
		s.RunAsGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("runAsUser")
	s.RunAsUser.WriteJSON(j)
	if s.RuntimeClass.Set {
		more.More()
		j.WriteObjectField("runtimeClass")
		s.RuntimeClass.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("seLinux")
	s.SeLinux.WriteJSON(j)
	more.More()
	j.WriteObjectField("supplementalGroups")
	s.SupplementalGroups.WriteJSON(j)
	if s.Volumes != nil {
		more.More()
		j.WriteObjectField("volumes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Volumes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicySpec from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1PodSecurityPolicySpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "allowPrivilegeEscalation":
			s.AllowPrivilegeEscalation.Reset()
			if err := s.AllowPrivilegeEscalation.ReadJSON(i); err != nil {
				return err
			}
		case "allowedCSIDrivers":
			s.AllowedCSIDrivers = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIPolicyV1beta1AllowedCSIDriver
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.AllowedCSIDrivers = append(s.AllowedCSIDrivers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "allowedCapabilities":
			s.AllowedCapabilities = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AllowedCapabilities = append(s.AllowedCapabilities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "allowedFlexVolumes":
			s.AllowedFlexVolumes = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIPolicyV1beta1AllowedFlexVolume
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.AllowedFlexVolumes = append(s.AllowedFlexVolumes, elem)
				return nil
			}); err != nil {
				return err
			}
		case "allowedHostPaths":
			s.AllowedHostPaths = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIPolicyV1beta1AllowedHostPath
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.AllowedHostPaths = append(s.AllowedHostPaths, elem)
				return nil
			}); err != nil {
				return err
			}
		case "allowedProcMountTypes":
			s.AllowedProcMountTypes = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AllowedProcMountTypes = append(s.AllowedProcMountTypes, elem)
				return nil
			}); err != nil {
				return err
			}
		case "allowedUnsafeSysctls":
			s.AllowedUnsafeSysctls = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AllowedUnsafeSysctls = append(s.AllowedUnsafeSysctls, elem)
				return nil
			}); err != nil {
				return err
			}
		case "defaultAddCapabilities":
			s.DefaultAddCapabilities = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.DefaultAddCapabilities = append(s.DefaultAddCapabilities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "defaultAllowPrivilegeEscalation":
			s.DefaultAllowPrivilegeEscalation.Reset()
			if err := s.DefaultAllowPrivilegeEscalation.ReadJSON(i); err != nil {
				return err
			}
		case "forbiddenSysctls":
			s.ForbiddenSysctls = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ForbiddenSysctls = append(s.ForbiddenSysctls, elem)
				return nil
			}); err != nil {
				return err
			}
		case "fsGroup":
			if err := s.FsGroup.ReadJSON(i); err != nil {
				return err
			}
		case "hostIPC":
			s.HostIPC.Reset()
			if err := s.HostIPC.ReadJSON(i); err != nil {
				return err
			}
		case "hostNetwork":
			s.HostNetwork.Reset()
			if err := s.HostNetwork.ReadJSON(i); err != nil {
				return err
			}
		case "hostPID":
			s.HostPID.Reset()
			if err := s.HostPID.ReadJSON(i); err != nil {
				return err
			}
		case "hostPorts":
			s.HostPorts = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIPolicyV1beta1HostPortRange
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.HostPorts = append(s.HostPorts, elem)
				return nil
			}); err != nil {
				return err
			}
		case "privileged":
			s.Privileged.Reset()
			if err := s.Privileged.ReadJSON(i); err != nil {
				return err
			}
		case "readOnlyRootFilesystem":
			s.ReadOnlyRootFilesystem.Reset()
			if err := s.ReadOnlyRootFilesystem.ReadJSON(i); err != nil {
				return err
			}
		case "requiredDropCapabilities":
			s.RequiredDropCapabilities = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.RequiredDropCapabilities = append(s.RequiredDropCapabilities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "runAsGroup":
			s.RunAsGroup.Reset()
			if err := s.RunAsGroup.ReadJSON(i); err != nil {
				return err
			}
		case "runAsUser":
			if err := s.RunAsUser.ReadJSON(i); err != nil {
				return err
			}
		case "runtimeClass":
			s.RuntimeClass.Reset()
			if err := s.RuntimeClass.ReadJSON(i); err != nil {
				return err
			}
		case "seLinux":
			if err := s.SeLinux.ReadJSON(i); err != nil {
				return err
			}
		case "supplementalGroups":
			if err := s.SupplementalGroups.ReadJSON(i); err != nil {
				return err
			}
		case "volumes":
			s.Volumes = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Volumes = append(s.Volumes, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("rule")
	j.WriteString(s.Rule)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "ranges":
			s.Ranges = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIPolicyV1beta1IDRange
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ranges = append(s.Ranges, elem)
				return nil
			}); err != nil {
				return err
			}
		case "rule":
			v, err := i.Str()
			s.Rule = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("rule")
	j.WriteString(s.Rule)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "ranges":
			s.Ranges = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIPolicyV1beta1IDRange
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ranges = append(s.Ranges, elem)
				return nil
			}); err != nil {
				return err
			}
		case "rule":
			v, err := i.Str()
			s.Rule = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("allowedRuntimeClassNames")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.AllowedRuntimeClassNames {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.DefaultRuntimeClassName.Set {
		more.More()
		j.WriteObjectField("defaultRuntimeClassName")
		s.DefaultRuntimeClassName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "allowedRuntimeClassNames":
			s.AllowedRuntimeClassNames = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AllowedRuntimeClassNames = append(s.AllowedRuntimeClassNames, elem)
				return nil
			}); err != nil {
				return err
			}
		case "defaultRuntimeClassName":
			s.DefaultRuntimeClassName.Reset()
			if err := s.DefaultRuntimeClassName.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("rule")
	j.WriteString(s.Rule)
	if s.SeLinuxOptions.Set {
		more.More()
		j.WriteObjectField("seLinuxOptions")
		s.SeLinuxOptions.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1SELinuxStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1SELinuxStrategyOptions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "rule":
			v, err := i.Str()
			s.Rule = string(v)
			if err != nil {
				return err
			}
		case "seLinuxOptions":
			s.SeLinuxOptions.Reset()
			if err := s.SeLinuxOptions.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Rule.Set {
		more.More()
		j.WriteObjectField("rule")
		s.Rule.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "ranges":
			s.Ranges = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIPolicyV1beta1IDRange
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Ranges = append(s.Ranges, elem)
				return nil
			}); err != nil {
				return err
			}
		case "rule":
			s.Rule.Reset()
			if err := s.Rule.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1AggregationRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ClusterRoleSelectors != nil {
		more.More()
		j.WriteObjectField("clusterRoleSelectors")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ClusterRoleSelectors {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1AggregationRule from json stream.
func (s *IoK8sAPIRbacV1AggregationRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1AggregationRule to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "clusterRoleSelectors":
			s.ClusterRoleSelectors = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1LabelSelector
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ClusterRoleSelectors = append(s.ClusterRoleSelectors, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRole) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AggregationRule.Set {
		more.More()
		j.WriteObjectField("aggregationRule")
		s.AggregationRule.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRole from json stream.
func (s *IoK8sAPIRbacV1ClusterRole) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1ClusterRole to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "aggregationRule":
			s.AggregationRule.Reset()
			if err := s.AggregationRule.ReadJSON(i); err != nil {
				return err
			}
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "rules":
			s.Rules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIRbacV1PolicyRule
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Rules = append(s.Rules, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleBinding) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("roleRef")
	s.RoleRef.WriteJSON(j)
	if s.Subjects != nil {
		more.More()
		j.WriteObjectField("subjects")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Subjects {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleBinding from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1ClusterRoleBinding to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "roleRef":
			if err := s.RoleRef.ReadJSON(i); err != nil {
				return err
			}
		case "subjects":
			s.Subjects = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIRbacV1Subject
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Subjects = append(s.Subjects, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleBindingList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleBindingList from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1ClusterRoleBindingList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIRbacV1ClusterRoleBinding
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleList from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1ClusterRoleList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIRbacV1ClusterRole
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1PolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroups != nil {
		more.More()
		j.WriteObjectField("apiGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiGroups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NonResourceURLs != nil {
		more.More()
		j.WriteObjectField("nonResourceURLs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceURLs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceNames != nil {
		more.More()
		j.WriteObjectField("resourceNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Resources != nil {
		more.More()
		j.WriteObjectField("resources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Resources {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1PolicyRule from json stream.
func (s *IoK8sAPIRbacV1PolicyRule) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1PolicyRule to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiGroups":
			s.ApiGroups = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ApiGroups = append(s.ApiGroups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "nonResourceURLs":
			s.NonResourceURLs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.NonResourceURLs = append(s.NonResourceURLs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "resourceNames":
			s.ResourceNames = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ResourceNames = append(s.ResourceNames, elem)
				return nil
			}); err != nil {
				return err
			}
		case "resources":
			s.Resources = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Resources = append(s.Resources, elem)
				return nil
			}); err != nil {
				return err
			}
		case "verbs":
			s.Verbs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Verbs = append(s.Verbs, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1Role) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1Role from json stream.
func (s *IoK8sAPIRbacV1Role) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1Role to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "rules":
			s.Rules = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIRbacV1PolicyRule
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Rules = append(s.Rules, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleBinding) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("roleRef")
	s.RoleRef.WriteJSON(j)
	if s.Subjects != nil {
		more.More()
		j.WriteObjectField("subjects")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Subjects {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1RoleBinding from json stream.
func (s *IoK8sAPIRbacV1RoleBinding) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1RoleBinding to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "roleRef":
			if err := s.RoleRef.ReadJSON(i); err != nil {
				return err
			}
		case "subjects":
			s.Subjects = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIRbacV1Subject
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Subjects = append(s.Subjects, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleBindingList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1RoleBindingList from json stream.
func (s *IoK8sAPIRbacV1RoleBindingList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1RoleBindingList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIRbacV1RoleBinding
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1RoleList from json stream.
func (s *IoK8sAPIRbacV1RoleList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1RoleList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIRbacV1Role
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleRef) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiGroup")
	j.WriteString(s.ApiGroup)
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1RoleRef from json stream.
func (s *IoK8sAPIRbacV1RoleRef) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1RoleRef to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiGroup":
			v, err := i.Str()
			s.ApiGroup = string(v)
			if err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroup.Set {
		more.More()
		j.WriteObjectField("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIRbacV1Subject from json stream.
func (s *IoK8sAPIRbacV1Subject) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIRbacV1Subject to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiGroup":
			s.ApiGroup.Reset()
			if err := s.ApiGroup.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPISchedulingV1PriorityClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.GlobalDefault.Set {
		more.More()
		j.WriteObjectField("globalDefault")
		s.GlobalDefault.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.PreemptionPolicy.Set {
		more.More()
		j.WriteObjectField("preemptionPolicy")
		s.PreemptionPolicy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("value")
	j.WriteInt32(s.Value)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPISchedulingV1PriorityClass from json stream.
func (s *IoK8sAPISchedulingV1PriorityClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPISchedulingV1PriorityClass to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				return err
			}
		case "globalDefault":
			s.GlobalDefault.Reset()
			if err := s.GlobalDefault.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "preemptionPolicy":
			s.PreemptionPolicy.Reset()
			if err := s.PreemptionPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "value":
			v, err := i.Int32()
			s.Value = int32(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPISchedulingV1PriorityClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPISchedulingV1PriorityClassList from json stream.
func (s *IoK8sAPISchedulingV1PriorityClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPISchedulingV1PriorityClassList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPISchedulingV1PriorityClass
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriver from json stream.
func (s *IoK8sAPIStorageV1CSIDriver) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSIDriver to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriverList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriverList from json stream.
func (s *IoK8sAPIStorageV1CSIDriverList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSIDriverList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIStorageV1CSIDriver
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriverSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AttachRequired.Set {
		more.More()
		j.WriteObjectField("attachRequired")
		s.AttachRequired.WriteJSON(j)
	}
	if s.FsGroupPolicy.Set {
		more.More()
		j.WriteObjectField("fsGroupPolicy")
		s.FsGroupPolicy.WriteJSON(j)
	}
	if s.PodInfoOnMount.Set {
		more.More()
		j.WriteObjectField("podInfoOnMount")
		s.PodInfoOnMount.WriteJSON(j)
	}
	if s.RequiresRepublish.Set {
		more.More()
		j.WriteObjectField("requiresRepublish")
		s.RequiresRepublish.WriteJSON(j)
	}
	if s.StorageCapacity.Set {
		more.More()
		j.WriteObjectField("storageCapacity")
		s.StorageCapacity.WriteJSON(j)
	}
	if s.TokenRequests != nil {
		more.More()
		j.WriteObjectField("tokenRequests")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TokenRequests {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumeLifecycleModes != nil {
		more.More()
		j.WriteObjectField("volumeLifecycleModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeLifecycleModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriverSpec from json stream.
func (s *IoK8sAPIStorageV1CSIDriverSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSIDriverSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "attachRequired":
			s.AttachRequired.Reset()
			if err := s.AttachRequired.ReadJSON(i); err != nil {
				return err
			}
		case "fsGroupPolicy":
			s.FsGroupPolicy.Reset()
			if err := s.FsGroupPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "podInfoOnMount":
			s.PodInfoOnMount.Reset()
			if err := s.PodInfoOnMount.ReadJSON(i); err != nil {
				return err
			}
		case "requiresRepublish":
			s.RequiresRepublish.Reset()
			if err := s.RequiresRepublish.ReadJSON(i); err != nil {
				return err
			}
		case "storageCapacity":
			s.StorageCapacity.Reset()
			if err := s.StorageCapacity.ReadJSON(i); err != nil {
				return err
			}
		case "tokenRequests":
			s.TokenRequests = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIStorageV1TokenRequest
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.TokenRequests = append(s.TokenRequests, elem)
				return nil
			}); err != nil {
				return err
			}
		case "volumeLifecycleModes":
			s.VolumeLifecycleModes = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.VolumeLifecycleModes = append(s.VolumeLifecycleModes, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINode) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSINode from json stream.
func (s *IoK8sAPIStorageV1CSINode) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSINode to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Allocatable.Set {
		more.More()
		j.WriteObjectField("allocatable")
		s.Allocatable.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("nodeID")
	j.WriteString(s.NodeID)
	if s.TopologyKeys != nil {
		more.More()
		j.WriteObjectField("topologyKeys")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TopologyKeys {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeDriver from json stream.
func (s *IoK8sAPIStorageV1CSINodeDriver) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSINodeDriver to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "allocatable":
			s.Allocatable.Reset()
			if err := s.Allocatable.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "nodeID":
			v, err := i.Str()
			s.NodeID = string(v)
			if err != nil {
				return err
			}
		case "topologyKeys":
			s.TopologyKeys = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.TopologyKeys = append(s.TopologyKeys, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeList from json stream.
func (s *IoK8sAPIStorageV1CSINodeList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSINodeList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIStorageV1CSINode
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("drivers")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Drivers {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeSpec from json stream.
func (s *IoK8sAPIStorageV1CSINodeSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1CSINodeSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "drivers":
			s.Drivers = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIStorageV1CSINodeDriver
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Drivers = append(s.Drivers, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1StorageClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowVolumeExpansion.Set {
		more.More()
		j.WriteObjectField("allowVolumeExpansion")
		s.AllowVolumeExpansion.WriteJSON(j)
	}
	if s.AllowedTopologies != nil {
		more.More()
		j.WriteObjectField("allowedTopologies")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedTopologies {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.MountOptions != nil {
		more.More()
		j.WriteObjectField("mountOptions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MountOptions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Parameters != nil {
		more.More()
		j.WriteObjectField("parameters")
		s.Parameters.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("provisioner")
	j.WriteString(s.Provisioner)
	if s.ReclaimPolicy.Set {
		more.More()
		j.WriteObjectField("reclaimPolicy")
		s.ReclaimPolicy.WriteJSON(j)
	}
	if s.VolumeBindingMode.Set {
		more.More()
		j.WriteObjectField("volumeBindingMode")
		s.VolumeBindingMode.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1StorageClass from json stream.
func (s *IoK8sAPIStorageV1StorageClass) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1StorageClass to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "allowVolumeExpansion":
			s.AllowVolumeExpansion.Reset()
			if err := s.AllowVolumeExpansion.ReadJSON(i); err != nil {
				return err
			}
		case "allowedTopologies":
			s.AllowedTopologies = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPICoreV1TopologySelectorTerm
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.AllowedTopologies = append(s.AllowedTopologies, elem)
				return nil
			}); err != nil {
				return err
			}
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "mountOptions":
			s.MountOptions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.MountOptions = append(s.MountOptions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "parameters":
			s.Parameters = nil
			var elem IoK8sAPIStorageV1StorageClassParameters
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Parameters = &elem
		case "provisioner":
			v, err := i.Str()
			s.Provisioner = string(v)
			if err != nil {
				return err
			}
		case "reclaimPolicy":
			s.ReclaimPolicy.Reset()
			if err := s.ReclaimPolicy.ReadJSON(i); err != nil {
				return err
			}
		case "volumeBindingMode":
			s.VolumeBindingMode.Reset()
			if err := s.VolumeBindingMode.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1StorageClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1StorageClassList from json stream.
func (s *IoK8sAPIStorageV1StorageClassList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1StorageClassList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIStorageV1StorageClass
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1StorageClassParameters) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1StorageClassParameters from json stream.
func (s *IoK8sAPIStorageV1StorageClassParameters) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1StorageClassParameters to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1TokenRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("audience")
	j.WriteString(s.Audience)
	if s.ExpirationSeconds.Set {
		more.More()
		j.WriteObjectField("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1TokenRequest from json stream.
func (s *IoK8sAPIStorageV1TokenRequest) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1TokenRequest to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "audience":
			v, err := i.Str()
			s.Audience = string(v)
			if err != nil {
				return err
			}
		case "expirationSeconds":
			s.ExpirationSeconds.Reset()
			if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachment from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachment) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachment to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentList from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachmentList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIStorageV1VolumeAttachment
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.InlineVolumeSpec.Set {
		more.More()
		j.WriteObjectField("inlineVolumeSpec")
		s.InlineVolumeSpec.WriteJSON(j)
	}
	if s.PersistentVolumeName.Set {
		more.More()
		j.WriteObjectField("persistentVolumeName")
		s.PersistentVolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentSource from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentSource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachmentSource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "inlineVolumeSpec":
			s.InlineVolumeSpec.Reset()
			if err := s.InlineVolumeSpec.ReadJSON(i); err != nil {
				return err
			}
		case "persistentVolumeName":
			s.PersistentVolumeName.Reset()
			if err := s.PersistentVolumeName.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("attacher")
	j.WriteString(s.Attacher)
	more.More()
	j.WriteObjectField("nodeName")
	j.WriteString(s.NodeName)
	more.More()
	j.WriteObjectField("source")
	s.Source.WriteJSON(j)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentSpec from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachmentSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "attacher":
			v, err := i.Str()
			s.Attacher = string(v)
			if err != nil {
				return err
			}
		case "nodeName":
			v, err := i.Str()
			s.NodeName = string(v)
			if err != nil {
				return err
			}
		case "source":
			if err := s.Source.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AttachError.Set {
		more.More()
		j.WriteObjectField("attachError")
		s.AttachError.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("attached")
	j.WriteBool(s.Attached)
	if s.AttachmentMetadata != nil {
		more.More()
		j.WriteObjectField("attachmentMetadata")
		s.AttachmentMetadata.WriteJSON(j)
	}
	if s.DetachError.Set {
		more.More()
		j.WriteObjectField("detachError")
		s.DetachError.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentStatus from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachmentStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "attachError":
			s.AttachError.Reset()
			if err := s.AttachError.ReadJSON(i); err != nil {
				return err
			}
		case "attached":
			v, err := i.Bool()
			s.Attached = bool(v)
			if err != nil {
				return err
			}
		case "attachmentMetadata":
			s.AttachmentMetadata = nil
			var elem IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.AttachmentMetadata = &elem
		case "detachError":
			s.DetachError.Reset()
			if err := s.DetachError.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeError) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Time.Set {
		more.More()
		j.WriteObjectField("time")
		s.Time.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeError from json stream.
func (s *IoK8sAPIStorageV1VolumeError) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeError to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "time":
			s.Time.Reset()
			if err := s.Time.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeNodeResources) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Count.Set {
		more.More()
		j.WriteObjectField("count")
		s.Count.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1VolumeNodeResources from json stream.
func (s *IoK8sAPIStorageV1VolumeNodeResources) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1VolumeNodeResources to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "count":
			s.Count.Reset()
			if err := s.Count.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Capacity.Set {
		more.More()
		j.WriteObjectField("capacity")
		s.Capacity.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.MaximumVolumeSize.Set {
		more.More()
		j.WriteObjectField("maximumVolumeSize")
		s.MaximumVolumeSize.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.NodeTopology.Set {
		more.More()
		j.WriteObjectField("nodeTopology")
		s.NodeTopology.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("storageClassName")
	j.WriteString(s.StorageClassName)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1alpha1CSIStorageCapacity from json stream.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1alpha1CSIStorageCapacity to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "capacity":
			s.Capacity.Reset()
			if err := s.Capacity.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "maximumVolumeSize":
			s.MaximumVolumeSize.Reset()
			if err := s.MaximumVolumeSize.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "nodeTopology":
			s.NodeTopology.Reset()
			if err := s.NodeTopology.ReadJSON(i); err != nil {
				return err
			}
		case "storageClassName":
			v, err := i.Str()
			s.StorageClassName = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacityList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1alpha1CSIStorageCapacityList from json stream.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1alpha1CSIStorageCapacityList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIStorageV1alpha1CSIStorageCapacity
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Capacity.Set {
		more.More()
		j.WriteObjectField("capacity")
		s.Capacity.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.MaximumVolumeSize.Set {
		more.More()
		j.WriteObjectField("maximumVolumeSize")
		s.MaximumVolumeSize.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.NodeTopology.Set {
		more.More()
		j.WriteObjectField("nodeTopology")
		s.NodeTopology.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("storageClassName")
	j.WriteString(s.StorageClassName)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1beta1CSIStorageCapacity from json stream.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1beta1CSIStorageCapacity to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "capacity":
			s.Capacity.Reset()
			if err := s.Capacity.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "maximumVolumeSize":
			s.MaximumVolumeSize.Reset()
			if err := s.MaximumVolumeSize.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "nodeTopology":
			s.NodeTopology.Reset()
			if err := s.NodeTopology.ReadJSON(i); err != nil {
				return err
			}
		case "storageClassName":
			v, err := i.Str()
			s.StorageClassName = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacityList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sAPIStorageV1beta1CSIStorageCapacityList from json stream.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sAPIStorageV1beta1CSIStorageCapacityList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sAPIStorageV1beta1CSIStorageCapacity
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.Format.Set {
		more.More()
		j.WriteObjectField("format")
		s.Format.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("jsonPath")
	j.WriteString(s.JsonPath)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Priority.Set {
		more.More()
		j.WriteObjectField("priority")
		s.Priority.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				return err
			}
		case "format":
			s.Format.Reset()
			if err := s.Format.ReadJSON(i); err != nil {
				return err
			}
		case "jsonPath":
			v, err := i.Str()
			s.JsonPath = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "priority":
			s.Priority.Reset()
			if err := s.Priority.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("strategy")
	j.WriteString(s.Strategy)
	if s.Webhook.Set {
		more.More()
		j.WriteObjectField("webhook")
		s.Webhook.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "strategy":
			v, err := i.Str()
			s.Strategy = string(v)
			if err != nil {
				return err
			}
		case "webhook":
			s.Webhook.Reset()
			if err := s.Webhook.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Categories != nil {
		more.More()
		j.WriteObjectField("categories")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Categories {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	if s.ListKind.Set {
		more.More()
		j.WriteObjectField("listKind")
		s.ListKind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("plural")
	j.WriteString(s.Plural)
	if s.ShortNames != nil {
		more.More()
		j.WriteObjectField("shortNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ShortNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Singular.Set {
		more.More()
		j.WriteObjectField("singular")
		s.Singular.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "categories":
			s.Categories = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Categories = append(s.Categories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "listKind":
			s.ListKind.Reset()
			if err := s.ListKind.ReadJSON(i); err != nil {
				return err
			}
		case "plural":
			v, err := i.Str()
			s.Plural = string(v)
			if err != nil {
				return err
			}
		case "shortNames":
			s.ShortNames = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ShortNames = append(s.ShortNames, elem)
				return nil
			}); err != nil {
				return err
			}
		case "singular":
			s.Singular.Reset()
			if err := s.Singular.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conversion.Set {
		more.More()
		j.WriteObjectField("conversion")
		s.Conversion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("group")
	j.WriteString(s.Group)
	more.More()
	j.WriteObjectField("names")
	s.Names.WriteJSON(j)
	if s.PreserveUnknownFields.Set {
		more.More()
		j.WriteObjectField("preserveUnknownFields")
		s.PreserveUnknownFields.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scope")
	j.WriteString(s.Scope)
	more.More()
	j.WriteObjectField("versions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Versions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conversion":
			s.Conversion.Reset()
			if err := s.Conversion.ReadJSON(i); err != nil {
				return err
			}
		case "group":
			v, err := i.Str()
			s.Group = string(v)
			if err != nil {
				return err
			}
		case "names":
			if err := s.Names.ReadJSON(i); err != nil {
				return err
			}
		case "preserveUnknownFields":
			s.PreserveUnknownFields.Reset()
			if err := s.PreserveUnknownFields.ReadJSON(i); err != nil {
				return err
			}
		case "scope":
			v, err := i.Str()
			s.Scope = string(v)
			if err != nil {
				return err
			}
		case "versions":
			s.Versions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Versions = append(s.Versions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AcceptedNames.Set {
		more.More()
		j.WriteObjectField("acceptedNames")
		s.AcceptedNames.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.StoredVersions != nil {
		more.More()
		j.WriteObjectField("storedVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.StoredVersions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "acceptedNames":
			s.AcceptedNames.Reset()
			if err := s.AcceptedNames.ReadJSON(i); err != nil {
				return err
			}
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "storedVersions":
			s.StoredVersions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.StoredVersions = append(s.StoredVersions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AdditionalPrinterColumns != nil {
		more.More()
		j.WriteObjectField("additionalPrinterColumns")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AdditionalPrinterColumns {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Deprecated.Set {
		more.More()
		j.WriteObjectField("deprecated")
		s.Deprecated.WriteJSON(j)
	}
	if s.DeprecationWarning.Set {
		more.More()
		j.WriteObjectField("deprecationWarning")
		s.DeprecationWarning.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Schema.Set {
		more.More()
		j.WriteObjectField("schema")
		s.Schema.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("served")
	j.WriteBool(s.Served)
	more.More()
	j.WriteObjectField("storage")
	j.WriteBool(s.Storage)
	if s.Subresources.Set {
		more.More()
		j.WriteObjectField("subresources")
		s.Subresources.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "additionalPrinterColumns":
			s.AdditionalPrinterColumns = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.AdditionalPrinterColumns = append(s.AdditionalPrinterColumns, elem)
				return nil
			}); err != nil {
				return err
			}
		case "deprecated":
			s.Deprecated.Reset()
			if err := s.Deprecated.ReadJSON(i); err != nil {
				return err
			}
		case "deprecationWarning":
			s.DeprecationWarning.Reset()
			if err := s.DeprecationWarning.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "schema":
			s.Schema.Reset()
			if err := s.Schema.ReadJSON(i); err != nil {
				return err
			}
		case "served":
			v, err := i.Bool()
			s.Served = bool(v)
			if err != nil {
				return err
			}
		case "storage":
			v, err := i.Bool()
			s.Storage = bool(v)
			if err != nil {
				return err
			}
		case "subresources":
			s.Subresources.Reset()
			if err := s.Subresources.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LabelSelectorPath.Set {
		more.More()
		j.WriteObjectField("labelSelectorPath")
		s.LabelSelectorPath.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("specReplicasPath")
	j.WriteString(s.SpecReplicasPath)
	more.More()
	j.WriteObjectField("statusReplicasPath")
	j.WriteString(s.StatusReplicasPath)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "labelSelectorPath":
			s.LabelSelectorPath.Reset()
			if err := s.LabelSelectorPath.ReadJSON(i); err != nil {
				return err
			}
		case "specReplicasPath":
			v, err := i.Str()
			s.SpecReplicasPath = string(v)
			if err != nil {
				return err
			}
		case "statusReplicasPath":
			v, err := i.Str()
			s.StatusReplicasPath = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Scale.Set {
		more.More()
		j.WriteObjectField("scale")
		s.Scale.WriteJSON(j)
	}
	if s.Status != nil {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "scale":
			s.Scale.Reset()
			if err := s.Scale.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status = nil
			var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Status = &elem
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.OpenAPIV3Schema.Set {
		more.More()
		j.WriteObjectField("openAPIV3Schema")
		s.OpenAPIV3Schema.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "openAPIV3Schema":
			s.OpenAPIV3Schema.Reset()
			if err := s.OpenAPIV3Schema.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ref.Set {
		more.More()
		j.WriteObjectField("$ref")
		s.Ref.WriteJSON(j)
	}
	if s.Schema.Set {
		more.More()
		j.WriteObjectField("$schema")
		s.Schema.WriteJSON(j)
	}
	if s.AdditionalItems != nil {
		more.More()
		j.WriteObjectField("additionalItems")
		s.AdditionalItems.WriteJSON(j)
	}
	if s.AdditionalProperties != nil {
		more.More()
		j.WriteObjectField("additionalProperties")
		s.AdditionalProperties.WriteJSON(j)
	}
	if s.AllOf != nil {
		more.More()
		j.WriteObjectField("allOf")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllOf {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AnyOf != nil {
		more.More()
		j.WriteObjectField("anyOf")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AnyOf {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Default != nil {
		more.More()
		j.WriteObjectField("default")
		s.Default.WriteJSON(j)
	}
	if s.Definitions != nil {
		more.More()
		j.WriteObjectField("definitions")
		s.Definitions.WriteJSON(j)
	}
	if s.Dependencies != nil {
		more.More()
		j.WriteObjectField("dependencies")
		s.Dependencies.WriteJSON(j)
	}
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.Enum != nil {
		more.More()
		j.WriteObjectField("enum")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Enum {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Example != nil {
		more.More()
		j.WriteObjectField("example")
		s.Example.WriteJSON(j)
	}
	if s.ExclusiveMaximum.Set {
		more.More()
		j.WriteObjectField("exclusiveMaximum")
		s.ExclusiveMaximum.WriteJSON(j)
	}
	if s.ExclusiveMinimum.Set {
		more.More()
		j.WriteObjectField("exclusiveMinimum")
		s.ExclusiveMinimum.WriteJSON(j)
	}
	if s.ExternalDocs.Set {
		more.More()
		j.WriteObjectField("externalDocs")
		s.ExternalDocs.WriteJSON(j)
	}
	if s.Format.Set {
		more.More()
		j.WriteObjectField("format")
		s.Format.WriteJSON(j)
	}
	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		s.Items.WriteJSON(j)
	}
	if s.MaxItems.Set {
		more.More()
		j.WriteObjectField("maxItems")
		s.MaxItems.WriteJSON(j)
	}
	if s.MaxLength.Set {
		more.More()
		j.WriteObjectField("maxLength")
		s.MaxLength.WriteJSON(j)
	}
	if s.MaxProperties.Set {
		more.More()
		j.WriteObjectField("maxProperties")
		s.MaxProperties.WriteJSON(j)
	}
	if s.Maximum.Set {
		more.More()
		j.WriteObjectField("maximum")
		s.Maximum.WriteJSON(j)
	}
	if s.MinItems.Set {
		more.More()
		j.WriteObjectField("minItems")
		s.MinItems.WriteJSON(j)
	}
	if s.MinLength.Set {
		more.More()
		j.WriteObjectField("minLength")
		s.MinLength.WriteJSON(j)
	}
	if s.MinProperties.Set {
		more.More()
		j.WriteObjectField("minProperties")
		s.MinProperties.WriteJSON(j)
	}
	if s.Minimum.Set {
		more.More()
		j.WriteObjectField("minimum")
		s.Minimum.WriteJSON(j)
	}
	if s.MultipleOf.Set {
		more.More()
		j.WriteObjectField("multipleOf")
		s.MultipleOf.WriteJSON(j)
	}
	if s.Not != nil {
		more.More()
		j.WriteObjectField("not")
		s.Not.WriteJSON(j)
	}
	if s.Nullable.Set {
		more.More()
		j.WriteObjectField("nullable")
		s.Nullable.WriteJSON(j)
	}
	if s.OneOf != nil {
		more.More()
		j.WriteObjectField("oneOf")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.OneOf {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Pattern.Set {
		more.More()
		j.WriteObjectField("pattern")
		s.Pattern.WriteJSON(j)
	}
	if s.PatternProperties != nil {
		more.More()
		j.WriteObjectField("patternProperties")
		s.PatternProperties.WriteJSON(j)
	}
	if s.Properties != nil {
		more.More()
		j.WriteObjectField("properties")
		s.Properties.WriteJSON(j)
	}
	if s.Required != nil {
		more.More()
		j.WriteObjectField("required")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Required {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	if s.UniqueItems.Set {
		more.More()
		j.WriteObjectField("uniqueItems")
		s.UniqueItems.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusEmbeddedMinusResource.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-embedded-resource")
		s.XMinusKubernetesMinusEmbeddedMinusResource.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusIntMinusOrMinusString.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-int-or-string")
		s.XMinusKubernetesMinusIntMinusOrMinusString.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusListMinusMapMinusKeys != nil {
		more.More()
		j.WriteObjectField("x-kubernetes-list-map-keys")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.XMinusKubernetesMinusListMinusMapMinusKeys {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.XMinusKubernetesMinusListMinusType.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-list-type")
		s.XMinusKubernetesMinusListMinusType.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusMapMinusType.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-map-type")
		s.XMinusKubernetesMinusMapMinusType.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-preserve-unknown-fields")
		s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "$ref":
			s.Ref.Reset()
			if err := s.Ref.ReadJSON(i); err != nil {
				return err
			}
		case "$schema":
			s.Schema.Reset()
			if err := s.Schema.ReadJSON(i); err != nil {
				return err
			}
		case "additionalItems":
			s.AdditionalItems = nil
			var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.AdditionalItems = &elem
		case "additionalProperties":
			s.AdditionalProperties = nil
			var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.AdditionalProperties = &elem
		case "allOf":
			s.AllOf = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.AllOf = append(s.AllOf, elem)
				return nil
			}); err != nil {
				return err
			}
		case "anyOf":
			s.AnyOf = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.AnyOf = append(s.AnyOf, elem)
				return nil
			}); err != nil {
				return err
			}
		case "default":
			s.Default = nil
			var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Default = &elem
		case "definitions":
			s.Definitions = nil
			var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Definitions = &elem
		case "dependencies":
			s.Dependencies = nil
			var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Dependencies = &elem
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				return err
			}
		case "enum":
			s.Enum = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Enum = append(s.Enum, elem)
				return nil
			}); err != nil {
				return err
			}
		case "example":
			s.Example = nil
			var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Example = &elem
		case "exclusiveMaximum":
			s.ExclusiveMaximum.Reset()
			if err := s.ExclusiveMaximum.ReadJSON(i); err != nil {
				return err
			}
		case "exclusiveMinimum":
			s.ExclusiveMinimum.Reset()
			if err := s.ExclusiveMinimum.ReadJSON(i); err != nil {
				return err
			}
		case "externalDocs":
			s.ExternalDocs.Reset()
			if err := s.ExternalDocs.ReadJSON(i); err != nil {
				return err
			}
		case "format":
			s.Format.Reset()
			if err := s.Format.ReadJSON(i); err != nil {
				return err
			}
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Items = &elem
		case "maxItems":
			s.MaxItems.Reset()
			if err := s.MaxItems.ReadJSON(i); err != nil {
				return err
			}
		case "maxLength":
			s.MaxLength.Reset()
			if err := s.MaxLength.ReadJSON(i); err != nil {
				return err
			}
		case "maxProperties":
			s.MaxProperties.Reset()
			if err := s.MaxProperties.ReadJSON(i); err != nil {
				return err
			}
		case "maximum":
			s.Maximum.Reset()
			if err := s.Maximum.ReadJSON(i); err != nil {
				return err
			}
		case "minItems":
			s.MinItems.Reset()
			if err := s.MinItems.ReadJSON(i); err != nil {
				return err
			}
		case "minLength":
			s.MinLength.Reset()
			if err := s.MinLength.ReadJSON(i); err != nil {
				return err
			}
		case "minProperties":
			s.MinProperties.Reset()
			if err := s.MinProperties.ReadJSON(i); err != nil {
				return err
			}
		case "minimum":
			s.Minimum.Reset()
			if err := s.Minimum.ReadJSON(i); err != nil {
				return err
			}
		case "multipleOf":
			s.MultipleOf.Reset()
			if err := s.MultipleOf.ReadJSON(i); err != nil {
				return err
			}
		case "not":
			s.Not = nil
			var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Not = &elem
		case "nullable":
			s.Nullable.Reset()
			if err := s.Nullable.ReadJSON(i); err != nil {
				return err
			}
		case "oneOf":
			s.OneOf = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.OneOf = append(s.OneOf, elem)
				return nil
			}); err != nil {
				return err
			}
		case "pattern":
			s.Pattern.Reset()
			if err := s.Pattern.ReadJSON(i); err != nil {
				return err
			}
		case "patternProperties":
			s.PatternProperties = nil
			var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.PatternProperties = &elem
		case "properties":
			s.Properties = nil
			var elem IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Properties = &elem
		case "required":
			s.Required = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Required = append(s.Required, elem)
				return nil
			}); err != nil {
				return err
			}
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				return err
			}
		case "uniqueItems":
			s.UniqueItems.Reset()
			if err := s.UniqueItems.ReadJSON(i); err != nil {
				return err
			}
		case "x-kubernetes-embedded-resource":
			s.XMinusKubernetesMinusEmbeddedMinusResource.Reset()
			if err := s.XMinusKubernetesMinusEmbeddedMinusResource.ReadJSON(i); err != nil {
				return err
			}
		case "x-kubernetes-int-or-string":
			s.XMinusKubernetesMinusIntMinusOrMinusString.Reset()
			if err := s.XMinusKubernetesMinusIntMinusOrMinusString.ReadJSON(i); err != nil {
				return err
			}
		case "x-kubernetes-list-map-keys":
			s.XMinusKubernetesMinusListMinusMapMinusKeys = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.XMinusKubernetesMinusListMinusMapMinusKeys = append(s.XMinusKubernetesMinusListMinusMapMinusKeys, elem)
				return nil
			}); err != nil {
				return err
			}
		case "x-kubernetes-list-type":
			s.XMinusKubernetesMinusListMinusType.Reset()
			if err := s.XMinusKubernetesMinusListMinusType.ReadJSON(i); err != nil {
				return err
			}
		case "x-kubernetes-map-type":
			s.XMinusKubernetesMinusMapMinusType.Reset()
			if err := s.XMinusKubernetesMinusMapMinusType.ReadJSON(i); err != nil {
				return err
			}
		case "x-kubernetes-preserve-unknown-fields":
			s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.Reset()
			if err := s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "namespace":
			v, err := i.Str()
			s.Namespace = string(v)
			if err != nil {
				return err
			}
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				return err
			}
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CaBundle != nil {
		more.More()
		j.WriteObjectField("caBundle")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CaBundle {
			_ = elem // Unsupported kind "primitive".
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "caBundle":
			s.CaBundle = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem byte
				if err := fmt.Errorf(`decoding of "byte" (primitive) is not implemented`); err != nil {
					return err
				}
				s.CaBundle = append(s.CaBundle, elem)
				return nil
			}); err != nil {
				return err
			}
		case "service":
			s.Service.Reset()
			if err := s.Service.ReadJSON(i); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ClientConfig.Set {
		more.More()
		j.WriteObjectField("clientConfig")
		s.ClientConfig.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("conversionReviewVersions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ConversionReviewVersions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "clientConfig":
			s.ClientConfig.Reset()
			if err := s.ClientConfig.ReadJSON(i); err != nil {
				return err
			}
		case "conversionReviewVersions":
			s.ConversionReviewVersions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ConversionReviewVersions = append(s.ConversionReviewVersions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

func (IoK8sApimachineryPkgAPIResourceQuantity) WriteJSON(j *json.Stream)    {}
func (IoK8sApimachineryPkgAPIResourceQuantity) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIGroup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.PreferredVersion.Set {
		more.More()
		j.WriteObjectField("preferredVersion")
		s.PreferredVersion.WriteJSON(j)
	}
	if s.ServerAddressByClientCIDRs != nil {
		more.More()
		j.WriteObjectField("serverAddressByClientCIDRs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ServerAddressByClientCIDRs {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("versions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Versions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIGroup from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1APIGroup to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "preferredVersion":
			s.PreferredVersion.Reset()
			if err := s.PreferredVersion.ReadJSON(i); err != nil {
				return err
			}
		case "serverAddressByClientCIDRs":
			s.ServerAddressByClientCIDRs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ServerAddressByClientCIDRs = append(s.ServerAddressByClientCIDRs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "versions":
			s.Versions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Versions = append(s.Versions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIGroupList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("groups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Groups {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIGroupList from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1APIGroupList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "groups":
			s.Groups = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1APIGroup
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Groups = append(s.Groups, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIResource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Categories != nil {
		more.More()
		j.WriteObjectField("categories")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Categories {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespaced")
	j.WriteBool(s.Namespaced)
	if s.ShortNames != nil {
		more.More()
		j.WriteObjectField("shortNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ShortNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("singularName")
	j.WriteString(s.SingularName)
	if s.StorageVersionHash.Set {
		more.More()
		j.WriteObjectField("storageVersionHash")
		s.StorageVersionHash.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Version.Set {
		more.More()
		j.WriteObjectField("version")
		s.Version.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIResource from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1APIResource to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "categories":
			s.Categories = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Categories = append(s.Categories, elem)
				return nil
			}); err != nil {
				return err
			}
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "namespaced":
			v, err := i.Bool()
			s.Namespaced = bool(v)
			if err != nil {
				return err
			}
		case "shortNames":
			s.ShortNames = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.ShortNames = append(s.ShortNames, elem)
				return nil
			}); err != nil {
				return err
			}
		case "singularName":
			v, err := i.Str()
			s.SingularName = string(v)
			if err != nil {
				return err
			}
		case "storageVersionHash":
			s.StorageVersionHash.Reset()
			if err := s.StorageVersionHash.ReadJSON(i); err != nil {
				return err
			}
		case "verbs":
			s.Verbs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Verbs = append(s.Verbs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIResourceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("groupVersion")
	j.WriteString(s.GroupVersion)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("resources")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Resources {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIResourceList from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1APIResourceList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "groupVersion":
			v, err := i.Str()
			s.GroupVersion = string(v)
			if err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "resources":
			s.Resources = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1APIResource
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Resources = append(s.Resources, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIVersions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("serverAddressByClientCIDRs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ServerAddressByClientCIDRs {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("versions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Versions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIVersions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1APIVersions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "serverAddressByClientCIDRs":
			s.ServerAddressByClientCIDRs = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ServerAddressByClientCIDRs = append(s.ServerAddressByClientCIDRs, elem)
				return nil
			}); err != nil {
				return err
			}
		case "versions":
			s.Versions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Versions = append(s.Versions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Condition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "alias".
	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("reason")
	j.WriteString(s.Reason)
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Condition from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1Condition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			if err := fmt.Errorf(`decoding of "IoK8sApimachineryPkgApisMetaV1Time" (alias) is not implemented`); err != nil {
				return err
			}
		case "message":
			v, err := i.Str()
			s.Message = string(v)
			if err != nil {
				return err
			}
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			v, err := i.Str()
			s.Reason = string(v)
			if err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1DeleteOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.DryRun != nil {
		more.More()
		j.WriteObjectField("dryRun")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.DryRun {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.GracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("gracePeriodSeconds")
		s.GracePeriodSeconds.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.OrphanDependents.Set {
		more.More()
		j.WriteObjectField("orphanDependents")
		s.OrphanDependents.WriteJSON(j)
	}
	if s.Preconditions.Set {
		more.More()
		j.WriteObjectField("preconditions")
		s.Preconditions.WriteJSON(j)
	}
	if s.PropagationPolicy.Set {
		more.More()
		j.WriteObjectField("propagationPolicy")
		s.PropagationPolicy.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1DeleteOptions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1DeleteOptions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1DeleteOptions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "dryRun":
			s.DryRun = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.DryRun = append(s.DryRun, elem)
				return nil
			}); err != nil {
				return err
			}
		case "gracePeriodSeconds":
			s.GracePeriodSeconds.Reset()
			if err := s.GracePeriodSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "orphanDependents":
			s.OrphanDependents.Reset()
			if err := s.OrphanDependents.ReadJSON(i); err != nil {
				return err
			}
		case "preconditions":
			s.Preconditions.Reset()
			if err := s.Preconditions.ReadJSON(i); err != nil {
				return err
			}
		case "propagationPolicy":
			s.PropagationPolicy.Reset()
			if err := s.PropagationPolicy.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1FieldsV1) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1FieldsV1 from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1FieldsV1) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1FieldsV1 to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("groupVersion")
	j.WriteString(s.GroupVersion)
	more.More()
	j.WriteObjectField("version")
	j.WriteString(s.Version)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "groupVersion":
			v, err := i.Str()
			s.GroupVersion = string(v)
			if err != nil {
				return err
			}
		case "version":
			v, err := i.Str()
			s.Version = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchExpressions != nil {
		more.More()
		j.WriteObjectField("matchExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.MatchLabels != nil {
		more.More()
		j.WriteObjectField("matchLabels")
		s.MatchLabels.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1LabelSelector from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelector) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1LabelSelector to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "matchExpressions":
			s.MatchExpressions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.MatchExpressions = append(s.MatchExpressions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "matchLabels":
			s.MatchLabels = nil
			var elem IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.MatchLabels = &elem
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	more.More()
	j.WriteObjectField("operator")
	j.WriteString(s.Operator)
	if s.Values != nil {
		more.More()
		j.WriteObjectField("values")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Values {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "key":
			v, err := i.Str()
			s.Key = string(v)
			if err != nil {
				return err
			}
		case "operator":
			v, err := i.Str()
			s.Operator = string(v)
			if err != nil {
				return err
			}
		case "values":
			s.Values = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Values = append(s.Values, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ListMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Continue.Set {
		more.More()
		j.WriteObjectField("continue")
		s.Continue.WriteJSON(j)
	}
	if s.RemainingItemCount.Set {
		more.More()
		j.WriteObjectField("remainingItemCount")
		s.RemainingItemCount.WriteJSON(j)
	}
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.SelfLink.Set {
		more.More()
		j.WriteObjectField("selfLink")
		s.SelfLink.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ListMeta from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ListMeta to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "continue":
			s.Continue.Reset()
			if err := s.Continue.ReadJSON(i); err != nil {
				return err
			}
		case "remainingItemCount":
			s.RemainingItemCount.Reset()
			if err := s.RemainingItemCount.ReadJSON(i); err != nil {
				return err
			}
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				return err
			}
		case "selfLink":
			s.SelfLink.Reset()
			if err := s.SelfLink.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.FieldsType.Set {
		more.More()
		j.WriteObjectField("fieldsType")
		s.FieldsType.WriteJSON(j)
	}
	if s.FieldsV1 != nil {
		more.More()
		j.WriteObjectField("fieldsV1")
		s.FieldsV1.WriteJSON(j)
	}
	if s.Manager.Set {
		more.More()
		j.WriteObjectField("manager")
		s.Manager.WriteJSON(j)
	}
	if s.Operation.Set {
		more.More()
		j.WriteObjectField("operation")
		s.Operation.WriteJSON(j)
	}
	if s.Subresource.Set {
		more.More()
		j.WriteObjectField("subresource")
		s.Subresource.WriteJSON(j)
	}
	if s.Time.Set {
		more.More()
		j.WriteObjectField("time")
		s.Time.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "fieldsType":
			s.FieldsType.Reset()
			if err := s.FieldsType.ReadJSON(i); err != nil {
				return err
			}
		case "fieldsV1":
			s.FieldsV1 = nil
			var elem IoK8sApimachineryPkgApisMetaV1FieldsV1
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.FieldsV1 = &elem
		case "manager":
			s.Manager.Reset()
			if err := s.Manager.ReadJSON(i); err != nil {
				return err
			}
		case "operation":
			s.Operation.Reset()
			if err := s.Operation.ReadJSON(i); err != nil {
				return err
			}
		case "subresource":
			s.Subresource.Reset()
			if err := s.Subresource.ReadJSON(i); err != nil {
				return err
			}
		case "time":
			s.Time.Reset()
			if err := s.Time.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

func (IoK8sApimachineryPkgApisMetaV1MicroTime) WriteJSON(j *json.Stream)    {}
func (IoK8sApimachineryPkgApisMetaV1MicroTime) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ObjectMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Annotations != nil {
		more.More()
		j.WriteObjectField("annotations")
		s.Annotations.WriteJSON(j)
	}
	if s.ClusterName.Set {
		more.More()
		j.WriteObjectField("clusterName")
		s.ClusterName.WriteJSON(j)
	}
	if s.CreationTimestamp.Set {
		more.More()
		j.WriteObjectField("creationTimestamp")
		s.CreationTimestamp.WriteJSON(j)
	}
	if s.DeletionGracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("deletionGracePeriodSeconds")
		s.DeletionGracePeriodSeconds.WriteJSON(j)
	}
	if s.DeletionTimestamp.Set {
		more.More()
		j.WriteObjectField("deletionTimestamp")
		s.DeletionTimestamp.WriteJSON(j)
	}
	if s.Finalizers != nil {
		more.More()
		j.WriteObjectField("finalizers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Finalizers {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.GenerateName.Set {
		more.More()
		j.WriteObjectField("generateName")
		s.GenerateName.WriteJSON(j)
	}
	if s.Generation.Set {
		more.More()
		j.WriteObjectField("generation")
		s.Generation.WriteJSON(j)
	}
	if s.Labels != nil {
		more.More()
		j.WriteObjectField("labels")
		s.Labels.WriteJSON(j)
	}
	if s.ManagedFields != nil {
		more.More()
		j.WriteObjectField("managedFields")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ManagedFields {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.OwnerReferences != nil {
		more.More()
		j.WriteObjectField("ownerReferences")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.OwnerReferences {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.SelfLink.Set {
		more.More()
		j.WriteObjectField("selfLink")
		s.SelfLink.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ObjectMeta from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ObjectMeta to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "annotations":
			s.Annotations = nil
			var elem IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Annotations = &elem
		case "clusterName":
			s.ClusterName.Reset()
			if err := s.ClusterName.ReadJSON(i); err != nil {
				return err
			}
		case "creationTimestamp":
			s.CreationTimestamp.Reset()
			if err := s.CreationTimestamp.ReadJSON(i); err != nil {
				return err
			}
		case "deletionGracePeriodSeconds":
			s.DeletionGracePeriodSeconds.Reset()
			if err := s.DeletionGracePeriodSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "deletionTimestamp":
			s.DeletionTimestamp.Reset()
			if err := s.DeletionTimestamp.ReadJSON(i); err != nil {
				return err
			}
		case "finalizers":
			s.Finalizers = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem string
				v, err := i.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Finalizers = append(s.Finalizers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "generateName":
			s.GenerateName.Reset()
			if err := s.GenerateName.ReadJSON(i); err != nil {
				return err
			}
		case "generation":
			s.Generation.Reset()
			if err := s.Generation.ReadJSON(i); err != nil {
				return err
			}
		case "labels":
			s.Labels = nil
			var elem IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels
			if err := elem.ReadJSON(i); err != nil {
				return err
			}
			s.Labels = &elem
		case "managedFields":
			s.ManagedFields = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.ManagedFields = append(s.ManagedFields, elem)
				return nil
			}); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				return err
			}
		case "ownerReferences":
			s.OwnerReferences = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1OwnerReference
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.OwnerReferences = append(s.OwnerReferences, elem)
				return nil
			}); err != nil {
				return err
			}
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				return err
			}
		case "selfLink":
			s.SelfLink.Reset()
			if err := s.SelfLink.ReadJSON(i); err != nil {
				return err
			}
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1OwnerReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiVersion")
	j.WriteString(s.ApiVersion)
	if s.BlockOwnerDeletion.Set {
		more.More()
		j.WriteObjectField("blockOwnerDeletion")
		s.BlockOwnerDeletion.WriteJSON(j)
	}
	if s.Controller.Set {
		more.More()
		j.WriteObjectField("controller")
		s.Controller.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("uid")
	j.WriteString(s.UID)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1OwnerReference from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1OwnerReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			v, err := i.Str()
			s.ApiVersion = string(v)
			if err != nil {
				return err
			}
		case "blockOwnerDeletion":
			s.BlockOwnerDeletion.Reset()
			if err := s.BlockOwnerDeletion.ReadJSON(i); err != nil {
				return err
			}
		case "controller":
			s.Controller.Reset()
			if err := s.Controller.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			v, err := i.Str()
			s.Kind = string(v)
			if err != nil {
				return err
			}
		case "name":
			v, err := i.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "uid":
			v, err := i.Str()
			s.UID = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Preconditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Preconditions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Preconditions) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1Preconditions to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				return err
			}
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("clientCIDR")
	j.WriteString(s.ClientCIDR)
	more.More()
	j.WriteObjectField("serverAddress")
	j.WriteString(s.ServerAddress)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "clientCIDR":
			v, err := i.Str()
			s.ClientCIDR = string(v)
			if err != nil {
				return err
			}
		case "serverAddress":
			v, err := i.Str()
			s.ServerAddress = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Status) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Code.Set {
		more.More()
		j.WriteObjectField("code")
		s.Code.WriteJSON(j)
	}
	if s.Details.Set {
		more.More()
		j.WriteObjectField("details")
		s.Details.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Status from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Status) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1Status to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "code":
			s.Code.Reset()
			if err := s.Code.ReadJSON(i); err != nil {
				return err
			}
		case "details":
			s.Details.Reset()
			if err := s.Details.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1StatusCause) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Field.Set {
		more.More()
		j.WriteObjectField("field")
		s.Field.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1StatusCause from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1StatusCause) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1StatusCause to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "field":
			s.Field.Reset()
			if err := s.Field.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1StatusDetails) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Causes != nil {
		more.More()
		j.WriteObjectField("causes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Causes {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.RetryAfterSeconds.Set {
		more.More()
		j.WriteObjectField("retryAfterSeconds")
		s.RetryAfterSeconds.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1StatusDetails from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1StatusDetails) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1StatusDetails to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "causes":
			s.Causes = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sApimachineryPkgApisMetaV1StatusCause
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Causes = append(s.Causes, elem)
				return nil
			}); err != nil {
				return err
			}
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "retryAfterSeconds":
			s.RetryAfterSeconds.Reset()
			if err := s.RetryAfterSeconds.ReadJSON(i); err != nil {
				return err
			}
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

func (IoK8sApimachineryPkgApisMetaV1Time) WriteJSON(j *json.Stream)    {}
func (IoK8sApimachineryPkgApisMetaV1Time) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1WatchEvent) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("object")
	s.Object.WriteJSON(j)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1WatchEvent from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1WatchEvent) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgApisMetaV1WatchEvent to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "object":
			if err := s.Object.ReadJSON(i); err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgRuntimeRawExtension) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgRuntimeRawExtension from json stream.
func (s *IoK8sApimachineryPkgRuntimeRawExtension) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgRuntimeRawExtension to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (IoK8sApimachineryPkgUtilIntstrIntOrString) WriteJSON(j *json.Stream)    {}
func (IoK8sApimachineryPkgUtilIntstrIntOrString) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgVersionInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("buildDate")
	j.WriteString(s.BuildDate)
	more.More()
	j.WriteObjectField("compiler")
	j.WriteString(s.Compiler)
	more.More()
	j.WriteObjectField("gitCommit")
	j.WriteString(s.GitCommit)
	more.More()
	j.WriteObjectField("gitTreeState")
	j.WriteString(s.GitTreeState)
	more.More()
	j.WriteObjectField("gitVersion")
	j.WriteString(s.GitVersion)
	more.More()
	j.WriteObjectField("goVersion")
	j.WriteString(s.GoVersion)
	more.More()
	j.WriteObjectField("major")
	j.WriteString(s.Major)
	more.More()
	j.WriteObjectField("minor")
	j.WriteString(s.Minor)
	more.More()
	j.WriteObjectField("platform")
	j.WriteString(s.Platform)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sApimachineryPkgVersionInfo from json stream.
func (s *IoK8sApimachineryPkgVersionInfo) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sApimachineryPkgVersionInfo to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "buildDate":
			v, err := i.Str()
			s.BuildDate = string(v)
			if err != nil {
				return err
			}
		case "compiler":
			v, err := i.Str()
			s.Compiler = string(v)
			if err != nil {
				return err
			}
		case "gitCommit":
			v, err := i.Str()
			s.GitCommit = string(v)
			if err != nil {
				return err
			}
		case "gitTreeState":
			v, err := i.Str()
			s.GitTreeState = string(v)
			if err != nil {
				return err
			}
		case "gitVersion":
			v, err := i.Str()
			s.GitVersion = string(v)
			if err != nil {
				return err
			}
		case "goVersion":
			v, err := i.Str()
			s.GoVersion = string(v)
			if err != nil {
				return err
			}
		case "major":
			v, err := i.Str()
			s.Major = string(v)
			if err != nil {
				return err
			}
		case "minor":
			v, err := i.Str()
			s.Minor = string(v)
			if err != nil {
				return err
			}
		case "platform":
			v, err := i.Str()
			s.Platform = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIService from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1APIService to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LastTransitionTime.Set {
		more.More()
		j.WriteObjectField("lastTransitionTime")
		s.LastTransitionTime.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "lastTransitionTime":
			s.LastTransitionTime.Reset()
			if err := s.LastTransitionTime.ReadJSON(i); err != nil {
				return err
			}
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				return err
			}
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				return err
			}
		case "status":
			v, err := i.Str()
			s.Status = string(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := i.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				return err
			}
		case "items":
			s.Items = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sKubeAggregatorPkgApisApiregistrationV1APIService
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Items = append(s.Items, elem)
				return nil
			}); err != nil {
				return err
			}
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				return err
			}
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CaBundle != nil {
		more.More()
		j.WriteObjectField("caBundle")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CaBundle {
			_ = elem // Unsupported kind "primitive".
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("groupPriorityMinimum")
	j.WriteInt32(s.GroupPriorityMinimum)
	if s.InsecureSkipTLSVerify.Set {
		more.More()
		j.WriteObjectField("insecureSkipTLSVerify")
		s.InsecureSkipTLSVerify.WriteJSON(j)
	}
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	if s.Version.Set {
		more.More()
		j.WriteObjectField("version")
		s.Version.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("versionPriority")
	j.WriteInt32(s.VersionPriority)
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "caBundle":
			s.CaBundle = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem byte
				if err := fmt.Errorf(`decoding of "byte" (primitive) is not implemented`); err != nil {
					return err
				}
				s.CaBundle = append(s.CaBundle, elem)
				return nil
			}); err != nil {
				return err
			}
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				return err
			}
		case "groupPriorityMinimum":
			v, err := i.Int32()
			s.GroupPriorityMinimum = int32(v)
			if err != nil {
				return err
			}
		case "insecureSkipTLSVerify":
			s.InsecureSkipTLSVerify.Reset()
			if err := s.InsecureSkipTLSVerify.ReadJSON(i); err != nil {
				return err
			}
		case "service":
			s.Service.Reset()
			if err := s.Service.ReadJSON(i); err != nil {
				return err
			}
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(i); err != nil {
				return err
			}
		case "versionPriority":
			v, err := i.Int32()
			s.VersionPriority = int32(v)
			if err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "conditions":
			s.Conditions = nil
			if err := i.Array(func(i *json.Iter) error {
				var elem IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition
				if err := elem.ReadJSON(i); err != nil {
					return err
				}
				s.Conditions = append(s.Conditions, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				return err
			}
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				return err
			}
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				return err
			}
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1MutatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized from json stream.
func (s *ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListAdmissionregistrationV1ValidatingWebhookConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized from json stream.
func (s *ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListApiextensionsV1CustomResourceDefinitionApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListApiextensionsV1CustomResourceDefinitionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiextensionsV1CustomResourceDefinitionApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListApiextensionsV1CustomResourceDefinitionApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListApiextensionsV1CustomResourceDefinitionApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiextensionsV1CustomResourceDefinitionApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListApiextensionsV1CustomResourceDefinitionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListApiextensionsV1CustomResourceDefinitionUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListApiextensionsV1CustomResourceDefinitionUnauthorized from json stream.
func (s *ListApiextensionsV1CustomResourceDefinitionUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListApiextensionsV1CustomResourceDefinitionUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListApiregistrationV1APIServiceApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListApiregistrationV1APIServiceApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListApiregistrationV1APIServiceApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListApiregistrationV1APIServiceApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListApiregistrationV1APIServiceApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiregistrationV1APIServiceApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListApiregistrationV1APIServiceApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListApiregistrationV1APIServiceApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListApiregistrationV1APIServiceApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListApiregistrationV1APIServiceUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListApiregistrationV1APIServiceUnauthorized from json stream.
func (s *ListApiregistrationV1APIServiceUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListApiregistrationV1APIServiceUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1ControllerRevisionForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ControllerRevisionForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1ControllerRevisionForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ControllerRevisionForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1ControllerRevisionForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ControllerRevisionForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1ControllerRevisionForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAppsV1ControllerRevisionForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAppsV1ControllerRevisionForAllNamespacesUnauthorized from json stream.
func (s *ListAppsV1ControllerRevisionForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListAppsV1ControllerRevisionForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListAppsV1DaemonSetForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1DaemonSetForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListAppsV1DaemonSetForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1DaemonSetForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DaemonSetForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1DaemonSetForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DaemonSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1DaemonSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DaemonSetForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1DaemonSetForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListAppsV1DaemonSetForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAppsV1DaemonSetForAllNamespacesUnauthorized from json stream.
func (s *ListAppsV1DaemonSetForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListAppsV1DaemonSetForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListAppsV1DeploymentForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1DeploymentForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListAppsV1DeploymentForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1DeploymentForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DeploymentForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1DeploymentForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DeploymentForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1DeploymentForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1DeploymentForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1DeploymentForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListAppsV1DeploymentForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAppsV1DeploymentForAllNamespacesUnauthorized from json stream.
func (s *ListAppsV1DeploymentForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListAppsV1DeploymentForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListAppsV1ReplicaSetForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1ReplicaSetForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListAppsV1ReplicaSetForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1ReplicaSetForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ReplicaSetForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1ReplicaSetForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ReplicaSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1ReplicaSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1ReplicaSetForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListAppsV1ReplicaSetForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListAppsV1ReplicaSetForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAppsV1ReplicaSetForAllNamespacesUnauthorized from json stream.
func (s *ListAppsV1ReplicaSetForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListAppsV1ReplicaSetForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListAppsV1StatefulSetForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1StatefulSetForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1StatefulSetForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1StatefulSetForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1StatefulSetForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1StatefulSetForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1StatefulSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAppsV1StatefulSetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAppsV1StatefulSetForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListAppsV1StatefulSetForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAppsV1StatefulSetForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAppsV1StatefulSetForAllNamespacesUnauthorized from json stream.
func (s *ListAppsV1StatefulSetForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListAppsV1StatefulSetForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized from json stream.
func (s *ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized from json stream.
func (s *ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized from json stream.
func (s *ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListBatchV1CronJobForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListBatchV1CronJobForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListBatchV1CronJobForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListBatchV1CronJobForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1CronJobForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1CronJobForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1CronJobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1CronJobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1CronJobForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListBatchV1CronJobForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListBatchV1CronJobForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListBatchV1CronJobForAllNamespacesUnauthorized from json stream.
func (s *ListBatchV1CronJobForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListBatchV1CronJobForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListBatchV1JobForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListBatchV1JobForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListBatchV1JobForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListBatchV1JobForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1JobForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListBatchV1JobForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1JobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1JobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1JobForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListBatchV1JobForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListBatchV1JobForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListBatchV1JobForAllNamespacesUnauthorized from json stream.
func (s *ListBatchV1JobForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListBatchV1JobForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListBatchV1beta1CronJobForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListBatchV1beta1CronJobForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1beta1CronJobForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1beta1CronJobForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1beta1CronJobForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1beta1CronJobForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1beta1CronJobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListBatchV1beta1CronJobForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListBatchV1beta1CronJobForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListBatchV1beta1CronJobForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListBatchV1beta1CronJobForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListBatchV1beta1CronJobForAllNamespacesUnauthorized from json stream.
func (s *ListBatchV1beta1CronJobForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListBatchV1beta1CronJobForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCertificatesV1CertificateSigningRequestApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCertificatesV1CertificateSigningRequestApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCertificatesV1CertificateSigningRequestApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCertificatesV1CertificateSigningRequestApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCertificatesV1CertificateSigningRequestApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCertificatesV1CertificateSigningRequestApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCertificatesV1CertificateSigningRequestApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCertificatesV1CertificateSigningRequestUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCertificatesV1CertificateSigningRequestUnauthorized from json stream.
func (s *ListCertificatesV1CertificateSigningRequestUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCertificatesV1CertificateSigningRequestUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoordinationV1LeaseForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoordinationV1LeaseForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoordinationV1LeaseForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoordinationV1LeaseForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoordinationV1LeaseForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoordinationV1LeaseForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoordinationV1LeaseForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoordinationV1LeaseForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoordinationV1LeaseForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoordinationV1LeaseForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoordinationV1LeaseForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoordinationV1LeaseForAllNamespacesUnauthorized from json stream.
func (s *ListCoordinationV1LeaseForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoordinationV1LeaseForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1ComponentStatusApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ComponentStatusApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1ComponentStatusApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ComponentStatusApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1ComponentStatusApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ComponentStatusApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ComponentStatusApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ComponentStatusApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ComponentStatusApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ComponentStatusApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ComponentStatusUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ComponentStatusUnauthorized from json stream.
func (s *ListCoreV1ComponentStatusUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1ComponentStatusUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1ConfigMapForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ConfigMapForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1ConfigMapForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ConfigMapForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ConfigMapForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ConfigMapForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ConfigMapForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ConfigMapForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ConfigMapForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ConfigMapForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ConfigMapForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ConfigMapForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1ConfigMapForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1ConfigMapForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1EndpointsForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1EndpointsForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1EndpointsForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1EndpointsForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EndpointsForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1EndpointsForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EndpointsForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1EndpointsForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EndpointsForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1EndpointsForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1EndpointsForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1EndpointsForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1EndpointsForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1EndpointsForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1EventForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1EventForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1EventForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1EventForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EventForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1EventForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1EventForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1EventForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1EventForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1EventForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1EventForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1EventForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1LimitRangeForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1LimitRangeForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1LimitRangeForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1LimitRangeForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1LimitRangeForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1LimitRangeForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1LimitRangeForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1LimitRangeForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1LimitRangeForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1LimitRangeForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1LimitRangeForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1LimitRangeForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1LimitRangeForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1LimitRangeForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1NamespaceApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NamespaceApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NamespaceApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NamespaceApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NamespaceApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NamespaceApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NamespaceApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1NamespaceApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1NamespaceApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NamespaceApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1NamespaceUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1NamespaceUnauthorized from json stream.
func (s *ListCoreV1NamespaceUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1NamespaceUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1NodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NodeApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NodeApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1NodeApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1NodeApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1NodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1NodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1NodeUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1NodeUnauthorized from json stream.
func (s *ListCoreV1NodeUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1NodeUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1PersistentVolumeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1PersistentVolumeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1PersistentVolumeApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PersistentVolumeApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PersistentVolumeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PersistentVolumeApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1PersistentVolumeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PersistentVolumeClaimForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1PersistentVolumeUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1PersistentVolumeUnauthorized from json stream.
func (s *ListCoreV1PersistentVolumeUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1PersistentVolumeUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1PodForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1PodForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1PodForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PodForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PodForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PodForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1PodForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1PodForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1PodForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1PodForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1PodForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1PodTemplateForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PodTemplateForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodTemplateForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PodTemplateForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodTemplateForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PodTemplateForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodTemplateForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1PodTemplateForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1PodTemplateForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1PodTemplateForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1PodTemplateForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1PodTemplateForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1PodTemplateForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1PodTemplateForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ReplicationControllerForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ReplicationControllerForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ReplicationControllerForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ReplicationControllerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ReplicationControllerForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ReplicationControllerForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ReplicationControllerForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ReplicationControllerForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ReplicationControllerForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1ReplicationControllerForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1ReplicationControllerForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ResourceQuotaForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ResourceQuotaForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ResourceQuotaForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ResourceQuotaForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ResourceQuotaForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ResourceQuotaForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ResourceQuotaForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ResourceQuotaForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ResourceQuotaForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1ResourceQuotaForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1ResourceQuotaForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1SecretForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1SecretForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1SecretForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1SecretForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1SecretForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1SecretForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1SecretForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1SecretForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1SecretForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1SecretForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1SecretForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1SecretForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1SecretForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1SecretForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1ServiceAccountForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ServiceAccountForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceAccountForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ServiceAccountForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceAccountForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ServiceAccountForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceAccountForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ServiceAccountForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceAccountForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ServiceAccountForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ServiceAccountForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ServiceAccountForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1ServiceAccountForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1ServiceAccountForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListCoreV1ServiceForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ServiceForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListCoreV1ServiceForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListCoreV1ServiceForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ServiceForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListCoreV1ServiceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListCoreV1ServiceForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListCoreV1ServiceForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListCoreV1ServiceForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListCoreV1ServiceForAllNamespacesUnauthorized from json stream.
func (s *ListCoreV1ServiceForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListCoreV1ServiceForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListDiscoveryV1EndpointSliceForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized from json stream.
func (s *ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListDiscoveryV1beta1EndpointSliceForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized from json stream.
func (s *ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListEventsV1EventForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListEventsV1EventForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListEventsV1EventForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListEventsV1EventForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1EventForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListEventsV1EventForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListEventsV1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1EventForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListEventsV1EventForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListEventsV1EventForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListEventsV1EventForAllNamespacesUnauthorized from json stream.
func (s *ListEventsV1EventForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListEventsV1EventForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListEventsV1beta1EventForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListEventsV1beta1EventForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1beta1EventForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListEventsV1beta1EventForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1beta1EventForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListEventsV1beta1EventForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1beta1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListEventsV1beta1EventForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListEventsV1beta1EventForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListEventsV1beta1EventForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListEventsV1beta1EventForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListEventsV1beta1EventForAllNamespacesUnauthorized from json stream.
func (s *ListEventsV1beta1EventForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListEventsV1beta1EventForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListFlowcontrolApiserverV1beta1FlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized from json stream.
func (s *ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized from json stream.
func (s *ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListFlowcontrolApiserverV1beta2FlowSchemaApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized from json stream.
func (s *ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized from json stream.
func (s *ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListInternalApiserverV1alpha1StorageVersionApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListInternalApiserverV1alpha1StorageVersionApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListInternalApiserverV1alpha1StorageVersionApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListInternalApiserverV1alpha1StorageVersionApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListInternalApiserverV1alpha1StorageVersionApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListInternalApiserverV1alpha1StorageVersionApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListInternalApiserverV1alpha1StorageVersionApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListInternalApiserverV1alpha1StorageVersionUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListInternalApiserverV1alpha1StorageVersionUnauthorized from json stream.
func (s *ListInternalApiserverV1alpha1StorageVersionUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListInternalApiserverV1alpha1StorageVersionUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListNetworkingV1IngressClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListNetworkingV1IngressClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListNetworkingV1IngressClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1IngressClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1IngressClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1IngressClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListNetworkingV1IngressClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListNetworkingV1IngressClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNetworkingV1IngressClassUnauthorized from json stream.
func (s *ListNetworkingV1IngressClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListNetworkingV1IngressClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListNetworkingV1IngressForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1IngressForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1IngressForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1IngressForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1IngressForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1IngressForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1IngressForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListNetworkingV1IngressForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNetworkingV1IngressForAllNamespacesUnauthorized from json stream.
func (s *ListNetworkingV1IngressForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListNetworkingV1IngressForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListNetworkingV1NetworkPolicyForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized from json stream.
func (s *ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListNodeV1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListNodeV1RuntimeClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1RuntimeClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListNodeV1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListNodeV1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNodeV1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListNodeV1RuntimeClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNodeV1RuntimeClassUnauthorized from json stream.
func (s *ListNodeV1RuntimeClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListNodeV1RuntimeClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListNodeV1alpha1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1alpha1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListNodeV1alpha1RuntimeClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListNodeV1alpha1RuntimeClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNodeV1alpha1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1alpha1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1alpha1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListNodeV1alpha1RuntimeClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNodeV1alpha1RuntimeClassUnauthorized from json stream.
func (s *ListNodeV1alpha1RuntimeClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListNodeV1alpha1RuntimeClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListNodeV1beta1RuntimeClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1beta1RuntimeClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListNodeV1beta1RuntimeClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListNodeV1beta1RuntimeClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListNodeV1beta1RuntimeClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListNodeV1beta1RuntimeClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListNodeV1beta1RuntimeClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListNodeV1beta1RuntimeClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListNodeV1beta1RuntimeClassUnauthorized from json stream.
func (s *ListNodeV1beta1RuntimeClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListNodeV1beta1RuntimeClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListPolicyV1PodDisruptionBudgetForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized from json stream.
func (s *ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized from json stream.
func (s *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListPolicyV1beta1PodSecurityPolicyApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListPolicyV1beta1PodSecurityPolicyApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListPolicyV1beta1PodSecurityPolicyApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListPolicyV1beta1PodSecurityPolicyApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListPolicyV1beta1PodSecurityPolicyApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListPolicyV1beta1PodSecurityPolicyApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListPolicyV1beta1PodSecurityPolicyApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListPolicyV1beta1PodSecurityPolicyUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListPolicyV1beta1PodSecurityPolicyUnauthorized from json stream.
func (s *ListPolicyV1beta1PodSecurityPolicyUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListPolicyV1beta1PodSecurityPolicyUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListRbacAuthorizationV1ClusterRoleApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListRbacAuthorizationV1ClusterRoleApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListRbacAuthorizationV1ClusterRoleApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListRbacAuthorizationV1ClusterRoleApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1ClusterRoleApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListRbacAuthorizationV1ClusterRoleApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

func (ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1ClusterRoleBindingApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1ClusterRoleBindingApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListRbacAuthorizationV1ClusterRoleBindingApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListRbacAuthorizationV1ClusterRoleBindingUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListRbacAuthorizationV1ClusterRoleBindingUnauthorized from json stream.
func (s *ListRbacAuthorizationV1ClusterRoleBindingUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListRbacAuthorizationV1ClusterRoleBindingUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ListRbacAuthorizationV1ClusterRoleUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListRbacAuthorizationV1ClusterRoleUnauthorized from json stream.
func (s *ListRbacAuthorizationV1ClusterRoleUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListRbacAuthorizationV1ClusterRoleUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleBindingForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized from json stream.
func (s *ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (ListRbacAuthorizationV1RoleForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized from json stream.
func (s *ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListSchedulingV1PriorityClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListSchedulingV1PriorityClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListSchedulingV1PriorityClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListSchedulingV1PriorityClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListSchedulingV1PriorityClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListSchedulingV1PriorityClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListSchedulingV1PriorityClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListSchedulingV1PriorityClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListSchedulingV1PriorityClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListSchedulingV1PriorityClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListSchedulingV1PriorityClassUnauthorized from json stream.
func (s *ListSchedulingV1PriorityClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListSchedulingV1PriorityClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListStorageV1CSIDriverApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSIDriverApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1CSIDriverApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSIDriverApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1CSIDriverApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1CSIDriverApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1CSIDriverApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1CSIDriverApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1CSIDriverApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSIDriverApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListStorageV1CSIDriverUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1CSIDriverUnauthorized from json stream.
func (s *ListStorageV1CSIDriverUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListStorageV1CSIDriverUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListStorageV1CSINodeApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSINodeApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1CSINodeApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSINodeApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1CSINodeApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1CSINodeApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1CSINodeApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1CSINodeApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1CSINodeApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1CSINodeApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListStorageV1CSINodeUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1CSINodeUnauthorized from json stream.
func (s *ListStorageV1CSINodeUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListStorageV1CSINodeUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListStorageV1StorageClassApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1StorageClassApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1StorageClassApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1StorageClassApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1StorageClassApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1StorageClassApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1StorageClassApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1StorageClassApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1StorageClassApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1StorageClassApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListStorageV1StorageClassUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1StorageClassUnauthorized from json stream.
func (s *ListStorageV1StorageClassUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListStorageV1StorageClassUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListStorageV1VolumeAttachmentApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1VolumeAttachmentApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (ListStorageV1VolumeAttachmentApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1VolumeAttachmentApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (ListStorageV1VolumeAttachmentApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1VolumeAttachmentApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1VolumeAttachmentApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1VolumeAttachmentApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (ListStorageV1VolumeAttachmentApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s ListStorageV1VolumeAttachmentUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1VolumeAttachmentUnauthorized from json stream.
func (s *ListStorageV1VolumeAttachmentUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListStorageV1VolumeAttachmentUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1alpha1CSIStorageCapacityForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized from json stream.
func (s *ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (ListStorageV1beta1CSIStorageCapacityForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized from json stream.
func (s *ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s LogFileListHandlerUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads LogFileListHandlerUnauthorized from json stream.
func (s *LogFileListHandlerUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode LogFileListHandlerUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(j *json.Stream) {
	j.WriteBool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBool to nil`)
	}
	switch i.Next() {
	case json.Bool:
		o.Set = true
		v, err := i.Bool()
		if err != nil {
			return err
		}
		o.Value = bool(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBool", i.Next())
	}
}

// WriteJSON writes json value of float64 to json stream.
func (o OptFloat64) WriteJSON(j *json.Stream) {
	j.WriteFloat64(float64(o.Value))
}

// ReadJSON reads json value of float64 from json iterator.
func (o *OptFloat64) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFloat64 to nil`)
	}
	switch i.Next() {
	case json.Number:
		o.Set = true
		v, err := i.Float64()
		if err != nil {
			return err
		}
		o.Value = float64(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFloat64", i.Next())
	}
}

// WriteJSON writes json value of int32 to json stream.
func (o OptInt32) WriteJSON(j *json.Stream) {
	j.WriteInt32(int32(o.Value))
}

// ReadJSON reads json value of int32 from json iterator.
func (o *OptInt32) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptInt32 to nil`)
	}
	switch i.Next() {
	case json.Number:
		o.Set = true
		v, err := i.Int32()
		if err != nil {
			return err
		}
		o.Value = int32(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptInt32", i.Next())
	}
}

// WriteJSON writes json value of int64 to json stream.
func (o OptInt64) WriteJSON(j *json.Stream) {
	j.WriteInt64(int64(o.Value))
}

// ReadJSON reads json value of int64 from json iterator.
func (o *OptInt64) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptInt64 to nil`)
	}
	switch i.Next() {
	case json.Number:
		o.Set = true
		v, err := i.Int64()
		if err != nil {
			return err
		}
		o.Value = int64(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptInt64", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAdmissionregistrationV1ServiceReference to json stream.
func (o OptIoK8sAPIAdmissionregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAdmissionregistrationV1ServiceReference from json iterator.
func (o *OptIoK8sAPIAdmissionregistrationV1ServiceReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAdmissionregistrationV1ServiceReference to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAdmissionregistrationV1ServiceReference", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DaemonSetSpec to json stream.
func (o OptIoK8sAPIAppsV1DaemonSetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DaemonSetSpec from json iterator.
func (o *OptIoK8sAPIAppsV1DaemonSetSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DaemonSetSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DaemonSetSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DaemonSetStatus to json stream.
func (o OptIoK8sAPIAppsV1DaemonSetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DaemonSetStatus from json iterator.
func (o *OptIoK8sAPIAppsV1DaemonSetStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DaemonSetStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DaemonSetStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DaemonSetUpdateStrategy to json stream.
func (o OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DaemonSetUpdateStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DaemonSetUpdateStrategy to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DaemonSetUpdateStrategy", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DeploymentSpec to json stream.
func (o OptIoK8sAPIAppsV1DeploymentSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DeploymentSpec from json iterator.
func (o *OptIoK8sAPIAppsV1DeploymentSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DeploymentSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DeploymentSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DeploymentStatus to json stream.
func (o OptIoK8sAPIAppsV1DeploymentStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DeploymentStatus from json iterator.
func (o *OptIoK8sAPIAppsV1DeploymentStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DeploymentStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DeploymentStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1DeploymentStrategy to json stream.
func (o OptIoK8sAPIAppsV1DeploymentStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DeploymentStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1DeploymentStrategy) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1DeploymentStrategy to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1DeploymentStrategy", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1ReplicaSetSpec to json stream.
func (o OptIoK8sAPIAppsV1ReplicaSetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1ReplicaSetSpec from json iterator.
func (o *OptIoK8sAPIAppsV1ReplicaSetSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1ReplicaSetSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1ReplicaSetSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1ReplicaSetStatus to json stream.
func (o OptIoK8sAPIAppsV1ReplicaSetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1ReplicaSetStatus from json iterator.
func (o *OptIoK8sAPIAppsV1ReplicaSetStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1ReplicaSetStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1ReplicaSetStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1RollingUpdateDaemonSet to json stream.
func (o OptIoK8sAPIAppsV1RollingUpdateDaemonSet) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1RollingUpdateDaemonSet from json iterator.
func (o *OptIoK8sAPIAppsV1RollingUpdateDaemonSet) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1RollingUpdateDaemonSet to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1RollingUpdateDaemonSet", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1RollingUpdateDeployment to json stream.
func (o OptIoK8sAPIAppsV1RollingUpdateDeployment) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1RollingUpdateDeployment from json iterator.
func (o *OptIoK8sAPIAppsV1RollingUpdateDeployment) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1RollingUpdateDeployment to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1RollingUpdateDeployment", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy to json stream.
func (o OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1StatefulSetSpec to json stream.
func (o OptIoK8sAPIAppsV1StatefulSetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1StatefulSetSpec from json iterator.
func (o *OptIoK8sAPIAppsV1StatefulSetSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1StatefulSetSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1StatefulSetSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1StatefulSetStatus to json stream.
func (o OptIoK8sAPIAppsV1StatefulSetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1StatefulSetStatus from json iterator.
func (o *OptIoK8sAPIAppsV1StatefulSetStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1StatefulSetStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1StatefulSetStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAppsV1StatefulSetUpdateStrategy to json stream.
func (o OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1StatefulSetUpdateStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAppsV1StatefulSetUpdateStrategy to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAppsV1StatefulSetUpdateStrategy", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthenticationV1TokenReviewStatus to json stream.
func (o OptIoK8sAPIAuthenticationV1TokenReviewStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthenticationV1TokenReviewStatus from json iterator.
func (o *OptIoK8sAPIAuthenticationV1TokenReviewStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthenticationV1TokenReviewStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthenticationV1TokenReviewStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthenticationV1UserInfo to json stream.
func (o OptIoK8sAPIAuthenticationV1UserInfo) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthenticationV1UserInfo from json iterator.
func (o *OptIoK8sAPIAuthenticationV1UserInfo) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthenticationV1UserInfo to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthenticationV1UserInfo", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1NonResourceAttributes to json stream.
func (o OptIoK8sAPIAuthorizationV1NonResourceAttributes) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1NonResourceAttributes from json iterator.
func (o *OptIoK8sAPIAuthorizationV1NonResourceAttributes) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthorizationV1NonResourceAttributes to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthorizationV1NonResourceAttributes", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1ResourceAttributes to json stream.
func (o OptIoK8sAPIAuthorizationV1ResourceAttributes) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1ResourceAttributes from json iterator.
func (o *OptIoK8sAPIAuthorizationV1ResourceAttributes) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthorizationV1ResourceAttributes to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthorizationV1ResourceAttributes", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1SubjectAccessReviewStatus to json stream.
func (o OptIoK8sAPIAuthorizationV1SubjectAccessReviewStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1SubjectAccessReviewStatus from json iterator.
func (o *OptIoK8sAPIAuthorizationV1SubjectAccessReviewStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthorizationV1SubjectAccessReviewStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthorizationV1SubjectAccessReviewStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1SubjectRulesReviewStatus to json stream.
func (o OptIoK8sAPIAuthorizationV1SubjectRulesReviewStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1SubjectRulesReviewStatus from json iterator.
func (o *OptIoK8sAPIAuthorizationV1SubjectRulesReviewStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAuthorizationV1SubjectRulesReviewStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAuthorizationV1SubjectRulesReviewStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec to json stream.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec from json iterator.
func (o *OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus to json stream.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ExternalMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ExternalMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ExternalMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ExternalMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ObjectMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ObjectMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ObjectMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ObjectMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1PodsMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1PodsMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1PodsMetricSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1PodsMetricSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1PodsMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1PodsMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ExternalMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ExternalMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ExternalMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ExternalMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HPAScalingRules to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HPAScalingRules from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2HPAScalingRules to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2HPAScalingRules", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ObjectMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ObjectMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ObjectMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ObjectMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2PodsMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2PodsMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2PodsMetricSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2PodsMetricSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2PodsMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2PodsMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1CronJobSpec to json stream.
func (o OptIoK8sAPIBatchV1CronJobSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1CronJobSpec from json iterator.
func (o *OptIoK8sAPIBatchV1CronJobSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1CronJobSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1CronJobSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1CronJobStatus to json stream.
func (o OptIoK8sAPIBatchV1CronJobStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1CronJobStatus from json iterator.
func (o *OptIoK8sAPIBatchV1CronJobStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1CronJobStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1CronJobStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1JobSpec to json stream.
func (o OptIoK8sAPIBatchV1JobSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1JobSpec from json iterator.
func (o *OptIoK8sAPIBatchV1JobSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1JobSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1JobSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1JobStatus to json stream.
func (o OptIoK8sAPIBatchV1JobStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1JobStatus from json iterator.
func (o *OptIoK8sAPIBatchV1JobStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1JobStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1JobStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1UncountedTerminatedPods to json stream.
func (o OptIoK8sAPIBatchV1UncountedTerminatedPods) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1UncountedTerminatedPods from json iterator.
func (o *OptIoK8sAPIBatchV1UncountedTerminatedPods) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1UncountedTerminatedPods to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1UncountedTerminatedPods", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1beta1CronJobSpec to json stream.
func (o OptIoK8sAPIBatchV1beta1CronJobSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1beta1CronJobSpec from json iterator.
func (o *OptIoK8sAPIBatchV1beta1CronJobSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1beta1CronJobSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1beta1CronJobSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIBatchV1beta1CronJobStatus to json stream.
func (o OptIoK8sAPIBatchV1beta1CronJobStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1beta1CronJobStatus from json iterator.
func (o *OptIoK8sAPIBatchV1beta1CronJobStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIBatchV1beta1CronJobStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIBatchV1beta1CronJobStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICertificatesV1CertificateSigningRequestStatus to json stream.
func (o OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICertificatesV1CertificateSigningRequestStatus from json iterator.
func (o *OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICertificatesV1CertificateSigningRequestStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICertificatesV1CertificateSigningRequestStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoordinationV1LeaseSpec to json stream.
func (o OptIoK8sAPICoordinationV1LeaseSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoordinationV1LeaseSpec from json iterator.
func (o *OptIoK8sAPICoordinationV1LeaseSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoordinationV1LeaseSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoordinationV1LeaseSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1Affinity to json stream.
func (o OptIoK8sAPICoreV1Affinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Affinity from json iterator.
func (o *OptIoK8sAPICoreV1Affinity) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1Affinity to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1Affinity", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1AzureDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AzureDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AzureDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AzureDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1AzureDiskVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1AzureDiskVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1AzureFilePersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AzureFilePersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1AzureFilePersistentVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1AzureFilePersistentVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1AzureFileVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AzureFileVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AzureFileVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AzureFileVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1AzureFileVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1AzureFileVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CSIPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CSIPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CSIPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CSIPersistentVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CSIPersistentVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CSIVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CSIVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CSIVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CSIVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CSIVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CSIVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1Capabilities to json stream.
func (o OptIoK8sAPICoreV1Capabilities) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Capabilities from json iterator.
func (o *OptIoK8sAPICoreV1Capabilities) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1Capabilities to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1Capabilities", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CephFSPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CephFSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CephFSPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CephFSPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CephFSPersistentVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CephFSPersistentVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CephFSVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CephFSVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CephFSVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CephFSVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CephFSVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CephFSVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CinderPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CinderPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CinderPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CinderPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CinderPersistentVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CinderPersistentVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1CinderVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CinderVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CinderVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CinderVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1CinderVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1CinderVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ClientIPConfig to json stream.
func (o OptIoK8sAPICoreV1ClientIPConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ClientIPConfig from json iterator.
func (o *OptIoK8sAPICoreV1ClientIPConfig) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ClientIPConfig to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ClientIPConfig", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapEnvSource to json stream.
func (o OptIoK8sAPICoreV1ConfigMapEnvSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapEnvSource from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapEnvSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ConfigMapEnvSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ConfigMapEnvSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapKeySelector to json stream.
func (o OptIoK8sAPICoreV1ConfigMapKeySelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapKeySelector from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapKeySelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ConfigMapKeySelector to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ConfigMapKeySelector", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapNodeConfigSource to json stream.
func (o OptIoK8sAPICoreV1ConfigMapNodeConfigSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapNodeConfigSource from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapNodeConfigSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ConfigMapNodeConfigSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ConfigMapNodeConfigSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapProjection to json stream.
func (o OptIoK8sAPICoreV1ConfigMapProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapProjection from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapProjection) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ConfigMapProjection to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ConfigMapProjection", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ConfigMapVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ConfigMapVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ConfigMapVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerState to json stream.
func (o OptIoK8sAPICoreV1ContainerState) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerState from json iterator.
func (o *OptIoK8sAPICoreV1ContainerState) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ContainerState to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ContainerState", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerStateRunning to json stream.
func (o OptIoK8sAPICoreV1ContainerStateRunning) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerStateRunning from json iterator.
func (o *OptIoK8sAPICoreV1ContainerStateRunning) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ContainerStateRunning to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ContainerStateRunning", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerStateTerminated to json stream.
func (o OptIoK8sAPICoreV1ContainerStateTerminated) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerStateTerminated from json iterator.
func (o *OptIoK8sAPICoreV1ContainerStateTerminated) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ContainerStateTerminated to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ContainerStateTerminated", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerStateWaiting to json stream.
func (o OptIoK8sAPICoreV1ContainerStateWaiting) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerStateWaiting from json iterator.
func (o *OptIoK8sAPICoreV1ContainerStateWaiting) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ContainerStateWaiting to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ContainerStateWaiting", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1DaemonEndpoint to json stream.
func (o OptIoK8sAPICoreV1DaemonEndpoint) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1DaemonEndpoint from json iterator.
func (o *OptIoK8sAPICoreV1DaemonEndpoint) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1DaemonEndpoint to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1DaemonEndpoint", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1DownwardAPIProjection to json stream.
func (o OptIoK8sAPICoreV1DownwardAPIProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1DownwardAPIProjection from json iterator.
func (o *OptIoK8sAPICoreV1DownwardAPIProjection) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1DownwardAPIProjection to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1DownwardAPIProjection", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1DownwardAPIVolumeSource to json stream.
func (o OptIoK8sAPICoreV1DownwardAPIVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1DownwardAPIVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1DownwardAPIVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1DownwardAPIVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1DownwardAPIVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1EmptyDirVolumeSource to json stream.
func (o OptIoK8sAPICoreV1EmptyDirVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EmptyDirVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1EmptyDirVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1EmptyDirVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1EmptyDirVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1EnvVarSource to json stream.
func (o OptIoK8sAPICoreV1EnvVarSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EnvVarSource from json iterator.
func (o *OptIoK8sAPICoreV1EnvVarSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1EnvVarSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1EnvVarSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1EphemeralVolumeSource to json stream.
func (o OptIoK8sAPICoreV1EphemeralVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EphemeralVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1EphemeralVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1EphemeralVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1EphemeralVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1EventSeries to json stream.
func (o OptIoK8sAPICoreV1EventSeries) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EventSeries from json iterator.
func (o *OptIoK8sAPICoreV1EventSeries) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1EventSeries to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1EventSeries", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1EventSource to json stream.
func (o OptIoK8sAPICoreV1EventSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EventSource from json iterator.
func (o *OptIoK8sAPICoreV1EventSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1EventSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1EventSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ExecAction to json stream.
func (o OptIoK8sAPICoreV1ExecAction) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ExecAction from json iterator.
func (o *OptIoK8sAPICoreV1ExecAction) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ExecAction to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ExecAction", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1FCVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FCVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FCVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FCVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1FCVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1FCVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1FlexPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FlexPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FlexPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FlexPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1FlexPersistentVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1FlexPersistentVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1FlexVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FlexVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FlexVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FlexVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1FlexVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1FlexVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1FlockerVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FlockerVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FlockerVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FlockerVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1FlockerVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1FlockerVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1GCEPersistentDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GCEPersistentDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1GitRepoVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GitRepoVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GitRepoVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GitRepoVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1GitRepoVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1GitRepoVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1GlusterfsPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GlusterfsPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1GlusterfsVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GlusterfsVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GlusterfsVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GlusterfsVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1GlusterfsVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1GlusterfsVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1HTTPGetAction to json stream.
func (o OptIoK8sAPICoreV1HTTPGetAction) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1HTTPGetAction from json iterator.
func (o *OptIoK8sAPICoreV1HTTPGetAction) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1HTTPGetAction to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1HTTPGetAction", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1Handler to json stream.
func (o OptIoK8sAPICoreV1Handler) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Handler from json iterator.
func (o *OptIoK8sAPICoreV1Handler) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1Handler to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1Handler", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1HostPathVolumeSource to json stream.
func (o OptIoK8sAPICoreV1HostPathVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1HostPathVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1HostPathVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1HostPathVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1HostPathVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ISCSIPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ISCSIPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ISCSIPersistentVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ISCSIPersistentVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ISCSIVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ISCSIVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ISCSIVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ISCSIVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ISCSIVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ISCSIVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1Lifecycle to json stream.
func (o OptIoK8sAPICoreV1Lifecycle) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Lifecycle from json iterator.
func (o *OptIoK8sAPICoreV1Lifecycle) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1Lifecycle to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1Lifecycle", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1LimitRangeSpec to json stream.
func (o OptIoK8sAPICoreV1LimitRangeSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LimitRangeSpec from json iterator.
func (o *OptIoK8sAPICoreV1LimitRangeSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1LimitRangeSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1LimitRangeSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1LoadBalancerStatus to json stream.
func (o OptIoK8sAPICoreV1LoadBalancerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LoadBalancerStatus from json iterator.
func (o *OptIoK8sAPICoreV1LoadBalancerStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1LoadBalancerStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1LoadBalancerStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1LocalObjectReference to json stream.
func (o OptIoK8sAPICoreV1LocalObjectReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LocalObjectReference from json iterator.
func (o *OptIoK8sAPICoreV1LocalObjectReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1LocalObjectReference to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1LocalObjectReference", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1LocalVolumeSource to json stream.
func (o OptIoK8sAPICoreV1LocalVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LocalVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1LocalVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1LocalVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1LocalVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NFSVolumeSource to json stream.
func (o OptIoK8sAPICoreV1NFSVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NFSVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1NFSVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NFSVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NFSVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NamespaceSpec to json stream.
func (o OptIoK8sAPICoreV1NamespaceSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NamespaceSpec from json iterator.
func (o *OptIoK8sAPICoreV1NamespaceSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NamespaceSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NamespaceSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NamespaceStatus to json stream.
func (o OptIoK8sAPICoreV1NamespaceStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NamespaceStatus from json iterator.
func (o *OptIoK8sAPICoreV1NamespaceStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NamespaceStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NamespaceStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeAffinity to json stream.
func (o OptIoK8sAPICoreV1NodeAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeAffinity from json iterator.
func (o *OptIoK8sAPICoreV1NodeAffinity) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeAffinity to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeAffinity", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeConfigSource to json stream.
func (o OptIoK8sAPICoreV1NodeConfigSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeConfigSource from json iterator.
func (o *OptIoK8sAPICoreV1NodeConfigSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeConfigSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeConfigSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeConfigStatus to json stream.
func (o OptIoK8sAPICoreV1NodeConfigStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeConfigStatus from json iterator.
func (o *OptIoK8sAPICoreV1NodeConfigStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeConfigStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeConfigStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeDaemonEndpoints to json stream.
func (o OptIoK8sAPICoreV1NodeDaemonEndpoints) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeDaemonEndpoints from json iterator.
func (o *OptIoK8sAPICoreV1NodeDaemonEndpoints) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeDaemonEndpoints to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeDaemonEndpoints", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeSelector to json stream.
func (o OptIoK8sAPICoreV1NodeSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeSelector from json iterator.
func (o *OptIoK8sAPICoreV1NodeSelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeSelector to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeSelector", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeSpec to json stream.
func (o OptIoK8sAPICoreV1NodeSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeSpec from json iterator.
func (o *OptIoK8sAPICoreV1NodeSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeStatus to json stream.
func (o OptIoK8sAPICoreV1NodeStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeStatus from json iterator.
func (o *OptIoK8sAPICoreV1NodeStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeSystemInfo to json stream.
func (o OptIoK8sAPICoreV1NodeSystemInfo) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeSystemInfo from json iterator.
func (o *OptIoK8sAPICoreV1NodeSystemInfo) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1NodeSystemInfo to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1NodeSystemInfo", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ObjectFieldSelector to json stream.
func (o OptIoK8sAPICoreV1ObjectFieldSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ObjectFieldSelector from json iterator.
func (o *OptIoK8sAPICoreV1ObjectFieldSelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ObjectFieldSelector to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ObjectFieldSelector", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ObjectReference to json stream.
func (o OptIoK8sAPICoreV1ObjectReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ObjectReference from json iterator.
func (o *OptIoK8sAPICoreV1ObjectReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ObjectReference to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ObjectReference", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimSpec to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimSpec from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeClaimSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeClaimSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimStatus to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimStatus from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeClaimStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeClaimStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimTemplate to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimTemplate from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeClaimTemplate to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeClaimTemplate", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimVolumeSource to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeSpec to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeSpec from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeStatus to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeStatus from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PersistentVolumeStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PersistentVolumeStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PhotonPersistentDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PhotonPersistentDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodAffinity to json stream.
func (o OptIoK8sAPICoreV1PodAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodAffinity from json iterator.
func (o *OptIoK8sAPICoreV1PodAffinity) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodAffinity to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodAffinity", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodAntiAffinity to json stream.
func (o OptIoK8sAPICoreV1PodAntiAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodAntiAffinity from json iterator.
func (o *OptIoK8sAPICoreV1PodAntiAffinity) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodAntiAffinity to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodAntiAffinity", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodDNSConfig to json stream.
func (o OptIoK8sAPICoreV1PodDNSConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodDNSConfig from json iterator.
func (o *OptIoK8sAPICoreV1PodDNSConfig) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodDNSConfig to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodDNSConfig", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodSecurityContext to json stream.
func (o OptIoK8sAPICoreV1PodSecurityContext) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodSecurityContext from json iterator.
func (o *OptIoK8sAPICoreV1PodSecurityContext) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodSecurityContext to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodSecurityContext", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodSpec to json stream.
func (o OptIoK8sAPICoreV1PodSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodSpec from json iterator.
func (o *OptIoK8sAPICoreV1PodSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodStatus to json stream.
func (o OptIoK8sAPICoreV1PodStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodStatus from json iterator.
func (o *OptIoK8sAPICoreV1PodStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PodTemplateSpec to json stream.
func (o OptIoK8sAPICoreV1PodTemplateSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodTemplateSpec from json iterator.
func (o *OptIoK8sAPICoreV1PodTemplateSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PodTemplateSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PodTemplateSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1PortworxVolumeSource to json stream.
func (o OptIoK8sAPICoreV1PortworxVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PortworxVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1PortworxVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1PortworxVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1PortworxVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1Probe to json stream.
func (o OptIoK8sAPICoreV1Probe) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Probe from json iterator.
func (o *OptIoK8sAPICoreV1Probe) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1Probe to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1Probe", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ProjectedVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ProjectedVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ProjectedVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ProjectedVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ProjectedVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ProjectedVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1QuobyteVolumeSource to json stream.
func (o OptIoK8sAPICoreV1QuobyteVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1QuobyteVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1QuobyteVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1QuobyteVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1QuobyteVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1RBDPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1RBDPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1RBDPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1RBDPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1RBDPersistentVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1RBDPersistentVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1RBDVolumeSource to json stream.
func (o OptIoK8sAPICoreV1RBDVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1RBDVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1RBDVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1RBDVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1RBDVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ReplicationControllerSpec to json stream.
func (o OptIoK8sAPICoreV1ReplicationControllerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ReplicationControllerSpec from json iterator.
func (o *OptIoK8sAPICoreV1ReplicationControllerSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ReplicationControllerSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ReplicationControllerSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ReplicationControllerStatus to json stream.
func (o OptIoK8sAPICoreV1ReplicationControllerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ReplicationControllerStatus from json iterator.
func (o *OptIoK8sAPICoreV1ReplicationControllerStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ReplicationControllerStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ReplicationControllerStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceFieldSelector to json stream.
func (o OptIoK8sAPICoreV1ResourceFieldSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceFieldSelector from json iterator.
func (o *OptIoK8sAPICoreV1ResourceFieldSelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ResourceFieldSelector to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ResourceFieldSelector", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceQuotaSpec to json stream.
func (o OptIoK8sAPICoreV1ResourceQuotaSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceQuotaSpec from json iterator.
func (o *OptIoK8sAPICoreV1ResourceQuotaSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ResourceQuotaSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ResourceQuotaSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceQuotaStatus to json stream.
func (o OptIoK8sAPICoreV1ResourceQuotaStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceQuotaStatus from json iterator.
func (o *OptIoK8sAPICoreV1ResourceQuotaStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ResourceQuotaStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ResourceQuotaStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceRequirements to json stream.
func (o OptIoK8sAPICoreV1ResourceRequirements) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceRequirements from json iterator.
func (o *OptIoK8sAPICoreV1ResourceRequirements) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ResourceRequirements to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ResourceRequirements", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SELinuxOptions to json stream.
func (o OptIoK8sAPICoreV1SELinuxOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SELinuxOptions from json iterator.
func (o *OptIoK8sAPICoreV1SELinuxOptions) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SELinuxOptions to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SELinuxOptions", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ScaleIOPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ScaleIOPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ScaleIOVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ScaleIOVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ScaleIOVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ScaleIOVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ScaleIOVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ScaleIOVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ScopeSelector to json stream.
func (o OptIoK8sAPICoreV1ScopeSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ScopeSelector from json iterator.
func (o *OptIoK8sAPICoreV1ScopeSelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ScopeSelector to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ScopeSelector", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SeccompProfile to json stream.
func (o OptIoK8sAPICoreV1SeccompProfile) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SeccompProfile from json iterator.
func (o *OptIoK8sAPICoreV1SeccompProfile) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SeccompProfile to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SeccompProfile", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretEnvSource to json stream.
func (o OptIoK8sAPICoreV1SecretEnvSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretEnvSource from json iterator.
func (o *OptIoK8sAPICoreV1SecretEnvSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecretEnvSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecretEnvSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretKeySelector to json stream.
func (o OptIoK8sAPICoreV1SecretKeySelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretKeySelector from json iterator.
func (o *OptIoK8sAPICoreV1SecretKeySelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecretKeySelector to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecretKeySelector", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretProjection to json stream.
func (o OptIoK8sAPICoreV1SecretProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretProjection from json iterator.
func (o *OptIoK8sAPICoreV1SecretProjection) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecretProjection to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecretProjection", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretReference to json stream.
func (o OptIoK8sAPICoreV1SecretReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretReference from json iterator.
func (o *OptIoK8sAPICoreV1SecretReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecretReference to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecretReference", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretVolumeSource to json stream.
func (o OptIoK8sAPICoreV1SecretVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1SecretVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecretVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecretVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SecurityContext to json stream.
func (o OptIoK8sAPICoreV1SecurityContext) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecurityContext from json iterator.
func (o *OptIoK8sAPICoreV1SecurityContext) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SecurityContext to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SecurityContext", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ServiceAccountTokenProjection to json stream.
func (o OptIoK8sAPICoreV1ServiceAccountTokenProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ServiceAccountTokenProjection from json iterator.
func (o *OptIoK8sAPICoreV1ServiceAccountTokenProjection) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ServiceAccountTokenProjection to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ServiceAccountTokenProjection", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ServiceSpec to json stream.
func (o OptIoK8sAPICoreV1ServiceSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ServiceSpec from json iterator.
func (o *OptIoK8sAPICoreV1ServiceSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ServiceSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ServiceSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1ServiceStatus to json stream.
func (o OptIoK8sAPICoreV1ServiceStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ServiceStatus from json iterator.
func (o *OptIoK8sAPICoreV1ServiceStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1ServiceStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1ServiceStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1SessionAffinityConfig to json stream.
func (o OptIoK8sAPICoreV1SessionAffinityConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SessionAffinityConfig from json iterator.
func (o *OptIoK8sAPICoreV1SessionAffinityConfig) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1SessionAffinityConfig to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1SessionAffinityConfig", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1StorageOSPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1StorageOSPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1StorageOSPersistentVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1StorageOSPersistentVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1StorageOSVolumeSource to json stream.
func (o OptIoK8sAPICoreV1StorageOSVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1StorageOSVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1StorageOSVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1StorageOSVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1StorageOSVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1TCPSocketAction to json stream.
func (o OptIoK8sAPICoreV1TCPSocketAction) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1TCPSocketAction from json iterator.
func (o *OptIoK8sAPICoreV1TCPSocketAction) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1TCPSocketAction to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1TCPSocketAction", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1TypedLocalObjectReference to json stream.
func (o OptIoK8sAPICoreV1TypedLocalObjectReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1TypedLocalObjectReference from json iterator.
func (o *OptIoK8sAPICoreV1TypedLocalObjectReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1TypedLocalObjectReference to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1TypedLocalObjectReference", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1VolumeNodeAffinity to json stream.
func (o OptIoK8sAPICoreV1VolumeNodeAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1VolumeNodeAffinity from json iterator.
func (o *OptIoK8sAPICoreV1VolumeNodeAffinity) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1VolumeNodeAffinity to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1VolumeNodeAffinity", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1VsphereVirtualDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1VsphereVirtualDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPICoreV1WindowsSecurityContextOptions to json stream.
func (o OptIoK8sAPICoreV1WindowsSecurityContextOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1WindowsSecurityContextOptions from json iterator.
func (o *OptIoK8sAPICoreV1WindowsSecurityContextOptions) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPICoreV1WindowsSecurityContextOptions to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPICoreV1WindowsSecurityContextOptions", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1EndpointConditions to json stream.
func (o OptIoK8sAPIDiscoveryV1EndpointConditions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1EndpointConditions from json iterator.
func (o *OptIoK8sAPIDiscoveryV1EndpointConditions) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIDiscoveryV1EndpointConditions to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIDiscoveryV1EndpointConditions", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1EndpointHints to json stream.
func (o OptIoK8sAPIDiscoveryV1EndpointHints) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1EndpointHints from json iterator.
func (o *OptIoK8sAPIDiscoveryV1EndpointHints) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIDiscoveryV1EndpointHints to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIDiscoveryV1EndpointHints", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1beta1EndpointConditions to json stream.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointConditions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1beta1EndpointConditions from json iterator.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointConditions) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIDiscoveryV1beta1EndpointConditions to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIDiscoveryV1beta1EndpointConditions", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1beta1EndpointHints to json stream.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointHints) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1beta1EndpointHints from json iterator.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointHints) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIDiscoveryV1beta1EndpointHints to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIDiscoveryV1beta1EndpointHints", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIEventsV1EventSeries to json stream.
func (o OptIoK8sAPIEventsV1EventSeries) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIEventsV1EventSeries from json iterator.
func (o *OptIoK8sAPIEventsV1EventSeries) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIEventsV1EventSeries to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIEventsV1EventSeries", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIEventsV1beta1EventSeries to json stream.
func (o OptIoK8sAPIEventsV1beta1EventSeries) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIEventsV1beta1EventSeries from json iterator.
func (o *OptIoK8sAPIEventsV1beta1EventSeries) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIEventsV1beta1EventSeries to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIEventsV1beta1EventSeries", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1GroupSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1GroupSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1GroupSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1GroupSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1GroupSubject to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1GroupSubject", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1LimitResponse to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitResponse) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1LimitResponse from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1LimitResponse) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1LimitResponse to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1LimitResponse", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1QueuingConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1QueuingConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1UserSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1UserSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1UserSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1UserSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta1UserSubject to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta1UserSubject", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2GroupSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2GroupSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2GroupSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2GroupSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2GroupSubject to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2GroupSubject", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2LimitResponse to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitResponse) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2LimitResponse from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2LimitResponse) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2LimitResponse to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2LimitResponse", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2QueuingConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2QueuingConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2UserSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2UserSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2UserSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2UserSubject) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIFlowcontrolV1beta2UserSubject to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIFlowcontrolV1beta2UserSubject", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1HTTPIngressRuleValue to json stream.
func (o OptIoK8sAPINetworkingV1HTTPIngressRuleValue) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1HTTPIngressRuleValue from json iterator.
func (o *OptIoK8sAPINetworkingV1HTTPIngressRuleValue) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1HTTPIngressRuleValue to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1HTTPIngressRuleValue", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IPBlock to json stream.
func (o OptIoK8sAPINetworkingV1IPBlock) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IPBlock from json iterator.
func (o *OptIoK8sAPINetworkingV1IPBlock) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IPBlock to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IPBlock", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressBackend to json stream.
func (o OptIoK8sAPINetworkingV1IngressBackend) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressBackend from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressBackend) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressBackend to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressBackend", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressClassParametersReference to json stream.
func (o OptIoK8sAPINetworkingV1IngressClassParametersReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressClassParametersReference from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressClassParametersReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressClassParametersReference to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressClassParametersReference", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressClassSpec to json stream.
func (o OptIoK8sAPINetworkingV1IngressClassSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressClassSpec from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressClassSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressClassSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressClassSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressServiceBackend to json stream.
func (o OptIoK8sAPINetworkingV1IngressServiceBackend) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressServiceBackend from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressServiceBackend) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressServiceBackend to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressServiceBackend", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressSpec to json stream.
func (o OptIoK8sAPINetworkingV1IngressSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressSpec from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressStatus to json stream.
func (o OptIoK8sAPINetworkingV1IngressStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressStatus from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1IngressStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1IngressStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1NetworkPolicySpec to json stream.
func (o OptIoK8sAPINetworkingV1NetworkPolicySpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1NetworkPolicySpec from json iterator.
func (o *OptIoK8sAPINetworkingV1NetworkPolicySpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1NetworkPolicySpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1NetworkPolicySpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINetworkingV1ServiceBackendPort to json stream.
func (o OptIoK8sAPINetworkingV1ServiceBackendPort) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1ServiceBackendPort from json iterator.
func (o *OptIoK8sAPINetworkingV1ServiceBackendPort) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINetworkingV1ServiceBackendPort to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINetworkingV1ServiceBackendPort", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1Overhead to json stream.
func (o OptIoK8sAPINodeV1Overhead) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1Overhead from json iterator.
func (o *OptIoK8sAPINodeV1Overhead) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1Overhead to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1Overhead", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1Scheduling to json stream.
func (o OptIoK8sAPINodeV1Scheduling) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1Scheduling from json iterator.
func (o *OptIoK8sAPINodeV1Scheduling) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1Scheduling to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1Scheduling", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1alpha1Overhead to json stream.
func (o OptIoK8sAPINodeV1alpha1Overhead) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1alpha1Overhead from json iterator.
func (o *OptIoK8sAPINodeV1alpha1Overhead) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1alpha1Overhead to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1alpha1Overhead", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1alpha1Scheduling to json stream.
func (o OptIoK8sAPINodeV1alpha1Scheduling) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1alpha1Scheduling from json iterator.
func (o *OptIoK8sAPINodeV1alpha1Scheduling) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1alpha1Scheduling to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1alpha1Scheduling", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1beta1Overhead to json stream.
func (o OptIoK8sAPINodeV1beta1Overhead) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1beta1Overhead from json iterator.
func (o *OptIoK8sAPINodeV1beta1Overhead) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1beta1Overhead to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1beta1Overhead", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPINodeV1beta1Scheduling to json stream.
func (o OptIoK8sAPINodeV1beta1Scheduling) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1beta1Scheduling from json iterator.
func (o *OptIoK8sAPINodeV1beta1Scheduling) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPINodeV1beta1Scheduling to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPINodeV1beta1Scheduling", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1PodDisruptionBudgetSpec to json stream.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1PodDisruptionBudgetSpec from json iterator.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1PodDisruptionBudgetStatus to json stream.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1PodDisruptionBudgetStatus from json iterator.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec to json stream.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus to json stream.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1PodSecurityPolicySpec to json stream.
func (o OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1PodSecurityPolicySpec from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions to json stream.
func (o OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions to json stream.
func (o OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIRbacV1AggregationRule to json stream.
func (o OptIoK8sAPIRbacV1AggregationRule) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIRbacV1AggregationRule from json iterator.
func (o *OptIoK8sAPIRbacV1AggregationRule) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIRbacV1AggregationRule to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIRbacV1AggregationRule", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIStorageV1VolumeAttachmentStatus to json stream.
func (o OptIoK8sAPIStorageV1VolumeAttachmentStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIStorageV1VolumeAttachmentStatus from json iterator.
func (o *OptIoK8sAPIStorageV1VolumeAttachmentStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIStorageV1VolumeAttachmentStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIStorageV1VolumeAttachmentStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIStorageV1VolumeError to json stream.
func (o OptIoK8sAPIStorageV1VolumeError) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIStorageV1VolumeError from json iterator.
func (o *OptIoK8sAPIStorageV1VolumeError) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIStorageV1VolumeError to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIStorageV1VolumeError", i.Next())
	}
}

// WriteJSON writes json value of IoK8sAPIStorageV1VolumeNodeResources to json stream.
func (o OptIoK8sAPIStorageV1VolumeNodeResources) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIStorageV1VolumeNodeResources from json iterator.
func (o *OptIoK8sAPIStorageV1VolumeNodeResources) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sAPIStorageV1VolumeNodeResources to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sAPIStorageV1VolumeNodeResources", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgAPIResourceQuantity to json stream.
func (o OptIoK8sApimachineryPkgAPIResourceQuantity) WriteJSON(j *json.Stream) {
}

// ReadJSON reads json value of IoK8sApimachineryPkgAPIResourceQuantity from json iterator.
func (o *OptIoK8sApimachineryPkgAPIResourceQuantity) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgAPIResourceQuantity to nil`)
	}
	switch i.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgAPIResourceQuantity", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1LabelSelector to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1LabelSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1LabelSelector from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1LabelSelector) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1LabelSelector to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1LabelSelector", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1ListMeta to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1ListMeta) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1ListMeta from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1ListMeta) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1ListMeta to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1ListMeta", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1MicroTime to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1MicroTime) WriteJSON(j *json.Stream) {
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1MicroTime from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1MicroTime) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1MicroTime to nil`)
	}
	switch i.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1MicroTime", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1ObjectMeta to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1ObjectMeta from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1ObjectMeta to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1ObjectMeta", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1Preconditions to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1Preconditions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1Preconditions from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1Preconditions) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1Preconditions to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1Preconditions", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1StatusDetails to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1StatusDetails) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1StatusDetails from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1StatusDetails) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1StatusDetails to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1StatusDetails", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1Time to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1Time) WriteJSON(j *json.Stream) {
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1Time from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1Time) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgApisMetaV1Time to nil`)
	}
	switch i.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgApisMetaV1Time", i.Next())
	}
}

// WriteJSON writes json value of IoK8sApimachineryPkgUtilIntstrIntOrString to json stream.
func (o OptIoK8sApimachineryPkgUtilIntstrIntOrString) WriteJSON(j *json.Stream) {
}

// ReadJSON reads json value of IoK8sApimachineryPkgUtilIntstrIntOrString from json iterator.
func (o *OptIoK8sApimachineryPkgUtilIntstrIntOrString) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sApimachineryPkgUtilIntstrIntOrString to nil`)
	}
	switch i.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sApimachineryPkgUtilIntstrIntOrString", i.Next())
	}
}

// WriteJSON writes json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec to json stream.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec from json iterator.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec", i.Next())
	}
}

// WriteJSON writes json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus to json stream.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus from json iterator.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus", i.Next())
	}
}

// WriteJSON writes json value of IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference to json stream.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference from json iterator.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference to nil`)
	}
	switch i.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference", i.Next())
	}
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(i *json.Iter) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptString to nil`)
	}
	switch i.Next() {
	case json.String:
		o.Set = true
		v, err := i.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptString", i.Next())
	}
}

func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1MutatingWebhookConfigurationListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized from json stream.
func (s *WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchAdmissionregistrationV1ValidatingWebhookConfigurationListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized from json stream.
func (s *WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchApiextensionsV1CustomResourceDefinitionListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiextensionsV1CustomResourceDefinitionListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchApiextensionsV1CustomResourceDefinitionListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiextensionsV1CustomResourceDefinitionListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchApiextensionsV1CustomResourceDefinitionListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiextensionsV1CustomResourceDefinitionListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchApiextensionsV1CustomResourceDefinitionListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchApiextensionsV1CustomResourceDefinitionListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchApiextensionsV1CustomResourceDefinitionListUnauthorized from json stream.
func (s *WatchApiextensionsV1CustomResourceDefinitionListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchApiextensionsV1CustomResourceDefinitionListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchApiregistrationV1APIServiceListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchApiregistrationV1APIServiceListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchApiregistrationV1APIServiceListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchApiregistrationV1APIServiceListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiregistrationV1APIServiceListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchApiregistrationV1APIServiceListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiregistrationV1APIServiceListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchApiregistrationV1APIServiceListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchApiregistrationV1APIServiceListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchApiregistrationV1APIServiceListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchApiregistrationV1APIServiceListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchApiregistrationV1APIServiceListUnauthorized from json stream.
func (s *WatchApiregistrationV1APIServiceListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchApiregistrationV1APIServiceListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1ControllerRevisionListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized from json stream.
func (s *WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DaemonSetListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DaemonSetListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DaemonSetListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DaemonSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DaemonSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DaemonSetListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1DaemonSetListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAppsV1DaemonSetListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAppsV1DaemonSetListForAllNamespacesUnauthorized from json stream.
func (s *WatchAppsV1DaemonSetListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchAppsV1DaemonSetListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchAppsV1DeploymentListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1DeploymentListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DeploymentListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DeploymentListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DeploymentListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DeploymentListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DeploymentListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1DeploymentListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1DeploymentListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1DeploymentListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAppsV1DeploymentListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAppsV1DeploymentListForAllNamespacesUnauthorized from json stream.
func (s *WatchAppsV1DeploymentListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchAppsV1DeploymentListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1ReplicaSetListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized from json stream.
func (s *WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1StatefulSetListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1StatefulSetListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1StatefulSetListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1StatefulSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAppsV1StatefulSetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAppsV1StatefulSetListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchAppsV1StatefulSetListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAppsV1StatefulSetListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAppsV1StatefulSetListForAllNamespacesUnauthorized from json stream.
func (s *WatchAppsV1StatefulSetListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchAppsV1StatefulSetListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized from json stream.
func (s *WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized from json stream.
func (s *WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized from json stream.
func (s *WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchBatchV1CronJobListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchBatchV1CronJobListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1CronJobListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1CronJobListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1CronJobListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1CronJobListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1CronJobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1CronJobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1CronJobListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchBatchV1CronJobListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchBatchV1CronJobListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchBatchV1CronJobListForAllNamespacesUnauthorized from json stream.
func (s *WatchBatchV1CronJobListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchBatchV1CronJobListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchBatchV1JobListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchBatchV1JobListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchBatchV1JobListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchBatchV1JobListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1JobListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1JobListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1JobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1JobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1JobListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchBatchV1JobListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchBatchV1JobListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchBatchV1JobListForAllNamespacesUnauthorized from json stream.
func (s *WatchBatchV1JobListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchBatchV1JobListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchBatchV1beta1CronJobListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized from json stream.
func (s *WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCertificatesV1CertificateSigningRequestListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCertificatesV1CertificateSigningRequestListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCertificatesV1CertificateSigningRequestListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCertificatesV1CertificateSigningRequestListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCertificatesV1CertificateSigningRequestListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCertificatesV1CertificateSigningRequestListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCertificatesV1CertificateSigningRequestListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCertificatesV1CertificateSigningRequestListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCertificatesV1CertificateSigningRequestListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCertificatesV1CertificateSigningRequestListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCertificatesV1CertificateSigningRequestListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCertificatesV1CertificateSigningRequestListUnauthorized from json stream.
func (s *WatchCertificatesV1CertificateSigningRequestListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCertificatesV1CertificateSigningRequestListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoordinationV1LeaseListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoordinationV1LeaseListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoordinationV1LeaseListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoordinationV1LeaseListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoordinationV1LeaseListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoordinationV1LeaseListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoordinationV1LeaseListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoordinationV1LeaseListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoordinationV1LeaseListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoordinationV1LeaseListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoordinationV1LeaseListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ConfigMapListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ConfigMapListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ConfigMapListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ConfigMapListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ConfigMapListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ConfigMapListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ConfigMapListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1ConfigMapListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1ConfigMapListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1ConfigMapListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1ConfigMapListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1EndpointsListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1EndpointsListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EndpointsListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1EndpointsListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EndpointsListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1EndpointsListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EndpointsListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1EndpointsListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EndpointsListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1EndpointsListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1EndpointsListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1EndpointsListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1EndpointsListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1EndpointsListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1EventListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1EventListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1EventListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1EventListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1EventListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1EventListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1EventListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1EventListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1EventListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1EventListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1LimitRangeListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1LimitRangeListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1LimitRangeListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1LimitRangeListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1LimitRangeListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1LimitRangeListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1LimitRangeListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1LimitRangeListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1LimitRangeListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1LimitRangeListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1LimitRangeListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1NamespaceListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NamespaceListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1NamespaceListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NamespaceListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1NamespaceListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1NamespaceListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1NamespaceListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1NamespaceListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1NamespaceListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NamespaceListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1NamespaceListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1NamespaceListUnauthorized from json stream.
func (s *WatchCoreV1NamespaceListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1NamespaceListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1NodeListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NodeListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1NodeListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NodeListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1NodeListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NodeListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1NodeListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1NodeListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1NodeListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1NodeListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1NodeListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1NodeListUnauthorized from json stream.
func (s *WatchCoreV1NodeListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1NodeListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeClaimListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1PersistentVolumeListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1PersistentVolumeListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1PersistentVolumeListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1PersistentVolumeListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1PersistentVolumeListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PersistentVolumeListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PersistentVolumeListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1PersistentVolumeListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1PersistentVolumeListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1PersistentVolumeListUnauthorized from json stream.
func (s *WatchCoreV1PersistentVolumeListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1PersistentVolumeListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1PodListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1PodListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchCoreV1PodListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1PodListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PodListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PodListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchCoreV1PodListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1PodListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1PodListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1PodListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1PodListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PodTemplateListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodTemplateListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PodTemplateListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodTemplateListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1PodTemplateListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1PodTemplateListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1PodTemplateListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1PodTemplateListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1PodTemplateListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1PodTemplateListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1PodTemplateListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ReplicationControllerListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ResourceQuotaListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1SecretListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1SecretListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1SecretListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1SecretListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1SecretListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1SecretListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1SecretListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1SecretListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1SecretListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1SecretListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1SecretListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1SecretListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1SecretListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1SecretListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ServiceAccountListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchCoreV1ServiceListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ServiceListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ServiceListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ServiceListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchCoreV1ServiceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchCoreV1ServiceListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchCoreV1ServiceListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchCoreV1ServiceListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchCoreV1ServiceListForAllNamespacesUnauthorized from json stream.
func (s *WatchCoreV1ServiceListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchCoreV1ServiceListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchDiscoveryV1EndpointSliceListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized from json stream.
func (s *WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized from json stream.
func (s *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchEventsV1EventListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchEventsV1EventListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1EventListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchEventsV1EventListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchEventsV1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchEventsV1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1EventListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchEventsV1EventListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchEventsV1EventListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchEventsV1EventListForAllNamespacesUnauthorized from json stream.
func (s *WatchEventsV1EventListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchEventsV1EventListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchEventsV1beta1EventListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchEventsV1beta1EventListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1beta1EventListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchEventsV1beta1EventListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1beta1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchEventsV1beta1EventListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1beta1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchEventsV1beta1EventListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchEventsV1beta1EventListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchEventsV1beta1EventListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchEventsV1beta1EventListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchEventsV1beta1EventListForAllNamespacesUnauthorized from json stream.
func (s *WatchEventsV1beta1EventListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchEventsV1beta1EventListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchFlowcontrolApiserverV1beta1FlowSchemaListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized from json stream.
func (s *WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized from json stream.
func (s *WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchFlowcontrolApiserverV1beta2FlowSchemaListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized from json stream.
func (s *WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized from json stream.
func (s *WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchInternalApiserverV1alpha1StorageVersionListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchInternalApiserverV1alpha1StorageVersionListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchInternalApiserverV1alpha1StorageVersionListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchInternalApiserverV1alpha1StorageVersionListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchInternalApiserverV1alpha1StorageVersionListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchInternalApiserverV1alpha1StorageVersionListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchInternalApiserverV1alpha1StorageVersionListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchInternalApiserverV1alpha1StorageVersionListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchInternalApiserverV1alpha1StorageVersionListUnauthorized from json stream.
func (s *WatchInternalApiserverV1alpha1StorageVersionListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchInternalApiserverV1alpha1StorageVersionListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchNetworkingV1IngressClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchNetworkingV1IngressClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchNetworkingV1IngressClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchNetworkingV1IngressClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1IngressClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1IngressClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchNetworkingV1IngressClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchNetworkingV1IngressClassListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNetworkingV1IngressClassListUnauthorized from json stream.
func (s *WatchNetworkingV1IngressClassListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchNetworkingV1IngressClassListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchNetworkingV1IngressListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchNetworkingV1IngressListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1IngressListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1IngressListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1IngressListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1IngressListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchNetworkingV1IngressListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchNetworkingV1IngressListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNetworkingV1IngressListForAllNamespacesUnauthorized from json stream.
func (s *WatchNetworkingV1IngressListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchNetworkingV1IngressListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchNetworkingV1NetworkPolicyListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized from json stream.
func (s *WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchNodeV1RuntimeClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1RuntimeClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchNodeV1RuntimeClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchNodeV1RuntimeClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1RuntimeClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchNodeV1RuntimeClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNodeV1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1RuntimeClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1RuntimeClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchNodeV1RuntimeClassListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNodeV1RuntimeClassListUnauthorized from json stream.
func (s *WatchNodeV1RuntimeClassListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchNodeV1RuntimeClassListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchNodeV1alpha1RuntimeClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1alpha1RuntimeClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchNodeV1alpha1RuntimeClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchNodeV1alpha1RuntimeClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1alpha1RuntimeClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchNodeV1alpha1RuntimeClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1alpha1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNodeV1alpha1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1alpha1RuntimeClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1alpha1RuntimeClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchNodeV1alpha1RuntimeClassListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNodeV1alpha1RuntimeClassListUnauthorized from json stream.
func (s *WatchNodeV1alpha1RuntimeClassListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchNodeV1alpha1RuntimeClassListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchNodeV1beta1RuntimeClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1beta1RuntimeClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchNodeV1beta1RuntimeClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchNodeV1beta1RuntimeClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1beta1RuntimeClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchNodeV1beta1RuntimeClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1beta1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchNodeV1beta1RuntimeClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchNodeV1beta1RuntimeClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchNodeV1beta1RuntimeClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchNodeV1beta1RuntimeClassListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchNodeV1beta1RuntimeClassListUnauthorized from json stream.
func (s *WatchNodeV1beta1RuntimeClassListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchNodeV1beta1RuntimeClassListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1PodDisruptionBudgetListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized from json stream.
func (s *WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized from json stream.
func (s *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodSecurityPolicyListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodSecurityPolicyListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodSecurityPolicyListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodSecurityPolicyListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchPolicyV1beta1PodSecurityPolicyListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchPolicyV1beta1PodSecurityPolicyListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchPolicyV1beta1PodSecurityPolicyListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchPolicyV1beta1PodSecurityPolicyListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchPolicyV1beta1PodSecurityPolicyListUnauthorized from json stream.
func (s *WatchPolicyV1beta1PodSecurityPolicyListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchPolicyV1beta1PodSecurityPolicyListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1ClusterRoleBindingListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized from json stream.
func (s *WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchRbacAuthorizationV1ClusterRoleListApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1ClusterRoleListApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1ClusterRoleListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1ClusterRoleListApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1ClusterRoleListApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchRbacAuthorizationV1ClusterRoleListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchRbacAuthorizationV1ClusterRoleListUnauthorized from json stream.
func (s *WatchRbacAuthorizationV1ClusterRoleListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchRbacAuthorizationV1ClusterRoleListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleBindingListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized from json stream.
func (s *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {}
func (WatchRbacAuthorizationV1RoleListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized from json stream.
func (s *WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchSchedulingV1PriorityClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchSchedulingV1PriorityClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchSchedulingV1PriorityClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchSchedulingV1PriorityClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchSchedulingV1PriorityClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchSchedulingV1PriorityClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchSchedulingV1PriorityClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchSchedulingV1PriorityClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchSchedulingV1PriorityClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchSchedulingV1PriorityClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchSchedulingV1PriorityClassListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchSchedulingV1PriorityClassListUnauthorized from json stream.
func (s *WatchSchedulingV1PriorityClassListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchSchedulingV1PriorityClassListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchStorageV1CSIDriverListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1CSIDriverListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchStorageV1CSIDriverListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1CSIDriverListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1CSIDriverListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1CSIDriverListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1CSIDriverListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1CSIDriverListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1CSIDriverListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1CSIDriverListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1CSIDriverListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1CSIDriverListUnauthorized from json stream.
func (s *WatchStorageV1CSIDriverListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchStorageV1CSIDriverListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchStorageV1CSINodeListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1CSINodeListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchStorageV1CSINodeListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1CSINodeListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchStorageV1CSINodeListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1CSINodeListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1CSINodeListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1CSINodeListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1CSINodeListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1CSINodeListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1CSINodeListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1CSINodeListUnauthorized from json stream.
func (s *WatchStorageV1CSINodeListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchStorageV1CSINodeListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchStorageV1StorageClassListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1StorageClassListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchStorageV1StorageClassListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1StorageClassListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1StorageClassListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1StorageClassListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1StorageClassListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1StorageClassListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1StorageClassListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1StorageClassListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1StorageClassListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1StorageClassListUnauthorized from json stream.
func (s *WatchStorageV1StorageClassListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchStorageV1StorageClassListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchStorageV1VolumeAttachmentListApplicationJSONOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1VolumeAttachmentListApplicationJSONOK) ReadJSON(i *json.Iter) error { return nil }

func (WatchStorageV1VolumeAttachmentListApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {}
func (WatchStorageV1VolumeAttachmentListApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1VolumeAttachmentListApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1VolumeAttachmentListApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1VolumeAttachmentListApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1VolumeAttachmentListApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1VolumeAttachmentListApplicationYamlOK) WriteJSON(j *json.Stream)    {}
func (WatchStorageV1VolumeAttachmentListApplicationYamlOK) ReadJSON(i *json.Iter) error { return nil }

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1VolumeAttachmentListUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1VolumeAttachmentListUnauthorized from json stream.
func (s *WatchStorageV1VolumeAttachmentListUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchStorageV1VolumeAttachmentListUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized from json stream.
func (s *WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}

func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationJSONStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationVndKubernetesProtobufStreamWatchOK) ReadJSON(i *json.Iter) error {
	return nil
}

func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationYamlOK) WriteJSON(j *json.Stream) {
}
func (WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesApplicationYamlOK) ReadJSON(i *json.Iter) error {
	return nil
}

// WriteJSON implements json.Marshaler.
func (s WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// ReadJSON reads WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized from json stream.
func (s *WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized) ReadJSON(i *json.Iter) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized to nil`)
	}
	return i.ObjectBytes(func(i *json.Iter, k []byte) error {
		switch string(k) {
		default:
			return i.Skip()
		}
		return nil
	})
}
