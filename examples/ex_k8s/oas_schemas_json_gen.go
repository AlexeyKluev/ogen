// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admissionReviewVersions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.AdmissionReviewVersions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("clientConfig")
	s.ClientConfig.WriteJSON(j)
	if s.FailurePolicy.Set {
		more.More()
		j.WriteObjectField("failurePolicy")
		s.FailurePolicy.WriteJSON(j)
	}
	if s.MatchPolicy.Set {
		more.More()
		j.WriteObjectField("matchPolicy")
		s.MatchPolicy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.ObjectSelector.Set {
		more.More()
		j.WriteObjectField("objectSelector")
		s.ObjectSelector.WriteJSON(j)
	}
	if s.ReinvocationPolicy.Set {
		more.More()
		j.WriteObjectField("reinvocationPolicy")
		s.ReinvocationPolicy.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("sideEffects")
	j.WriteString(s.SideEffects)
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1MutatingWebhook json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhook) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1MutatingWebhook json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhook from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admissionReviewVersions":
			// Unsupported kind "array" for field "AdmissionReviewVersions".
			i.Skip()
			return true
		case "clientConfig":
			if err := s.ClientConfig.ReadJSON(i); err != nil {
				i.ReportError("Field ClientConfig", err.Error())
				return false
			}
			return true
		case "failurePolicy":
			s.FailurePolicy.Reset()
			if err := s.FailurePolicy.ReadJSON(i); err != nil {
				i.ReportError("Field FailurePolicy", err.Error())
				return false
			}
			return true
		case "matchPolicy":
			s.MatchPolicy.Reset()
			if err := s.MatchPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field MatchPolicy", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespaceSelector":
			s.NamespaceSelector.Reset()
			if err := s.NamespaceSelector.ReadJSON(i); err != nil {
				i.ReportError("Field NamespaceSelector", err.Error())
				return false
			}
			return true
		case "objectSelector":
			s.ObjectSelector.Reset()
			if err := s.ObjectSelector.ReadJSON(i); err != nil {
				i.ReportError("Field ObjectSelector", err.Error())
				return false
			}
			return true
		case "reinvocationPolicy":
			s.ReinvocationPolicy.Reset()
			if err := s.ReinvocationPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ReinvocationPolicy", err.Error())
				return false
			}
			return true
		case "rules":
			// Unsupported kind "array" for field "Rules".
			i.Skip()
			return true
		case "sideEffects":
			s.SideEffects = i.ReadString()
			return i.Error == nil
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TimeoutSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Webhooks != nil {
		more.More()
		j.WriteObjectField("webhooks")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Webhooks {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "webhooks":
			// Unsupported kind "array" for field "Webhooks".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1RuleWithOperations) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroups != nil {
		more.More()
		j.WriteObjectField("apiGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiGroups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ApiVersions != nil {
		more.More()
		j.WriteObjectField("apiVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiVersions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Operations != nil {
		more.More()
		j.WriteObjectField("operations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Operations {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Resources != nil {
		more.More()
		j.WriteObjectField("resources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Resources {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Scope.Set {
		more.More()
		j.WriteObjectField("scope")
		s.Scope.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1RuleWithOperations json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1RuleWithOperations) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1RuleWithOperations json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1RuleWithOperations from json stream.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroups":
			// Unsupported kind "array" for field "ApiGroups".
			i.Skip()
			return true
		case "apiVersions":
			// Unsupported kind "array" for field "ApiVersions".
			i.Skip()
			return true
		case "operations":
			// Unsupported kind "array" for field "Operations".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "array" for field "Resources".
			i.Skip()
			return true
		case "scope":
			s.Scope.Reset()
			if err := s.Scope.ReadJSON(i); err != nil {
				i.ReportError("Field Scope", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1ServiceReference json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1ServiceReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1ServiceReference json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ServiceReference from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				i.ReportError("Field Port", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("admissionReviewVersions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.AdmissionReviewVersions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("clientConfig")
	s.ClientConfig.WriteJSON(j)
	if s.FailurePolicy.Set {
		more.More()
		j.WriteObjectField("failurePolicy")
		s.FailurePolicy.WriteJSON(j)
	}
	if s.MatchPolicy.Set {
		more.More()
		j.WriteObjectField("matchPolicy")
		s.MatchPolicy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.ObjectSelector.Set {
		more.More()
		j.WriteObjectField("objectSelector")
		s.ObjectSelector.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("sideEffects")
	j.WriteString(s.SideEffects)
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1ValidatingWebhook json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhook) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1ValidatingWebhook json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhook from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admissionReviewVersions":
			// Unsupported kind "array" for field "AdmissionReviewVersions".
			i.Skip()
			return true
		case "clientConfig":
			if err := s.ClientConfig.ReadJSON(i); err != nil {
				i.ReportError("Field ClientConfig", err.Error())
				return false
			}
			return true
		case "failurePolicy":
			s.FailurePolicy.Reset()
			if err := s.FailurePolicy.ReadJSON(i); err != nil {
				i.ReportError("Field FailurePolicy", err.Error())
				return false
			}
			return true
		case "matchPolicy":
			s.MatchPolicy.Reset()
			if err := s.MatchPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field MatchPolicy", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespaceSelector":
			s.NamespaceSelector.Reset()
			if err := s.NamespaceSelector.ReadJSON(i); err != nil {
				i.ReportError("Field NamespaceSelector", err.Error())
				return false
			}
			return true
		case "objectSelector":
			s.ObjectSelector.Reset()
			if err := s.ObjectSelector.ReadJSON(i); err != nil {
				i.ReportError("Field ObjectSelector", err.Error())
				return false
			}
			return true
		case "rules":
			// Unsupported kind "array" for field "Rules".
			i.Skip()
			return true
		case "sideEffects":
			s.SideEffects = i.ReadString()
			return i.Error == nil
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TimeoutSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Webhooks != nil {
		more.More()
		j.WriteObjectField("webhooks")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Webhooks {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "webhooks":
			// Unsupported kind "array" for field "Webhooks".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1WebhookClientConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "caBundle".
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1WebhookClientConfig json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1WebhookClientConfig) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1WebhookClientConfig json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1WebhookClientConfig from json stream.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "caBundle":
			// Unsupported kind "pointer" for field "CaBundle".
			i.Skip()
			return true
		case "service":
			s.Service.Reset()
			if err := s.Service.ReadJSON(i); err != nil {
				i.ReportError("Field Service", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiServerID.Set {
		more.More()
		j.WriteObjectField("apiServerID")
		s.ApiServerID.WriteJSON(j)
	}
	if s.DecodableVersions != nil {
		more.More()
		j.WriteObjectField("decodableVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.DecodableVersions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EncodingVersion.Set {
		more.More()
		j.WriteObjectField("encodingVersion")
		s.EncodingVersion.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion json value to io.Writer.
func (s IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion json value from io.Reader.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiServerID":
			s.ApiServerID.Reset()
			if err := s.ApiServerID.ReadJSON(i); err != nil {
				i.ReportError("Field ApiServerID", err.Error())
				return false
			}
			return true
		case "decodableVersions":
			// Unsupported kind "array" for field "DecodableVersions".
			i.Skip()
			return true
		case "encodingVersion":
			s.EncodingVersion.Reset()
			if err := s.EncodingVersion.ReadJSON(i); err != nil {
				i.ReportError("Field EncodingVersion", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "spec".
	more.More()
	j.WriteObjectField("status")
	s.Status.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIApiserverinternalV1alpha1StorageVersion json value to io.Writer.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersion) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIApiserverinternalV1alpha1StorageVersion json value from io.Reader.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersion from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			// Unsupported kind "alias" for field "Spec".
			i.Skip()
			return true
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("reason")
	j.WriteString(s.Reason)
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition json value to io.Writer.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition json value from io.Reader.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason = i.ReadString()
			return i.Error == nil
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIApiserverinternalV1alpha1StorageVersionList json value to io.Writer.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIApiserverinternalV1alpha1StorageVersionList json value from io.Reader.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionList from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CommonEncodingVersion.Set {
		more.More()
		j.WriteObjectField("commonEncodingVersion")
		s.CommonEncodingVersion.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.StorageVersions != nil {
		more.More()
		j.WriteObjectField("storageVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.StorageVersions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus json value to io.Writer.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus json value from io.Reader.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commonEncodingVersion":
			s.CommonEncodingVersion.Reset()
			if err := s.CommonEncodingVersion.ReadJSON(i); err != nil {
				i.ReportError("Field CommonEncodingVersion", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "storageVersions":
			// Unsupported kind "array" for field "StorageVersions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ControllerRevision) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "data".
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("revision")
	j.WriteInt64(s.Revision)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ControllerRevision json value to io.Writer.
func (s IoK8sAPIAppsV1ControllerRevision) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ControllerRevision json value from io.Reader.
func (s *IoK8sAPIAppsV1ControllerRevision) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ControllerRevision from json stream.
func (s *IoK8sAPIAppsV1ControllerRevision) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "data":
			// Unsupported kind "pointer" for field "Data".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "revision":
			s.Revision = i.ReadInt64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ControllerRevisionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ControllerRevisionList json value to io.Writer.
func (s IoK8sAPIAppsV1ControllerRevisionList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ControllerRevisionList json value from io.Reader.
func (s *IoK8sAPIAppsV1ControllerRevisionList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ControllerRevisionList from json stream.
func (s *IoK8sAPIAppsV1ControllerRevisionList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSet json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSet json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSet from json stream.
func (s *IoK8sAPIAppsV1DaemonSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSetCondition json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSetCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSetCondition json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSetCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetCondition from json stream.
func (s *IoK8sAPIAppsV1DaemonSetCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSetList json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSetList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSetList json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSetList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetList from json stream.
func (s *IoK8sAPIAppsV1DaemonSetList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		more.More()
		j.WriteObjectField("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	if s.UpdateStrategy.Set {
		more.More()
		j.WriteObjectField("updateStrategy")
		s.UpdateStrategy.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSetSpec json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSetSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSetSpec json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSetSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetSpec from json stream.
func (s *IoK8sAPIAppsV1DaemonSetSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field MinReadySeconds", err.Error())
				return false
			}
			return true
		case "revisionHistoryLimit":
			s.RevisionHistoryLimit.Reset()
			if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field RevisionHistoryLimit", err.Error())
				return false
			}
			return true
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				i.ReportError("Field Template", err.Error())
				return false
			}
			return true
		case "updateStrategy":
			s.UpdateStrategy.Reset()
			if err := s.UpdateStrategy.ReadJSON(i); err != nil {
				i.ReportError("Field UpdateStrategy", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CollisionCount.Set {
		more.More()
		j.WriteObjectField("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentNumberScheduled")
	j.WriteInt32(s.CurrentNumberScheduled)
	more.More()
	j.WriteObjectField("desiredNumberScheduled")
	j.WriteInt32(s.DesiredNumberScheduled)
	if s.NumberAvailable.Set {
		more.More()
		j.WriteObjectField("numberAvailable")
		s.NumberAvailable.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("numberMisscheduled")
	j.WriteInt32(s.NumberMisscheduled)
	more.More()
	j.WriteObjectField("numberReady")
	j.WriteInt32(s.NumberReady)
	if s.NumberUnavailable.Set {
		more.More()
		j.WriteObjectField("numberUnavailable")
		s.NumberUnavailable.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.UpdatedNumberScheduled.Set {
		more.More()
		j.WriteObjectField("updatedNumberScheduled")
		s.UpdatedNumberScheduled.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSetStatus json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSetStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSetStatus json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSetStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetStatus from json stream.
func (s *IoK8sAPIAppsV1DaemonSetStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "collisionCount":
			s.CollisionCount.Reset()
			if err := s.CollisionCount.ReadJSON(i); err != nil {
				i.ReportError("Field CollisionCount", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "currentNumberScheduled":
			s.CurrentNumberScheduled = i.ReadInt32()
			return i.Error == nil
		case "desiredNumberScheduled":
			s.DesiredNumberScheduled = i.ReadInt32()
			return i.Error == nil
		case "numberAvailable":
			s.NumberAvailable.Reset()
			if err := s.NumberAvailable.ReadJSON(i); err != nil {
				i.ReportError("Field NumberAvailable", err.Error())
				return false
			}
			return true
		case "numberMisscheduled":
			s.NumberMisscheduled = i.ReadInt32()
			return i.Error == nil
		case "numberReady":
			s.NumberReady = i.ReadInt32()
			return i.Error == nil
		case "numberUnavailable":
			s.NumberUnavailable.Reset()
			if err := s.NumberUnavailable.ReadJSON(i); err != nil {
				i.ReportError("Field NumberUnavailable", err.Error())
				return false
			}
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "updatedNumberScheduled":
			s.UpdatedNumberScheduled.Reset()
			if err := s.UpdatedNumberScheduled.ReadJSON(i); err != nil {
				i.ReportError("Field UpdatedNumberScheduled", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetUpdateStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.RollingUpdate.Set {
		more.More()
		j.WriteObjectField("rollingUpdate")
		s.RollingUpdate.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSetUpdateStrategy json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSetUpdateStrategy) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSetUpdateStrategy json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSetUpdateStrategy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetUpdateStrategy from json stream.
func (s *IoK8sAPIAppsV1DaemonSetUpdateStrategy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "rollingUpdate":
			s.RollingUpdate.Reset()
			if err := s.RollingUpdate.ReadJSON(i); err != nil {
				i.ReportError("Field RollingUpdate", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1Deployment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1Deployment json value to io.Writer.
func (s IoK8sAPIAppsV1Deployment) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1Deployment json value from io.Reader.
func (s *IoK8sAPIAppsV1Deployment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1Deployment from json stream.
func (s *IoK8sAPIAppsV1Deployment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	// Unsupported kind "pointer" for field "lastUpdateTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DeploymentCondition json value to io.Writer.
func (s IoK8sAPIAppsV1DeploymentCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DeploymentCondition json value from io.Reader.
func (s *IoK8sAPIAppsV1DeploymentCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentCondition from json stream.
func (s *IoK8sAPIAppsV1DeploymentCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "lastUpdateTime":
			// Unsupported kind "pointer" for field "LastUpdateTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DeploymentList json value to io.Writer.
func (s IoK8sAPIAppsV1DeploymentList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DeploymentList json value from io.Reader.
func (s *IoK8sAPIAppsV1DeploymentList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentList from json stream.
func (s *IoK8sAPIAppsV1DeploymentList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Paused.Set {
		more.More()
		j.WriteObjectField("paused")
		s.Paused.WriteJSON(j)
	}
	if s.ProgressDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("progressDeadlineSeconds")
		s.ProgressDeadlineSeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		more.More()
		j.WriteObjectField("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	if s.Strategy.Set {
		more.More()
		j.WriteObjectField("strategy")
		s.Strategy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DeploymentSpec json value to io.Writer.
func (s IoK8sAPIAppsV1DeploymentSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DeploymentSpec json value from io.Reader.
func (s *IoK8sAPIAppsV1DeploymentSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentSpec from json stream.
func (s *IoK8sAPIAppsV1DeploymentSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field MinReadySeconds", err.Error())
				return false
			}
			return true
		case "paused":
			s.Paused.Reset()
			if err := s.Paused.ReadJSON(i); err != nil {
				i.ReportError("Field Paused", err.Error())
				return false
			}
			return true
		case "progressDeadlineSeconds":
			s.ProgressDeadlineSeconds.Reset()
			if err := s.ProgressDeadlineSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ProgressDeadlineSeconds", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				i.ReportError("Field Replicas", err.Error())
				return false
			}
			return true
		case "revisionHistoryLimit":
			s.RevisionHistoryLimit.Reset()
			if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field RevisionHistoryLimit", err.Error())
				return false
			}
			return true
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "strategy":
			s.Strategy.Reset()
			if err := s.Strategy.ReadJSON(i); err != nil {
				i.ReportError("Field Strategy", err.Error())
				return false
			}
			return true
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				i.ReportError("Field Template", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvailableReplicas.Set {
		more.More()
		j.WriteObjectField("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	if s.CollisionCount.Set {
		more.More()
		j.WriteObjectField("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.UnavailableReplicas.Set {
		more.More()
		j.WriteObjectField("unavailableReplicas")
		s.UnavailableReplicas.WriteJSON(j)
	}
	if s.UpdatedReplicas.Set {
		more.More()
		j.WriteObjectField("updatedReplicas")
		s.UpdatedReplicas.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DeploymentStatus json value to io.Writer.
func (s IoK8sAPIAppsV1DeploymentStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DeploymentStatus json value from io.Reader.
func (s *IoK8sAPIAppsV1DeploymentStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentStatus from json stream.
func (s *IoK8sAPIAppsV1DeploymentStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "availableReplicas":
			s.AvailableReplicas.Reset()
			if err := s.AvailableReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field AvailableReplicas", err.Error())
				return false
			}
			return true
		case "collisionCount":
			s.CollisionCount.Reset()
			if err := s.CollisionCount.ReadJSON(i); err != nil {
				i.ReportError("Field CollisionCount", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field ReadyReplicas", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				i.ReportError("Field Replicas", err.Error())
				return false
			}
			return true
		case "unavailableReplicas":
			s.UnavailableReplicas.Reset()
			if err := s.UnavailableReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field UnavailableReplicas", err.Error())
				return false
			}
			return true
		case "updatedReplicas":
			s.UpdatedReplicas.Reset()
			if err := s.UpdatedReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field UpdatedReplicas", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.RollingUpdate.Set {
		more.More()
		j.WriteObjectField("rollingUpdate")
		s.RollingUpdate.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DeploymentStrategy json value to io.Writer.
func (s IoK8sAPIAppsV1DeploymentStrategy) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DeploymentStrategy json value from io.Reader.
func (s *IoK8sAPIAppsV1DeploymentStrategy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentStrategy from json stream.
func (s *IoK8sAPIAppsV1DeploymentStrategy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "rollingUpdate":
			s.RollingUpdate.Reset()
			if err := s.RollingUpdate.ReadJSON(i); err != nil {
				i.ReportError("Field RollingUpdate", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ReplicaSet json value to io.Writer.
func (s IoK8sAPIAppsV1ReplicaSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ReplicaSet json value from io.Reader.
func (s *IoK8sAPIAppsV1ReplicaSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSet from json stream.
func (s *IoK8sAPIAppsV1ReplicaSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ReplicaSetCondition json value to io.Writer.
func (s IoK8sAPIAppsV1ReplicaSetCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ReplicaSetCondition json value from io.Reader.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetCondition from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ReplicaSetList json value to io.Writer.
func (s IoK8sAPIAppsV1ReplicaSetList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ReplicaSetList json value from io.Reader.
func (s *IoK8sAPIAppsV1ReplicaSetList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetList from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	if s.Template.Set {
		more.More()
		j.WriteObjectField("template")
		s.Template.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ReplicaSetSpec json value to io.Writer.
func (s IoK8sAPIAppsV1ReplicaSetSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ReplicaSetSpec json value from io.Reader.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetSpec from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field MinReadySeconds", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				i.ReportError("Field Replicas", err.Error())
				return false
			}
			return true
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "template":
			s.Template.Reset()
			if err := s.Template.ReadJSON(i); err != nil {
				i.ReportError("Field Template", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvailableReplicas.Set {
		more.More()
		j.WriteObjectField("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.FullyLabeledReplicas.Set {
		more.More()
		j.WriteObjectField("fullyLabeledReplicas")
		s.FullyLabeledReplicas.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("replicas")
	j.WriteInt32(s.Replicas)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ReplicaSetStatus json value to io.Writer.
func (s IoK8sAPIAppsV1ReplicaSetStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ReplicaSetStatus json value from io.Reader.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetStatus from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "availableReplicas":
			s.AvailableReplicas.Reset()
			if err := s.AvailableReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field AvailableReplicas", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "fullyLabeledReplicas":
			s.FullyLabeledReplicas.Reset()
			if err := s.FullyLabeledReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field FullyLabeledReplicas", err.Error())
				return false
			}
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field ReadyReplicas", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateDaemonSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "maxSurge".
	// Unsupported kind "pointer" for field "maxUnavailable".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1RollingUpdateDaemonSet json value to io.Writer.
func (s IoK8sAPIAppsV1RollingUpdateDaemonSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1RollingUpdateDaemonSet json value from io.Reader.
func (s *IoK8sAPIAppsV1RollingUpdateDaemonSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateDaemonSet from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateDaemonSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxSurge":
			// Unsupported kind "pointer" for field "MaxSurge".
			i.Skip()
			return true
		case "maxUnavailable":
			// Unsupported kind "pointer" for field "MaxUnavailable".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateDeployment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "maxSurge".
	// Unsupported kind "pointer" for field "maxUnavailable".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1RollingUpdateDeployment json value to io.Writer.
func (s IoK8sAPIAppsV1RollingUpdateDeployment) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1RollingUpdateDeployment json value from io.Reader.
func (s *IoK8sAPIAppsV1RollingUpdateDeployment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateDeployment from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateDeployment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxSurge":
			// Unsupported kind "pointer" for field "MaxSurge".
			i.Skip()
			return true
		case "maxUnavailable":
			// Unsupported kind "pointer" for field "MaxUnavailable".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Partition.Set {
		more.More()
		j.WriteObjectField("partition")
		s.Partition.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy json value to io.Writer.
func (s IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy json value from io.Reader.
func (s *IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "partition":
			s.Partition.Reset()
			if err := s.Partition.ReadJSON(i); err != nil {
				i.ReportError("Field Partition", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSet json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSet json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSet from json stream.
func (s *IoK8sAPIAppsV1StatefulSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSetCondition json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSetCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSetCondition json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSetCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetCondition from json stream.
func (s *IoK8sAPIAppsV1StatefulSetCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSetList json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSetList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSetList json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSetList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetList from json stream.
func (s *IoK8sAPIAppsV1StatefulSetList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.PodManagementPolicy.Set {
		more.More()
		j.WriteObjectField("podManagementPolicy")
		s.PodManagementPolicy.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		more.More()
		j.WriteObjectField("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("selector")
	s.Selector.WriteJSON(j)
	more.More()
	j.WriteObjectField("serviceName")
	j.WriteString(s.ServiceName)
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	if s.UpdateStrategy.Set {
		more.More()
		j.WriteObjectField("updateStrategy")
		s.UpdateStrategy.WriteJSON(j)
	}
	if s.VolumeClaimTemplates != nil {
		more.More()
		j.WriteObjectField("volumeClaimTemplates")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeClaimTemplates {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSetSpec json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSetSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSetSpec json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSetSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetSpec from json stream.
func (s *IoK8sAPIAppsV1StatefulSetSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field MinReadySeconds", err.Error())
				return false
			}
			return true
		case "podManagementPolicy":
			s.PodManagementPolicy.Reset()
			if err := s.PodManagementPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field PodManagementPolicy", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				i.ReportError("Field Replicas", err.Error())
				return false
			}
			return true
		case "revisionHistoryLimit":
			s.RevisionHistoryLimit.Reset()
			if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field RevisionHistoryLimit", err.Error())
				return false
			}
			return true
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "serviceName":
			s.ServiceName = i.ReadString()
			return i.Error == nil
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				i.ReportError("Field Template", err.Error())
				return false
			}
			return true
		case "updateStrategy":
			s.UpdateStrategy.Reset()
			if err := s.UpdateStrategy.ReadJSON(i); err != nil {
				i.ReportError("Field UpdateStrategy", err.Error())
				return false
			}
			return true
		case "volumeClaimTemplates":
			// Unsupported kind "array" for field "VolumeClaimTemplates".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("availableReplicas")
	j.WriteInt32(s.AvailableReplicas)
	if s.CollisionCount.Set {
		more.More()
		j.WriteObjectField("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.CurrentReplicas.Set {
		more.More()
		j.WriteObjectField("currentReplicas")
		s.CurrentReplicas.WriteJSON(j)
	}
	if s.CurrentRevision.Set {
		more.More()
		j.WriteObjectField("currentRevision")
		s.CurrentRevision.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("replicas")
	j.WriteInt32(s.Replicas)
	if s.UpdateRevision.Set {
		more.More()
		j.WriteObjectField("updateRevision")
		s.UpdateRevision.WriteJSON(j)
	}
	if s.UpdatedReplicas.Set {
		more.More()
		j.WriteObjectField("updatedReplicas")
		s.UpdatedReplicas.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSetStatus json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSetStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSetStatus json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSetStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetStatus from json stream.
func (s *IoK8sAPIAppsV1StatefulSetStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "availableReplicas":
			s.AvailableReplicas = i.ReadInt32()
			return i.Error == nil
		case "collisionCount":
			s.CollisionCount.Reset()
			if err := s.CollisionCount.ReadJSON(i); err != nil {
				i.ReportError("Field CollisionCount", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "currentReplicas":
			s.CurrentReplicas.Reset()
			if err := s.CurrentReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentReplicas", err.Error())
				return false
			}
			return true
		case "currentRevision":
			s.CurrentRevision.Reset()
			if err := s.CurrentRevision.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentRevision", err.Error())
				return false
			}
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field ReadyReplicas", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas = i.ReadInt32()
			return i.Error == nil
		case "updateRevision":
			s.UpdateRevision.Reset()
			if err := s.UpdateRevision.ReadJSON(i); err != nil {
				i.ReportError("Field UpdateRevision", err.Error())
				return false
			}
			return true
		case "updatedReplicas":
			s.UpdatedReplicas.Reset()
			if err := s.UpdatedReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field UpdatedReplicas", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetUpdateStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.RollingUpdate.Set {
		more.More()
		j.WriteObjectField("rollingUpdate")
		s.RollingUpdate.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSetUpdateStrategy json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSetUpdateStrategy) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSetUpdateStrategy json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSetUpdateStrategy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetUpdateStrategy from json stream.
func (s *IoK8sAPIAppsV1StatefulSetUpdateStrategy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "rollingUpdate":
			s.RollingUpdate.Reset()
			if err := s.RollingUpdate.ReadJSON(i); err != nil {
				i.ReportError("Field RollingUpdate", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthenticationV1TokenReview json value to io.Writer.
func (s IoK8sAPIAuthenticationV1TokenReview) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthenticationV1TokenReview json value from io.Reader.
func (s *IoK8sAPIAuthenticationV1TokenReview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReview from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Audiences != nil {
		more.More()
		j.WriteObjectField("audiences")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Audiences {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Token.Set {
		more.More()
		j.WriteObjectField("token")
		s.Token.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthenticationV1TokenReviewSpec json value to io.Writer.
func (s IoK8sAPIAuthenticationV1TokenReviewSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthenticationV1TokenReviewSpec json value from io.Reader.
func (s *IoK8sAPIAuthenticationV1TokenReviewSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReviewSpec from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReviewSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "audiences":
			// Unsupported kind "array" for field "Audiences".
			i.Skip()
			return true
		case "token":
			s.Token.Reset()
			if err := s.Token.ReadJSON(i); err != nil {
				i.ReportError("Field Token", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Audiences != nil {
		more.More()
		j.WriteObjectField("audiences")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Audiences {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Authenticated.Set {
		more.More()
		j.WriteObjectField("authenticated")
		s.Authenticated.WriteJSON(j)
	}
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthenticationV1TokenReviewStatus json value to io.Writer.
func (s IoK8sAPIAuthenticationV1TokenReviewStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthenticationV1TokenReviewStatus json value from io.Reader.
func (s *IoK8sAPIAuthenticationV1TokenReviewStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReviewStatus from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReviewStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "audiences":
			// Unsupported kind "array" for field "Audiences".
			i.Skip()
			return true
		case "authenticated":
			s.Authenticated.Reset()
			if err := s.Authenticated.ReadJSON(i); err != nil {
				i.ReportError("Field Authenticated", err.Error())
				return false
			}
			return true
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				i.ReportError("Field Error", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1UserInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "extra".
	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthenticationV1UserInfo json value to io.Writer.
func (s IoK8sAPIAuthenticationV1UserInfo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthenticationV1UserInfo json value from io.Reader.
func (s *IoK8sAPIAuthenticationV1UserInfo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthenticationV1UserInfo from json stream.
func (s *IoK8sAPIAuthenticationV1UserInfo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "extra":
			// Unsupported kind "pointer" for field "Extra".
			i.Skip()
			return true
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		case "username":
			s.Username.Reset()
			if err := s.Username.ReadJSON(i); err != nil {
				i.ReportError("Field Username", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1NonResourceAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.Verb.Set {
		more.More()
		j.WriteObjectField("verb")
		s.Verb.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1NonResourceAttributes json value to io.Writer.
func (s IoK8sAPIAuthorizationV1NonResourceAttributes) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1NonResourceAttributes json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1NonResourceAttributes) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1NonResourceAttributes from json stream.
func (s *IoK8sAPIAuthorizationV1NonResourceAttributes) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "verb":
			s.Verb.Reset()
			if err := s.Verb.ReadJSON(i); err != nil {
				i.ReportError("Field Verb", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1NonResourceRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceURLs != nil {
		more.More()
		j.WriteObjectField("nonResourceURLs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceURLs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1NonResourceRule json value to io.Writer.
func (s IoK8sAPIAuthorizationV1NonResourceRule) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1NonResourceRule json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1NonResourceRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1NonResourceRule from json stream.
func (s *IoK8sAPIAuthorizationV1NonResourceRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceURLs":
			// Unsupported kind "array" for field "NonResourceURLs".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1ResourceAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	if s.Subresource.Set {
		more.More()
		j.WriteObjectField("subresource")
		s.Subresource.WriteJSON(j)
	}
	if s.Verb.Set {
		more.More()
		j.WriteObjectField("verb")
		s.Verb.WriteJSON(j)
	}
	if s.Version.Set {
		more.More()
		j.WriteObjectField("version")
		s.Version.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1ResourceAttributes json value to io.Writer.
func (s IoK8sAPIAuthorizationV1ResourceAttributes) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1ResourceAttributes json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1ResourceAttributes) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1ResourceAttributes from json stream.
func (s *IoK8sAPIAuthorizationV1ResourceAttributes) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				i.ReportError("Field Resource", err.Error())
				return false
			}
			return true
		case "subresource":
			s.Subresource.Reset()
			if err := s.Subresource.ReadJSON(i); err != nil {
				i.ReportError("Field Subresource", err.Error())
				return false
			}
			return true
		case "verb":
			s.Verb.Reset()
			if err := s.Verb.ReadJSON(i); err != nil {
				i.ReportError("Field Verb", err.Error())
				return false
			}
			return true
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(i); err != nil {
				i.ReportError("Field Version", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1ResourceRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroups != nil {
		more.More()
		j.WriteObjectField("apiGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiGroups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceNames != nil {
		more.More()
		j.WriteObjectField("resourceNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Resources != nil {
		more.More()
		j.WriteObjectField("resources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Resources {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1ResourceRule json value to io.Writer.
func (s IoK8sAPIAuthorizationV1ResourceRule) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1ResourceRule json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1ResourceRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1ResourceRule from json stream.
func (s *IoK8sAPIAuthorizationV1ResourceRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroups":
			// Unsupported kind "array" for field "ApiGroups".
			i.Skip()
			return true
		case "resourceNames":
			// Unsupported kind "array" for field "ResourceNames".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "array" for field "Resources".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SelfSubjectAccessReview json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReview) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SelfSubjectAccessReview json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectAccessReview from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceAttributes.Set {
		more.More()
		j.WriteObjectField("nonResourceAttributes")
		s.NonResourceAttributes.WriteJSON(j)
	}
	if s.ResourceAttributes.Set {
		more.More()
		j.WriteObjectField("resourceAttributes")
		s.ResourceAttributes.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceAttributes":
			s.NonResourceAttributes.Reset()
			if err := s.NonResourceAttributes.ReadJSON(i); err != nil {
				i.ReportError("Field NonResourceAttributes", err.Error())
				return false
			}
			return true
		case "resourceAttributes":
			s.ResourceAttributes.Reset()
			if err := s.ResourceAttributes.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceAttributes", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SelfSubjectRulesReview json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReview) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SelfSubjectRulesReview json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectRulesReview from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SubjectAccessReview json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SubjectAccessReview) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SubjectAccessReview json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReview from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "extra".
	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NonResourceAttributes.Set {
		more.More()
		j.WriteObjectField("nonResourceAttributes")
		s.NonResourceAttributes.WriteJSON(j)
	}
	if s.ResourceAttributes.Set {
		more.More()
		j.WriteObjectField("resourceAttributes")
		s.ResourceAttributes.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SubjectAccessReviewSpec json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SubjectAccessReviewSpec json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "extra":
			// Unsupported kind "pointer" for field "Extra".
			i.Skip()
			return true
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "nonResourceAttributes":
			s.NonResourceAttributes.Reset()
			if err := s.NonResourceAttributes.ReadJSON(i); err != nil {
				i.ReportError("Field NonResourceAttributes", err.Error())
				return false
			}
			return true
		case "resourceAttributes":
			s.ResourceAttributes.Reset()
			if err := s.ResourceAttributes.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceAttributes", err.Error())
				return false
			}
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("allowed")
	j.WriteBool(s.Allowed)
	if s.Denied.Set {
		more.More()
		j.WriteObjectField("denied")
		s.Denied.WriteJSON(j)
	}
	if s.EvaluationError.Set {
		more.More()
		j.WriteObjectField("evaluationError")
		s.EvaluationError.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SubjectAccessReviewStatus json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SubjectAccessReviewStatus json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReviewStatus from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed":
			s.Allowed = i.ReadBool()
			return i.Error == nil
		case "denied":
			s.Denied.Reset()
			if err := s.Denied.ReadJSON(i); err != nil {
				i.ReportError("Field Denied", err.Error())
				return false
			}
			return true
		case "evaluationError":
			s.EvaluationError.Reset()
			if err := s.EvaluationError.ReadJSON(i); err != nil {
				i.ReportError("Field EvaluationError", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.EvaluationError.Set {
		more.More()
		j.WriteObjectField("evaluationError")
		s.EvaluationError.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("incomplete")
	j.WriteBool(s.Incomplete)
	more.More()
	j.WriteObjectField("nonResourceRules")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NonResourceRules {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("resourceRules")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ResourceRules {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SubjectRulesReviewStatus json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SubjectRulesReviewStatus json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectRulesReviewStatus from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "evaluationError":
			s.EvaluationError.Reset()
			if err := s.EvaluationError.ReadJSON(i); err != nil {
				i.ReportError("Field EvaluationError", err.Error())
				return false
			}
			return true
		case "incomplete":
			s.Incomplete = i.ReadBool()
			return i.Error == nil
		case "nonResourceRules":
			// Unsupported kind "array" for field "NonResourceRules".
			i.Skip()
			return true
		case "resourceRules":
			// Unsupported kind "array" for field "ResourceRules".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV1CrossVersionObjectReference json value to io.Writer.
func (s IoK8sAPIAutoscalingV1CrossVersionObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV1CrossVersionObjectReference json value from io.Reader.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV1CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV1HorizontalPodAutoscaler json value to io.Writer.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV1HorizontalPodAutoscaler json value from io.Reader.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList json value to io.Writer.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList json value from io.Reader.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	if s.MinReplicas.Set {
		more.More()
		j.WriteObjectField("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	if s.TargetCPUUtilizationPercentage.Set {
		more.More()
		j.WriteObjectField("targetCPUUtilizationPercentage")
		s.TargetCPUUtilizationPercentage.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec json value to io.Writer.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec json value from io.Reader.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxReplicas":
			s.MaxReplicas = i.ReadInt32()
			return i.Error == nil
		case "minReplicas":
			s.MinReplicas.Reset()
			if err := s.MinReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field MinReplicas", err.Error())
				return false
			}
			return true
		case "scaleTargetRef":
			if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
				i.ReportError("Field ScaleTargetRef", err.Error())
				return false
			}
			return true
		case "targetCPUUtilizationPercentage":
			s.TargetCPUUtilizationPercentage.Reset()
			if err := s.TargetCPUUtilizationPercentage.ReadJSON(i); err != nil {
				i.ReportError("Field TargetCPUUtilizationPercentage", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CurrentCPUUtilizationPercentage.Set {
		more.More()
		j.WriteObjectField("currentCPUUtilizationPercentage")
		s.CurrentCPUUtilizationPercentage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	more.More()
	j.WriteObjectField("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	// Unsupported kind "pointer" for field "lastScaleTime".
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currentCPUUtilizationPercentage":
			s.CurrentCPUUtilizationPercentage.Reset()
			if err := s.CurrentCPUUtilizationPercentage.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentCPUUtilizationPercentage", err.Error())
				return false
			}
			return true
		case "currentReplicas":
			s.CurrentReplicas = i.ReadInt32()
			return i.Error == nil
		case "desiredReplicas":
			s.DesiredReplicas = i.ReadInt32()
			return i.Error == nil
		case "lastScaleTime":
			// Unsupported kind "pointer" for field "LastScaleTime".
			i.Skip()
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.TargetAverageUtilization.Set {
		more.More()
		j.WriteObjectField("targetAverageUtilization")
		s.TargetAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "targetAverageValue".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "container":
			s.Container = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "targetAverageUtilization":
			s.TargetAverageUtilization.Reset()
			if err := s.TargetAverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field TargetAverageUtilization", err.Error())
				return false
			}
			return true
		case "targetAverageValue":
			// Unsupported kind "pointer" for field "TargetAverageValue".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	if s.CurrentAverageUtilization.Set {
		more.More()
		j.WriteObjectField("currentAverageUtilization")
		s.CurrentAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "currentAverageValue".
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "container":
			s.Container = i.ReadString()
			return i.Error == nil
		case "currentAverageUtilization":
			s.CurrentAverageUtilization.Reset()
			if err := s.CurrentAverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentAverageUtilization", err.Error())
				return false
			}
			return true
		case "currentAverageValue":
			// Unsupported kind "alias" for field "CurrentAverageValue".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.MetricSelector.Set {
		more.More()
		j.WriteObjectField("metricSelector")
		s.MetricSelector.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "targetAverageValue".
	// Unsupported kind "pointer" for field "targetValue".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ExternalMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ExternalMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ExternalMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "metricSelector":
			s.MetricSelector.Reset()
			if err := s.MetricSelector.ReadJSON(i); err != nil {
				i.ReportError("Field MetricSelector", err.Error())
				return false
			}
			return true
		case "targetAverageValue":
			// Unsupported kind "pointer" for field "TargetAverageValue".
			i.Skip()
			return true
		case "targetValue":
			// Unsupported kind "pointer" for field "TargetValue".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "currentAverageValue".
	// Unsupported kind "alias" for field "currentValue".
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.MetricSelector.Set {
		more.More()
		j.WriteObjectField("metricSelector")
		s.MetricSelector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ExternalMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ExternalMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ExternalMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currentAverageValue":
			// Unsupported kind "pointer" for field "CurrentAverageValue".
			i.Skip()
			return true
		case "currentValue":
			// Unsupported kind "alias" for field "CurrentValue".
			i.Skip()
			return true
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "metricSelector":
			s.MetricSelector.Reset()
			if err := s.MetricSelector.ReadJSON(i); err != nil {
				i.ReportError("Field MetricSelector", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	if s.Metrics != nil {
		more.More()
		j.WriteObjectField("metrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Metrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.MinReplicas.Set {
		more.More()
		j.WriteObjectField("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxReplicas":
			s.MaxReplicas = i.ReadInt32()
			return i.Error == nil
		case "metrics":
			// Unsupported kind "array" for field "Metrics".
			i.Skip()
			return true
		case "minReplicas":
			s.MinReplicas.Reset()
			if err := s.MinReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field MinReplicas", err.Error())
				return false
			}
			return true
		case "scaleTargetRef":
			if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
				i.ReportError("Field ScaleTargetRef", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("conditions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Conditions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.CurrentMetrics != nil {
		more.More()
		j.WriteObjectField("currentMetrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CurrentMetrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	more.More()
	j.WriteObjectField("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	// Unsupported kind "pointer" for field "lastScaleTime".
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "currentMetrics":
			// Unsupported kind "array" for field "CurrentMetrics".
			i.Skip()
			return true
		case "currentReplicas":
			s.CurrentReplicas = i.ReadInt32()
			return i.Error == nil
		case "desiredReplicas":
			s.DesiredReplicas = i.ReadInt32()
			return i.Error == nil
		case "lastScaleTime":
			// Unsupported kind "pointer" for field "LastScaleTime".
			i.Skip()
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1MetricSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1MetricSpec json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1MetricSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1MetricSpec json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1MetricSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerResource":
			s.ContainerResource.Reset()
			if err := s.ContainerResource.ReadJSON(i); err != nil {
				i.ReportError("Field ContainerResource", err.Error())
				return false
			}
			return true
		case "external":
			s.External.Reset()
			if err := s.External.ReadJSON(i); err != nil {
				i.ReportError("Field External", err.Error())
				return false
			}
			return true
		case "object":
			s.Object.Reset()
			if err := s.Object.ReadJSON(i); err != nil {
				i.ReportError("Field Object", err.Error())
				return false
			}
			return true
		case "pods":
			s.Pods.Reset()
			if err := s.Pods.ReadJSON(i); err != nil {
				i.ReportError("Field Pods", err.Error())
				return false
			}
			return true
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				i.ReportError("Field Resource", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1MetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1MetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1MetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1MetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1MetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerResource":
			s.ContainerResource.Reset()
			if err := s.ContainerResource.ReadJSON(i); err != nil {
				i.ReportError("Field ContainerResource", err.Error())
				return false
			}
			return true
		case "external":
			s.External.Reset()
			if err := s.External.ReadJSON(i); err != nil {
				i.ReportError("Field External", err.Error())
				return false
			}
			return true
		case "object":
			s.Object.Reset()
			if err := s.Object.ReadJSON(i); err != nil {
				i.ReportError("Field Object", err.Error())
				return false
			}
			return true
		case "pods":
			s.Pods.Reset()
			if err := s.Pods.ReadJSON(i); err != nil {
				i.ReportError("Field Pods", err.Error())
				return false
			}
			return true
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				i.ReportError("Field Resource", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "averageValue".
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	// Unsupported kind "alias" for field "targetValue".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ObjectMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ObjectMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ObjectMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "averageValue":
			// Unsupported kind "pointer" for field "AverageValue".
			i.Skip()
			return true
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		case "targetValue":
			// Unsupported kind "alias" for field "TargetValue".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "averageValue".
	// Unsupported kind "alias" for field "currentValue".
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ObjectMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ObjectMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ObjectMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "averageValue":
			// Unsupported kind "pointer" for field "AverageValue".
			i.Skip()
			return true
		case "currentValue":
			// Unsupported kind "alias" for field "CurrentValue".
			i.Skip()
			return true
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "targetAverageValue".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1PodsMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1PodsMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1PodsMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "targetAverageValue":
			// Unsupported kind "alias" for field "TargetAverageValue".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "alias" for field "currentAverageValue".
	more.More()
	j.WriteObjectField("metricName")
	j.WriteString(s.MetricName)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1PodsMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1PodsMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1PodsMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currentAverageValue":
			// Unsupported kind "alias" for field "CurrentAverageValue".
			i.Skip()
			return true
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.TargetAverageUtilization.Set {
		more.More()
		j.WriteObjectField("targetAverageUtilization")
		s.TargetAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "targetAverageValue".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ResourceMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ResourceMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "targetAverageUtilization":
			s.TargetAverageUtilization.Reset()
			if err := s.TargetAverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field TargetAverageUtilization", err.Error())
				return false
			}
			return true
		case "targetAverageValue":
			// Unsupported kind "pointer" for field "TargetAverageValue".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CurrentAverageUtilization.Set {
		more.More()
		j.WriteObjectField("currentAverageUtilization")
		s.CurrentAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "currentAverageValue".
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ResourceMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ResourceMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currentAverageUtilization":
			s.CurrentAverageUtilization.Reset()
			if err := s.CurrentAverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentAverageUtilization", err.Error())
				return false
			}
			return true
		case "currentAverageValue":
			// Unsupported kind "alias" for field "CurrentAverageValue".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "container":
			s.Container = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("container")
	j.WriteString(s.Container)
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "container":
			s.Container = i.ReadString()
			return i.Error == nil
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				i.ReportError("Field Current", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ExternalMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ExternalMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ExternalMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ExternalMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ExternalMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ExternalMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				i.ReportError("Field Current", err.Error())
				return false
			}
			return true
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("periodSeconds")
	j.WriteInt32(s.PeriodSeconds)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	more.More()
	j.WriteObjectField("value")
	j.WriteInt32(s.Value)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HPAScalingPolicy json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HPAScalingPolicy json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HPAScalingPolicy from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "periodSeconds":
			s.PeriodSeconds = i.ReadInt32()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "value":
			s.Value = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingRules) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Policies != nil {
		more.More()
		j.WriteObjectField("policies")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Policies {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.SelectPolicy.Set {
		more.More()
		j.WriteObjectField("selectPolicy")
		s.SelectPolicy.WriteJSON(j)
	}
	if s.StabilizationWindowSeconds.Set {
		more.More()
		j.WriteObjectField("stabilizationWindowSeconds")
		s.StabilizationWindowSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HPAScalingRules json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingRules) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HPAScalingRules json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HPAScalingRules from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "policies":
			// Unsupported kind "array" for field "Policies".
			i.Skip()
			return true
		case "selectPolicy":
			s.SelectPolicy.Reset()
			if err := s.SelectPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field SelectPolicy", err.Error())
				return false
			}
			return true
		case "stabilizationWindowSeconds":
			s.StabilizationWindowSeconds.Reset()
			if err := s.StabilizationWindowSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field StabilizationWindowSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ScaleDown.Set {
		more.More()
		j.WriteObjectField("scaleDown")
		s.ScaleDown.WriteJSON(j)
	}
	if s.ScaleUp.Set {
		more.More()
		j.WriteObjectField("scaleUp")
		s.ScaleUp.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "scaleDown":
			s.ScaleDown.Reset()
			if err := s.ScaleDown.ReadJSON(i); err != nil {
				i.ReportError("Field ScaleDown", err.Error())
				return false
			}
			return true
		case "scaleUp":
			s.ScaleUp.Reset()
			if err := s.ScaleUp.ReadJSON(i); err != nil {
				i.ReportError("Field ScaleUp", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Behavior.Set {
		more.More()
		j.WriteObjectField("behavior")
		s.Behavior.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	if s.Metrics != nil {
		more.More()
		j.WriteObjectField("metrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Metrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.MinReplicas.Set {
		more.More()
		j.WriteObjectField("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "behavior":
			s.Behavior.Reset()
			if err := s.Behavior.ReadJSON(i); err != nil {
				i.ReportError("Field Behavior", err.Error())
				return false
			}
			return true
		case "maxReplicas":
			s.MaxReplicas = i.ReadInt32()
			return i.Error == nil
		case "metrics":
			// Unsupported kind "array" for field "Metrics".
			i.Skip()
			return true
		case "minReplicas":
			s.MinReplicas.Reset()
			if err := s.MinReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field MinReplicas", err.Error())
				return false
			}
			return true
		case "scaleTargetRef":
			if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
				i.ReportError("Field ScaleTargetRef", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("conditions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Conditions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.CurrentMetrics != nil {
		more.More()
		j.WriteObjectField("currentMetrics")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.CurrentMetrics {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	more.More()
	j.WriteObjectField("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	// Unsupported kind "pointer" for field "lastScaleTime".
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "currentMetrics":
			// Unsupported kind "array" for field "CurrentMetrics".
			i.Skip()
			return true
		case "currentReplicas":
			s.CurrentReplicas = i.ReadInt32()
			return i.Error == nil
		case "desiredReplicas":
			s.DesiredReplicas = i.ReadInt32()
			return i.Error == nil
		case "lastScaleTime":
			// Unsupported kind "pointer" for field "LastScaleTime".
			i.Skip()
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricIdentifier) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2MetricIdentifier json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2MetricIdentifier) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2MetricIdentifier json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2MetricIdentifier) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricIdentifier from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricIdentifier) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2MetricSpec json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2MetricSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2MetricSpec json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerResource":
			s.ContainerResource.Reset()
			if err := s.ContainerResource.ReadJSON(i); err != nil {
				i.ReportError("Field ContainerResource", err.Error())
				return false
			}
			return true
		case "external":
			s.External.Reset()
			if err := s.External.ReadJSON(i); err != nil {
				i.ReportError("Field External", err.Error())
				return false
			}
			return true
		case "object":
			s.Object.Reset()
			if err := s.Object.ReadJSON(i); err != nil {
				i.ReportError("Field Object", err.Error())
				return false
			}
			return true
		case "pods":
			s.Pods.Reset()
			if err := s.Pods.ReadJSON(i); err != nil {
				i.ReportError("Field Pods", err.Error())
				return false
			}
			return true
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				i.ReportError("Field Resource", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerResource.Set {
		more.More()
		j.WriteObjectField("containerResource")
		s.ContainerResource.WriteJSON(j)
	}
	if s.External.Set {
		more.More()
		j.WriteObjectField("external")
		s.External.WriteJSON(j)
	}
	if s.Object.Set {
		more.More()
		j.WriteObjectField("object")
		s.Object.WriteJSON(j)
	}
	if s.Pods.Set {
		more.More()
		j.WriteObjectField("pods")
		s.Pods.WriteJSON(j)
	}
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2MetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2MetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2MetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerResource":
			s.ContainerResource.Reset()
			if err := s.ContainerResource.ReadJSON(i); err != nil {
				i.ReportError("Field ContainerResource", err.Error())
				return false
			}
			return true
		case "external":
			s.External.Reset()
			if err := s.External.ReadJSON(i); err != nil {
				i.ReportError("Field External", err.Error())
				return false
			}
			return true
		case "object":
			s.Object.Reset()
			if err := s.Object.ReadJSON(i); err != nil {
				i.ReportError("Field Object", err.Error())
				return false
			}
			return true
		case "pods":
			s.Pods.Reset()
			if err := s.Pods.ReadJSON(i); err != nil {
				i.ReportError("Field Pods", err.Error())
				return false
			}
			return true
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				i.ReportError("Field Resource", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricTarget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AverageUtilization.Set {
		more.More()
		j.WriteObjectField("averageUtilization")
		s.AverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "averageValue".
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	// Unsupported kind "pointer" for field "value".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2MetricTarget json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2MetricTarget) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2MetricTarget json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricTarget from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "averageUtilization":
			s.AverageUtilization.Reset()
			if err := s.AverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field AverageUtilization", err.Error())
				return false
			}
			return true
		case "averageValue":
			// Unsupported kind "pointer" for field "AverageValue".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "value":
			// Unsupported kind "pointer" for field "Value".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricValueStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AverageUtilization.Set {
		more.More()
		j.WriteObjectField("averageUtilization")
		s.AverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "averageValue".
	// Unsupported kind "pointer" for field "value".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2MetricValueStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2MetricValueStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2MetricValueStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricValueStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "averageUtilization":
			s.AverageUtilization.Reset()
			if err := s.AverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field AverageUtilization", err.Error())
				return false
			}
			return true
		case "averageValue":
			// Unsupported kind "pointer" for field "AverageValue".
			i.Skip()
			return true
		case "value":
			// Unsupported kind "pointer" for field "Value".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("describedObject")
	s.DescribedObject.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ObjectMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ObjectMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ObjectMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "describedObject":
			if err := s.DescribedObject.ReadJSON(i); err != nil {
				i.ReportError("Field DescribedObject", err.Error())
				return false
			}
			return true
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("describedObject")
	s.DescribedObject.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ObjectMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ObjectMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ObjectMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				i.ReportError("Field Current", err.Error())
				return false
			}
			return true
		case "describedObject":
			if err := s.DescribedObject.ReadJSON(i); err != nil {
				i.ReportError("Field DescribedObject", err.Error())
				return false
			}
			return true
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2PodsMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2PodsMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2PodsMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2PodsMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2PodsMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2PodsMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				i.ReportError("Field Current", err.Error())
				return false
			}
			return true
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ResourceMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ResourceMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("current")
	s.Current.WriteJSON(j)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ResourceMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ResourceMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				i.ReportError("Field Current", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJob) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1CronJob json value to io.Writer.
func (s IoK8sAPIBatchV1CronJob) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1CronJob json value from io.Reader.
func (s *IoK8sAPIBatchV1CronJob) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1CronJob from json stream.
func (s *IoK8sAPIBatchV1CronJob) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1CronJobList json value to io.Writer.
func (s IoK8sAPIBatchV1CronJobList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1CronJobList json value from io.Reader.
func (s *IoK8sAPIBatchV1CronJobList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1CronJobList from json stream.
func (s *IoK8sAPIBatchV1CronJobList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConcurrencyPolicy.Set {
		more.More()
		j.WriteObjectField("concurrencyPolicy")
		s.ConcurrencyPolicy.WriteJSON(j)
	}
	if s.FailedJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("failedJobsHistoryLimit")
		s.FailedJobsHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("jobTemplate")
	s.JobTemplate.WriteJSON(j)
	more.More()
	j.WriteObjectField("schedule")
	j.WriteString(s.Schedule)
	if s.StartingDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("startingDeadlineSeconds")
		s.StartingDeadlineSeconds.WriteJSON(j)
	}
	if s.SuccessfulJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("successfulJobsHistoryLimit")
		s.SuccessfulJobsHistoryLimit.WriteJSON(j)
	}
	if s.Suspend.Set {
		more.More()
		j.WriteObjectField("suspend")
		s.Suspend.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1CronJobSpec json value to io.Writer.
func (s IoK8sAPIBatchV1CronJobSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1CronJobSpec json value from io.Reader.
func (s *IoK8sAPIBatchV1CronJobSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1CronJobSpec from json stream.
func (s *IoK8sAPIBatchV1CronJobSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "concurrencyPolicy":
			s.ConcurrencyPolicy.Reset()
			if err := s.ConcurrencyPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ConcurrencyPolicy", err.Error())
				return false
			}
			return true
		case "failedJobsHistoryLimit":
			s.FailedJobsHistoryLimit.Reset()
			if err := s.FailedJobsHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field FailedJobsHistoryLimit", err.Error())
				return false
			}
			return true
		case "jobTemplate":
			if err := s.JobTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field JobTemplate", err.Error())
				return false
			}
			return true
		case "schedule":
			s.Schedule = i.ReadString()
			return i.Error == nil
		case "startingDeadlineSeconds":
			s.StartingDeadlineSeconds.Reset()
			if err := s.StartingDeadlineSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field StartingDeadlineSeconds", err.Error())
				return false
			}
			return true
		case "successfulJobsHistoryLimit":
			s.SuccessfulJobsHistoryLimit.Reset()
			if err := s.SuccessfulJobsHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field SuccessfulJobsHistoryLimit", err.Error())
				return false
			}
			return true
		case "suspend":
			s.Suspend.Reset()
			if err := s.Suspend.ReadJSON(i); err != nil {
				i.ReportError("Field Suspend", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active != nil {
		more.More()
		j.WriteObjectField("active")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Active {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	// Unsupported kind "pointer" for field "lastScheduleTime".
	// Unsupported kind "pointer" for field "lastSuccessfulTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1CronJobStatus json value to io.Writer.
func (s IoK8sAPIBatchV1CronJobStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1CronJobStatus json value from io.Reader.
func (s *IoK8sAPIBatchV1CronJobStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1CronJobStatus from json stream.
func (s *IoK8sAPIBatchV1CronJobStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			// Unsupported kind "array" for field "Active".
			i.Skip()
			return true
		case "lastScheduleTime":
			// Unsupported kind "pointer" for field "LastScheduleTime".
			i.Skip()
			return true
		case "lastSuccessfulTime":
			// Unsupported kind "pointer" for field "LastSuccessfulTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1Job) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1Job json value to io.Writer.
func (s IoK8sAPIBatchV1Job) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1Job json value from io.Reader.
func (s *IoK8sAPIBatchV1Job) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1Job from json stream.
func (s *IoK8sAPIBatchV1Job) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastProbeTime".
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1JobCondition json value to io.Writer.
func (s IoK8sAPIBatchV1JobCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1JobCondition json value from io.Reader.
func (s *IoK8sAPIBatchV1JobCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1JobCondition from json stream.
func (s *IoK8sAPIBatchV1JobCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastProbeTime":
			// Unsupported kind "pointer" for field "LastProbeTime".
			i.Skip()
			return true
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1JobList json value to io.Writer.
func (s IoK8sAPIBatchV1JobList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1JobList json value from io.Reader.
func (s *IoK8sAPIBatchV1JobList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1JobList from json stream.
func (s *IoK8sAPIBatchV1JobList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ActiveDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("activeDeadlineSeconds")
		s.ActiveDeadlineSeconds.WriteJSON(j)
	}
	if s.BackoffLimit.Set {
		more.More()
		j.WriteObjectField("backoffLimit")
		s.BackoffLimit.WriteJSON(j)
	}
	if s.CompletionMode.Set {
		more.More()
		j.WriteObjectField("completionMode")
		s.CompletionMode.WriteJSON(j)
	}
	if s.Completions.Set {
		more.More()
		j.WriteObjectField("completions")
		s.Completions.WriteJSON(j)
	}
	if s.ManualSelector.Set {
		more.More()
		j.WriteObjectField("manualSelector")
		s.ManualSelector.WriteJSON(j)
	}
	if s.Parallelism.Set {
		more.More()
		j.WriteObjectField("parallelism")
		s.Parallelism.WriteJSON(j)
	}
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	if s.Suspend.Set {
		more.More()
		j.WriteObjectField("suspend")
		s.Suspend.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("template")
	s.Template.WriteJSON(j)
	if s.TtlSecondsAfterFinished.Set {
		more.More()
		j.WriteObjectField("ttlSecondsAfterFinished")
		s.TtlSecondsAfterFinished.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1JobSpec json value to io.Writer.
func (s IoK8sAPIBatchV1JobSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1JobSpec json value from io.Reader.
func (s *IoK8sAPIBatchV1JobSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1JobSpec from json stream.
func (s *IoK8sAPIBatchV1JobSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "activeDeadlineSeconds":
			s.ActiveDeadlineSeconds.Reset()
			if err := s.ActiveDeadlineSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ActiveDeadlineSeconds", err.Error())
				return false
			}
			return true
		case "backoffLimit":
			s.BackoffLimit.Reset()
			if err := s.BackoffLimit.ReadJSON(i); err != nil {
				i.ReportError("Field BackoffLimit", err.Error())
				return false
			}
			return true
		case "completionMode":
			s.CompletionMode.Reset()
			if err := s.CompletionMode.ReadJSON(i); err != nil {
				i.ReportError("Field CompletionMode", err.Error())
				return false
			}
			return true
		case "completions":
			s.Completions.Reset()
			if err := s.Completions.ReadJSON(i); err != nil {
				i.ReportError("Field Completions", err.Error())
				return false
			}
			return true
		case "manualSelector":
			s.ManualSelector.Reset()
			if err := s.ManualSelector.ReadJSON(i); err != nil {
				i.ReportError("Field ManualSelector", err.Error())
				return false
			}
			return true
		case "parallelism":
			s.Parallelism.Reset()
			if err := s.Parallelism.ReadJSON(i); err != nil {
				i.ReportError("Field Parallelism", err.Error())
				return false
			}
			return true
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "suspend":
			s.Suspend.Reset()
			if err := s.Suspend.ReadJSON(i); err != nil {
				i.ReportError("Field Suspend", err.Error())
				return false
			}
			return true
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				i.ReportError("Field Template", err.Error())
				return false
			}
			return true
		case "ttlSecondsAfterFinished":
			s.TtlSecondsAfterFinished.Reset()
			if err := s.TtlSecondsAfterFinished.ReadJSON(i); err != nil {
				i.ReportError("Field TtlSecondsAfterFinished", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active.Set {
		more.More()
		j.WriteObjectField("active")
		s.Active.WriteJSON(j)
	}
	if s.CompletedIndexes.Set {
		more.More()
		j.WriteObjectField("completedIndexes")
		s.CompletedIndexes.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "completionTime".
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Failed.Set {
		more.More()
		j.WriteObjectField("failed")
		s.Failed.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "startTime".
	if s.Succeeded.Set {
		more.More()
		j.WriteObjectField("succeeded")
		s.Succeeded.WriteJSON(j)
	}
	if s.UncountedTerminatedPods.Set {
		more.More()
		j.WriteObjectField("uncountedTerminatedPods")
		s.UncountedTerminatedPods.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1JobStatus json value to io.Writer.
func (s IoK8sAPIBatchV1JobStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1JobStatus json value from io.Reader.
func (s *IoK8sAPIBatchV1JobStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1JobStatus from json stream.
func (s *IoK8sAPIBatchV1JobStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(i); err != nil {
				i.ReportError("Field Active", err.Error())
				return false
			}
			return true
		case "completedIndexes":
			s.CompletedIndexes.Reset()
			if err := s.CompletedIndexes.ReadJSON(i); err != nil {
				i.ReportError("Field CompletedIndexes", err.Error())
				return false
			}
			return true
		case "completionTime":
			// Unsupported kind "pointer" for field "CompletionTime".
			i.Skip()
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "failed":
			s.Failed.Reset()
			if err := s.Failed.ReadJSON(i); err != nil {
				i.ReportError("Field Failed", err.Error())
				return false
			}
			return true
		case "startTime":
			// Unsupported kind "pointer" for field "StartTime".
			i.Skip()
			return true
		case "succeeded":
			s.Succeeded.Reset()
			if err := s.Succeeded.ReadJSON(i); err != nil {
				i.ReportError("Field Succeeded", err.Error())
				return false
			}
			return true
		case "uncountedTerminatedPods":
			s.UncountedTerminatedPods.Reset()
			if err := s.UncountedTerminatedPods.ReadJSON(i); err != nil {
				i.ReportError("Field UncountedTerminatedPods", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1JobTemplateSpec json value to io.Writer.
func (s IoK8sAPIBatchV1JobTemplateSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1JobTemplateSpec json value from io.Reader.
func (s *IoK8sAPIBatchV1JobTemplateSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1JobTemplateSpec from json stream.
func (s *IoK8sAPIBatchV1JobTemplateSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1UncountedTerminatedPods) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Failed != nil {
		more.More()
		j.WriteObjectField("failed")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Failed {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Succeeded != nil {
		more.More()
		j.WriteObjectField("succeeded")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Succeeded {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1UncountedTerminatedPods json value to io.Writer.
func (s IoK8sAPIBatchV1UncountedTerminatedPods) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1UncountedTerminatedPods json value from io.Reader.
func (s *IoK8sAPIBatchV1UncountedTerminatedPods) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1UncountedTerminatedPods from json stream.
func (s *IoK8sAPIBatchV1UncountedTerminatedPods) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "failed":
			// Unsupported kind "array" for field "Failed".
			i.Skip()
			return true
		case "succeeded":
			// Unsupported kind "array" for field "Succeeded".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJob) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1beta1CronJob json value to io.Writer.
func (s IoK8sAPIBatchV1beta1CronJob) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1beta1CronJob json value from io.Reader.
func (s *IoK8sAPIBatchV1beta1CronJob) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJob from json stream.
func (s *IoK8sAPIBatchV1beta1CronJob) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1beta1CronJobList json value to io.Writer.
func (s IoK8sAPIBatchV1beta1CronJobList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1beta1CronJobList json value from io.Reader.
func (s *IoK8sAPIBatchV1beta1CronJobList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobList from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConcurrencyPolicy.Set {
		more.More()
		j.WriteObjectField("concurrencyPolicy")
		s.ConcurrencyPolicy.WriteJSON(j)
	}
	if s.FailedJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("failedJobsHistoryLimit")
		s.FailedJobsHistoryLimit.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("jobTemplate")
	s.JobTemplate.WriteJSON(j)
	more.More()
	j.WriteObjectField("schedule")
	j.WriteString(s.Schedule)
	if s.StartingDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("startingDeadlineSeconds")
		s.StartingDeadlineSeconds.WriteJSON(j)
	}
	if s.SuccessfulJobsHistoryLimit.Set {
		more.More()
		j.WriteObjectField("successfulJobsHistoryLimit")
		s.SuccessfulJobsHistoryLimit.WriteJSON(j)
	}
	if s.Suspend.Set {
		more.More()
		j.WriteObjectField("suspend")
		s.Suspend.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1beta1CronJobSpec json value to io.Writer.
func (s IoK8sAPIBatchV1beta1CronJobSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1beta1CronJobSpec json value from io.Reader.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobSpec from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "concurrencyPolicy":
			s.ConcurrencyPolicy.Reset()
			if err := s.ConcurrencyPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ConcurrencyPolicy", err.Error())
				return false
			}
			return true
		case "failedJobsHistoryLimit":
			s.FailedJobsHistoryLimit.Reset()
			if err := s.FailedJobsHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field FailedJobsHistoryLimit", err.Error())
				return false
			}
			return true
		case "jobTemplate":
			if err := s.JobTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field JobTemplate", err.Error())
				return false
			}
			return true
		case "schedule":
			s.Schedule = i.ReadString()
			return i.Error == nil
		case "startingDeadlineSeconds":
			s.StartingDeadlineSeconds.Reset()
			if err := s.StartingDeadlineSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field StartingDeadlineSeconds", err.Error())
				return false
			}
			return true
		case "successfulJobsHistoryLimit":
			s.SuccessfulJobsHistoryLimit.Reset()
			if err := s.SuccessfulJobsHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field SuccessfulJobsHistoryLimit", err.Error())
				return false
			}
			return true
		case "suspend":
			s.Suspend.Reset()
			if err := s.Suspend.ReadJSON(i); err != nil {
				i.ReportError("Field Suspend", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active != nil {
		more.More()
		j.WriteObjectField("active")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Active {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	// Unsupported kind "pointer" for field "lastScheduleTime".
	// Unsupported kind "pointer" for field "lastSuccessfulTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1beta1CronJobStatus json value to io.Writer.
func (s IoK8sAPIBatchV1beta1CronJobStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1beta1CronJobStatus json value from io.Reader.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobStatus from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			// Unsupported kind "array" for field "Active".
			i.Skip()
			return true
		case "lastScheduleTime":
			// Unsupported kind "pointer" for field "LastScheduleTime".
			i.Skip()
			return true
		case "lastSuccessfulTime":
			// Unsupported kind "pointer" for field "LastSuccessfulTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1JobTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1beta1JobTemplateSpec json value to io.Writer.
func (s IoK8sAPIBatchV1beta1JobTemplateSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1beta1JobTemplateSpec json value from io.Reader.
func (s *IoK8sAPIBatchV1beta1JobTemplateSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1beta1JobTemplateSpec from json stream.
func (s *IoK8sAPIBatchV1beta1JobTemplateSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICertificatesV1CertificateSigningRequest json value to io.Writer.
func (s IoK8sAPICertificatesV1CertificateSigningRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICertificatesV1CertificateSigningRequest json value from io.Reader.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequest from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	// Unsupported kind "pointer" for field "lastUpdateTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICertificatesV1CertificateSigningRequestCondition json value to io.Writer.
func (s IoK8sAPICertificatesV1CertificateSigningRequestCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICertificatesV1CertificateSigningRequestCondition json value from io.Reader.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestCondition from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "lastUpdateTime":
			// Unsupported kind "pointer" for field "LastUpdateTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICertificatesV1CertificateSigningRequestList json value to io.Writer.
func (s IoK8sAPICertificatesV1CertificateSigningRequestList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICertificatesV1CertificateSigningRequestList json value from io.Reader.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestList from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ExpirationSeconds.Set {
		more.More()
		j.WriteObjectField("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "extra".
	if s.Groups != nil {
		more.More()
		j.WriteObjectField("groups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Groups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	// Unsupported kind "primitive" for field "request".
	more.More()
	j.WriteObjectField("signerName")
	j.WriteString(s.SignerName)
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	if s.Usages != nil {
		more.More()
		j.WriteObjectField("usages")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Usages {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICertificatesV1CertificateSigningRequestSpec json value to io.Writer.
func (s IoK8sAPICertificatesV1CertificateSigningRequestSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICertificatesV1CertificateSigningRequestSpec json value from io.Reader.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestSpec from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "expirationSeconds":
			s.ExpirationSeconds.Reset()
			if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ExpirationSeconds", err.Error())
				return false
			}
			return true
		case "extra":
			// Unsupported kind "pointer" for field "Extra".
			i.Skip()
			return true
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "request":
			// Unsupported kind "primitive" for field "Request".
			i.Skip()
			return true
		case "signerName":
			s.SignerName = i.ReadString()
			return i.Error == nil
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		case "usages":
			// Unsupported kind "array" for field "Usages".
			i.Skip()
			return true
		case "username":
			s.Username.Reset()
			if err := s.Username.ReadJSON(i); err != nil {
				i.ReportError("Field Username", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "certificate".
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICertificatesV1CertificateSigningRequestStatus json value to io.Writer.
func (s IoK8sAPICertificatesV1CertificateSigningRequestStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICertificatesV1CertificateSigningRequestStatus json value from io.Reader.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestStatus from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "certificate":
			// Unsupported kind "pointer" for field "Certificate".
			i.Skip()
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1Lease) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoordinationV1Lease json value to io.Writer.
func (s IoK8sAPICoordinationV1Lease) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoordinationV1Lease json value from io.Reader.
func (s *IoK8sAPICoordinationV1Lease) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoordinationV1Lease from json stream.
func (s *IoK8sAPICoordinationV1Lease) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1LeaseList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoordinationV1LeaseList json value to io.Writer.
func (s IoK8sAPICoordinationV1LeaseList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoordinationV1LeaseList json value from io.Reader.
func (s *IoK8sAPICoordinationV1LeaseList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoordinationV1LeaseList from json stream.
func (s *IoK8sAPICoordinationV1LeaseList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1LeaseSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "acquireTime".
	if s.HolderIdentity.Set {
		more.More()
		j.WriteObjectField("holderIdentity")
		s.HolderIdentity.WriteJSON(j)
	}
	if s.LeaseDurationSeconds.Set {
		more.More()
		j.WriteObjectField("leaseDurationSeconds")
		s.LeaseDurationSeconds.WriteJSON(j)
	}
	if s.LeaseTransitions.Set {
		more.More()
		j.WriteObjectField("leaseTransitions")
		s.LeaseTransitions.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "renewTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoordinationV1LeaseSpec json value to io.Writer.
func (s IoK8sAPICoordinationV1LeaseSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoordinationV1LeaseSpec json value from io.Reader.
func (s *IoK8sAPICoordinationV1LeaseSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoordinationV1LeaseSpec from json stream.
func (s *IoK8sAPICoordinationV1LeaseSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "acquireTime":
			// Unsupported kind "pointer" for field "AcquireTime".
			i.Skip()
			return true
		case "holderIdentity":
			s.HolderIdentity.Reset()
			if err := s.HolderIdentity.ReadJSON(i); err != nil {
				i.ReportError("Field HolderIdentity", err.Error())
				return false
			}
			return true
		case "leaseDurationSeconds":
			s.LeaseDurationSeconds.Reset()
			if err := s.LeaseDurationSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field LeaseDurationSeconds", err.Error())
				return false
			}
			return true
		case "leaseTransitions":
			s.LeaseTransitions.Reset()
			if err := s.LeaseTransitions.ReadJSON(i); err != nil {
				i.ReportError("Field LeaseTransitions", err.Error())
				return false
			}
			return true
		case "renewTime":
			// Unsupported kind "pointer" for field "RenewTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Partition.Set {
		more.More()
		j.WriteObjectField("partition")
		s.Partition.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource from json stream.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "partition":
			s.Partition.Reset()
			if err := s.Partition.ReadJSON(i); err != nil {
				i.ReportError("Field Partition", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "volumeID":
			s.VolumeID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Affinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NodeAffinity.Set {
		more.More()
		j.WriteObjectField("nodeAffinity")
		s.NodeAffinity.WriteJSON(j)
	}
	if s.PodAffinity.Set {
		more.More()
		j.WriteObjectField("podAffinity")
		s.PodAffinity.WriteJSON(j)
	}
	if s.PodAntiAffinity.Set {
		more.More()
		j.WriteObjectField("podAntiAffinity")
		s.PodAntiAffinity.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Affinity json value to io.Writer.
func (s IoK8sAPICoreV1Affinity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Affinity json value from io.Reader.
func (s *IoK8sAPICoreV1Affinity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Affinity from json stream.
func (s *IoK8sAPICoreV1Affinity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nodeAffinity":
			s.NodeAffinity.Reset()
			if err := s.NodeAffinity.ReadJSON(i); err != nil {
				i.ReportError("Field NodeAffinity", err.Error())
				return false
			}
			return true
		case "podAffinity":
			s.PodAffinity.Reset()
			if err := s.PodAffinity.ReadJSON(i); err != nil {
				i.ReportError("Field PodAffinity", err.Error())
				return false
			}
			return true
		case "podAntiAffinity":
			s.PodAntiAffinity.Reset()
			if err := s.PodAntiAffinity.ReadJSON(i); err != nil {
				i.ReportError("Field PodAntiAffinity", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AttachedVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("devicePath")
	j.WriteString(s.DevicePath)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1AttachedVolume json value to io.Writer.
func (s IoK8sAPICoreV1AttachedVolume) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1AttachedVolume json value from io.Reader.
func (s *IoK8sAPICoreV1AttachedVolume) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1AttachedVolume from json stream.
func (s *IoK8sAPICoreV1AttachedVolume) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "devicePath":
			s.DevicePath = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CachingMode.Set {
		more.More()
		j.WriteObjectField("cachingMode")
		s.CachingMode.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("diskName")
	j.WriteString(s.DiskName)
	more.More()
	j.WriteObjectField("diskURI")
	j.WriteString(s.DiskURI)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1AzureDiskVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1AzureDiskVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1AzureDiskVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1AzureDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cachingMode":
			s.CachingMode.Reset()
			if err := s.CachingMode.ReadJSON(i); err != nil {
				i.ReportError("Field CachingMode", err.Error())
				return false
			}
			return true
		case "diskName":
			s.DiskName = i.ReadString()
			return i.Error == nil
		case "diskURI":
			s.DiskURI = i.ReadString()
			return i.Error == nil
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureFilePersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretName")
	j.WriteString(s.SecretName)
	if s.SecretNamespace.Set {
		more.More()
		j.WriteObjectField("secretNamespace")
		s.SecretNamespace.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("shareName")
	j.WriteString(s.ShareName)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1AzureFilePersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1AzureFilePersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1AzureFilePersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1AzureFilePersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretName":
			s.SecretName = i.ReadString()
			return i.Error == nil
		case "secretNamespace":
			s.SecretNamespace.Reset()
			if err := s.SecretNamespace.ReadJSON(i); err != nil {
				i.ReportError("Field SecretNamespace", err.Error())
				return false
			}
			return true
		case "shareName":
			s.ShareName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureFileVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretName")
	j.WriteString(s.SecretName)
	more.More()
	j.WriteObjectField("shareName")
	j.WriteString(s.ShareName)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1AzureFileVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1AzureFileVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1AzureFileVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1AzureFileVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretName":
			s.SecretName = i.ReadString()
			return i.Error == nil
		case "shareName":
			s.ShareName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ControllerExpandSecretRef.Set {
		more.More()
		j.WriteObjectField("controllerExpandSecretRef")
		s.ControllerExpandSecretRef.WriteJSON(j)
	}
	if s.ControllerPublishSecretRef.Set {
		more.More()
		j.WriteObjectField("controllerPublishSecretRef")
		s.ControllerPublishSecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.NodePublishSecretRef.Set {
		more.More()
		j.WriteObjectField("nodePublishSecretRef")
		s.NodePublishSecretRef.WriteJSON(j)
	}
	if s.NodeStageSecretRef.Set {
		more.More()
		j.WriteObjectField("nodeStageSecretRef")
		s.NodeStageSecretRef.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "volumeAttributes".
	more.More()
	j.WriteObjectField("volumeHandle")
	j.WriteString(s.VolumeHandle)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CSIPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CSIPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CSIPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CSIPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "controllerExpandSecretRef":
			s.ControllerExpandSecretRef.Reset()
			if err := s.ControllerExpandSecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field ControllerExpandSecretRef", err.Error())
				return false
			}
			return true
		case "controllerPublishSecretRef":
			s.ControllerPublishSecretRef.Reset()
			if err := s.ControllerPublishSecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field ControllerPublishSecretRef", err.Error())
				return false
			}
			return true
		case "driver":
			s.Driver = i.ReadString()
			return i.Error == nil
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "nodePublishSecretRef":
			s.NodePublishSecretRef.Reset()
			if err := s.NodePublishSecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field NodePublishSecretRef", err.Error())
				return false
			}
			return true
		case "nodeStageSecretRef":
			s.NodeStageSecretRef.Reset()
			if err := s.NodeStageSecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field NodeStageSecretRef", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "volumeAttributes":
			// Unsupported kind "pointer" for field "VolumeAttributes".
			i.Skip()
			return true
		case "volumeHandle":
			s.VolumeHandle = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.NodePublishSecretRef.Set {
		more.More()
		j.WriteObjectField("nodePublishSecretRef")
		s.NodePublishSecretRef.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "volumeAttributes".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CSIVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CSIVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CSIVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CSIVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CSIVolumeSource from json stream.
func (s *IoK8sAPICoreV1CSIVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "driver":
			s.Driver = i.ReadString()
			return i.Error == nil
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "nodePublishSecretRef":
			s.NodePublishSecretRef.Reset()
			if err := s.NodePublishSecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field NodePublishSecretRef", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "volumeAttributes":
			// Unsupported kind "pointer" for field "VolumeAttributes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Capabilities) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Add != nil {
		more.More()
		j.WriteObjectField("add")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Add {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Drop != nil {
		more.More()
		j.WriteObjectField("drop")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Drop {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Capabilities json value to io.Writer.
func (s IoK8sAPICoreV1Capabilities) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Capabilities json value from io.Reader.
func (s *IoK8sAPICoreV1Capabilities) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Capabilities from json stream.
func (s *IoK8sAPICoreV1Capabilities) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "add":
			// Unsupported kind "array" for field "Add".
			i.Skip()
			return true
		case "drop":
			// Unsupported kind "array" for field "Drop".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CephFSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretFile.Set {
		more.More()
		j.WriteObjectField("secretFile")
		s.SecretFile.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CephFSPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CephFSPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CephFSPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CephFSPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "monitors":
			// Unsupported kind "array" for field "Monitors".
			i.Skip()
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretFile":
			s.SecretFile.Reset()
			if err := s.SecretFile.ReadJSON(i); err != nil {
				i.ReportError("Field SecretFile", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CephFSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretFile.Set {
		more.More()
		j.WriteObjectField("secretFile")
		s.SecretFile.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CephFSVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CephFSVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CephFSVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CephFSVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CephFSVolumeSource from json stream.
func (s *IoK8sAPICoreV1CephFSVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "monitors":
			// Unsupported kind "array" for field "Monitors".
			i.Skip()
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretFile":
			s.SecretFile.Reset()
			if err := s.SecretFile.ReadJSON(i); err != nil {
				i.ReportError("Field SecretFile", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CinderPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CinderPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CinderPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CinderPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CinderPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "volumeID":
			s.VolumeID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CinderVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CinderVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CinderVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CinderVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CinderVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CinderVolumeSource from json stream.
func (s *IoK8sAPICoreV1CinderVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "volumeID":
			s.VolumeID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ClientIPConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ClientIPConfig json value to io.Writer.
func (s IoK8sAPICoreV1ClientIPConfig) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ClientIPConfig json value from io.Reader.
func (s *IoK8sAPICoreV1ClientIPConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ClientIPConfig from json stream.
func (s *IoK8sAPICoreV1ClientIPConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TimeoutSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ComponentCondition json value to io.Writer.
func (s IoK8sAPICoreV1ComponentCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ComponentCondition json value from io.Reader.
func (s *IoK8sAPICoreV1ComponentCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ComponentCondition from json stream.
func (s *IoK8sAPICoreV1ComponentCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				i.ReportError("Field Error", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ComponentStatus json value to io.Writer.
func (s IoK8sAPICoreV1ComponentStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ComponentStatus json value from io.Reader.
func (s *IoK8sAPICoreV1ComponentStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ComponentStatus from json stream.
func (s *IoK8sAPICoreV1ComponentStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentStatusList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ComponentStatusList json value to io.Writer.
func (s IoK8sAPICoreV1ComponentStatusList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ComponentStatusList json value from io.Reader.
func (s *IoK8sAPICoreV1ComponentStatusList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ComponentStatusList from json stream.
func (s *IoK8sAPICoreV1ComponentStatusList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMap) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "binaryData".
	// Unsupported kind "pointer" for field "data".
	if s.Immutable.Set {
		more.More()
		j.WriteObjectField("immutable")
		s.Immutable.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMap json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMap) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMap json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMap) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMap from json stream.
func (s *IoK8sAPICoreV1ConfigMap) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "binaryData":
			// Unsupported kind "pointer" for field "BinaryData".
			i.Skip()
			return true
		case "data":
			// Unsupported kind "pointer" for field "Data".
			i.Skip()
			return true
		case "immutable":
			s.Immutable.Reset()
			if err := s.Immutable.ReadJSON(i); err != nil {
				i.ReportError("Field Immutable", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapEnvSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapEnvSource json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapEnvSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapEnvSource json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapEnvSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapEnvSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapEnvSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapKeySelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapKeySelector json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapKeySelector) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapKeySelector json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapKeySelector from json stream.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapList json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapList json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapList from json stream.
func (s *IoK8sAPICoreV1ConfigMapList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapNodeConfigSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("kubeletConfigKey")
	j.WriteString(s.KubeletConfigKey)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapNodeConfigSource json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapNodeConfigSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapNodeConfigSource json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapNodeConfigSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "kubeletConfigKey":
			s.KubeletConfigKey = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace = i.ReadString()
			return i.Error == nil
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceVersion", err.Error())
				return false
			}
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapProjection json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapProjection) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapProjection json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapProjection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapProjection from json stream.
func (s *IoK8sAPICoreV1ConfigMapProjection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapVolumeSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultMode", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Container) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Args != nil {
		more.More()
		j.WriteObjectField("args")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Args {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Command != nil {
		more.More()
		j.WriteObjectField("command")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Command {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Env != nil {
		more.More()
		j.WriteObjectField("env")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Env {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EnvFrom != nil {
		more.More()
		j.WriteObjectField("envFrom")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EnvFrom {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Image.Set {
		more.More()
		j.WriteObjectField("image")
		s.Image.WriteJSON(j)
	}
	if s.ImagePullPolicy.Set {
		more.More()
		j.WriteObjectField("imagePullPolicy")
		s.ImagePullPolicy.WriteJSON(j)
	}
	if s.Lifecycle.Set {
		more.More()
		j.WriteObjectField("lifecycle")
		s.Lifecycle.WriteJSON(j)
	}
	if s.LivenessProbe.Set {
		more.More()
		j.WriteObjectField("livenessProbe")
		s.LivenessProbe.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadinessProbe.Set {
		more.More()
		j.WriteObjectField("readinessProbe")
		s.ReadinessProbe.WriteJSON(j)
	}
	if s.Resources.Set {
		more.More()
		j.WriteObjectField("resources")
		s.Resources.WriteJSON(j)
	}
	if s.SecurityContext.Set {
		more.More()
		j.WriteObjectField("securityContext")
		s.SecurityContext.WriteJSON(j)
	}
	if s.StartupProbe.Set {
		more.More()
		j.WriteObjectField("startupProbe")
		s.StartupProbe.WriteJSON(j)
	}
	if s.Stdin.Set {
		more.More()
		j.WriteObjectField("stdin")
		s.Stdin.WriteJSON(j)
	}
	if s.StdinOnce.Set {
		more.More()
		j.WriteObjectField("stdinOnce")
		s.StdinOnce.WriteJSON(j)
	}
	if s.TerminationMessagePath.Set {
		more.More()
		j.WriteObjectField("terminationMessagePath")
		s.TerminationMessagePath.WriteJSON(j)
	}
	if s.TerminationMessagePolicy.Set {
		more.More()
		j.WriteObjectField("terminationMessagePolicy")
		s.TerminationMessagePolicy.WriteJSON(j)
	}
	if s.Tty.Set {
		more.More()
		j.WriteObjectField("tty")
		s.Tty.WriteJSON(j)
	}
	if s.VolumeDevices != nil {
		more.More()
		j.WriteObjectField("volumeDevices")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeDevices {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumeMounts != nil {
		more.More()
		j.WriteObjectField("volumeMounts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeMounts {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.WorkingDir.Set {
		more.More()
		j.WriteObjectField("workingDir")
		s.WorkingDir.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Container json value to io.Writer.
func (s IoK8sAPICoreV1Container) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Container json value from io.Reader.
func (s *IoK8sAPICoreV1Container) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Container from json stream.
func (s *IoK8sAPICoreV1Container) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "args":
			// Unsupported kind "array" for field "Args".
			i.Skip()
			return true
		case "command":
			// Unsupported kind "array" for field "Command".
			i.Skip()
			return true
		case "env":
			// Unsupported kind "array" for field "Env".
			i.Skip()
			return true
		case "envFrom":
			// Unsupported kind "array" for field "EnvFrom".
			i.Skip()
			return true
		case "image":
			s.Image.Reset()
			if err := s.Image.ReadJSON(i); err != nil {
				i.ReportError("Field Image", err.Error())
				return false
			}
			return true
		case "imagePullPolicy":
			s.ImagePullPolicy.Reset()
			if err := s.ImagePullPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ImagePullPolicy", err.Error())
				return false
			}
			return true
		case "lifecycle":
			s.Lifecycle.Reset()
			if err := s.Lifecycle.ReadJSON(i); err != nil {
				i.ReportError("Field Lifecycle", err.Error())
				return false
			}
			return true
		case "livenessProbe":
			s.LivenessProbe.Reset()
			if err := s.LivenessProbe.ReadJSON(i); err != nil {
				i.ReportError("Field LivenessProbe", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "ports":
			// Unsupported kind "array" for field "Ports".
			i.Skip()
			return true
		case "readinessProbe":
			s.ReadinessProbe.Reset()
			if err := s.ReadinessProbe.ReadJSON(i); err != nil {
				i.ReportError("Field ReadinessProbe", err.Error())
				return false
			}
			return true
		case "resources":
			s.Resources.Reset()
			if err := s.Resources.ReadJSON(i); err != nil {
				i.ReportError("Field Resources", err.Error())
				return false
			}
			return true
		case "securityContext":
			s.SecurityContext.Reset()
			if err := s.SecurityContext.ReadJSON(i); err != nil {
				i.ReportError("Field SecurityContext", err.Error())
				return false
			}
			return true
		case "startupProbe":
			s.StartupProbe.Reset()
			if err := s.StartupProbe.ReadJSON(i); err != nil {
				i.ReportError("Field StartupProbe", err.Error())
				return false
			}
			return true
		case "stdin":
			s.Stdin.Reset()
			if err := s.Stdin.ReadJSON(i); err != nil {
				i.ReportError("Field Stdin", err.Error())
				return false
			}
			return true
		case "stdinOnce":
			s.StdinOnce.Reset()
			if err := s.StdinOnce.ReadJSON(i); err != nil {
				i.ReportError("Field StdinOnce", err.Error())
				return false
			}
			return true
		case "terminationMessagePath":
			s.TerminationMessagePath.Reset()
			if err := s.TerminationMessagePath.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationMessagePath", err.Error())
				return false
			}
			return true
		case "terminationMessagePolicy":
			s.TerminationMessagePolicy.Reset()
			if err := s.TerminationMessagePolicy.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationMessagePolicy", err.Error())
				return false
			}
			return true
		case "tty":
			s.Tty.Reset()
			if err := s.Tty.ReadJSON(i); err != nil {
				i.ReportError("Field Tty", err.Error())
				return false
			}
			return true
		case "volumeDevices":
			// Unsupported kind "array" for field "VolumeDevices".
			i.Skip()
			return true
		case "volumeMounts":
			// Unsupported kind "array" for field "VolumeMounts".
			i.Skip()
			return true
		case "workingDir":
			s.WorkingDir.Reset()
			if err := s.WorkingDir.ReadJSON(i); err != nil {
				i.ReportError("Field WorkingDir", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerImage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Names != nil {
		more.More()
		j.WriteObjectField("names")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Names {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.SizeBytes.Set {
		more.More()
		j.WriteObjectField("sizeBytes")
		s.SizeBytes.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerImage json value to io.Writer.
func (s IoK8sAPICoreV1ContainerImage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerImage json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerImage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerImage from json stream.
func (s *IoK8sAPICoreV1ContainerImage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "names":
			// Unsupported kind "array" for field "Names".
			i.Skip()
			return true
		case "sizeBytes":
			s.SizeBytes.Reset()
			if err := s.SizeBytes.ReadJSON(i); err != nil {
				i.ReportError("Field SizeBytes", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("containerPort")
	j.WriteInt32(s.ContainerPort)
	if s.HostIP.Set {
		more.More()
		j.WriteObjectField("hostIP")
		s.HostIP.WriteJSON(j)
	}
	if s.HostPort.Set {
		more.More()
		j.WriteObjectField("hostPort")
		s.HostPort.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerPort json value to io.Writer.
func (s IoK8sAPICoreV1ContainerPort) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerPort json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerPort from json stream.
func (s *IoK8sAPICoreV1ContainerPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerPort":
			s.ContainerPort = i.ReadInt32()
			return i.Error == nil
		case "hostIP":
			s.HostIP.Reset()
			if err := s.HostIP.ReadJSON(i); err != nil {
				i.ReportError("Field HostIP", err.Error())
				return false
			}
			return true
		case "hostPort":
			s.HostPort.Reset()
			if err := s.HostPort.ReadJSON(i); err != nil {
				i.ReportError("Field HostPort", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerState) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Running.Set {
		more.More()
		j.WriteObjectField("running")
		s.Running.WriteJSON(j)
	}
	if s.Terminated.Set {
		more.More()
		j.WriteObjectField("terminated")
		s.Terminated.WriteJSON(j)
	}
	if s.Waiting.Set {
		more.More()
		j.WriteObjectField("waiting")
		s.Waiting.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerState json value to io.Writer.
func (s IoK8sAPICoreV1ContainerState) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerState json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerState) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerState from json stream.
func (s *IoK8sAPICoreV1ContainerState) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "running":
			s.Running.Reset()
			if err := s.Running.ReadJSON(i); err != nil {
				i.ReportError("Field Running", err.Error())
				return false
			}
			return true
		case "terminated":
			s.Terminated.Reset()
			if err := s.Terminated.ReadJSON(i); err != nil {
				i.ReportError("Field Terminated", err.Error())
				return false
			}
			return true
		case "waiting":
			s.Waiting.Reset()
			if err := s.Waiting.ReadJSON(i); err != nil {
				i.ReportError("Field Waiting", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateRunning) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "startedAt".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerStateRunning json value to io.Writer.
func (s IoK8sAPICoreV1ContainerStateRunning) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerStateRunning json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerStateRunning) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateRunning from json stream.
func (s *IoK8sAPICoreV1ContainerStateRunning) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "startedAt":
			// Unsupported kind "pointer" for field "StartedAt".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateTerminated) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerID.Set {
		more.More()
		j.WriteObjectField("containerID")
		s.ContainerID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("exitCode")
	j.WriteInt32(s.ExitCode)
	// Unsupported kind "pointer" for field "finishedAt".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Signal.Set {
		more.More()
		j.WriteObjectField("signal")
		s.Signal.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "startedAt".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerStateTerminated json value to io.Writer.
func (s IoK8sAPICoreV1ContainerStateTerminated) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerStateTerminated json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerStateTerminated) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateTerminated from json stream.
func (s *IoK8sAPICoreV1ContainerStateTerminated) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerID":
			s.ContainerID.Reset()
			if err := s.ContainerID.ReadJSON(i); err != nil {
				i.ReportError("Field ContainerID", err.Error())
				return false
			}
			return true
		case "exitCode":
			s.ExitCode = i.ReadInt32()
			return i.Error == nil
		case "finishedAt":
			// Unsupported kind "pointer" for field "FinishedAt".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "signal":
			s.Signal.Reset()
			if err := s.Signal.ReadJSON(i); err != nil {
				i.ReportError("Field Signal", err.Error())
				return false
			}
			return true
		case "startedAt":
			// Unsupported kind "pointer" for field "StartedAt".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateWaiting) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerStateWaiting json value to io.Writer.
func (s IoK8sAPICoreV1ContainerStateWaiting) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerStateWaiting json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerStateWaiting) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateWaiting from json stream.
func (s *IoK8sAPICoreV1ContainerStateWaiting) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerID.Set {
		more.More()
		j.WriteObjectField("containerID")
		s.ContainerID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("image")
	j.WriteString(s.Image)
	more.More()
	j.WriteObjectField("imageID")
	j.WriteString(s.ImageID)
	if s.LastState.Set {
		more.More()
		j.WriteObjectField("lastState")
		s.LastState.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("ready")
	j.WriteBool(s.Ready)
	more.More()
	j.WriteObjectField("restartCount")
	j.WriteInt32(s.RestartCount)
	if s.Started.Set {
		more.More()
		j.WriteObjectField("started")
		s.Started.WriteJSON(j)
	}
	if s.State.Set {
		more.More()
		j.WriteObjectField("state")
		s.State.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerStatus json value to io.Writer.
func (s IoK8sAPICoreV1ContainerStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerStatus json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerStatus from json stream.
func (s *IoK8sAPICoreV1ContainerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerID":
			s.ContainerID.Reset()
			if err := s.ContainerID.ReadJSON(i); err != nil {
				i.ReportError("Field ContainerID", err.Error())
				return false
			}
			return true
		case "image":
			s.Image = i.ReadString()
			return i.Error == nil
		case "imageID":
			s.ImageID = i.ReadString()
			return i.Error == nil
		case "lastState":
			s.LastState.Reset()
			if err := s.LastState.ReadJSON(i); err != nil {
				i.ReportError("Field LastState", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "ready":
			s.Ready = i.ReadBool()
			return i.Error == nil
		case "restartCount":
			s.RestartCount = i.ReadInt32()
			return i.Error == nil
		case "started":
			s.Started.Reset()
			if err := s.Started.ReadJSON(i); err != nil {
				i.ReportError("Field Started", err.Error())
				return false
			}
			return true
		case "state":
			s.State.Reset()
			if err := s.State.ReadJSON(i); err != nil {
				i.ReportError("Field State", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DaemonEndpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("Port")
	j.WriteInt32(s.Port)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1DaemonEndpoint json value to io.Writer.
func (s IoK8sAPICoreV1DaemonEndpoint) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1DaemonEndpoint json value from io.Reader.
func (s *IoK8sAPICoreV1DaemonEndpoint) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1DaemonEndpoint from json stream.
func (s *IoK8sAPICoreV1DaemonEndpoint) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "Port":
			s.Port = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1DownwardAPIProjection json value to io.Writer.
func (s IoK8sAPICoreV1DownwardAPIProjection) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1DownwardAPIProjection json value from io.Reader.
func (s *IoK8sAPICoreV1DownwardAPIProjection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIProjection from json stream.
func (s *IoK8sAPICoreV1DownwardAPIProjection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIVolumeFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FieldRef.Set {
		more.More()
		j.WriteObjectField("fieldRef")
		s.FieldRef.WriteJSON(j)
	}
	if s.Mode.Set {
		more.More()
		j.WriteObjectField("mode")
		s.Mode.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ResourceFieldRef.Set {
		more.More()
		j.WriteObjectField("resourceFieldRef")
		s.ResourceFieldRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1DownwardAPIVolumeFile json value to io.Writer.
func (s IoK8sAPICoreV1DownwardAPIVolumeFile) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1DownwardAPIVolumeFile json value from io.Reader.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIVolumeFile from json stream.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fieldRef":
			s.FieldRef.Reset()
			if err := s.FieldRef.ReadJSON(i); err != nil {
				i.ReportError("Field FieldRef", err.Error())
				return false
			}
			return true
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(i); err != nil {
				i.ReportError("Field Mode", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "resourceFieldRef":
			s.ResourceFieldRef.Reset()
			if err := s.ResourceFieldRef.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceFieldRef", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1DownwardAPIVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1DownwardAPIVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1DownwardAPIVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1DownwardAPIVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIVolumeSource from json stream.
func (s *IoK8sAPICoreV1DownwardAPIVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultMode", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EmptyDirVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Medium.Set {
		more.More()
		j.WriteObjectField("medium")
		s.Medium.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "sizeLimit".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EmptyDirVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1EmptyDirVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EmptyDirVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1EmptyDirVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EmptyDirVolumeSource from json stream.
func (s *IoK8sAPICoreV1EmptyDirVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "medium":
			s.Medium.Reset()
			if err := s.Medium.ReadJSON(i); err != nil {
				i.ReportError("Field Medium", err.Error())
				return false
			}
			return true
		case "sizeLimit":
			// Unsupported kind "pointer" for field "SizeLimit".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointAddress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ip")
	j.WriteString(s.IP)
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	if s.TargetRef.Set {
		more.More()
		j.WriteObjectField("targetRef")
		s.TargetRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EndpointAddress json value to io.Writer.
func (s IoK8sAPICoreV1EndpointAddress) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EndpointAddress json value from io.Reader.
func (s *IoK8sAPICoreV1EndpointAddress) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EndpointAddress from json stream.
func (s *IoK8sAPICoreV1EndpointAddress) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				i.ReportError("Field Hostname", err.Error())
				return false
			}
			return true
		case "ip":
			s.IP = i.ReadString()
			return i.Error == nil
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				i.ReportError("Field NodeName", err.Error())
				return false
			}
			return true
		case "targetRef":
			s.TargetRef.Reset()
			if err := s.TargetRef.ReadJSON(i); err != nil {
				i.ReportError("Field TargetRef", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("port")
	j.WriteInt32(s.Port)
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EndpointPort json value to io.Writer.
func (s IoK8sAPICoreV1EndpointPort) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EndpointPort json value from io.Reader.
func (s *IoK8sAPICoreV1EndpointPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EndpointPort from json stream.
func (s *IoK8sAPICoreV1EndpointPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				i.ReportError("Field AppProtocol", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "port":
			s.Port = i.ReadInt32()
			return i.Error == nil
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointSubset) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Addresses != nil {
		more.More()
		j.WriteObjectField("addresses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Addresses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NotReadyAddresses != nil {
		more.More()
		j.WriteObjectField("notReadyAddresses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NotReadyAddresses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EndpointSubset json value to io.Writer.
func (s IoK8sAPICoreV1EndpointSubset) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EndpointSubset json value from io.Reader.
func (s *IoK8sAPICoreV1EndpointSubset) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EndpointSubset from json stream.
func (s *IoK8sAPICoreV1EndpointSubset) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addresses":
			// Unsupported kind "array" for field "Addresses".
			i.Skip()
			return true
		case "notReadyAddresses":
			// Unsupported kind "array" for field "NotReadyAddresses".
			i.Skip()
			return true
		case "ports":
			// Unsupported kind "array" for field "Ports".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Endpoints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Subsets != nil {
		more.More()
		j.WriteObjectField("subsets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Subsets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Endpoints json value to io.Writer.
func (s IoK8sAPICoreV1Endpoints) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Endpoints json value from io.Reader.
func (s *IoK8sAPICoreV1Endpoints) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Endpoints from json stream.
func (s *IoK8sAPICoreV1Endpoints) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "subsets":
			// Unsupported kind "array" for field "Subsets".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointsList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EndpointsList json value to io.Writer.
func (s IoK8sAPICoreV1EndpointsList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EndpointsList json value from io.Reader.
func (s *IoK8sAPICoreV1EndpointsList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EndpointsList from json stream.
func (s *IoK8sAPICoreV1EndpointsList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvFromSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMapRef.Set {
		more.More()
		j.WriteObjectField("configMapRef")
		s.ConfigMapRef.WriteJSON(j)
	}
	if s.Prefix.Set {
		more.More()
		j.WriteObjectField("prefix")
		s.Prefix.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EnvFromSource json value to io.Writer.
func (s IoK8sAPICoreV1EnvFromSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EnvFromSource json value from io.Reader.
func (s *IoK8sAPICoreV1EnvFromSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EnvFromSource from json stream.
func (s *IoK8sAPICoreV1EnvFromSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "configMapRef":
			s.ConfigMapRef.Reset()
			if err := s.ConfigMapRef.ReadJSON(i); err != nil {
				i.ReportError("Field ConfigMapRef", err.Error())
				return false
			}
			return true
		case "prefix":
			s.Prefix.Reset()
			if err := s.Prefix.ReadJSON(i); err != nil {
				i.ReportError("Field Prefix", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvVar) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	if s.ValueFrom.Set {
		more.More()
		j.WriteObjectField("valueFrom")
		s.ValueFrom.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EnvVar json value to io.Writer.
func (s IoK8sAPICoreV1EnvVar) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EnvVar json value from io.Reader.
func (s *IoK8sAPICoreV1EnvVar) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EnvVar from json stream.
func (s *IoK8sAPICoreV1EnvVar) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		case "valueFrom":
			s.ValueFrom.Reset()
			if err := s.ValueFrom.ReadJSON(i); err != nil {
				i.ReportError("Field ValueFrom", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvVarSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMapKeyRef.Set {
		more.More()
		j.WriteObjectField("configMapKeyRef")
		s.ConfigMapKeyRef.WriteJSON(j)
	}
	if s.FieldRef.Set {
		more.More()
		j.WriteObjectField("fieldRef")
		s.FieldRef.WriteJSON(j)
	}
	if s.ResourceFieldRef.Set {
		more.More()
		j.WriteObjectField("resourceFieldRef")
		s.ResourceFieldRef.WriteJSON(j)
	}
	if s.SecretKeyRef.Set {
		more.More()
		j.WriteObjectField("secretKeyRef")
		s.SecretKeyRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EnvVarSource json value to io.Writer.
func (s IoK8sAPICoreV1EnvVarSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EnvVarSource json value from io.Reader.
func (s *IoK8sAPICoreV1EnvVarSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EnvVarSource from json stream.
func (s *IoK8sAPICoreV1EnvVarSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "configMapKeyRef":
			s.ConfigMapKeyRef.Reset()
			if err := s.ConfigMapKeyRef.ReadJSON(i); err != nil {
				i.ReportError("Field ConfigMapKeyRef", err.Error())
				return false
			}
			return true
		case "fieldRef":
			s.FieldRef.Reset()
			if err := s.FieldRef.ReadJSON(i); err != nil {
				i.ReportError("Field FieldRef", err.Error())
				return false
			}
			return true
		case "resourceFieldRef":
			s.ResourceFieldRef.Reset()
			if err := s.ResourceFieldRef.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceFieldRef", err.Error())
				return false
			}
			return true
		case "secretKeyRef":
			s.SecretKeyRef.Reset()
			if err := s.SecretKeyRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretKeyRef", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EphemeralContainer) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Args != nil {
		more.More()
		j.WriteObjectField("args")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Args {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Command != nil {
		more.More()
		j.WriteObjectField("command")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Command {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Env != nil {
		more.More()
		j.WriteObjectField("env")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Env {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EnvFrom != nil {
		more.More()
		j.WriteObjectField("envFrom")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EnvFrom {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Image.Set {
		more.More()
		j.WriteObjectField("image")
		s.Image.WriteJSON(j)
	}
	if s.ImagePullPolicy.Set {
		more.More()
		j.WriteObjectField("imagePullPolicy")
		s.ImagePullPolicy.WriteJSON(j)
	}
	if s.Lifecycle.Set {
		more.More()
		j.WriteObjectField("lifecycle")
		s.Lifecycle.WriteJSON(j)
	}
	if s.LivenessProbe.Set {
		more.More()
		j.WriteObjectField("livenessProbe")
		s.LivenessProbe.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadinessProbe.Set {
		more.More()
		j.WriteObjectField("readinessProbe")
		s.ReadinessProbe.WriteJSON(j)
	}
	if s.Resources.Set {
		more.More()
		j.WriteObjectField("resources")
		s.Resources.WriteJSON(j)
	}
	if s.SecurityContext.Set {
		more.More()
		j.WriteObjectField("securityContext")
		s.SecurityContext.WriteJSON(j)
	}
	if s.StartupProbe.Set {
		more.More()
		j.WriteObjectField("startupProbe")
		s.StartupProbe.WriteJSON(j)
	}
	if s.Stdin.Set {
		more.More()
		j.WriteObjectField("stdin")
		s.Stdin.WriteJSON(j)
	}
	if s.StdinOnce.Set {
		more.More()
		j.WriteObjectField("stdinOnce")
		s.StdinOnce.WriteJSON(j)
	}
	if s.TargetContainerName.Set {
		more.More()
		j.WriteObjectField("targetContainerName")
		s.TargetContainerName.WriteJSON(j)
	}
	if s.TerminationMessagePath.Set {
		more.More()
		j.WriteObjectField("terminationMessagePath")
		s.TerminationMessagePath.WriteJSON(j)
	}
	if s.TerminationMessagePolicy.Set {
		more.More()
		j.WriteObjectField("terminationMessagePolicy")
		s.TerminationMessagePolicy.WriteJSON(j)
	}
	if s.Tty.Set {
		more.More()
		j.WriteObjectField("tty")
		s.Tty.WriteJSON(j)
	}
	if s.VolumeDevices != nil {
		more.More()
		j.WriteObjectField("volumeDevices")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeDevices {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumeMounts != nil {
		more.More()
		j.WriteObjectField("volumeMounts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeMounts {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.WorkingDir.Set {
		more.More()
		j.WriteObjectField("workingDir")
		s.WorkingDir.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EphemeralContainer json value to io.Writer.
func (s IoK8sAPICoreV1EphemeralContainer) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EphemeralContainer json value from io.Reader.
func (s *IoK8sAPICoreV1EphemeralContainer) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EphemeralContainer from json stream.
func (s *IoK8sAPICoreV1EphemeralContainer) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "args":
			// Unsupported kind "array" for field "Args".
			i.Skip()
			return true
		case "command":
			// Unsupported kind "array" for field "Command".
			i.Skip()
			return true
		case "env":
			// Unsupported kind "array" for field "Env".
			i.Skip()
			return true
		case "envFrom":
			// Unsupported kind "array" for field "EnvFrom".
			i.Skip()
			return true
		case "image":
			s.Image.Reset()
			if err := s.Image.ReadJSON(i); err != nil {
				i.ReportError("Field Image", err.Error())
				return false
			}
			return true
		case "imagePullPolicy":
			s.ImagePullPolicy.Reset()
			if err := s.ImagePullPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ImagePullPolicy", err.Error())
				return false
			}
			return true
		case "lifecycle":
			s.Lifecycle.Reset()
			if err := s.Lifecycle.ReadJSON(i); err != nil {
				i.ReportError("Field Lifecycle", err.Error())
				return false
			}
			return true
		case "livenessProbe":
			s.LivenessProbe.Reset()
			if err := s.LivenessProbe.ReadJSON(i); err != nil {
				i.ReportError("Field LivenessProbe", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "ports":
			// Unsupported kind "array" for field "Ports".
			i.Skip()
			return true
		case "readinessProbe":
			s.ReadinessProbe.Reset()
			if err := s.ReadinessProbe.ReadJSON(i); err != nil {
				i.ReportError("Field ReadinessProbe", err.Error())
				return false
			}
			return true
		case "resources":
			s.Resources.Reset()
			if err := s.Resources.ReadJSON(i); err != nil {
				i.ReportError("Field Resources", err.Error())
				return false
			}
			return true
		case "securityContext":
			s.SecurityContext.Reset()
			if err := s.SecurityContext.ReadJSON(i); err != nil {
				i.ReportError("Field SecurityContext", err.Error())
				return false
			}
			return true
		case "startupProbe":
			s.StartupProbe.Reset()
			if err := s.StartupProbe.ReadJSON(i); err != nil {
				i.ReportError("Field StartupProbe", err.Error())
				return false
			}
			return true
		case "stdin":
			s.Stdin.Reset()
			if err := s.Stdin.ReadJSON(i); err != nil {
				i.ReportError("Field Stdin", err.Error())
				return false
			}
			return true
		case "stdinOnce":
			s.StdinOnce.Reset()
			if err := s.StdinOnce.ReadJSON(i); err != nil {
				i.ReportError("Field StdinOnce", err.Error())
				return false
			}
			return true
		case "targetContainerName":
			s.TargetContainerName.Reset()
			if err := s.TargetContainerName.ReadJSON(i); err != nil {
				i.ReportError("Field TargetContainerName", err.Error())
				return false
			}
			return true
		case "terminationMessagePath":
			s.TerminationMessagePath.Reset()
			if err := s.TerminationMessagePath.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationMessagePath", err.Error())
				return false
			}
			return true
		case "terminationMessagePolicy":
			s.TerminationMessagePolicy.Reset()
			if err := s.TerminationMessagePolicy.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationMessagePolicy", err.Error())
				return false
			}
			return true
		case "tty":
			s.Tty.Reset()
			if err := s.Tty.ReadJSON(i); err != nil {
				i.ReportError("Field Tty", err.Error())
				return false
			}
			return true
		case "volumeDevices":
			// Unsupported kind "array" for field "VolumeDevices".
			i.Skip()
			return true
		case "volumeMounts":
			// Unsupported kind "array" for field "VolumeMounts".
			i.Skip()
			return true
		case "workingDir":
			s.WorkingDir.Reset()
			if err := s.WorkingDir.ReadJSON(i); err != nil {
				i.ReportError("Field WorkingDir", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EphemeralVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.VolumeClaimTemplate.Set {
		more.More()
		j.WriteObjectField("volumeClaimTemplate")
		s.VolumeClaimTemplate.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EphemeralVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1EphemeralVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EphemeralVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1EphemeralVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EphemeralVolumeSource from json stream.
func (s *IoK8sAPICoreV1EphemeralVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "volumeClaimTemplate":
			s.VolumeClaimTemplate.Reset()
			if err := s.VolumeClaimTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeClaimTemplate", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Action.Set {
		more.More()
		j.WriteObjectField("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Count.Set {
		more.More()
		j.WriteObjectField("count")
		s.Count.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "eventTime".
	// Unsupported kind "pointer" for field "firstTimestamp".
	more.More()
	j.WriteObjectField("involvedObject")
	s.InvolvedObject.WriteJSON(j)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "lastTimestamp".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("metadata")
	s.Metadata.WriteJSON(j)
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Related.Set {
		more.More()
		j.WriteObjectField("related")
		s.Related.WriteJSON(j)
	}
	if s.ReportingComponent.Set {
		more.More()
		j.WriteObjectField("reportingComponent")
		s.ReportingComponent.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		more.More()
		j.WriteObjectField("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	if s.Series.Set {
		more.More()
		j.WriteObjectField("series")
		s.Series.WriteJSON(j)
	}
	if s.Source.Set {
		more.More()
		j.WriteObjectField("source")
		s.Source.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Event json value to io.Writer.
func (s IoK8sAPICoreV1Event) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Event json value from io.Reader.
func (s *IoK8sAPICoreV1Event) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Event from json stream.
func (s *IoK8sAPICoreV1Event) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(i); err != nil {
				i.ReportError("Field Action", err.Error())
				return false
			}
			return true
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "count":
			s.Count.Reset()
			if err := s.Count.ReadJSON(i); err != nil {
				i.ReportError("Field Count", err.Error())
				return false
			}
			return true
		case "eventTime":
			// Unsupported kind "pointer" for field "EventTime".
			i.Skip()
			return true
		case "firstTimestamp":
			// Unsupported kind "pointer" for field "FirstTimestamp".
			i.Skip()
			return true
		case "involvedObject":
			if err := s.InvolvedObject.ReadJSON(i); err != nil {
				i.ReportError("Field InvolvedObject", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "lastTimestamp":
			// Unsupported kind "pointer" for field "LastTimestamp".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "metadata":
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "related":
			s.Related.Reset()
			if err := s.Related.ReadJSON(i); err != nil {
				i.ReportError("Field Related", err.Error())
				return false
			}
			return true
		case "reportingComponent":
			s.ReportingComponent.Reset()
			if err := s.ReportingComponent.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingComponent", err.Error())
				return false
			}
			return true
		case "reportingInstance":
			s.ReportingInstance.Reset()
			if err := s.ReportingInstance.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingInstance", err.Error())
				return false
			}
			return true
		case "series":
			s.Series.Reset()
			if err := s.Series.ReadJSON(i); err != nil {
				i.ReportError("Field Series", err.Error())
				return false
			}
			return true
		case "source":
			s.Source.Reset()
			if err := s.Source.ReadJSON(i); err != nil {
				i.ReportError("Field Source", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EventList json value to io.Writer.
func (s IoK8sAPICoreV1EventList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EventList json value from io.Reader.
func (s *IoK8sAPICoreV1EventList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EventList from json stream.
func (s *IoK8sAPICoreV1EventList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Count.Set {
		more.More()
		j.WriteObjectField("count")
		s.Count.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "lastObservedTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EventSeries json value to io.Writer.
func (s IoK8sAPICoreV1EventSeries) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EventSeries json value from io.Reader.
func (s *IoK8sAPICoreV1EventSeries) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EventSeries from json stream.
func (s *IoK8sAPICoreV1EventSeries) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "count":
			s.Count.Reset()
			if err := s.Count.ReadJSON(i); err != nil {
				i.ReportError("Field Count", err.Error())
				return false
			}
			return true
		case "lastObservedTime":
			// Unsupported kind "pointer" for field "LastObservedTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Component.Set {
		more.More()
		j.WriteObjectField("component")
		s.Component.WriteJSON(j)
	}
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EventSource json value to io.Writer.
func (s IoK8sAPICoreV1EventSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EventSource json value from io.Reader.
func (s *IoK8sAPICoreV1EventSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EventSource from json stream.
func (s *IoK8sAPICoreV1EventSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "component":
			s.Component.Reset()
			if err := s.Component.ReadJSON(i); err != nil {
				i.ReportError("Field Component", err.Error())
				return false
			}
			return true
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				i.ReportError("Field Host", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ExecAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Command != nil {
		more.More()
		j.WriteObjectField("command")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Command {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ExecAction json value to io.Writer.
func (s IoK8sAPICoreV1ExecAction) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ExecAction json value from io.Reader.
func (s *IoK8sAPICoreV1ExecAction) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ExecAction from json stream.
func (s *IoK8sAPICoreV1ExecAction) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "command":
			// Unsupported kind "array" for field "Command".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FCVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Lun.Set {
		more.More()
		j.WriteObjectField("lun")
		s.Lun.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.TargetWWNs != nil {
		more.More()
		j.WriteObjectField("targetWWNs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TargetWWNs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Wwids != nil {
		more.More()
		j.WriteObjectField("wwids")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Wwids {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1FCVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1FCVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1FCVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1FCVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1FCVolumeSource from json stream.
func (s *IoK8sAPICoreV1FCVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "lun":
			s.Lun.Reset()
			if err := s.Lun.ReadJSON(i); err != nil {
				i.ReportError("Field Lun", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "targetWWNs":
			// Unsupported kind "array" for field "TargetWWNs".
			i.Skip()
			return true
		case "wwids":
			// Unsupported kind "array" for field "Wwids".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "options".
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1FlexPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1FlexPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1FlexPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1FlexPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "driver":
			s.Driver = i.ReadString()
			return i.Error == nil
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "options":
			// Unsupported kind "pointer" for field "Options".
			i.Skip()
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "options".
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1FlexVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1FlexVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1FlexVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1FlexVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1FlexVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlexVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "driver":
			s.Driver = i.ReadString()
			return i.Error == nil
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "options":
			// Unsupported kind "pointer" for field "Options".
			i.Skip()
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlockerVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DatasetName.Set {
		more.More()
		j.WriteObjectField("datasetName")
		s.DatasetName.WriteJSON(j)
	}
	if s.DatasetUUID.Set {
		more.More()
		j.WriteObjectField("datasetUUID")
		s.DatasetUUID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1FlockerVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1FlockerVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1FlockerVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1FlockerVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1FlockerVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlockerVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "datasetName":
			s.DatasetName.Reset()
			if err := s.DatasetName.ReadJSON(i); err != nil {
				i.ReportError("Field DatasetName", err.Error())
				return false
			}
			return true
		case "datasetUUID":
			s.DatasetUUID.Reset()
			if err := s.DatasetUUID.ReadJSON(i); err != nil {
				i.ReportError("Field DatasetUUID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GCEPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Partition.Set {
		more.More()
		j.WriteObjectField("partition")
		s.Partition.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("pdName")
	j.WriteString(s.PdName)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1GCEPersistentDiskVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1GCEPersistentDiskVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1GCEPersistentDiskVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1GCEPersistentDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "partition":
			s.Partition.Reset()
			if err := s.Partition.ReadJSON(i); err != nil {
				i.ReportError("Field Partition", err.Error())
				return false
			}
			return true
		case "pdName":
			s.PdName = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GitRepoVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Directory.Set {
		more.More()
		j.WriteObjectField("directory")
		s.Directory.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("repository")
	j.WriteString(s.Repository)
	if s.Revision.Set {
		more.More()
		j.WriteObjectField("revision")
		s.Revision.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1GitRepoVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1GitRepoVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1GitRepoVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1GitRepoVolumeSource from json stream.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "directory":
			s.Directory.Reset()
			if err := s.Directory.ReadJSON(i); err != nil {
				i.ReportError("Field Directory", err.Error())
				return false
			}
			return true
		case "repository":
			s.Repository = i.ReadString()
			return i.Error == nil
		case "revision":
			s.Revision.Reset()
			if err := s.Revision.ReadJSON(i); err != nil {
				i.ReportError("Field Revision", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GlusterfsPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("endpoints")
	j.WriteString(s.Endpoints)
	if s.EndpointsNamespace.Set {
		more.More()
		j.WriteObjectField("endpointsNamespace")
		s.EndpointsNamespace.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1GlusterfsPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1GlusterfsPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1GlusterfsPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1GlusterfsPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "endpoints":
			s.Endpoints = i.ReadString()
			return i.Error == nil
		case "endpointsNamespace":
			s.EndpointsNamespace.Reset()
			if err := s.EndpointsNamespace.ReadJSON(i); err != nil {
				i.ReportError("Field EndpointsNamespace", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GlusterfsVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("endpoints")
	j.WriteString(s.Endpoints)
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1GlusterfsVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1GlusterfsVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1GlusterfsVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1GlusterfsVolumeSource from json stream.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "endpoints":
			s.Endpoints = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HTTPGetAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	if s.HttpHeaders != nil {
		more.More()
		j.WriteObjectField("httpHeaders")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.HttpHeaders {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "port".
	if s.Scheme.Set {
		more.More()
		j.WriteObjectField("scheme")
		s.Scheme.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1HTTPGetAction json value to io.Writer.
func (s IoK8sAPICoreV1HTTPGetAction) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1HTTPGetAction json value from io.Reader.
func (s *IoK8sAPICoreV1HTTPGetAction) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1HTTPGetAction from json stream.
func (s *IoK8sAPICoreV1HTTPGetAction) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				i.ReportError("Field Host", err.Error())
				return false
			}
			return true
		case "httpHeaders":
			// Unsupported kind "array" for field "HttpHeaders".
			i.Skip()
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "port":
			// Unsupported kind "alias" for field "Port".
			i.Skip()
			return true
		case "scheme":
			s.Scheme.Reset()
			if err := s.Scheme.ReadJSON(i); err != nil {
				i.ReportError("Field Scheme", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HTTPHeader) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1HTTPHeader json value to io.Writer.
func (s IoK8sAPICoreV1HTTPHeader) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1HTTPHeader json value from io.Reader.
func (s *IoK8sAPICoreV1HTTPHeader) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1HTTPHeader from json stream.
func (s *IoK8sAPICoreV1HTTPHeader) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "value":
			s.Value = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Handler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Exec.Set {
		more.More()
		j.WriteObjectField("exec")
		s.Exec.WriteJSON(j)
	}
	if s.HttpGet.Set {
		more.More()
		j.WriteObjectField("httpGet")
		s.HttpGet.WriteJSON(j)
	}
	if s.TcpSocket.Set {
		more.More()
		j.WriteObjectField("tcpSocket")
		s.TcpSocket.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Handler json value to io.Writer.
func (s IoK8sAPICoreV1Handler) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Handler json value from io.Reader.
func (s *IoK8sAPICoreV1Handler) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Handler from json stream.
func (s *IoK8sAPICoreV1Handler) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "exec":
			s.Exec.Reset()
			if err := s.Exec.ReadJSON(i); err != nil {
				i.ReportError("Field Exec", err.Error())
				return false
			}
			return true
		case "httpGet":
			s.HttpGet.Reset()
			if err := s.HttpGet.ReadJSON(i); err != nil {
				i.ReportError("Field HttpGet", err.Error())
				return false
			}
			return true
		case "tcpSocket":
			s.TcpSocket.Reset()
			if err := s.TcpSocket.ReadJSON(i); err != nil {
				i.ReportError("Field TcpSocket", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HostAlias) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hostnames != nil {
		more.More()
		j.WriteObjectField("hostnames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Hostnames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.IP.Set {
		more.More()
		j.WriteObjectField("ip")
		s.IP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1HostAlias json value to io.Writer.
func (s IoK8sAPICoreV1HostAlias) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1HostAlias json value from io.Reader.
func (s *IoK8sAPICoreV1HostAlias) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1HostAlias from json stream.
func (s *IoK8sAPICoreV1HostAlias) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hostnames":
			// Unsupported kind "array" for field "Hostnames".
			i.Skip()
			return true
		case "ip":
			s.IP.Reset()
			if err := s.IP.ReadJSON(i); err != nil {
				i.ReportError("Field IP", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HostPathVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1HostPathVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1HostPathVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1HostPathVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1HostPathVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1HostPathVolumeSource from json stream.
func (s *IoK8sAPICoreV1HostPathVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ISCSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChapAuthDiscovery.Set {
		more.More()
		j.WriteObjectField("chapAuthDiscovery")
		s.ChapAuthDiscovery.WriteJSON(j)
	}
	if s.ChapAuthSession.Set {
		more.More()
		j.WriteObjectField("chapAuthSession")
		s.ChapAuthSession.WriteJSON(j)
	}
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.InitiatorName.Set {
		more.More()
		j.WriteObjectField("initiatorName")
		s.InitiatorName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("iqn")
	j.WriteString(s.Iqn)
	if s.IscsiInterface.Set {
		more.More()
		j.WriteObjectField("iscsiInterface")
		s.IscsiInterface.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("lun")
	j.WriteInt32(s.Lun)
	if s.Portals != nil {
		more.More()
		j.WriteObjectField("portals")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Portals {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("targetPortal")
	j.WriteString(s.TargetPortal)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ISCSIPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ISCSIPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ISCSIPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ISCSIPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chapAuthDiscovery":
			s.ChapAuthDiscovery.Reset()
			if err := s.ChapAuthDiscovery.ReadJSON(i); err != nil {
				i.ReportError("Field ChapAuthDiscovery", err.Error())
				return false
			}
			return true
		case "chapAuthSession":
			s.ChapAuthSession.Reset()
			if err := s.ChapAuthSession.ReadJSON(i); err != nil {
				i.ReportError("Field ChapAuthSession", err.Error())
				return false
			}
			return true
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "initiatorName":
			s.InitiatorName.Reset()
			if err := s.InitiatorName.ReadJSON(i); err != nil {
				i.ReportError("Field InitiatorName", err.Error())
				return false
			}
			return true
		case "iqn":
			s.Iqn = i.ReadString()
			return i.Error == nil
		case "iscsiInterface":
			s.IscsiInterface.Reset()
			if err := s.IscsiInterface.ReadJSON(i); err != nil {
				i.ReportError("Field IscsiInterface", err.Error())
				return false
			}
			return true
		case "lun":
			s.Lun = i.ReadInt32()
			return i.Error == nil
		case "portals":
			// Unsupported kind "array" for field "Portals".
			i.Skip()
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "targetPortal":
			s.TargetPortal = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ISCSIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChapAuthDiscovery.Set {
		more.More()
		j.WriteObjectField("chapAuthDiscovery")
		s.ChapAuthDiscovery.WriteJSON(j)
	}
	if s.ChapAuthSession.Set {
		more.More()
		j.WriteObjectField("chapAuthSession")
		s.ChapAuthSession.WriteJSON(j)
	}
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.InitiatorName.Set {
		more.More()
		j.WriteObjectField("initiatorName")
		s.InitiatorName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("iqn")
	j.WriteString(s.Iqn)
	if s.IscsiInterface.Set {
		more.More()
		j.WriteObjectField("iscsiInterface")
		s.IscsiInterface.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("lun")
	j.WriteInt32(s.Lun)
	if s.Portals != nil {
		more.More()
		j.WriteObjectField("portals")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Portals {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("targetPortal")
	j.WriteString(s.TargetPortal)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ISCSIVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ISCSIVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ISCSIVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ISCSIVolumeSource from json stream.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chapAuthDiscovery":
			s.ChapAuthDiscovery.Reset()
			if err := s.ChapAuthDiscovery.ReadJSON(i); err != nil {
				i.ReportError("Field ChapAuthDiscovery", err.Error())
				return false
			}
			return true
		case "chapAuthSession":
			s.ChapAuthSession.Reset()
			if err := s.ChapAuthSession.ReadJSON(i); err != nil {
				i.ReportError("Field ChapAuthSession", err.Error())
				return false
			}
			return true
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "initiatorName":
			s.InitiatorName.Reset()
			if err := s.InitiatorName.ReadJSON(i); err != nil {
				i.ReportError("Field InitiatorName", err.Error())
				return false
			}
			return true
		case "iqn":
			s.Iqn = i.ReadString()
			return i.Error == nil
		case "iscsiInterface":
			s.IscsiInterface.Reset()
			if err := s.IscsiInterface.ReadJSON(i); err != nil {
				i.ReportError("Field IscsiInterface", err.Error())
				return false
			}
			return true
		case "lun":
			s.Lun = i.ReadInt32()
			return i.Error == nil
		case "portals":
			// Unsupported kind "array" for field "Portals".
			i.Skip()
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "targetPortal":
			s.TargetPortal = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1KeyToPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	if s.Mode.Set {
		more.More()
		j.WriteObjectField("mode")
		s.Mode.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1KeyToPath json value to io.Writer.
func (s IoK8sAPICoreV1KeyToPath) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1KeyToPath json value from io.Reader.
func (s *IoK8sAPICoreV1KeyToPath) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1KeyToPath from json stream.
func (s *IoK8sAPICoreV1KeyToPath) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(i); err != nil {
				i.ReportError("Field Mode", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Lifecycle) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PostStart.Set {
		more.More()
		j.WriteObjectField("postStart")
		s.PostStart.WriteJSON(j)
	}
	if s.PreStop.Set {
		more.More()
		j.WriteObjectField("preStop")
		s.PreStop.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Lifecycle json value to io.Writer.
func (s IoK8sAPICoreV1Lifecycle) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Lifecycle json value from io.Reader.
func (s *IoK8sAPICoreV1Lifecycle) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Lifecycle from json stream.
func (s *IoK8sAPICoreV1Lifecycle) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "postStart":
			s.PostStart.Reset()
			if err := s.PostStart.ReadJSON(i); err != nil {
				i.ReportError("Field PostStart", err.Error())
				return false
			}
			return true
		case "preStop":
			s.PreStop.Reset()
			if err := s.PreStop.ReadJSON(i); err != nil {
				i.ReportError("Field PreStop", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LimitRange json value to io.Writer.
func (s IoK8sAPICoreV1LimitRange) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LimitRange json value from io.Reader.
func (s *IoK8sAPICoreV1LimitRange) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LimitRange from json stream.
func (s *IoK8sAPICoreV1LimitRange) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "default".
	// Unsupported kind "pointer" for field "defaultRequest".
	// Unsupported kind "pointer" for field "max".
	// Unsupported kind "pointer" for field "maxLimitRequestRatio".
	// Unsupported kind "pointer" for field "min".
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LimitRangeItem json value to io.Writer.
func (s IoK8sAPICoreV1LimitRangeItem) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LimitRangeItem json value from io.Reader.
func (s *IoK8sAPICoreV1LimitRangeItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItem from json stream.
func (s *IoK8sAPICoreV1LimitRangeItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "default":
			// Unsupported kind "pointer" for field "Default".
			i.Skip()
			return true
		case "defaultRequest":
			// Unsupported kind "pointer" for field "DefaultRequest".
			i.Skip()
			return true
		case "max":
			// Unsupported kind "pointer" for field "Max".
			i.Skip()
			return true
		case "maxLimitRequestRatio":
			// Unsupported kind "pointer" for field "MaxLimitRequestRatio".
			i.Skip()
			return true
		case "min":
			// Unsupported kind "pointer" for field "Min".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LimitRangeList json value to io.Writer.
func (s IoK8sAPICoreV1LimitRangeList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LimitRangeList json value from io.Reader.
func (s *IoK8sAPICoreV1LimitRangeList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeList from json stream.
func (s *IoK8sAPICoreV1LimitRangeList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("limits")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Limits {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LimitRangeSpec json value to io.Writer.
func (s IoK8sAPICoreV1LimitRangeSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LimitRangeSpec json value from io.Reader.
func (s *IoK8sAPICoreV1LimitRangeSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeSpec from json stream.
func (s *IoK8sAPICoreV1LimitRangeSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limits":
			// Unsupported kind "array" for field "Limits".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LoadBalancerIngress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.IP.Set {
		more.More()
		j.WriteObjectField("ip")
		s.IP.WriteJSON(j)
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LoadBalancerIngress json value to io.Writer.
func (s IoK8sAPICoreV1LoadBalancerIngress) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LoadBalancerIngress json value from io.Reader.
func (s *IoK8sAPICoreV1LoadBalancerIngress) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LoadBalancerIngress from json stream.
func (s *IoK8sAPICoreV1LoadBalancerIngress) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				i.ReportError("Field Hostname", err.Error())
				return false
			}
			return true
		case "ip":
			s.IP.Reset()
			if err := s.IP.ReadJSON(i); err != nil {
				i.ReportError("Field IP", err.Error())
				return false
			}
			return true
		case "ports":
			// Unsupported kind "array" for field "Ports".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LoadBalancerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ingress != nil {
		more.More()
		j.WriteObjectField("ingress")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ingress {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LoadBalancerStatus json value to io.Writer.
func (s IoK8sAPICoreV1LoadBalancerStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LoadBalancerStatus json value from io.Reader.
func (s *IoK8sAPICoreV1LoadBalancerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LoadBalancerStatus from json stream.
func (s *IoK8sAPICoreV1LoadBalancerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ingress":
			// Unsupported kind "array" for field "Ingress".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LocalObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LocalObjectReference json value to io.Writer.
func (s IoK8sAPICoreV1LocalObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LocalObjectReference json value from io.Reader.
func (s *IoK8sAPICoreV1LocalObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LocalObjectReference from json stream.
func (s *IoK8sAPICoreV1LocalObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LocalVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LocalVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1LocalVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LocalVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1LocalVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LocalVolumeSource from json stream.
func (s *IoK8sAPICoreV1LocalVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NFSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("server")
	j.WriteString(s.Server)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NFSVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1NFSVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NFSVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1NFSVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NFSVolumeSource from json stream.
func (s *IoK8sAPICoreV1NFSVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "server":
			s.Server = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Namespace) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Namespace json value to io.Writer.
func (s IoK8sAPICoreV1Namespace) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Namespace json value from io.Reader.
func (s *IoK8sAPICoreV1Namespace) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Namespace from json stream.
func (s *IoK8sAPICoreV1Namespace) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NamespaceCondition json value to io.Writer.
func (s IoK8sAPICoreV1NamespaceCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NamespaceCondition json value from io.Reader.
func (s *IoK8sAPICoreV1NamespaceCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NamespaceCondition from json stream.
func (s *IoK8sAPICoreV1NamespaceCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NamespaceList json value to io.Writer.
func (s IoK8sAPICoreV1NamespaceList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NamespaceList json value from io.Reader.
func (s *IoK8sAPICoreV1NamespaceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NamespaceList from json stream.
func (s *IoK8sAPICoreV1NamespaceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Finalizers != nil {
		more.More()
		j.WriteObjectField("finalizers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Finalizers {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NamespaceSpec json value to io.Writer.
func (s IoK8sAPICoreV1NamespaceSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NamespaceSpec json value from io.Reader.
func (s *IoK8sAPICoreV1NamespaceSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NamespaceSpec from json stream.
func (s *IoK8sAPICoreV1NamespaceSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "finalizers":
			// Unsupported kind "array" for field "Finalizers".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NamespaceStatus json value to io.Writer.
func (s IoK8sAPICoreV1NamespaceStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NamespaceStatus json value from io.Reader.
func (s *IoK8sAPICoreV1NamespaceStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NamespaceStatus from json stream.
func (s *IoK8sAPICoreV1NamespaceStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				i.ReportError("Field Phase", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Node) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Node json value to io.Writer.
func (s IoK8sAPICoreV1Node) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Node json value from io.Reader.
func (s *IoK8sAPICoreV1Node) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Node from json stream.
func (s *IoK8sAPICoreV1Node) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeAddress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("address")
	j.WriteString(s.Address)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeAddress json value to io.Writer.
func (s IoK8sAPICoreV1NodeAddress) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeAddress json value from io.Reader.
func (s *IoK8sAPICoreV1NodeAddress) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeAddress from json stream.
func (s *IoK8sAPICoreV1NodeAddress) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "address":
			s.Address = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PreferredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("preferredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PreferredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RequiredDuringSchedulingIgnoredDuringExecution.Set {
		more.More()
		j.WriteObjectField("requiredDuringSchedulingIgnoredDuringExecution")
		s.RequiredDuringSchedulingIgnoredDuringExecution.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeAffinity json value to io.Writer.
func (s IoK8sAPICoreV1NodeAffinity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeAffinity json value from io.Reader.
func (s *IoK8sAPICoreV1NodeAffinity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeAffinity from json stream.
func (s *IoK8sAPICoreV1NodeAffinity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			// Unsupported kind "array" for field "PreferredDuringSchedulingIgnoredDuringExecution".
			i.Skip()
			return true
		case "requiredDuringSchedulingIgnoredDuringExecution":
			s.RequiredDuringSchedulingIgnoredDuringExecution.Reset()
			if err := s.RequiredDuringSchedulingIgnoredDuringExecution.ReadJSON(i); err != nil {
				i.ReportError("Field RequiredDuringSchedulingIgnoredDuringExecution", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastHeartbeatTime".
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeCondition json value to io.Writer.
func (s IoK8sAPICoreV1NodeCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeCondition json value from io.Reader.
func (s *IoK8sAPICoreV1NodeCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeCondition from json stream.
func (s *IoK8sAPICoreV1NodeCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastHeartbeatTime":
			// Unsupported kind "pointer" for field "LastHeartbeatTime".
			i.Skip()
			return true
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeConfigSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMap.Set {
		more.More()
		j.WriteObjectField("configMap")
		s.ConfigMap.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeConfigSource json value to io.Writer.
func (s IoK8sAPICoreV1NodeConfigSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeConfigSource json value from io.Reader.
func (s *IoK8sAPICoreV1NodeConfigSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeConfigSource from json stream.
func (s *IoK8sAPICoreV1NodeConfigSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "configMap":
			s.ConfigMap.Reset()
			if err := s.ConfigMap.ReadJSON(i); err != nil {
				i.ReportError("Field ConfigMap", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeConfigStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Active.Set {
		more.More()
		j.WriteObjectField("active")
		s.Active.WriteJSON(j)
	}
	if s.Assigned.Set {
		more.More()
		j.WriteObjectField("assigned")
		s.Assigned.WriteJSON(j)
	}
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	if s.LastKnownGood.Set {
		more.More()
		j.WriteObjectField("lastKnownGood")
		s.LastKnownGood.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeConfigStatus json value to io.Writer.
func (s IoK8sAPICoreV1NodeConfigStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeConfigStatus json value from io.Reader.
func (s *IoK8sAPICoreV1NodeConfigStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeConfigStatus from json stream.
func (s *IoK8sAPICoreV1NodeConfigStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(i); err != nil {
				i.ReportError("Field Active", err.Error())
				return false
			}
			return true
		case "assigned":
			s.Assigned.Reset()
			if err := s.Assigned.ReadJSON(i); err != nil {
				i.ReportError("Field Assigned", err.Error())
				return false
			}
			return true
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				i.ReportError("Field Error", err.Error())
				return false
			}
			return true
		case "lastKnownGood":
			s.LastKnownGood.Reset()
			if err := s.LastKnownGood.ReadJSON(i); err != nil {
				i.ReportError("Field LastKnownGood", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeDaemonEndpoints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.KubeletEndpoint.Set {
		more.More()
		j.WriteObjectField("kubeletEndpoint")
		s.KubeletEndpoint.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeDaemonEndpoints json value to io.Writer.
func (s IoK8sAPICoreV1NodeDaemonEndpoints) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeDaemonEndpoints json value from io.Reader.
func (s *IoK8sAPICoreV1NodeDaemonEndpoints) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeDaemonEndpoints from json stream.
func (s *IoK8sAPICoreV1NodeDaemonEndpoints) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "kubeletEndpoint":
			s.KubeletEndpoint.Reset()
			if err := s.KubeletEndpoint.ReadJSON(i); err != nil {
				i.ReportError("Field KubeletEndpoint", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeList json value to io.Writer.
func (s IoK8sAPICoreV1NodeList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeList json value from io.Reader.
func (s *IoK8sAPICoreV1NodeList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeList from json stream.
func (s *IoK8sAPICoreV1NodeList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("nodeSelectorTerms")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NodeSelectorTerms {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeSelector json value to io.Writer.
func (s IoK8sAPICoreV1NodeSelector) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeSelector json value from io.Reader.
func (s *IoK8sAPICoreV1NodeSelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeSelector from json stream.
func (s *IoK8sAPICoreV1NodeSelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nodeSelectorTerms":
			// Unsupported kind "array" for field "NodeSelectorTerms".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	more.More()
	j.WriteObjectField("operator")
	j.WriteString(s.Operator)
	if s.Values != nil {
		more.More()
		j.WriteObjectField("values")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Values {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeSelectorRequirement json value to io.Writer.
func (s IoK8sAPICoreV1NodeSelectorRequirement) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeSelectorRequirement json value from io.Reader.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeSelectorRequirement from json stream.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "operator":
			s.Operator = i.ReadString()
			return i.Error == nil
		case "values":
			// Unsupported kind "array" for field "Values".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelectorTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchExpressions != nil {
		more.More()
		j.WriteObjectField("matchExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.MatchFields != nil {
		more.More()
		j.WriteObjectField("matchFields")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchFields {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeSelectorTerm json value to io.Writer.
func (s IoK8sAPICoreV1NodeSelectorTerm) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeSelectorTerm json value from io.Reader.
func (s *IoK8sAPICoreV1NodeSelectorTerm) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeSelectorTerm from json stream.
func (s *IoK8sAPICoreV1NodeSelectorTerm) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "matchExpressions":
			// Unsupported kind "array" for field "MatchExpressions".
			i.Skip()
			return true
		case "matchFields":
			// Unsupported kind "array" for field "MatchFields".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigSource.Set {
		more.More()
		j.WriteObjectField("configSource")
		s.ConfigSource.WriteJSON(j)
	}
	if s.ExternalID.Set {
		more.More()
		j.WriteObjectField("externalID")
		s.ExternalID.WriteJSON(j)
	}
	if s.PodCIDR.Set {
		more.More()
		j.WriteObjectField("podCIDR")
		s.PodCIDR.WriteJSON(j)
	}
	if s.PodCIDRs != nil {
		more.More()
		j.WriteObjectField("podCIDRs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PodCIDRs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ProviderID.Set {
		more.More()
		j.WriteObjectField("providerID")
		s.ProviderID.WriteJSON(j)
	}
	if s.Taints != nil {
		more.More()
		j.WriteObjectField("taints")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Taints {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Unschedulable.Set {
		more.More()
		j.WriteObjectField("unschedulable")
		s.Unschedulable.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeSpec json value to io.Writer.
func (s IoK8sAPICoreV1NodeSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeSpec json value from io.Reader.
func (s *IoK8sAPICoreV1NodeSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeSpec from json stream.
func (s *IoK8sAPICoreV1NodeSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "configSource":
			s.ConfigSource.Reset()
			if err := s.ConfigSource.ReadJSON(i); err != nil {
				i.ReportError("Field ConfigSource", err.Error())
				return false
			}
			return true
		case "externalID":
			s.ExternalID.Reset()
			if err := s.ExternalID.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalID", err.Error())
				return false
			}
			return true
		case "podCIDR":
			s.PodCIDR.Reset()
			if err := s.PodCIDR.ReadJSON(i); err != nil {
				i.ReportError("Field PodCIDR", err.Error())
				return false
			}
			return true
		case "podCIDRs":
			// Unsupported kind "array" for field "PodCIDRs".
			i.Skip()
			return true
		case "providerID":
			s.ProviderID.Reset()
			if err := s.ProviderID.ReadJSON(i); err != nil {
				i.ReportError("Field ProviderID", err.Error())
				return false
			}
			return true
		case "taints":
			// Unsupported kind "array" for field "Taints".
			i.Skip()
			return true
		case "unschedulable":
			s.Unschedulable.Reset()
			if err := s.Unschedulable.ReadJSON(i); err != nil {
				i.ReportError("Field Unschedulable", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Addresses != nil {
		more.More()
		j.WriteObjectField("addresses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Addresses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	// Unsupported kind "pointer" for field "allocatable".
	// Unsupported kind "pointer" for field "capacity".
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Config.Set {
		more.More()
		j.WriteObjectField("config")
		s.Config.WriteJSON(j)
	}
	if s.DaemonEndpoints.Set {
		more.More()
		j.WriteObjectField("daemonEndpoints")
		s.DaemonEndpoints.WriteJSON(j)
	}
	if s.Images != nil {
		more.More()
		j.WriteObjectField("images")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Images {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NodeInfo.Set {
		more.More()
		j.WriteObjectField("nodeInfo")
		s.NodeInfo.WriteJSON(j)
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	if s.VolumesAttached != nil {
		more.More()
		j.WriteObjectField("volumesAttached")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumesAttached {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumesInUse != nil {
		more.More()
		j.WriteObjectField("volumesInUse")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumesInUse {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeStatus json value to io.Writer.
func (s IoK8sAPICoreV1NodeStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeStatus json value from io.Reader.
func (s *IoK8sAPICoreV1NodeStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeStatus from json stream.
func (s *IoK8sAPICoreV1NodeStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addresses":
			// Unsupported kind "array" for field "Addresses".
			i.Skip()
			return true
		case "allocatable":
			// Unsupported kind "pointer" for field "Allocatable".
			i.Skip()
			return true
		case "capacity":
			// Unsupported kind "pointer" for field "Capacity".
			i.Skip()
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "config":
			s.Config.Reset()
			if err := s.Config.ReadJSON(i); err != nil {
				i.ReportError("Field Config", err.Error())
				return false
			}
			return true
		case "daemonEndpoints":
			s.DaemonEndpoints.Reset()
			if err := s.DaemonEndpoints.ReadJSON(i); err != nil {
				i.ReportError("Field DaemonEndpoints", err.Error())
				return false
			}
			return true
		case "images":
			// Unsupported kind "array" for field "Images".
			i.Skip()
			return true
		case "nodeInfo":
			s.NodeInfo.Reset()
			if err := s.NodeInfo.ReadJSON(i); err != nil {
				i.ReportError("Field NodeInfo", err.Error())
				return false
			}
			return true
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				i.ReportError("Field Phase", err.Error())
				return false
			}
			return true
		case "volumesAttached":
			// Unsupported kind "array" for field "VolumesAttached".
			i.Skip()
			return true
		case "volumesInUse":
			// Unsupported kind "array" for field "VolumesInUse".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSystemInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("architecture")
	j.WriteString(s.Architecture)
	more.More()
	j.WriteObjectField("bootID")
	j.WriteString(s.BootID)
	more.More()
	j.WriteObjectField("containerRuntimeVersion")
	j.WriteString(s.ContainerRuntimeVersion)
	more.More()
	j.WriteObjectField("kernelVersion")
	j.WriteString(s.KernelVersion)
	more.More()
	j.WriteObjectField("kubeProxyVersion")
	j.WriteString(s.KubeProxyVersion)
	more.More()
	j.WriteObjectField("kubeletVersion")
	j.WriteString(s.KubeletVersion)
	more.More()
	j.WriteObjectField("machineID")
	j.WriteString(s.MachineID)
	more.More()
	j.WriteObjectField("operatingSystem")
	j.WriteString(s.OperatingSystem)
	more.More()
	j.WriteObjectField("osImage")
	j.WriteString(s.OsImage)
	more.More()
	j.WriteObjectField("systemUUID")
	j.WriteString(s.SystemUUID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeSystemInfo json value to io.Writer.
func (s IoK8sAPICoreV1NodeSystemInfo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeSystemInfo json value from io.Reader.
func (s *IoK8sAPICoreV1NodeSystemInfo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeSystemInfo from json stream.
func (s *IoK8sAPICoreV1NodeSystemInfo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "architecture":
			s.Architecture = i.ReadString()
			return i.Error == nil
		case "bootID":
			s.BootID = i.ReadString()
			return i.Error == nil
		case "containerRuntimeVersion":
			s.ContainerRuntimeVersion = i.ReadString()
			return i.Error == nil
		case "kernelVersion":
			s.KernelVersion = i.ReadString()
			return i.Error == nil
		case "kubeProxyVersion":
			s.KubeProxyVersion = i.ReadString()
			return i.Error == nil
		case "kubeletVersion":
			s.KubeletVersion = i.ReadString()
			return i.Error == nil
		case "machineID":
			s.MachineID = i.ReadString()
			return i.Error == nil
		case "operatingSystem":
			s.OperatingSystem = i.ReadString()
			return i.Error == nil
		case "osImage":
			s.OsImage = i.ReadString()
			return i.Error == nil
		case "systemUUID":
			s.SystemUUID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ObjectFieldSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("fieldPath")
	j.WriteString(s.FieldPath)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ObjectFieldSelector json value to io.Writer.
func (s IoK8sAPICoreV1ObjectFieldSelector) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ObjectFieldSelector json value from io.Reader.
func (s *IoK8sAPICoreV1ObjectFieldSelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ObjectFieldSelector from json stream.
func (s *IoK8sAPICoreV1ObjectFieldSelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "fieldPath":
			s.FieldPath = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.FieldPath.Set {
		more.More()
		j.WriteObjectField("fieldPath")
		s.FieldPath.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ObjectReference json value to io.Writer.
func (s IoK8sAPICoreV1ObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ObjectReference json value from io.Reader.
func (s *IoK8sAPICoreV1ObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ObjectReference from json stream.
func (s *IoK8sAPICoreV1ObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "fieldPath":
			s.FieldPath.Reset()
			if err := s.FieldPath.ReadJSON(i); err != nil {
				i.ReportError("Field FieldPath", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceVersion", err.Error())
				return false
			}
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolume json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolume) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolume json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolume) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolume from json stream.
func (s *IoK8sAPICoreV1PersistentVolume) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaim) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaim json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaim) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaim json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaim from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastProbeTime".
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimCondition json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimCondition json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimCondition from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastProbeTime":
			// Unsupported kind "pointer" for field "LastProbeTime".
			i.Skip()
			return true
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimList json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimList json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimList from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AccessModes != nil {
		more.More()
		j.WriteObjectField("accessModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AccessModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.DataSource.Set {
		more.More()
		j.WriteObjectField("dataSource")
		s.DataSource.WriteJSON(j)
	}
	if s.DataSourceRef.Set {
		more.More()
		j.WriteObjectField("dataSourceRef")
		s.DataSourceRef.WriteJSON(j)
	}
	if s.Resources.Set {
		more.More()
		j.WriteObjectField("resources")
		s.Resources.WriteJSON(j)
	}
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	if s.StorageClassName.Set {
		more.More()
		j.WriteObjectField("storageClassName")
		s.StorageClassName.WriteJSON(j)
	}
	if s.VolumeMode.Set {
		more.More()
		j.WriteObjectField("volumeMode")
		s.VolumeMode.WriteJSON(j)
	}
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimSpec json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimSpec json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimSpec from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "accessModes":
			// Unsupported kind "array" for field "AccessModes".
			i.Skip()
			return true
		case "dataSource":
			s.DataSource.Reset()
			if err := s.DataSource.ReadJSON(i); err != nil {
				i.ReportError("Field DataSource", err.Error())
				return false
			}
			return true
		case "dataSourceRef":
			s.DataSourceRef.Reset()
			if err := s.DataSourceRef.ReadJSON(i); err != nil {
				i.ReportError("Field DataSourceRef", err.Error())
				return false
			}
			return true
		case "resources":
			s.Resources.Reset()
			if err := s.Resources.ReadJSON(i); err != nil {
				i.ReportError("Field Resources", err.Error())
				return false
			}
			return true
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "storageClassName":
			s.StorageClassName.Reset()
			if err := s.StorageClassName.ReadJSON(i); err != nil {
				i.ReportError("Field StorageClassName", err.Error())
				return false
			}
			return true
		case "volumeMode":
			s.VolumeMode.Reset()
			if err := s.VolumeMode.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeMode", err.Error())
				return false
			}
			return true
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AccessModes != nil {
		more.More()
		j.WriteObjectField("accessModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AccessModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	// Unsupported kind "pointer" for field "capacity".
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimStatus json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimStatus json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimStatus from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "accessModes":
			// Unsupported kind "array" for field "AccessModes".
			i.Skip()
			return true
		case "capacity":
			// Unsupported kind "pointer" for field "Capacity".
			i.Skip()
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				i.ReportError("Field Phase", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimTemplate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimTemplate json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimTemplate) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimTemplate json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimTemplate) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimTemplate from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimTemplate) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("claimName")
	j.WriteString(s.ClaimName)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimVolumeSource from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "claimName":
			s.ClaimName = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeList json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeList json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeList from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AccessModes != nil {
		more.More()
		j.WriteObjectField("accessModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AccessModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AwsElasticBlockStore.Set {
		more.More()
		j.WriteObjectField("awsElasticBlockStore")
		s.AwsElasticBlockStore.WriteJSON(j)
	}
	if s.AzureDisk.Set {
		more.More()
		j.WriteObjectField("azureDisk")
		s.AzureDisk.WriteJSON(j)
	}
	if s.AzureFile.Set {
		more.More()
		j.WriteObjectField("azureFile")
		s.AzureFile.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "capacity".
	if s.Cephfs.Set {
		more.More()
		j.WriteObjectField("cephfs")
		s.Cephfs.WriteJSON(j)
	}
	if s.Cinder.Set {
		more.More()
		j.WriteObjectField("cinder")
		s.Cinder.WriteJSON(j)
	}
	if s.ClaimRef.Set {
		more.More()
		j.WriteObjectField("claimRef")
		s.ClaimRef.WriteJSON(j)
	}
	if s.Csi.Set {
		more.More()
		j.WriteObjectField("csi")
		s.Csi.WriteJSON(j)
	}
	if s.Fc.Set {
		more.More()
		j.WriteObjectField("fc")
		s.Fc.WriteJSON(j)
	}
	if s.FlexVolume.Set {
		more.More()
		j.WriteObjectField("flexVolume")
		s.FlexVolume.WriteJSON(j)
	}
	if s.Flocker.Set {
		more.More()
		j.WriteObjectField("flocker")
		s.Flocker.WriteJSON(j)
	}
	if s.GcePersistentDisk.Set {
		more.More()
		j.WriteObjectField("gcePersistentDisk")
		s.GcePersistentDisk.WriteJSON(j)
	}
	if s.Glusterfs.Set {
		more.More()
		j.WriteObjectField("glusterfs")
		s.Glusterfs.WriteJSON(j)
	}
	if s.HostPath.Set {
		more.More()
		j.WriteObjectField("hostPath")
		s.HostPath.WriteJSON(j)
	}
	if s.Iscsi.Set {
		more.More()
		j.WriteObjectField("iscsi")
		s.Iscsi.WriteJSON(j)
	}
	if s.Local.Set {
		more.More()
		j.WriteObjectField("local")
		s.Local.WriteJSON(j)
	}
	if s.MountOptions != nil {
		more.More()
		j.WriteObjectField("mountOptions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MountOptions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Nfs.Set {
		more.More()
		j.WriteObjectField("nfs")
		s.Nfs.WriteJSON(j)
	}
	if s.NodeAffinity.Set {
		more.More()
		j.WriteObjectField("nodeAffinity")
		s.NodeAffinity.WriteJSON(j)
	}
	if s.PersistentVolumeReclaimPolicy.Set {
		more.More()
		j.WriteObjectField("persistentVolumeReclaimPolicy")
		s.PersistentVolumeReclaimPolicy.WriteJSON(j)
	}
	if s.PhotonPersistentDisk.Set {
		more.More()
		j.WriteObjectField("photonPersistentDisk")
		s.PhotonPersistentDisk.WriteJSON(j)
	}
	if s.PortworxVolume.Set {
		more.More()
		j.WriteObjectField("portworxVolume")
		s.PortworxVolume.WriteJSON(j)
	}
	if s.Quobyte.Set {
		more.More()
		j.WriteObjectField("quobyte")
		s.Quobyte.WriteJSON(j)
	}
	if s.Rbd.Set {
		more.More()
		j.WriteObjectField("rbd")
		s.Rbd.WriteJSON(j)
	}
	if s.ScaleIO.Set {
		more.More()
		j.WriteObjectField("scaleIO")
		s.ScaleIO.WriteJSON(j)
	}
	if s.StorageClassName.Set {
		more.More()
		j.WriteObjectField("storageClassName")
		s.StorageClassName.WriteJSON(j)
	}
	if s.Storageos.Set {
		more.More()
		j.WriteObjectField("storageos")
		s.Storageos.WriteJSON(j)
	}
	if s.VolumeMode.Set {
		more.More()
		j.WriteObjectField("volumeMode")
		s.VolumeMode.WriteJSON(j)
	}
	if s.VsphereVolume.Set {
		more.More()
		j.WriteObjectField("vsphereVolume")
		s.VsphereVolume.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeSpec json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeSpec json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeSpec from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "accessModes":
			// Unsupported kind "array" for field "AccessModes".
			i.Skip()
			return true
		case "awsElasticBlockStore":
			s.AwsElasticBlockStore.Reset()
			if err := s.AwsElasticBlockStore.ReadJSON(i); err != nil {
				i.ReportError("Field AwsElasticBlockStore", err.Error())
				return false
			}
			return true
		case "azureDisk":
			s.AzureDisk.Reset()
			if err := s.AzureDisk.ReadJSON(i); err != nil {
				i.ReportError("Field AzureDisk", err.Error())
				return false
			}
			return true
		case "azureFile":
			s.AzureFile.Reset()
			if err := s.AzureFile.ReadJSON(i); err != nil {
				i.ReportError("Field AzureFile", err.Error())
				return false
			}
			return true
		case "capacity":
			// Unsupported kind "pointer" for field "Capacity".
			i.Skip()
			return true
		case "cephfs":
			s.Cephfs.Reset()
			if err := s.Cephfs.ReadJSON(i); err != nil {
				i.ReportError("Field Cephfs", err.Error())
				return false
			}
			return true
		case "cinder":
			s.Cinder.Reset()
			if err := s.Cinder.ReadJSON(i); err != nil {
				i.ReportError("Field Cinder", err.Error())
				return false
			}
			return true
		case "claimRef":
			s.ClaimRef.Reset()
			if err := s.ClaimRef.ReadJSON(i); err != nil {
				i.ReportError("Field ClaimRef", err.Error())
				return false
			}
			return true
		case "csi":
			s.Csi.Reset()
			if err := s.Csi.ReadJSON(i); err != nil {
				i.ReportError("Field Csi", err.Error())
				return false
			}
			return true
		case "fc":
			s.Fc.Reset()
			if err := s.Fc.ReadJSON(i); err != nil {
				i.ReportError("Field Fc", err.Error())
				return false
			}
			return true
		case "flexVolume":
			s.FlexVolume.Reset()
			if err := s.FlexVolume.ReadJSON(i); err != nil {
				i.ReportError("Field FlexVolume", err.Error())
				return false
			}
			return true
		case "flocker":
			s.Flocker.Reset()
			if err := s.Flocker.ReadJSON(i); err != nil {
				i.ReportError("Field Flocker", err.Error())
				return false
			}
			return true
		case "gcePersistentDisk":
			s.GcePersistentDisk.Reset()
			if err := s.GcePersistentDisk.ReadJSON(i); err != nil {
				i.ReportError("Field GcePersistentDisk", err.Error())
				return false
			}
			return true
		case "glusterfs":
			s.Glusterfs.Reset()
			if err := s.Glusterfs.ReadJSON(i); err != nil {
				i.ReportError("Field Glusterfs", err.Error())
				return false
			}
			return true
		case "hostPath":
			s.HostPath.Reset()
			if err := s.HostPath.ReadJSON(i); err != nil {
				i.ReportError("Field HostPath", err.Error())
				return false
			}
			return true
		case "iscsi":
			s.Iscsi.Reset()
			if err := s.Iscsi.ReadJSON(i); err != nil {
				i.ReportError("Field Iscsi", err.Error())
				return false
			}
			return true
		case "local":
			s.Local.Reset()
			if err := s.Local.ReadJSON(i); err != nil {
				i.ReportError("Field Local", err.Error())
				return false
			}
			return true
		case "mountOptions":
			// Unsupported kind "array" for field "MountOptions".
			i.Skip()
			return true
		case "nfs":
			s.Nfs.Reset()
			if err := s.Nfs.ReadJSON(i); err != nil {
				i.ReportError("Field Nfs", err.Error())
				return false
			}
			return true
		case "nodeAffinity":
			s.NodeAffinity.Reset()
			if err := s.NodeAffinity.ReadJSON(i); err != nil {
				i.ReportError("Field NodeAffinity", err.Error())
				return false
			}
			return true
		case "persistentVolumeReclaimPolicy":
			s.PersistentVolumeReclaimPolicy.Reset()
			if err := s.PersistentVolumeReclaimPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field PersistentVolumeReclaimPolicy", err.Error())
				return false
			}
			return true
		case "photonPersistentDisk":
			s.PhotonPersistentDisk.Reset()
			if err := s.PhotonPersistentDisk.ReadJSON(i); err != nil {
				i.ReportError("Field PhotonPersistentDisk", err.Error())
				return false
			}
			return true
		case "portworxVolume":
			s.PortworxVolume.Reset()
			if err := s.PortworxVolume.ReadJSON(i); err != nil {
				i.ReportError("Field PortworxVolume", err.Error())
				return false
			}
			return true
		case "quobyte":
			s.Quobyte.Reset()
			if err := s.Quobyte.ReadJSON(i); err != nil {
				i.ReportError("Field Quobyte", err.Error())
				return false
			}
			return true
		case "rbd":
			s.Rbd.Reset()
			if err := s.Rbd.ReadJSON(i); err != nil {
				i.ReportError("Field Rbd", err.Error())
				return false
			}
			return true
		case "scaleIO":
			s.ScaleIO.Reset()
			if err := s.ScaleIO.ReadJSON(i); err != nil {
				i.ReportError("Field ScaleIO", err.Error())
				return false
			}
			return true
		case "storageClassName":
			s.StorageClassName.Reset()
			if err := s.StorageClassName.ReadJSON(i); err != nil {
				i.ReportError("Field StorageClassName", err.Error())
				return false
			}
			return true
		case "storageos":
			s.Storageos.Reset()
			if err := s.Storageos.ReadJSON(i); err != nil {
				i.ReportError("Field Storageos", err.Error())
				return false
			}
			return true
		case "volumeMode":
			s.VolumeMode.Reset()
			if err := s.VolumeMode.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeMode", err.Error())
				return false
			}
			return true
		case "vsphereVolume":
			s.VsphereVolume.Reset()
			if err := s.VsphereVolume.ReadJSON(i); err != nil {
				i.ReportError("Field VsphereVolume", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeStatus json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeStatus json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeStatus from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				i.ReportError("Field Phase", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("pdID")
	j.WriteString(s.PdID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PhotonPersistentDiskVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PhotonPersistentDiskVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PhotonPersistentDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "pdID":
			s.PdID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Pod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Pod json value to io.Writer.
func (s IoK8sAPICoreV1Pod) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Pod json value from io.Reader.
func (s *IoK8sAPICoreV1Pod) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Pod from json stream.
func (s *IoK8sAPICoreV1Pod) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PreferredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("preferredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PreferredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("requiredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RequiredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodAffinity json value to io.Writer.
func (s IoK8sAPICoreV1PodAffinity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodAffinity json value from io.Reader.
func (s *IoK8sAPICoreV1PodAffinity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodAffinity from json stream.
func (s *IoK8sAPICoreV1PodAffinity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			// Unsupported kind "array" for field "PreferredDuringSchedulingIgnoredDuringExecution".
			i.Skip()
			return true
		case "requiredDuringSchedulingIgnoredDuringExecution":
			// Unsupported kind "array" for field "RequiredDuringSchedulingIgnoredDuringExecution".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAffinityTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LabelSelector.Set {
		more.More()
		j.WriteObjectField("labelSelector")
		s.LabelSelector.WriteJSON(j)
	}
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.Namespaces != nil {
		more.More()
		j.WriteObjectField("namespaces")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Namespaces {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("topologyKey")
	j.WriteString(s.TopologyKey)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodAffinityTerm json value to io.Writer.
func (s IoK8sAPICoreV1PodAffinityTerm) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodAffinityTerm json value from io.Reader.
func (s *IoK8sAPICoreV1PodAffinityTerm) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodAffinityTerm from json stream.
func (s *IoK8sAPICoreV1PodAffinityTerm) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "labelSelector":
			s.LabelSelector.Reset()
			if err := s.LabelSelector.ReadJSON(i); err != nil {
				i.ReportError("Field LabelSelector", err.Error())
				return false
			}
			return true
		case "namespaceSelector":
			s.NamespaceSelector.Reset()
			if err := s.NamespaceSelector.ReadJSON(i); err != nil {
				i.ReportError("Field NamespaceSelector", err.Error())
				return false
			}
			return true
		case "namespaces":
			// Unsupported kind "array" for field "Namespaces".
			i.Skip()
			return true
		case "topologyKey":
			s.TopologyKey = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAntiAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PreferredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("preferredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PreferredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		more.More()
		j.WriteObjectField("requiredDuringSchedulingIgnoredDuringExecution")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RequiredDuringSchedulingIgnoredDuringExecution {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodAntiAffinity json value to io.Writer.
func (s IoK8sAPICoreV1PodAntiAffinity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodAntiAffinity json value from io.Reader.
func (s *IoK8sAPICoreV1PodAntiAffinity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodAntiAffinity from json stream.
func (s *IoK8sAPICoreV1PodAntiAffinity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			// Unsupported kind "array" for field "PreferredDuringSchedulingIgnoredDuringExecution".
			i.Skip()
			return true
		case "requiredDuringSchedulingIgnoredDuringExecution":
			// Unsupported kind "array" for field "RequiredDuringSchedulingIgnoredDuringExecution".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastProbeTime".
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodCondition json value to io.Writer.
func (s IoK8sAPICoreV1PodCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodCondition json value from io.Reader.
func (s *IoK8sAPICoreV1PodCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodCondition from json stream.
func (s *IoK8sAPICoreV1PodCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastProbeTime":
			// Unsupported kind "pointer" for field "LastProbeTime".
			i.Skip()
			return true
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodDNSConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Nameservers != nil {
		more.More()
		j.WriteObjectField("nameservers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Nameservers {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Options != nil {
		more.More()
		j.WriteObjectField("options")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Options {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Searches != nil {
		more.More()
		j.WriteObjectField("searches")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Searches {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodDNSConfig json value to io.Writer.
func (s IoK8sAPICoreV1PodDNSConfig) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodDNSConfig json value from io.Reader.
func (s *IoK8sAPICoreV1PodDNSConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodDNSConfig from json stream.
func (s *IoK8sAPICoreV1PodDNSConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nameservers":
			// Unsupported kind "array" for field "Nameservers".
			i.Skip()
			return true
		case "options":
			// Unsupported kind "array" for field "Options".
			i.Skip()
			return true
		case "searches":
			// Unsupported kind "array" for field "Searches".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodDNSConfigOption) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodDNSConfigOption json value to io.Writer.
func (s IoK8sAPICoreV1PodDNSConfigOption) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodDNSConfigOption json value from io.Reader.
func (s *IoK8sAPICoreV1PodDNSConfigOption) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodDNSConfigOption from json stream.
func (s *IoK8sAPICoreV1PodDNSConfigOption) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodIP) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.IP.Set {
		more.More()
		j.WriteObjectField("ip")
		s.IP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodIP json value to io.Writer.
func (s IoK8sAPICoreV1PodIP) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodIP json value from io.Reader.
func (s *IoK8sAPICoreV1PodIP) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodIP from json stream.
func (s *IoK8sAPICoreV1PodIP) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ip":
			s.IP.Reset()
			if err := s.IP.ReadJSON(i); err != nil {
				i.ReportError("Field IP", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodList json value to io.Writer.
func (s IoK8sAPICoreV1PodList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodList json value from io.Reader.
func (s *IoK8sAPICoreV1PodList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodList from json stream.
func (s *IoK8sAPICoreV1PodList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodReadinessGate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("conditionType")
	j.WriteString(s.ConditionType)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodReadinessGate json value to io.Writer.
func (s IoK8sAPICoreV1PodReadinessGate) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodReadinessGate json value from io.Reader.
func (s *IoK8sAPICoreV1PodReadinessGate) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodReadinessGate from json stream.
func (s *IoK8sAPICoreV1PodReadinessGate) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditionType":
			s.ConditionType = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSecurityContext) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsGroup.Set {
		more.More()
		j.WriteObjectField("fsGroup")
		s.FsGroup.WriteJSON(j)
	}
	if s.FsGroupChangePolicy.Set {
		more.More()
		j.WriteObjectField("fsGroupChangePolicy")
		s.FsGroupChangePolicy.WriteJSON(j)
	}
	if s.RunAsGroup.Set {
		more.More()
		j.WriteObjectField("runAsGroup")
		s.RunAsGroup.WriteJSON(j)
	}
	if s.RunAsNonRoot.Set {
		more.More()
		j.WriteObjectField("runAsNonRoot")
		s.RunAsNonRoot.WriteJSON(j)
	}
	if s.RunAsUser.Set {
		more.More()
		j.WriteObjectField("runAsUser")
		s.RunAsUser.WriteJSON(j)
	}
	if s.SeLinuxOptions.Set {
		more.More()
		j.WriteObjectField("seLinuxOptions")
		s.SeLinuxOptions.WriteJSON(j)
	}
	if s.SeccompProfile.Set {
		more.More()
		j.WriteObjectField("seccompProfile")
		s.SeccompProfile.WriteJSON(j)
	}
	if s.SupplementalGroups != nil {
		more.More()
		j.WriteObjectField("supplementalGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.SupplementalGroups {
			more.More()
			j.WriteInt64(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Sysctls != nil {
		more.More()
		j.WriteObjectField("sysctls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Sysctls {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.WindowsOptions.Set {
		more.More()
		j.WriteObjectField("windowsOptions")
		s.WindowsOptions.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodSecurityContext json value to io.Writer.
func (s IoK8sAPICoreV1PodSecurityContext) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodSecurityContext json value from io.Reader.
func (s *IoK8sAPICoreV1PodSecurityContext) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodSecurityContext from json stream.
func (s *IoK8sAPICoreV1PodSecurityContext) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsGroup":
			s.FsGroup.Reset()
			if err := s.FsGroup.ReadJSON(i); err != nil {
				i.ReportError("Field FsGroup", err.Error())
				return false
			}
			return true
		case "fsGroupChangePolicy":
			s.FsGroupChangePolicy.Reset()
			if err := s.FsGroupChangePolicy.ReadJSON(i); err != nil {
				i.ReportError("Field FsGroupChangePolicy", err.Error())
				return false
			}
			return true
		case "runAsGroup":
			s.RunAsGroup.Reset()
			if err := s.RunAsGroup.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsGroup", err.Error())
				return false
			}
			return true
		case "runAsNonRoot":
			s.RunAsNonRoot.Reset()
			if err := s.RunAsNonRoot.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsNonRoot", err.Error())
				return false
			}
			return true
		case "runAsUser":
			s.RunAsUser.Reset()
			if err := s.RunAsUser.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsUser", err.Error())
				return false
			}
			return true
		case "seLinuxOptions":
			s.SeLinuxOptions.Reset()
			if err := s.SeLinuxOptions.ReadJSON(i); err != nil {
				i.ReportError("Field SeLinuxOptions", err.Error())
				return false
			}
			return true
		case "seccompProfile":
			s.SeccompProfile.Reset()
			if err := s.SeccompProfile.ReadJSON(i); err != nil {
				i.ReportError("Field SeccompProfile", err.Error())
				return false
			}
			return true
		case "supplementalGroups":
			// Unsupported kind "array" for field "SupplementalGroups".
			i.Skip()
			return true
		case "sysctls":
			// Unsupported kind "array" for field "Sysctls".
			i.Skip()
			return true
		case "windowsOptions":
			s.WindowsOptions.Reset()
			if err := s.WindowsOptions.ReadJSON(i); err != nil {
				i.ReportError("Field WindowsOptions", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ActiveDeadlineSeconds.Set {
		more.More()
		j.WriteObjectField("activeDeadlineSeconds")
		s.ActiveDeadlineSeconds.WriteJSON(j)
	}
	if s.Affinity.Set {
		more.More()
		j.WriteObjectField("affinity")
		s.Affinity.WriteJSON(j)
	}
	if s.AutomountServiceAccountToken.Set {
		more.More()
		j.WriteObjectField("automountServiceAccountToken")
		s.AutomountServiceAccountToken.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("containers")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Containers {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.DnsConfig.Set {
		more.More()
		j.WriteObjectField("dnsConfig")
		s.DnsConfig.WriteJSON(j)
	}
	if s.DnsPolicy.Set {
		more.More()
		j.WriteObjectField("dnsPolicy")
		s.DnsPolicy.WriteJSON(j)
	}
	if s.EnableServiceLinks.Set {
		more.More()
		j.WriteObjectField("enableServiceLinks")
		s.EnableServiceLinks.WriteJSON(j)
	}
	if s.EphemeralContainers != nil {
		more.More()
		j.WriteObjectField("ephemeralContainers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EphemeralContainers {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.HostAliases != nil {
		more.More()
		j.WriteObjectField("hostAliases")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.HostAliases {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.HostIPC.Set {
		more.More()
		j.WriteObjectField("hostIPC")
		s.HostIPC.WriteJSON(j)
	}
	if s.HostNetwork.Set {
		more.More()
		j.WriteObjectField("hostNetwork")
		s.HostNetwork.WriteJSON(j)
	}
	if s.HostPID.Set {
		more.More()
		j.WriteObjectField("hostPID")
		s.HostPID.WriteJSON(j)
	}
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.ImagePullSecrets != nil {
		more.More()
		j.WriteObjectField("imagePullSecrets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ImagePullSecrets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.InitContainers != nil {
		more.More()
		j.WriteObjectField("initContainers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.InitContainers {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "nodeSelector".
	// Unsupported kind "pointer" for field "overhead".
	if s.PreemptionPolicy.Set {
		more.More()
		j.WriteObjectField("preemptionPolicy")
		s.PreemptionPolicy.WriteJSON(j)
	}
	if s.Priority.Set {
		more.More()
		j.WriteObjectField("priority")
		s.Priority.WriteJSON(j)
	}
	if s.PriorityClassName.Set {
		more.More()
		j.WriteObjectField("priorityClassName")
		s.PriorityClassName.WriteJSON(j)
	}
	if s.ReadinessGates != nil {
		more.More()
		j.WriteObjectField("readinessGates")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ReadinessGates {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RestartPolicy.Set {
		more.More()
		j.WriteObjectField("restartPolicy")
		s.RestartPolicy.WriteJSON(j)
	}
	if s.RuntimeClassName.Set {
		more.More()
		j.WriteObjectField("runtimeClassName")
		s.RuntimeClassName.WriteJSON(j)
	}
	if s.SchedulerName.Set {
		more.More()
		j.WriteObjectField("schedulerName")
		s.SchedulerName.WriteJSON(j)
	}
	if s.SecurityContext.Set {
		more.More()
		j.WriteObjectField("securityContext")
		s.SecurityContext.WriteJSON(j)
	}
	if s.ServiceAccount.Set {
		more.More()
		j.WriteObjectField("serviceAccount")
		s.ServiceAccount.WriteJSON(j)
	}
	if s.ServiceAccountName.Set {
		more.More()
		j.WriteObjectField("serviceAccountName")
		s.ServiceAccountName.WriteJSON(j)
	}
	if s.SetHostnameAsFQDN.Set {
		more.More()
		j.WriteObjectField("setHostnameAsFQDN")
		s.SetHostnameAsFQDN.WriteJSON(j)
	}
	if s.ShareProcessNamespace.Set {
		more.More()
		j.WriteObjectField("shareProcessNamespace")
		s.ShareProcessNamespace.WriteJSON(j)
	}
	if s.Subdomain.Set {
		more.More()
		j.WriteObjectField("subdomain")
		s.Subdomain.WriteJSON(j)
	}
	if s.TerminationGracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("terminationGracePeriodSeconds")
		s.TerminationGracePeriodSeconds.WriteJSON(j)
	}
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.TopologySpreadConstraints != nil {
		more.More()
		j.WriteObjectField("topologySpreadConstraints")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TopologySpreadConstraints {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Volumes != nil {
		more.More()
		j.WriteObjectField("volumes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Volumes {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodSpec json value to io.Writer.
func (s IoK8sAPICoreV1PodSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodSpec json value from io.Reader.
func (s *IoK8sAPICoreV1PodSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodSpec from json stream.
func (s *IoK8sAPICoreV1PodSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "activeDeadlineSeconds":
			s.ActiveDeadlineSeconds.Reset()
			if err := s.ActiveDeadlineSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ActiveDeadlineSeconds", err.Error())
				return false
			}
			return true
		case "affinity":
			s.Affinity.Reset()
			if err := s.Affinity.ReadJSON(i); err != nil {
				i.ReportError("Field Affinity", err.Error())
				return false
			}
			return true
		case "automountServiceAccountToken":
			s.AutomountServiceAccountToken.Reset()
			if err := s.AutomountServiceAccountToken.ReadJSON(i); err != nil {
				i.ReportError("Field AutomountServiceAccountToken", err.Error())
				return false
			}
			return true
		case "containers":
			// Unsupported kind "array" for field "Containers".
			i.Skip()
			return true
		case "dnsConfig":
			s.DnsConfig.Reset()
			if err := s.DnsConfig.ReadJSON(i); err != nil {
				i.ReportError("Field DnsConfig", err.Error())
				return false
			}
			return true
		case "dnsPolicy":
			s.DnsPolicy.Reset()
			if err := s.DnsPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field DnsPolicy", err.Error())
				return false
			}
			return true
		case "enableServiceLinks":
			s.EnableServiceLinks.Reset()
			if err := s.EnableServiceLinks.ReadJSON(i); err != nil {
				i.ReportError("Field EnableServiceLinks", err.Error())
				return false
			}
			return true
		case "ephemeralContainers":
			// Unsupported kind "array" for field "EphemeralContainers".
			i.Skip()
			return true
		case "hostAliases":
			// Unsupported kind "array" for field "HostAliases".
			i.Skip()
			return true
		case "hostIPC":
			s.HostIPC.Reset()
			if err := s.HostIPC.ReadJSON(i); err != nil {
				i.ReportError("Field HostIPC", err.Error())
				return false
			}
			return true
		case "hostNetwork":
			s.HostNetwork.Reset()
			if err := s.HostNetwork.ReadJSON(i); err != nil {
				i.ReportError("Field HostNetwork", err.Error())
				return false
			}
			return true
		case "hostPID":
			s.HostPID.Reset()
			if err := s.HostPID.ReadJSON(i); err != nil {
				i.ReportError("Field HostPID", err.Error())
				return false
			}
			return true
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				i.ReportError("Field Hostname", err.Error())
				return false
			}
			return true
		case "imagePullSecrets":
			// Unsupported kind "array" for field "ImagePullSecrets".
			i.Skip()
			return true
		case "initContainers":
			// Unsupported kind "array" for field "InitContainers".
			i.Skip()
			return true
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				i.ReportError("Field NodeName", err.Error())
				return false
			}
			return true
		case "nodeSelector":
			// Unsupported kind "pointer" for field "NodeSelector".
			i.Skip()
			return true
		case "overhead":
			// Unsupported kind "pointer" for field "Overhead".
			i.Skip()
			return true
		case "preemptionPolicy":
			s.PreemptionPolicy.Reset()
			if err := s.PreemptionPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field PreemptionPolicy", err.Error())
				return false
			}
			return true
		case "priority":
			s.Priority.Reset()
			if err := s.Priority.ReadJSON(i); err != nil {
				i.ReportError("Field Priority", err.Error())
				return false
			}
			return true
		case "priorityClassName":
			s.PriorityClassName.Reset()
			if err := s.PriorityClassName.ReadJSON(i); err != nil {
				i.ReportError("Field PriorityClassName", err.Error())
				return false
			}
			return true
		case "readinessGates":
			// Unsupported kind "array" for field "ReadinessGates".
			i.Skip()
			return true
		case "restartPolicy":
			s.RestartPolicy.Reset()
			if err := s.RestartPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field RestartPolicy", err.Error())
				return false
			}
			return true
		case "runtimeClassName":
			s.RuntimeClassName.Reset()
			if err := s.RuntimeClassName.ReadJSON(i); err != nil {
				i.ReportError("Field RuntimeClassName", err.Error())
				return false
			}
			return true
		case "schedulerName":
			s.SchedulerName.Reset()
			if err := s.SchedulerName.ReadJSON(i); err != nil {
				i.ReportError("Field SchedulerName", err.Error())
				return false
			}
			return true
		case "securityContext":
			s.SecurityContext.Reset()
			if err := s.SecurityContext.ReadJSON(i); err != nil {
				i.ReportError("Field SecurityContext", err.Error())
				return false
			}
			return true
		case "serviceAccount":
			s.ServiceAccount.Reset()
			if err := s.ServiceAccount.ReadJSON(i); err != nil {
				i.ReportError("Field ServiceAccount", err.Error())
				return false
			}
			return true
		case "serviceAccountName":
			s.ServiceAccountName.Reset()
			if err := s.ServiceAccountName.ReadJSON(i); err != nil {
				i.ReportError("Field ServiceAccountName", err.Error())
				return false
			}
			return true
		case "setHostnameAsFQDN":
			s.SetHostnameAsFQDN.Reset()
			if err := s.SetHostnameAsFQDN.ReadJSON(i); err != nil {
				i.ReportError("Field SetHostnameAsFQDN", err.Error())
				return false
			}
			return true
		case "shareProcessNamespace":
			s.ShareProcessNamespace.Reset()
			if err := s.ShareProcessNamespace.ReadJSON(i); err != nil {
				i.ReportError("Field ShareProcessNamespace", err.Error())
				return false
			}
			return true
		case "subdomain":
			s.Subdomain.Reset()
			if err := s.Subdomain.ReadJSON(i); err != nil {
				i.ReportError("Field Subdomain", err.Error())
				return false
			}
			return true
		case "terminationGracePeriodSeconds":
			s.TerminationGracePeriodSeconds.Reset()
			if err := s.TerminationGracePeriodSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationGracePeriodSeconds", err.Error())
				return false
			}
			return true
		case "tolerations":
			// Unsupported kind "array" for field "Tolerations".
			i.Skip()
			return true
		case "topologySpreadConstraints":
			// Unsupported kind "array" for field "TopologySpreadConstraints".
			i.Skip()
			return true
		case "volumes":
			// Unsupported kind "array" for field "Volumes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ContainerStatuses != nil {
		more.More()
		j.WriteObjectField("containerStatuses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ContainerStatuses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.EphemeralContainerStatuses != nil {
		more.More()
		j.WriteObjectField("ephemeralContainerStatuses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.EphemeralContainerStatuses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.HostIP.Set {
		more.More()
		j.WriteObjectField("hostIP")
		s.HostIP.WriteJSON(j)
	}
	if s.InitContainerStatuses != nil {
		more.More()
		j.WriteObjectField("initContainerStatuses")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.InitContainerStatuses {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.NominatedNodeName.Set {
		more.More()
		j.WriteObjectField("nominatedNodeName")
		s.NominatedNodeName.WriteJSON(j)
	}
	if s.Phase.Set {
		more.More()
		j.WriteObjectField("phase")
		s.Phase.WriteJSON(j)
	}
	if s.PodIP.Set {
		more.More()
		j.WriteObjectField("podIP")
		s.PodIP.WriteJSON(j)
	}
	if s.PodIPs != nil {
		more.More()
		j.WriteObjectField("podIPs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PodIPs {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.QosClass.Set {
		more.More()
		j.WriteObjectField("qosClass")
		s.QosClass.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "startTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodStatus json value to io.Writer.
func (s IoK8sAPICoreV1PodStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodStatus json value from io.Reader.
func (s *IoK8sAPICoreV1PodStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodStatus from json stream.
func (s *IoK8sAPICoreV1PodStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "containerStatuses":
			// Unsupported kind "array" for field "ContainerStatuses".
			i.Skip()
			return true
		case "ephemeralContainerStatuses":
			// Unsupported kind "array" for field "EphemeralContainerStatuses".
			i.Skip()
			return true
		case "hostIP":
			s.HostIP.Reset()
			if err := s.HostIP.ReadJSON(i); err != nil {
				i.ReportError("Field HostIP", err.Error())
				return false
			}
			return true
		case "initContainerStatuses":
			// Unsupported kind "array" for field "InitContainerStatuses".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "nominatedNodeName":
			s.NominatedNodeName.Reset()
			if err := s.NominatedNodeName.ReadJSON(i); err != nil {
				i.ReportError("Field NominatedNodeName", err.Error())
				return false
			}
			return true
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				i.ReportError("Field Phase", err.Error())
				return false
			}
			return true
		case "podIP":
			s.PodIP.Reset()
			if err := s.PodIP.ReadJSON(i); err != nil {
				i.ReportError("Field PodIP", err.Error())
				return false
			}
			return true
		case "podIPs":
			// Unsupported kind "array" for field "PodIPs".
			i.Skip()
			return true
		case "qosClass":
			s.QosClass.Reset()
			if err := s.QosClass.ReadJSON(i); err != nil {
				i.ReportError("Field QosClass", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "startTime":
			// Unsupported kind "pointer" for field "StartTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Template.Set {
		more.More()
		j.WriteObjectField("template")
		s.Template.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodTemplate json value to io.Writer.
func (s IoK8sAPICoreV1PodTemplate) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodTemplate json value from io.Reader.
func (s *IoK8sAPICoreV1PodTemplate) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodTemplate from json stream.
func (s *IoK8sAPICoreV1PodTemplate) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "template":
			s.Template.Reset()
			if err := s.Template.ReadJSON(i); err != nil {
				i.ReportError("Field Template", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplateList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodTemplateList json value to io.Writer.
func (s IoK8sAPICoreV1PodTemplateList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodTemplateList json value from io.Reader.
func (s *IoK8sAPICoreV1PodTemplateList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodTemplateList from json stream.
func (s *IoK8sAPICoreV1PodTemplateList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodTemplateSpec json value to io.Writer.
func (s IoK8sAPICoreV1PodTemplateSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodTemplateSpec json value from io.Reader.
func (s *IoK8sAPICoreV1PodTemplateSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodTemplateSpec from json stream.
func (s *IoK8sAPICoreV1PodTemplateSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PortStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Error.Set {
		more.More()
		j.WriteObjectField("error")
		s.Error.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("port")
	j.WriteInt32(s.Port)
	more.More()
	j.WriteObjectField("protocol")
	j.WriteString(s.Protocol)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PortStatus json value to io.Writer.
func (s IoK8sAPICoreV1PortStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PortStatus json value from io.Reader.
func (s *IoK8sAPICoreV1PortStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PortStatus from json stream.
func (s *IoK8sAPICoreV1PortStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				i.ReportError("Field Error", err.Error())
				return false
			}
			return true
		case "port":
			s.Port = i.ReadInt32()
			return i.Error == nil
		case "protocol":
			s.Protocol = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PortworxVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PortworxVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1PortworxVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PortworxVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1PortworxVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PortworxVolumeSource from json stream.
func (s *IoK8sAPICoreV1PortworxVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "volumeID":
			s.VolumeID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PreferredSchedulingTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("preference")
	s.Preference.WriteJSON(j)
	more.More()
	j.WriteObjectField("weight")
	j.WriteInt32(s.Weight)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PreferredSchedulingTerm json value to io.Writer.
func (s IoK8sAPICoreV1PreferredSchedulingTerm) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PreferredSchedulingTerm json value from io.Reader.
func (s *IoK8sAPICoreV1PreferredSchedulingTerm) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PreferredSchedulingTerm from json stream.
func (s *IoK8sAPICoreV1PreferredSchedulingTerm) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "preference":
			if err := s.Preference.ReadJSON(i); err != nil {
				i.ReportError("Field Preference", err.Error())
				return false
			}
			return true
		case "weight":
			s.Weight = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Probe) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Exec.Set {
		more.More()
		j.WriteObjectField("exec")
		s.Exec.WriteJSON(j)
	}
	if s.FailureThreshold.Set {
		more.More()
		j.WriteObjectField("failureThreshold")
		s.FailureThreshold.WriteJSON(j)
	}
	if s.HttpGet.Set {
		more.More()
		j.WriteObjectField("httpGet")
		s.HttpGet.WriteJSON(j)
	}
	if s.InitialDelaySeconds.Set {
		more.More()
		j.WriteObjectField("initialDelaySeconds")
		s.InitialDelaySeconds.WriteJSON(j)
	}
	if s.PeriodSeconds.Set {
		more.More()
		j.WriteObjectField("periodSeconds")
		s.PeriodSeconds.WriteJSON(j)
	}
	if s.SuccessThreshold.Set {
		more.More()
		j.WriteObjectField("successThreshold")
		s.SuccessThreshold.WriteJSON(j)
	}
	if s.TcpSocket.Set {
		more.More()
		j.WriteObjectField("tcpSocket")
		s.TcpSocket.WriteJSON(j)
	}
	if s.TerminationGracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("terminationGracePeriodSeconds")
		s.TerminationGracePeriodSeconds.WriteJSON(j)
	}
	if s.TimeoutSeconds.Set {
		more.More()
		j.WriteObjectField("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Probe json value to io.Writer.
func (s IoK8sAPICoreV1Probe) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Probe json value from io.Reader.
func (s *IoK8sAPICoreV1Probe) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Probe from json stream.
func (s *IoK8sAPICoreV1Probe) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "exec":
			s.Exec.Reset()
			if err := s.Exec.ReadJSON(i); err != nil {
				i.ReportError("Field Exec", err.Error())
				return false
			}
			return true
		case "failureThreshold":
			s.FailureThreshold.Reset()
			if err := s.FailureThreshold.ReadJSON(i); err != nil {
				i.ReportError("Field FailureThreshold", err.Error())
				return false
			}
			return true
		case "httpGet":
			s.HttpGet.Reset()
			if err := s.HttpGet.ReadJSON(i); err != nil {
				i.ReportError("Field HttpGet", err.Error())
				return false
			}
			return true
		case "initialDelaySeconds":
			s.InitialDelaySeconds.Reset()
			if err := s.InitialDelaySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field InitialDelaySeconds", err.Error())
				return false
			}
			return true
		case "periodSeconds":
			s.PeriodSeconds.Reset()
			if err := s.PeriodSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field PeriodSeconds", err.Error())
				return false
			}
			return true
		case "successThreshold":
			s.SuccessThreshold.Reset()
			if err := s.SuccessThreshold.ReadJSON(i); err != nil {
				i.ReportError("Field SuccessThreshold", err.Error())
				return false
			}
			return true
		case "tcpSocket":
			s.TcpSocket.Reset()
			if err := s.TcpSocket.ReadJSON(i); err != nil {
				i.ReportError("Field TcpSocket", err.Error())
				return false
			}
			return true
		case "terminationGracePeriodSeconds":
			s.TerminationGracePeriodSeconds.Reset()
			if err := s.TerminationGracePeriodSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationGracePeriodSeconds", err.Error())
				return false
			}
			return true
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TimeoutSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ProjectedVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Sources != nil {
		more.More()
		j.WriteObjectField("sources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Sources {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ProjectedVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ProjectedVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ProjectedVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ProjectedVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ProjectedVolumeSource from json stream.
func (s *IoK8sAPICoreV1ProjectedVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultMode", err.Error())
				return false
			}
			return true
		case "sources":
			// Unsupported kind "array" for field "Sources".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1QuobyteVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("registry")
	j.WriteString(s.Registry)
	if s.Tenant.Set {
		more.More()
		j.WriteObjectField("tenant")
		s.Tenant.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volume")
	j.WriteString(s.Volume)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1QuobyteVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1QuobyteVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1QuobyteVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1QuobyteVolumeSource from json stream.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "registry":
			s.Registry = i.ReadString()
			return i.Error == nil
		case "tenant":
			s.Tenant.Reset()
			if err := s.Tenant.ReadJSON(i); err != nil {
				i.ReportError("Field Tenant", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		case "volume":
			s.Volume = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1RBDPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("image")
	j.WriteString(s.Image)
	if s.Keyring.Set {
		more.More()
		j.WriteObjectField("keyring")
		s.Keyring.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Pool.Set {
		more.More()
		j.WriteObjectField("pool")
		s.Pool.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1RBDPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1RBDPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1RBDPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1RBDPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "image":
			s.Image = i.ReadString()
			return i.Error == nil
		case "keyring":
			s.Keyring.Reset()
			if err := s.Keyring.ReadJSON(i); err != nil {
				i.ReportError("Field Keyring", err.Error())
				return false
			}
			return true
		case "monitors":
			// Unsupported kind "array" for field "Monitors".
			i.Skip()
			return true
		case "pool":
			s.Pool.Reset()
			if err := s.Pool.ReadJSON(i); err != nil {
				i.ReportError("Field Pool", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1RBDVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("image")
	j.WriteString(s.Image)
	if s.Keyring.Set {
		more.More()
		j.WriteObjectField("keyring")
		s.Keyring.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("monitors")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Monitors {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Pool.Set {
		more.More()
		j.WriteObjectField("pool")
		s.Pool.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1RBDVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1RBDVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1RBDVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1RBDVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1RBDVolumeSource from json stream.
func (s *IoK8sAPICoreV1RBDVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "image":
			s.Image = i.ReadString()
			return i.Error == nil
		case "keyring":
			s.Keyring.Reset()
			if err := s.Keyring.ReadJSON(i); err != nil {
				i.ReportError("Field Keyring", err.Error())
				return false
			}
			return true
		case "monitors":
			// Unsupported kind "array" for field "Monitors".
			i.Skip()
			return true
		case "pool":
			s.Pool.Reset()
			if err := s.Pool.ReadJSON(i); err != nil {
				i.ReportError("Field Pool", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationController) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ReplicationController json value to io.Writer.
func (s IoK8sAPICoreV1ReplicationController) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ReplicationController json value from io.Reader.
func (s *IoK8sAPICoreV1ReplicationController) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ReplicationController from json stream.
func (s *IoK8sAPICoreV1ReplicationController) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ReplicationControllerCondition json value to io.Writer.
func (s IoK8sAPICoreV1ReplicationControllerCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ReplicationControllerCondition json value from io.Reader.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerCondition from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ReplicationControllerList json value to io.Writer.
func (s IoK8sAPICoreV1ReplicationControllerList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ReplicationControllerList json value from io.Reader.
func (s *IoK8sAPICoreV1ReplicationControllerList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerList from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MinReadySeconds.Set {
		more.More()
		j.WriteObjectField("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		more.More()
		j.WriteObjectField("replicas")
		s.Replicas.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "selector".
	if s.Template.Set {
		more.More()
		j.WriteObjectField("template")
		s.Template.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ReplicationControllerSpec json value to io.Writer.
func (s IoK8sAPICoreV1ReplicationControllerSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ReplicationControllerSpec json value from io.Reader.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerSpec from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field MinReadySeconds", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				i.ReportError("Field Replicas", err.Error())
				return false
			}
			return true
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		case "template":
			s.Template.Reset()
			if err := s.Template.ReadJSON(i); err != nil {
				i.ReportError("Field Template", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AvailableReplicas.Set {
		more.More()
		j.WriteObjectField("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.FullyLabeledReplicas.Set {
		more.More()
		j.WriteObjectField("fullyLabeledReplicas")
		s.FullyLabeledReplicas.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		more.More()
		j.WriteObjectField("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("replicas")
	j.WriteInt32(s.Replicas)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ReplicationControllerStatus json value to io.Writer.
func (s IoK8sAPICoreV1ReplicationControllerStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ReplicationControllerStatus json value from io.Reader.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerStatus from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "availableReplicas":
			s.AvailableReplicas.Reset()
			if err := s.AvailableReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field AvailableReplicas", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "fullyLabeledReplicas":
			s.FullyLabeledReplicas.Reset()
			if err := s.FullyLabeledReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field FullyLabeledReplicas", err.Error())
				return false
			}
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field ReadyReplicas", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceFieldSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainerName.Set {
		more.More()
		j.WriteObjectField("containerName")
		s.ContainerName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "divisor".
	more.More()
	j.WriteObjectField("resource")
	j.WriteString(s.Resource)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceFieldSelector json value to io.Writer.
func (s IoK8sAPICoreV1ResourceFieldSelector) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceFieldSelector json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceFieldSelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceFieldSelector from json stream.
func (s *IoK8sAPICoreV1ResourceFieldSelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerName":
			s.ContainerName.Reset()
			if err := s.ContainerName.ReadJSON(i); err != nil {
				i.ReportError("Field ContainerName", err.Error())
				return false
			}
			return true
		case "divisor":
			// Unsupported kind "pointer" for field "Divisor".
			i.Skip()
			return true
		case "resource":
			s.Resource = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuota) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceQuota json value to io.Writer.
func (s IoK8sAPICoreV1ResourceQuota) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceQuota json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceQuota) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuota from json stream.
func (s *IoK8sAPICoreV1ResourceQuota) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceQuotaList json value to io.Writer.
func (s IoK8sAPICoreV1ResourceQuotaList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceQuotaList json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceQuotaList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaList from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "hard".
	if s.ScopeSelector.Set {
		more.More()
		j.WriteObjectField("scopeSelector")
		s.ScopeSelector.WriteJSON(j)
	}
	if s.Scopes != nil {
		more.More()
		j.WriteObjectField("scopes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Scopes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceQuotaSpec json value to io.Writer.
func (s IoK8sAPICoreV1ResourceQuotaSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceQuotaSpec json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaSpec from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hard":
			// Unsupported kind "pointer" for field "Hard".
			i.Skip()
			return true
		case "scopeSelector":
			s.ScopeSelector.Reset()
			if err := s.ScopeSelector.ReadJSON(i); err != nil {
				i.ReportError("Field ScopeSelector", err.Error())
				return false
			}
			return true
		case "scopes":
			// Unsupported kind "array" for field "Scopes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "hard".
	// Unsupported kind "pointer" for field "used".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceQuotaStatus json value to io.Writer.
func (s IoK8sAPICoreV1ResourceQuotaStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceQuotaStatus json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceQuotaStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaStatus from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hard":
			// Unsupported kind "pointer" for field "Hard".
			i.Skip()
			return true
		case "used":
			// Unsupported kind "pointer" for field "Used".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceRequirements) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "limits".
	// Unsupported kind "pointer" for field "requests".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceRequirements json value to io.Writer.
func (s IoK8sAPICoreV1ResourceRequirements) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceRequirements json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceRequirements) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceRequirements from json stream.
func (s *IoK8sAPICoreV1ResourceRequirements) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limits":
			// Unsupported kind "pointer" for field "Limits".
			i.Skip()
			return true
		case "requests":
			// Unsupported kind "pointer" for field "Requests".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SELinuxOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Level.Set {
		more.More()
		j.WriteObjectField("level")
		s.Level.WriteJSON(j)
	}
	if s.Role.Set {
		more.More()
		j.WriteObjectField("role")
		s.Role.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SELinuxOptions json value to io.Writer.
func (s IoK8sAPICoreV1SELinuxOptions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SELinuxOptions json value from io.Reader.
func (s *IoK8sAPICoreV1SELinuxOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SELinuxOptions from json stream.
func (s *IoK8sAPICoreV1SELinuxOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "level":
			s.Level.Reset()
			if err := s.Level.ReadJSON(i); err != nil {
				i.ReportError("Field Level", err.Error())
				return false
			}
			return true
		case "role":
			s.Role.Reset()
			if err := s.Role.ReadJSON(i); err != nil {
				i.ReportError("Field Role", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScaleIOPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("gateway")
	j.WriteString(s.Gateway)
	if s.ProtectionDomain.Set {
		more.More()
		j.WriteObjectField("protectionDomain")
		s.ProtectionDomain.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretRef")
	s.SecretRef.WriteJSON(j)
	if s.SslEnabled.Set {
		more.More()
		j.WriteObjectField("sslEnabled")
		s.SslEnabled.WriteJSON(j)
	}
	if s.StorageMode.Set {
		more.More()
		j.WriteObjectField("storageMode")
		s.StorageMode.WriteJSON(j)
	}
	if s.StoragePool.Set {
		more.More()
		j.WriteObjectField("storagePool")
		s.StoragePool.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("system")
	j.WriteString(s.System)
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ScaleIOPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ScaleIOPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ScaleIOPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ScaleIOPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "gateway":
			s.Gateway = i.ReadString()
			return i.Error == nil
		case "protectionDomain":
			s.ProtectionDomain.Reset()
			if err := s.ProtectionDomain.ReadJSON(i); err != nil {
				i.ReportError("Field ProtectionDomain", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "sslEnabled":
			s.SslEnabled.Reset()
			if err := s.SslEnabled.ReadJSON(i); err != nil {
				i.ReportError("Field SslEnabled", err.Error())
				return false
			}
			return true
		case "storageMode":
			s.StorageMode.Reset()
			if err := s.StorageMode.ReadJSON(i); err != nil {
				i.ReportError("Field StorageMode", err.Error())
				return false
			}
			return true
		case "storagePool":
			s.StoragePool.Reset()
			if err := s.StoragePool.ReadJSON(i); err != nil {
				i.ReportError("Field StoragePool", err.Error())
				return false
			}
			return true
		case "system":
			s.System = i.ReadString()
			return i.Error == nil
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScaleIOVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("gateway")
	j.WriteString(s.Gateway)
	if s.ProtectionDomain.Set {
		more.More()
		j.WriteObjectField("protectionDomain")
		s.ProtectionDomain.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("secretRef")
	s.SecretRef.WriteJSON(j)
	if s.SslEnabled.Set {
		more.More()
		j.WriteObjectField("sslEnabled")
		s.SslEnabled.WriteJSON(j)
	}
	if s.StorageMode.Set {
		more.More()
		j.WriteObjectField("storageMode")
		s.StorageMode.WriteJSON(j)
	}
	if s.StoragePool.Set {
		more.More()
		j.WriteObjectField("storagePool")
		s.StoragePool.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("system")
	j.WriteString(s.System)
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ScaleIOVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ScaleIOVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ScaleIOVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ScaleIOVolumeSource from json stream.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "gateway":
			s.Gateway = i.ReadString()
			return i.Error == nil
		case "protectionDomain":
			s.ProtectionDomain.Reset()
			if err := s.ProtectionDomain.ReadJSON(i); err != nil {
				i.ReportError("Field ProtectionDomain", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "sslEnabled":
			s.SslEnabled.Reset()
			if err := s.SslEnabled.ReadJSON(i); err != nil {
				i.ReportError("Field SslEnabled", err.Error())
				return false
			}
			return true
		case "storageMode":
			s.StorageMode.Reset()
			if err := s.StorageMode.ReadJSON(i); err != nil {
				i.ReportError("Field StorageMode", err.Error())
				return false
			}
			return true
		case "storagePool":
			s.StoragePool.Reset()
			if err := s.StoragePool.ReadJSON(i); err != nil {
				i.ReportError("Field StoragePool", err.Error())
				return false
			}
			return true
		case "system":
			s.System = i.ReadString()
			return i.Error == nil
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScopeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchExpressions != nil {
		more.More()
		j.WriteObjectField("matchExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ScopeSelector json value to io.Writer.
func (s IoK8sAPICoreV1ScopeSelector) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ScopeSelector json value from io.Reader.
func (s *IoK8sAPICoreV1ScopeSelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ScopeSelector from json stream.
func (s *IoK8sAPICoreV1ScopeSelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "matchExpressions":
			// Unsupported kind "array" for field "MatchExpressions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScopedResourceSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("operator")
	j.WriteString(s.Operator)
	more.More()
	j.WriteObjectField("scopeName")
	j.WriteString(s.ScopeName)
	if s.Values != nil {
		more.More()
		j.WriteObjectField("values")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Values {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ScopedResourceSelectorRequirement json value to io.Writer.
func (s IoK8sAPICoreV1ScopedResourceSelectorRequirement) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ScopedResourceSelectorRequirement json value from io.Reader.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ScopedResourceSelectorRequirement from json stream.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "operator":
			s.Operator = i.ReadString()
			return i.Error == nil
		case "scopeName":
			s.ScopeName = i.ReadString()
			return i.Error == nil
		case "values":
			// Unsupported kind "array" for field "Values".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SeccompProfile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LocalhostProfile.Set {
		more.More()
		j.WriteObjectField("localhostProfile")
		s.LocalhostProfile.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SeccompProfile json value to io.Writer.
func (s IoK8sAPICoreV1SeccompProfile) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SeccompProfile json value from io.Reader.
func (s *IoK8sAPICoreV1SeccompProfile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SeccompProfile from json stream.
func (s *IoK8sAPICoreV1SeccompProfile) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "localhostProfile":
			s.LocalhostProfile.Reset()
			if err := s.LocalhostProfile.ReadJSON(i); err != nil {
				i.ReportError("Field LocalhostProfile", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Secret) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "data".
	if s.Immutable.Set {
		more.More()
		j.WriteObjectField("immutable")
		s.Immutable.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "stringData".
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Secret json value to io.Writer.
func (s IoK8sAPICoreV1Secret) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Secret json value from io.Reader.
func (s *IoK8sAPICoreV1Secret) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Secret from json stream.
func (s *IoK8sAPICoreV1Secret) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "data":
			// Unsupported kind "pointer" for field "Data".
			i.Skip()
			return true
		case "immutable":
			s.Immutable.Reset()
			if err := s.Immutable.ReadJSON(i); err != nil {
				i.ReportError("Field Immutable", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "stringData":
			// Unsupported kind "pointer" for field "StringData".
			i.Skip()
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretEnvSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretEnvSource json value to io.Writer.
func (s IoK8sAPICoreV1SecretEnvSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretEnvSource json value from io.Reader.
func (s *IoK8sAPICoreV1SecretEnvSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretEnvSource from json stream.
func (s *IoK8sAPICoreV1SecretEnvSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretKeySelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretKeySelector json value to io.Writer.
func (s IoK8sAPICoreV1SecretKeySelector) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretKeySelector json value from io.Reader.
func (s *IoK8sAPICoreV1SecretKeySelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretKeySelector from json stream.
func (s *IoK8sAPICoreV1SecretKeySelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretList json value to io.Writer.
func (s IoK8sAPICoreV1SecretList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretList json value from io.Reader.
func (s *IoK8sAPICoreV1SecretList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretList from json stream.
func (s *IoK8sAPICoreV1SecretList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretProjection json value to io.Writer.
func (s IoK8sAPICoreV1SecretProjection) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretProjection json value from io.Reader.
func (s *IoK8sAPICoreV1SecretProjection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretProjection from json stream.
func (s *IoK8sAPICoreV1SecretProjection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretReference json value to io.Writer.
func (s IoK8sAPICoreV1SecretReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretReference json value from io.Reader.
func (s *IoK8sAPICoreV1SecretReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretReference from json stream.
func (s *IoK8sAPICoreV1SecretReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultMode.Set {
		more.More()
		j.WriteObjectField("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	if s.Items != nil {
		more.More()
		j.WriteObjectField("items")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Items {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Optional.Set {
		more.More()
		j.WriteObjectField("optional")
		s.Optional.WriteJSON(j)
	}
	if s.SecretName.Set {
		more.More()
		j.WriteObjectField("secretName")
		s.SecretName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1SecretVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1SecretVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretVolumeSource from json stream.
func (s *IoK8sAPICoreV1SecretVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultMode", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		case "secretName":
			s.SecretName.Reset()
			if err := s.SecretName.ReadJSON(i); err != nil {
				i.ReportError("Field SecretName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecurityContext) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowPrivilegeEscalation.Set {
		more.More()
		j.WriteObjectField("allowPrivilegeEscalation")
		s.AllowPrivilegeEscalation.WriteJSON(j)
	}
	if s.Capabilities.Set {
		more.More()
		j.WriteObjectField("capabilities")
		s.Capabilities.WriteJSON(j)
	}
	if s.Privileged.Set {
		more.More()
		j.WriteObjectField("privileged")
		s.Privileged.WriteJSON(j)
	}
	if s.ProcMount.Set {
		more.More()
		j.WriteObjectField("procMount")
		s.ProcMount.WriteJSON(j)
	}
	if s.ReadOnlyRootFilesystem.Set {
		more.More()
		j.WriteObjectField("readOnlyRootFilesystem")
		s.ReadOnlyRootFilesystem.WriteJSON(j)
	}
	if s.RunAsGroup.Set {
		more.More()
		j.WriteObjectField("runAsGroup")
		s.RunAsGroup.WriteJSON(j)
	}
	if s.RunAsNonRoot.Set {
		more.More()
		j.WriteObjectField("runAsNonRoot")
		s.RunAsNonRoot.WriteJSON(j)
	}
	if s.RunAsUser.Set {
		more.More()
		j.WriteObjectField("runAsUser")
		s.RunAsUser.WriteJSON(j)
	}
	if s.SeLinuxOptions.Set {
		more.More()
		j.WriteObjectField("seLinuxOptions")
		s.SeLinuxOptions.WriteJSON(j)
	}
	if s.SeccompProfile.Set {
		more.More()
		j.WriteObjectField("seccompProfile")
		s.SeccompProfile.WriteJSON(j)
	}
	if s.WindowsOptions.Set {
		more.More()
		j.WriteObjectField("windowsOptions")
		s.WindowsOptions.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecurityContext json value to io.Writer.
func (s IoK8sAPICoreV1SecurityContext) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecurityContext json value from io.Reader.
func (s *IoK8sAPICoreV1SecurityContext) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecurityContext from json stream.
func (s *IoK8sAPICoreV1SecurityContext) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowPrivilegeEscalation":
			s.AllowPrivilegeEscalation.Reset()
			if err := s.AllowPrivilegeEscalation.ReadJSON(i); err != nil {
				i.ReportError("Field AllowPrivilegeEscalation", err.Error())
				return false
			}
			return true
		case "capabilities":
			s.Capabilities.Reset()
			if err := s.Capabilities.ReadJSON(i); err != nil {
				i.ReportError("Field Capabilities", err.Error())
				return false
			}
			return true
		case "privileged":
			s.Privileged.Reset()
			if err := s.Privileged.ReadJSON(i); err != nil {
				i.ReportError("Field Privileged", err.Error())
				return false
			}
			return true
		case "procMount":
			s.ProcMount.Reset()
			if err := s.ProcMount.ReadJSON(i); err != nil {
				i.ReportError("Field ProcMount", err.Error())
				return false
			}
			return true
		case "readOnlyRootFilesystem":
			s.ReadOnlyRootFilesystem.Reset()
			if err := s.ReadOnlyRootFilesystem.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnlyRootFilesystem", err.Error())
				return false
			}
			return true
		case "runAsGroup":
			s.RunAsGroup.Reset()
			if err := s.RunAsGroup.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsGroup", err.Error())
				return false
			}
			return true
		case "runAsNonRoot":
			s.RunAsNonRoot.Reset()
			if err := s.RunAsNonRoot.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsNonRoot", err.Error())
				return false
			}
			return true
		case "runAsUser":
			s.RunAsUser.Reset()
			if err := s.RunAsUser.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsUser", err.Error())
				return false
			}
			return true
		case "seLinuxOptions":
			s.SeLinuxOptions.Reset()
			if err := s.SeLinuxOptions.ReadJSON(i); err != nil {
				i.ReportError("Field SeLinuxOptions", err.Error())
				return false
			}
			return true
		case "seccompProfile":
			s.SeccompProfile.Reset()
			if err := s.SeccompProfile.ReadJSON(i); err != nil {
				i.ReportError("Field SeccompProfile", err.Error())
				return false
			}
			return true
		case "windowsOptions":
			s.WindowsOptions.Reset()
			if err := s.WindowsOptions.ReadJSON(i); err != nil {
				i.ReportError("Field WindowsOptions", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Service) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Service json value to io.Writer.
func (s IoK8sAPICoreV1Service) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Service json value from io.Reader.
func (s *IoK8sAPICoreV1Service) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Service from json stream.
func (s *IoK8sAPICoreV1Service) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccount) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.AutomountServiceAccountToken.Set {
		more.More()
		j.WriteObjectField("automountServiceAccountToken")
		s.AutomountServiceAccountToken.WriteJSON(j)
	}
	if s.ImagePullSecrets != nil {
		more.More()
		j.WriteObjectField("imagePullSecrets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ImagePullSecrets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Secrets != nil {
		more.More()
		j.WriteObjectField("secrets")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Secrets {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceAccount json value to io.Writer.
func (s IoK8sAPICoreV1ServiceAccount) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceAccount json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceAccount) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccount from json stream.
func (s *IoK8sAPICoreV1ServiceAccount) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "automountServiceAccountToken":
			s.AutomountServiceAccountToken.Reset()
			if err := s.AutomountServiceAccountToken.ReadJSON(i); err != nil {
				i.ReportError("Field AutomountServiceAccountToken", err.Error())
				return false
			}
			return true
		case "imagePullSecrets":
			// Unsupported kind "array" for field "ImagePullSecrets".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "secrets":
			// Unsupported kind "array" for field "Secrets".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccountList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceAccountList json value to io.Writer.
func (s IoK8sAPICoreV1ServiceAccountList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceAccountList json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceAccountList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccountList from json stream.
func (s *IoK8sAPICoreV1ServiceAccountList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccountTokenProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Audience.Set {
		more.More()
		j.WriteObjectField("audience")
		s.Audience.WriteJSON(j)
	}
	if s.ExpirationSeconds.Set {
		more.More()
		j.WriteObjectField("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceAccountTokenProjection json value to io.Writer.
func (s IoK8sAPICoreV1ServiceAccountTokenProjection) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceAccountTokenProjection json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccountTokenProjection from json stream.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "audience":
			s.Audience.Reset()
			if err := s.Audience.ReadJSON(i); err != nil {
				i.ReportError("Field Audience", err.Error())
				return false
			}
			return true
		case "expirationSeconds":
			s.ExpirationSeconds.Reset()
			if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ExpirationSeconds", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceList json value to io.Writer.
func (s IoK8sAPICoreV1ServiceList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceList json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceList from json stream.
func (s *IoK8sAPICoreV1ServiceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServicePort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.NodePort.Set {
		more.More()
		j.WriteObjectField("nodePort")
		s.NodePort.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("port")
	j.WriteInt32(s.Port)
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "targetPort".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServicePort json value to io.Writer.
func (s IoK8sAPICoreV1ServicePort) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServicePort json value from io.Reader.
func (s *IoK8sAPICoreV1ServicePort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServicePort from json stream.
func (s *IoK8sAPICoreV1ServicePort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				i.ReportError("Field AppProtocol", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "nodePort":
			s.NodePort.Reset()
			if err := s.NodePort.ReadJSON(i); err != nil {
				i.ReportError("Field NodePort", err.Error())
				return false
			}
			return true
		case "port":
			s.Port = i.ReadInt32()
			return i.Error == nil
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		case "targetPort":
			// Unsupported kind "pointer" for field "TargetPort".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllocateLoadBalancerNodePorts.Set {
		more.More()
		j.WriteObjectField("allocateLoadBalancerNodePorts")
		s.AllocateLoadBalancerNodePorts.WriteJSON(j)
	}
	if s.ClusterIP.Set {
		more.More()
		j.WriteObjectField("clusterIP")
		s.ClusterIP.WriteJSON(j)
	}
	if s.ClusterIPs != nil {
		more.More()
		j.WriteObjectField("clusterIPs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ClusterIPs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ExternalIPs != nil {
		more.More()
		j.WriteObjectField("externalIPs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ExternalIPs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ExternalName.Set {
		more.More()
		j.WriteObjectField("externalName")
		s.ExternalName.WriteJSON(j)
	}
	if s.ExternalTrafficPolicy.Set {
		more.More()
		j.WriteObjectField("externalTrafficPolicy")
		s.ExternalTrafficPolicy.WriteJSON(j)
	}
	if s.HealthCheckNodePort.Set {
		more.More()
		j.WriteObjectField("healthCheckNodePort")
		s.HealthCheckNodePort.WriteJSON(j)
	}
	if s.InternalTrafficPolicy.Set {
		more.More()
		j.WriteObjectField("internalTrafficPolicy")
		s.InternalTrafficPolicy.WriteJSON(j)
	}
	if s.IpFamilies != nil {
		more.More()
		j.WriteObjectField("ipFamilies")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.IpFamilies {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.IpFamilyPolicy.Set {
		more.More()
		j.WriteObjectField("ipFamilyPolicy")
		s.IpFamilyPolicy.WriteJSON(j)
	}
	if s.LoadBalancerClass.Set {
		more.More()
		j.WriteObjectField("loadBalancerClass")
		s.LoadBalancerClass.WriteJSON(j)
	}
	if s.LoadBalancerIP.Set {
		more.More()
		j.WriteObjectField("loadBalancerIP")
		s.LoadBalancerIP.WriteJSON(j)
	}
	if s.LoadBalancerSourceRanges != nil {
		more.More()
		j.WriteObjectField("loadBalancerSourceRanges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.LoadBalancerSourceRanges {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.PublishNotReadyAddresses.Set {
		more.More()
		j.WriteObjectField("publishNotReadyAddresses")
		s.PublishNotReadyAddresses.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "selector".
	if s.SessionAffinity.Set {
		more.More()
		j.WriteObjectField("sessionAffinity")
		s.SessionAffinity.WriteJSON(j)
	}
	if s.SessionAffinityConfig.Set {
		more.More()
		j.WriteObjectField("sessionAffinityConfig")
		s.SessionAffinityConfig.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceSpec json value to io.Writer.
func (s IoK8sAPICoreV1ServiceSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceSpec json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceSpec from json stream.
func (s *IoK8sAPICoreV1ServiceSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allocateLoadBalancerNodePorts":
			s.AllocateLoadBalancerNodePorts.Reset()
			if err := s.AllocateLoadBalancerNodePorts.ReadJSON(i); err != nil {
				i.ReportError("Field AllocateLoadBalancerNodePorts", err.Error())
				return false
			}
			return true
		case "clusterIP":
			s.ClusterIP.Reset()
			if err := s.ClusterIP.ReadJSON(i); err != nil {
				i.ReportError("Field ClusterIP", err.Error())
				return false
			}
			return true
		case "clusterIPs":
			// Unsupported kind "array" for field "ClusterIPs".
			i.Skip()
			return true
		case "externalIPs":
			// Unsupported kind "array" for field "ExternalIPs".
			i.Skip()
			return true
		case "externalName":
			s.ExternalName.Reset()
			if err := s.ExternalName.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalName", err.Error())
				return false
			}
			return true
		case "externalTrafficPolicy":
			s.ExternalTrafficPolicy.Reset()
			if err := s.ExternalTrafficPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalTrafficPolicy", err.Error())
				return false
			}
			return true
		case "healthCheckNodePort":
			s.HealthCheckNodePort.Reset()
			if err := s.HealthCheckNodePort.ReadJSON(i); err != nil {
				i.ReportError("Field HealthCheckNodePort", err.Error())
				return false
			}
			return true
		case "internalTrafficPolicy":
			s.InternalTrafficPolicy.Reset()
			if err := s.InternalTrafficPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field InternalTrafficPolicy", err.Error())
				return false
			}
			return true
		case "ipFamilies":
			// Unsupported kind "array" for field "IpFamilies".
			i.Skip()
			return true
		case "ipFamilyPolicy":
			s.IpFamilyPolicy.Reset()
			if err := s.IpFamilyPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field IpFamilyPolicy", err.Error())
				return false
			}
			return true
		case "loadBalancerClass":
			s.LoadBalancerClass.Reset()
			if err := s.LoadBalancerClass.ReadJSON(i); err != nil {
				i.ReportError("Field LoadBalancerClass", err.Error())
				return false
			}
			return true
		case "loadBalancerIP":
			s.LoadBalancerIP.Reset()
			if err := s.LoadBalancerIP.ReadJSON(i); err != nil {
				i.ReportError("Field LoadBalancerIP", err.Error())
				return false
			}
			return true
		case "loadBalancerSourceRanges":
			// Unsupported kind "array" for field "LoadBalancerSourceRanges".
			i.Skip()
			return true
		case "ports":
			// Unsupported kind "array" for field "Ports".
			i.Skip()
			return true
		case "publishNotReadyAddresses":
			s.PublishNotReadyAddresses.Reset()
			if err := s.PublishNotReadyAddresses.ReadJSON(i); err != nil {
				i.ReportError("Field PublishNotReadyAddresses", err.Error())
				return false
			}
			return true
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		case "sessionAffinity":
			s.SessionAffinity.Reset()
			if err := s.SessionAffinity.ReadJSON(i); err != nil {
				i.ReportError("Field SessionAffinity", err.Error())
				return false
			}
			return true
		case "sessionAffinityConfig":
			s.SessionAffinityConfig.Reset()
			if err := s.SessionAffinityConfig.ReadJSON(i); err != nil {
				i.ReportError("Field SessionAffinityConfig", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.LoadBalancer.Set {
		more.More()
		j.WriteObjectField("loadBalancer")
		s.LoadBalancer.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceStatus json value to io.Writer.
func (s IoK8sAPICoreV1ServiceStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceStatus json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceStatus from json stream.
func (s *IoK8sAPICoreV1ServiceStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "loadBalancer":
			s.LoadBalancer.Reset()
			if err := s.LoadBalancer.ReadJSON(i); err != nil {
				i.ReportError("Field LoadBalancer", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SessionAffinityConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ClientIP.Set {
		more.More()
		j.WriteObjectField("clientIP")
		s.ClientIP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SessionAffinityConfig json value to io.Writer.
func (s IoK8sAPICoreV1SessionAffinityConfig) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SessionAffinityConfig json value from io.Reader.
func (s *IoK8sAPICoreV1SessionAffinityConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SessionAffinityConfig from json stream.
func (s *IoK8sAPICoreV1SessionAffinityConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "clientIP":
			s.ClientIP.Reset()
			if err := s.ClientIP.ReadJSON(i); err != nil {
				i.ReportError("Field ClientIP", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1StorageOSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	if s.VolumeNamespace.Set {
		more.More()
		j.WriteObjectField("volumeNamespace")
		s.VolumeNamespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1StorageOSPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1StorageOSPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1StorageOSPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1StorageOSPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeName", err.Error())
				return false
			}
			return true
		case "volumeNamespace":
			s.VolumeNamespace.Reset()
			if err := s.VolumeNamespace.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeNamespace", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1StorageOSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretRef.Set {
		more.More()
		j.WriteObjectField("secretRef")
		s.SecretRef.WriteJSON(j)
	}
	if s.VolumeName.Set {
		more.More()
		j.WriteObjectField("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	if s.VolumeNamespace.Set {
		more.More()
		j.WriteObjectField("volumeNamespace")
		s.VolumeNamespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1StorageOSVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1StorageOSVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1StorageOSVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1StorageOSVolumeSource from json stream.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			s.SecretRef.Reset()
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeName", err.Error())
				return false
			}
			return true
		case "volumeNamespace":
			s.VolumeNamespace.Reset()
			if err := s.VolumeNamespace.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeNamespace", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Sysctl) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("value")
	j.WriteString(s.Value)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Sysctl json value to io.Writer.
func (s IoK8sAPICoreV1Sysctl) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Sysctl json value from io.Reader.
func (s *IoK8sAPICoreV1Sysctl) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Sysctl from json stream.
func (s *IoK8sAPICoreV1Sysctl) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "value":
			s.Value = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TCPSocketAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "port".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1TCPSocketAction json value to io.Writer.
func (s IoK8sAPICoreV1TCPSocketAction) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1TCPSocketAction json value from io.Reader.
func (s *IoK8sAPICoreV1TCPSocketAction) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1TCPSocketAction from json stream.
func (s *IoK8sAPICoreV1TCPSocketAction) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				i.ReportError("Field Host", err.Error())
				return false
			}
			return true
		case "port":
			// Unsupported kind "alias" for field "Port".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Taint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("effect")
	j.WriteString(s.Effect)
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	// Unsupported kind "pointer" for field "timeAdded".
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Taint json value to io.Writer.
func (s IoK8sAPICoreV1Taint) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Taint json value from io.Reader.
func (s *IoK8sAPICoreV1Taint) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Taint from json stream.
func (s *IoK8sAPICoreV1Taint) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "effect":
			s.Effect = i.ReadString()
			return i.Error == nil
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "timeAdded":
			// Unsupported kind "pointer" for field "TimeAdded".
			i.Skip()
			return true
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Toleration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Effect.Set {
		more.More()
		j.WriteObjectField("effect")
		s.Effect.WriteJSON(j)
	}
	if s.Key.Set {
		more.More()
		j.WriteObjectField("key")
		s.Key.WriteJSON(j)
	}
	if s.Operator.Set {
		more.More()
		j.WriteObjectField("operator")
		s.Operator.WriteJSON(j)
	}
	if s.TolerationSeconds.Set {
		more.More()
		j.WriteObjectField("tolerationSeconds")
		s.TolerationSeconds.WriteJSON(j)
	}
	if s.Value.Set {
		more.More()
		j.WriteObjectField("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Toleration json value to io.Writer.
func (s IoK8sAPICoreV1Toleration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Toleration json value from io.Reader.
func (s *IoK8sAPICoreV1Toleration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Toleration from json stream.
func (s *IoK8sAPICoreV1Toleration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "effect":
			s.Effect.Reset()
			if err := s.Effect.ReadJSON(i); err != nil {
				i.ReportError("Field Effect", err.Error())
				return false
			}
			return true
		case "key":
			s.Key.Reset()
			if err := s.Key.ReadJSON(i); err != nil {
				i.ReportError("Field Key", err.Error())
				return false
			}
			return true
		case "operator":
			s.Operator.Reset()
			if err := s.Operator.ReadJSON(i); err != nil {
				i.ReportError("Field Operator", err.Error())
				return false
			}
			return true
		case "tolerationSeconds":
			s.TolerationSeconds.Reset()
			if err := s.TolerationSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TolerationSeconds", err.Error())
				return false
			}
			return true
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySelectorLabelRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	more.More()
	j.WriteObjectField("values")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Values {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1TopologySelectorLabelRequirement json value to io.Writer.
func (s IoK8sAPICoreV1TopologySelectorLabelRequirement) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1TopologySelectorLabelRequirement json value from io.Reader.
func (s *IoK8sAPICoreV1TopologySelectorLabelRequirement) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1TopologySelectorLabelRequirement from json stream.
func (s *IoK8sAPICoreV1TopologySelectorLabelRequirement) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "values":
			// Unsupported kind "array" for field "Values".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySelectorTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchLabelExpressions != nil {
		more.More()
		j.WriteObjectField("matchLabelExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchLabelExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1TopologySelectorTerm json value to io.Writer.
func (s IoK8sAPICoreV1TopologySelectorTerm) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1TopologySelectorTerm json value from io.Reader.
func (s *IoK8sAPICoreV1TopologySelectorTerm) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1TopologySelectorTerm from json stream.
func (s *IoK8sAPICoreV1TopologySelectorTerm) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "matchLabelExpressions":
			// Unsupported kind "array" for field "MatchLabelExpressions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySpreadConstraint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LabelSelector.Set {
		more.More()
		j.WriteObjectField("labelSelector")
		s.LabelSelector.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("maxSkew")
	j.WriteInt32(s.MaxSkew)
	more.More()
	j.WriteObjectField("topologyKey")
	j.WriteString(s.TopologyKey)
	more.More()
	j.WriteObjectField("whenUnsatisfiable")
	j.WriteString(s.WhenUnsatisfiable)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1TopologySpreadConstraint json value to io.Writer.
func (s IoK8sAPICoreV1TopologySpreadConstraint) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1TopologySpreadConstraint json value from io.Reader.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1TopologySpreadConstraint from json stream.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "labelSelector":
			s.LabelSelector.Reset()
			if err := s.LabelSelector.ReadJSON(i); err != nil {
				i.ReportError("Field LabelSelector", err.Error())
				return false
			}
			return true
		case "maxSkew":
			s.MaxSkew = i.ReadInt32()
			return i.Error == nil
		case "topologyKey":
			s.TopologyKey = i.ReadString()
			return i.Error == nil
		case "whenUnsatisfiable":
			s.WhenUnsatisfiable = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TypedLocalObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroup.Set {
		more.More()
		j.WriteObjectField("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1TypedLocalObjectReference json value to io.Writer.
func (s IoK8sAPICoreV1TypedLocalObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1TypedLocalObjectReference json value from io.Reader.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1TypedLocalObjectReference from json stream.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroup":
			s.ApiGroup.Reset()
			if err := s.ApiGroup.ReadJSON(i); err != nil {
				i.ReportError("Field ApiGroup", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Volume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AwsElasticBlockStore.Set {
		more.More()
		j.WriteObjectField("awsElasticBlockStore")
		s.AwsElasticBlockStore.WriteJSON(j)
	}
	if s.AzureDisk.Set {
		more.More()
		j.WriteObjectField("azureDisk")
		s.AzureDisk.WriteJSON(j)
	}
	if s.AzureFile.Set {
		more.More()
		j.WriteObjectField("azureFile")
		s.AzureFile.WriteJSON(j)
	}
	if s.Cephfs.Set {
		more.More()
		j.WriteObjectField("cephfs")
		s.Cephfs.WriteJSON(j)
	}
	if s.Cinder.Set {
		more.More()
		j.WriteObjectField("cinder")
		s.Cinder.WriteJSON(j)
	}
	if s.ConfigMap.Set {
		more.More()
		j.WriteObjectField("configMap")
		s.ConfigMap.WriteJSON(j)
	}
	if s.Csi.Set {
		more.More()
		j.WriteObjectField("csi")
		s.Csi.WriteJSON(j)
	}
	if s.DownwardAPI.Set {
		more.More()
		j.WriteObjectField("downwardAPI")
		s.DownwardAPI.WriteJSON(j)
	}
	if s.EmptyDir.Set {
		more.More()
		j.WriteObjectField("emptyDir")
		s.EmptyDir.WriteJSON(j)
	}
	if s.Ephemeral.Set {
		more.More()
		j.WriteObjectField("ephemeral")
		s.Ephemeral.WriteJSON(j)
	}
	if s.Fc.Set {
		more.More()
		j.WriteObjectField("fc")
		s.Fc.WriteJSON(j)
	}
	if s.FlexVolume.Set {
		more.More()
		j.WriteObjectField("flexVolume")
		s.FlexVolume.WriteJSON(j)
	}
	if s.Flocker.Set {
		more.More()
		j.WriteObjectField("flocker")
		s.Flocker.WriteJSON(j)
	}
	if s.GcePersistentDisk.Set {
		more.More()
		j.WriteObjectField("gcePersistentDisk")
		s.GcePersistentDisk.WriteJSON(j)
	}
	if s.GitRepo.Set {
		more.More()
		j.WriteObjectField("gitRepo")
		s.GitRepo.WriteJSON(j)
	}
	if s.Glusterfs.Set {
		more.More()
		j.WriteObjectField("glusterfs")
		s.Glusterfs.WriteJSON(j)
	}
	if s.HostPath.Set {
		more.More()
		j.WriteObjectField("hostPath")
		s.HostPath.WriteJSON(j)
	}
	if s.Iscsi.Set {
		more.More()
		j.WriteObjectField("iscsi")
		s.Iscsi.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Nfs.Set {
		more.More()
		j.WriteObjectField("nfs")
		s.Nfs.WriteJSON(j)
	}
	if s.PersistentVolumeClaim.Set {
		more.More()
		j.WriteObjectField("persistentVolumeClaim")
		s.PersistentVolumeClaim.WriteJSON(j)
	}
	if s.PhotonPersistentDisk.Set {
		more.More()
		j.WriteObjectField("photonPersistentDisk")
		s.PhotonPersistentDisk.WriteJSON(j)
	}
	if s.PortworxVolume.Set {
		more.More()
		j.WriteObjectField("portworxVolume")
		s.PortworxVolume.WriteJSON(j)
	}
	if s.Projected.Set {
		more.More()
		j.WriteObjectField("projected")
		s.Projected.WriteJSON(j)
	}
	if s.Quobyte.Set {
		more.More()
		j.WriteObjectField("quobyte")
		s.Quobyte.WriteJSON(j)
	}
	if s.Rbd.Set {
		more.More()
		j.WriteObjectField("rbd")
		s.Rbd.WriteJSON(j)
	}
	if s.ScaleIO.Set {
		more.More()
		j.WriteObjectField("scaleIO")
		s.ScaleIO.WriteJSON(j)
	}
	if s.Secret.Set {
		more.More()
		j.WriteObjectField("secret")
		s.Secret.WriteJSON(j)
	}
	if s.Storageos.Set {
		more.More()
		j.WriteObjectField("storageos")
		s.Storageos.WriteJSON(j)
	}
	if s.VsphereVolume.Set {
		more.More()
		j.WriteObjectField("vsphereVolume")
		s.VsphereVolume.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Volume json value to io.Writer.
func (s IoK8sAPICoreV1Volume) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Volume json value from io.Reader.
func (s *IoK8sAPICoreV1Volume) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Volume from json stream.
func (s *IoK8sAPICoreV1Volume) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "awsElasticBlockStore":
			s.AwsElasticBlockStore.Reset()
			if err := s.AwsElasticBlockStore.ReadJSON(i); err != nil {
				i.ReportError("Field AwsElasticBlockStore", err.Error())
				return false
			}
			return true
		case "azureDisk":
			s.AzureDisk.Reset()
			if err := s.AzureDisk.ReadJSON(i); err != nil {
				i.ReportError("Field AzureDisk", err.Error())
				return false
			}
			return true
		case "azureFile":
			s.AzureFile.Reset()
			if err := s.AzureFile.ReadJSON(i); err != nil {
				i.ReportError("Field AzureFile", err.Error())
				return false
			}
			return true
		case "cephfs":
			s.Cephfs.Reset()
			if err := s.Cephfs.ReadJSON(i); err != nil {
				i.ReportError("Field Cephfs", err.Error())
				return false
			}
			return true
		case "cinder":
			s.Cinder.Reset()
			if err := s.Cinder.ReadJSON(i); err != nil {
				i.ReportError("Field Cinder", err.Error())
				return false
			}
			return true
		case "configMap":
			s.ConfigMap.Reset()
			if err := s.ConfigMap.ReadJSON(i); err != nil {
				i.ReportError("Field ConfigMap", err.Error())
				return false
			}
			return true
		case "csi":
			s.Csi.Reset()
			if err := s.Csi.ReadJSON(i); err != nil {
				i.ReportError("Field Csi", err.Error())
				return false
			}
			return true
		case "downwardAPI":
			s.DownwardAPI.Reset()
			if err := s.DownwardAPI.ReadJSON(i); err != nil {
				i.ReportError("Field DownwardAPI", err.Error())
				return false
			}
			return true
		case "emptyDir":
			s.EmptyDir.Reset()
			if err := s.EmptyDir.ReadJSON(i); err != nil {
				i.ReportError("Field EmptyDir", err.Error())
				return false
			}
			return true
		case "ephemeral":
			s.Ephemeral.Reset()
			if err := s.Ephemeral.ReadJSON(i); err != nil {
				i.ReportError("Field Ephemeral", err.Error())
				return false
			}
			return true
		case "fc":
			s.Fc.Reset()
			if err := s.Fc.ReadJSON(i); err != nil {
				i.ReportError("Field Fc", err.Error())
				return false
			}
			return true
		case "flexVolume":
			s.FlexVolume.Reset()
			if err := s.FlexVolume.ReadJSON(i); err != nil {
				i.ReportError("Field FlexVolume", err.Error())
				return false
			}
			return true
		case "flocker":
			s.Flocker.Reset()
			if err := s.Flocker.ReadJSON(i); err != nil {
				i.ReportError("Field Flocker", err.Error())
				return false
			}
			return true
		case "gcePersistentDisk":
			s.GcePersistentDisk.Reset()
			if err := s.GcePersistentDisk.ReadJSON(i); err != nil {
				i.ReportError("Field GcePersistentDisk", err.Error())
				return false
			}
			return true
		case "gitRepo":
			s.GitRepo.Reset()
			if err := s.GitRepo.ReadJSON(i); err != nil {
				i.ReportError("Field GitRepo", err.Error())
				return false
			}
			return true
		case "glusterfs":
			s.Glusterfs.Reset()
			if err := s.Glusterfs.ReadJSON(i); err != nil {
				i.ReportError("Field Glusterfs", err.Error())
				return false
			}
			return true
		case "hostPath":
			s.HostPath.Reset()
			if err := s.HostPath.ReadJSON(i); err != nil {
				i.ReportError("Field HostPath", err.Error())
				return false
			}
			return true
		case "iscsi":
			s.Iscsi.Reset()
			if err := s.Iscsi.ReadJSON(i); err != nil {
				i.ReportError("Field Iscsi", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "nfs":
			s.Nfs.Reset()
			if err := s.Nfs.ReadJSON(i); err != nil {
				i.ReportError("Field Nfs", err.Error())
				return false
			}
			return true
		case "persistentVolumeClaim":
			s.PersistentVolumeClaim.Reset()
			if err := s.PersistentVolumeClaim.ReadJSON(i); err != nil {
				i.ReportError("Field PersistentVolumeClaim", err.Error())
				return false
			}
			return true
		case "photonPersistentDisk":
			s.PhotonPersistentDisk.Reset()
			if err := s.PhotonPersistentDisk.ReadJSON(i); err != nil {
				i.ReportError("Field PhotonPersistentDisk", err.Error())
				return false
			}
			return true
		case "portworxVolume":
			s.PortworxVolume.Reset()
			if err := s.PortworxVolume.ReadJSON(i); err != nil {
				i.ReportError("Field PortworxVolume", err.Error())
				return false
			}
			return true
		case "projected":
			s.Projected.Reset()
			if err := s.Projected.ReadJSON(i); err != nil {
				i.ReportError("Field Projected", err.Error())
				return false
			}
			return true
		case "quobyte":
			s.Quobyte.Reset()
			if err := s.Quobyte.ReadJSON(i); err != nil {
				i.ReportError("Field Quobyte", err.Error())
				return false
			}
			return true
		case "rbd":
			s.Rbd.Reset()
			if err := s.Rbd.ReadJSON(i); err != nil {
				i.ReportError("Field Rbd", err.Error())
				return false
			}
			return true
		case "scaleIO":
			s.ScaleIO.Reset()
			if err := s.ScaleIO.ReadJSON(i); err != nil {
				i.ReportError("Field ScaleIO", err.Error())
				return false
			}
			return true
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(i); err != nil {
				i.ReportError("Field Secret", err.Error())
				return false
			}
			return true
		case "storageos":
			s.Storageos.Reset()
			if err := s.Storageos.ReadJSON(i); err != nil {
				i.ReportError("Field Storageos", err.Error())
				return false
			}
			return true
		case "vsphereVolume":
			s.VsphereVolume.Reset()
			if err := s.VsphereVolume.ReadJSON(i); err != nil {
				i.ReportError("Field VsphereVolume", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeDevice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("devicePath")
	j.WriteString(s.DevicePath)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1VolumeDevice json value to io.Writer.
func (s IoK8sAPICoreV1VolumeDevice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1VolumeDevice json value from io.Reader.
func (s *IoK8sAPICoreV1VolumeDevice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1VolumeDevice from json stream.
func (s *IoK8sAPICoreV1VolumeDevice) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "devicePath":
			s.DevicePath = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeMount) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("mountPath")
	j.WriteString(s.MountPath)
	if s.MountPropagation.Set {
		more.More()
		j.WriteObjectField("mountPropagation")
		s.MountPropagation.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SubPath.Set {
		more.More()
		j.WriteObjectField("subPath")
		s.SubPath.WriteJSON(j)
	}
	if s.SubPathExpr.Set {
		more.More()
		j.WriteObjectField("subPathExpr")
		s.SubPathExpr.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1VolumeMount json value to io.Writer.
func (s IoK8sAPICoreV1VolumeMount) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1VolumeMount json value from io.Reader.
func (s *IoK8sAPICoreV1VolumeMount) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1VolumeMount from json stream.
func (s *IoK8sAPICoreV1VolumeMount) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "mountPath":
			s.MountPath = i.ReadString()
			return i.Error == nil
		case "mountPropagation":
			s.MountPropagation.Reset()
			if err := s.MountPropagation.ReadJSON(i); err != nil {
				i.ReportError("Field MountPropagation", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "subPath":
			s.SubPath.Reset()
			if err := s.SubPath.ReadJSON(i); err != nil {
				i.ReportError("Field SubPath", err.Error())
				return false
			}
			return true
		case "subPathExpr":
			s.SubPathExpr.Reset()
			if err := s.SubPathExpr.ReadJSON(i); err != nil {
				i.ReportError("Field SubPathExpr", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeNodeAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Required.Set {
		more.More()
		j.WriteObjectField("required")
		s.Required.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1VolumeNodeAffinity json value to io.Writer.
func (s IoK8sAPICoreV1VolumeNodeAffinity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1VolumeNodeAffinity json value from io.Reader.
func (s *IoK8sAPICoreV1VolumeNodeAffinity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1VolumeNodeAffinity from json stream.
func (s *IoK8sAPICoreV1VolumeNodeAffinity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "required":
			s.Required.Reset()
			if err := s.Required.ReadJSON(i); err != nil {
				i.ReportError("Field Required", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ConfigMap.Set {
		more.More()
		j.WriteObjectField("configMap")
		s.ConfigMap.WriteJSON(j)
	}
	if s.DownwardAPI.Set {
		more.More()
		j.WriteObjectField("downwardAPI")
		s.DownwardAPI.WriteJSON(j)
	}
	if s.Secret.Set {
		more.More()
		j.WriteObjectField("secret")
		s.Secret.WriteJSON(j)
	}
	if s.ServiceAccountToken.Set {
		more.More()
		j.WriteObjectField("serviceAccountToken")
		s.ServiceAccountToken.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1VolumeProjection json value to io.Writer.
func (s IoK8sAPICoreV1VolumeProjection) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1VolumeProjection json value from io.Reader.
func (s *IoK8sAPICoreV1VolumeProjection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1VolumeProjection from json stream.
func (s *IoK8sAPICoreV1VolumeProjection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "configMap":
			s.ConfigMap.Reset()
			if err := s.ConfigMap.ReadJSON(i); err != nil {
				i.ReportError("Field ConfigMap", err.Error())
				return false
			}
			return true
		case "downwardAPI":
			s.DownwardAPI.Reset()
			if err := s.DownwardAPI.ReadJSON(i); err != nil {
				i.ReportError("Field DownwardAPI", err.Error())
				return false
			}
			return true
		case "secret":
			s.Secret.Reset()
			if err := s.Secret.ReadJSON(i); err != nil {
				i.ReportError("Field Secret", err.Error())
				return false
			}
			return true
		case "serviceAccountToken":
			s.ServiceAccountToken.Reset()
			if err := s.ServiceAccountToken.ReadJSON(i); err != nil {
				i.ReportError("Field ServiceAccountToken", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.FsType.Set {
		more.More()
		j.WriteObjectField("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.StoragePolicyID.Set {
		more.More()
		j.WriteObjectField("storagePolicyID")
		s.StoragePolicyID.WriteJSON(j)
	}
	if s.StoragePolicyName.Set {
		more.More()
		j.WriteObjectField("storagePolicyName")
		s.StoragePolicyName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("volumePath")
	j.WriteString(s.VolumePath)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1VsphereVirtualDiskVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1VsphereVirtualDiskVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1VsphereVirtualDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "storagePolicyID":
			s.StoragePolicyID.Reset()
			if err := s.StoragePolicyID.ReadJSON(i); err != nil {
				i.ReportError("Field StoragePolicyID", err.Error())
				return false
			}
			return true
		case "storagePolicyName":
			s.StoragePolicyName.Reset()
			if err := s.StoragePolicyName.ReadJSON(i); err != nil {
				i.ReportError("Field StoragePolicyName", err.Error())
				return false
			}
			return true
		case "volumePath":
			s.VolumePath = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1WeightedPodAffinityTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("podAffinityTerm")
	s.PodAffinityTerm.WriteJSON(j)
	more.More()
	j.WriteObjectField("weight")
	j.WriteInt32(s.Weight)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1WeightedPodAffinityTerm json value to io.Writer.
func (s IoK8sAPICoreV1WeightedPodAffinityTerm) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1WeightedPodAffinityTerm json value from io.Reader.
func (s *IoK8sAPICoreV1WeightedPodAffinityTerm) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1WeightedPodAffinityTerm from json stream.
func (s *IoK8sAPICoreV1WeightedPodAffinityTerm) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "podAffinityTerm":
			if err := s.PodAffinityTerm.ReadJSON(i); err != nil {
				i.ReportError("Field PodAffinityTerm", err.Error())
				return false
			}
			return true
		case "weight":
			s.Weight = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1WindowsSecurityContextOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.GmsaCredentialSpec.Set {
		more.More()
		j.WriteObjectField("gmsaCredentialSpec")
		s.GmsaCredentialSpec.WriteJSON(j)
	}
	if s.GmsaCredentialSpecName.Set {
		more.More()
		j.WriteObjectField("gmsaCredentialSpecName")
		s.GmsaCredentialSpecName.WriteJSON(j)
	}
	if s.HostProcess.Set {
		more.More()
		j.WriteObjectField("hostProcess")
		s.HostProcess.WriteJSON(j)
	}
	if s.RunAsUserName.Set {
		more.More()
		j.WriteObjectField("runAsUserName")
		s.RunAsUserName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1WindowsSecurityContextOptions json value to io.Writer.
func (s IoK8sAPICoreV1WindowsSecurityContextOptions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1WindowsSecurityContextOptions json value from io.Reader.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1WindowsSecurityContextOptions from json stream.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "gmsaCredentialSpec":
			s.GmsaCredentialSpec.Reset()
			if err := s.GmsaCredentialSpec.ReadJSON(i); err != nil {
				i.ReportError("Field GmsaCredentialSpec", err.Error())
				return false
			}
			return true
		case "gmsaCredentialSpecName":
			s.GmsaCredentialSpecName.Reset()
			if err := s.GmsaCredentialSpecName.ReadJSON(i); err != nil {
				i.ReportError("Field GmsaCredentialSpecName", err.Error())
				return false
			}
			return true
		case "hostProcess":
			s.HostProcess.Reset()
			if err := s.HostProcess.ReadJSON(i); err != nil {
				i.ReportError("Field HostProcess", err.Error())
				return false
			}
			return true
		case "runAsUserName":
			s.RunAsUserName.Reset()
			if err := s.RunAsUserName.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsUserName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1Endpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addresses")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Addresses {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Conditions.Set {
		more.More()
		j.WriteObjectField("conditions")
		s.Conditions.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "deprecatedTopology".
	if s.Hints.Set {
		more.More()
		j.WriteObjectField("hints")
		s.Hints.WriteJSON(j)
	}
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	if s.TargetRef.Set {
		more.More()
		j.WriteObjectField("targetRef")
		s.TargetRef.WriteJSON(j)
	}
	if s.Zone.Set {
		more.More()
		j.WriteObjectField("zone")
		s.Zone.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1Endpoint json value to io.Writer.
func (s IoK8sAPIDiscoveryV1Endpoint) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1Endpoint json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1Endpoint) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1Endpoint from json stream.
func (s *IoK8sAPIDiscoveryV1Endpoint) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addresses":
			// Unsupported kind "array" for field "Addresses".
			i.Skip()
			return true
		case "conditions":
			s.Conditions.Reset()
			if err := s.Conditions.ReadJSON(i); err != nil {
				i.ReportError("Field Conditions", err.Error())
				return false
			}
			return true
		case "deprecatedTopology":
			// Unsupported kind "pointer" for field "DeprecatedTopology".
			i.Skip()
			return true
		case "hints":
			s.Hints.Reset()
			if err := s.Hints.ReadJSON(i); err != nil {
				i.ReportError("Field Hints", err.Error())
				return false
			}
			return true
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				i.ReportError("Field Hostname", err.Error())
				return false
			}
			return true
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				i.ReportError("Field NodeName", err.Error())
				return false
			}
			return true
		case "targetRef":
			s.TargetRef.Reset()
			if err := s.TargetRef.ReadJSON(i); err != nil {
				i.ReportError("Field TargetRef", err.Error())
				return false
			}
			return true
		case "zone":
			s.Zone.Reset()
			if err := s.Zone.ReadJSON(i); err != nil {
				i.ReportError("Field Zone", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointConditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ready.Set {
		more.More()
		j.WriteObjectField("ready")
		s.Ready.WriteJSON(j)
	}
	if s.Serving.Set {
		more.More()
		j.WriteObjectField("serving")
		s.Serving.WriteJSON(j)
	}
	if s.Terminating.Set {
		more.More()
		j.WriteObjectField("terminating")
		s.Terminating.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1EndpointConditions json value to io.Writer.
func (s IoK8sAPIDiscoveryV1EndpointConditions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1EndpointConditions json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointConditions from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ready":
			s.Ready.Reset()
			if err := s.Ready.ReadJSON(i); err != nil {
				i.ReportError("Field Ready", err.Error())
				return false
			}
			return true
		case "serving":
			s.Serving.Reset()
			if err := s.Serving.ReadJSON(i); err != nil {
				i.ReportError("Field Serving", err.Error())
				return false
			}
			return true
		case "terminating":
			s.Terminating.Reset()
			if err := s.Terminating.ReadJSON(i); err != nil {
				i.ReportError("Field Terminating", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointHints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ForZones != nil {
		more.More()
		j.WriteObjectField("forZones")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ForZones {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1EndpointHints json value to io.Writer.
func (s IoK8sAPIDiscoveryV1EndpointHints) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1EndpointHints json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1EndpointHints) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointHints from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointHints) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "forZones":
			// Unsupported kind "array" for field "ForZones".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1EndpointPort json value to io.Writer.
func (s IoK8sAPIDiscoveryV1EndpointPort) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1EndpointPort json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1EndpointPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointPort from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				i.ReportError("Field AppProtocol", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				i.ReportError("Field Port", err.Error())
				return false
			}
			return true
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointSlice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addressType")
	j.WriteString(s.AddressType)
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("endpoints")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Endpoints {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1EndpointSlice json value to io.Writer.
func (s IoK8sAPIDiscoveryV1EndpointSlice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1EndpointSlice json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointSlice from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addressType":
			s.AddressType = i.ReadString()
			return i.Error == nil
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "endpoints":
			// Unsupported kind "array" for field "Endpoints".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "ports":
			// Unsupported kind "array" for field "Ports".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointSliceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1EndpointSliceList json value to io.Writer.
func (s IoK8sAPIDiscoveryV1EndpointSliceList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1EndpointSliceList json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointSliceList from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1ForZone) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1ForZone json value to io.Writer.
func (s IoK8sAPIDiscoveryV1ForZone) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1ForZone json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1ForZone) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1ForZone from json stream.
func (s *IoK8sAPIDiscoveryV1ForZone) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1Endpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addresses")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Addresses {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Conditions.Set {
		more.More()
		j.WriteObjectField("conditions")
		s.Conditions.WriteJSON(j)
	}
	if s.Hints.Set {
		more.More()
		j.WriteObjectField("hints")
		s.Hints.WriteJSON(j)
	}
	if s.Hostname.Set {
		more.More()
		j.WriteObjectField("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.NodeName.Set {
		more.More()
		j.WriteObjectField("nodeName")
		s.NodeName.WriteJSON(j)
	}
	if s.TargetRef.Set {
		more.More()
		j.WriteObjectField("targetRef")
		s.TargetRef.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "topology".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1Endpoint json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1Endpoint) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1Endpoint json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1Endpoint from json stream.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addresses":
			// Unsupported kind "array" for field "Addresses".
			i.Skip()
			return true
		case "conditions":
			s.Conditions.Reset()
			if err := s.Conditions.ReadJSON(i); err != nil {
				i.ReportError("Field Conditions", err.Error())
				return false
			}
			return true
		case "hints":
			s.Hints.Reset()
			if err := s.Hints.ReadJSON(i); err != nil {
				i.ReportError("Field Hints", err.Error())
				return false
			}
			return true
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				i.ReportError("Field Hostname", err.Error())
				return false
			}
			return true
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				i.ReportError("Field NodeName", err.Error())
				return false
			}
			return true
		case "targetRef":
			s.TargetRef.Reset()
			if err := s.TargetRef.ReadJSON(i); err != nil {
				i.ReportError("Field TargetRef", err.Error())
				return false
			}
			return true
		case "topology":
			// Unsupported kind "pointer" for field "Topology".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointConditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ready.Set {
		more.More()
		j.WriteObjectField("ready")
		s.Ready.WriteJSON(j)
	}
	if s.Serving.Set {
		more.More()
		j.WriteObjectField("serving")
		s.Serving.WriteJSON(j)
	}
	if s.Terminating.Set {
		more.More()
		j.WriteObjectField("terminating")
		s.Terminating.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1EndpointConditions json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1EndpointConditions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1EndpointConditions json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointConditions from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ready":
			s.Ready.Reset()
			if err := s.Ready.ReadJSON(i); err != nil {
				i.ReportError("Field Ready", err.Error())
				return false
			}
			return true
		case "serving":
			s.Serving.Reset()
			if err := s.Serving.ReadJSON(i); err != nil {
				i.ReportError("Field Serving", err.Error())
				return false
			}
			return true
		case "terminating":
			s.Terminating.Reset()
			if err := s.Terminating.ReadJSON(i); err != nil {
				i.ReportError("Field Terminating", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointHints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ForZones != nil {
		more.More()
		j.WriteObjectField("forZones")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ForZones {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1EndpointHints json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1EndpointHints) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1EndpointHints json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1EndpointHints) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointHints from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointHints) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "forZones":
			// Unsupported kind "array" for field "ForZones".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AppProtocol.Set {
		more.More()
		j.WriteObjectField("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1EndpointPort json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1EndpointPort) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1EndpointPort json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointPort from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				i.ReportError("Field AppProtocol", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				i.ReportError("Field Port", err.Error())
				return false
			}
			return true
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointSlice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("addressType")
	j.WriteString(s.AddressType)
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("endpoints")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Endpoints {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1EndpointSlice json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1EndpointSlice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1EndpointSlice json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointSlice from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addressType":
			s.AddressType = i.ReadString()
			return i.Error == nil
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "endpoints":
			// Unsupported kind "array" for field "Endpoints".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "ports":
			// Unsupported kind "array" for field "Ports".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointSliceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1EndpointSliceList json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1EndpointSliceList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1EndpointSliceList json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointSliceList from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1ForZone) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1ForZone json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1ForZone) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1ForZone json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1ForZone) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1ForZone from json stream.
func (s *IoK8sAPIDiscoveryV1beta1ForZone) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Action.Set {
		more.More()
		j.WriteObjectField("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.DeprecatedCount.Set {
		more.More()
		j.WriteObjectField("deprecatedCount")
		s.DeprecatedCount.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "deprecatedFirstTimestamp".
	// Unsupported kind "pointer" for field "deprecatedLastTimestamp".
	if s.DeprecatedSource.Set {
		more.More()
		j.WriteObjectField("deprecatedSource")
		s.DeprecatedSource.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "eventTime".
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Note.Set {
		more.More()
		j.WriteObjectField("note")
		s.Note.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Regarding.Set {
		more.More()
		j.WriteObjectField("regarding")
		s.Regarding.WriteJSON(j)
	}
	if s.Related.Set {
		more.More()
		j.WriteObjectField("related")
		s.Related.WriteJSON(j)
	}
	if s.ReportingController.Set {
		more.More()
		j.WriteObjectField("reportingController")
		s.ReportingController.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		more.More()
		j.WriteObjectField("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	if s.Series.Set {
		more.More()
		j.WriteObjectField("series")
		s.Series.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1Event json value to io.Writer.
func (s IoK8sAPIEventsV1Event) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1Event json value from io.Reader.
func (s *IoK8sAPIEventsV1Event) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1Event from json stream.
func (s *IoK8sAPIEventsV1Event) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(i); err != nil {
				i.ReportError("Field Action", err.Error())
				return false
			}
			return true
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "deprecatedCount":
			s.DeprecatedCount.Reset()
			if err := s.DeprecatedCount.ReadJSON(i); err != nil {
				i.ReportError("Field DeprecatedCount", err.Error())
				return false
			}
			return true
		case "deprecatedFirstTimestamp":
			// Unsupported kind "pointer" for field "DeprecatedFirstTimestamp".
			i.Skip()
			return true
		case "deprecatedLastTimestamp":
			// Unsupported kind "pointer" for field "DeprecatedLastTimestamp".
			i.Skip()
			return true
		case "deprecatedSource":
			s.DeprecatedSource.Reset()
			if err := s.DeprecatedSource.ReadJSON(i); err != nil {
				i.ReportError("Field DeprecatedSource", err.Error())
				return false
			}
			return true
		case "eventTime":
			// Unsupported kind "alias" for field "EventTime".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(i); err != nil {
				i.ReportError("Field Note", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "regarding":
			s.Regarding.Reset()
			if err := s.Regarding.ReadJSON(i); err != nil {
				i.ReportError("Field Regarding", err.Error())
				return false
			}
			return true
		case "related":
			s.Related.Reset()
			if err := s.Related.ReadJSON(i); err != nil {
				i.ReportError("Field Related", err.Error())
				return false
			}
			return true
		case "reportingController":
			s.ReportingController.Reset()
			if err := s.ReportingController.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingController", err.Error())
				return false
			}
			return true
		case "reportingInstance":
			s.ReportingInstance.Reset()
			if err := s.ReportingInstance.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingInstance", err.Error())
				return false
			}
			return true
		case "series":
			s.Series.Reset()
			if err := s.Series.ReadJSON(i); err != nil {
				i.ReportError("Field Series", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1EventList json value to io.Writer.
func (s IoK8sAPIEventsV1EventList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1EventList json value from io.Reader.
func (s *IoK8sAPIEventsV1EventList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1EventList from json stream.
func (s *IoK8sAPIEventsV1EventList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("count")
	j.WriteInt32(s.Count)
	// Unsupported kind "alias" for field "lastObservedTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1EventSeries json value to io.Writer.
func (s IoK8sAPIEventsV1EventSeries) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1EventSeries json value from io.Reader.
func (s *IoK8sAPIEventsV1EventSeries) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1EventSeries from json stream.
func (s *IoK8sAPIEventsV1EventSeries) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "count":
			s.Count = i.ReadInt32()
			return i.Error == nil
		case "lastObservedTime":
			// Unsupported kind "alias" for field "LastObservedTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Action.Set {
		more.More()
		j.WriteObjectField("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.DeprecatedCount.Set {
		more.More()
		j.WriteObjectField("deprecatedCount")
		s.DeprecatedCount.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "deprecatedFirstTimestamp".
	// Unsupported kind "pointer" for field "deprecatedLastTimestamp".
	if s.DeprecatedSource.Set {
		more.More()
		j.WriteObjectField("deprecatedSource")
		s.DeprecatedSource.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "eventTime".
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Note.Set {
		more.More()
		j.WriteObjectField("note")
		s.Note.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Regarding.Set {
		more.More()
		j.WriteObjectField("regarding")
		s.Regarding.WriteJSON(j)
	}
	if s.Related.Set {
		more.More()
		j.WriteObjectField("related")
		s.Related.WriteJSON(j)
	}
	if s.ReportingController.Set {
		more.More()
		j.WriteObjectField("reportingController")
		s.ReportingController.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		more.More()
		j.WriteObjectField("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	if s.Series.Set {
		more.More()
		j.WriteObjectField("series")
		s.Series.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1beta1Event json value to io.Writer.
func (s IoK8sAPIEventsV1beta1Event) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1beta1Event json value from io.Reader.
func (s *IoK8sAPIEventsV1beta1Event) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1beta1Event from json stream.
func (s *IoK8sAPIEventsV1beta1Event) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(i); err != nil {
				i.ReportError("Field Action", err.Error())
				return false
			}
			return true
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "deprecatedCount":
			s.DeprecatedCount.Reset()
			if err := s.DeprecatedCount.ReadJSON(i); err != nil {
				i.ReportError("Field DeprecatedCount", err.Error())
				return false
			}
			return true
		case "deprecatedFirstTimestamp":
			// Unsupported kind "pointer" for field "DeprecatedFirstTimestamp".
			i.Skip()
			return true
		case "deprecatedLastTimestamp":
			// Unsupported kind "pointer" for field "DeprecatedLastTimestamp".
			i.Skip()
			return true
		case "deprecatedSource":
			s.DeprecatedSource.Reset()
			if err := s.DeprecatedSource.ReadJSON(i); err != nil {
				i.ReportError("Field DeprecatedSource", err.Error())
				return false
			}
			return true
		case "eventTime":
			// Unsupported kind "alias" for field "EventTime".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(i); err != nil {
				i.ReportError("Field Note", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "regarding":
			s.Regarding.Reset()
			if err := s.Regarding.ReadJSON(i); err != nil {
				i.ReportError("Field Regarding", err.Error())
				return false
			}
			return true
		case "related":
			s.Related.Reset()
			if err := s.Related.ReadJSON(i); err != nil {
				i.ReportError("Field Related", err.Error())
				return false
			}
			return true
		case "reportingController":
			s.ReportingController.Reset()
			if err := s.ReportingController.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingController", err.Error())
				return false
			}
			return true
		case "reportingInstance":
			s.ReportingInstance.Reset()
			if err := s.ReportingInstance.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingInstance", err.Error())
				return false
			}
			return true
		case "series":
			s.Series.Reset()
			if err := s.Series.ReadJSON(i); err != nil {
				i.ReportError("Field Series", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1beta1EventList json value to io.Writer.
func (s IoK8sAPIEventsV1beta1EventList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1beta1EventList json value from io.Reader.
func (s *IoK8sAPIEventsV1beta1EventList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1beta1EventList from json stream.
func (s *IoK8sAPIEventsV1beta1EventList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("count")
	j.WriteInt32(s.Count)
	// Unsupported kind "alias" for field "lastObservedTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1beta1EventSeries json value to io.Writer.
func (s IoK8sAPIEventsV1beta1EventSeries) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1beta1EventSeries json value from io.Reader.
func (s *IoK8sAPIEventsV1beta1EventSeries) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1beta1EventSeries from json stream.
func (s *IoK8sAPIEventsV1beta1EventSeries) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "count":
			s.Count = i.ReadInt32()
			return i.Error == nil
		case "lastObservedTime":
			// Unsupported kind "alias" for field "LastObservedTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchema) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowSchema json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchema) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowSchema json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchema from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowSchemaList json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowSchemaList json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DistinguisherMethod.Set {
		more.More()
		j.WriteObjectField("distinguisherMethod")
		s.DistinguisherMethod.WriteJSON(j)
	}
	if s.MatchingPrecedence.Set {
		more.More()
		j.WriteObjectField("matchingPrecedence")
		s.MatchingPrecedence.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("priorityLevelConfiguration")
	s.PriorityLevelConfiguration.WriteJSON(j)
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "distinguisherMethod":
			s.DistinguisherMethod.Reset()
			if err := s.DistinguisherMethod.ReadJSON(i); err != nil {
				i.ReportError("Field DistinguisherMethod", err.Error())
				return false
			}
			return true
		case "matchingPrecedence":
			s.MatchingPrecedence.Reset()
			if err := s.MatchingPrecedence.ReadJSON(i); err != nil {
				i.ReportError("Field MatchingPrecedence", err.Error())
				return false
			}
			return true
		case "priorityLevelConfiguration":
			if err := s.PriorityLevelConfiguration.ReadJSON(i); err != nil {
				i.ReportError("Field PriorityLevelConfiguration", err.Error())
				return false
			}
			return true
		case "rules":
			// Unsupported kind "array" for field "Rules".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1GroupSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1GroupSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1GroupSubject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1GroupSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1GroupSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1GroupSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1GroupSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1LimitResponse) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Queuing.Set {
		more.More()
		j.WriteObjectField("queuing")
		s.Queuing.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1LimitResponse json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1LimitResponse) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1LimitResponse json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1LimitResponse) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1LimitResponse from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1LimitResponse) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "queuing":
			s.Queuing.Reset()
			if err := s.Queuing.ReadJSON(i); err != nil {
				i.ReportError("Field Queuing", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AssuredConcurrencyShares.Set {
		more.More()
		j.WriteObjectField("assuredConcurrencyShares")
		s.AssuredConcurrencyShares.WriteJSON(j)
	}
	if s.LimitResponse.Set {
		more.More()
		j.WriteObjectField("limitResponse")
		s.LimitResponse.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "assuredConcurrencyShares":
			s.AssuredConcurrencyShares.Reset()
			if err := s.AssuredConcurrencyShares.ReadJSON(i); err != nil {
				i.ReportError("Field AssuredConcurrencyShares", err.Error())
				return false
			}
			return true
		case "limitResponse":
			s.LimitResponse.Reset()
			if err := s.LimitResponse.ReadJSON(i); err != nil {
				i.ReportError("Field LimitResponse", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("nonResourceURLs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NonResourceURLs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceURLs":
			// Unsupported kind "array" for field "NonResourceURLs".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceRules != nil {
		more.More()
		j.WriteObjectField("nonResourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceRules != nil {
		more.More()
		j.WriteObjectField("resourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("subjects")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Subjects {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceRules":
			// Unsupported kind "array" for field "NonResourceRules".
			i.Skip()
			return true
		case "resourceRules":
			// Unsupported kind "array" for field "ResourceRules".
			i.Skip()
			return true
		case "subjects":
			// Unsupported kind "array" for field "Subjects".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limited.Set {
		more.More()
		j.WriteObjectField("limited")
		s.Limited.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limited":
			s.Limited.Reset()
			if err := s.Limited.ReadJSON(i); err != nil {
				i.ReportError("Field Limited", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HandSize.Set {
		more.More()
		j.WriteObjectField("handSize")
		s.HandSize.WriteJSON(j)
	}
	if s.QueueLengthLimit.Set {
		more.More()
		j.WriteObjectField("queueLengthLimit")
		s.QueueLengthLimit.WriteJSON(j)
	}
	if s.Queues.Set {
		more.More()
		j.WriteObjectField("queues")
		s.Queues.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1QueuingConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1QueuingConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1QueuingConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "handSize":
			s.HandSize.Reset()
			if err := s.HandSize.ReadJSON(i); err != nil {
				i.ReportError("Field HandSize", err.Error())
				return false
			}
			return true
		case "queueLengthLimit":
			s.QueueLengthLimit.Reset()
			if err := s.QueueLengthLimit.ReadJSON(i); err != nil {
				i.ReportError("Field QueueLengthLimit", err.Error())
				return false
			}
			return true
		case "queues":
			s.Queues.Reset()
			if err := s.Queues.ReadJSON(i); err != nil {
				i.ReportError("Field Queues", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiGroups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ApiGroups {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.ClusterScope.Set {
		more.More()
		j.WriteObjectField("clusterScope")
		s.ClusterScope.WriteJSON(j)
	}
	if s.Namespaces != nil {
		more.More()
		j.WriteObjectField("namespaces")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Namespaces {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("resources")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Resources {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroups":
			// Unsupported kind "array" for field "ApiGroups".
			i.Skip()
			return true
		case "clusterScope":
			s.ClusterScope.Reset()
			if err := s.ClusterScope.ReadJSON(i); err != nil {
				i.ReportError("Field ClusterScope", err.Error())
				return false
			}
			return true
		case "namespaces":
			// Unsupported kind "array" for field "Namespaces".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "array" for field "Resources".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	if s.ServiceAccount.Set {
		more.More()
		j.WriteObjectField("serviceAccount")
		s.ServiceAccount.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1Subject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1Subject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1Subject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1Subject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "serviceAccount":
			s.ServiceAccount.Reset()
			if err := s.ServiceAccount.ReadJSON(i); err != nil {
				i.ReportError("Field ServiceAccount", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1UserSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1UserSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1UserSubject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1UserSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1UserSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1UserSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1UserSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchema) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowSchema json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchema) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowSchema json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchema from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowSchemaList json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowSchemaList json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DistinguisherMethod.Set {
		more.More()
		j.WriteObjectField("distinguisherMethod")
		s.DistinguisherMethod.WriteJSON(j)
	}
	if s.MatchingPrecedence.Set {
		more.More()
		j.WriteObjectField("matchingPrecedence")
		s.MatchingPrecedence.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("priorityLevelConfiguration")
	s.PriorityLevelConfiguration.WriteJSON(j)
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "distinguisherMethod":
			s.DistinguisherMethod.Reset()
			if err := s.DistinguisherMethod.ReadJSON(i); err != nil {
				i.ReportError("Field DistinguisherMethod", err.Error())
				return false
			}
			return true
		case "matchingPrecedence":
			s.MatchingPrecedence.Reset()
			if err := s.MatchingPrecedence.ReadJSON(i); err != nil {
				i.ReportError("Field MatchingPrecedence", err.Error())
				return false
			}
			return true
		case "priorityLevelConfiguration":
			if err := s.PriorityLevelConfiguration.ReadJSON(i); err != nil {
				i.ReportError("Field PriorityLevelConfiguration", err.Error())
				return false
			}
			return true
		case "rules":
			// Unsupported kind "array" for field "Rules".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2GroupSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2GroupSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2GroupSubject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2GroupSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2GroupSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2GroupSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2GroupSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2LimitResponse) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Queuing.Set {
		more.More()
		j.WriteObjectField("queuing")
		s.Queuing.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2LimitResponse json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2LimitResponse) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2LimitResponse json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2LimitResponse) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2LimitResponse from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2LimitResponse) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "queuing":
			s.Queuing.Reset()
			if err := s.Queuing.ReadJSON(i); err != nil {
				i.ReportError("Field Queuing", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AssuredConcurrencyShares.Set {
		more.More()
		j.WriteObjectField("assuredConcurrencyShares")
		s.AssuredConcurrencyShares.WriteJSON(j)
	}
	if s.LimitResponse.Set {
		more.More()
		j.WriteObjectField("limitResponse")
		s.LimitResponse.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "assuredConcurrencyShares":
			s.AssuredConcurrencyShares.Reset()
			if err := s.AssuredConcurrencyShares.ReadJSON(i); err != nil {
				i.ReportError("Field AssuredConcurrencyShares", err.Error())
				return false
			}
			return true
		case "limitResponse":
			s.LimitResponse.Reset()
			if err := s.LimitResponse.ReadJSON(i); err != nil {
				i.ReportError("Field LimitResponse", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("nonResourceURLs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.NonResourceURLs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceURLs":
			// Unsupported kind "array" for field "NonResourceURLs".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.NonResourceRules != nil {
		more.More()
		j.WriteObjectField("nonResourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceRules != nil {
		more.More()
		j.WriteObjectField("resourceRules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceRules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("subjects")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Subjects {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceRules":
			// Unsupported kind "array" for field "NonResourceRules".
			i.Skip()
			return true
		case "resourceRules":
			// Unsupported kind "array" for field "ResourceRules".
			i.Skip()
			return true
		case "subjects":
			// Unsupported kind "array" for field "Subjects".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limited.Set {
		more.More()
		j.WriteObjectField("limited")
		s.Limited.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limited":
			s.Limited.Reset()
			if err := s.Limited.ReadJSON(i); err != nil {
				i.ReportError("Field Limited", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HandSize.Set {
		more.More()
		j.WriteObjectField("handSize")
		s.HandSize.WriteJSON(j)
	}
	if s.QueueLengthLimit.Set {
		more.More()
		j.WriteObjectField("queueLengthLimit")
		s.QueueLengthLimit.WriteJSON(j)
	}
	if s.Queues.Set {
		more.More()
		j.WriteObjectField("queues")
		s.Queues.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2QueuingConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2QueuingConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2QueuingConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "handSize":
			s.HandSize.Reset()
			if err := s.HandSize.ReadJSON(i); err != nil {
				i.ReportError("Field HandSize", err.Error())
				return false
			}
			return true
		case "queueLengthLimit":
			s.QueueLengthLimit.Reset()
			if err := s.QueueLengthLimit.ReadJSON(i); err != nil {
				i.ReportError("Field QueueLengthLimit", err.Error())
				return false
			}
			return true
		case "queues":
			s.Queues.Reset()
			if err := s.Queues.ReadJSON(i); err != nil {
				i.ReportError("Field Queues", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiGroups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ApiGroups {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.ClusterScope.Set {
		more.More()
		j.WriteObjectField("clusterScope")
		s.ClusterScope.WriteJSON(j)
	}
	if s.Namespaces != nil {
		more.More()
		j.WriteObjectField("namespaces")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Namespaces {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("resources")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Resources {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroups":
			// Unsupported kind "array" for field "ApiGroups".
			i.Skip()
			return true
		case "clusterScope":
			s.ClusterScope.Reset()
			if err := s.ClusterScope.ReadJSON(i); err != nil {
				i.ReportError("Field ClusterScope", err.Error())
				return false
			}
			return true
		case "namespaces":
			// Unsupported kind "array" for field "Namespaces".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "array" for field "Resources".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	if s.ServiceAccount.Set {
		more.More()
		j.WriteObjectField("serviceAccount")
		s.ServiceAccount.WriteJSON(j)
	}
	if s.User.Set {
		more.More()
		j.WriteObjectField("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2Subject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2Subject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2Subject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2Subject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "serviceAccount":
			s.ServiceAccount.Reset()
			if err := s.ServiceAccount.ReadJSON(i); err != nil {
				i.ReportError("Field ServiceAccount", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2UserSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2UserSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2UserSubject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2UserSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2UserSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2UserSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2UserSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1HTTPIngressPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("backend")
	s.Backend.WriteJSON(j)
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("pathType")
	j.WriteString(s.PathType)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1HTTPIngressPath json value to io.Writer.
func (s IoK8sAPINetworkingV1HTTPIngressPath) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1HTTPIngressPath json value from io.Reader.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1HTTPIngressPath from json stream.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "backend":
			if err := s.Backend.ReadJSON(i); err != nil {
				i.ReportError("Field Backend", err.Error())
				return false
			}
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "pathType":
			s.PathType = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1HTTPIngressRuleValue) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("paths")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Paths {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1HTTPIngressRuleValue json value to io.Writer.
func (s IoK8sAPINetworkingV1HTTPIngressRuleValue) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1HTTPIngressRuleValue json value from io.Reader.
func (s *IoK8sAPINetworkingV1HTTPIngressRuleValue) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1HTTPIngressRuleValue from json stream.
func (s *IoK8sAPINetworkingV1HTTPIngressRuleValue) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "paths":
			// Unsupported kind "array" for field "Paths".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IPBlock) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("cidr")
	j.WriteString(s.Cidr)
	if s.Except != nil {
		more.More()
		j.WriteObjectField("except")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Except {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IPBlock json value to io.Writer.
func (s IoK8sAPINetworkingV1IPBlock) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IPBlock json value from io.Reader.
func (s *IoK8sAPINetworkingV1IPBlock) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IPBlock from json stream.
func (s *IoK8sAPINetworkingV1IPBlock) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cidr":
			s.Cidr = i.ReadString()
			return i.Error == nil
		case "except":
			// Unsupported kind "array" for field "Except".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1Ingress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1Ingress json value to io.Writer.
func (s IoK8sAPINetworkingV1Ingress) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1Ingress json value from io.Reader.
func (s *IoK8sAPINetworkingV1Ingress) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1Ingress from json stream.
func (s *IoK8sAPINetworkingV1Ingress) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressBackend) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Resource.Set {
		more.More()
		j.WriteObjectField("resource")
		s.Resource.WriteJSON(j)
	}
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressBackend json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressBackend) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressBackend json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressBackend) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressBackend from json stream.
func (s *IoK8sAPINetworkingV1IngressBackend) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				i.ReportError("Field Resource", err.Error())
				return false
			}
			return true
		case "service":
			s.Service.Reset()
			if err := s.Service.ReadJSON(i); err != nil {
				i.ReportError("Field Service", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressClass json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressClass) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressClass json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClass from json stream.
func (s *IoK8sAPINetworkingV1IngressClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressClassList json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressClassList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressClassList json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassList from json stream.
func (s *IoK8sAPINetworkingV1IngressClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassParametersReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroup.Set {
		more.More()
		j.WriteObjectField("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Scope.Set {
		more.More()
		j.WriteObjectField("scope")
		s.Scope.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressClassParametersReference json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressClassParametersReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressClassParametersReference json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassParametersReference from json stream.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroup":
			s.ApiGroup.Reset()
			if err := s.ApiGroup.ReadJSON(i); err != nil {
				i.ReportError("Field ApiGroup", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		case "scope":
			s.Scope.Reset()
			if err := s.Scope.ReadJSON(i); err != nil {
				i.ReportError("Field Scope", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Controller.Set {
		more.More()
		j.WriteObjectField("controller")
		s.Controller.WriteJSON(j)
	}
	if s.Parameters.Set {
		more.More()
		j.WriteObjectField("parameters")
		s.Parameters.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressClassSpec json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressClassSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressClassSpec json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressClassSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassSpec from json stream.
func (s *IoK8sAPINetworkingV1IngressClassSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "controller":
			s.Controller.Reset()
			if err := s.Controller.ReadJSON(i); err != nil {
				i.ReportError("Field Controller", err.Error())
				return false
			}
			return true
		case "parameters":
			s.Parameters.Reset()
			if err := s.Parameters.ReadJSON(i); err != nil {
				i.ReportError("Field Parameters", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressList json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressList json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressList from json stream.
func (s *IoK8sAPINetworkingV1IngressList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.HTTP.Set {
		more.More()
		j.WriteObjectField("http")
		s.HTTP.WriteJSON(j)
	}
	if s.Host.Set {
		more.More()
		j.WriteObjectField("host")
		s.Host.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressRule json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressRule) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressRule json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressRule from json stream.
func (s *IoK8sAPINetworkingV1IngressRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "http":
			s.HTTP.Reset()
			if err := s.HTTP.ReadJSON(i); err != nil {
				i.ReportError("Field HTTP", err.Error())
				return false
			}
			return true
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				i.ReportError("Field Host", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressServiceBackend) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressServiceBackend json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressServiceBackend) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressServiceBackend json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressServiceBackend) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressServiceBackend from json stream.
func (s *IoK8sAPINetworkingV1IngressServiceBackend) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				i.ReportError("Field Port", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DefaultBackend.Set {
		more.More()
		j.WriteObjectField("defaultBackend")
		s.DefaultBackend.WriteJSON(j)
	}
	if s.IngressClassName.Set {
		more.More()
		j.WriteObjectField("ingressClassName")
		s.IngressClassName.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.TLS != nil {
		more.More()
		j.WriteObjectField("tls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TLS {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressSpec json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressSpec json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressSpec from json stream.
func (s *IoK8sAPINetworkingV1IngressSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "defaultBackend":
			s.DefaultBackend.Reset()
			if err := s.DefaultBackend.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultBackend", err.Error())
				return false
			}
			return true
		case "ingressClassName":
			s.IngressClassName.Reset()
			if err := s.IngressClassName.ReadJSON(i); err != nil {
				i.ReportError("Field IngressClassName", err.Error())
				return false
			}
			return true
		case "rules":
			// Unsupported kind "array" for field "Rules".
			i.Skip()
			return true
		case "tls":
			// Unsupported kind "array" for field "TLS".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LoadBalancer.Set {
		more.More()
		j.WriteObjectField("loadBalancer")
		s.LoadBalancer.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressStatus json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressStatus json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressStatus from json stream.
func (s *IoK8sAPINetworkingV1IngressStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "loadBalancer":
			s.LoadBalancer.Reset()
			if err := s.LoadBalancer.ReadJSON(i); err != nil {
				i.ReportError("Field LoadBalancer", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressTLS) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Hosts != nil {
		more.More()
		j.WriteObjectField("hosts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Hosts {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.SecretName.Set {
		more.More()
		j.WriteObjectField("secretName")
		s.SecretName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressTLS json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressTLS) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressTLS json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressTLS) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressTLS from json stream.
func (s *IoK8sAPINetworkingV1IngressTLS) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hosts":
			// Unsupported kind "array" for field "Hosts".
			i.Skip()
			return true
		case "secretName":
			s.SecretName.Reset()
			if err := s.SecretName.ReadJSON(i); err != nil {
				i.ReportError("Field SecretName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicy json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicy) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicy json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicy from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyEgressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.To != nil {
		more.More()
		j.WriteObjectField("to")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.To {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicyEgressRule json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicyEgressRule) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicyEgressRule json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicyEgressRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyEgressRule from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyEgressRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ports":
			// Unsupported kind "array" for field "Ports".
			i.Skip()
			return true
		case "to":
			// Unsupported kind "array" for field "To".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyIngressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.From != nil {
		more.More()
		j.WriteObjectField("from")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.From {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ports != nil {
		more.More()
		j.WriteObjectField("ports")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ports {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicyIngressRule json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicyIngressRule) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicyIngressRule json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicyIngressRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyIngressRule from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyIngressRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "from":
			// Unsupported kind "array" for field "From".
			i.Skip()
			return true
		case "ports":
			// Unsupported kind "array" for field "Ports".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicyList json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicyList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicyList json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyList from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyPeer) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.IpBlock.Set {
		more.More()
		j.WriteObjectField("ipBlock")
		s.IpBlock.WriteJSON(j)
	}
	if s.NamespaceSelector.Set {
		more.More()
		j.WriteObjectField("namespaceSelector")
		s.NamespaceSelector.WriteJSON(j)
	}
	if s.PodSelector.Set {
		more.More()
		j.WriteObjectField("podSelector")
		s.PodSelector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicyPeer json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicyPeer) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicyPeer json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyPeer from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ipBlock":
			s.IpBlock.Reset()
			if err := s.IpBlock.ReadJSON(i); err != nil {
				i.ReportError("Field IpBlock", err.Error())
				return false
			}
			return true
		case "namespaceSelector":
			s.NamespaceSelector.Reset()
			if err := s.NamespaceSelector.ReadJSON(i); err != nil {
				i.ReportError("Field NamespaceSelector", err.Error())
				return false
			}
			return true
		case "podSelector":
			s.PodSelector.Reset()
			if err := s.PodSelector.ReadJSON(i); err != nil {
				i.ReportError("Field PodSelector", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.EndPort.Set {
		more.More()
		j.WriteObjectField("endPort")
		s.EndPort.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "port".
	if s.Protocol.Set {
		more.More()
		j.WriteObjectField("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicyPort json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicyPort) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicyPort json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyPort from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "endPort":
			s.EndPort.Reset()
			if err := s.EndPort.ReadJSON(i); err != nil {
				i.ReportError("Field EndPort", err.Error())
				return false
			}
			return true
		case "port":
			// Unsupported kind "pointer" for field "Port".
			i.Skip()
			return true
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicySpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Egress != nil {
		more.More()
		j.WriteObjectField("egress")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Egress {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Ingress != nil {
		more.More()
		j.WriteObjectField("ingress")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ingress {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("podSelector")
	s.PodSelector.WriteJSON(j)
	if s.PolicyTypes != nil {
		more.More()
		j.WriteObjectField("policyTypes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.PolicyTypes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicySpec json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicySpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicySpec json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicySpec from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "egress":
			// Unsupported kind "array" for field "Egress".
			i.Skip()
			return true
		case "ingress":
			// Unsupported kind "array" for field "Ingress".
			i.Skip()
			return true
		case "podSelector":
			if err := s.PodSelector.ReadJSON(i); err != nil {
				i.ReportError("Field PodSelector", err.Error())
				return false
			}
			return true
		case "policyTypes":
			// Unsupported kind "array" for field "PolicyTypes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1ServiceBackendPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Number.Set {
		more.More()
		j.WriteObjectField("number")
		s.Number.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1ServiceBackendPort json value to io.Writer.
func (s IoK8sAPINetworkingV1ServiceBackendPort) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1ServiceBackendPort json value from io.Reader.
func (s *IoK8sAPINetworkingV1ServiceBackendPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1ServiceBackendPort from json stream.
func (s *IoK8sAPINetworkingV1ServiceBackendPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "number":
			s.Number.Reset()
			if err := s.Number.ReadJSON(i); err != nil {
				i.ReportError("Field Number", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "podFixed".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1Overhead json value to io.Writer.
func (s IoK8sAPINodeV1Overhead) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1Overhead json value from io.Reader.
func (s *IoK8sAPINodeV1Overhead) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1Overhead from json stream.
func (s *IoK8sAPINodeV1Overhead) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "podFixed":
			// Unsupported kind "pointer" for field "PodFixed".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("handler")
	j.WriteString(s.Handler)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Overhead.Set {
		more.More()
		j.WriteObjectField("overhead")
		s.Overhead.WriteJSON(j)
	}
	if s.Scheduling.Set {
		more.More()
		j.WriteObjectField("scheduling")
		s.Scheduling.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1RuntimeClass json value to io.Writer.
func (s IoK8sAPINodeV1RuntimeClass) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1RuntimeClass json value from io.Reader.
func (s *IoK8sAPINodeV1RuntimeClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1RuntimeClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "handler":
			s.Handler = i.ReadString()
			return i.Error == nil
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "overhead":
			s.Overhead.Reset()
			if err := s.Overhead.ReadJSON(i); err != nil {
				i.ReportError("Field Overhead", err.Error())
				return false
			}
			return true
		case "scheduling":
			s.Scheduling.Reset()
			if err := s.Scheduling.ReadJSON(i); err != nil {
				i.ReportError("Field Scheduling", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1RuntimeClassList json value to io.Writer.
func (s IoK8sAPINodeV1RuntimeClassList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1RuntimeClassList json value from io.Reader.
func (s *IoK8sAPINodeV1RuntimeClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1RuntimeClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "nodeSelector".
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1Scheduling json value to io.Writer.
func (s IoK8sAPINodeV1Scheduling) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1Scheduling json value from io.Reader.
func (s *IoK8sAPINodeV1Scheduling) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1Scheduling from json stream.
func (s *IoK8sAPINodeV1Scheduling) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nodeSelector":
			// Unsupported kind "pointer" for field "NodeSelector".
			i.Skip()
			return true
		case "tolerations":
			// Unsupported kind "array" for field "Tolerations".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "podFixed".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1alpha1Overhead json value to io.Writer.
func (s IoK8sAPINodeV1alpha1Overhead) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1alpha1Overhead json value from io.Reader.
func (s *IoK8sAPINodeV1alpha1Overhead) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1alpha1Overhead from json stream.
func (s *IoK8sAPINodeV1alpha1Overhead) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "podFixed":
			// Unsupported kind "pointer" for field "PodFixed".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1alpha1RuntimeClass json value to io.Writer.
func (s IoK8sAPINodeV1alpha1RuntimeClass) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1alpha1RuntimeClass json value from io.Reader.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1alpha1RuntimeClassList json value to io.Writer.
func (s IoK8sAPINodeV1alpha1RuntimeClassList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1alpha1RuntimeClassList json value from io.Reader.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClassSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Overhead.Set {
		more.More()
		j.WriteObjectField("overhead")
		s.Overhead.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("runtimeHandler")
	j.WriteString(s.RuntimeHandler)
	if s.Scheduling.Set {
		more.More()
		j.WriteObjectField("scheduling")
		s.Scheduling.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1alpha1RuntimeClassSpec json value to io.Writer.
func (s IoK8sAPINodeV1alpha1RuntimeClassSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1alpha1RuntimeClassSpec json value from io.Reader.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClassSpec from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "overhead":
			s.Overhead.Reset()
			if err := s.Overhead.ReadJSON(i); err != nil {
				i.ReportError("Field Overhead", err.Error())
				return false
			}
			return true
		case "runtimeHandler":
			s.RuntimeHandler = i.ReadString()
			return i.Error == nil
		case "scheduling":
			s.Scheduling.Reset()
			if err := s.Scheduling.ReadJSON(i); err != nil {
				i.ReportError("Field Scheduling", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "nodeSelector".
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1alpha1Scheduling json value to io.Writer.
func (s IoK8sAPINodeV1alpha1Scheduling) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1alpha1Scheduling json value from io.Reader.
func (s *IoK8sAPINodeV1alpha1Scheduling) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1alpha1Scheduling from json stream.
func (s *IoK8sAPINodeV1alpha1Scheduling) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nodeSelector":
			// Unsupported kind "pointer" for field "NodeSelector".
			i.Skip()
			return true
		case "tolerations":
			// Unsupported kind "array" for field "Tolerations".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "podFixed".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1beta1Overhead json value to io.Writer.
func (s IoK8sAPINodeV1beta1Overhead) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1beta1Overhead json value from io.Reader.
func (s *IoK8sAPINodeV1beta1Overhead) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1beta1Overhead from json stream.
func (s *IoK8sAPINodeV1beta1Overhead) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "podFixed":
			// Unsupported kind "pointer" for field "PodFixed".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("handler")
	j.WriteString(s.Handler)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Overhead.Set {
		more.More()
		j.WriteObjectField("overhead")
		s.Overhead.WriteJSON(j)
	}
	if s.Scheduling.Set {
		more.More()
		j.WriteObjectField("scheduling")
		s.Scheduling.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1beta1RuntimeClass json value to io.Writer.
func (s IoK8sAPINodeV1beta1RuntimeClass) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1beta1RuntimeClass json value from io.Reader.
func (s *IoK8sAPINodeV1beta1RuntimeClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1beta1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1beta1RuntimeClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "handler":
			s.Handler = i.ReadString()
			return i.Error == nil
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "overhead":
			s.Overhead.Reset()
			if err := s.Overhead.ReadJSON(i); err != nil {
				i.ReportError("Field Overhead", err.Error())
				return false
			}
			return true
		case "scheduling":
			s.Scheduling.Reset()
			if err := s.Scheduling.ReadJSON(i); err != nil {
				i.ReportError("Field Scheduling", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1beta1RuntimeClassList json value to io.Writer.
func (s IoK8sAPINodeV1beta1RuntimeClassList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1beta1RuntimeClassList json value from io.Reader.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1beta1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "nodeSelector".
	if s.Tolerations != nil {
		more.More()
		j.WriteObjectField("tolerations")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Tolerations {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1beta1Scheduling json value to io.Writer.
func (s IoK8sAPINodeV1beta1Scheduling) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1beta1Scheduling json value from io.Reader.
func (s *IoK8sAPINodeV1beta1Scheduling) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1beta1Scheduling from json stream.
func (s *IoK8sAPINodeV1beta1Scheduling) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nodeSelector":
			// Unsupported kind "pointer" for field "NodeSelector".
			i.Skip()
			return true
		case "tolerations":
			// Unsupported kind "array" for field "Tolerations".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1PodDisruptionBudget json value to io.Writer.
func (s IoK8sAPIPolicyV1PodDisruptionBudget) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1PodDisruptionBudget json value from io.Reader.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudget from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1PodDisruptionBudgetList json value to io.Writer.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1PodDisruptionBudgetList json value from io.Reader.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetList from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "maxUnavailable".
	// Unsupported kind "pointer" for field "minAvailable".
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1PodDisruptionBudgetSpec json value to io.Writer.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1PodDisruptionBudgetSpec json value from io.Reader.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetSpec from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxUnavailable":
			// Unsupported kind "pointer" for field "MaxUnavailable".
			i.Skip()
			return true
		case "minAvailable":
			// Unsupported kind "pointer" for field "MinAvailable".
			i.Skip()
			return true
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentHealthy")
	j.WriteInt32(s.CurrentHealthy)
	more.More()
	j.WriteObjectField("desiredHealthy")
	j.WriteInt32(s.DesiredHealthy)
	// Unsupported kind "pointer" for field "disruptedPods".
	more.More()
	j.WriteObjectField("disruptionsAllowed")
	j.WriteInt32(s.DisruptionsAllowed)
	more.More()
	j.WriteObjectField("expectedPods")
	j.WriteInt32(s.ExpectedPods)
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1PodDisruptionBudgetStatus json value to io.Writer.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1PodDisruptionBudgetStatus json value from io.Reader.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetStatus from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "currentHealthy":
			s.CurrentHealthy = i.ReadInt32()
			return i.Error == nil
		case "desiredHealthy":
			s.DesiredHealthy = i.ReadInt32()
			return i.Error == nil
		case "disruptedPods":
			// Unsupported kind "pointer" for field "DisruptedPods".
			i.Skip()
			return true
		case "disruptionsAllowed":
			s.DisruptionsAllowed = i.ReadInt32()
			return i.Error == nil
		case "expectedPods":
			s.ExpectedPods = i.ReadInt32()
			return i.Error == nil
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedCSIDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1AllowedCSIDriver json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1AllowedCSIDriver) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1AllowedCSIDriver json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1AllowedCSIDriver) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedCSIDriver from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedCSIDriver) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedFlexVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("driver")
	j.WriteString(s.Driver)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1AllowedFlexVolume json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1AllowedFlexVolume) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1AllowedFlexVolume json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1AllowedFlexVolume) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedFlexVolume from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedFlexVolume) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "driver":
			s.Driver = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedHostPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.PathPrefix.Set {
		more.More()
		j.WriteObjectField("pathPrefix")
		s.PathPrefix.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		more.More()
		j.WriteObjectField("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1AllowedHostPath json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1AllowedHostPath) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1AllowedHostPath json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1AllowedHostPath) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedHostPath from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedHostPath) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "pathPrefix":
			s.PathPrefix.Reset()
			if err := s.PathPrefix.ReadJSON(i); err != nil {
				i.ReportError("Field PathPrefix", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Rule.Set {
		more.More()
		j.WriteObjectField("rule")
		s.Rule.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1FSGroupStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1FSGroupStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1FSGroupStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ranges":
			// Unsupported kind "array" for field "Ranges".
			i.Skip()
			return true
		case "rule":
			s.Rule.Reset()
			if err := s.Rule.ReadJSON(i); err != nil {
				i.ReportError("Field Rule", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1HostPortRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("max")
	j.WriteInt32(s.Max)
	more.More()
	j.WriteObjectField("min")
	j.WriteInt32(s.Min)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1HostPortRange json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1HostPortRange) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1HostPortRange json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1HostPortRange) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1HostPortRange from json stream.
func (s *IoK8sAPIPolicyV1beta1HostPortRange) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "max":
			s.Max = i.ReadInt32()
			return i.Error == nil
		case "min":
			s.Min = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1IDRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("max")
	j.WriteInt64(s.Max)
	more.More()
	j.WriteObjectField("min")
	j.WriteInt64(s.Min)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1IDRange json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1IDRange) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1IDRange json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1IDRange) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1IDRange from json stream.
func (s *IoK8sAPIPolicyV1beta1IDRange) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "max":
			s.Max = i.ReadInt64()
			return i.Error == nil
		case "min":
			s.Min = i.ReadInt64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodDisruptionBudget json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudget) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodDisruptionBudget json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudget from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodDisruptionBudgetList json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetList json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetList from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "maxUnavailable".
	// Unsupported kind "pointer" for field "minAvailable".
	if s.Selector.Set {
		more.More()
		j.WriteObjectField("selector")
		s.Selector.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxUnavailable":
			// Unsupported kind "pointer" for field "MaxUnavailable".
			i.Skip()
			return true
		case "minAvailable":
			// Unsupported kind "pointer" for field "MinAvailable".
			i.Skip()
			return true
		case "selector":
			s.Selector.Reset()
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("currentHealthy")
	j.WriteInt32(s.CurrentHealthy)
	more.More()
	j.WriteObjectField("desiredHealthy")
	j.WriteInt32(s.DesiredHealthy)
	// Unsupported kind "pointer" for field "disruptedPods".
	more.More()
	j.WriteObjectField("disruptionsAllowed")
	j.WriteInt32(s.DisruptionsAllowed)
	more.More()
	j.WriteObjectField("expectedPods")
	j.WriteInt32(s.ExpectedPods)
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "currentHealthy":
			s.CurrentHealthy = i.ReadInt32()
			return i.Error == nil
		case "desiredHealthy":
			s.DesiredHealthy = i.ReadInt32()
			return i.Error == nil
		case "disruptedPods":
			// Unsupported kind "pointer" for field "DisruptedPods".
			i.Skip()
			return true
		case "disruptionsAllowed":
			s.DisruptionsAllowed = i.ReadInt32()
			return i.Error == nil
		case "expectedPods":
			s.ExpectedPods = i.ReadInt32()
			return i.Error == nil
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodSecurityPolicy json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicy) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodSecurityPolicy json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicy from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicyList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodSecurityPolicyList json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicyList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodSecurityPolicyList json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicyList from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowPrivilegeEscalation.Set {
		more.More()
		j.WriteObjectField("allowPrivilegeEscalation")
		s.AllowPrivilegeEscalation.WriteJSON(j)
	}
	if s.AllowedCSIDrivers != nil {
		more.More()
		j.WriteObjectField("allowedCSIDrivers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedCSIDrivers {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedCapabilities != nil {
		more.More()
		j.WriteObjectField("allowedCapabilities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedCapabilities {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedFlexVolumes != nil {
		more.More()
		j.WriteObjectField("allowedFlexVolumes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedFlexVolumes {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedHostPaths != nil {
		more.More()
		j.WriteObjectField("allowedHostPaths")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedHostPaths {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedProcMountTypes != nil {
		more.More()
		j.WriteObjectField("allowedProcMountTypes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedProcMountTypes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AllowedUnsafeSysctls != nil {
		more.More()
		j.WriteObjectField("allowedUnsafeSysctls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedUnsafeSysctls {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.DefaultAddCapabilities != nil {
		more.More()
		j.WriteObjectField("defaultAddCapabilities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.DefaultAddCapabilities {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.DefaultAllowPrivilegeEscalation.Set {
		more.More()
		j.WriteObjectField("defaultAllowPrivilegeEscalation")
		s.DefaultAllowPrivilegeEscalation.WriteJSON(j)
	}
	if s.ForbiddenSysctls != nil {
		more.More()
		j.WriteObjectField("forbiddenSysctls")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ForbiddenSysctls {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("fsGroup")
	s.FsGroup.WriteJSON(j)
	if s.HostIPC.Set {
		more.More()
		j.WriteObjectField("hostIPC")
		s.HostIPC.WriteJSON(j)
	}
	if s.HostNetwork.Set {
		more.More()
		j.WriteObjectField("hostNetwork")
		s.HostNetwork.WriteJSON(j)
	}
	if s.HostPID.Set {
		more.More()
		j.WriteObjectField("hostPID")
		s.HostPID.WriteJSON(j)
	}
	if s.HostPorts != nil {
		more.More()
		j.WriteObjectField("hostPorts")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.HostPorts {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Privileged.Set {
		more.More()
		j.WriteObjectField("privileged")
		s.Privileged.WriteJSON(j)
	}
	if s.ReadOnlyRootFilesystem.Set {
		more.More()
		j.WriteObjectField("readOnlyRootFilesystem")
		s.ReadOnlyRootFilesystem.WriteJSON(j)
	}
	if s.RequiredDropCapabilities != nil {
		more.More()
		j.WriteObjectField("requiredDropCapabilities")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.RequiredDropCapabilities {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.RunAsGroup.Set {
		more.More()
		j.WriteObjectField("runAsGroup")
		s.RunAsGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("runAsUser")
	s.RunAsUser.WriteJSON(j)
	if s.RuntimeClass.Set {
		more.More()
		j.WriteObjectField("runtimeClass")
		s.RuntimeClass.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("seLinux")
	s.SeLinux.WriteJSON(j)
	more.More()
	j.WriteObjectField("supplementalGroups")
	s.SupplementalGroups.WriteJSON(j)
	if s.Volumes != nil {
		more.More()
		j.WriteObjectField("volumes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Volumes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodSecurityPolicySpec json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodSecurityPolicySpec json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicySpec from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowPrivilegeEscalation":
			s.AllowPrivilegeEscalation.Reset()
			if err := s.AllowPrivilegeEscalation.ReadJSON(i); err != nil {
				i.ReportError("Field AllowPrivilegeEscalation", err.Error())
				return false
			}
			return true
		case "allowedCSIDrivers":
			// Unsupported kind "array" for field "AllowedCSIDrivers".
			i.Skip()
			return true
		case "allowedCapabilities":
			// Unsupported kind "array" for field "AllowedCapabilities".
			i.Skip()
			return true
		case "allowedFlexVolumes":
			// Unsupported kind "array" for field "AllowedFlexVolumes".
			i.Skip()
			return true
		case "allowedHostPaths":
			// Unsupported kind "array" for field "AllowedHostPaths".
			i.Skip()
			return true
		case "allowedProcMountTypes":
			// Unsupported kind "array" for field "AllowedProcMountTypes".
			i.Skip()
			return true
		case "allowedUnsafeSysctls":
			// Unsupported kind "array" for field "AllowedUnsafeSysctls".
			i.Skip()
			return true
		case "defaultAddCapabilities":
			// Unsupported kind "array" for field "DefaultAddCapabilities".
			i.Skip()
			return true
		case "defaultAllowPrivilegeEscalation":
			s.DefaultAllowPrivilegeEscalation.Reset()
			if err := s.DefaultAllowPrivilegeEscalation.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultAllowPrivilegeEscalation", err.Error())
				return false
			}
			return true
		case "forbiddenSysctls":
			// Unsupported kind "array" for field "ForbiddenSysctls".
			i.Skip()
			return true
		case "fsGroup":
			if err := s.FsGroup.ReadJSON(i); err != nil {
				i.ReportError("Field FsGroup", err.Error())
				return false
			}
			return true
		case "hostIPC":
			s.HostIPC.Reset()
			if err := s.HostIPC.ReadJSON(i); err != nil {
				i.ReportError("Field HostIPC", err.Error())
				return false
			}
			return true
		case "hostNetwork":
			s.HostNetwork.Reset()
			if err := s.HostNetwork.ReadJSON(i); err != nil {
				i.ReportError("Field HostNetwork", err.Error())
				return false
			}
			return true
		case "hostPID":
			s.HostPID.Reset()
			if err := s.HostPID.ReadJSON(i); err != nil {
				i.ReportError("Field HostPID", err.Error())
				return false
			}
			return true
		case "hostPorts":
			// Unsupported kind "array" for field "HostPorts".
			i.Skip()
			return true
		case "privileged":
			s.Privileged.Reset()
			if err := s.Privileged.ReadJSON(i); err != nil {
				i.ReportError("Field Privileged", err.Error())
				return false
			}
			return true
		case "readOnlyRootFilesystem":
			s.ReadOnlyRootFilesystem.Reset()
			if err := s.ReadOnlyRootFilesystem.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnlyRootFilesystem", err.Error())
				return false
			}
			return true
		case "requiredDropCapabilities":
			// Unsupported kind "array" for field "RequiredDropCapabilities".
			i.Skip()
			return true
		case "runAsGroup":
			s.RunAsGroup.Reset()
			if err := s.RunAsGroup.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsGroup", err.Error())
				return false
			}
			return true
		case "runAsUser":
			if err := s.RunAsUser.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsUser", err.Error())
				return false
			}
			return true
		case "runtimeClass":
			s.RuntimeClass.Reset()
			if err := s.RuntimeClass.ReadJSON(i); err != nil {
				i.ReportError("Field RuntimeClass", err.Error())
				return false
			}
			return true
		case "seLinux":
			if err := s.SeLinux.ReadJSON(i); err != nil {
				i.ReportError("Field SeLinux", err.Error())
				return false
			}
			return true
		case "supplementalGroups":
			if err := s.SupplementalGroups.ReadJSON(i); err != nil {
				i.ReportError("Field SupplementalGroups", err.Error())
				return false
			}
			return true
		case "volumes":
			// Unsupported kind "array" for field "Volumes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("rule")
	j.WriteString(s.Rule)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ranges":
			// Unsupported kind "array" for field "Ranges".
			i.Skip()
			return true
		case "rule":
			s.Rule = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("rule")
	j.WriteString(s.Rule)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ranges":
			// Unsupported kind "array" for field "Ranges".
			i.Skip()
			return true
		case "rule":
			s.Rule = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("allowedRuntimeClassNames")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.AllowedRuntimeClassNames {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.DefaultRuntimeClassName.Set {
		more.More()
		j.WriteObjectField("defaultRuntimeClassName")
		s.DefaultRuntimeClassName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowedRuntimeClassNames":
			// Unsupported kind "array" for field "AllowedRuntimeClassNames".
			i.Skip()
			return true
		case "defaultRuntimeClassName":
			s.DefaultRuntimeClassName.Reset()
			if err := s.DefaultRuntimeClassName.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultRuntimeClassName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("rule")
	j.WriteString(s.Rule)
	if s.SeLinuxOptions.Set {
		more.More()
		j.WriteObjectField("seLinuxOptions")
		s.SeLinuxOptions.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1SELinuxStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1SELinuxStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1SELinuxStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "rule":
			s.Rule = i.ReadString()
			return i.Error == nil
		case "seLinuxOptions":
			s.SeLinuxOptions.Reset()
			if err := s.SeLinuxOptions.ReadJSON(i); err != nil {
				i.ReportError("Field SeLinuxOptions", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Ranges != nil {
		more.More()
		j.WriteObjectField("ranges")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Ranges {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Rule.Set {
		more.More()
		j.WriteObjectField("rule")
		s.Rule.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ranges":
			// Unsupported kind "array" for field "Ranges".
			i.Skip()
			return true
		case "rule":
			s.Rule.Reset()
			if err := s.Rule.ReadJSON(i); err != nil {
				i.ReportError("Field Rule", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1AggregationRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ClusterRoleSelectors != nil {
		more.More()
		j.WriteObjectField("clusterRoleSelectors")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ClusterRoleSelectors {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1AggregationRule json value to io.Writer.
func (s IoK8sAPIRbacV1AggregationRule) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1AggregationRule json value from io.Reader.
func (s *IoK8sAPIRbacV1AggregationRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1AggregationRule from json stream.
func (s *IoK8sAPIRbacV1AggregationRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "clusterRoleSelectors":
			// Unsupported kind "array" for field "ClusterRoleSelectors".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRole) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AggregationRule.Set {
		more.More()
		j.WriteObjectField("aggregationRule")
		s.AggregationRule.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1ClusterRole json value to io.Writer.
func (s IoK8sAPIRbacV1ClusterRole) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1ClusterRole json value from io.Reader.
func (s *IoK8sAPIRbacV1ClusterRole) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRole from json stream.
func (s *IoK8sAPIRbacV1ClusterRole) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "aggregationRule":
			s.AggregationRule.Reset()
			if err := s.AggregationRule.ReadJSON(i); err != nil {
				i.ReportError("Field AggregationRule", err.Error())
				return false
			}
			return true
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "rules":
			// Unsupported kind "array" for field "Rules".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleBinding) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("roleRef")
	s.RoleRef.WriteJSON(j)
	if s.Subjects != nil {
		more.More()
		j.WriteObjectField("subjects")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Subjects {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1ClusterRoleBinding json value to io.Writer.
func (s IoK8sAPIRbacV1ClusterRoleBinding) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1ClusterRoleBinding json value from io.Reader.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleBinding from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "roleRef":
			if err := s.RoleRef.ReadJSON(i); err != nil {
				i.ReportError("Field RoleRef", err.Error())
				return false
			}
			return true
		case "subjects":
			// Unsupported kind "array" for field "Subjects".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleBindingList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1ClusterRoleBindingList json value to io.Writer.
func (s IoK8sAPIRbacV1ClusterRoleBindingList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1ClusterRoleBindingList json value from io.Reader.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleBindingList from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1ClusterRoleList json value to io.Writer.
func (s IoK8sAPIRbacV1ClusterRoleList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1ClusterRoleList json value from io.Reader.
func (s *IoK8sAPIRbacV1ClusterRoleList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleList from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1PolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroups != nil {
		more.More()
		j.WriteObjectField("apiGroups")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ApiGroups {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.NonResourceURLs != nil {
		more.More()
		j.WriteObjectField("nonResourceURLs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.NonResourceURLs {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceNames != nil {
		more.More()
		j.WriteObjectField("resourceNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ResourceNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Resources != nil {
		more.More()
		j.WriteObjectField("resources")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Resources {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1PolicyRule json value to io.Writer.
func (s IoK8sAPIRbacV1PolicyRule) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1PolicyRule json value from io.Reader.
func (s *IoK8sAPIRbacV1PolicyRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1PolicyRule from json stream.
func (s *IoK8sAPIRbacV1PolicyRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroups":
			// Unsupported kind "array" for field "ApiGroups".
			i.Skip()
			return true
		case "nonResourceURLs":
			// Unsupported kind "array" for field "NonResourceURLs".
			i.Skip()
			return true
		case "resourceNames":
			// Unsupported kind "array" for field "ResourceNames".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "array" for field "Resources".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1Role) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Rules != nil {
		more.More()
		j.WriteObjectField("rules")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Rules {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1Role json value to io.Writer.
func (s IoK8sAPIRbacV1Role) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1Role json value from io.Reader.
func (s *IoK8sAPIRbacV1Role) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1Role from json stream.
func (s *IoK8sAPIRbacV1Role) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "rules":
			// Unsupported kind "array" for field "Rules".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleBinding) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("roleRef")
	s.RoleRef.WriteJSON(j)
	if s.Subjects != nil {
		more.More()
		j.WriteObjectField("subjects")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Subjects {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1RoleBinding json value to io.Writer.
func (s IoK8sAPIRbacV1RoleBinding) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1RoleBinding json value from io.Reader.
func (s *IoK8sAPIRbacV1RoleBinding) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1RoleBinding from json stream.
func (s *IoK8sAPIRbacV1RoleBinding) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "roleRef":
			if err := s.RoleRef.ReadJSON(i); err != nil {
				i.ReportError("Field RoleRef", err.Error())
				return false
			}
			return true
		case "subjects":
			// Unsupported kind "array" for field "Subjects".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleBindingList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1RoleBindingList json value to io.Writer.
func (s IoK8sAPIRbacV1RoleBindingList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1RoleBindingList json value from io.Reader.
func (s *IoK8sAPIRbacV1RoleBindingList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1RoleBindingList from json stream.
func (s *IoK8sAPIRbacV1RoleBindingList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1RoleList json value to io.Writer.
func (s IoK8sAPIRbacV1RoleList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1RoleList json value from io.Reader.
func (s *IoK8sAPIRbacV1RoleList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1RoleList from json stream.
func (s *IoK8sAPIRbacV1RoleList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleRef) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiGroup")
	j.WriteString(s.ApiGroup)
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1RoleRef json value to io.Writer.
func (s IoK8sAPIRbacV1RoleRef) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1RoleRef json value from io.Reader.
func (s *IoK8sAPIRbacV1RoleRef) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1RoleRef from json stream.
func (s *IoK8sAPIRbacV1RoleRef) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroup":
			s.ApiGroup = i.ReadString()
			return i.Error == nil
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiGroup.Set {
		more.More()
		j.WriteObjectField("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1Subject json value to io.Writer.
func (s IoK8sAPIRbacV1Subject) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1Subject json value from io.Reader.
func (s *IoK8sAPIRbacV1Subject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1Subject from json stream.
func (s *IoK8sAPIRbacV1Subject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroup":
			s.ApiGroup.Reset()
			if err := s.ApiGroup.ReadJSON(i); err != nil {
				i.ReportError("Field ApiGroup", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPISchedulingV1PriorityClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.GlobalDefault.Set {
		more.More()
		j.WriteObjectField("globalDefault")
		s.GlobalDefault.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.PreemptionPolicy.Set {
		more.More()
		j.WriteObjectField("preemptionPolicy")
		s.PreemptionPolicy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("value")
	j.WriteInt32(s.Value)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPISchedulingV1PriorityClass json value to io.Writer.
func (s IoK8sAPISchedulingV1PriorityClass) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPISchedulingV1PriorityClass json value from io.Reader.
func (s *IoK8sAPISchedulingV1PriorityClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPISchedulingV1PriorityClass from json stream.
func (s *IoK8sAPISchedulingV1PriorityClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "globalDefault":
			s.GlobalDefault.Reset()
			if err := s.GlobalDefault.ReadJSON(i); err != nil {
				i.ReportError("Field GlobalDefault", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "preemptionPolicy":
			s.PreemptionPolicy.Reset()
			if err := s.PreemptionPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field PreemptionPolicy", err.Error())
				return false
			}
			return true
		case "value":
			s.Value = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPISchedulingV1PriorityClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPISchedulingV1PriorityClassList json value to io.Writer.
func (s IoK8sAPISchedulingV1PriorityClassList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPISchedulingV1PriorityClassList json value from io.Reader.
func (s *IoK8sAPISchedulingV1PriorityClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPISchedulingV1PriorityClassList from json stream.
func (s *IoK8sAPISchedulingV1PriorityClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSIDriver json value to io.Writer.
func (s IoK8sAPIStorageV1CSIDriver) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSIDriver json value from io.Reader.
func (s *IoK8sAPIStorageV1CSIDriver) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriver from json stream.
func (s *IoK8sAPIStorageV1CSIDriver) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriverList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSIDriverList json value to io.Writer.
func (s IoK8sAPIStorageV1CSIDriverList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSIDriverList json value from io.Reader.
func (s *IoK8sAPIStorageV1CSIDriverList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriverList from json stream.
func (s *IoK8sAPIStorageV1CSIDriverList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriverSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AttachRequired.Set {
		more.More()
		j.WriteObjectField("attachRequired")
		s.AttachRequired.WriteJSON(j)
	}
	if s.FsGroupPolicy.Set {
		more.More()
		j.WriteObjectField("fsGroupPolicy")
		s.FsGroupPolicy.WriteJSON(j)
	}
	if s.PodInfoOnMount.Set {
		more.More()
		j.WriteObjectField("podInfoOnMount")
		s.PodInfoOnMount.WriteJSON(j)
	}
	if s.RequiresRepublish.Set {
		more.More()
		j.WriteObjectField("requiresRepublish")
		s.RequiresRepublish.WriteJSON(j)
	}
	if s.StorageCapacity.Set {
		more.More()
		j.WriteObjectField("storageCapacity")
		s.StorageCapacity.WriteJSON(j)
	}
	if s.TokenRequests != nil {
		more.More()
		j.WriteObjectField("tokenRequests")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TokenRequests {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.VolumeLifecycleModes != nil {
		more.More()
		j.WriteObjectField("volumeLifecycleModes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.VolumeLifecycleModes {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSIDriverSpec json value to io.Writer.
func (s IoK8sAPIStorageV1CSIDriverSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSIDriverSpec json value from io.Reader.
func (s *IoK8sAPIStorageV1CSIDriverSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriverSpec from json stream.
func (s *IoK8sAPIStorageV1CSIDriverSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "attachRequired":
			s.AttachRequired.Reset()
			if err := s.AttachRequired.ReadJSON(i); err != nil {
				i.ReportError("Field AttachRequired", err.Error())
				return false
			}
			return true
		case "fsGroupPolicy":
			s.FsGroupPolicy.Reset()
			if err := s.FsGroupPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field FsGroupPolicy", err.Error())
				return false
			}
			return true
		case "podInfoOnMount":
			s.PodInfoOnMount.Reset()
			if err := s.PodInfoOnMount.ReadJSON(i); err != nil {
				i.ReportError("Field PodInfoOnMount", err.Error())
				return false
			}
			return true
		case "requiresRepublish":
			s.RequiresRepublish.Reset()
			if err := s.RequiresRepublish.ReadJSON(i); err != nil {
				i.ReportError("Field RequiresRepublish", err.Error())
				return false
			}
			return true
		case "storageCapacity":
			s.StorageCapacity.Reset()
			if err := s.StorageCapacity.ReadJSON(i); err != nil {
				i.ReportError("Field StorageCapacity", err.Error())
				return false
			}
			return true
		case "tokenRequests":
			// Unsupported kind "array" for field "TokenRequests".
			i.Skip()
			return true
		case "volumeLifecycleModes":
			// Unsupported kind "array" for field "VolumeLifecycleModes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINode) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSINode json value to io.Writer.
func (s IoK8sAPIStorageV1CSINode) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSINode json value from io.Reader.
func (s *IoK8sAPIStorageV1CSINode) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSINode from json stream.
func (s *IoK8sAPIStorageV1CSINode) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Allocatable.Set {
		more.More()
		j.WriteObjectField("allocatable")
		s.Allocatable.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("nodeID")
	j.WriteString(s.NodeID)
	if s.TopologyKeys != nil {
		more.More()
		j.WriteObjectField("topologyKeys")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.TopologyKeys {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSINodeDriver json value to io.Writer.
func (s IoK8sAPIStorageV1CSINodeDriver) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSINodeDriver json value from io.Reader.
func (s *IoK8sAPIStorageV1CSINodeDriver) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeDriver from json stream.
func (s *IoK8sAPIStorageV1CSINodeDriver) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allocatable":
			s.Allocatable.Reset()
			if err := s.Allocatable.ReadJSON(i); err != nil {
				i.ReportError("Field Allocatable", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "nodeID":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "topologyKeys":
			// Unsupported kind "array" for field "TopologyKeys".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSINodeList json value to io.Writer.
func (s IoK8sAPIStorageV1CSINodeList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSINodeList json value from io.Reader.
func (s *IoK8sAPIStorageV1CSINodeList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeList from json stream.
func (s *IoK8sAPIStorageV1CSINodeList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("drivers")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Drivers {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSINodeSpec json value to io.Writer.
func (s IoK8sAPIStorageV1CSINodeSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSINodeSpec json value from io.Reader.
func (s *IoK8sAPIStorageV1CSINodeSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeSpec from json stream.
func (s *IoK8sAPIStorageV1CSINodeSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "drivers":
			// Unsupported kind "array" for field "Drivers".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1StorageClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowVolumeExpansion.Set {
		more.More()
		j.WriteObjectField("allowVolumeExpansion")
		s.AllowVolumeExpansion.WriteJSON(j)
	}
	if s.AllowedTopologies != nil {
		more.More()
		j.WriteObjectField("allowedTopologies")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllowedTopologies {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.MountOptions != nil {
		more.More()
		j.WriteObjectField("mountOptions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MountOptions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	// Unsupported kind "pointer" for field "parameters".
	more.More()
	j.WriteObjectField("provisioner")
	j.WriteString(s.Provisioner)
	if s.ReclaimPolicy.Set {
		more.More()
		j.WriteObjectField("reclaimPolicy")
		s.ReclaimPolicy.WriteJSON(j)
	}
	if s.VolumeBindingMode.Set {
		more.More()
		j.WriteObjectField("volumeBindingMode")
		s.VolumeBindingMode.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1StorageClass json value to io.Writer.
func (s IoK8sAPIStorageV1StorageClass) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1StorageClass json value from io.Reader.
func (s *IoK8sAPIStorageV1StorageClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1StorageClass from json stream.
func (s *IoK8sAPIStorageV1StorageClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowVolumeExpansion":
			s.AllowVolumeExpansion.Reset()
			if err := s.AllowVolumeExpansion.ReadJSON(i); err != nil {
				i.ReportError("Field AllowVolumeExpansion", err.Error())
				return false
			}
			return true
		case "allowedTopologies":
			// Unsupported kind "array" for field "AllowedTopologies".
			i.Skip()
			return true
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "mountOptions":
			// Unsupported kind "array" for field "MountOptions".
			i.Skip()
			return true
		case "parameters":
			// Unsupported kind "pointer" for field "Parameters".
			i.Skip()
			return true
		case "provisioner":
			s.Provisioner = i.ReadString()
			return i.Error == nil
		case "reclaimPolicy":
			s.ReclaimPolicy.Reset()
			if err := s.ReclaimPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ReclaimPolicy", err.Error())
				return false
			}
			return true
		case "volumeBindingMode":
			s.VolumeBindingMode.Reset()
			if err := s.VolumeBindingMode.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeBindingMode", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1StorageClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1StorageClassList json value to io.Writer.
func (s IoK8sAPIStorageV1StorageClassList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1StorageClassList json value from io.Reader.
func (s *IoK8sAPIStorageV1StorageClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1StorageClassList from json stream.
func (s *IoK8sAPIStorageV1StorageClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1TokenRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("audience")
	j.WriteString(s.Audience)
	if s.ExpirationSeconds.Set {
		more.More()
		j.WriteObjectField("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1TokenRequest json value to io.Writer.
func (s IoK8sAPIStorageV1TokenRequest) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1TokenRequest json value from io.Reader.
func (s *IoK8sAPIStorageV1TokenRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1TokenRequest from json stream.
func (s *IoK8sAPIStorageV1TokenRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "audience":
			s.Audience = i.ReadString()
			return i.Error == nil
		case "expirationSeconds":
			s.ExpirationSeconds.Reset()
			if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ExpirationSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeAttachment json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeAttachment) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeAttachment json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeAttachment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachment from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeAttachmentList json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeAttachmentList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeAttachmentList json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentList from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.InlineVolumeSpec.Set {
		more.More()
		j.WriteObjectField("inlineVolumeSpec")
		s.InlineVolumeSpec.WriteJSON(j)
	}
	if s.PersistentVolumeName.Set {
		more.More()
		j.WriteObjectField("persistentVolumeName")
		s.PersistentVolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeAttachmentSource json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeAttachmentSource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeAttachmentSource json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeAttachmentSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentSource from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "inlineVolumeSpec":
			s.InlineVolumeSpec.Reset()
			if err := s.InlineVolumeSpec.ReadJSON(i); err != nil {
				i.ReportError("Field InlineVolumeSpec", err.Error())
				return false
			}
			return true
		case "persistentVolumeName":
			s.PersistentVolumeName.Reset()
			if err := s.PersistentVolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field PersistentVolumeName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("attacher")
	j.WriteString(s.Attacher)
	more.More()
	j.WriteObjectField("nodeName")
	j.WriteString(s.NodeName)
	more.More()
	j.WriteObjectField("source")
	s.Source.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeAttachmentSpec json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeAttachmentSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeAttachmentSpec json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentSpec from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "attacher":
			s.Attacher = i.ReadString()
			return i.Error == nil
		case "nodeName":
			s.NodeName = i.ReadString()
			return i.Error == nil
		case "source":
			if err := s.Source.ReadJSON(i); err != nil {
				i.ReportError("Field Source", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AttachError.Set {
		more.More()
		j.WriteObjectField("attachError")
		s.AttachError.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("attached")
	j.WriteBool(s.Attached)
	// Unsupported kind "pointer" for field "attachmentMetadata".
	if s.DetachError.Set {
		more.More()
		j.WriteObjectField("detachError")
		s.DetachError.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeAttachmentStatus json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeAttachmentStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeAttachmentStatus json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentStatus from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "attachError":
			s.AttachError.Reset()
			if err := s.AttachError.ReadJSON(i); err != nil {
				i.ReportError("Field AttachError", err.Error())
				return false
			}
			return true
		case "attached":
			s.Attached = i.ReadBool()
			return i.Error == nil
		case "attachmentMetadata":
			// Unsupported kind "pointer" for field "AttachmentMetadata".
			i.Skip()
			return true
		case "detachError":
			s.DetachError.Reset()
			if err := s.DetachError.ReadJSON(i); err != nil {
				i.ReportError("Field DetachError", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeError) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "time".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeError json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeError) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeError json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeError) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeError from json stream.
func (s *IoK8sAPIStorageV1VolumeError) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "time":
			// Unsupported kind "pointer" for field "Time".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeNodeResources) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Count.Set {
		more.More()
		j.WriteObjectField("count")
		s.Count.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeNodeResources json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeNodeResources) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeNodeResources json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeNodeResources) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeNodeResources from json stream.
func (s *IoK8sAPIStorageV1VolumeNodeResources) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "count":
			s.Count.Reset()
			if err := s.Count.ReadJSON(i); err != nil {
				i.ReportError("Field Count", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "capacity".
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "maximumVolumeSize".
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.NodeTopology.Set {
		more.More()
		j.WriteObjectField("nodeTopology")
		s.NodeTopology.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("storageClassName")
	j.WriteString(s.StorageClassName)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1alpha1CSIStorageCapacity json value to io.Writer.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1alpha1CSIStorageCapacity json value from io.Reader.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1alpha1CSIStorageCapacity from json stream.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "capacity":
			// Unsupported kind "pointer" for field "Capacity".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "maximumVolumeSize":
			// Unsupported kind "pointer" for field "MaximumVolumeSize".
			i.Skip()
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "nodeTopology":
			s.NodeTopology.Reset()
			if err := s.NodeTopology.ReadJSON(i); err != nil {
				i.ReportError("Field NodeTopology", err.Error())
				return false
			}
			return true
		case "storageClassName":
			s.StorageClassName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacityList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1alpha1CSIStorageCapacityList json value to io.Writer.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacityList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1alpha1CSIStorageCapacityList json value from io.Reader.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1alpha1CSIStorageCapacityList from json stream.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "capacity".
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "maximumVolumeSize".
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.NodeTopology.Set {
		more.More()
		j.WriteObjectField("nodeTopology")
		s.NodeTopology.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("storageClassName")
	j.WriteString(s.StorageClassName)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1beta1CSIStorageCapacity json value to io.Writer.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacity) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1beta1CSIStorageCapacity json value from io.Reader.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1beta1CSIStorageCapacity from json stream.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "capacity":
			// Unsupported kind "pointer" for field "Capacity".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "maximumVolumeSize":
			// Unsupported kind "pointer" for field "MaximumVolumeSize".
			i.Skip()
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "nodeTopology":
			s.NodeTopology.Reset()
			if err := s.NodeTopology.ReadJSON(i); err != nil {
				i.ReportError("Field NodeTopology", err.Error())
				return false
			}
			return true
		case "storageClassName":
			s.StorageClassName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacityList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1beta1CSIStorageCapacityList json value to io.Writer.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacityList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1beta1CSIStorageCapacityList json value from io.Reader.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1beta1CSIStorageCapacityList from json stream.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.Format.Set {
		more.More()
		j.WriteObjectField("format")
		s.Format.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("jsonPath")
	j.WriteString(s.JsonPath)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Priority.Set {
		more.More()
		j.WriteObjectField("priority")
		s.Priority.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "format":
			s.Format.Reset()
			if err := s.Format.ReadJSON(i); err != nil {
				i.ReportError("Field Format", err.Error())
				return false
			}
			return true
		case "jsonPath":
			s.JsonPath = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "priority":
			s.Priority.Reset()
			if err := s.Priority.ReadJSON(i); err != nil {
				i.ReportError("Field Priority", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("strategy")
	j.WriteString(s.Strategy)
	if s.Webhook.Set {
		more.More()
		j.WriteObjectField("webhook")
		s.Webhook.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "strategy":
			s.Strategy = i.ReadString()
			return i.Error == nil
		case "webhook":
			s.Webhook.Reset()
			if err := s.Webhook.ReadJSON(i); err != nil {
				i.ReportError("Field Webhook", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("spec")
	s.Spec.WriteJSON(j)
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Categories != nil {
		more.More()
		j.WriteObjectField("categories")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Categories {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	if s.ListKind.Set {
		more.More()
		j.WriteObjectField("listKind")
		s.ListKind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("plural")
	j.WriteString(s.Plural)
	if s.ShortNames != nil {
		more.More()
		j.WriteObjectField("shortNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ShortNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Singular.Set {
		more.More()
		j.WriteObjectField("singular")
		s.Singular.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "categories":
			// Unsupported kind "array" for field "Categories".
			i.Skip()
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "listKind":
			s.ListKind.Reset()
			if err := s.ListKind.ReadJSON(i); err != nil {
				i.ReportError("Field ListKind", err.Error())
				return false
			}
			return true
		case "plural":
			s.Plural = i.ReadString()
			return i.Error == nil
		case "shortNames":
			// Unsupported kind "array" for field "ShortNames".
			i.Skip()
			return true
		case "singular":
			s.Singular.Reset()
			if err := s.Singular.ReadJSON(i); err != nil {
				i.ReportError("Field Singular", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conversion.Set {
		more.More()
		j.WriteObjectField("conversion")
		s.Conversion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("group")
	j.WriteString(s.Group)
	more.More()
	j.WriteObjectField("names")
	s.Names.WriteJSON(j)
	if s.PreserveUnknownFields.Set {
		more.More()
		j.WriteObjectField("preserveUnknownFields")
		s.PreserveUnknownFields.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("scope")
	j.WriteString(s.Scope)
	more.More()
	j.WriteObjectField("versions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Versions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conversion":
			s.Conversion.Reset()
			if err := s.Conversion.ReadJSON(i); err != nil {
				i.ReportError("Field Conversion", err.Error())
				return false
			}
			return true
		case "group":
			s.Group = i.ReadString()
			return i.Error == nil
		case "names":
			if err := s.Names.ReadJSON(i); err != nil {
				i.ReportError("Field Names", err.Error())
				return false
			}
			return true
		case "preserveUnknownFields":
			s.PreserveUnknownFields.Reset()
			if err := s.PreserveUnknownFields.ReadJSON(i); err != nil {
				i.ReportError("Field PreserveUnknownFields", err.Error())
				return false
			}
			return true
		case "scope":
			s.Scope = i.ReadString()
			return i.Error == nil
		case "versions":
			// Unsupported kind "array" for field "Versions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AcceptedNames.Set {
		more.More()
		j.WriteObjectField("acceptedNames")
		s.AcceptedNames.WriteJSON(j)
	}
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.StoredVersions != nil {
		more.More()
		j.WriteObjectField("storedVersions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.StoredVersions {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "acceptedNames":
			s.AcceptedNames.Reset()
			if err := s.AcceptedNames.ReadJSON(i); err != nil {
				i.ReportError("Field AcceptedNames", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "storedVersions":
			// Unsupported kind "array" for field "StoredVersions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AdditionalPrinterColumns != nil {
		more.More()
		j.WriteObjectField("additionalPrinterColumns")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AdditionalPrinterColumns {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Deprecated.Set {
		more.More()
		j.WriteObjectField("deprecated")
		s.Deprecated.WriteJSON(j)
	}
	if s.DeprecationWarning.Set {
		more.More()
		j.WriteObjectField("deprecationWarning")
		s.DeprecationWarning.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.Schema.Set {
		more.More()
		j.WriteObjectField("schema")
		s.Schema.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("served")
	j.WriteBool(s.Served)
	more.More()
	j.WriteObjectField("storage")
	j.WriteBool(s.Storage)
	if s.Subresources.Set {
		more.More()
		j.WriteObjectField("subresources")
		s.Subresources.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "additionalPrinterColumns":
			// Unsupported kind "array" for field "AdditionalPrinterColumns".
			i.Skip()
			return true
		case "deprecated":
			s.Deprecated.Reset()
			if err := s.Deprecated.ReadJSON(i); err != nil {
				i.ReportError("Field Deprecated", err.Error())
				return false
			}
			return true
		case "deprecationWarning":
			s.DeprecationWarning.Reset()
			if err := s.DeprecationWarning.ReadJSON(i); err != nil {
				i.ReportError("Field DeprecationWarning", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "schema":
			s.Schema.Reset()
			if err := s.Schema.ReadJSON(i); err != nil {
				i.ReportError("Field Schema", err.Error())
				return false
			}
			return true
		case "served":
			s.Served = i.ReadBool()
			return i.Error == nil
		case "storage":
			s.Storage = i.ReadBool()
			return i.Error == nil
		case "subresources":
			s.Subresources.Reset()
			if err := s.Subresources.ReadJSON(i); err != nil {
				i.ReportError("Field Subresources", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LabelSelectorPath.Set {
		more.More()
		j.WriteObjectField("labelSelectorPath")
		s.LabelSelectorPath.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("specReplicasPath")
	j.WriteString(s.SpecReplicasPath)
	more.More()
	j.WriteObjectField("statusReplicasPath")
	j.WriteString(s.StatusReplicasPath)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "labelSelectorPath":
			s.LabelSelectorPath.Reset()
			if err := s.LabelSelectorPath.ReadJSON(i); err != nil {
				i.ReportError("Field LabelSelectorPath", err.Error())
				return false
			}
			return true
		case "specReplicasPath":
			s.SpecReplicasPath = i.ReadString()
			return i.Error == nil
		case "statusReplicasPath":
			s.StatusReplicasPath = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Scale.Set {
		more.More()
		j.WriteObjectField("scale")
		s.Scale.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "scale":
			s.Scale.Reset()
			if err := s.Scale.ReadJSON(i); err != nil {
				i.ReportError("Field Scale", err.Error())
				return false
			}
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.OpenAPIV3Schema.Set {
		more.More()
		j.WriteObjectField("openAPIV3Schema")
		s.OpenAPIV3Schema.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "openAPIV3Schema":
			s.OpenAPIV3Schema.Reset()
			if err := s.OpenAPIV3Schema.ReadJSON(i); err != nil {
				i.ReportError("Field OpenAPIV3Schema", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "additionalItems".
	// Unsupported kind "pointer" for field "additionalProperties".
	if s.AllOf != nil {
		more.More()
		j.WriteObjectField("allOf")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AllOf {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.AnyOf != nil {
		more.More()
		j.WriteObjectField("anyOf")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.AnyOf {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	// Unsupported kind "pointer" for field "default".
	// Unsupported kind "pointer" for field "definitions".
	// Unsupported kind "pointer" for field "dependencies".
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.Enum != nil {
		more.More()
		j.WriteObjectField("enum")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Enum {
			// Unsupported kind "alias" for field "".
		}
		j.WriteArrayEnd()
		more.Up()
	}
	// Unsupported kind "pointer" for field "example".
	if s.ExclusiveMaximum.Set {
		more.More()
		j.WriteObjectField("exclusiveMaximum")
		s.ExclusiveMaximum.WriteJSON(j)
	}
	if s.ExclusiveMinimum.Set {
		more.More()
		j.WriteObjectField("exclusiveMinimum")
		s.ExclusiveMinimum.WriteJSON(j)
	}
	if s.ExternalDocs.Set {
		more.More()
		j.WriteObjectField("externalDocs")
		s.ExternalDocs.WriteJSON(j)
	}
	if s.Format.Set {
		more.More()
		j.WriteObjectField("format")
		s.Format.WriteJSON(j)
	}
	if s.ID.Set {
		more.More()
		j.WriteObjectField("id")
		s.ID.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "items".
	if s.MaxItems.Set {
		more.More()
		j.WriteObjectField("maxItems")
		s.MaxItems.WriteJSON(j)
	}
	if s.MaxLength.Set {
		more.More()
		j.WriteObjectField("maxLength")
		s.MaxLength.WriteJSON(j)
	}
	if s.MaxProperties.Set {
		more.More()
		j.WriteObjectField("maxProperties")
		s.MaxProperties.WriteJSON(j)
	}
	if s.Maximum.Set {
		more.More()
		j.WriteObjectField("maximum")
		s.Maximum.WriteJSON(j)
	}
	if s.MinItems.Set {
		more.More()
		j.WriteObjectField("minItems")
		s.MinItems.WriteJSON(j)
	}
	if s.MinLength.Set {
		more.More()
		j.WriteObjectField("minLength")
		s.MinLength.WriteJSON(j)
	}
	if s.MinProperties.Set {
		more.More()
		j.WriteObjectField("minProperties")
		s.MinProperties.WriteJSON(j)
	}
	if s.Minimum.Set {
		more.More()
		j.WriteObjectField("minimum")
		s.Minimum.WriteJSON(j)
	}
	if s.MultipleOf.Set {
		more.More()
		j.WriteObjectField("multipleOf")
		s.MultipleOf.WriteJSON(j)
	}
	if s.Not.Set {
		more.More()
		j.WriteObjectField("not")
		s.Not.WriteJSON(j)
	}
	if s.Nullable.Set {
		more.More()
		j.WriteObjectField("nullable")
		s.Nullable.WriteJSON(j)
	}
	if s.OneOf != nil {
		more.More()
		j.WriteObjectField("oneOf")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.OneOf {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Pattern.Set {
		more.More()
		j.WriteObjectField("pattern")
		s.Pattern.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "patternProperties".
	// Unsupported kind "pointer" for field "properties".
	if s.Ref.Set {
		more.More()
		j.WriteObjectField("$ref")
		s.Ref.WriteJSON(j)
	}
	if s.Required != nil {
		more.More()
		j.WriteObjectField("required")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Required {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Schema.Set {
		more.More()
		j.WriteObjectField("$schema")
		s.Schema.WriteJSON(j)
	}
	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	if s.UniqueItems.Set {
		more.More()
		j.WriteObjectField("uniqueItems")
		s.UniqueItems.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusEmbeddedMinusResource.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-embedded-resource")
		s.XMinusKubernetesMinusEmbeddedMinusResource.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusIntMinusOrMinusString.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-int-or-string")
		s.XMinusKubernetesMinusIntMinusOrMinusString.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusListMinusMapMinusKeys != nil {
		more.More()
		j.WriteObjectField("x-kubernetes-list-map-keys")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.XMinusKubernetesMinusListMinusMapMinusKeys {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.XMinusKubernetesMinusListMinusType.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-list-type")
		s.XMinusKubernetesMinusListMinusType.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusMapMinusType.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-map-type")
		s.XMinusKubernetesMinusMapMinusType.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.Set {
		more.More()
		j.WriteObjectField("x-kubernetes-preserve-unknown-fields")
		s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "additionalItems":
			// Unsupported kind "pointer" for field "AdditionalItems".
			i.Skip()
			return true
		case "additionalProperties":
			// Unsupported kind "pointer" for field "AdditionalProperties".
			i.Skip()
			return true
		case "allOf":
			// Unsupported kind "array" for field "AllOf".
			i.Skip()
			return true
		case "anyOf":
			// Unsupported kind "array" for field "AnyOf".
			i.Skip()
			return true
		case "default":
			// Unsupported kind "pointer" for field "Default".
			i.Skip()
			return true
		case "definitions":
			// Unsupported kind "pointer" for field "Definitions".
			i.Skip()
			return true
		case "dependencies":
			// Unsupported kind "pointer" for field "Dependencies".
			i.Skip()
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "enum":
			// Unsupported kind "array" for field "Enum".
			i.Skip()
			return true
		case "example":
			// Unsupported kind "pointer" for field "Example".
			i.Skip()
			return true
		case "exclusiveMaximum":
			s.ExclusiveMaximum.Reset()
			if err := s.ExclusiveMaximum.ReadJSON(i); err != nil {
				i.ReportError("Field ExclusiveMaximum", err.Error())
				return false
			}
			return true
		case "exclusiveMinimum":
			s.ExclusiveMinimum.Reset()
			if err := s.ExclusiveMinimum.ReadJSON(i); err != nil {
				i.ReportError("Field ExclusiveMinimum", err.Error())
				return false
			}
			return true
		case "externalDocs":
			s.ExternalDocs.Reset()
			if err := s.ExternalDocs.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalDocs", err.Error())
				return false
			}
			return true
		case "format":
			s.Format.Reset()
			if err := s.Format.ReadJSON(i); err != nil {
				i.ReportError("Field Format", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "pointer" for field "Items".
			i.Skip()
			return true
		case "maxItems":
			s.MaxItems.Reset()
			if err := s.MaxItems.ReadJSON(i); err != nil {
				i.ReportError("Field MaxItems", err.Error())
				return false
			}
			return true
		case "maxLength":
			s.MaxLength.Reset()
			if err := s.MaxLength.ReadJSON(i); err != nil {
				i.ReportError("Field MaxLength", err.Error())
				return false
			}
			return true
		case "maxProperties":
			s.MaxProperties.Reset()
			if err := s.MaxProperties.ReadJSON(i); err != nil {
				i.ReportError("Field MaxProperties", err.Error())
				return false
			}
			return true
		case "maximum":
			s.Maximum.Reset()
			if err := s.Maximum.ReadJSON(i); err != nil {
				i.ReportError("Field Maximum", err.Error())
				return false
			}
			return true
		case "minItems":
			s.MinItems.Reset()
			if err := s.MinItems.ReadJSON(i); err != nil {
				i.ReportError("Field MinItems", err.Error())
				return false
			}
			return true
		case "minLength":
			s.MinLength.Reset()
			if err := s.MinLength.ReadJSON(i); err != nil {
				i.ReportError("Field MinLength", err.Error())
				return false
			}
			return true
		case "minProperties":
			s.MinProperties.Reset()
			if err := s.MinProperties.ReadJSON(i); err != nil {
				i.ReportError("Field MinProperties", err.Error())
				return false
			}
			return true
		case "minimum":
			s.Minimum.Reset()
			if err := s.Minimum.ReadJSON(i); err != nil {
				i.ReportError("Field Minimum", err.Error())
				return false
			}
			return true
		case "multipleOf":
			s.MultipleOf.Reset()
			if err := s.MultipleOf.ReadJSON(i); err != nil {
				i.ReportError("Field MultipleOf", err.Error())
				return false
			}
			return true
		case "not":
			s.Not.Reset()
			if err := s.Not.ReadJSON(i); err != nil {
				i.ReportError("Field Not", err.Error())
				return false
			}
			return true
		case "nullable":
			s.Nullable.Reset()
			if err := s.Nullable.ReadJSON(i); err != nil {
				i.ReportError("Field Nullable", err.Error())
				return false
			}
			return true
		case "oneOf":
			// Unsupported kind "array" for field "OneOf".
			i.Skip()
			return true
		case "pattern":
			s.Pattern.Reset()
			if err := s.Pattern.ReadJSON(i); err != nil {
				i.ReportError("Field Pattern", err.Error())
				return false
			}
			return true
		case "patternProperties":
			// Unsupported kind "pointer" for field "PatternProperties".
			i.Skip()
			return true
		case "properties":
			// Unsupported kind "pointer" for field "Properties".
			i.Skip()
			return true
		case "$ref":
			s.Ref.Reset()
			if err := s.Ref.ReadJSON(i); err != nil {
				i.ReportError("Field Ref", err.Error())
				return false
			}
			return true
		case "required":
			// Unsupported kind "array" for field "Required".
			i.Skip()
			return true
		case "$schema":
			s.Schema.Reset()
			if err := s.Schema.ReadJSON(i); err != nil {
				i.ReportError("Field Schema", err.Error())
				return false
			}
			return true
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "uniqueItems":
			s.UniqueItems.Reset()
			if err := s.UniqueItems.ReadJSON(i); err != nil {
				i.ReportError("Field UniqueItems", err.Error())
				return false
			}
			return true
		case "x-kubernetes-embedded-resource":
			s.XMinusKubernetesMinusEmbeddedMinusResource.Reset()
			if err := s.XMinusKubernetesMinusEmbeddedMinusResource.ReadJSON(i); err != nil {
				i.ReportError("Field XMinusKubernetesMinusEmbeddedMinusResource", err.Error())
				return false
			}
			return true
		case "x-kubernetes-int-or-string":
			s.XMinusKubernetesMinusIntMinusOrMinusString.Reset()
			if err := s.XMinusKubernetesMinusIntMinusOrMinusString.ReadJSON(i); err != nil {
				i.ReportError("Field XMinusKubernetesMinusIntMinusOrMinusString", err.Error())
				return false
			}
			return true
		case "x-kubernetes-list-map-keys":
			// Unsupported kind "array" for field "XMinusKubernetesMinusListMinusMapMinusKeys".
			i.Skip()
			return true
		case "x-kubernetes-list-type":
			s.XMinusKubernetesMinusListMinusType.Reset()
			if err := s.XMinusKubernetesMinusListMinusType.ReadJSON(i); err != nil {
				i.ReportError("Field XMinusKubernetesMinusListMinusType", err.Error())
				return false
			}
			return true
		case "x-kubernetes-map-type":
			s.XMinusKubernetesMinusMapMinusType.Reset()
			if err := s.XMinusKubernetesMinusMapMinusType.ReadJSON(i); err != nil {
				i.ReportError("Field XMinusKubernetesMinusMapMinusType", err.Error())
				return false
			}
			return true
		case "x-kubernetes-preserve-unknown-fields":
			s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.Reset()
			if err := s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.ReadJSON(i); err != nil {
				i.ReportError("Field XMinusKubernetesMinusPreserveMinusUnknownMinusFields", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespace")
	j.WriteString(s.Namespace)
	if s.Path.Set {
		more.More()
		j.WriteObjectField("path")
		s.Path.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				i.ReportError("Field Port", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "caBundle".
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "caBundle":
			// Unsupported kind "pointer" for field "CaBundle".
			i.Skip()
			return true
		case "service":
			s.Service.Reset()
			if err := s.Service.ReadJSON(i); err != nil {
				i.ReportError("Field Service", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ClientConfig.Set {
		more.More()
		j.WriteObjectField("clientConfig")
		s.ClientConfig.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("conversionReviewVersions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ConversionReviewVersions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "clientConfig":
			s.ClientConfig.Reset()
			if err := s.ClientConfig.ReadJSON(i); err != nil {
				i.ReportError("Field ClientConfig", err.Error())
				return false
			}
			return true
		case "conversionReviewVersions":
			// Unsupported kind "array" for field "ConversionReviewVersions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIGroup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.PreferredVersion.Set {
		more.More()
		j.WriteObjectField("preferredVersion")
		s.PreferredVersion.WriteJSON(j)
	}
	if s.ServerAddressByClientCIDRs != nil {
		more.More()
		j.WriteObjectField("serverAddressByClientCIDRs")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ServerAddressByClientCIDRs {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("versions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Versions {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1APIGroup json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1APIGroup) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1APIGroup json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIGroup from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "preferredVersion":
			s.PreferredVersion.Reset()
			if err := s.PreferredVersion.ReadJSON(i); err != nil {
				i.ReportError("Field PreferredVersion", err.Error())
				return false
			}
			return true
		case "serverAddressByClientCIDRs":
			// Unsupported kind "array" for field "ServerAddressByClientCIDRs".
			i.Skip()
			return true
		case "versions":
			// Unsupported kind "array" for field "Versions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIGroupList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("groups")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Groups {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1APIGroupList json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1APIGroupList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1APIGroupList json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIGroupList from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIResource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Categories != nil {
		more.More()
		j.WriteObjectField("categories")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Categories {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("namespaced")
	j.WriteBool(s.Namespaced)
	if s.ShortNames != nil {
		more.More()
		j.WriteObjectField("shortNames")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ShortNames {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	more.More()
	j.WriteObjectField("singularName")
	j.WriteString(s.SingularName)
	if s.StorageVersionHash.Set {
		more.More()
		j.WriteObjectField("storageVersionHash")
		s.StorageVersionHash.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("verbs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Verbs {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Version.Set {
		more.More()
		j.WriteObjectField("version")
		s.Version.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1APIResource json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1APIResource) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1APIResource json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIResource from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "categories":
			// Unsupported kind "array" for field "Categories".
			i.Skip()
			return true
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespaced":
			s.Namespaced = i.ReadBool()
			return i.Error == nil
		case "shortNames":
			// Unsupported kind "array" for field "ShortNames".
			i.Skip()
			return true
		case "singularName":
			s.SingularName = i.ReadString()
			return i.Error == nil
		case "storageVersionHash":
			s.StorageVersionHash.Reset()
			if err := s.StorageVersionHash.ReadJSON(i); err != nil {
				i.ReportError("Field StorageVersionHash", err.Error())
				return false
			}
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(i); err != nil {
				i.ReportError("Field Version", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIResourceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("groupVersion")
	j.WriteString(s.GroupVersion)
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("resources")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Resources {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1APIResourceList json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1APIResourceList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1APIResourceList json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIResourceList from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "groupVersion":
			s.GroupVersion = i.ReadString()
			return i.Error == nil
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "resources":
			// Unsupported kind "array" for field "Resources".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIVersions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("serverAddressByClientCIDRs")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.ServerAddressByClientCIDRs {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	more.More()
	j.WriteObjectField("versions")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Versions {
		more.More()
		j.WriteString(elem)
	}
	j.WriteArrayEnd()
	more.Up()
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1APIVersions json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1APIVersions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1APIVersions json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIVersions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "serverAddressByClientCIDRs":
			// Unsupported kind "array" for field "ServerAddressByClientCIDRs".
			i.Skip()
			return true
		case "versions":
			// Unsupported kind "array" for field "Versions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Condition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "alias" for field "lastTransitionTime".
	more.More()
	j.WriteObjectField("message")
	j.WriteString(s.Message)
	if s.ObservedGeneration.Set {
		more.More()
		j.WriteObjectField("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("reason")
	j.WriteString(s.Reason)
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1Condition json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1Condition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1Condition json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Condition from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "alias" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason = i.ReadString()
			return i.Error == nil
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1DeleteOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.DryRun != nil {
		more.More()
		j.WriteObjectField("dryRun")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.DryRun {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.GracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("gracePeriodSeconds")
		s.GracePeriodSeconds.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.OrphanDependents.Set {
		more.More()
		j.WriteObjectField("orphanDependents")
		s.OrphanDependents.WriteJSON(j)
	}
	if s.Preconditions.Set {
		more.More()
		j.WriteObjectField("preconditions")
		s.Preconditions.WriteJSON(j)
	}
	if s.PropagationPolicy.Set {
		more.More()
		j.WriteObjectField("propagationPolicy")
		s.PropagationPolicy.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1DeleteOptions json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1DeleteOptions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1DeleteOptions json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1DeleteOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1DeleteOptions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1DeleteOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "dryRun":
			// Unsupported kind "array" for field "DryRun".
			i.Skip()
			return true
		case "gracePeriodSeconds":
			s.GracePeriodSeconds.Reset()
			if err := s.GracePeriodSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field GracePeriodSeconds", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "orphanDependents":
			s.OrphanDependents.Reset()
			if err := s.OrphanDependents.ReadJSON(i); err != nil {
				i.ReportError("Field OrphanDependents", err.Error())
				return false
			}
			return true
		case "preconditions":
			s.Preconditions.Reset()
			if err := s.Preconditions.ReadJSON(i); err != nil {
				i.ReportError("Field Preconditions", err.Error())
				return false
			}
			return true
		case "propagationPolicy":
			s.PropagationPolicy.Reset()
			if err := s.PropagationPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field PropagationPolicy", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("groupVersion")
	j.WriteString(s.GroupVersion)
	more.More()
	j.WriteObjectField("version")
	j.WriteString(s.Version)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "groupVersion":
			s.GroupVersion = i.ReadString()
			return i.Error == nil
		case "version":
			s.Version = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MatchExpressions != nil {
		more.More()
		j.WriteObjectField("matchExpressions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.MatchExpressions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	// Unsupported kind "pointer" for field "matchLabels".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1LabelSelector json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelector) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1LabelSelector json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1LabelSelector from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "matchExpressions":
			// Unsupported kind "array" for field "MatchExpressions".
			i.Skip()
			return true
		case "matchLabels":
			// Unsupported kind "pointer" for field "MatchLabels".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("key")
	j.WriteString(s.Key)
	more.More()
	j.WriteObjectField("operator")
	j.WriteString(s.Operator)
	if s.Values != nil {
		more.More()
		j.WriteObjectField("values")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Values {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "operator":
			s.Operator = i.ReadString()
			return i.Error == nil
		case "values":
			// Unsupported kind "array" for field "Values".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ListMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Continue.Set {
		more.More()
		j.WriteObjectField("continue")
		s.Continue.WriteJSON(j)
	}
	if s.RemainingItemCount.Set {
		more.More()
		j.WriteObjectField("remainingItemCount")
		s.RemainingItemCount.WriteJSON(j)
	}
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.SelfLink.Set {
		more.More()
		j.WriteObjectField("selfLink")
		s.SelfLink.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1ListMeta json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1ListMeta) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1ListMeta json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ListMeta from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "continue":
			s.Continue.Reset()
			if err := s.Continue.ReadJSON(i); err != nil {
				i.ReportError("Field Continue", err.Error())
				return false
			}
			return true
		case "remainingItemCount":
			s.RemainingItemCount.Reset()
			if err := s.RemainingItemCount.ReadJSON(i); err != nil {
				i.ReportError("Field RemainingItemCount", err.Error())
				return false
			}
			return true
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceVersion", err.Error())
				return false
			}
			return true
		case "selfLink":
			s.SelfLink.Reset()
			if err := s.SelfLink.ReadJSON(i); err != nil {
				i.ReportError("Field SelfLink", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.FieldsType.Set {
		more.More()
		j.WriteObjectField("fieldsType")
		s.FieldsType.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "fieldsV1".
	if s.Manager.Set {
		more.More()
		j.WriteObjectField("manager")
		s.Manager.WriteJSON(j)
	}
	if s.Operation.Set {
		more.More()
		j.WriteObjectField("operation")
		s.Operation.WriteJSON(j)
	}
	if s.Subresource.Set {
		more.More()
		j.WriteObjectField("subresource")
		s.Subresource.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "time".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "fieldsType":
			s.FieldsType.Reset()
			if err := s.FieldsType.ReadJSON(i); err != nil {
				i.ReportError("Field FieldsType", err.Error())
				return false
			}
			return true
		case "fieldsV1":
			// Unsupported kind "pointer" for field "FieldsV1".
			i.Skip()
			return true
		case "manager":
			s.Manager.Reset()
			if err := s.Manager.ReadJSON(i); err != nil {
				i.ReportError("Field Manager", err.Error())
				return false
			}
			return true
		case "operation":
			s.Operation.Reset()
			if err := s.Operation.ReadJSON(i); err != nil {
				i.ReportError("Field Operation", err.Error())
				return false
			}
			return true
		case "subresource":
			s.Subresource.Reset()
			if err := s.Subresource.ReadJSON(i); err != nil {
				i.ReportError("Field Subresource", err.Error())
				return false
			}
			return true
		case "time":
			// Unsupported kind "pointer" for field "Time".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ObjectMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "annotations".
	if s.ClusterName.Set {
		more.More()
		j.WriteObjectField("clusterName")
		s.ClusterName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "creationTimestamp".
	if s.DeletionGracePeriodSeconds.Set {
		more.More()
		j.WriteObjectField("deletionGracePeriodSeconds")
		s.DeletionGracePeriodSeconds.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "deletionTimestamp".
	if s.Finalizers != nil {
		more.More()
		j.WriteObjectField("finalizers")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Finalizers {
			more.More()
			j.WriteString(elem)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.GenerateName.Set {
		more.More()
		j.WriteObjectField("generateName")
		s.GenerateName.WriteJSON(j)
	}
	if s.Generation.Set {
		more.More()
		j.WriteObjectField("generation")
		s.Generation.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "labels".
	if s.ManagedFields != nil {
		more.More()
		j.WriteObjectField("managedFields")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.ManagedFields {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.OwnerReferences != nil {
		more.More()
		j.WriteObjectField("ownerReferences")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.OwnerReferences {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.SelfLink.Set {
		more.More()
		j.WriteObjectField("selfLink")
		s.SelfLink.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1ObjectMeta json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1ObjectMeta) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1ObjectMeta json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ObjectMeta from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "annotations":
			// Unsupported kind "pointer" for field "Annotations".
			i.Skip()
			return true
		case "clusterName":
			s.ClusterName.Reset()
			if err := s.ClusterName.ReadJSON(i); err != nil {
				i.ReportError("Field ClusterName", err.Error())
				return false
			}
			return true
		case "creationTimestamp":
			// Unsupported kind "pointer" for field "CreationTimestamp".
			i.Skip()
			return true
		case "deletionGracePeriodSeconds":
			s.DeletionGracePeriodSeconds.Reset()
			if err := s.DeletionGracePeriodSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field DeletionGracePeriodSeconds", err.Error())
				return false
			}
			return true
		case "deletionTimestamp":
			// Unsupported kind "pointer" for field "DeletionTimestamp".
			i.Skip()
			return true
		case "finalizers":
			// Unsupported kind "array" for field "Finalizers".
			i.Skip()
			return true
		case "generateName":
			s.GenerateName.Reset()
			if err := s.GenerateName.ReadJSON(i); err != nil {
				i.ReportError("Field GenerateName", err.Error())
				return false
			}
			return true
		case "generation":
			s.Generation.Reset()
			if err := s.Generation.ReadJSON(i); err != nil {
				i.ReportError("Field Generation", err.Error())
				return false
			}
			return true
		case "labels":
			// Unsupported kind "pointer" for field "Labels".
			i.Skip()
			return true
		case "managedFields":
			// Unsupported kind "array" for field "ManagedFields".
			i.Skip()
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		case "ownerReferences":
			// Unsupported kind "array" for field "OwnerReferences".
			i.Skip()
			return true
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceVersion", err.Error())
				return false
			}
			return true
		case "selfLink":
			s.SelfLink.Reset()
			if err := s.SelfLink.ReadJSON(i); err != nil {
				i.ReportError("Field SelfLink", err.Error())
				return false
			}
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1OwnerReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("apiVersion")
	j.WriteString(s.ApiVersion)
	if s.BlockOwnerDeletion.Set {
		more.More()
		j.WriteObjectField("blockOwnerDeletion")
		s.BlockOwnerDeletion.WriteJSON(j)
	}
	if s.Controller.Set {
		more.More()
		j.WriteObjectField("controller")
		s.Controller.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("kind")
	j.WriteString(s.Kind)
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("uid")
	j.WriteString(s.UID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1OwnerReference json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1OwnerReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1OwnerReference json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1OwnerReference from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion = i.ReadString()
			return i.Error == nil
		case "blockOwnerDeletion":
			s.BlockOwnerDeletion.Reset()
			if err := s.BlockOwnerDeletion.ReadJSON(i); err != nil {
				i.ReportError("Field BlockOwnerDeletion", err.Error())
				return false
			}
			return true
		case "controller":
			s.Controller.Reset()
			if err := s.Controller.ReadJSON(i); err != nil {
				i.ReportError("Field Controller", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "uid":
			s.UID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Preconditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ResourceVersion.Set {
		more.More()
		j.WriteObjectField("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1Preconditions json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1Preconditions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1Preconditions json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1Preconditions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Preconditions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Preconditions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceVersion", err.Error())
				return false
			}
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("clientCIDR")
	j.WriteString(s.ClientCIDR)
	more.More()
	j.WriteObjectField("serverAddress")
	j.WriteString(s.ServerAddress)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "clientCIDR":
			s.ClientCIDR = i.ReadString()
			return i.Error == nil
		case "serverAddress":
			s.ServerAddress = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Status) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Code.Set {
		more.More()
		j.WriteObjectField("code")
		s.Code.WriteJSON(j)
	}
	if s.Details.Set {
		more.More()
		j.WriteObjectField("details")
		s.Details.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1Status json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1Status) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1Status json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1Status) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Status from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Status) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "code":
			s.Code.Reset()
			if err := s.Code.ReadJSON(i); err != nil {
				i.ReportError("Field Code", err.Error())
				return false
			}
			return true
		case "details":
			s.Details.Reset()
			if err := s.Details.ReadJSON(i); err != nil {
				i.ReportError("Field Details", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1StatusCause) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Field.Set {
		more.More()
		j.WriteObjectField("field")
		s.Field.WriteJSON(j)
	}
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1StatusCause json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1StatusCause) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1StatusCause json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1StatusCause) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1StatusCause from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1StatusCause) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "field":
			s.Field.Reset()
			if err := s.Field.ReadJSON(i); err != nil {
				i.ReportError("Field Field", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1StatusDetails) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Causes != nil {
		more.More()
		j.WriteObjectField("causes")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Causes {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.RetryAfterSeconds.Set {
		more.More()
		j.WriteObjectField("retryAfterSeconds")
		s.RetryAfterSeconds.WriteJSON(j)
	}
	if s.UID.Set {
		more.More()
		j.WriteObjectField("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1StatusDetails json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1StatusDetails) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1StatusDetails json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1StatusDetails) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1StatusDetails from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1StatusDetails) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "causes":
			// Unsupported kind "array" for field "Causes".
			i.Skip()
			return true
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "retryAfterSeconds":
			s.RetryAfterSeconds.Reset()
			if err := s.RetryAfterSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field RetryAfterSeconds", err.Error())
				return false
			}
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1WatchEvent) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "alias" for field "object".
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1WatchEvent json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1WatchEvent) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1WatchEvent json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1WatchEvent) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1WatchEvent from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1WatchEvent) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "object":
			// Unsupported kind "alias" for field "Object".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgVersionInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("buildDate")
	j.WriteString(s.BuildDate)
	more.More()
	j.WriteObjectField("compiler")
	j.WriteString(s.Compiler)
	more.More()
	j.WriteObjectField("gitCommit")
	j.WriteString(s.GitCommit)
	more.More()
	j.WriteObjectField("gitTreeState")
	j.WriteString(s.GitTreeState)
	more.More()
	j.WriteObjectField("gitVersion")
	j.WriteString(s.GitVersion)
	more.More()
	j.WriteObjectField("goVersion")
	j.WriteString(s.GoVersion)
	more.More()
	j.WriteObjectField("major")
	j.WriteString(s.Major)
	more.More()
	j.WriteObjectField("minor")
	j.WriteString(s.Minor)
	more.More()
	j.WriteObjectField("platform")
	j.WriteString(s.Platform)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgVersionInfo json value to io.Writer.
func (s IoK8sApimachineryPkgVersionInfo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgVersionInfo json value from io.Reader.
func (s *IoK8sApimachineryPkgVersionInfo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgVersionInfo from json stream.
func (s *IoK8sApimachineryPkgVersionInfo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "buildDate":
			s.BuildDate = i.ReadString()
			return i.Error == nil
		case "compiler":
			s.Compiler = i.ReadString()
			return i.Error == nil
		case "gitCommit":
			s.GitCommit = i.ReadString()
			return i.Error == nil
		case "gitTreeState":
			s.GitTreeState = i.ReadString()
			return i.Error == nil
		case "gitVersion":
			s.GitVersion = i.ReadString()
			return i.Error == nil
		case "goVersion":
			s.GoVersion = i.ReadString()
			return i.Error == nil
		case "major":
			s.Major = i.ReadString()
			return i.Error == nil
		case "minor":
			s.Minor = i.ReadString()
			return i.Error == nil
		case "platform":
			s.Platform = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	if s.Spec.Set {
		more.More()
		j.WriteObjectField("spec")
		s.Spec.WriteJSON(j)
	}
	if s.Status.Set {
		more.More()
		j.WriteObjectField("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1APIService json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIService json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIService from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "spec":
			s.Spec.Reset()
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "lastTransitionTime".
	if s.Message.Set {
		more.More()
		j.WriteObjectField("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		more.More()
		j.WriteObjectField("reason")
		s.Reason.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("status")
	j.WriteString(s.Status)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ApiVersion.Set {
		more.More()
		j.WriteObjectField("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("items")
	more.Down()
	j.WriteArrayStart()
	for _, elem := range s.Items {
		more.More()
		elem.WriteJSON(j)
	}
	j.WriteArrayEnd()
	more.Up()
	if s.Kind.Set {
		more.More()
		j.WriteObjectField("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Metadata.Set {
		more.More()
		j.WriteObjectField("metadata")
		s.Metadata.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			s.Metadata.Reset()
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	// Unsupported kind "pointer" for field "caBundle".
	if s.Group.Set {
		more.More()
		j.WriteObjectField("group")
		s.Group.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("groupPriorityMinimum")
	j.WriteInt32(s.GroupPriorityMinimum)
	if s.InsecureSkipTLSVerify.Set {
		more.More()
		j.WriteObjectField("insecureSkipTLSVerify")
		s.InsecureSkipTLSVerify.WriteJSON(j)
	}
	if s.Service.Set {
		more.More()
		j.WriteObjectField("service")
		s.Service.WriteJSON(j)
	}
	if s.Version.Set {
		more.More()
		j.WriteObjectField("version")
		s.Version.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("versionPriority")
	j.WriteInt32(s.VersionPriority)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "caBundle":
			// Unsupported kind "pointer" for field "CaBundle".
			i.Skip()
			return true
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "groupPriorityMinimum":
			s.GroupPriorityMinimum = i.ReadInt32()
			return i.Error == nil
		case "insecureSkipTLSVerify":
			s.InsecureSkipTLSVerify.Reset()
			if err := s.InsecureSkipTLSVerify.ReadJSON(i); err != nil {
				i.ReportError("Field InsecureSkipTLSVerify", err.Error())
				return false
			}
			return true
		case "service":
			s.Service.Reset()
			if err := s.Service.ReadJSON(i); err != nil {
				i.ReportError("Field Service", err.Error())
				return false
			}
			return true
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(i); err != nil {
				i.ReportError("Field Version", err.Error())
				return false
			}
			return true
		case "versionPriority":
			s.VersionPriority = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Conditions != nil {
		more.More()
		j.WriteObjectField("conditions")
		more.Down()
		j.WriteArrayStart()
		for _, elem := range s.Conditions {
			more.More()
			elem.WriteJSON(j)
		}
		j.WriteArrayEnd()
		more.Up()
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		more.More()
		j.WriteObjectField("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Port.Set {
		more.More()
		j.WriteObjectField("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				i.ReportError("Field Port", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(j *json.Stream) {
	j.WriteBool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.BoolValue:
		o.Set = true
		o.Value = bool(i.ReadBool())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBool", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of float64 to json stream.
func (o OptFloat64) WriteJSON(j *json.Stream) {
	j.WriteFloat64(float64(o.Value))
}

// ReadJSON reads json value of float64 from json iterator.
func (o *OptFloat64) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = float64(i.ReadFloat64())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFloat64", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of int32 to json stream.
func (o OptInt32) WriteJSON(j *json.Stream) {
	j.WriteInt32(int32(o.Value))
}

// ReadJSON reads json value of int32 from json iterator.
func (o *OptInt32) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = int32(i.ReadInt32())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInt32", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of int64 to json stream.
func (o OptInt64) WriteJSON(j *json.Stream) {
	j.WriteInt64(int64(o.Value))
}

// ReadJSON reads json value of int64 from json iterator.
func (o *OptInt64) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = int64(i.ReadInt64())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInt64", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAdmissionregistrationV1ServiceReference to json stream.
func (o OptIoK8sAPIAdmissionregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAdmissionregistrationV1ServiceReference from json iterator.
func (o *OptIoK8sAPIAdmissionregistrationV1ServiceReference) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAdmissionregistrationV1ServiceReference", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1DaemonSetSpec to json stream.
func (o OptIoK8sAPIAppsV1DaemonSetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DaemonSetSpec from json iterator.
func (o *OptIoK8sAPIAppsV1DaemonSetSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1DaemonSetSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1DaemonSetStatus to json stream.
func (o OptIoK8sAPIAppsV1DaemonSetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DaemonSetStatus from json iterator.
func (o *OptIoK8sAPIAppsV1DaemonSetStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1DaemonSetStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1DaemonSetUpdateStrategy to json stream.
func (o OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DaemonSetUpdateStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1DaemonSetUpdateStrategy", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1DeploymentSpec to json stream.
func (o OptIoK8sAPIAppsV1DeploymentSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DeploymentSpec from json iterator.
func (o *OptIoK8sAPIAppsV1DeploymentSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1DeploymentSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1DeploymentStatus to json stream.
func (o OptIoK8sAPIAppsV1DeploymentStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DeploymentStatus from json iterator.
func (o *OptIoK8sAPIAppsV1DeploymentStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1DeploymentStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1DeploymentStrategy to json stream.
func (o OptIoK8sAPIAppsV1DeploymentStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1DeploymentStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1DeploymentStrategy) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1DeploymentStrategy", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1ReplicaSetSpec to json stream.
func (o OptIoK8sAPIAppsV1ReplicaSetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1ReplicaSetSpec from json iterator.
func (o *OptIoK8sAPIAppsV1ReplicaSetSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1ReplicaSetSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1ReplicaSetStatus to json stream.
func (o OptIoK8sAPIAppsV1ReplicaSetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1ReplicaSetStatus from json iterator.
func (o *OptIoK8sAPIAppsV1ReplicaSetStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1ReplicaSetStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1RollingUpdateDaemonSet to json stream.
func (o OptIoK8sAPIAppsV1RollingUpdateDaemonSet) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1RollingUpdateDaemonSet from json iterator.
func (o *OptIoK8sAPIAppsV1RollingUpdateDaemonSet) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1RollingUpdateDaemonSet", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1RollingUpdateDeployment to json stream.
func (o OptIoK8sAPIAppsV1RollingUpdateDeployment) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1RollingUpdateDeployment from json iterator.
func (o *OptIoK8sAPIAppsV1RollingUpdateDeployment) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1RollingUpdateDeployment", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy to json stream.
func (o OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1StatefulSetSpec to json stream.
func (o OptIoK8sAPIAppsV1StatefulSetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1StatefulSetSpec from json iterator.
func (o *OptIoK8sAPIAppsV1StatefulSetSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1StatefulSetSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1StatefulSetStatus to json stream.
func (o OptIoK8sAPIAppsV1StatefulSetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1StatefulSetStatus from json iterator.
func (o *OptIoK8sAPIAppsV1StatefulSetStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1StatefulSetStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAppsV1StatefulSetUpdateStrategy to json stream.
func (o OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAppsV1StatefulSetUpdateStrategy from json iterator.
func (o *OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAppsV1StatefulSetUpdateStrategy", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAuthenticationV1TokenReviewStatus to json stream.
func (o OptIoK8sAPIAuthenticationV1TokenReviewStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthenticationV1TokenReviewStatus from json iterator.
func (o *OptIoK8sAPIAuthenticationV1TokenReviewStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAuthenticationV1TokenReviewStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAuthenticationV1UserInfo to json stream.
func (o OptIoK8sAPIAuthenticationV1UserInfo) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthenticationV1UserInfo from json iterator.
func (o *OptIoK8sAPIAuthenticationV1UserInfo) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAuthenticationV1UserInfo", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1NonResourceAttributes to json stream.
func (o OptIoK8sAPIAuthorizationV1NonResourceAttributes) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1NonResourceAttributes from json iterator.
func (o *OptIoK8sAPIAuthorizationV1NonResourceAttributes) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAuthorizationV1NonResourceAttributes", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1ResourceAttributes to json stream.
func (o OptIoK8sAPIAuthorizationV1ResourceAttributes) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1ResourceAttributes from json iterator.
func (o *OptIoK8sAPIAuthorizationV1ResourceAttributes) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAuthorizationV1ResourceAttributes", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1SubjectAccessReviewStatus to json stream.
func (o OptIoK8sAPIAuthorizationV1SubjectAccessReviewStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1SubjectAccessReviewStatus from json iterator.
func (o *OptIoK8sAPIAuthorizationV1SubjectAccessReviewStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAuthorizationV1SubjectAccessReviewStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAuthorizationV1SubjectRulesReviewStatus to json stream.
func (o OptIoK8sAPIAuthorizationV1SubjectRulesReviewStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAuthorizationV1SubjectRulesReviewStatus from json iterator.
func (o *OptIoK8sAPIAuthorizationV1SubjectRulesReviewStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAuthorizationV1SubjectRulesReviewStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec to json stream.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec from json iterator.
func (o *OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus to json stream.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ExternalMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ExternalMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ExternalMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ExternalMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ObjectMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ObjectMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ObjectMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ObjectMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1PodsMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1PodsMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1PodsMetricSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1PodsMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1PodsMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta1ResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta1ResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ExternalMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ExternalMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ExternalMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ExternalMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HPAScalingRules to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HPAScalingRules from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2HPAScalingRules", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ObjectMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ObjectMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ObjectMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ObjectMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2PodsMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2PodsMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2PodsMetricSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2PodsMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2PodsMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ResourceMetricSource to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ResourceMetricSource from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIAutoscalingV2beta2ResourceMetricStatus to json stream.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIAutoscalingV2beta2ResourceMetricStatus from json iterator.
func (o *OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIBatchV1CronJobSpec to json stream.
func (o OptIoK8sAPIBatchV1CronJobSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1CronJobSpec from json iterator.
func (o *OptIoK8sAPIBatchV1CronJobSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIBatchV1CronJobSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIBatchV1CronJobStatus to json stream.
func (o OptIoK8sAPIBatchV1CronJobStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1CronJobStatus from json iterator.
func (o *OptIoK8sAPIBatchV1CronJobStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIBatchV1CronJobStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIBatchV1JobSpec to json stream.
func (o OptIoK8sAPIBatchV1JobSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1JobSpec from json iterator.
func (o *OptIoK8sAPIBatchV1JobSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIBatchV1JobSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIBatchV1JobStatus to json stream.
func (o OptIoK8sAPIBatchV1JobStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1JobStatus from json iterator.
func (o *OptIoK8sAPIBatchV1JobStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIBatchV1JobStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIBatchV1UncountedTerminatedPods to json stream.
func (o OptIoK8sAPIBatchV1UncountedTerminatedPods) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1UncountedTerminatedPods from json iterator.
func (o *OptIoK8sAPIBatchV1UncountedTerminatedPods) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIBatchV1UncountedTerminatedPods", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIBatchV1beta1CronJobSpec to json stream.
func (o OptIoK8sAPIBatchV1beta1CronJobSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1beta1CronJobSpec from json iterator.
func (o *OptIoK8sAPIBatchV1beta1CronJobSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIBatchV1beta1CronJobSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIBatchV1beta1CronJobStatus to json stream.
func (o OptIoK8sAPIBatchV1beta1CronJobStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIBatchV1beta1CronJobStatus from json iterator.
func (o *OptIoK8sAPIBatchV1beta1CronJobStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIBatchV1beta1CronJobStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICertificatesV1CertificateSigningRequestStatus to json stream.
func (o OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICertificatesV1CertificateSigningRequestStatus from json iterator.
func (o *OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICertificatesV1CertificateSigningRequestStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoordinationV1LeaseSpec to json stream.
func (o OptIoK8sAPICoordinationV1LeaseSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoordinationV1LeaseSpec from json iterator.
func (o *OptIoK8sAPICoordinationV1LeaseSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoordinationV1LeaseSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1Affinity to json stream.
func (o OptIoK8sAPICoreV1Affinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Affinity from json iterator.
func (o *OptIoK8sAPICoreV1Affinity) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1Affinity", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1AzureDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AzureDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AzureDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AzureDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1AzureDiskVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1AzureFilePersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AzureFilePersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1AzureFilePersistentVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1AzureFileVolumeSource to json stream.
func (o OptIoK8sAPICoreV1AzureFileVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1AzureFileVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1AzureFileVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1AzureFileVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1CSIPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CSIPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CSIPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1CSIPersistentVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1CSIVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CSIVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CSIVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CSIVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1CSIVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1Capabilities to json stream.
func (o OptIoK8sAPICoreV1Capabilities) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Capabilities from json iterator.
func (o *OptIoK8sAPICoreV1Capabilities) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1Capabilities", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1CephFSPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CephFSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CephFSPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CephFSPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1CephFSPersistentVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1CephFSVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CephFSVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CephFSVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CephFSVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1CephFSVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1CinderPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CinderPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CinderPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CinderPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1CinderPersistentVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1CinderVolumeSource to json stream.
func (o OptIoK8sAPICoreV1CinderVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1CinderVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1CinderVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1CinderVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ClientIPConfig to json stream.
func (o OptIoK8sAPICoreV1ClientIPConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ClientIPConfig from json iterator.
func (o *OptIoK8sAPICoreV1ClientIPConfig) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ClientIPConfig", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapEnvSource to json stream.
func (o OptIoK8sAPICoreV1ConfigMapEnvSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapEnvSource from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapEnvSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ConfigMapEnvSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapKeySelector to json stream.
func (o OptIoK8sAPICoreV1ConfigMapKeySelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapKeySelector from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapKeySelector) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ConfigMapKeySelector", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapNodeConfigSource to json stream.
func (o OptIoK8sAPICoreV1ConfigMapNodeConfigSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapNodeConfigSource from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapNodeConfigSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ConfigMapNodeConfigSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapProjection to json stream.
func (o OptIoK8sAPICoreV1ConfigMapProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapProjection from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapProjection) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ConfigMapProjection", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ConfigMapVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ConfigMapVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ConfigMapVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ConfigMapVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ConfigMapVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerState to json stream.
func (o OptIoK8sAPICoreV1ContainerState) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerState from json iterator.
func (o *OptIoK8sAPICoreV1ContainerState) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ContainerState", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerStateRunning to json stream.
func (o OptIoK8sAPICoreV1ContainerStateRunning) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerStateRunning from json iterator.
func (o *OptIoK8sAPICoreV1ContainerStateRunning) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ContainerStateRunning", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerStateTerminated to json stream.
func (o OptIoK8sAPICoreV1ContainerStateTerminated) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerStateTerminated from json iterator.
func (o *OptIoK8sAPICoreV1ContainerStateTerminated) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ContainerStateTerminated", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ContainerStateWaiting to json stream.
func (o OptIoK8sAPICoreV1ContainerStateWaiting) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ContainerStateWaiting from json iterator.
func (o *OptIoK8sAPICoreV1ContainerStateWaiting) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ContainerStateWaiting", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1DaemonEndpoint to json stream.
func (o OptIoK8sAPICoreV1DaemonEndpoint) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1DaemonEndpoint from json iterator.
func (o *OptIoK8sAPICoreV1DaemonEndpoint) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1DaemonEndpoint", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1DownwardAPIProjection to json stream.
func (o OptIoK8sAPICoreV1DownwardAPIProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1DownwardAPIProjection from json iterator.
func (o *OptIoK8sAPICoreV1DownwardAPIProjection) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1DownwardAPIProjection", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1DownwardAPIVolumeSource to json stream.
func (o OptIoK8sAPICoreV1DownwardAPIVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1DownwardAPIVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1DownwardAPIVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1DownwardAPIVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1EmptyDirVolumeSource to json stream.
func (o OptIoK8sAPICoreV1EmptyDirVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EmptyDirVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1EmptyDirVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1EmptyDirVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1EnvVarSource to json stream.
func (o OptIoK8sAPICoreV1EnvVarSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EnvVarSource from json iterator.
func (o *OptIoK8sAPICoreV1EnvVarSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1EnvVarSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1EphemeralVolumeSource to json stream.
func (o OptIoK8sAPICoreV1EphemeralVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EphemeralVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1EphemeralVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1EphemeralVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1EventSeries to json stream.
func (o OptIoK8sAPICoreV1EventSeries) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EventSeries from json iterator.
func (o *OptIoK8sAPICoreV1EventSeries) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1EventSeries", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1EventSource to json stream.
func (o OptIoK8sAPICoreV1EventSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1EventSource from json iterator.
func (o *OptIoK8sAPICoreV1EventSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1EventSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ExecAction to json stream.
func (o OptIoK8sAPICoreV1ExecAction) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ExecAction from json iterator.
func (o *OptIoK8sAPICoreV1ExecAction) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ExecAction", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1FCVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FCVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FCVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FCVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1FCVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1FlexPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FlexPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FlexPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FlexPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1FlexPersistentVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1FlexVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FlexVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FlexVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FlexVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1FlexVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1FlockerVolumeSource to json stream.
func (o OptIoK8sAPICoreV1FlockerVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1FlockerVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1FlockerVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1FlockerVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1GCEPersistentDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GCEPersistentDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1GitRepoVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GitRepoVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GitRepoVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GitRepoVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1GitRepoVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1GlusterfsPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GlusterfsPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1GlusterfsVolumeSource to json stream.
func (o OptIoK8sAPICoreV1GlusterfsVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1GlusterfsVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1GlusterfsVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1GlusterfsVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1HTTPGetAction to json stream.
func (o OptIoK8sAPICoreV1HTTPGetAction) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1HTTPGetAction from json iterator.
func (o *OptIoK8sAPICoreV1HTTPGetAction) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1HTTPGetAction", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1Handler to json stream.
func (o OptIoK8sAPICoreV1Handler) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Handler from json iterator.
func (o *OptIoK8sAPICoreV1Handler) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1Handler", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1HostPathVolumeSource to json stream.
func (o OptIoK8sAPICoreV1HostPathVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1HostPathVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1HostPathVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1HostPathVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ISCSIPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ISCSIPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ISCSIPersistentVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ISCSIVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ISCSIVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ISCSIVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ISCSIVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ISCSIVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1Lifecycle to json stream.
func (o OptIoK8sAPICoreV1Lifecycle) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Lifecycle from json iterator.
func (o *OptIoK8sAPICoreV1Lifecycle) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1Lifecycle", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1LimitRangeSpec to json stream.
func (o OptIoK8sAPICoreV1LimitRangeSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LimitRangeSpec from json iterator.
func (o *OptIoK8sAPICoreV1LimitRangeSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1LimitRangeSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1LoadBalancerStatus to json stream.
func (o OptIoK8sAPICoreV1LoadBalancerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LoadBalancerStatus from json iterator.
func (o *OptIoK8sAPICoreV1LoadBalancerStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1LoadBalancerStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1LocalObjectReference to json stream.
func (o OptIoK8sAPICoreV1LocalObjectReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LocalObjectReference from json iterator.
func (o *OptIoK8sAPICoreV1LocalObjectReference) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1LocalObjectReference", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1LocalVolumeSource to json stream.
func (o OptIoK8sAPICoreV1LocalVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1LocalVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1LocalVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1LocalVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1NFSVolumeSource to json stream.
func (o OptIoK8sAPICoreV1NFSVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NFSVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1NFSVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1NFSVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1NamespaceSpec to json stream.
func (o OptIoK8sAPICoreV1NamespaceSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NamespaceSpec from json iterator.
func (o *OptIoK8sAPICoreV1NamespaceSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1NamespaceSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1NamespaceStatus to json stream.
func (o OptIoK8sAPICoreV1NamespaceStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NamespaceStatus from json iterator.
func (o *OptIoK8sAPICoreV1NamespaceStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1NamespaceStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeAffinity to json stream.
func (o OptIoK8sAPICoreV1NodeAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeAffinity from json iterator.
func (o *OptIoK8sAPICoreV1NodeAffinity) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1NodeAffinity", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeConfigSource to json stream.
func (o OptIoK8sAPICoreV1NodeConfigSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeConfigSource from json iterator.
func (o *OptIoK8sAPICoreV1NodeConfigSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1NodeConfigSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeConfigStatus to json stream.
func (o OptIoK8sAPICoreV1NodeConfigStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeConfigStatus from json iterator.
func (o *OptIoK8sAPICoreV1NodeConfigStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1NodeConfigStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeDaemonEndpoints to json stream.
func (o OptIoK8sAPICoreV1NodeDaemonEndpoints) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeDaemonEndpoints from json iterator.
func (o *OptIoK8sAPICoreV1NodeDaemonEndpoints) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1NodeDaemonEndpoints", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeSelector to json stream.
func (o OptIoK8sAPICoreV1NodeSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeSelector from json iterator.
func (o *OptIoK8sAPICoreV1NodeSelector) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1NodeSelector", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeSpec to json stream.
func (o OptIoK8sAPICoreV1NodeSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeSpec from json iterator.
func (o *OptIoK8sAPICoreV1NodeSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1NodeSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeStatus to json stream.
func (o OptIoK8sAPICoreV1NodeStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeStatus from json iterator.
func (o *OptIoK8sAPICoreV1NodeStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1NodeStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1NodeSystemInfo to json stream.
func (o OptIoK8sAPICoreV1NodeSystemInfo) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1NodeSystemInfo from json iterator.
func (o *OptIoK8sAPICoreV1NodeSystemInfo) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1NodeSystemInfo", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ObjectFieldSelector to json stream.
func (o OptIoK8sAPICoreV1ObjectFieldSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ObjectFieldSelector from json iterator.
func (o *OptIoK8sAPICoreV1ObjectFieldSelector) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ObjectFieldSelector", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ObjectReference to json stream.
func (o OptIoK8sAPICoreV1ObjectReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ObjectReference from json iterator.
func (o *OptIoK8sAPICoreV1ObjectReference) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ObjectReference", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimSpec to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimSpec from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PersistentVolumeClaimSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimStatus to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimStatus from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PersistentVolumeClaimStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimTemplate to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimTemplate from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PersistentVolumeClaimTemplate", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeClaimVolumeSource to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeClaimVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeSpec to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeSpec from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PersistentVolumeSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PersistentVolumeStatus to json stream.
func (o OptIoK8sAPICoreV1PersistentVolumeStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PersistentVolumeStatus from json iterator.
func (o *OptIoK8sAPICoreV1PersistentVolumeStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PersistentVolumeStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PhotonPersistentDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PhotonPersistentDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PodAffinity to json stream.
func (o OptIoK8sAPICoreV1PodAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodAffinity from json iterator.
func (o *OptIoK8sAPICoreV1PodAffinity) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PodAffinity", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PodAntiAffinity to json stream.
func (o OptIoK8sAPICoreV1PodAntiAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodAntiAffinity from json iterator.
func (o *OptIoK8sAPICoreV1PodAntiAffinity) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PodAntiAffinity", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PodDNSConfig to json stream.
func (o OptIoK8sAPICoreV1PodDNSConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodDNSConfig from json iterator.
func (o *OptIoK8sAPICoreV1PodDNSConfig) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PodDNSConfig", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PodSecurityContext to json stream.
func (o OptIoK8sAPICoreV1PodSecurityContext) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodSecurityContext from json iterator.
func (o *OptIoK8sAPICoreV1PodSecurityContext) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PodSecurityContext", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PodSpec to json stream.
func (o OptIoK8sAPICoreV1PodSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodSpec from json iterator.
func (o *OptIoK8sAPICoreV1PodSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PodSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PodStatus to json stream.
func (o OptIoK8sAPICoreV1PodStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodStatus from json iterator.
func (o *OptIoK8sAPICoreV1PodStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PodStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PodTemplateSpec to json stream.
func (o OptIoK8sAPICoreV1PodTemplateSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PodTemplateSpec from json iterator.
func (o *OptIoK8sAPICoreV1PodTemplateSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PodTemplateSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1PortworxVolumeSource to json stream.
func (o OptIoK8sAPICoreV1PortworxVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1PortworxVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1PortworxVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1PortworxVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1Probe to json stream.
func (o OptIoK8sAPICoreV1Probe) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1Probe from json iterator.
func (o *OptIoK8sAPICoreV1Probe) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1Probe", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ProjectedVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ProjectedVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ProjectedVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ProjectedVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ProjectedVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1QuobyteVolumeSource to json stream.
func (o OptIoK8sAPICoreV1QuobyteVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1QuobyteVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1QuobyteVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1QuobyteVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1RBDPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1RBDPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1RBDPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1RBDPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1RBDPersistentVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1RBDVolumeSource to json stream.
func (o OptIoK8sAPICoreV1RBDVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1RBDVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1RBDVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1RBDVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ReplicationControllerSpec to json stream.
func (o OptIoK8sAPICoreV1ReplicationControllerSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ReplicationControllerSpec from json iterator.
func (o *OptIoK8sAPICoreV1ReplicationControllerSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ReplicationControllerSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ReplicationControllerStatus to json stream.
func (o OptIoK8sAPICoreV1ReplicationControllerStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ReplicationControllerStatus from json iterator.
func (o *OptIoK8sAPICoreV1ReplicationControllerStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ReplicationControllerStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceFieldSelector to json stream.
func (o OptIoK8sAPICoreV1ResourceFieldSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceFieldSelector from json iterator.
func (o *OptIoK8sAPICoreV1ResourceFieldSelector) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ResourceFieldSelector", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceQuotaSpec to json stream.
func (o OptIoK8sAPICoreV1ResourceQuotaSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceQuotaSpec from json iterator.
func (o *OptIoK8sAPICoreV1ResourceQuotaSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ResourceQuotaSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceQuotaStatus to json stream.
func (o OptIoK8sAPICoreV1ResourceQuotaStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceQuotaStatus from json iterator.
func (o *OptIoK8sAPICoreV1ResourceQuotaStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ResourceQuotaStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ResourceRequirements to json stream.
func (o OptIoK8sAPICoreV1ResourceRequirements) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ResourceRequirements from json iterator.
func (o *OptIoK8sAPICoreV1ResourceRequirements) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ResourceRequirements", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1SELinuxOptions to json stream.
func (o OptIoK8sAPICoreV1SELinuxOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SELinuxOptions from json iterator.
func (o *OptIoK8sAPICoreV1SELinuxOptions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1SELinuxOptions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ScaleIOPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ScaleIOPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ScaleIOVolumeSource to json stream.
func (o OptIoK8sAPICoreV1ScaleIOVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ScaleIOVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1ScaleIOVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ScaleIOVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ScopeSelector to json stream.
func (o OptIoK8sAPICoreV1ScopeSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ScopeSelector from json iterator.
func (o *OptIoK8sAPICoreV1ScopeSelector) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ScopeSelector", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1SeccompProfile to json stream.
func (o OptIoK8sAPICoreV1SeccompProfile) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SeccompProfile from json iterator.
func (o *OptIoK8sAPICoreV1SeccompProfile) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1SeccompProfile", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretEnvSource to json stream.
func (o OptIoK8sAPICoreV1SecretEnvSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretEnvSource from json iterator.
func (o *OptIoK8sAPICoreV1SecretEnvSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1SecretEnvSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretKeySelector to json stream.
func (o OptIoK8sAPICoreV1SecretKeySelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretKeySelector from json iterator.
func (o *OptIoK8sAPICoreV1SecretKeySelector) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1SecretKeySelector", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretProjection to json stream.
func (o OptIoK8sAPICoreV1SecretProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretProjection from json iterator.
func (o *OptIoK8sAPICoreV1SecretProjection) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1SecretProjection", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretReference to json stream.
func (o OptIoK8sAPICoreV1SecretReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretReference from json iterator.
func (o *OptIoK8sAPICoreV1SecretReference) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1SecretReference", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1SecretVolumeSource to json stream.
func (o OptIoK8sAPICoreV1SecretVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecretVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1SecretVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1SecretVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1SecurityContext to json stream.
func (o OptIoK8sAPICoreV1SecurityContext) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SecurityContext from json iterator.
func (o *OptIoK8sAPICoreV1SecurityContext) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1SecurityContext", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ServiceAccountTokenProjection to json stream.
func (o OptIoK8sAPICoreV1ServiceAccountTokenProjection) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ServiceAccountTokenProjection from json iterator.
func (o *OptIoK8sAPICoreV1ServiceAccountTokenProjection) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ServiceAccountTokenProjection", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ServiceSpec to json stream.
func (o OptIoK8sAPICoreV1ServiceSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ServiceSpec from json iterator.
func (o *OptIoK8sAPICoreV1ServiceSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ServiceSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1ServiceStatus to json stream.
func (o OptIoK8sAPICoreV1ServiceStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1ServiceStatus from json iterator.
func (o *OptIoK8sAPICoreV1ServiceStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1ServiceStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1SessionAffinityConfig to json stream.
func (o OptIoK8sAPICoreV1SessionAffinityConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1SessionAffinityConfig from json iterator.
func (o *OptIoK8sAPICoreV1SessionAffinityConfig) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1SessionAffinityConfig", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1StorageOSPersistentVolumeSource to json stream.
func (o OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1StorageOSPersistentVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1StorageOSPersistentVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1StorageOSVolumeSource to json stream.
func (o OptIoK8sAPICoreV1StorageOSVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1StorageOSVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1StorageOSVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1StorageOSVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1TCPSocketAction to json stream.
func (o OptIoK8sAPICoreV1TCPSocketAction) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1TCPSocketAction from json iterator.
func (o *OptIoK8sAPICoreV1TCPSocketAction) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1TCPSocketAction", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1TypedLocalObjectReference to json stream.
func (o OptIoK8sAPICoreV1TypedLocalObjectReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1TypedLocalObjectReference from json iterator.
func (o *OptIoK8sAPICoreV1TypedLocalObjectReference) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1TypedLocalObjectReference", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1VolumeNodeAffinity to json stream.
func (o OptIoK8sAPICoreV1VolumeNodeAffinity) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1VolumeNodeAffinity from json iterator.
func (o *OptIoK8sAPICoreV1VolumeNodeAffinity) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1VolumeNodeAffinity", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1VsphereVirtualDiskVolumeSource to json stream.
func (o OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1VsphereVirtualDiskVolumeSource from json iterator.
func (o *OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPICoreV1WindowsSecurityContextOptions to json stream.
func (o OptIoK8sAPICoreV1WindowsSecurityContextOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPICoreV1WindowsSecurityContextOptions from json iterator.
func (o *OptIoK8sAPICoreV1WindowsSecurityContextOptions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPICoreV1WindowsSecurityContextOptions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1EndpointConditions to json stream.
func (o OptIoK8sAPIDiscoveryV1EndpointConditions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1EndpointConditions from json iterator.
func (o *OptIoK8sAPIDiscoveryV1EndpointConditions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIDiscoveryV1EndpointConditions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1EndpointHints to json stream.
func (o OptIoK8sAPIDiscoveryV1EndpointHints) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1EndpointHints from json iterator.
func (o *OptIoK8sAPIDiscoveryV1EndpointHints) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIDiscoveryV1EndpointHints", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1beta1EndpointConditions to json stream.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointConditions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1beta1EndpointConditions from json iterator.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointConditions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIDiscoveryV1beta1EndpointConditions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIDiscoveryV1beta1EndpointHints to json stream.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointHints) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIDiscoveryV1beta1EndpointHints from json iterator.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointHints) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIDiscoveryV1beta1EndpointHints", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIEventsV1EventSeries to json stream.
func (o OptIoK8sAPIEventsV1EventSeries) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIEventsV1EventSeries from json iterator.
func (o *OptIoK8sAPIEventsV1EventSeries) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIEventsV1EventSeries", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIEventsV1beta1EventSeries to json stream.
func (o OptIoK8sAPIEventsV1beta1EventSeries) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIEventsV1beta1EventSeries from json iterator.
func (o *OptIoK8sAPIEventsV1beta1EventSeries) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIEventsV1beta1EventSeries", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1GroupSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1GroupSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1GroupSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1GroupSubject) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta1GroupSubject", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1LimitResponse to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitResponse) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1LimitResponse from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1LimitResponse) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta1LimitResponse", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1QueuingConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1QueuingConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta1UserSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta1UserSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta1UserSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta1UserSubject) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta1UserSubject", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2GroupSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2GroupSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2GroupSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2GroupSubject) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta2GroupSubject", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2LimitResponse to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitResponse) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2LimitResponse from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2LimitResponse) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta2LimitResponse", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2QueuingConfiguration to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2QueuingConfiguration from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIFlowcontrolV1beta2UserSubject to json stream.
func (o OptIoK8sAPIFlowcontrolV1beta2UserSubject) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIFlowcontrolV1beta2UserSubject from json iterator.
func (o *OptIoK8sAPIFlowcontrolV1beta2UserSubject) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIFlowcontrolV1beta2UserSubject", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINetworkingV1HTTPIngressRuleValue to json stream.
func (o OptIoK8sAPINetworkingV1HTTPIngressRuleValue) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1HTTPIngressRuleValue from json iterator.
func (o *OptIoK8sAPINetworkingV1HTTPIngressRuleValue) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINetworkingV1HTTPIngressRuleValue", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IPBlock to json stream.
func (o OptIoK8sAPINetworkingV1IPBlock) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IPBlock from json iterator.
func (o *OptIoK8sAPINetworkingV1IPBlock) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINetworkingV1IPBlock", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressBackend to json stream.
func (o OptIoK8sAPINetworkingV1IngressBackend) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressBackend from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressBackend) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINetworkingV1IngressBackend", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressClassParametersReference to json stream.
func (o OptIoK8sAPINetworkingV1IngressClassParametersReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressClassParametersReference from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressClassParametersReference) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINetworkingV1IngressClassParametersReference", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressClassSpec to json stream.
func (o OptIoK8sAPINetworkingV1IngressClassSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressClassSpec from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressClassSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINetworkingV1IngressClassSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressServiceBackend to json stream.
func (o OptIoK8sAPINetworkingV1IngressServiceBackend) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressServiceBackend from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressServiceBackend) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINetworkingV1IngressServiceBackend", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressSpec to json stream.
func (o OptIoK8sAPINetworkingV1IngressSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressSpec from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINetworkingV1IngressSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINetworkingV1IngressStatus to json stream.
func (o OptIoK8sAPINetworkingV1IngressStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1IngressStatus from json iterator.
func (o *OptIoK8sAPINetworkingV1IngressStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINetworkingV1IngressStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINetworkingV1NetworkPolicySpec to json stream.
func (o OptIoK8sAPINetworkingV1NetworkPolicySpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1NetworkPolicySpec from json iterator.
func (o *OptIoK8sAPINetworkingV1NetworkPolicySpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINetworkingV1NetworkPolicySpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINetworkingV1ServiceBackendPort to json stream.
func (o OptIoK8sAPINetworkingV1ServiceBackendPort) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINetworkingV1ServiceBackendPort from json iterator.
func (o *OptIoK8sAPINetworkingV1ServiceBackendPort) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINetworkingV1ServiceBackendPort", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINodeV1Overhead to json stream.
func (o OptIoK8sAPINodeV1Overhead) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1Overhead from json iterator.
func (o *OptIoK8sAPINodeV1Overhead) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINodeV1Overhead", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINodeV1Scheduling to json stream.
func (o OptIoK8sAPINodeV1Scheduling) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1Scheduling from json iterator.
func (o *OptIoK8sAPINodeV1Scheduling) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINodeV1Scheduling", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINodeV1alpha1Overhead to json stream.
func (o OptIoK8sAPINodeV1alpha1Overhead) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1alpha1Overhead from json iterator.
func (o *OptIoK8sAPINodeV1alpha1Overhead) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINodeV1alpha1Overhead", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINodeV1alpha1Scheduling to json stream.
func (o OptIoK8sAPINodeV1alpha1Scheduling) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1alpha1Scheduling from json iterator.
func (o *OptIoK8sAPINodeV1alpha1Scheduling) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINodeV1alpha1Scheduling", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINodeV1beta1Overhead to json stream.
func (o OptIoK8sAPINodeV1beta1Overhead) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1beta1Overhead from json iterator.
func (o *OptIoK8sAPINodeV1beta1Overhead) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINodeV1beta1Overhead", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPINodeV1beta1Scheduling to json stream.
func (o OptIoK8sAPINodeV1beta1Scheduling) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPINodeV1beta1Scheduling from json iterator.
func (o *OptIoK8sAPINodeV1beta1Scheduling) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPINodeV1beta1Scheduling", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIPolicyV1PodDisruptionBudgetSpec to json stream.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1PodDisruptionBudgetSpec from json iterator.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIPolicyV1PodDisruptionBudgetStatus to json stream.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1PodDisruptionBudgetStatus from json iterator.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec to json stream.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus to json stream.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1PodSecurityPolicySpec to json stream.
func (o OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1PodSecurityPolicySpec from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions to json stream.
func (o OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions to json stream.
func (o OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions from json iterator.
func (o *OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIRbacV1AggregationRule to json stream.
func (o OptIoK8sAPIRbacV1AggregationRule) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIRbacV1AggregationRule from json iterator.
func (o *OptIoK8sAPIRbacV1AggregationRule) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIRbacV1AggregationRule", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIStorageV1VolumeAttachmentStatus to json stream.
func (o OptIoK8sAPIStorageV1VolumeAttachmentStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIStorageV1VolumeAttachmentStatus from json iterator.
func (o *OptIoK8sAPIStorageV1VolumeAttachmentStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIStorageV1VolumeAttachmentStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIStorageV1VolumeError to json stream.
func (o OptIoK8sAPIStorageV1VolumeError) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIStorageV1VolumeError from json iterator.
func (o *OptIoK8sAPIStorageV1VolumeError) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIStorageV1VolumeError", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sAPIStorageV1VolumeNodeResources to json stream.
func (o OptIoK8sAPIStorageV1VolumeNodeResources) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sAPIStorageV1VolumeNodeResources from json iterator.
func (o *OptIoK8sAPIStorageV1VolumeNodeResources) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sAPIStorageV1VolumeNodeResources", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion to json stream.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion from json iterator.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1LabelSelector to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1LabelSelector) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1LabelSelector from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1LabelSelector) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApimachineryPkgApisMetaV1LabelSelector", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1ListMeta to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1ListMeta) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1ListMeta from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1ListMeta) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApimachineryPkgApisMetaV1ListMeta", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1ObjectMeta to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1ObjectMeta from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApimachineryPkgApisMetaV1ObjectMeta", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1Preconditions to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1Preconditions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1Preconditions from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1Preconditions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApimachineryPkgApisMetaV1Preconditions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sApimachineryPkgApisMetaV1StatusDetails to json stream.
func (o OptIoK8sApimachineryPkgApisMetaV1StatusDetails) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sApimachineryPkgApisMetaV1StatusDetails from json iterator.
func (o *OptIoK8sApimachineryPkgApisMetaV1StatusDetails) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sApimachineryPkgApisMetaV1StatusDetails", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec to json stream.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec from json iterator.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus to json stream.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus from json iterator.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference to json stream.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference from json iterator.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = string(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptString", i.WhatIsNext())
	}
	return nil
}
