// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = math.Mod
	_ = validate.Int{}
)

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "AdmissionReviewVersions".
	field.Write("clientConfig")
	s.ClientConfig.WriteJSON(j)
	if s.FailurePolicy.Set {
		field.Write("failurePolicy")
		s.FailurePolicy.WriteJSON(j)
	}
	if s.MatchPolicy.Set {
		field.Write("matchPolicy")
		s.MatchPolicy.WriteJSON(j)
	}
	field.Write("name")
	j.WriteString(s.Name)
	// Unsupported kind "pointer" for field "NamespaceSelector".
	// Unsupported kind "pointer" for field "ObjectSelector".
	if s.ReinvocationPolicy.Set {
		field.Write("reinvocationPolicy")
		s.ReinvocationPolicy.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Rules".
	field.Write("sideEffects")
	j.WriteString(s.SideEffects)
	if s.TimeoutSeconds.Set {
		field.Write("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1MutatingWebhook json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhook) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1MutatingWebhook json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhook from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admissionReviewVersions":
			// Unsupported kind "array" for field "AdmissionReviewVersions".
			i.Skip()
			return true
		case "clientConfig":
			if err := s.ClientConfig.ReadJSON(i); err != nil {
				i.ReportError("Field ClientConfig", err.Error())
				return false
			}
			return true
		case "failurePolicy":
			s.FailurePolicy.Reset()
			if err := s.FailurePolicy.ReadJSON(i); err != nil {
				i.ReportError("Field FailurePolicy", err.Error())
				return false
			}
			return true
		case "matchPolicy":
			s.MatchPolicy.Reset()
			if err := s.MatchPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field MatchPolicy", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespaceSelector":
			// Unsupported kind "pointer" for field "NamespaceSelector".
			i.Skip()
			return true
		case "objectSelector":
			// Unsupported kind "pointer" for field "ObjectSelector".
			i.Skip()
			return true
		case "reinvocationPolicy":
			s.ReinvocationPolicy.Reset()
			if err := s.ReinvocationPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ReinvocationPolicy", err.Error())
				return false
			}
			return true
		case "rules":
			// Unsupported kind "pointer" for field "Rules".
			i.Skip()
			return true
		case "sideEffects":
			s.SideEffects = i.ReadString()
			return i.Error == nil
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TimeoutSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Webhooks".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "webhooks":
			// Unsupported kind "pointer" for field "Webhooks".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList from json stream.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1RuleWithOperations) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ApiGroups".
	// Unsupported kind "pointer" for field "ApiVersions".
	// Unsupported kind "pointer" for field "Operations".
	// Unsupported kind "pointer" for field "Resources".
	if s.Scope.Set {
		field.Write("scope")
		s.Scope.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1RuleWithOperations json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1RuleWithOperations) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1RuleWithOperations json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1RuleWithOperations from json stream.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroups":
			// Unsupported kind "pointer" for field "ApiGroups".
			i.Skip()
			return true
		case "apiVersions":
			// Unsupported kind "pointer" for field "ApiVersions".
			i.Skip()
			return true
		case "operations":
			// Unsupported kind "pointer" for field "Operations".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "pointer" for field "Resources".
			i.Skip()
			return true
		case "scope":
			s.Scope.Reset()
			if err := s.Scope.ReadJSON(i); err != nil {
				i.ReportError("Field Scope", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("namespace")
	j.WriteString(s.Namespace)
	if s.Path.Set {
		field.Write("path")
		s.Path.WriteJSON(j)
	}
	if s.Port.Set {
		field.Write("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1ServiceReference json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1ServiceReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1ServiceReference json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ServiceReference from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				i.ReportError("Field Port", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "AdmissionReviewVersions".
	field.Write("clientConfig")
	s.ClientConfig.WriteJSON(j)
	if s.FailurePolicy.Set {
		field.Write("failurePolicy")
		s.FailurePolicy.WriteJSON(j)
	}
	if s.MatchPolicy.Set {
		field.Write("matchPolicy")
		s.MatchPolicy.WriteJSON(j)
	}
	field.Write("name")
	j.WriteString(s.Name)
	// Unsupported kind "pointer" for field "NamespaceSelector".
	// Unsupported kind "pointer" for field "ObjectSelector".
	// Unsupported kind "pointer" for field "Rules".
	field.Write("sideEffects")
	j.WriteString(s.SideEffects)
	if s.TimeoutSeconds.Set {
		field.Write("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1ValidatingWebhook json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhook) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1ValidatingWebhook json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhook from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "admissionReviewVersions":
			// Unsupported kind "array" for field "AdmissionReviewVersions".
			i.Skip()
			return true
		case "clientConfig":
			if err := s.ClientConfig.ReadJSON(i); err != nil {
				i.ReportError("Field ClientConfig", err.Error())
				return false
			}
			return true
		case "failurePolicy":
			s.FailurePolicy.Reset()
			if err := s.FailurePolicy.ReadJSON(i); err != nil {
				i.ReportError("Field FailurePolicy", err.Error())
				return false
			}
			return true
		case "matchPolicy":
			s.MatchPolicy.Reset()
			if err := s.MatchPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field MatchPolicy", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespaceSelector":
			// Unsupported kind "pointer" for field "NamespaceSelector".
			i.Skip()
			return true
		case "objectSelector":
			// Unsupported kind "pointer" for field "ObjectSelector".
			i.Skip()
			return true
		case "rules":
			// Unsupported kind "pointer" for field "Rules".
			i.Skip()
			return true
		case "sideEffects":
			s.SideEffects = i.ReadString()
			return i.Error == nil
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TimeoutSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Webhooks".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "webhooks":
			// Unsupported kind "pointer" for field "Webhooks".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList from json stream.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAdmissionregistrationV1WebhookClientConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "CaBundle".
	// Unsupported kind "pointer" for field "Service".
	if s.URL.Set {
		field.Write("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAdmissionregistrationV1WebhookClientConfig json value to io.Writer.
func (s IoK8sAPIAdmissionregistrationV1WebhookClientConfig) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAdmissionregistrationV1WebhookClientConfig json value from io.Reader.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAdmissionregistrationV1WebhookClientConfig from json stream.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "caBundle":
			// Unsupported kind "pointer" for field "CaBundle".
			i.Skip()
			return true
		case "service":
			// Unsupported kind "pointer" for field "Service".
			i.Skip()
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiServerID.Set {
		field.Write("apiServerID")
		s.ApiServerID.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "DecodableVersions".
	if s.EncodingVersion.Set {
		field.Write("encodingVersion")
		s.EncodingVersion.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion json value to io.Writer.
func (s IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion json value from io.Reader.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiServerID":
			s.ApiServerID.Reset()
			if err := s.ApiServerID.ReadJSON(i); err != nil {
				i.ReportError("Field ApiServerID", err.Error())
				return false
			}
			return true
		case "decodableVersions":
			// Unsupported kind "pointer" for field "DecodableVersions".
			i.Skip()
			return true
		case "encodingVersion":
			s.EncodingVersion.Reset()
			if err := s.EncodingVersion.ReadJSON(i); err != nil {
				i.ReportError("Field EncodingVersion", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "alias" for field "Spec".
	field.Write("status")
	s.Status.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIApiserverinternalV1alpha1StorageVersion json value to io.Writer.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersion) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIApiserverinternalV1alpha1StorageVersion json value from io.Reader.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersion from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "alias" for field "Spec".
			i.Skip()
			return true
		case "status":
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	field.Write("reason")
	j.WriteString(s.Reason)
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition json value to io.Writer.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition json value from io.Reader.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason = i.ReadString()
			return i.Error == nil
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIApiserverinternalV1alpha1StorageVersionList json value to io.Writer.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIApiserverinternalV1alpha1StorageVersionList json value from io.Reader.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionList from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.CommonEncodingVersion.Set {
		field.Write("commonEncodingVersion")
		s.CommonEncodingVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Conditions".
	// Unsupported kind "pointer" for field "StorageVersions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus json value to io.Writer.
func (s IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus json value from io.Reader.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus from json stream.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "commonEncodingVersion":
			s.CommonEncodingVersion.Reset()
			if err := s.CommonEncodingVersion.ReadJSON(i); err != nil {
				i.ReportError("Field CommonEncodingVersion", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "storageVersions":
			// Unsupported kind "pointer" for field "StorageVersions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ControllerRevision) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Data".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("revision")
	j.WriteInt64(s.Revision)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ControllerRevision json value to io.Writer.
func (s IoK8sAPIAppsV1ControllerRevision) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ControllerRevision json value from io.Reader.
func (s *IoK8sAPIAppsV1ControllerRevision) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ControllerRevision from json stream.
func (s *IoK8sAPIAppsV1ControllerRevision) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "data":
			// Unsupported kind "pointer" for field "Data".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "revision":
			s.Revision = i.ReadInt64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ControllerRevisionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ControllerRevisionList json value to io.Writer.
func (s IoK8sAPIAppsV1ControllerRevisionList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ControllerRevisionList json value from io.Reader.
func (s *IoK8sAPIAppsV1ControllerRevisionList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ControllerRevisionList from json stream.
func (s *IoK8sAPIAppsV1ControllerRevisionList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSet json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSet) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSet json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSet from json stream.
func (s *IoK8sAPIAppsV1DaemonSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSetCondition json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSetCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSetCondition json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSetCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetCondition from json stream.
func (s *IoK8sAPIAppsV1DaemonSetCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSetList json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSetList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSetList json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSetList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetList from json stream.
func (s *IoK8sAPIAppsV1DaemonSetList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.MinReadySeconds.Set {
		field.Write("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		field.Write("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	field.Write("selector")
	s.Selector.WriteJSON(j)
	field.Write("template")
	s.Template.WriteJSON(j)
	// Unsupported kind "pointer" for field "UpdateStrategy".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSetSpec json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSetSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSetSpec json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSetSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetSpec from json stream.
func (s *IoK8sAPIAppsV1DaemonSetSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field MinReadySeconds", err.Error())
				return false
			}
			return true
		case "revisionHistoryLimit":
			s.RevisionHistoryLimit.Reset()
			if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field RevisionHistoryLimit", err.Error())
				return false
			}
			return true
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				i.ReportError("Field Template", err.Error())
				return false
			}
			return true
		case "updateStrategy":
			// Unsupported kind "pointer" for field "UpdateStrategy".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.CollisionCount.Set {
		field.Write("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Conditions".
	field.Write("currentNumberScheduled")
	j.WriteInt32(s.CurrentNumberScheduled)
	field.Write("desiredNumberScheduled")
	j.WriteInt32(s.DesiredNumberScheduled)
	if s.NumberAvailable.Set {
		field.Write("numberAvailable")
		s.NumberAvailable.WriteJSON(j)
	}
	field.Write("numberMisscheduled")
	j.WriteInt32(s.NumberMisscheduled)
	field.Write("numberReady")
	j.WriteInt32(s.NumberReady)
	if s.NumberUnavailable.Set {
		field.Write("numberUnavailable")
		s.NumberUnavailable.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.UpdatedNumberScheduled.Set {
		field.Write("updatedNumberScheduled")
		s.UpdatedNumberScheduled.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSetStatus json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSetStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSetStatus json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSetStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetStatus from json stream.
func (s *IoK8sAPIAppsV1DaemonSetStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "collisionCount":
			s.CollisionCount.Reset()
			if err := s.CollisionCount.ReadJSON(i); err != nil {
				i.ReportError("Field CollisionCount", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "currentNumberScheduled":
			s.CurrentNumberScheduled = i.ReadInt32()
			return i.Error == nil
		case "desiredNumberScheduled":
			s.DesiredNumberScheduled = i.ReadInt32()
			return i.Error == nil
		case "numberAvailable":
			s.NumberAvailable.Reset()
			if err := s.NumberAvailable.ReadJSON(i); err != nil {
				i.ReportError("Field NumberAvailable", err.Error())
				return false
			}
			return true
		case "numberMisscheduled":
			s.NumberMisscheduled = i.ReadInt32()
			return i.Error == nil
		case "numberReady":
			s.NumberReady = i.ReadInt32()
			return i.Error == nil
		case "numberUnavailable":
			s.NumberUnavailable.Reset()
			if err := s.NumberUnavailable.ReadJSON(i); err != nil {
				i.ReportError("Field NumberUnavailable", err.Error())
				return false
			}
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "updatedNumberScheduled":
			s.UpdatedNumberScheduled.Reset()
			if err := s.UpdatedNumberScheduled.ReadJSON(i); err != nil {
				i.ReportError("Field UpdatedNumberScheduled", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DaemonSetUpdateStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "RollingUpdate".
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DaemonSetUpdateStrategy json value to io.Writer.
func (s IoK8sAPIAppsV1DaemonSetUpdateStrategy) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DaemonSetUpdateStrategy json value from io.Reader.
func (s *IoK8sAPIAppsV1DaemonSetUpdateStrategy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DaemonSetUpdateStrategy from json stream.
func (s *IoK8sAPIAppsV1DaemonSetUpdateStrategy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "rollingUpdate":
			// Unsupported kind "pointer" for field "RollingUpdate".
			i.Skip()
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1Deployment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1Deployment json value to io.Writer.
func (s IoK8sAPIAppsV1Deployment) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1Deployment json value from io.Reader.
func (s *IoK8sAPIAppsV1Deployment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1Deployment from json stream.
func (s *IoK8sAPIAppsV1Deployment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	// Unsupported kind "pointer" for field "LastUpdateTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DeploymentCondition json value to io.Writer.
func (s IoK8sAPIAppsV1DeploymentCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DeploymentCondition json value from io.Reader.
func (s *IoK8sAPIAppsV1DeploymentCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentCondition from json stream.
func (s *IoK8sAPIAppsV1DeploymentCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "lastUpdateTime":
			// Unsupported kind "pointer" for field "LastUpdateTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DeploymentList json value to io.Writer.
func (s IoK8sAPIAppsV1DeploymentList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DeploymentList json value from io.Reader.
func (s *IoK8sAPIAppsV1DeploymentList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentList from json stream.
func (s *IoK8sAPIAppsV1DeploymentList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.MinReadySeconds.Set {
		field.Write("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Paused.Set {
		field.Write("paused")
		s.Paused.WriteJSON(j)
	}
	if s.ProgressDeadlineSeconds.Set {
		field.Write("progressDeadlineSeconds")
		s.ProgressDeadlineSeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		field.Write("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		field.Write("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	field.Write("selector")
	s.Selector.WriteJSON(j)
	// Unsupported kind "pointer" for field "Strategy".
	field.Write("template")
	s.Template.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DeploymentSpec json value to io.Writer.
func (s IoK8sAPIAppsV1DeploymentSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DeploymentSpec json value from io.Reader.
func (s *IoK8sAPIAppsV1DeploymentSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentSpec from json stream.
func (s *IoK8sAPIAppsV1DeploymentSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field MinReadySeconds", err.Error())
				return false
			}
			return true
		case "paused":
			s.Paused.Reset()
			if err := s.Paused.ReadJSON(i); err != nil {
				i.ReportError("Field Paused", err.Error())
				return false
			}
			return true
		case "progressDeadlineSeconds":
			s.ProgressDeadlineSeconds.Reset()
			if err := s.ProgressDeadlineSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ProgressDeadlineSeconds", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				i.ReportError("Field Replicas", err.Error())
				return false
			}
			return true
		case "revisionHistoryLimit":
			s.RevisionHistoryLimit.Reset()
			if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field RevisionHistoryLimit", err.Error())
				return false
			}
			return true
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "strategy":
			// Unsupported kind "pointer" for field "Strategy".
			i.Skip()
			return true
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				i.ReportError("Field Template", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AvailableReplicas.Set {
		field.Write("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	if s.CollisionCount.Set {
		field.Write("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Conditions".
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		field.Write("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	if s.Replicas.Set {
		field.Write("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.UnavailableReplicas.Set {
		field.Write("unavailableReplicas")
		s.UnavailableReplicas.WriteJSON(j)
	}
	if s.UpdatedReplicas.Set {
		field.Write("updatedReplicas")
		s.UpdatedReplicas.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DeploymentStatus json value to io.Writer.
func (s IoK8sAPIAppsV1DeploymentStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DeploymentStatus json value from io.Reader.
func (s *IoK8sAPIAppsV1DeploymentStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentStatus from json stream.
func (s *IoK8sAPIAppsV1DeploymentStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "availableReplicas":
			s.AvailableReplicas.Reset()
			if err := s.AvailableReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field AvailableReplicas", err.Error())
				return false
			}
			return true
		case "collisionCount":
			s.CollisionCount.Reset()
			if err := s.CollisionCount.ReadJSON(i); err != nil {
				i.ReportError("Field CollisionCount", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field ReadyReplicas", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				i.ReportError("Field Replicas", err.Error())
				return false
			}
			return true
		case "unavailableReplicas":
			s.UnavailableReplicas.Reset()
			if err := s.UnavailableReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field UnavailableReplicas", err.Error())
				return false
			}
			return true
		case "updatedReplicas":
			s.UpdatedReplicas.Reset()
			if err := s.UpdatedReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field UpdatedReplicas", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1DeploymentStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "RollingUpdate".
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1DeploymentStrategy json value to io.Writer.
func (s IoK8sAPIAppsV1DeploymentStrategy) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1DeploymentStrategy json value from io.Reader.
func (s *IoK8sAPIAppsV1DeploymentStrategy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1DeploymentStrategy from json stream.
func (s *IoK8sAPIAppsV1DeploymentStrategy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "rollingUpdate":
			// Unsupported kind "pointer" for field "RollingUpdate".
			i.Skip()
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ReplicaSet json value to io.Writer.
func (s IoK8sAPIAppsV1ReplicaSet) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ReplicaSet json value from io.Reader.
func (s *IoK8sAPIAppsV1ReplicaSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSet from json stream.
func (s *IoK8sAPIAppsV1ReplicaSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ReplicaSetCondition json value to io.Writer.
func (s IoK8sAPIAppsV1ReplicaSetCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ReplicaSetCondition json value from io.Reader.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetCondition from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ReplicaSetList json value to io.Writer.
func (s IoK8sAPIAppsV1ReplicaSetList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ReplicaSetList json value from io.Reader.
func (s *IoK8sAPIAppsV1ReplicaSetList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetList from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.MinReadySeconds.Set {
		field.Write("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		field.Write("replicas")
		s.Replicas.WriteJSON(j)
	}
	field.Write("selector")
	s.Selector.WriteJSON(j)
	// Unsupported kind "pointer" for field "Template".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ReplicaSetSpec json value to io.Writer.
func (s IoK8sAPIAppsV1ReplicaSetSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ReplicaSetSpec json value from io.Reader.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetSpec from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field MinReadySeconds", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				i.ReportError("Field Replicas", err.Error())
				return false
			}
			return true
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "template":
			// Unsupported kind "pointer" for field "Template".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1ReplicaSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AvailableReplicas.Set {
		field.Write("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Conditions".
	if s.FullyLabeledReplicas.Set {
		field.Write("fullyLabeledReplicas")
		s.FullyLabeledReplicas.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		field.Write("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	field.Write("replicas")
	j.WriteInt32(s.Replicas)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1ReplicaSetStatus json value to io.Writer.
func (s IoK8sAPIAppsV1ReplicaSetStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1ReplicaSetStatus json value from io.Reader.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1ReplicaSetStatus from json stream.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "availableReplicas":
			s.AvailableReplicas.Reset()
			if err := s.AvailableReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field AvailableReplicas", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "fullyLabeledReplicas":
			s.FullyLabeledReplicas.Reset()
			if err := s.FullyLabeledReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field FullyLabeledReplicas", err.Error())
				return false
			}
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field ReadyReplicas", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateDaemonSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "MaxSurge".
	// Unsupported kind "pointer" for field "MaxUnavailable".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1RollingUpdateDaemonSet json value to io.Writer.
func (s IoK8sAPIAppsV1RollingUpdateDaemonSet) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1RollingUpdateDaemonSet json value from io.Reader.
func (s *IoK8sAPIAppsV1RollingUpdateDaemonSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateDaemonSet from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateDaemonSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxSurge":
			// Unsupported kind "pointer" for field "MaxSurge".
			i.Skip()
			return true
		case "maxUnavailable":
			// Unsupported kind "pointer" for field "MaxUnavailable".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateDeployment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "MaxSurge".
	// Unsupported kind "pointer" for field "MaxUnavailable".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1RollingUpdateDeployment json value to io.Writer.
func (s IoK8sAPIAppsV1RollingUpdateDeployment) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1RollingUpdateDeployment json value from io.Reader.
func (s *IoK8sAPIAppsV1RollingUpdateDeployment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateDeployment from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateDeployment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxSurge":
			// Unsupported kind "pointer" for field "MaxSurge".
			i.Skip()
			return true
		case "maxUnavailable":
			// Unsupported kind "pointer" for field "MaxUnavailable".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Partition.Set {
		field.Write("partition")
		s.Partition.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy json value to io.Writer.
func (s IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy json value from io.Reader.
func (s *IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy from json stream.
func (s *IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "partition":
			s.Partition.Reset()
			if err := s.Partition.ReadJSON(i); err != nil {
				i.ReportError("Field Partition", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSet json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSet) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSet json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSet from json stream.
func (s *IoK8sAPIAppsV1StatefulSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSetCondition json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSetCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSetCondition json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSetCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetCondition from json stream.
func (s *IoK8sAPIAppsV1StatefulSetCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSetList json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSetList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSetList json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSetList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetList from json stream.
func (s *IoK8sAPIAppsV1StatefulSetList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.MinReadySeconds.Set {
		field.Write("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.PodManagementPolicy.Set {
		field.Write("podManagementPolicy")
		s.PodManagementPolicy.WriteJSON(j)
	}
	if s.Replicas.Set {
		field.Write("replicas")
		s.Replicas.WriteJSON(j)
	}
	if s.RevisionHistoryLimit.Set {
		field.Write("revisionHistoryLimit")
		s.RevisionHistoryLimit.WriteJSON(j)
	}
	field.Write("selector")
	s.Selector.WriteJSON(j)
	field.Write("serviceName")
	j.WriteString(s.ServiceName)
	field.Write("template")
	s.Template.WriteJSON(j)
	// Unsupported kind "pointer" for field "UpdateStrategy".
	// Unsupported kind "pointer" for field "VolumeClaimTemplates".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSetSpec json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSetSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSetSpec json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSetSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetSpec from json stream.
func (s *IoK8sAPIAppsV1StatefulSetSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field MinReadySeconds", err.Error())
				return false
			}
			return true
		case "podManagementPolicy":
			s.PodManagementPolicy.Reset()
			if err := s.PodManagementPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field PodManagementPolicy", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				i.ReportError("Field Replicas", err.Error())
				return false
			}
			return true
		case "revisionHistoryLimit":
			s.RevisionHistoryLimit.Reset()
			if err := s.RevisionHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field RevisionHistoryLimit", err.Error())
				return false
			}
			return true
		case "selector":
			if err := s.Selector.ReadJSON(i); err != nil {
				i.ReportError("Field Selector", err.Error())
				return false
			}
			return true
		case "serviceName":
			s.ServiceName = i.ReadString()
			return i.Error == nil
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				i.ReportError("Field Template", err.Error())
				return false
			}
			return true
		case "updateStrategy":
			// Unsupported kind "pointer" for field "UpdateStrategy".
			i.Skip()
			return true
		case "volumeClaimTemplates":
			// Unsupported kind "pointer" for field "VolumeClaimTemplates".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("availableReplicas")
	j.WriteInt32(s.AvailableReplicas)
	if s.CollisionCount.Set {
		field.Write("collisionCount")
		s.CollisionCount.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Conditions".
	if s.CurrentReplicas.Set {
		field.Write("currentReplicas")
		s.CurrentReplicas.WriteJSON(j)
	}
	if s.CurrentRevision.Set {
		field.Write("currentRevision")
		s.CurrentRevision.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		field.Write("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	field.Write("replicas")
	j.WriteInt32(s.Replicas)
	if s.UpdateRevision.Set {
		field.Write("updateRevision")
		s.UpdateRevision.WriteJSON(j)
	}
	if s.UpdatedReplicas.Set {
		field.Write("updatedReplicas")
		s.UpdatedReplicas.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSetStatus json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSetStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSetStatus json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSetStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetStatus from json stream.
func (s *IoK8sAPIAppsV1StatefulSetStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "availableReplicas":
			s.AvailableReplicas = i.ReadInt32()
			return i.Error == nil
		case "collisionCount":
			s.CollisionCount.Reset()
			if err := s.CollisionCount.ReadJSON(i); err != nil {
				i.ReportError("Field CollisionCount", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "currentReplicas":
			s.CurrentReplicas.Reset()
			if err := s.CurrentReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentReplicas", err.Error())
				return false
			}
			return true
		case "currentRevision":
			s.CurrentRevision.Reset()
			if err := s.CurrentRevision.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentRevision", err.Error())
				return false
			}
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field ReadyReplicas", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas = i.ReadInt32()
			return i.Error == nil
		case "updateRevision":
			s.UpdateRevision.Reset()
			if err := s.UpdateRevision.ReadJSON(i); err != nil {
				i.ReportError("Field UpdateRevision", err.Error())
				return false
			}
			return true
		case "updatedReplicas":
			s.UpdatedReplicas.Reset()
			if err := s.UpdatedReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field UpdatedReplicas", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAppsV1StatefulSetUpdateStrategy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "RollingUpdate".
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAppsV1StatefulSetUpdateStrategy json value to io.Writer.
func (s IoK8sAPIAppsV1StatefulSetUpdateStrategy) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAppsV1StatefulSetUpdateStrategy json value from io.Reader.
func (s *IoK8sAPIAppsV1StatefulSetUpdateStrategy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAppsV1StatefulSetUpdateStrategy from json stream.
func (s *IoK8sAPIAppsV1StatefulSetUpdateStrategy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "rollingUpdate":
			// Unsupported kind "pointer" for field "RollingUpdate".
			i.Skip()
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("spec")
	s.Spec.WriteJSON(j)
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthenticationV1TokenReview json value to io.Writer.
func (s IoK8sAPIAuthenticationV1TokenReview) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthenticationV1TokenReview json value from io.Reader.
func (s *IoK8sAPIAuthenticationV1TokenReview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReview from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Audiences".
	if s.Token.Set {
		field.Write("token")
		s.Token.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthenticationV1TokenReviewSpec json value to io.Writer.
func (s IoK8sAPIAuthenticationV1TokenReviewSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthenticationV1TokenReviewSpec json value from io.Reader.
func (s *IoK8sAPIAuthenticationV1TokenReviewSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReviewSpec from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReviewSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "audiences":
			// Unsupported kind "pointer" for field "Audiences".
			i.Skip()
			return true
		case "token":
			s.Token.Reset()
			if err := s.Token.ReadJSON(i); err != nil {
				i.ReportError("Field Token", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1TokenReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Audiences".
	if s.Authenticated.Set {
		field.Write("authenticated")
		s.Authenticated.WriteJSON(j)
	}
	if s.Error.Set {
		field.Write("error")
		s.Error.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "User".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthenticationV1TokenReviewStatus json value to io.Writer.
func (s IoK8sAPIAuthenticationV1TokenReviewStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthenticationV1TokenReviewStatus json value from io.Reader.
func (s *IoK8sAPIAuthenticationV1TokenReviewStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthenticationV1TokenReviewStatus from json stream.
func (s *IoK8sAPIAuthenticationV1TokenReviewStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "audiences":
			// Unsupported kind "pointer" for field "Audiences".
			i.Skip()
			return true
		case "authenticated":
			s.Authenticated.Reset()
			if err := s.Authenticated.ReadJSON(i); err != nil {
				i.ReportError("Field Authenticated", err.Error())
				return false
			}
			return true
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				i.ReportError("Field Error", err.Error())
				return false
			}
			return true
		case "user":
			// Unsupported kind "pointer" for field "User".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthenticationV1UserInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Extra".
	// Unsupported kind "pointer" for field "Groups".
	if s.UID.Set {
		field.Write("uid")
		s.UID.WriteJSON(j)
	}
	if s.Username.Set {
		field.Write("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthenticationV1UserInfo json value to io.Writer.
func (s IoK8sAPIAuthenticationV1UserInfo) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthenticationV1UserInfo json value from io.Reader.
func (s *IoK8sAPIAuthenticationV1UserInfo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthenticationV1UserInfo from json stream.
func (s *IoK8sAPIAuthenticationV1UserInfo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "extra":
			// Unsupported kind "pointer" for field "Extra".
			i.Skip()
			return true
		case "groups":
			// Unsupported kind "pointer" for field "Groups".
			i.Skip()
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		case "username":
			s.Username.Reset()
			if err := s.Username.ReadJSON(i); err != nil {
				i.ReportError("Field Username", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1NonResourceAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Path.Set {
		field.Write("path")
		s.Path.WriteJSON(j)
	}
	if s.Verb.Set {
		field.Write("verb")
		s.Verb.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1NonResourceAttributes json value to io.Writer.
func (s IoK8sAPIAuthorizationV1NonResourceAttributes) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1NonResourceAttributes json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1NonResourceAttributes) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1NonResourceAttributes from json stream.
func (s *IoK8sAPIAuthorizationV1NonResourceAttributes) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "verb":
			s.Verb.Reset()
			if err := s.Verb.ReadJSON(i); err != nil {
				i.ReportError("Field Verb", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1NonResourceRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "NonResourceURLs".
	// Unsupported kind "array" for field "Verbs".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1NonResourceRule json value to io.Writer.
func (s IoK8sAPIAuthorizationV1NonResourceRule) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1NonResourceRule json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1NonResourceRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1NonResourceRule from json stream.
func (s *IoK8sAPIAuthorizationV1NonResourceRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceURLs":
			// Unsupported kind "pointer" for field "NonResourceURLs".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1ResourceAttributes) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Group.Set {
		field.Write("group")
		s.Group.WriteJSON(j)
	}
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		field.Write("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Resource.Set {
		field.Write("resource")
		s.Resource.WriteJSON(j)
	}
	if s.Subresource.Set {
		field.Write("subresource")
		s.Subresource.WriteJSON(j)
	}
	if s.Verb.Set {
		field.Write("verb")
		s.Verb.WriteJSON(j)
	}
	if s.Version.Set {
		field.Write("version")
		s.Version.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1ResourceAttributes json value to io.Writer.
func (s IoK8sAPIAuthorizationV1ResourceAttributes) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1ResourceAttributes json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1ResourceAttributes) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1ResourceAttributes from json stream.
func (s *IoK8sAPIAuthorizationV1ResourceAttributes) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		case "resource":
			s.Resource.Reset()
			if err := s.Resource.ReadJSON(i); err != nil {
				i.ReportError("Field Resource", err.Error())
				return false
			}
			return true
		case "subresource":
			s.Subresource.Reset()
			if err := s.Subresource.ReadJSON(i); err != nil {
				i.ReportError("Field Subresource", err.Error())
				return false
			}
			return true
		case "verb":
			s.Verb.Reset()
			if err := s.Verb.ReadJSON(i); err != nil {
				i.ReportError("Field Verb", err.Error())
				return false
			}
			return true
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(i); err != nil {
				i.ReportError("Field Version", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1ResourceRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ApiGroups".
	// Unsupported kind "pointer" for field "ResourceNames".
	// Unsupported kind "pointer" for field "Resources".
	// Unsupported kind "array" for field "Verbs".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1ResourceRule json value to io.Writer.
func (s IoK8sAPIAuthorizationV1ResourceRule) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1ResourceRule json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1ResourceRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1ResourceRule from json stream.
func (s *IoK8sAPIAuthorizationV1ResourceRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroups":
			// Unsupported kind "pointer" for field "ApiGroups".
			i.Skip()
			return true
		case "resourceNames":
			// Unsupported kind "pointer" for field "ResourceNames".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "pointer" for field "Resources".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("spec")
	s.Spec.WriteJSON(j)
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SelfSubjectAccessReview json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReview) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SelfSubjectAccessReview json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectAccessReview from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "NonResourceAttributes".
	// Unsupported kind "pointer" for field "ResourceAttributes".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectAccessReviewSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceAttributes":
			// Unsupported kind "pointer" for field "NonResourceAttributes".
			i.Skip()
			return true
		case "resourceAttributes":
			// Unsupported kind "pointer" for field "ResourceAttributes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("spec")
	s.Spec.WriteJSON(j)
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SelfSubjectRulesReview json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReview) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SelfSubjectRulesReview json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectRulesReview from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Namespace.Set {
		field.Write("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SelfSubjectRulesReviewSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReview) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("spec")
	s.Spec.WriteJSON(j)
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SubjectAccessReview json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SubjectAccessReview) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SubjectAccessReview json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReview) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReview from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReview) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Extra".
	// Unsupported kind "pointer" for field "Groups".
	// Unsupported kind "pointer" for field "NonResourceAttributes".
	// Unsupported kind "pointer" for field "ResourceAttributes".
	if s.UID.Set {
		field.Write("uid")
		s.UID.WriteJSON(j)
	}
	if s.User.Set {
		field.Write("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SubjectAccessReviewSpec json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SubjectAccessReviewSpec json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReviewSpec from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "extra":
			// Unsupported kind "pointer" for field "Extra".
			i.Skip()
			return true
		case "groups":
			// Unsupported kind "pointer" for field "Groups".
			i.Skip()
			return true
		case "nonResourceAttributes":
			// Unsupported kind "pointer" for field "NonResourceAttributes".
			i.Skip()
			return true
		case "resourceAttributes":
			// Unsupported kind "pointer" for field "ResourceAttributes".
			i.Skip()
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("allowed")
	j.WriteBool(s.Allowed)
	if s.Denied.Set {
		field.Write("denied")
		s.Denied.WriteJSON(j)
	}
	if s.EvaluationError.Set {
		field.Write("evaluationError")
		s.EvaluationError.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SubjectAccessReviewStatus json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SubjectAccessReviewStatus json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectAccessReviewStatus from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectAccessReviewStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowed":
			s.Allowed = i.ReadBool()
			return i.Error == nil
		case "denied":
			s.Denied.Reset()
			if err := s.Denied.ReadJSON(i); err != nil {
				i.ReportError("Field Denied", err.Error())
				return false
			}
			return true
		case "evaluationError":
			s.EvaluationError.Reset()
			if err := s.EvaluationError.ReadJSON(i); err != nil {
				i.ReportError("Field EvaluationError", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.EvaluationError.Set {
		field.Write("evaluationError")
		s.EvaluationError.WriteJSON(j)
	}
	field.Write("incomplete")
	j.WriteBool(s.Incomplete)
	// Unsupported kind "array" for field "NonResourceRules".
	// Unsupported kind "array" for field "ResourceRules".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAuthorizationV1SubjectRulesReviewStatus json value to io.Writer.
func (s IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAuthorizationV1SubjectRulesReviewStatus json value from io.Reader.
func (s *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAuthorizationV1SubjectRulesReviewStatus from json stream.
func (s *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "evaluationError":
			s.EvaluationError.Reset()
			if err := s.EvaluationError.ReadJSON(i); err != nil {
				i.ReportError("Field EvaluationError", err.Error())
				return false
			}
			return true
		case "incomplete":
			s.Incomplete = i.ReadBool()
			return i.Error == nil
		case "nonResourceRules":
			// Unsupported kind "array" for field "NonResourceRules".
			i.Skip()
			return true
		case "resourceRules":
			// Unsupported kind "array" for field "ResourceRules".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	field.Write("kind")
	j.WriteString(s.Kind)
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV1CrossVersionObjectReference json value to io.Writer.
func (s IoK8sAPIAutoscalingV1CrossVersionObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV1CrossVersionObjectReference json value from io.Reader.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV1CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV1HorizontalPodAutoscaler json value to io.Writer.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV1HorizontalPodAutoscaler json value from io.Reader.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList json value to io.Writer.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList json value from io.Reader.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	if s.MinReplicas.Set {
		field.Write("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	field.Write("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	if s.TargetCPUUtilizationPercentage.Set {
		field.Write("targetCPUUtilizationPercentage")
		s.TargetCPUUtilizationPercentage.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec json value to io.Writer.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec json value from io.Reader.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxReplicas":
			s.MaxReplicas = i.ReadInt32()
			return i.Error == nil
		case "minReplicas":
			s.MinReplicas.Reset()
			if err := s.MinReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field MinReplicas", err.Error())
				return false
			}
			return true
		case "scaleTargetRef":
			if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
				i.ReportError("Field ScaleTargetRef", err.Error())
				return false
			}
			return true
		case "targetCPUUtilizationPercentage":
			s.TargetCPUUtilizationPercentage.Reset()
			if err := s.TargetCPUUtilizationPercentage.ReadJSON(i); err != nil {
				i.ReportError("Field TargetCPUUtilizationPercentage", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.CurrentCPUUtilizationPercentage.Set {
		field.Write("currentCPUUtilizationPercentage")
		s.CurrentCPUUtilizationPercentage.WriteJSON(j)
	}
	field.Write("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	field.Write("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	// Unsupported kind "pointer" for field "LastScaleTime".
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currentCPUUtilizationPercentage":
			s.CurrentCPUUtilizationPercentage.Reset()
			if err := s.CurrentCPUUtilizationPercentage.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentCPUUtilizationPercentage", err.Error())
				return false
			}
			return true
		case "currentReplicas":
			s.CurrentReplicas = i.ReadInt32()
			return i.Error == nil
		case "desiredReplicas":
			s.DesiredReplicas = i.ReadInt32()
			return i.Error == nil
		case "lastScaleTime":
			// Unsupported kind "pointer" for field "LastScaleTime".
			i.Skip()
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("container")
	j.WriteString(s.Container)
	field.Write("name")
	j.WriteString(s.Name)
	if s.TargetAverageUtilization.Set {
		field.Write("targetAverageUtilization")
		s.TargetAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "TargetAverageValue".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "container":
			s.Container = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "targetAverageUtilization":
			s.TargetAverageUtilization.Reset()
			if err := s.TargetAverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field TargetAverageUtilization", err.Error())
				return false
			}
			return true
		case "targetAverageValue":
			// Unsupported kind "pointer" for field "TargetAverageValue".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("container")
	j.WriteString(s.Container)
	if s.CurrentAverageUtilization.Set {
		field.Write("currentAverageUtilization")
		s.CurrentAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "CurrentAverageValue".
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "container":
			s.Container = i.ReadString()
			return i.Error == nil
		case "currentAverageUtilization":
			s.CurrentAverageUtilization.Reset()
			if err := s.CurrentAverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentAverageUtilization", err.Error())
				return false
			}
			return true
		case "currentAverageValue":
			// Unsupported kind "alias" for field "CurrentAverageValue".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	field.Write("kind")
	j.WriteString(s.Kind)
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("metricName")
	j.WriteString(s.MetricName)
	// Unsupported kind "pointer" for field "MetricSelector".
	// Unsupported kind "pointer" for field "TargetAverageValue".
	// Unsupported kind "pointer" for field "TargetValue".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ExternalMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ExternalMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ExternalMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "metricSelector":
			// Unsupported kind "pointer" for field "MetricSelector".
			i.Skip()
			return true
		case "targetAverageValue":
			// Unsupported kind "pointer" for field "TargetAverageValue".
			i.Skip()
			return true
		case "targetValue":
			// Unsupported kind "pointer" for field "TargetValue".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "CurrentAverageValue".
	// Unsupported kind "alias" for field "CurrentValue".
	field.Write("metricName")
	j.WriteString(s.MetricName)
	// Unsupported kind "pointer" for field "MetricSelector".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ExternalMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ExternalMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ExternalMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currentAverageValue":
			// Unsupported kind "pointer" for field "CurrentAverageValue".
			i.Skip()
			return true
		case "currentValue":
			// Unsupported kind "alias" for field "CurrentValue".
			i.Skip()
			return true
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "metricSelector":
			// Unsupported kind "pointer" for field "MetricSelector".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	// Unsupported kind "pointer" for field "Metrics".
	if s.MinReplicas.Set {
		field.Write("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	field.Write("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxReplicas":
			s.MaxReplicas = i.ReadInt32()
			return i.Error == nil
		case "metrics":
			// Unsupported kind "pointer" for field "Metrics".
			i.Skip()
			return true
		case "minReplicas":
			s.MinReplicas.Reset()
			if err := s.MinReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field MinReplicas", err.Error())
				return false
			}
			return true
		case "scaleTargetRef":
			if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
				i.ReportError("Field ScaleTargetRef", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "Conditions".
	// Unsupported kind "pointer" for field "CurrentMetrics".
	field.Write("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	field.Write("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	// Unsupported kind "pointer" for field "LastScaleTime".
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "currentMetrics":
			// Unsupported kind "pointer" for field "CurrentMetrics".
			i.Skip()
			return true
		case "currentReplicas":
			s.CurrentReplicas = i.ReadInt32()
			return i.Error == nil
		case "desiredReplicas":
			s.DesiredReplicas = i.ReadInt32()
			return i.Error == nil
		case "lastScaleTime":
			// Unsupported kind "pointer" for field "LastScaleTime".
			i.Skip()
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1MetricSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ContainerResource".
	// Unsupported kind "pointer" for field "External".
	// Unsupported kind "pointer" for field "Object".
	// Unsupported kind "pointer" for field "Pods".
	// Unsupported kind "pointer" for field "Resource".
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1MetricSpec json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1MetricSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1MetricSpec json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1MetricSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerResource":
			// Unsupported kind "pointer" for field "ContainerResource".
			i.Skip()
			return true
		case "external":
			// Unsupported kind "pointer" for field "External".
			i.Skip()
			return true
		case "object":
			// Unsupported kind "pointer" for field "Object".
			i.Skip()
			return true
		case "pods":
			// Unsupported kind "pointer" for field "Pods".
			i.Skip()
			return true
		case "resource":
			// Unsupported kind "pointer" for field "Resource".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1MetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ContainerResource".
	// Unsupported kind "pointer" for field "External".
	// Unsupported kind "pointer" for field "Object".
	// Unsupported kind "pointer" for field "Pods".
	// Unsupported kind "pointer" for field "Resource".
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1MetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1MetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1MetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1MetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerResource":
			// Unsupported kind "pointer" for field "ContainerResource".
			i.Skip()
			return true
		case "external":
			// Unsupported kind "pointer" for field "External".
			i.Skip()
			return true
		case "object":
			// Unsupported kind "pointer" for field "Object".
			i.Skip()
			return true
		case "pods":
			// Unsupported kind "pointer" for field "Pods".
			i.Skip()
			return true
		case "resource":
			// Unsupported kind "pointer" for field "Resource".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AverageValue".
	field.Write("metricName")
	j.WriteString(s.MetricName)
	// Unsupported kind "pointer" for field "Selector".
	field.Write("target")
	s.Target.WriteJSON(j)
	// Unsupported kind "alias" for field "TargetValue".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ObjectMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ObjectMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ObjectMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "averageValue":
			// Unsupported kind "pointer" for field "AverageValue".
			i.Skip()
			return true
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		case "targetValue":
			// Unsupported kind "alias" for field "TargetValue".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AverageValue".
	// Unsupported kind "alias" for field "CurrentValue".
	field.Write("metricName")
	j.WriteString(s.MetricName)
	// Unsupported kind "pointer" for field "Selector".
	field.Write("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ObjectMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ObjectMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ObjectMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "averageValue":
			// Unsupported kind "pointer" for field "AverageValue".
			i.Skip()
			return true
		case "currentValue":
			// Unsupported kind "alias" for field "CurrentValue".
			i.Skip()
			return true
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("metricName")
	j.WriteString(s.MetricName)
	// Unsupported kind "pointer" for field "Selector".
	// Unsupported kind "alias" for field "TargetAverageValue".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1PodsMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1PodsMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1PodsMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		case "targetAverageValue":
			// Unsupported kind "alias" for field "TargetAverageValue".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "alias" for field "CurrentAverageValue".
	field.Write("metricName")
	j.WriteString(s.MetricName)
	// Unsupported kind "pointer" for field "Selector".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1PodsMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1PodsMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1PodsMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1PodsMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currentAverageValue":
			// Unsupported kind "alias" for field "CurrentAverageValue".
			i.Skip()
			return true
		case "metricName":
			s.MetricName = i.ReadString()
			return i.Error == nil
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	if s.TargetAverageUtilization.Set {
		field.Write("targetAverageUtilization")
		s.TargetAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "TargetAverageValue".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ResourceMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ResourceMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "targetAverageUtilization":
			s.TargetAverageUtilization.Reset()
			if err := s.TargetAverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field TargetAverageUtilization", err.Error())
				return false
			}
			return true
		case "targetAverageValue":
			// Unsupported kind "pointer" for field "TargetAverageValue".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.CurrentAverageUtilization.Set {
		field.Write("currentAverageUtilization")
		s.CurrentAverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "CurrentAverageValue".
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta1ResourceMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta1ResourceMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta1ResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currentAverageUtilization":
			s.CurrentAverageUtilization.Reset()
			if err := s.CurrentAverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field CurrentAverageUtilization", err.Error())
				return false
			}
			return true
		case "currentAverageValue":
			// Unsupported kind "alias" for field "CurrentAverageValue".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("container")
	j.WriteString(s.Container)
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "container":
			s.Container = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("container")
	j.WriteString(s.Container)
	field.Write("current")
	s.Current.WriteJSON(j)
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "container":
			s.Container = i.ReadString()
			return i.Error == nil
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				i.ReportError("Field Current", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	field.Write("kind")
	j.WriteString(s.Kind)
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference from json stream.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("metric")
	s.Metric.WriteJSON(j)
	field.Write("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ExternalMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ExternalMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ExternalMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("current")
	s.Current.WriteJSON(j)
	field.Write("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ExternalMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ExternalMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ExternalMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				i.ReportError("Field Current", err.Error())
				return false
			}
			return true
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("periodSeconds")
	j.WriteInt32(s.PeriodSeconds)
	field.Write("type")
	j.WriteString(s.Type)
	field.Write("value")
	j.WriteInt32(s.Value)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HPAScalingPolicy json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HPAScalingPolicy json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HPAScalingPolicy from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "periodSeconds":
			s.PeriodSeconds = i.ReadInt32()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "value":
			s.Value = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingRules) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Policies".
	if s.SelectPolicy.Set {
		field.Write("selectPolicy")
		s.SelectPolicy.WriteJSON(j)
	}
	if s.StabilizationWindowSeconds.Set {
		field.Write("stabilizationWindowSeconds")
		s.StabilizationWindowSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HPAScalingRules json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HPAScalingRules) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HPAScalingRules json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HPAScalingRules from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "policies":
			// Unsupported kind "pointer" for field "Policies".
			i.Skip()
			return true
		case "selectPolicy":
			s.SelectPolicy.Reset()
			if err := s.SelectPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field SelectPolicy", err.Error())
				return false
			}
			return true
		case "stabilizationWindowSeconds":
			s.StabilizationWindowSeconds.Reset()
			if err := s.StabilizationWindowSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field StabilizationWindowSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ScaleDown".
	// Unsupported kind "pointer" for field "ScaleUp".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "scaleDown":
			// Unsupported kind "pointer" for field "ScaleDown".
			i.Skip()
			return true
		case "scaleUp":
			// Unsupported kind "pointer" for field "ScaleUp".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Behavior".
	field.Write("maxReplicas")
	j.WriteInt32(s.MaxReplicas)
	// Unsupported kind "pointer" for field "Metrics".
	if s.MinReplicas.Set {
		field.Write("minReplicas")
		s.MinReplicas.WriteJSON(j)
	}
	field.Write("scaleTargetRef")
	s.ScaleTargetRef.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "behavior":
			// Unsupported kind "pointer" for field "Behavior".
			i.Skip()
			return true
		case "maxReplicas":
			s.MaxReplicas = i.ReadInt32()
			return i.Error == nil
		case "metrics":
			// Unsupported kind "pointer" for field "Metrics".
			i.Skip()
			return true
		case "minReplicas":
			s.MinReplicas.Reset()
			if err := s.MinReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field MinReplicas", err.Error())
				return false
			}
			return true
		case "scaleTargetRef":
			if err := s.ScaleTargetRef.ReadJSON(i); err != nil {
				i.ReportError("Field ScaleTargetRef", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "Conditions".
	// Unsupported kind "pointer" for field "CurrentMetrics".
	field.Write("currentReplicas")
	j.WriteInt32(s.CurrentReplicas)
	field.Write("desiredReplicas")
	j.WriteInt32(s.DesiredReplicas)
	// Unsupported kind "pointer" for field "LastScaleTime".
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "array" for field "Conditions".
			i.Skip()
			return true
		case "currentMetrics":
			// Unsupported kind "pointer" for field "CurrentMetrics".
			i.Skip()
			return true
		case "currentReplicas":
			s.CurrentReplicas = i.ReadInt32()
			return i.Error == nil
		case "desiredReplicas":
			s.DesiredReplicas = i.ReadInt32()
			return i.Error == nil
		case "lastScaleTime":
			// Unsupported kind "pointer" for field "LastScaleTime".
			i.Skip()
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricIdentifier) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	// Unsupported kind "pointer" for field "Selector".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2MetricIdentifier json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2MetricIdentifier) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2MetricIdentifier json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2MetricIdentifier) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricIdentifier from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricIdentifier) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ContainerResource".
	// Unsupported kind "pointer" for field "External".
	// Unsupported kind "pointer" for field "Object".
	// Unsupported kind "pointer" for field "Pods".
	// Unsupported kind "pointer" for field "Resource".
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2MetricSpec json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2MetricSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2MetricSpec json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricSpec from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerResource":
			// Unsupported kind "pointer" for field "ContainerResource".
			i.Skip()
			return true
		case "external":
			// Unsupported kind "pointer" for field "External".
			i.Skip()
			return true
		case "object":
			// Unsupported kind "pointer" for field "Object".
			i.Skip()
			return true
		case "pods":
			// Unsupported kind "pointer" for field "Pods".
			i.Skip()
			return true
		case "resource":
			// Unsupported kind "pointer" for field "Resource".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ContainerResource".
	// Unsupported kind "pointer" for field "External".
	// Unsupported kind "pointer" for field "Object".
	// Unsupported kind "pointer" for field "Pods".
	// Unsupported kind "pointer" for field "Resource".
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2MetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2MetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2MetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerResource":
			// Unsupported kind "pointer" for field "ContainerResource".
			i.Skip()
			return true
		case "external":
			// Unsupported kind "pointer" for field "External".
			i.Skip()
			return true
		case "object":
			// Unsupported kind "pointer" for field "Object".
			i.Skip()
			return true
		case "pods":
			// Unsupported kind "pointer" for field "Pods".
			i.Skip()
			return true
		case "resource":
			// Unsupported kind "pointer" for field "Resource".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricTarget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AverageUtilization.Set {
		field.Write("averageUtilization")
		s.AverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "AverageValue".
	field.Write("type")
	j.WriteString(s.Type)
	// Unsupported kind "pointer" for field "Value".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2MetricTarget json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2MetricTarget) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2MetricTarget json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricTarget from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "averageUtilization":
			s.AverageUtilization.Reset()
			if err := s.AverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field AverageUtilization", err.Error())
				return false
			}
			return true
		case "averageValue":
			// Unsupported kind "pointer" for field "AverageValue".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		case "value":
			// Unsupported kind "pointer" for field "Value".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2MetricValueStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AverageUtilization.Set {
		field.Write("averageUtilization")
		s.AverageUtilization.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "AverageValue".
	// Unsupported kind "pointer" for field "Value".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2MetricValueStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2MetricValueStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2MetricValueStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2MetricValueStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "averageUtilization":
			s.AverageUtilization.Reset()
			if err := s.AverageUtilization.ReadJSON(i); err != nil {
				i.ReportError("Field AverageUtilization", err.Error())
				return false
			}
			return true
		case "averageValue":
			// Unsupported kind "pointer" for field "AverageValue".
			i.Skip()
			return true
		case "value":
			// Unsupported kind "pointer" for field "Value".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("describedObject")
	s.DescribedObject.WriteJSON(j)
	field.Write("metric")
	s.Metric.WriteJSON(j)
	field.Write("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ObjectMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ObjectMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ObjectMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "describedObject":
			if err := s.DescribedObject.ReadJSON(i); err != nil {
				i.ReportError("Field DescribedObject", err.Error())
				return false
			}
			return true
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("current")
	s.Current.WriteJSON(j)
	field.Write("describedObject")
	s.DescribedObject.WriteJSON(j)
	field.Write("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ObjectMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ObjectMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ObjectMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				i.ReportError("Field Current", err.Error())
				return false
			}
			return true
		case "describedObject":
			if err := s.DescribedObject.ReadJSON(i); err != nil {
				i.ReportError("Field DescribedObject", err.Error())
				return false
			}
			return true
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("metric")
	s.Metric.WriteJSON(j)
	field.Write("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2PodsMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2PodsMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2PodsMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("current")
	s.Current.WriteJSON(j)
	field.Write("metric")
	s.Metric.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2PodsMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2PodsMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2PodsMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2PodsMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				i.ReportError("Field Current", err.Error())
				return false
			}
			return true
		case "metric":
			if err := s.Metric.ReadJSON(i); err != nil {
				i.ReportError("Field Metric", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("target")
	s.Target.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ResourceMetricSource json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ResourceMetricSource json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ResourceMetricSource from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "target":
			if err := s.Target.ReadJSON(i); err != nil {
				i.ReportError("Field Target", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("current")
	s.Current.WriteJSON(j)
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIAutoscalingV2beta2ResourceMetricStatus json value to io.Writer.
func (s IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIAutoscalingV2beta2ResourceMetricStatus json value from io.Reader.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIAutoscalingV2beta2ResourceMetricStatus from json stream.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "current":
			if err := s.Current.ReadJSON(i); err != nil {
				i.ReportError("Field Current", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJob) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1CronJob json value to io.Writer.
func (s IoK8sAPIBatchV1CronJob) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1CronJob json value from io.Reader.
func (s *IoK8sAPIBatchV1CronJob) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1CronJob from json stream.
func (s *IoK8sAPIBatchV1CronJob) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1CronJobList json value to io.Writer.
func (s IoK8sAPIBatchV1CronJobList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1CronJobList json value from io.Reader.
func (s *IoK8sAPIBatchV1CronJobList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1CronJobList from json stream.
func (s *IoK8sAPIBatchV1CronJobList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ConcurrencyPolicy.Set {
		field.Write("concurrencyPolicy")
		s.ConcurrencyPolicy.WriteJSON(j)
	}
	if s.FailedJobsHistoryLimit.Set {
		field.Write("failedJobsHistoryLimit")
		s.FailedJobsHistoryLimit.WriteJSON(j)
	}
	field.Write("jobTemplate")
	s.JobTemplate.WriteJSON(j)
	field.Write("schedule")
	j.WriteString(s.Schedule)
	if s.StartingDeadlineSeconds.Set {
		field.Write("startingDeadlineSeconds")
		s.StartingDeadlineSeconds.WriteJSON(j)
	}
	if s.SuccessfulJobsHistoryLimit.Set {
		field.Write("successfulJobsHistoryLimit")
		s.SuccessfulJobsHistoryLimit.WriteJSON(j)
	}
	if s.Suspend.Set {
		field.Write("suspend")
		s.Suspend.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1CronJobSpec json value to io.Writer.
func (s IoK8sAPIBatchV1CronJobSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1CronJobSpec json value from io.Reader.
func (s *IoK8sAPIBatchV1CronJobSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1CronJobSpec from json stream.
func (s *IoK8sAPIBatchV1CronJobSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "concurrencyPolicy":
			s.ConcurrencyPolicy.Reset()
			if err := s.ConcurrencyPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ConcurrencyPolicy", err.Error())
				return false
			}
			return true
		case "failedJobsHistoryLimit":
			s.FailedJobsHistoryLimit.Reset()
			if err := s.FailedJobsHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field FailedJobsHistoryLimit", err.Error())
				return false
			}
			return true
		case "jobTemplate":
			if err := s.JobTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field JobTemplate", err.Error())
				return false
			}
			return true
		case "schedule":
			s.Schedule = i.ReadString()
			return i.Error == nil
		case "startingDeadlineSeconds":
			s.StartingDeadlineSeconds.Reset()
			if err := s.StartingDeadlineSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field StartingDeadlineSeconds", err.Error())
				return false
			}
			return true
		case "successfulJobsHistoryLimit":
			s.SuccessfulJobsHistoryLimit.Reset()
			if err := s.SuccessfulJobsHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field SuccessfulJobsHistoryLimit", err.Error())
				return false
			}
			return true
		case "suspend":
			s.Suspend.Reset()
			if err := s.Suspend.ReadJSON(i); err != nil {
				i.ReportError("Field Suspend", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1CronJobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Active".
	// Unsupported kind "pointer" for field "LastScheduleTime".
	// Unsupported kind "pointer" for field "LastSuccessfulTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1CronJobStatus json value to io.Writer.
func (s IoK8sAPIBatchV1CronJobStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1CronJobStatus json value from io.Reader.
func (s *IoK8sAPIBatchV1CronJobStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1CronJobStatus from json stream.
func (s *IoK8sAPIBatchV1CronJobStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			// Unsupported kind "pointer" for field "Active".
			i.Skip()
			return true
		case "lastScheduleTime":
			// Unsupported kind "pointer" for field "LastScheduleTime".
			i.Skip()
			return true
		case "lastSuccessfulTime":
			// Unsupported kind "pointer" for field "LastSuccessfulTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1Job) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1Job json value to io.Writer.
func (s IoK8sAPIBatchV1Job) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1Job json value from io.Reader.
func (s *IoK8sAPIBatchV1Job) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1Job from json stream.
func (s *IoK8sAPIBatchV1Job) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastProbeTime".
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1JobCondition json value to io.Writer.
func (s IoK8sAPIBatchV1JobCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1JobCondition json value from io.Reader.
func (s *IoK8sAPIBatchV1JobCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1JobCondition from json stream.
func (s *IoK8sAPIBatchV1JobCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastProbeTime":
			// Unsupported kind "pointer" for field "LastProbeTime".
			i.Skip()
			return true
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1JobList json value to io.Writer.
func (s IoK8sAPIBatchV1JobList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1JobList json value from io.Reader.
func (s *IoK8sAPIBatchV1JobList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1JobList from json stream.
func (s *IoK8sAPIBatchV1JobList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ActiveDeadlineSeconds.Set {
		field.Write("activeDeadlineSeconds")
		s.ActiveDeadlineSeconds.WriteJSON(j)
	}
	if s.BackoffLimit.Set {
		field.Write("backoffLimit")
		s.BackoffLimit.WriteJSON(j)
	}
	if s.CompletionMode.Set {
		field.Write("completionMode")
		s.CompletionMode.WriteJSON(j)
	}
	if s.Completions.Set {
		field.Write("completions")
		s.Completions.WriteJSON(j)
	}
	if s.ManualSelector.Set {
		field.Write("manualSelector")
		s.ManualSelector.WriteJSON(j)
	}
	if s.Parallelism.Set {
		field.Write("parallelism")
		s.Parallelism.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Selector".
	if s.Suspend.Set {
		field.Write("suspend")
		s.Suspend.WriteJSON(j)
	}
	field.Write("template")
	s.Template.WriteJSON(j)
	if s.TtlSecondsAfterFinished.Set {
		field.Write("ttlSecondsAfterFinished")
		s.TtlSecondsAfterFinished.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1JobSpec json value to io.Writer.
func (s IoK8sAPIBatchV1JobSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1JobSpec json value from io.Reader.
func (s *IoK8sAPIBatchV1JobSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1JobSpec from json stream.
func (s *IoK8sAPIBatchV1JobSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "activeDeadlineSeconds":
			s.ActiveDeadlineSeconds.Reset()
			if err := s.ActiveDeadlineSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ActiveDeadlineSeconds", err.Error())
				return false
			}
			return true
		case "backoffLimit":
			s.BackoffLimit.Reset()
			if err := s.BackoffLimit.ReadJSON(i); err != nil {
				i.ReportError("Field BackoffLimit", err.Error())
				return false
			}
			return true
		case "completionMode":
			s.CompletionMode.Reset()
			if err := s.CompletionMode.ReadJSON(i); err != nil {
				i.ReportError("Field CompletionMode", err.Error())
				return false
			}
			return true
		case "completions":
			s.Completions.Reset()
			if err := s.Completions.ReadJSON(i); err != nil {
				i.ReportError("Field Completions", err.Error())
				return false
			}
			return true
		case "manualSelector":
			s.ManualSelector.Reset()
			if err := s.ManualSelector.ReadJSON(i); err != nil {
				i.ReportError("Field ManualSelector", err.Error())
				return false
			}
			return true
		case "parallelism":
			s.Parallelism.Reset()
			if err := s.Parallelism.ReadJSON(i); err != nil {
				i.ReportError("Field Parallelism", err.Error())
				return false
			}
			return true
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		case "suspend":
			s.Suspend.Reset()
			if err := s.Suspend.ReadJSON(i); err != nil {
				i.ReportError("Field Suspend", err.Error())
				return false
			}
			return true
		case "template":
			if err := s.Template.ReadJSON(i); err != nil {
				i.ReportError("Field Template", err.Error())
				return false
			}
			return true
		case "ttlSecondsAfterFinished":
			s.TtlSecondsAfterFinished.Reset()
			if err := s.TtlSecondsAfterFinished.ReadJSON(i); err != nil {
				i.ReportError("Field TtlSecondsAfterFinished", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Active.Set {
		field.Write("active")
		s.Active.WriteJSON(j)
	}
	if s.CompletedIndexes.Set {
		field.Write("completedIndexes")
		s.CompletedIndexes.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "CompletionTime".
	// Unsupported kind "pointer" for field "Conditions".
	if s.Failed.Set {
		field.Write("failed")
		s.Failed.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "StartTime".
	if s.Succeeded.Set {
		field.Write("succeeded")
		s.Succeeded.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "UncountedTerminatedPods".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1JobStatus json value to io.Writer.
func (s IoK8sAPIBatchV1JobStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1JobStatus json value from io.Reader.
func (s *IoK8sAPIBatchV1JobStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1JobStatus from json stream.
func (s *IoK8sAPIBatchV1JobStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			s.Active.Reset()
			if err := s.Active.ReadJSON(i); err != nil {
				i.ReportError("Field Active", err.Error())
				return false
			}
			return true
		case "completedIndexes":
			s.CompletedIndexes.Reset()
			if err := s.CompletedIndexes.ReadJSON(i); err != nil {
				i.ReportError("Field CompletedIndexes", err.Error())
				return false
			}
			return true
		case "completionTime":
			// Unsupported kind "pointer" for field "CompletionTime".
			i.Skip()
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "failed":
			s.Failed.Reset()
			if err := s.Failed.ReadJSON(i); err != nil {
				i.ReportError("Field Failed", err.Error())
				return false
			}
			return true
		case "startTime":
			// Unsupported kind "pointer" for field "StartTime".
			i.Skip()
			return true
		case "succeeded":
			s.Succeeded.Reset()
			if err := s.Succeeded.ReadJSON(i); err != nil {
				i.ReportError("Field Succeeded", err.Error())
				return false
			}
			return true
		case "uncountedTerminatedPods":
			// Unsupported kind "pointer" for field "UncountedTerminatedPods".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1JobTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1JobTemplateSpec json value to io.Writer.
func (s IoK8sAPIBatchV1JobTemplateSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1JobTemplateSpec json value from io.Reader.
func (s *IoK8sAPIBatchV1JobTemplateSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1JobTemplateSpec from json stream.
func (s *IoK8sAPIBatchV1JobTemplateSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1UncountedTerminatedPods) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Failed".
	// Unsupported kind "pointer" for field "Succeeded".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1UncountedTerminatedPods json value to io.Writer.
func (s IoK8sAPIBatchV1UncountedTerminatedPods) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1UncountedTerminatedPods json value from io.Reader.
func (s *IoK8sAPIBatchV1UncountedTerminatedPods) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1UncountedTerminatedPods from json stream.
func (s *IoK8sAPIBatchV1UncountedTerminatedPods) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "failed":
			// Unsupported kind "pointer" for field "Failed".
			i.Skip()
			return true
		case "succeeded":
			// Unsupported kind "pointer" for field "Succeeded".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJob) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1beta1CronJob json value to io.Writer.
func (s IoK8sAPIBatchV1beta1CronJob) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1beta1CronJob json value from io.Reader.
func (s *IoK8sAPIBatchV1beta1CronJob) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJob from json stream.
func (s *IoK8sAPIBatchV1beta1CronJob) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1beta1CronJobList json value to io.Writer.
func (s IoK8sAPIBatchV1beta1CronJobList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1beta1CronJobList json value from io.Reader.
func (s *IoK8sAPIBatchV1beta1CronJobList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobList from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ConcurrencyPolicy.Set {
		field.Write("concurrencyPolicy")
		s.ConcurrencyPolicy.WriteJSON(j)
	}
	if s.FailedJobsHistoryLimit.Set {
		field.Write("failedJobsHistoryLimit")
		s.FailedJobsHistoryLimit.WriteJSON(j)
	}
	field.Write("jobTemplate")
	s.JobTemplate.WriteJSON(j)
	field.Write("schedule")
	j.WriteString(s.Schedule)
	if s.StartingDeadlineSeconds.Set {
		field.Write("startingDeadlineSeconds")
		s.StartingDeadlineSeconds.WriteJSON(j)
	}
	if s.SuccessfulJobsHistoryLimit.Set {
		field.Write("successfulJobsHistoryLimit")
		s.SuccessfulJobsHistoryLimit.WriteJSON(j)
	}
	if s.Suspend.Set {
		field.Write("suspend")
		s.Suspend.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1beta1CronJobSpec json value to io.Writer.
func (s IoK8sAPIBatchV1beta1CronJobSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1beta1CronJobSpec json value from io.Reader.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobSpec from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "concurrencyPolicy":
			s.ConcurrencyPolicy.Reset()
			if err := s.ConcurrencyPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ConcurrencyPolicy", err.Error())
				return false
			}
			return true
		case "failedJobsHistoryLimit":
			s.FailedJobsHistoryLimit.Reset()
			if err := s.FailedJobsHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field FailedJobsHistoryLimit", err.Error())
				return false
			}
			return true
		case "jobTemplate":
			if err := s.JobTemplate.ReadJSON(i); err != nil {
				i.ReportError("Field JobTemplate", err.Error())
				return false
			}
			return true
		case "schedule":
			s.Schedule = i.ReadString()
			return i.Error == nil
		case "startingDeadlineSeconds":
			s.StartingDeadlineSeconds.Reset()
			if err := s.StartingDeadlineSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field StartingDeadlineSeconds", err.Error())
				return false
			}
			return true
		case "successfulJobsHistoryLimit":
			s.SuccessfulJobsHistoryLimit.Reset()
			if err := s.SuccessfulJobsHistoryLimit.ReadJSON(i); err != nil {
				i.ReportError("Field SuccessfulJobsHistoryLimit", err.Error())
				return false
			}
			return true
		case "suspend":
			s.Suspend.Reset()
			if err := s.Suspend.ReadJSON(i); err != nil {
				i.ReportError("Field Suspend", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1CronJobStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Active".
	// Unsupported kind "pointer" for field "LastScheduleTime".
	// Unsupported kind "pointer" for field "LastSuccessfulTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1beta1CronJobStatus json value to io.Writer.
func (s IoK8sAPIBatchV1beta1CronJobStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1beta1CronJobStatus json value from io.Reader.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1beta1CronJobStatus from json stream.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			// Unsupported kind "pointer" for field "Active".
			i.Skip()
			return true
		case "lastScheduleTime":
			// Unsupported kind "pointer" for field "LastScheduleTime".
			i.Skip()
			return true
		case "lastSuccessfulTime":
			// Unsupported kind "pointer" for field "LastSuccessfulTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIBatchV1beta1JobTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIBatchV1beta1JobTemplateSpec json value to io.Writer.
func (s IoK8sAPIBatchV1beta1JobTemplateSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIBatchV1beta1JobTemplateSpec json value from io.Reader.
func (s *IoK8sAPIBatchV1beta1JobTemplateSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIBatchV1beta1JobTemplateSpec from json stream.
func (s *IoK8sAPIBatchV1beta1JobTemplateSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("spec")
	s.Spec.WriteJSON(j)
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICertificatesV1CertificateSigningRequest json value to io.Writer.
func (s IoK8sAPICertificatesV1CertificateSigningRequest) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICertificatesV1CertificateSigningRequest json value from io.Reader.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequest from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	// Unsupported kind "pointer" for field "LastUpdateTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICertificatesV1CertificateSigningRequestCondition json value to io.Writer.
func (s IoK8sAPICertificatesV1CertificateSigningRequestCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICertificatesV1CertificateSigningRequestCondition json value from io.Reader.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestCondition from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "lastUpdateTime":
			// Unsupported kind "pointer" for field "LastUpdateTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICertificatesV1CertificateSigningRequestList json value to io.Writer.
func (s IoK8sAPICertificatesV1CertificateSigningRequestList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICertificatesV1CertificateSigningRequestList json value from io.Reader.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestList from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ExpirationSeconds.Set {
		field.Write("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Extra".
	// Unsupported kind "pointer" for field "Groups".
	// Unsupported kind "primitive" for field "Request".
	field.Write("signerName")
	j.WriteString(s.SignerName)
	if s.UID.Set {
		field.Write("uid")
		s.UID.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Usages".
	if s.Username.Set {
		field.Write("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICertificatesV1CertificateSigningRequestSpec json value to io.Writer.
func (s IoK8sAPICertificatesV1CertificateSigningRequestSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICertificatesV1CertificateSigningRequestSpec json value from io.Reader.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestSpec from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "expirationSeconds":
			s.ExpirationSeconds.Reset()
			if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ExpirationSeconds", err.Error())
				return false
			}
			return true
		case "extra":
			// Unsupported kind "pointer" for field "Extra".
			i.Skip()
			return true
		case "groups":
			// Unsupported kind "pointer" for field "Groups".
			i.Skip()
			return true
		case "request":
			// Unsupported kind "primitive" for field "Request".
			i.Skip()
			return true
		case "signerName":
			s.SignerName = i.ReadString()
			return i.Error == nil
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		case "usages":
			// Unsupported kind "pointer" for field "Usages".
			i.Skip()
			return true
		case "username":
			s.Username.Reset()
			if err := s.Username.ReadJSON(i); err != nil {
				i.ReportError("Field Username", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICertificatesV1CertificateSigningRequestStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Certificate".
	// Unsupported kind "pointer" for field "Conditions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICertificatesV1CertificateSigningRequestStatus json value to io.Writer.
func (s IoK8sAPICertificatesV1CertificateSigningRequestStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICertificatesV1CertificateSigningRequestStatus json value from io.Reader.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICertificatesV1CertificateSigningRequestStatus from json stream.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "certificate":
			// Unsupported kind "pointer" for field "Certificate".
			i.Skip()
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1Lease) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoordinationV1Lease json value to io.Writer.
func (s IoK8sAPICoordinationV1Lease) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoordinationV1Lease json value from io.Reader.
func (s *IoK8sAPICoordinationV1Lease) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoordinationV1Lease from json stream.
func (s *IoK8sAPICoordinationV1Lease) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1LeaseList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoordinationV1LeaseList json value to io.Writer.
func (s IoK8sAPICoordinationV1LeaseList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoordinationV1LeaseList json value from io.Reader.
func (s *IoK8sAPICoordinationV1LeaseList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoordinationV1LeaseList from json stream.
func (s *IoK8sAPICoordinationV1LeaseList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoordinationV1LeaseSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AcquireTime".
	if s.HolderIdentity.Set {
		field.Write("holderIdentity")
		s.HolderIdentity.WriteJSON(j)
	}
	if s.LeaseDurationSeconds.Set {
		field.Write("leaseDurationSeconds")
		s.LeaseDurationSeconds.WriteJSON(j)
	}
	if s.LeaseTransitions.Set {
		field.Write("leaseTransitions")
		s.LeaseTransitions.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "RenewTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoordinationV1LeaseSpec json value to io.Writer.
func (s IoK8sAPICoordinationV1LeaseSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoordinationV1LeaseSpec json value from io.Reader.
func (s *IoK8sAPICoordinationV1LeaseSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoordinationV1LeaseSpec from json stream.
func (s *IoK8sAPICoordinationV1LeaseSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "acquireTime":
			// Unsupported kind "pointer" for field "AcquireTime".
			i.Skip()
			return true
		case "holderIdentity":
			s.HolderIdentity.Reset()
			if err := s.HolderIdentity.ReadJSON(i); err != nil {
				i.ReportError("Field HolderIdentity", err.Error())
				return false
			}
			return true
		case "leaseDurationSeconds":
			s.LeaseDurationSeconds.Reset()
			if err := s.LeaseDurationSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field LeaseDurationSeconds", err.Error())
				return false
			}
			return true
		case "leaseTransitions":
			s.LeaseTransitions.Reset()
			if err := s.LeaseTransitions.ReadJSON(i); err != nil {
				i.ReportError("Field LeaseTransitions", err.Error())
				return false
			}
			return true
		case "renewTime":
			// Unsupported kind "pointer" for field "RenewTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Partition.Set {
		field.Write("partition")
		s.Partition.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	field.Write("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource from json stream.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "partition":
			s.Partition.Reset()
			if err := s.Partition.ReadJSON(i); err != nil {
				i.ReportError("Field Partition", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "volumeID":
			s.VolumeID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Affinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "NodeAffinity".
	// Unsupported kind "pointer" for field "PodAffinity".
	// Unsupported kind "pointer" for field "PodAntiAffinity".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Affinity json value to io.Writer.
func (s IoK8sAPICoreV1Affinity) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Affinity json value from io.Reader.
func (s *IoK8sAPICoreV1Affinity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Affinity from json stream.
func (s *IoK8sAPICoreV1Affinity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nodeAffinity":
			// Unsupported kind "pointer" for field "NodeAffinity".
			i.Skip()
			return true
		case "podAffinity":
			// Unsupported kind "pointer" for field "PodAffinity".
			i.Skip()
			return true
		case "podAntiAffinity":
			// Unsupported kind "pointer" for field "PodAntiAffinity".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AttachedVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("devicePath")
	j.WriteString(s.DevicePath)
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1AttachedVolume json value to io.Writer.
func (s IoK8sAPICoreV1AttachedVolume) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1AttachedVolume json value from io.Reader.
func (s *IoK8sAPICoreV1AttachedVolume) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1AttachedVolume from json stream.
func (s *IoK8sAPICoreV1AttachedVolume) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "devicePath":
			s.DevicePath = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.CachingMode.Set {
		field.Write("cachingMode")
		s.CachingMode.WriteJSON(j)
	}
	field.Write("diskName")
	j.WriteString(s.DiskName)
	field.Write("diskURI")
	j.WriteString(s.DiskURI)
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1AzureDiskVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1AzureDiskVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1AzureDiskVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1AzureDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cachingMode":
			s.CachingMode.Reset()
			if err := s.CachingMode.ReadJSON(i); err != nil {
				i.ReportError("Field CachingMode", err.Error())
				return false
			}
			return true
		case "diskName":
			s.DiskName = i.ReadString()
			return i.Error == nil
		case "diskURI":
			s.DiskURI = i.ReadString()
			return i.Error == nil
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureFilePersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	field.Write("secretName")
	j.WriteString(s.SecretName)
	if s.SecretNamespace.Set {
		field.Write("secretNamespace")
		s.SecretNamespace.WriteJSON(j)
	}
	field.Write("shareName")
	j.WriteString(s.ShareName)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1AzureFilePersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1AzureFilePersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1AzureFilePersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1AzureFilePersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretName":
			s.SecretName = i.ReadString()
			return i.Error == nil
		case "secretNamespace":
			s.SecretNamespace.Reset()
			if err := s.SecretNamespace.ReadJSON(i); err != nil {
				i.ReportError("Field SecretNamespace", err.Error())
				return false
			}
			return true
		case "shareName":
			s.ShareName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1AzureFileVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	field.Write("secretName")
	j.WriteString(s.SecretName)
	field.Write("shareName")
	j.WriteString(s.ShareName)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1AzureFileVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1AzureFileVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1AzureFileVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1AzureFileVolumeSource from json stream.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretName":
			s.SecretName = i.ReadString()
			return i.Error == nil
		case "shareName":
			s.ShareName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ControllerExpandSecretRef".
	// Unsupported kind "pointer" for field "ControllerPublishSecretRef".
	field.Write("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "NodePublishSecretRef".
	// Unsupported kind "pointer" for field "NodeStageSecretRef".
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "VolumeAttributes".
	field.Write("volumeHandle")
	j.WriteString(s.VolumeHandle)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CSIPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CSIPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CSIPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CSIPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "controllerExpandSecretRef":
			// Unsupported kind "pointer" for field "ControllerExpandSecretRef".
			i.Skip()
			return true
		case "controllerPublishSecretRef":
			// Unsupported kind "pointer" for field "ControllerPublishSecretRef".
			i.Skip()
			return true
		case "driver":
			s.Driver = i.ReadString()
			return i.Error == nil
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "nodePublishSecretRef":
			// Unsupported kind "pointer" for field "NodePublishSecretRef".
			i.Skip()
			return true
		case "nodeStageSecretRef":
			// Unsupported kind "pointer" for field "NodeStageSecretRef".
			i.Skip()
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "volumeAttributes":
			// Unsupported kind "pointer" for field "VolumeAttributes".
			i.Skip()
			return true
		case "volumeHandle":
			s.VolumeHandle = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CSIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "NodePublishSecretRef".
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "VolumeAttributes".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CSIVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CSIVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CSIVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CSIVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CSIVolumeSource from json stream.
func (s *IoK8sAPICoreV1CSIVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "driver":
			s.Driver = i.ReadString()
			return i.Error == nil
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "nodePublishSecretRef":
			// Unsupported kind "pointer" for field "NodePublishSecretRef".
			i.Skip()
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "volumeAttributes":
			// Unsupported kind "pointer" for field "VolumeAttributes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Capabilities) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Add".
	// Unsupported kind "pointer" for field "Drop".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Capabilities json value to io.Writer.
func (s IoK8sAPICoreV1Capabilities) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Capabilities json value from io.Reader.
func (s *IoK8sAPICoreV1Capabilities) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Capabilities from json stream.
func (s *IoK8sAPICoreV1Capabilities) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "add":
			// Unsupported kind "pointer" for field "Add".
			i.Skip()
			return true
		case "drop":
			// Unsupported kind "pointer" for field "Drop".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CephFSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "Monitors".
	if s.Path.Set {
		field.Write("path")
		s.Path.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretFile.Set {
		field.Write("secretFile")
		s.SecretFile.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	if s.User.Set {
		field.Write("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CephFSPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CephFSPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CephFSPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CephFSPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "monitors":
			// Unsupported kind "array" for field "Monitors".
			i.Skip()
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretFile":
			s.SecretFile.Reset()
			if err := s.SecretFile.ReadJSON(i); err != nil {
				i.ReportError("Field SecretFile", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CephFSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "Monitors".
	if s.Path.Set {
		field.Write("path")
		s.Path.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SecretFile.Set {
		field.Write("secretFile")
		s.SecretFile.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	if s.User.Set {
		field.Write("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CephFSVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CephFSVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CephFSVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CephFSVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CephFSVolumeSource from json stream.
func (s *IoK8sAPICoreV1CephFSVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "monitors":
			// Unsupported kind "array" for field "Monitors".
			i.Skip()
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretFile":
			s.SecretFile.Reset()
			if err := s.SecretFile.ReadJSON(i); err != nil {
				i.ReportError("Field SecretFile", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CinderPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	field.Write("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CinderPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CinderPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CinderPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CinderPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		case "volumeID":
			s.VolumeID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1CinderVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	field.Write("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1CinderVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1CinderVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1CinderVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1CinderVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1CinderVolumeSource from json stream.
func (s *IoK8sAPICoreV1CinderVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		case "volumeID":
			s.VolumeID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ClientIPConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.TimeoutSeconds.Set {
		field.Write("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ClientIPConfig json value to io.Writer.
func (s IoK8sAPICoreV1ClientIPConfig) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ClientIPConfig json value from io.Reader.
func (s *IoK8sAPICoreV1ClientIPConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ClientIPConfig from json stream.
func (s *IoK8sAPICoreV1ClientIPConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TimeoutSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Error.Set {
		field.Write("error")
		s.Error.WriteJSON(j)
	}
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ComponentCondition json value to io.Writer.
func (s IoK8sAPICoreV1ComponentCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ComponentCondition json value from io.Reader.
func (s *IoK8sAPICoreV1ComponentCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ComponentCondition from json stream.
func (s *IoK8sAPICoreV1ComponentCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				i.ReportError("Field Error", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Conditions".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ComponentStatus json value to io.Writer.
func (s IoK8sAPICoreV1ComponentStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ComponentStatus json value from io.Reader.
func (s *IoK8sAPICoreV1ComponentStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ComponentStatus from json stream.
func (s *IoK8sAPICoreV1ComponentStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ComponentStatusList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ComponentStatusList json value to io.Writer.
func (s IoK8sAPICoreV1ComponentStatusList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ComponentStatusList json value from io.Reader.
func (s *IoK8sAPICoreV1ComponentStatusList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ComponentStatusList from json stream.
func (s *IoK8sAPICoreV1ComponentStatusList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMap) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "BinaryData".
	// Unsupported kind "pointer" for field "Data".
	if s.Immutable.Set {
		field.Write("immutable")
		s.Immutable.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMap json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMap) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMap json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMap) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMap from json stream.
func (s *IoK8sAPICoreV1ConfigMap) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "binaryData":
			// Unsupported kind "pointer" for field "BinaryData".
			i.Skip()
			return true
		case "data":
			// Unsupported kind "pointer" for field "Data".
			i.Skip()
			return true
		case "immutable":
			s.Immutable.Reset()
			if err := s.Immutable.ReadJSON(i); err != nil {
				i.ReportError("Field Immutable", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapEnvSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		field.Write("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapEnvSource json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapEnvSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapEnvSource json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapEnvSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapEnvSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapEnvSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapKeySelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("key")
	j.WriteString(s.Key)
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		field.Write("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapKeySelector json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapKeySelector) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapKeySelector json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapKeySelector from json stream.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapList json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapList json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapList from json stream.
func (s *IoK8sAPICoreV1ConfigMapList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapNodeConfigSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("kubeletConfigKey")
	j.WriteString(s.KubeletConfigKey)
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("namespace")
	j.WriteString(s.Namespace)
	if s.ResourceVersion.Set {
		field.Write("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		field.Write("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapNodeConfigSource json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapNodeConfigSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapNodeConfigSource json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapNodeConfigSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "kubeletConfigKey":
			s.KubeletConfigKey = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace = i.ReadString()
			return i.Error == nil
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceVersion", err.Error())
				return false
			}
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Items".
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		field.Write("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapProjection json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapProjection) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapProjection json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapProjection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapProjection from json stream.
func (s *IoK8sAPICoreV1ConfigMapProjection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "items":
			// Unsupported kind "pointer" for field "Items".
			i.Skip()
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ConfigMapVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.DefaultMode.Set {
		field.Write("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Items".
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		field.Write("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ConfigMapVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ConfigMapVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ConfigMapVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ConfigMapVolumeSource from json stream.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultMode", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "pointer" for field "Items".
			i.Skip()
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Container) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Args".
	// Unsupported kind "pointer" for field "Command".
	// Unsupported kind "pointer" for field "Env".
	// Unsupported kind "pointer" for field "EnvFrom".
	if s.Image.Set {
		field.Write("image")
		s.Image.WriteJSON(j)
	}
	if s.ImagePullPolicy.Set {
		field.Write("imagePullPolicy")
		s.ImagePullPolicy.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Lifecycle".
	// Unsupported kind "pointer" for field "LivenessProbe".
	field.Write("name")
	j.WriteString(s.Name)
	// Unsupported kind "pointer" for field "Ports".
	// Unsupported kind "pointer" for field "ReadinessProbe".
	// Unsupported kind "pointer" for field "Resources".
	// Unsupported kind "pointer" for field "SecurityContext".
	// Unsupported kind "pointer" for field "StartupProbe".
	if s.Stdin.Set {
		field.Write("stdin")
		s.Stdin.WriteJSON(j)
	}
	if s.StdinOnce.Set {
		field.Write("stdinOnce")
		s.StdinOnce.WriteJSON(j)
	}
	if s.TerminationMessagePath.Set {
		field.Write("terminationMessagePath")
		s.TerminationMessagePath.WriteJSON(j)
	}
	if s.TerminationMessagePolicy.Set {
		field.Write("terminationMessagePolicy")
		s.TerminationMessagePolicy.WriteJSON(j)
	}
	if s.Tty.Set {
		field.Write("tty")
		s.Tty.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "VolumeDevices".
	// Unsupported kind "pointer" for field "VolumeMounts".
	if s.WorkingDir.Set {
		field.Write("workingDir")
		s.WorkingDir.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Container json value to io.Writer.
func (s IoK8sAPICoreV1Container) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Container json value from io.Reader.
func (s *IoK8sAPICoreV1Container) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Container from json stream.
func (s *IoK8sAPICoreV1Container) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "args":
			// Unsupported kind "pointer" for field "Args".
			i.Skip()
			return true
		case "command":
			// Unsupported kind "pointer" for field "Command".
			i.Skip()
			return true
		case "env":
			// Unsupported kind "pointer" for field "Env".
			i.Skip()
			return true
		case "envFrom":
			// Unsupported kind "pointer" for field "EnvFrom".
			i.Skip()
			return true
		case "image":
			s.Image.Reset()
			if err := s.Image.ReadJSON(i); err != nil {
				i.ReportError("Field Image", err.Error())
				return false
			}
			return true
		case "imagePullPolicy":
			s.ImagePullPolicy.Reset()
			if err := s.ImagePullPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ImagePullPolicy", err.Error())
				return false
			}
			return true
		case "lifecycle":
			// Unsupported kind "pointer" for field "Lifecycle".
			i.Skip()
			return true
		case "livenessProbe":
			// Unsupported kind "pointer" for field "LivenessProbe".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "ports":
			// Unsupported kind "pointer" for field "Ports".
			i.Skip()
			return true
		case "readinessProbe":
			// Unsupported kind "pointer" for field "ReadinessProbe".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "pointer" for field "Resources".
			i.Skip()
			return true
		case "securityContext":
			// Unsupported kind "pointer" for field "SecurityContext".
			i.Skip()
			return true
		case "startupProbe":
			// Unsupported kind "pointer" for field "StartupProbe".
			i.Skip()
			return true
		case "stdin":
			s.Stdin.Reset()
			if err := s.Stdin.ReadJSON(i); err != nil {
				i.ReportError("Field Stdin", err.Error())
				return false
			}
			return true
		case "stdinOnce":
			s.StdinOnce.Reset()
			if err := s.StdinOnce.ReadJSON(i); err != nil {
				i.ReportError("Field StdinOnce", err.Error())
				return false
			}
			return true
		case "terminationMessagePath":
			s.TerminationMessagePath.Reset()
			if err := s.TerminationMessagePath.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationMessagePath", err.Error())
				return false
			}
			return true
		case "terminationMessagePolicy":
			s.TerminationMessagePolicy.Reset()
			if err := s.TerminationMessagePolicy.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationMessagePolicy", err.Error())
				return false
			}
			return true
		case "tty":
			s.Tty.Reset()
			if err := s.Tty.ReadJSON(i); err != nil {
				i.ReportError("Field Tty", err.Error())
				return false
			}
			return true
		case "volumeDevices":
			// Unsupported kind "pointer" for field "VolumeDevices".
			i.Skip()
			return true
		case "volumeMounts":
			// Unsupported kind "pointer" for field "VolumeMounts".
			i.Skip()
			return true
		case "workingDir":
			s.WorkingDir.Reset()
			if err := s.WorkingDir.ReadJSON(i); err != nil {
				i.ReportError("Field WorkingDir", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerImage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Names".
	if s.SizeBytes.Set {
		field.Write("sizeBytes")
		s.SizeBytes.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerImage json value to io.Writer.
func (s IoK8sAPICoreV1ContainerImage) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerImage json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerImage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerImage from json stream.
func (s *IoK8sAPICoreV1ContainerImage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "names":
			// Unsupported kind "pointer" for field "Names".
			i.Skip()
			return true
		case "sizeBytes":
			s.SizeBytes.Reset()
			if err := s.SizeBytes.ReadJSON(i); err != nil {
				i.ReportError("Field SizeBytes", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("containerPort")
	j.WriteInt32(s.ContainerPort)
	if s.HostIP.Set {
		field.Write("hostIP")
		s.HostIP.WriteJSON(j)
	}
	if s.HostPort.Set {
		field.Write("hostPort")
		s.HostPort.WriteJSON(j)
	}
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Protocol.Set {
		field.Write("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerPort json value to io.Writer.
func (s IoK8sAPICoreV1ContainerPort) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerPort json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerPort from json stream.
func (s *IoK8sAPICoreV1ContainerPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerPort":
			s.ContainerPort = i.ReadInt32()
			return i.Error == nil
		case "hostIP":
			s.HostIP.Reset()
			if err := s.HostIP.ReadJSON(i); err != nil {
				i.ReportError("Field HostIP", err.Error())
				return false
			}
			return true
		case "hostPort":
			s.HostPort.Reset()
			if err := s.HostPort.ReadJSON(i); err != nil {
				i.ReportError("Field HostPort", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerState) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Running".
	// Unsupported kind "pointer" for field "Terminated".
	// Unsupported kind "pointer" for field "Waiting".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerState json value to io.Writer.
func (s IoK8sAPICoreV1ContainerState) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerState json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerState) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerState from json stream.
func (s *IoK8sAPICoreV1ContainerState) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "running":
			// Unsupported kind "pointer" for field "Running".
			i.Skip()
			return true
		case "terminated":
			// Unsupported kind "pointer" for field "Terminated".
			i.Skip()
			return true
		case "waiting":
			// Unsupported kind "pointer" for field "Waiting".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateRunning) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "StartedAt".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerStateRunning json value to io.Writer.
func (s IoK8sAPICoreV1ContainerStateRunning) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerStateRunning json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerStateRunning) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateRunning from json stream.
func (s *IoK8sAPICoreV1ContainerStateRunning) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "startedAt":
			// Unsupported kind "pointer" for field "StartedAt".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateTerminated) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ContainerID.Set {
		field.Write("containerID")
		s.ContainerID.WriteJSON(j)
	}
	field.Write("exitCode")
	j.WriteInt32(s.ExitCode)
	// Unsupported kind "pointer" for field "FinishedAt".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Signal.Set {
		field.Write("signal")
		s.Signal.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "StartedAt".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerStateTerminated json value to io.Writer.
func (s IoK8sAPICoreV1ContainerStateTerminated) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerStateTerminated json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerStateTerminated) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateTerminated from json stream.
func (s *IoK8sAPICoreV1ContainerStateTerminated) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerID":
			s.ContainerID.Reset()
			if err := s.ContainerID.ReadJSON(i); err != nil {
				i.ReportError("Field ContainerID", err.Error())
				return false
			}
			return true
		case "exitCode":
			s.ExitCode = i.ReadInt32()
			return i.Error == nil
		case "finishedAt":
			// Unsupported kind "pointer" for field "FinishedAt".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "signal":
			s.Signal.Reset()
			if err := s.Signal.ReadJSON(i); err != nil {
				i.ReportError("Field Signal", err.Error())
				return false
			}
			return true
		case "startedAt":
			// Unsupported kind "pointer" for field "StartedAt".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStateWaiting) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerStateWaiting json value to io.Writer.
func (s IoK8sAPICoreV1ContainerStateWaiting) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerStateWaiting json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerStateWaiting) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerStateWaiting from json stream.
func (s *IoK8sAPICoreV1ContainerStateWaiting) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ContainerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ContainerID.Set {
		field.Write("containerID")
		s.ContainerID.WriteJSON(j)
	}
	field.Write("image")
	j.WriteString(s.Image)
	field.Write("imageID")
	j.WriteString(s.ImageID)
	// Unsupported kind "pointer" for field "LastState".
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("ready")
	j.WriteBool(s.Ready)
	field.Write("restartCount")
	j.WriteInt32(s.RestartCount)
	if s.Started.Set {
		field.Write("started")
		s.Started.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "State".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ContainerStatus json value to io.Writer.
func (s IoK8sAPICoreV1ContainerStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ContainerStatus json value from io.Reader.
func (s *IoK8sAPICoreV1ContainerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ContainerStatus from json stream.
func (s *IoK8sAPICoreV1ContainerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerID":
			s.ContainerID.Reset()
			if err := s.ContainerID.ReadJSON(i); err != nil {
				i.ReportError("Field ContainerID", err.Error())
				return false
			}
			return true
		case "image":
			s.Image = i.ReadString()
			return i.Error == nil
		case "imageID":
			s.ImageID = i.ReadString()
			return i.Error == nil
		case "lastState":
			// Unsupported kind "pointer" for field "LastState".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "ready":
			s.Ready = i.ReadBool()
			return i.Error == nil
		case "restartCount":
			s.RestartCount = i.ReadInt32()
			return i.Error == nil
		case "started":
			s.Started.Reset()
			if err := s.Started.ReadJSON(i); err != nil {
				i.ReportError("Field Started", err.Error())
				return false
			}
			return true
		case "state":
			// Unsupported kind "pointer" for field "State".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DaemonEndpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("Port")
	j.WriteInt32(s.Port)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1DaemonEndpoint json value to io.Writer.
func (s IoK8sAPICoreV1DaemonEndpoint) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1DaemonEndpoint json value from io.Reader.
func (s *IoK8sAPICoreV1DaemonEndpoint) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1DaemonEndpoint from json stream.
func (s *IoK8sAPICoreV1DaemonEndpoint) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "Port":
			s.Port = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Items".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1DownwardAPIProjection json value to io.Writer.
func (s IoK8sAPICoreV1DownwardAPIProjection) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1DownwardAPIProjection json value from io.Reader.
func (s *IoK8sAPICoreV1DownwardAPIProjection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIProjection from json stream.
func (s *IoK8sAPICoreV1DownwardAPIProjection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "items":
			// Unsupported kind "pointer" for field "Items".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIVolumeFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "FieldRef".
	if s.Mode.Set {
		field.Write("mode")
		s.Mode.WriteJSON(j)
	}
	field.Write("path")
	j.WriteString(s.Path)
	// Unsupported kind "pointer" for field "ResourceFieldRef".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1DownwardAPIVolumeFile json value to io.Writer.
func (s IoK8sAPICoreV1DownwardAPIVolumeFile) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1DownwardAPIVolumeFile json value from io.Reader.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIVolumeFile from json stream.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fieldRef":
			// Unsupported kind "pointer" for field "FieldRef".
			i.Skip()
			return true
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(i); err != nil {
				i.ReportError("Field Mode", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "resourceFieldRef":
			// Unsupported kind "pointer" for field "ResourceFieldRef".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1DownwardAPIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.DefaultMode.Set {
		field.Write("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Items".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1DownwardAPIVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1DownwardAPIVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1DownwardAPIVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1DownwardAPIVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1DownwardAPIVolumeSource from json stream.
func (s *IoK8sAPICoreV1DownwardAPIVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultMode", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "pointer" for field "Items".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EmptyDirVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Medium.Set {
		field.Write("medium")
		s.Medium.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SizeLimit".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EmptyDirVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1EmptyDirVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EmptyDirVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1EmptyDirVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EmptyDirVolumeSource from json stream.
func (s *IoK8sAPICoreV1EmptyDirVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "medium":
			s.Medium.Reset()
			if err := s.Medium.ReadJSON(i); err != nil {
				i.ReportError("Field Medium", err.Error())
				return false
			}
			return true
		case "sizeLimit":
			// Unsupported kind "pointer" for field "SizeLimit".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointAddress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Hostname.Set {
		field.Write("hostname")
		s.Hostname.WriteJSON(j)
	}
	field.Write("ip")
	j.WriteString(s.IP)
	if s.NodeName.Set {
		field.Write("nodeName")
		s.NodeName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "TargetRef".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EndpointAddress json value to io.Writer.
func (s IoK8sAPICoreV1EndpointAddress) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EndpointAddress json value from io.Reader.
func (s *IoK8sAPICoreV1EndpointAddress) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EndpointAddress from json stream.
func (s *IoK8sAPICoreV1EndpointAddress) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				i.ReportError("Field Hostname", err.Error())
				return false
			}
			return true
		case "ip":
			s.IP = i.ReadString()
			return i.Error == nil
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				i.ReportError("Field NodeName", err.Error())
				return false
			}
			return true
		case "targetRef":
			// Unsupported kind "pointer" for field "TargetRef".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AppProtocol.Set {
		field.Write("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	field.Write("port")
	j.WriteInt32(s.Port)
	if s.Protocol.Set {
		field.Write("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EndpointPort json value to io.Writer.
func (s IoK8sAPICoreV1EndpointPort) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EndpointPort json value from io.Reader.
func (s *IoK8sAPICoreV1EndpointPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EndpointPort from json stream.
func (s *IoK8sAPICoreV1EndpointPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				i.ReportError("Field AppProtocol", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "port":
			s.Port = i.ReadInt32()
			return i.Error == nil
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointSubset) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Addresses".
	// Unsupported kind "pointer" for field "NotReadyAddresses".
	// Unsupported kind "pointer" for field "Ports".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EndpointSubset json value to io.Writer.
func (s IoK8sAPICoreV1EndpointSubset) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EndpointSubset json value from io.Reader.
func (s *IoK8sAPICoreV1EndpointSubset) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EndpointSubset from json stream.
func (s *IoK8sAPICoreV1EndpointSubset) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addresses":
			// Unsupported kind "pointer" for field "Addresses".
			i.Skip()
			return true
		case "notReadyAddresses":
			// Unsupported kind "pointer" for field "NotReadyAddresses".
			i.Skip()
			return true
		case "ports":
			// Unsupported kind "pointer" for field "Ports".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Endpoints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Subsets".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Endpoints json value to io.Writer.
func (s IoK8sAPICoreV1Endpoints) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Endpoints json value from io.Reader.
func (s *IoK8sAPICoreV1Endpoints) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Endpoints from json stream.
func (s *IoK8sAPICoreV1Endpoints) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "subsets":
			// Unsupported kind "pointer" for field "Subsets".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EndpointsList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EndpointsList json value to io.Writer.
func (s IoK8sAPICoreV1EndpointsList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EndpointsList json value from io.Reader.
func (s *IoK8sAPICoreV1EndpointsList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EndpointsList from json stream.
func (s *IoK8sAPICoreV1EndpointsList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvFromSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ConfigMapRef".
	if s.Prefix.Set {
		field.Write("prefix")
		s.Prefix.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EnvFromSource json value to io.Writer.
func (s IoK8sAPICoreV1EnvFromSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EnvFromSource json value from io.Reader.
func (s *IoK8sAPICoreV1EnvFromSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EnvFromSource from json stream.
func (s *IoK8sAPICoreV1EnvFromSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "configMapRef":
			// Unsupported kind "pointer" for field "ConfigMapRef".
			i.Skip()
			return true
		case "prefix":
			s.Prefix.Reset()
			if err := s.Prefix.ReadJSON(i); err != nil {
				i.ReportError("Field Prefix", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvVar) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	if s.Value.Set {
		field.Write("value")
		s.Value.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "ValueFrom".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EnvVar json value to io.Writer.
func (s IoK8sAPICoreV1EnvVar) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EnvVar json value from io.Reader.
func (s *IoK8sAPICoreV1EnvVar) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EnvVar from json stream.
func (s *IoK8sAPICoreV1EnvVar) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		case "valueFrom":
			// Unsupported kind "pointer" for field "ValueFrom".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EnvVarSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ConfigMapKeyRef".
	// Unsupported kind "pointer" for field "FieldRef".
	// Unsupported kind "pointer" for field "ResourceFieldRef".
	// Unsupported kind "pointer" for field "SecretKeyRef".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EnvVarSource json value to io.Writer.
func (s IoK8sAPICoreV1EnvVarSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EnvVarSource json value from io.Reader.
func (s *IoK8sAPICoreV1EnvVarSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EnvVarSource from json stream.
func (s *IoK8sAPICoreV1EnvVarSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "configMapKeyRef":
			// Unsupported kind "pointer" for field "ConfigMapKeyRef".
			i.Skip()
			return true
		case "fieldRef":
			// Unsupported kind "pointer" for field "FieldRef".
			i.Skip()
			return true
		case "resourceFieldRef":
			// Unsupported kind "pointer" for field "ResourceFieldRef".
			i.Skip()
			return true
		case "secretKeyRef":
			// Unsupported kind "pointer" for field "SecretKeyRef".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EphemeralContainer) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Args".
	// Unsupported kind "pointer" for field "Command".
	// Unsupported kind "pointer" for field "Env".
	// Unsupported kind "pointer" for field "EnvFrom".
	if s.Image.Set {
		field.Write("image")
		s.Image.WriteJSON(j)
	}
	if s.ImagePullPolicy.Set {
		field.Write("imagePullPolicy")
		s.ImagePullPolicy.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Lifecycle".
	// Unsupported kind "pointer" for field "LivenessProbe".
	field.Write("name")
	j.WriteString(s.Name)
	// Unsupported kind "pointer" for field "Ports".
	// Unsupported kind "pointer" for field "ReadinessProbe".
	// Unsupported kind "pointer" for field "Resources".
	// Unsupported kind "pointer" for field "SecurityContext".
	// Unsupported kind "pointer" for field "StartupProbe".
	if s.Stdin.Set {
		field.Write("stdin")
		s.Stdin.WriteJSON(j)
	}
	if s.StdinOnce.Set {
		field.Write("stdinOnce")
		s.StdinOnce.WriteJSON(j)
	}
	if s.TargetContainerName.Set {
		field.Write("targetContainerName")
		s.TargetContainerName.WriteJSON(j)
	}
	if s.TerminationMessagePath.Set {
		field.Write("terminationMessagePath")
		s.TerminationMessagePath.WriteJSON(j)
	}
	if s.TerminationMessagePolicy.Set {
		field.Write("terminationMessagePolicy")
		s.TerminationMessagePolicy.WriteJSON(j)
	}
	if s.Tty.Set {
		field.Write("tty")
		s.Tty.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "VolumeDevices".
	// Unsupported kind "pointer" for field "VolumeMounts".
	if s.WorkingDir.Set {
		field.Write("workingDir")
		s.WorkingDir.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EphemeralContainer json value to io.Writer.
func (s IoK8sAPICoreV1EphemeralContainer) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EphemeralContainer json value from io.Reader.
func (s *IoK8sAPICoreV1EphemeralContainer) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EphemeralContainer from json stream.
func (s *IoK8sAPICoreV1EphemeralContainer) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "args":
			// Unsupported kind "pointer" for field "Args".
			i.Skip()
			return true
		case "command":
			// Unsupported kind "pointer" for field "Command".
			i.Skip()
			return true
		case "env":
			// Unsupported kind "pointer" for field "Env".
			i.Skip()
			return true
		case "envFrom":
			// Unsupported kind "pointer" for field "EnvFrom".
			i.Skip()
			return true
		case "image":
			s.Image.Reset()
			if err := s.Image.ReadJSON(i); err != nil {
				i.ReportError("Field Image", err.Error())
				return false
			}
			return true
		case "imagePullPolicy":
			s.ImagePullPolicy.Reset()
			if err := s.ImagePullPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ImagePullPolicy", err.Error())
				return false
			}
			return true
		case "lifecycle":
			// Unsupported kind "pointer" for field "Lifecycle".
			i.Skip()
			return true
		case "livenessProbe":
			// Unsupported kind "pointer" for field "LivenessProbe".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "ports":
			// Unsupported kind "pointer" for field "Ports".
			i.Skip()
			return true
		case "readinessProbe":
			// Unsupported kind "pointer" for field "ReadinessProbe".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "pointer" for field "Resources".
			i.Skip()
			return true
		case "securityContext":
			// Unsupported kind "pointer" for field "SecurityContext".
			i.Skip()
			return true
		case "startupProbe":
			// Unsupported kind "pointer" for field "StartupProbe".
			i.Skip()
			return true
		case "stdin":
			s.Stdin.Reset()
			if err := s.Stdin.ReadJSON(i); err != nil {
				i.ReportError("Field Stdin", err.Error())
				return false
			}
			return true
		case "stdinOnce":
			s.StdinOnce.Reset()
			if err := s.StdinOnce.ReadJSON(i); err != nil {
				i.ReportError("Field StdinOnce", err.Error())
				return false
			}
			return true
		case "targetContainerName":
			s.TargetContainerName.Reset()
			if err := s.TargetContainerName.ReadJSON(i); err != nil {
				i.ReportError("Field TargetContainerName", err.Error())
				return false
			}
			return true
		case "terminationMessagePath":
			s.TerminationMessagePath.Reset()
			if err := s.TerminationMessagePath.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationMessagePath", err.Error())
				return false
			}
			return true
		case "terminationMessagePolicy":
			s.TerminationMessagePolicy.Reset()
			if err := s.TerminationMessagePolicy.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationMessagePolicy", err.Error())
				return false
			}
			return true
		case "tty":
			s.Tty.Reset()
			if err := s.Tty.ReadJSON(i); err != nil {
				i.ReportError("Field Tty", err.Error())
				return false
			}
			return true
		case "volumeDevices":
			// Unsupported kind "pointer" for field "VolumeDevices".
			i.Skip()
			return true
		case "volumeMounts":
			// Unsupported kind "pointer" for field "VolumeMounts".
			i.Skip()
			return true
		case "workingDir":
			s.WorkingDir.Reset()
			if err := s.WorkingDir.ReadJSON(i); err != nil {
				i.ReportError("Field WorkingDir", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EphemeralVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "VolumeClaimTemplate".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EphemeralVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1EphemeralVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EphemeralVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1EphemeralVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EphemeralVolumeSource from json stream.
func (s *IoK8sAPICoreV1EphemeralVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "volumeClaimTemplate":
			// Unsupported kind "pointer" for field "VolumeClaimTemplate".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Action.Set {
		field.Write("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Count.Set {
		field.Write("count")
		s.Count.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "EventTime".
	// Unsupported kind "pointer" for field "FirstTimestamp".
	field.Write("involvedObject")
	s.InvolvedObject.WriteJSON(j)
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "LastTimestamp".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	field.Write("metadata")
	s.Metadata.WriteJSON(j)
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Related".
	if s.ReportingComponent.Set {
		field.Write("reportingComponent")
		s.ReportingComponent.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		field.Write("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Series".
	// Unsupported kind "pointer" for field "Source".
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Event json value to io.Writer.
func (s IoK8sAPICoreV1Event) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Event json value from io.Reader.
func (s *IoK8sAPICoreV1Event) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Event from json stream.
func (s *IoK8sAPICoreV1Event) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(i); err != nil {
				i.ReportError("Field Action", err.Error())
				return false
			}
			return true
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "count":
			s.Count.Reset()
			if err := s.Count.ReadJSON(i); err != nil {
				i.ReportError("Field Count", err.Error())
				return false
			}
			return true
		case "eventTime":
			// Unsupported kind "pointer" for field "EventTime".
			i.Skip()
			return true
		case "firstTimestamp":
			// Unsupported kind "pointer" for field "FirstTimestamp".
			i.Skip()
			return true
		case "involvedObject":
			if err := s.InvolvedObject.ReadJSON(i); err != nil {
				i.ReportError("Field InvolvedObject", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "lastTimestamp":
			// Unsupported kind "pointer" for field "LastTimestamp".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "metadata":
			if err := s.Metadata.ReadJSON(i); err != nil {
				i.ReportError("Field Metadata", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "related":
			// Unsupported kind "pointer" for field "Related".
			i.Skip()
			return true
		case "reportingComponent":
			s.ReportingComponent.Reset()
			if err := s.ReportingComponent.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingComponent", err.Error())
				return false
			}
			return true
		case "reportingInstance":
			s.ReportingInstance.Reset()
			if err := s.ReportingInstance.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingInstance", err.Error())
				return false
			}
			return true
		case "series":
			// Unsupported kind "pointer" for field "Series".
			i.Skip()
			return true
		case "source":
			// Unsupported kind "pointer" for field "Source".
			i.Skip()
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EventList json value to io.Writer.
func (s IoK8sAPICoreV1EventList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EventList json value from io.Reader.
func (s *IoK8sAPICoreV1EventList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EventList from json stream.
func (s *IoK8sAPICoreV1EventList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Count.Set {
		field.Write("count")
		s.Count.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "LastObservedTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EventSeries json value to io.Writer.
func (s IoK8sAPICoreV1EventSeries) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EventSeries json value from io.Reader.
func (s *IoK8sAPICoreV1EventSeries) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EventSeries from json stream.
func (s *IoK8sAPICoreV1EventSeries) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "count":
			s.Count.Reset()
			if err := s.Count.ReadJSON(i); err != nil {
				i.ReportError("Field Count", err.Error())
				return false
			}
			return true
		case "lastObservedTime":
			// Unsupported kind "pointer" for field "LastObservedTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1EventSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Component.Set {
		field.Write("component")
		s.Component.WriteJSON(j)
	}
	if s.Host.Set {
		field.Write("host")
		s.Host.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1EventSource json value to io.Writer.
func (s IoK8sAPICoreV1EventSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1EventSource json value from io.Reader.
func (s *IoK8sAPICoreV1EventSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1EventSource from json stream.
func (s *IoK8sAPICoreV1EventSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "component":
			s.Component.Reset()
			if err := s.Component.ReadJSON(i); err != nil {
				i.ReportError("Field Component", err.Error())
				return false
			}
			return true
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				i.ReportError("Field Host", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ExecAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Command".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ExecAction json value to io.Writer.
func (s IoK8sAPICoreV1ExecAction) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ExecAction json value from io.Reader.
func (s *IoK8sAPICoreV1ExecAction) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ExecAction from json stream.
func (s *IoK8sAPICoreV1ExecAction) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "command":
			// Unsupported kind "pointer" for field "Command".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FCVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Lun.Set {
		field.Write("lun")
		s.Lun.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "TargetWWNs".
	// Unsupported kind "pointer" for field "Wwids".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1FCVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1FCVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1FCVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1FCVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1FCVolumeSource from json stream.
func (s *IoK8sAPICoreV1FCVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "lun":
			s.Lun.Reset()
			if err := s.Lun.ReadJSON(i); err != nil {
				i.ReportError("Field Lun", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "targetWWNs":
			// Unsupported kind "pointer" for field "TargetWWNs".
			i.Skip()
			return true
		case "wwids":
			// Unsupported kind "pointer" for field "Wwids".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Options".
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1FlexPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1FlexPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1FlexPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1FlexPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "driver":
			s.Driver = i.ReadString()
			return i.Error == nil
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "options":
			// Unsupported kind "pointer" for field "Options".
			i.Skip()
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlexVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("driver")
	j.WriteString(s.Driver)
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Options".
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1FlexVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1FlexVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1FlexVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1FlexVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1FlexVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlexVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "driver":
			s.Driver = i.ReadString()
			return i.Error == nil
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "options":
			// Unsupported kind "pointer" for field "Options".
			i.Skip()
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1FlockerVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.DatasetName.Set {
		field.Write("datasetName")
		s.DatasetName.WriteJSON(j)
	}
	if s.DatasetUUID.Set {
		field.Write("datasetUUID")
		s.DatasetUUID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1FlockerVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1FlockerVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1FlockerVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1FlockerVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1FlockerVolumeSource from json stream.
func (s *IoK8sAPICoreV1FlockerVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "datasetName":
			s.DatasetName.Reset()
			if err := s.DatasetName.ReadJSON(i); err != nil {
				i.ReportError("Field DatasetName", err.Error())
				return false
			}
			return true
		case "datasetUUID":
			s.DatasetUUID.Reset()
			if err := s.DatasetUUID.ReadJSON(i); err != nil {
				i.ReportError("Field DatasetUUID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GCEPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.Partition.Set {
		field.Write("partition")
		s.Partition.WriteJSON(j)
	}
	field.Write("pdName")
	j.WriteString(s.PdName)
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1GCEPersistentDiskVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1GCEPersistentDiskVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1GCEPersistentDiskVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1GCEPersistentDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "partition":
			s.Partition.Reset()
			if err := s.Partition.ReadJSON(i); err != nil {
				i.ReportError("Field Partition", err.Error())
				return false
			}
			return true
		case "pdName":
			s.PdName = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GitRepoVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Directory.Set {
		field.Write("directory")
		s.Directory.WriteJSON(j)
	}
	field.Write("repository")
	j.WriteString(s.Repository)
	if s.Revision.Set {
		field.Write("revision")
		s.Revision.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1GitRepoVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1GitRepoVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1GitRepoVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1GitRepoVolumeSource from json stream.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "directory":
			s.Directory.Reset()
			if err := s.Directory.ReadJSON(i); err != nil {
				i.ReportError("Field Directory", err.Error())
				return false
			}
			return true
		case "repository":
			s.Repository = i.ReadString()
			return i.Error == nil
		case "revision":
			s.Revision.Reset()
			if err := s.Revision.ReadJSON(i); err != nil {
				i.ReportError("Field Revision", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GlusterfsPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("endpoints")
	j.WriteString(s.Endpoints)
	if s.EndpointsNamespace.Set {
		field.Write("endpointsNamespace")
		s.EndpointsNamespace.WriteJSON(j)
	}
	field.Write("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1GlusterfsPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1GlusterfsPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1GlusterfsPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1GlusterfsPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "endpoints":
			s.Endpoints = i.ReadString()
			return i.Error == nil
		case "endpointsNamespace":
			s.EndpointsNamespace.Reset()
			if err := s.EndpointsNamespace.ReadJSON(i); err != nil {
				i.ReportError("Field EndpointsNamespace", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1GlusterfsVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("endpoints")
	j.WriteString(s.Endpoints)
	field.Write("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1GlusterfsVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1GlusterfsVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1GlusterfsVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1GlusterfsVolumeSource from json stream.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "endpoints":
			s.Endpoints = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HTTPGetAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Host.Set {
		field.Write("host")
		s.Host.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "HttpHeaders".
	if s.Path.Set {
		field.Write("path")
		s.Path.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "Port".
	if s.Scheme.Set {
		field.Write("scheme")
		s.Scheme.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1HTTPGetAction json value to io.Writer.
func (s IoK8sAPICoreV1HTTPGetAction) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1HTTPGetAction json value from io.Reader.
func (s *IoK8sAPICoreV1HTTPGetAction) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1HTTPGetAction from json stream.
func (s *IoK8sAPICoreV1HTTPGetAction) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				i.ReportError("Field Host", err.Error())
				return false
			}
			return true
		case "httpHeaders":
			// Unsupported kind "pointer" for field "HttpHeaders".
			i.Skip()
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "port":
			// Unsupported kind "alias" for field "Port".
			i.Skip()
			return true
		case "scheme":
			s.Scheme.Reset()
			if err := s.Scheme.ReadJSON(i); err != nil {
				i.ReportError("Field Scheme", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HTTPHeader) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("value")
	j.WriteString(s.Value)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1HTTPHeader json value to io.Writer.
func (s IoK8sAPICoreV1HTTPHeader) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1HTTPHeader json value from io.Reader.
func (s *IoK8sAPICoreV1HTTPHeader) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1HTTPHeader from json stream.
func (s *IoK8sAPICoreV1HTTPHeader) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "value":
			s.Value = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Handler) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Exec".
	// Unsupported kind "pointer" for field "HttpGet".
	// Unsupported kind "pointer" for field "TcpSocket".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Handler json value to io.Writer.
func (s IoK8sAPICoreV1Handler) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Handler json value from io.Reader.
func (s *IoK8sAPICoreV1Handler) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Handler from json stream.
func (s *IoK8sAPICoreV1Handler) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "exec":
			// Unsupported kind "pointer" for field "Exec".
			i.Skip()
			return true
		case "httpGet":
			// Unsupported kind "pointer" for field "HttpGet".
			i.Skip()
			return true
		case "tcpSocket":
			// Unsupported kind "pointer" for field "TcpSocket".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HostAlias) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Hostnames".
	if s.IP.Set {
		field.Write("ip")
		s.IP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1HostAlias json value to io.Writer.
func (s IoK8sAPICoreV1HostAlias) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1HostAlias json value from io.Reader.
func (s *IoK8sAPICoreV1HostAlias) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1HostAlias from json stream.
func (s *IoK8sAPICoreV1HostAlias) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hostnames":
			// Unsupported kind "pointer" for field "Hostnames".
			i.Skip()
			return true
		case "ip":
			s.IP.Reset()
			if err := s.IP.ReadJSON(i); err != nil {
				i.ReportError("Field IP", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1HostPathVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("path")
	j.WriteString(s.Path)
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1HostPathVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1HostPathVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1HostPathVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1HostPathVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1HostPathVolumeSource from json stream.
func (s *IoK8sAPICoreV1HostPathVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ISCSIPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ChapAuthDiscovery.Set {
		field.Write("chapAuthDiscovery")
		s.ChapAuthDiscovery.WriteJSON(j)
	}
	if s.ChapAuthSession.Set {
		field.Write("chapAuthSession")
		s.ChapAuthSession.WriteJSON(j)
	}
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.InitiatorName.Set {
		field.Write("initiatorName")
		s.InitiatorName.WriteJSON(j)
	}
	field.Write("iqn")
	j.WriteString(s.Iqn)
	if s.IscsiInterface.Set {
		field.Write("iscsiInterface")
		s.IscsiInterface.WriteJSON(j)
	}
	field.Write("lun")
	j.WriteInt32(s.Lun)
	// Unsupported kind "pointer" for field "Portals".
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	field.Write("targetPortal")
	j.WriteString(s.TargetPortal)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ISCSIPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ISCSIPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ISCSIPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ISCSIPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chapAuthDiscovery":
			s.ChapAuthDiscovery.Reset()
			if err := s.ChapAuthDiscovery.ReadJSON(i); err != nil {
				i.ReportError("Field ChapAuthDiscovery", err.Error())
				return false
			}
			return true
		case "chapAuthSession":
			s.ChapAuthSession.Reset()
			if err := s.ChapAuthSession.ReadJSON(i); err != nil {
				i.ReportError("Field ChapAuthSession", err.Error())
				return false
			}
			return true
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "initiatorName":
			s.InitiatorName.Reset()
			if err := s.InitiatorName.ReadJSON(i); err != nil {
				i.ReportError("Field InitiatorName", err.Error())
				return false
			}
			return true
		case "iqn":
			s.Iqn = i.ReadString()
			return i.Error == nil
		case "iscsiInterface":
			s.IscsiInterface.Reset()
			if err := s.IscsiInterface.ReadJSON(i); err != nil {
				i.ReportError("Field IscsiInterface", err.Error())
				return false
			}
			return true
		case "lun":
			s.Lun = i.ReadInt32()
			return i.Error == nil
		case "portals":
			// Unsupported kind "pointer" for field "Portals".
			i.Skip()
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		case "targetPortal":
			s.TargetPortal = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ISCSIVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ChapAuthDiscovery.Set {
		field.Write("chapAuthDiscovery")
		s.ChapAuthDiscovery.WriteJSON(j)
	}
	if s.ChapAuthSession.Set {
		field.Write("chapAuthSession")
		s.ChapAuthSession.WriteJSON(j)
	}
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.InitiatorName.Set {
		field.Write("initiatorName")
		s.InitiatorName.WriteJSON(j)
	}
	field.Write("iqn")
	j.WriteString(s.Iqn)
	if s.IscsiInterface.Set {
		field.Write("iscsiInterface")
		s.IscsiInterface.WriteJSON(j)
	}
	field.Write("lun")
	j.WriteInt32(s.Lun)
	// Unsupported kind "pointer" for field "Portals".
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	field.Write("targetPortal")
	j.WriteString(s.TargetPortal)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ISCSIVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ISCSIVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ISCSIVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ISCSIVolumeSource from json stream.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chapAuthDiscovery":
			s.ChapAuthDiscovery.Reset()
			if err := s.ChapAuthDiscovery.ReadJSON(i); err != nil {
				i.ReportError("Field ChapAuthDiscovery", err.Error())
				return false
			}
			return true
		case "chapAuthSession":
			s.ChapAuthSession.Reset()
			if err := s.ChapAuthSession.ReadJSON(i); err != nil {
				i.ReportError("Field ChapAuthSession", err.Error())
				return false
			}
			return true
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "initiatorName":
			s.InitiatorName.Reset()
			if err := s.InitiatorName.ReadJSON(i); err != nil {
				i.ReportError("Field InitiatorName", err.Error())
				return false
			}
			return true
		case "iqn":
			s.Iqn = i.ReadString()
			return i.Error == nil
		case "iscsiInterface":
			s.IscsiInterface.Reset()
			if err := s.IscsiInterface.ReadJSON(i); err != nil {
				i.ReportError("Field IscsiInterface", err.Error())
				return false
			}
			return true
		case "lun":
			s.Lun = i.ReadInt32()
			return i.Error == nil
		case "portals":
			// Unsupported kind "pointer" for field "Portals".
			i.Skip()
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		case "targetPortal":
			s.TargetPortal = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1KeyToPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("key")
	j.WriteString(s.Key)
	if s.Mode.Set {
		field.Write("mode")
		s.Mode.WriteJSON(j)
	}
	field.Write("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1KeyToPath json value to io.Writer.
func (s IoK8sAPICoreV1KeyToPath) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1KeyToPath json value from io.Reader.
func (s *IoK8sAPICoreV1KeyToPath) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1KeyToPath from json stream.
func (s *IoK8sAPICoreV1KeyToPath) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "mode":
			s.Mode.Reset()
			if err := s.Mode.ReadJSON(i); err != nil {
				i.ReportError("Field Mode", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Lifecycle) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "PostStart".
	// Unsupported kind "pointer" for field "PreStop".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Lifecycle json value to io.Writer.
func (s IoK8sAPICoreV1Lifecycle) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Lifecycle json value from io.Reader.
func (s *IoK8sAPICoreV1Lifecycle) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Lifecycle from json stream.
func (s *IoK8sAPICoreV1Lifecycle) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "postStart":
			// Unsupported kind "pointer" for field "PostStart".
			i.Skip()
			return true
		case "preStop":
			// Unsupported kind "pointer" for field "PreStop".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LimitRange json value to io.Writer.
func (s IoK8sAPICoreV1LimitRange) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LimitRange json value from io.Reader.
func (s *IoK8sAPICoreV1LimitRange) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LimitRange from json stream.
func (s *IoK8sAPICoreV1LimitRange) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeItem) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Default".
	// Unsupported kind "pointer" for field "DefaultRequest".
	// Unsupported kind "pointer" for field "Max".
	// Unsupported kind "pointer" for field "MaxLimitRequestRatio".
	// Unsupported kind "pointer" for field "Min".
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LimitRangeItem json value to io.Writer.
func (s IoK8sAPICoreV1LimitRangeItem) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LimitRangeItem json value from io.Reader.
func (s *IoK8sAPICoreV1LimitRangeItem) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeItem from json stream.
func (s *IoK8sAPICoreV1LimitRangeItem) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "default":
			// Unsupported kind "pointer" for field "Default".
			i.Skip()
			return true
		case "defaultRequest":
			// Unsupported kind "pointer" for field "DefaultRequest".
			i.Skip()
			return true
		case "max":
			// Unsupported kind "pointer" for field "Max".
			i.Skip()
			return true
		case "maxLimitRequestRatio":
			// Unsupported kind "pointer" for field "MaxLimitRequestRatio".
			i.Skip()
			return true
		case "min":
			// Unsupported kind "pointer" for field "Min".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LimitRangeList json value to io.Writer.
func (s IoK8sAPICoreV1LimitRangeList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LimitRangeList json value from io.Reader.
func (s *IoK8sAPICoreV1LimitRangeList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeList from json stream.
func (s *IoK8sAPICoreV1LimitRangeList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LimitRangeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "Limits".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LimitRangeSpec json value to io.Writer.
func (s IoK8sAPICoreV1LimitRangeSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LimitRangeSpec json value from io.Reader.
func (s *IoK8sAPICoreV1LimitRangeSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LimitRangeSpec from json stream.
func (s *IoK8sAPICoreV1LimitRangeSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limits":
			// Unsupported kind "array" for field "Limits".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LoadBalancerIngress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Hostname.Set {
		field.Write("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.IP.Set {
		field.Write("ip")
		s.IP.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Ports".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LoadBalancerIngress json value to io.Writer.
func (s IoK8sAPICoreV1LoadBalancerIngress) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LoadBalancerIngress json value from io.Reader.
func (s *IoK8sAPICoreV1LoadBalancerIngress) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LoadBalancerIngress from json stream.
func (s *IoK8sAPICoreV1LoadBalancerIngress) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				i.ReportError("Field Hostname", err.Error())
				return false
			}
			return true
		case "ip":
			s.IP.Reset()
			if err := s.IP.ReadJSON(i); err != nil {
				i.ReportError("Field IP", err.Error())
				return false
			}
			return true
		case "ports":
			// Unsupported kind "pointer" for field "Ports".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LoadBalancerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Ingress".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LoadBalancerStatus json value to io.Writer.
func (s IoK8sAPICoreV1LoadBalancerStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LoadBalancerStatus json value from io.Reader.
func (s *IoK8sAPICoreV1LoadBalancerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LoadBalancerStatus from json stream.
func (s *IoK8sAPICoreV1LoadBalancerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ingress":
			// Unsupported kind "pointer" for field "Ingress".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LocalObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LocalObjectReference json value to io.Writer.
func (s IoK8sAPICoreV1LocalObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LocalObjectReference json value from io.Reader.
func (s *IoK8sAPICoreV1LocalObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LocalObjectReference from json stream.
func (s *IoK8sAPICoreV1LocalObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1LocalVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	field.Write("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1LocalVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1LocalVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1LocalVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1LocalVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1LocalVolumeSource from json stream.
func (s *IoK8sAPICoreV1LocalVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NFSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("path")
	j.WriteString(s.Path)
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	field.Write("server")
	j.WriteString(s.Server)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NFSVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1NFSVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NFSVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1NFSVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NFSVolumeSource from json stream.
func (s *IoK8sAPICoreV1NFSVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "server":
			s.Server = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Namespace) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Namespace json value to io.Writer.
func (s IoK8sAPICoreV1Namespace) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Namespace json value from io.Reader.
func (s *IoK8sAPICoreV1Namespace) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Namespace from json stream.
func (s *IoK8sAPICoreV1Namespace) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NamespaceCondition json value to io.Writer.
func (s IoK8sAPICoreV1NamespaceCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NamespaceCondition json value from io.Reader.
func (s *IoK8sAPICoreV1NamespaceCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NamespaceCondition from json stream.
func (s *IoK8sAPICoreV1NamespaceCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NamespaceList json value to io.Writer.
func (s IoK8sAPICoreV1NamespaceList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NamespaceList json value from io.Reader.
func (s *IoK8sAPICoreV1NamespaceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NamespaceList from json stream.
func (s *IoK8sAPICoreV1NamespaceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Finalizers".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NamespaceSpec json value to io.Writer.
func (s IoK8sAPICoreV1NamespaceSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NamespaceSpec json value from io.Reader.
func (s *IoK8sAPICoreV1NamespaceSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NamespaceSpec from json stream.
func (s *IoK8sAPICoreV1NamespaceSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "finalizers":
			// Unsupported kind "pointer" for field "Finalizers".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NamespaceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Conditions".
	if s.Phase.Set {
		field.Write("phase")
		s.Phase.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NamespaceStatus json value to io.Writer.
func (s IoK8sAPICoreV1NamespaceStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NamespaceStatus json value from io.Reader.
func (s *IoK8sAPICoreV1NamespaceStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NamespaceStatus from json stream.
func (s *IoK8sAPICoreV1NamespaceStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				i.ReportError("Field Phase", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Node) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Node json value to io.Writer.
func (s IoK8sAPICoreV1Node) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Node json value from io.Reader.
func (s *IoK8sAPICoreV1Node) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Node from json stream.
func (s *IoK8sAPICoreV1Node) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeAddress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("address")
	j.WriteString(s.Address)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeAddress json value to io.Writer.
func (s IoK8sAPICoreV1NodeAddress) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeAddress json value from io.Reader.
func (s *IoK8sAPICoreV1NodeAddress) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeAddress from json stream.
func (s *IoK8sAPICoreV1NodeAddress) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "address":
			s.Address = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "PreferredDuringSchedulingIgnoredDuringExecution".
	// Unsupported kind "pointer" for field "RequiredDuringSchedulingIgnoredDuringExecution".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeAffinity json value to io.Writer.
func (s IoK8sAPICoreV1NodeAffinity) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeAffinity json value from io.Reader.
func (s *IoK8sAPICoreV1NodeAffinity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeAffinity from json stream.
func (s *IoK8sAPICoreV1NodeAffinity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			// Unsupported kind "pointer" for field "PreferredDuringSchedulingIgnoredDuringExecution".
			i.Skip()
			return true
		case "requiredDuringSchedulingIgnoredDuringExecution":
			// Unsupported kind "pointer" for field "RequiredDuringSchedulingIgnoredDuringExecution".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastHeartbeatTime".
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeCondition json value to io.Writer.
func (s IoK8sAPICoreV1NodeCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeCondition json value from io.Reader.
func (s *IoK8sAPICoreV1NodeCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeCondition from json stream.
func (s *IoK8sAPICoreV1NodeCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastHeartbeatTime":
			// Unsupported kind "pointer" for field "LastHeartbeatTime".
			i.Skip()
			return true
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeConfigSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ConfigMap".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeConfigSource json value to io.Writer.
func (s IoK8sAPICoreV1NodeConfigSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeConfigSource json value from io.Reader.
func (s *IoK8sAPICoreV1NodeConfigSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeConfigSource from json stream.
func (s *IoK8sAPICoreV1NodeConfigSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "configMap":
			// Unsupported kind "pointer" for field "ConfigMap".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeConfigStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Active".
	// Unsupported kind "pointer" for field "Assigned".
	if s.Error.Set {
		field.Write("error")
		s.Error.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "LastKnownGood".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeConfigStatus json value to io.Writer.
func (s IoK8sAPICoreV1NodeConfigStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeConfigStatus json value from io.Reader.
func (s *IoK8sAPICoreV1NodeConfigStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeConfigStatus from json stream.
func (s *IoK8sAPICoreV1NodeConfigStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "active":
			// Unsupported kind "pointer" for field "Active".
			i.Skip()
			return true
		case "assigned":
			// Unsupported kind "pointer" for field "Assigned".
			i.Skip()
			return true
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				i.ReportError("Field Error", err.Error())
				return false
			}
			return true
		case "lastKnownGood":
			// Unsupported kind "pointer" for field "LastKnownGood".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeDaemonEndpoints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "KubeletEndpoint".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeDaemonEndpoints json value to io.Writer.
func (s IoK8sAPICoreV1NodeDaemonEndpoints) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeDaemonEndpoints json value from io.Reader.
func (s *IoK8sAPICoreV1NodeDaemonEndpoints) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeDaemonEndpoints from json stream.
func (s *IoK8sAPICoreV1NodeDaemonEndpoints) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "kubeletEndpoint":
			// Unsupported kind "pointer" for field "KubeletEndpoint".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeList json value to io.Writer.
func (s IoK8sAPICoreV1NodeList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeList json value from io.Reader.
func (s *IoK8sAPICoreV1NodeList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeList from json stream.
func (s *IoK8sAPICoreV1NodeList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "NodeSelectorTerms".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeSelector json value to io.Writer.
func (s IoK8sAPICoreV1NodeSelector) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeSelector json value from io.Reader.
func (s *IoK8sAPICoreV1NodeSelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeSelector from json stream.
func (s *IoK8sAPICoreV1NodeSelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nodeSelectorTerms":
			// Unsupported kind "array" for field "NodeSelectorTerms".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("key")
	j.WriteString(s.Key)
	field.Write("operator")
	j.WriteString(s.Operator)
	// Unsupported kind "pointer" for field "Values".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeSelectorRequirement json value to io.Writer.
func (s IoK8sAPICoreV1NodeSelectorRequirement) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeSelectorRequirement json value from io.Reader.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeSelectorRequirement from json stream.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "operator":
			s.Operator = i.ReadString()
			return i.Error == nil
		case "values":
			// Unsupported kind "pointer" for field "Values".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSelectorTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "MatchExpressions".
	// Unsupported kind "pointer" for field "MatchFields".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeSelectorTerm json value to io.Writer.
func (s IoK8sAPICoreV1NodeSelectorTerm) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeSelectorTerm json value from io.Reader.
func (s *IoK8sAPICoreV1NodeSelectorTerm) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeSelectorTerm from json stream.
func (s *IoK8sAPICoreV1NodeSelectorTerm) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "matchExpressions":
			// Unsupported kind "pointer" for field "MatchExpressions".
			i.Skip()
			return true
		case "matchFields":
			// Unsupported kind "pointer" for field "MatchFields".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ConfigSource".
	if s.ExternalID.Set {
		field.Write("externalID")
		s.ExternalID.WriteJSON(j)
	}
	if s.PodCIDR.Set {
		field.Write("podCIDR")
		s.PodCIDR.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "PodCIDRs".
	if s.ProviderID.Set {
		field.Write("providerID")
		s.ProviderID.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Taints".
	if s.Unschedulable.Set {
		field.Write("unschedulable")
		s.Unschedulable.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeSpec json value to io.Writer.
func (s IoK8sAPICoreV1NodeSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeSpec json value from io.Reader.
func (s *IoK8sAPICoreV1NodeSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeSpec from json stream.
func (s *IoK8sAPICoreV1NodeSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "configSource":
			// Unsupported kind "pointer" for field "ConfigSource".
			i.Skip()
			return true
		case "externalID":
			s.ExternalID.Reset()
			if err := s.ExternalID.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalID", err.Error())
				return false
			}
			return true
		case "podCIDR":
			s.PodCIDR.Reset()
			if err := s.PodCIDR.ReadJSON(i); err != nil {
				i.ReportError("Field PodCIDR", err.Error())
				return false
			}
			return true
		case "podCIDRs":
			// Unsupported kind "pointer" for field "PodCIDRs".
			i.Skip()
			return true
		case "providerID":
			s.ProviderID.Reset()
			if err := s.ProviderID.ReadJSON(i); err != nil {
				i.ReportError("Field ProviderID", err.Error())
				return false
			}
			return true
		case "taints":
			// Unsupported kind "pointer" for field "Taints".
			i.Skip()
			return true
		case "unschedulable":
			s.Unschedulable.Reset()
			if err := s.Unschedulable.ReadJSON(i); err != nil {
				i.ReportError("Field Unschedulable", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Addresses".
	// Unsupported kind "pointer" for field "Allocatable".
	// Unsupported kind "pointer" for field "Capacity".
	// Unsupported kind "pointer" for field "Conditions".
	// Unsupported kind "pointer" for field "Config".
	// Unsupported kind "pointer" for field "DaemonEndpoints".
	// Unsupported kind "pointer" for field "Images".
	// Unsupported kind "pointer" for field "NodeInfo".
	if s.Phase.Set {
		field.Write("phase")
		s.Phase.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "VolumesAttached".
	// Unsupported kind "pointer" for field "VolumesInUse".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeStatus json value to io.Writer.
func (s IoK8sAPICoreV1NodeStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeStatus json value from io.Reader.
func (s *IoK8sAPICoreV1NodeStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeStatus from json stream.
func (s *IoK8sAPICoreV1NodeStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addresses":
			// Unsupported kind "pointer" for field "Addresses".
			i.Skip()
			return true
		case "allocatable":
			// Unsupported kind "pointer" for field "Allocatable".
			i.Skip()
			return true
		case "capacity":
			// Unsupported kind "pointer" for field "Capacity".
			i.Skip()
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "config":
			// Unsupported kind "pointer" for field "Config".
			i.Skip()
			return true
		case "daemonEndpoints":
			// Unsupported kind "pointer" for field "DaemonEndpoints".
			i.Skip()
			return true
		case "images":
			// Unsupported kind "pointer" for field "Images".
			i.Skip()
			return true
		case "nodeInfo":
			// Unsupported kind "pointer" for field "NodeInfo".
			i.Skip()
			return true
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				i.ReportError("Field Phase", err.Error())
				return false
			}
			return true
		case "volumesAttached":
			// Unsupported kind "pointer" for field "VolumesAttached".
			i.Skip()
			return true
		case "volumesInUse":
			// Unsupported kind "pointer" for field "VolumesInUse".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1NodeSystemInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("architecture")
	j.WriteString(s.Architecture)
	field.Write("bootID")
	j.WriteString(s.BootID)
	field.Write("containerRuntimeVersion")
	j.WriteString(s.ContainerRuntimeVersion)
	field.Write("kernelVersion")
	j.WriteString(s.KernelVersion)
	field.Write("kubeProxyVersion")
	j.WriteString(s.KubeProxyVersion)
	field.Write("kubeletVersion")
	j.WriteString(s.KubeletVersion)
	field.Write("machineID")
	j.WriteString(s.MachineID)
	field.Write("operatingSystem")
	j.WriteString(s.OperatingSystem)
	field.Write("osImage")
	j.WriteString(s.OsImage)
	field.Write("systemUUID")
	j.WriteString(s.SystemUUID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1NodeSystemInfo json value to io.Writer.
func (s IoK8sAPICoreV1NodeSystemInfo) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1NodeSystemInfo json value from io.Reader.
func (s *IoK8sAPICoreV1NodeSystemInfo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1NodeSystemInfo from json stream.
func (s *IoK8sAPICoreV1NodeSystemInfo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "architecture":
			s.Architecture = i.ReadString()
			return i.Error == nil
		case "bootID":
			s.BootID = i.ReadString()
			return i.Error == nil
		case "containerRuntimeVersion":
			s.ContainerRuntimeVersion = i.ReadString()
			return i.Error == nil
		case "kernelVersion":
			s.KernelVersion = i.ReadString()
			return i.Error == nil
		case "kubeProxyVersion":
			s.KubeProxyVersion = i.ReadString()
			return i.Error == nil
		case "kubeletVersion":
			s.KubeletVersion = i.ReadString()
			return i.Error == nil
		case "machineID":
			s.MachineID = i.ReadString()
			return i.Error == nil
		case "operatingSystem":
			s.OperatingSystem = i.ReadString()
			return i.Error == nil
		case "osImage":
			s.OsImage = i.ReadString()
			return i.Error == nil
		case "systemUUID":
			s.SystemUUID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ObjectFieldSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	field.Write("fieldPath")
	j.WriteString(s.FieldPath)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ObjectFieldSelector json value to io.Writer.
func (s IoK8sAPICoreV1ObjectFieldSelector) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ObjectFieldSelector json value from io.Reader.
func (s *IoK8sAPICoreV1ObjectFieldSelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ObjectFieldSelector from json stream.
func (s *IoK8sAPICoreV1ObjectFieldSelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "fieldPath":
			s.FieldPath = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.FieldPath.Set {
		field.Write("fieldPath")
		s.FieldPath.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		field.Write("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.ResourceVersion.Set {
		field.Write("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		field.Write("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ObjectReference json value to io.Writer.
func (s IoK8sAPICoreV1ObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ObjectReference json value from io.Reader.
func (s *IoK8sAPICoreV1ObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ObjectReference from json stream.
func (s *IoK8sAPICoreV1ObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "fieldPath":
			s.FieldPath.Reset()
			if err := s.FieldPath.ReadJSON(i); err != nil {
				i.ReportError("Field FieldPath", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceVersion", err.Error())
				return false
			}
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolume json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolume) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolume json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolume) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolume from json stream.
func (s *IoK8sAPICoreV1PersistentVolume) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaim) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaim json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaim) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaim json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaim from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastProbeTime".
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimCondition json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimCondition json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimCondition from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastProbeTime":
			// Unsupported kind "pointer" for field "LastProbeTime".
			i.Skip()
			return true
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimList json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimList json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimList from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AccessModes".
	// Unsupported kind "pointer" for field "DataSource".
	// Unsupported kind "pointer" for field "DataSourceRef".
	// Unsupported kind "pointer" for field "Resources".
	// Unsupported kind "pointer" for field "Selector".
	if s.StorageClassName.Set {
		field.Write("storageClassName")
		s.StorageClassName.WriteJSON(j)
	}
	if s.VolumeMode.Set {
		field.Write("volumeMode")
		s.VolumeMode.WriteJSON(j)
	}
	if s.VolumeName.Set {
		field.Write("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimSpec json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimSpec json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimSpec from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "accessModes":
			// Unsupported kind "pointer" for field "AccessModes".
			i.Skip()
			return true
		case "dataSource":
			// Unsupported kind "pointer" for field "DataSource".
			i.Skip()
			return true
		case "dataSourceRef":
			// Unsupported kind "pointer" for field "DataSourceRef".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "pointer" for field "Resources".
			i.Skip()
			return true
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		case "storageClassName":
			s.StorageClassName.Reset()
			if err := s.StorageClassName.ReadJSON(i); err != nil {
				i.ReportError("Field StorageClassName", err.Error())
				return false
			}
			return true
		case "volumeMode":
			s.VolumeMode.Reset()
			if err := s.VolumeMode.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeMode", err.Error())
				return false
			}
			return true
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AccessModes".
	// Unsupported kind "pointer" for field "Capacity".
	// Unsupported kind "pointer" for field "Conditions".
	if s.Phase.Set {
		field.Write("phase")
		s.Phase.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimStatus json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimStatus json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimStatus from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "accessModes":
			// Unsupported kind "pointer" for field "AccessModes".
			i.Skip()
			return true
		case "capacity":
			// Unsupported kind "pointer" for field "Capacity".
			i.Skip()
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				i.ReportError("Field Phase", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimTemplate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimTemplate json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimTemplate) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimTemplate json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimTemplate) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimTemplate from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimTemplate) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("claimName")
	j.WriteString(s.ClaimName)
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeClaimVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeClaimVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeClaimVolumeSource from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "claimName":
			s.ClaimName = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeList json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeList json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeList from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AccessModes".
	// Unsupported kind "pointer" for field "AwsElasticBlockStore".
	// Unsupported kind "pointer" for field "AzureDisk".
	// Unsupported kind "pointer" for field "AzureFile".
	// Unsupported kind "pointer" for field "Capacity".
	// Unsupported kind "pointer" for field "Cephfs".
	// Unsupported kind "pointer" for field "Cinder".
	// Unsupported kind "pointer" for field "ClaimRef".
	// Unsupported kind "pointer" for field "Csi".
	// Unsupported kind "pointer" for field "Fc".
	// Unsupported kind "pointer" for field "FlexVolume".
	// Unsupported kind "pointer" for field "Flocker".
	// Unsupported kind "pointer" for field "GcePersistentDisk".
	// Unsupported kind "pointer" for field "Glusterfs".
	// Unsupported kind "pointer" for field "HostPath".
	// Unsupported kind "pointer" for field "Iscsi".
	// Unsupported kind "pointer" for field "Local".
	// Unsupported kind "pointer" for field "MountOptions".
	// Unsupported kind "pointer" for field "Nfs".
	// Unsupported kind "pointer" for field "NodeAffinity".
	if s.PersistentVolumeReclaimPolicy.Set {
		field.Write("persistentVolumeReclaimPolicy")
		s.PersistentVolumeReclaimPolicy.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "PhotonPersistentDisk".
	// Unsupported kind "pointer" for field "PortworxVolume".
	// Unsupported kind "pointer" for field "Quobyte".
	// Unsupported kind "pointer" for field "Rbd".
	// Unsupported kind "pointer" for field "ScaleIO".
	if s.StorageClassName.Set {
		field.Write("storageClassName")
		s.StorageClassName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Storageos".
	if s.VolumeMode.Set {
		field.Write("volumeMode")
		s.VolumeMode.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "VsphereVolume".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeSpec json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeSpec json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeSpec from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "accessModes":
			// Unsupported kind "pointer" for field "AccessModes".
			i.Skip()
			return true
		case "awsElasticBlockStore":
			// Unsupported kind "pointer" for field "AwsElasticBlockStore".
			i.Skip()
			return true
		case "azureDisk":
			// Unsupported kind "pointer" for field "AzureDisk".
			i.Skip()
			return true
		case "azureFile":
			// Unsupported kind "pointer" for field "AzureFile".
			i.Skip()
			return true
		case "capacity":
			// Unsupported kind "pointer" for field "Capacity".
			i.Skip()
			return true
		case "cephfs":
			// Unsupported kind "pointer" for field "Cephfs".
			i.Skip()
			return true
		case "cinder":
			// Unsupported kind "pointer" for field "Cinder".
			i.Skip()
			return true
		case "claimRef":
			// Unsupported kind "pointer" for field "ClaimRef".
			i.Skip()
			return true
		case "csi":
			// Unsupported kind "pointer" for field "Csi".
			i.Skip()
			return true
		case "fc":
			// Unsupported kind "pointer" for field "Fc".
			i.Skip()
			return true
		case "flexVolume":
			// Unsupported kind "pointer" for field "FlexVolume".
			i.Skip()
			return true
		case "flocker":
			// Unsupported kind "pointer" for field "Flocker".
			i.Skip()
			return true
		case "gcePersistentDisk":
			// Unsupported kind "pointer" for field "GcePersistentDisk".
			i.Skip()
			return true
		case "glusterfs":
			// Unsupported kind "pointer" for field "Glusterfs".
			i.Skip()
			return true
		case "hostPath":
			// Unsupported kind "pointer" for field "HostPath".
			i.Skip()
			return true
		case "iscsi":
			// Unsupported kind "pointer" for field "Iscsi".
			i.Skip()
			return true
		case "local":
			// Unsupported kind "pointer" for field "Local".
			i.Skip()
			return true
		case "mountOptions":
			// Unsupported kind "pointer" for field "MountOptions".
			i.Skip()
			return true
		case "nfs":
			// Unsupported kind "pointer" for field "Nfs".
			i.Skip()
			return true
		case "nodeAffinity":
			// Unsupported kind "pointer" for field "NodeAffinity".
			i.Skip()
			return true
		case "persistentVolumeReclaimPolicy":
			s.PersistentVolumeReclaimPolicy.Reset()
			if err := s.PersistentVolumeReclaimPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field PersistentVolumeReclaimPolicy", err.Error())
				return false
			}
			return true
		case "photonPersistentDisk":
			// Unsupported kind "pointer" for field "PhotonPersistentDisk".
			i.Skip()
			return true
		case "portworxVolume":
			// Unsupported kind "pointer" for field "PortworxVolume".
			i.Skip()
			return true
		case "quobyte":
			// Unsupported kind "pointer" for field "Quobyte".
			i.Skip()
			return true
		case "rbd":
			// Unsupported kind "pointer" for field "Rbd".
			i.Skip()
			return true
		case "scaleIO":
			// Unsupported kind "pointer" for field "ScaleIO".
			i.Skip()
			return true
		case "storageClassName":
			s.StorageClassName.Reset()
			if err := s.StorageClassName.ReadJSON(i); err != nil {
				i.ReportError("Field StorageClassName", err.Error())
				return false
			}
			return true
		case "storageos":
			// Unsupported kind "pointer" for field "Storageos".
			i.Skip()
			return true
		case "volumeMode":
			s.VolumeMode.Reset()
			if err := s.VolumeMode.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeMode", err.Error())
				return false
			}
			return true
		case "vsphereVolume":
			// Unsupported kind "pointer" for field "VsphereVolume".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PersistentVolumeStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Phase.Set {
		field.Write("phase")
		s.Phase.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PersistentVolumeStatus json value to io.Writer.
func (s IoK8sAPICoreV1PersistentVolumeStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PersistentVolumeStatus json value from io.Reader.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PersistentVolumeStatus from json stream.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				i.ReportError("Field Phase", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	field.Write("pdID")
	j.WriteString(s.PdID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PhotonPersistentDiskVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PhotonPersistentDiskVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PhotonPersistentDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "pdID":
			s.PdID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Pod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Pod json value to io.Writer.
func (s IoK8sAPICoreV1Pod) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Pod json value from io.Reader.
func (s *IoK8sAPICoreV1Pod) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Pod from json stream.
func (s *IoK8sAPICoreV1Pod) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "PreferredDuringSchedulingIgnoredDuringExecution".
	// Unsupported kind "pointer" for field "RequiredDuringSchedulingIgnoredDuringExecution".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodAffinity json value to io.Writer.
func (s IoK8sAPICoreV1PodAffinity) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodAffinity json value from io.Reader.
func (s *IoK8sAPICoreV1PodAffinity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodAffinity from json stream.
func (s *IoK8sAPICoreV1PodAffinity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			// Unsupported kind "pointer" for field "PreferredDuringSchedulingIgnoredDuringExecution".
			i.Skip()
			return true
		case "requiredDuringSchedulingIgnoredDuringExecution":
			// Unsupported kind "pointer" for field "RequiredDuringSchedulingIgnoredDuringExecution".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAffinityTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LabelSelector".
	// Unsupported kind "pointer" for field "NamespaceSelector".
	// Unsupported kind "pointer" for field "Namespaces".
	field.Write("topologyKey")
	j.WriteString(s.TopologyKey)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodAffinityTerm json value to io.Writer.
func (s IoK8sAPICoreV1PodAffinityTerm) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodAffinityTerm json value from io.Reader.
func (s *IoK8sAPICoreV1PodAffinityTerm) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodAffinityTerm from json stream.
func (s *IoK8sAPICoreV1PodAffinityTerm) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "labelSelector":
			// Unsupported kind "pointer" for field "LabelSelector".
			i.Skip()
			return true
		case "namespaceSelector":
			// Unsupported kind "pointer" for field "NamespaceSelector".
			i.Skip()
			return true
		case "namespaces":
			// Unsupported kind "pointer" for field "Namespaces".
			i.Skip()
			return true
		case "topologyKey":
			s.TopologyKey = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodAntiAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "PreferredDuringSchedulingIgnoredDuringExecution".
	// Unsupported kind "pointer" for field "RequiredDuringSchedulingIgnoredDuringExecution".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodAntiAffinity json value to io.Writer.
func (s IoK8sAPICoreV1PodAntiAffinity) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodAntiAffinity json value from io.Reader.
func (s *IoK8sAPICoreV1PodAntiAffinity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodAntiAffinity from json stream.
func (s *IoK8sAPICoreV1PodAntiAffinity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			// Unsupported kind "pointer" for field "PreferredDuringSchedulingIgnoredDuringExecution".
			i.Skip()
			return true
		case "requiredDuringSchedulingIgnoredDuringExecution":
			// Unsupported kind "pointer" for field "RequiredDuringSchedulingIgnoredDuringExecution".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastProbeTime".
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodCondition json value to io.Writer.
func (s IoK8sAPICoreV1PodCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodCondition json value from io.Reader.
func (s *IoK8sAPICoreV1PodCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodCondition from json stream.
func (s *IoK8sAPICoreV1PodCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastProbeTime":
			// Unsupported kind "pointer" for field "LastProbeTime".
			i.Skip()
			return true
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodDNSConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Nameservers".
	// Unsupported kind "pointer" for field "Options".
	// Unsupported kind "pointer" for field "Searches".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodDNSConfig json value to io.Writer.
func (s IoK8sAPICoreV1PodDNSConfig) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodDNSConfig json value from io.Reader.
func (s *IoK8sAPICoreV1PodDNSConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodDNSConfig from json stream.
func (s *IoK8sAPICoreV1PodDNSConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nameservers":
			// Unsupported kind "pointer" for field "Nameservers".
			i.Skip()
			return true
		case "options":
			// Unsupported kind "pointer" for field "Options".
			i.Skip()
			return true
		case "searches":
			// Unsupported kind "pointer" for field "Searches".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodDNSConfigOption) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Value.Set {
		field.Write("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodDNSConfigOption json value to io.Writer.
func (s IoK8sAPICoreV1PodDNSConfigOption) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodDNSConfigOption json value from io.Reader.
func (s *IoK8sAPICoreV1PodDNSConfigOption) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodDNSConfigOption from json stream.
func (s *IoK8sAPICoreV1PodDNSConfigOption) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodIP) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.IP.Set {
		field.Write("ip")
		s.IP.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodIP json value to io.Writer.
func (s IoK8sAPICoreV1PodIP) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodIP json value from io.Reader.
func (s *IoK8sAPICoreV1PodIP) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodIP from json stream.
func (s *IoK8sAPICoreV1PodIP) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ip":
			s.IP.Reset()
			if err := s.IP.ReadJSON(i); err != nil {
				i.ReportError("Field IP", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodList json value to io.Writer.
func (s IoK8sAPICoreV1PodList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodList json value from io.Reader.
func (s *IoK8sAPICoreV1PodList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodList from json stream.
func (s *IoK8sAPICoreV1PodList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodReadinessGate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("conditionType")
	j.WriteString(s.ConditionType)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodReadinessGate json value to io.Writer.
func (s IoK8sAPICoreV1PodReadinessGate) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodReadinessGate json value from io.Reader.
func (s *IoK8sAPICoreV1PodReadinessGate) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodReadinessGate from json stream.
func (s *IoK8sAPICoreV1PodReadinessGate) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditionType":
			s.ConditionType = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSecurityContext) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsGroup.Set {
		field.Write("fsGroup")
		s.FsGroup.WriteJSON(j)
	}
	if s.FsGroupChangePolicy.Set {
		field.Write("fsGroupChangePolicy")
		s.FsGroupChangePolicy.WriteJSON(j)
	}
	if s.RunAsGroup.Set {
		field.Write("runAsGroup")
		s.RunAsGroup.WriteJSON(j)
	}
	if s.RunAsNonRoot.Set {
		field.Write("runAsNonRoot")
		s.RunAsNonRoot.WriteJSON(j)
	}
	if s.RunAsUser.Set {
		field.Write("runAsUser")
		s.RunAsUser.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SeLinuxOptions".
	// Unsupported kind "pointer" for field "SeccompProfile".
	// Unsupported kind "pointer" for field "SupplementalGroups".
	// Unsupported kind "pointer" for field "Sysctls".
	// Unsupported kind "pointer" for field "WindowsOptions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodSecurityContext json value to io.Writer.
func (s IoK8sAPICoreV1PodSecurityContext) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodSecurityContext json value from io.Reader.
func (s *IoK8sAPICoreV1PodSecurityContext) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodSecurityContext from json stream.
func (s *IoK8sAPICoreV1PodSecurityContext) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsGroup":
			s.FsGroup.Reset()
			if err := s.FsGroup.ReadJSON(i); err != nil {
				i.ReportError("Field FsGroup", err.Error())
				return false
			}
			return true
		case "fsGroupChangePolicy":
			s.FsGroupChangePolicy.Reset()
			if err := s.FsGroupChangePolicy.ReadJSON(i); err != nil {
				i.ReportError("Field FsGroupChangePolicy", err.Error())
				return false
			}
			return true
		case "runAsGroup":
			s.RunAsGroup.Reset()
			if err := s.RunAsGroup.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsGroup", err.Error())
				return false
			}
			return true
		case "runAsNonRoot":
			s.RunAsNonRoot.Reset()
			if err := s.RunAsNonRoot.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsNonRoot", err.Error())
				return false
			}
			return true
		case "runAsUser":
			s.RunAsUser.Reset()
			if err := s.RunAsUser.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsUser", err.Error())
				return false
			}
			return true
		case "seLinuxOptions":
			// Unsupported kind "pointer" for field "SeLinuxOptions".
			i.Skip()
			return true
		case "seccompProfile":
			// Unsupported kind "pointer" for field "SeccompProfile".
			i.Skip()
			return true
		case "supplementalGroups":
			// Unsupported kind "pointer" for field "SupplementalGroups".
			i.Skip()
			return true
		case "sysctls":
			// Unsupported kind "pointer" for field "Sysctls".
			i.Skip()
			return true
		case "windowsOptions":
			// Unsupported kind "pointer" for field "WindowsOptions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ActiveDeadlineSeconds.Set {
		field.Write("activeDeadlineSeconds")
		s.ActiveDeadlineSeconds.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Affinity".
	if s.AutomountServiceAccountToken.Set {
		field.Write("automountServiceAccountToken")
		s.AutomountServiceAccountToken.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Containers".
	// Unsupported kind "pointer" for field "DnsConfig".
	if s.DnsPolicy.Set {
		field.Write("dnsPolicy")
		s.DnsPolicy.WriteJSON(j)
	}
	if s.EnableServiceLinks.Set {
		field.Write("enableServiceLinks")
		s.EnableServiceLinks.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "EphemeralContainers".
	// Unsupported kind "pointer" for field "HostAliases".
	if s.HostIPC.Set {
		field.Write("hostIPC")
		s.HostIPC.WriteJSON(j)
	}
	if s.HostNetwork.Set {
		field.Write("hostNetwork")
		s.HostNetwork.WriteJSON(j)
	}
	if s.HostPID.Set {
		field.Write("hostPID")
		s.HostPID.WriteJSON(j)
	}
	if s.Hostname.Set {
		field.Write("hostname")
		s.Hostname.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "ImagePullSecrets".
	// Unsupported kind "pointer" for field "InitContainers".
	if s.NodeName.Set {
		field.Write("nodeName")
		s.NodeName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "NodeSelector".
	// Unsupported kind "pointer" for field "Overhead".
	if s.PreemptionPolicy.Set {
		field.Write("preemptionPolicy")
		s.PreemptionPolicy.WriteJSON(j)
	}
	if s.Priority.Set {
		field.Write("priority")
		s.Priority.WriteJSON(j)
	}
	if s.PriorityClassName.Set {
		field.Write("priorityClassName")
		s.PriorityClassName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "ReadinessGates".
	if s.RestartPolicy.Set {
		field.Write("restartPolicy")
		s.RestartPolicy.WriteJSON(j)
	}
	if s.RuntimeClassName.Set {
		field.Write("runtimeClassName")
		s.RuntimeClassName.WriteJSON(j)
	}
	if s.SchedulerName.Set {
		field.Write("schedulerName")
		s.SchedulerName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecurityContext".
	if s.ServiceAccount.Set {
		field.Write("serviceAccount")
		s.ServiceAccount.WriteJSON(j)
	}
	if s.ServiceAccountName.Set {
		field.Write("serviceAccountName")
		s.ServiceAccountName.WriteJSON(j)
	}
	if s.SetHostnameAsFQDN.Set {
		field.Write("setHostnameAsFQDN")
		s.SetHostnameAsFQDN.WriteJSON(j)
	}
	if s.ShareProcessNamespace.Set {
		field.Write("shareProcessNamespace")
		s.ShareProcessNamespace.WriteJSON(j)
	}
	if s.Subdomain.Set {
		field.Write("subdomain")
		s.Subdomain.WriteJSON(j)
	}
	if s.TerminationGracePeriodSeconds.Set {
		field.Write("terminationGracePeriodSeconds")
		s.TerminationGracePeriodSeconds.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Tolerations".
	// Unsupported kind "pointer" for field "TopologySpreadConstraints".
	// Unsupported kind "pointer" for field "Volumes".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodSpec json value to io.Writer.
func (s IoK8sAPICoreV1PodSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodSpec json value from io.Reader.
func (s *IoK8sAPICoreV1PodSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodSpec from json stream.
func (s *IoK8sAPICoreV1PodSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "activeDeadlineSeconds":
			s.ActiveDeadlineSeconds.Reset()
			if err := s.ActiveDeadlineSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ActiveDeadlineSeconds", err.Error())
				return false
			}
			return true
		case "affinity":
			// Unsupported kind "pointer" for field "Affinity".
			i.Skip()
			return true
		case "automountServiceAccountToken":
			s.AutomountServiceAccountToken.Reset()
			if err := s.AutomountServiceAccountToken.ReadJSON(i); err != nil {
				i.ReportError("Field AutomountServiceAccountToken", err.Error())
				return false
			}
			return true
		case "containers":
			// Unsupported kind "array" for field "Containers".
			i.Skip()
			return true
		case "dnsConfig":
			// Unsupported kind "pointer" for field "DnsConfig".
			i.Skip()
			return true
		case "dnsPolicy":
			s.DnsPolicy.Reset()
			if err := s.DnsPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field DnsPolicy", err.Error())
				return false
			}
			return true
		case "enableServiceLinks":
			s.EnableServiceLinks.Reset()
			if err := s.EnableServiceLinks.ReadJSON(i); err != nil {
				i.ReportError("Field EnableServiceLinks", err.Error())
				return false
			}
			return true
		case "ephemeralContainers":
			// Unsupported kind "pointer" for field "EphemeralContainers".
			i.Skip()
			return true
		case "hostAliases":
			// Unsupported kind "pointer" for field "HostAliases".
			i.Skip()
			return true
		case "hostIPC":
			s.HostIPC.Reset()
			if err := s.HostIPC.ReadJSON(i); err != nil {
				i.ReportError("Field HostIPC", err.Error())
				return false
			}
			return true
		case "hostNetwork":
			s.HostNetwork.Reset()
			if err := s.HostNetwork.ReadJSON(i); err != nil {
				i.ReportError("Field HostNetwork", err.Error())
				return false
			}
			return true
		case "hostPID":
			s.HostPID.Reset()
			if err := s.HostPID.ReadJSON(i); err != nil {
				i.ReportError("Field HostPID", err.Error())
				return false
			}
			return true
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				i.ReportError("Field Hostname", err.Error())
				return false
			}
			return true
		case "imagePullSecrets":
			// Unsupported kind "pointer" for field "ImagePullSecrets".
			i.Skip()
			return true
		case "initContainers":
			// Unsupported kind "pointer" for field "InitContainers".
			i.Skip()
			return true
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				i.ReportError("Field NodeName", err.Error())
				return false
			}
			return true
		case "nodeSelector":
			// Unsupported kind "pointer" for field "NodeSelector".
			i.Skip()
			return true
		case "overhead":
			// Unsupported kind "pointer" for field "Overhead".
			i.Skip()
			return true
		case "preemptionPolicy":
			s.PreemptionPolicy.Reset()
			if err := s.PreemptionPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field PreemptionPolicy", err.Error())
				return false
			}
			return true
		case "priority":
			s.Priority.Reset()
			if err := s.Priority.ReadJSON(i); err != nil {
				i.ReportError("Field Priority", err.Error())
				return false
			}
			return true
		case "priorityClassName":
			s.PriorityClassName.Reset()
			if err := s.PriorityClassName.ReadJSON(i); err != nil {
				i.ReportError("Field PriorityClassName", err.Error())
				return false
			}
			return true
		case "readinessGates":
			// Unsupported kind "pointer" for field "ReadinessGates".
			i.Skip()
			return true
		case "restartPolicy":
			s.RestartPolicy.Reset()
			if err := s.RestartPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field RestartPolicy", err.Error())
				return false
			}
			return true
		case "runtimeClassName":
			s.RuntimeClassName.Reset()
			if err := s.RuntimeClassName.ReadJSON(i); err != nil {
				i.ReportError("Field RuntimeClassName", err.Error())
				return false
			}
			return true
		case "schedulerName":
			s.SchedulerName.Reset()
			if err := s.SchedulerName.ReadJSON(i); err != nil {
				i.ReportError("Field SchedulerName", err.Error())
				return false
			}
			return true
		case "securityContext":
			// Unsupported kind "pointer" for field "SecurityContext".
			i.Skip()
			return true
		case "serviceAccount":
			s.ServiceAccount.Reset()
			if err := s.ServiceAccount.ReadJSON(i); err != nil {
				i.ReportError("Field ServiceAccount", err.Error())
				return false
			}
			return true
		case "serviceAccountName":
			s.ServiceAccountName.Reset()
			if err := s.ServiceAccountName.ReadJSON(i); err != nil {
				i.ReportError("Field ServiceAccountName", err.Error())
				return false
			}
			return true
		case "setHostnameAsFQDN":
			s.SetHostnameAsFQDN.Reset()
			if err := s.SetHostnameAsFQDN.ReadJSON(i); err != nil {
				i.ReportError("Field SetHostnameAsFQDN", err.Error())
				return false
			}
			return true
		case "shareProcessNamespace":
			s.ShareProcessNamespace.Reset()
			if err := s.ShareProcessNamespace.ReadJSON(i); err != nil {
				i.ReportError("Field ShareProcessNamespace", err.Error())
				return false
			}
			return true
		case "subdomain":
			s.Subdomain.Reset()
			if err := s.Subdomain.ReadJSON(i); err != nil {
				i.ReportError("Field Subdomain", err.Error())
				return false
			}
			return true
		case "terminationGracePeriodSeconds":
			s.TerminationGracePeriodSeconds.Reset()
			if err := s.TerminationGracePeriodSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationGracePeriodSeconds", err.Error())
				return false
			}
			return true
		case "tolerations":
			// Unsupported kind "pointer" for field "Tolerations".
			i.Skip()
			return true
		case "topologySpreadConstraints":
			// Unsupported kind "pointer" for field "TopologySpreadConstraints".
			i.Skip()
			return true
		case "volumes":
			// Unsupported kind "pointer" for field "Volumes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Conditions".
	// Unsupported kind "pointer" for field "ContainerStatuses".
	// Unsupported kind "pointer" for field "EphemeralContainerStatuses".
	if s.HostIP.Set {
		field.Write("hostIP")
		s.HostIP.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "InitContainerStatuses".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.NominatedNodeName.Set {
		field.Write("nominatedNodeName")
		s.NominatedNodeName.WriteJSON(j)
	}
	if s.Phase.Set {
		field.Write("phase")
		s.Phase.WriteJSON(j)
	}
	if s.PodIP.Set {
		field.Write("podIP")
		s.PodIP.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "PodIPs".
	if s.QosClass.Set {
		field.Write("qosClass")
		s.QosClass.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "StartTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodStatus json value to io.Writer.
func (s IoK8sAPICoreV1PodStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodStatus json value from io.Reader.
func (s *IoK8sAPICoreV1PodStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodStatus from json stream.
func (s *IoK8sAPICoreV1PodStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "containerStatuses":
			// Unsupported kind "pointer" for field "ContainerStatuses".
			i.Skip()
			return true
		case "ephemeralContainerStatuses":
			// Unsupported kind "pointer" for field "EphemeralContainerStatuses".
			i.Skip()
			return true
		case "hostIP":
			s.HostIP.Reset()
			if err := s.HostIP.ReadJSON(i); err != nil {
				i.ReportError("Field HostIP", err.Error())
				return false
			}
			return true
		case "initContainerStatuses":
			// Unsupported kind "pointer" for field "InitContainerStatuses".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "nominatedNodeName":
			s.NominatedNodeName.Reset()
			if err := s.NominatedNodeName.ReadJSON(i); err != nil {
				i.ReportError("Field NominatedNodeName", err.Error())
				return false
			}
			return true
		case "phase":
			s.Phase.Reset()
			if err := s.Phase.ReadJSON(i); err != nil {
				i.ReportError("Field Phase", err.Error())
				return false
			}
			return true
		case "podIP":
			s.PodIP.Reset()
			if err := s.PodIP.ReadJSON(i); err != nil {
				i.ReportError("Field PodIP", err.Error())
				return false
			}
			return true
		case "podIPs":
			// Unsupported kind "pointer" for field "PodIPs".
			i.Skip()
			return true
		case "qosClass":
			s.QosClass.Reset()
			if err := s.QosClass.ReadJSON(i); err != nil {
				i.ReportError("Field QosClass", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "startTime":
			// Unsupported kind "pointer" for field "StartTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplate) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Template".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodTemplate json value to io.Writer.
func (s IoK8sAPICoreV1PodTemplate) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodTemplate json value from io.Reader.
func (s *IoK8sAPICoreV1PodTemplate) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodTemplate from json stream.
func (s *IoK8sAPICoreV1PodTemplate) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "template":
			// Unsupported kind "pointer" for field "Template".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplateList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodTemplateList json value to io.Writer.
func (s IoK8sAPICoreV1PodTemplateList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodTemplateList json value from io.Reader.
func (s *IoK8sAPICoreV1PodTemplateList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodTemplateList from json stream.
func (s *IoK8sAPICoreV1PodTemplateList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PodTemplateSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PodTemplateSpec json value to io.Writer.
func (s IoK8sAPICoreV1PodTemplateSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PodTemplateSpec json value from io.Reader.
func (s *IoK8sAPICoreV1PodTemplateSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PodTemplateSpec from json stream.
func (s *IoK8sAPICoreV1PodTemplateSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PortStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Error.Set {
		field.Write("error")
		s.Error.WriteJSON(j)
	}
	field.Write("port")
	j.WriteInt32(s.Port)
	field.Write("protocol")
	j.WriteString(s.Protocol)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PortStatus json value to io.Writer.
func (s IoK8sAPICoreV1PortStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PortStatus json value from io.Reader.
func (s *IoK8sAPICoreV1PortStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PortStatus from json stream.
func (s *IoK8sAPICoreV1PortStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error":
			s.Error.Reset()
			if err := s.Error.ReadJSON(i); err != nil {
				i.ReportError("Field Error", err.Error())
				return false
			}
			return true
		case "port":
			s.Port = i.ReadInt32()
			return i.Error == nil
		case "protocol":
			s.Protocol = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PortworxVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	field.Write("volumeID")
	j.WriteString(s.VolumeID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PortworxVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1PortworxVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PortworxVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1PortworxVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PortworxVolumeSource from json stream.
func (s *IoK8sAPICoreV1PortworxVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "volumeID":
			s.VolumeID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1PreferredSchedulingTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("preference")
	s.Preference.WriteJSON(j)
	field.Write("weight")
	j.WriteInt32(s.Weight)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1PreferredSchedulingTerm json value to io.Writer.
func (s IoK8sAPICoreV1PreferredSchedulingTerm) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1PreferredSchedulingTerm json value from io.Reader.
func (s *IoK8sAPICoreV1PreferredSchedulingTerm) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1PreferredSchedulingTerm from json stream.
func (s *IoK8sAPICoreV1PreferredSchedulingTerm) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "preference":
			if err := s.Preference.ReadJSON(i); err != nil {
				i.ReportError("Field Preference", err.Error())
				return false
			}
			return true
		case "weight":
			s.Weight = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Probe) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Exec".
	if s.FailureThreshold.Set {
		field.Write("failureThreshold")
		s.FailureThreshold.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "HttpGet".
	if s.InitialDelaySeconds.Set {
		field.Write("initialDelaySeconds")
		s.InitialDelaySeconds.WriteJSON(j)
	}
	if s.PeriodSeconds.Set {
		field.Write("periodSeconds")
		s.PeriodSeconds.WriteJSON(j)
	}
	if s.SuccessThreshold.Set {
		field.Write("successThreshold")
		s.SuccessThreshold.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "TcpSocket".
	if s.TerminationGracePeriodSeconds.Set {
		field.Write("terminationGracePeriodSeconds")
		s.TerminationGracePeriodSeconds.WriteJSON(j)
	}
	if s.TimeoutSeconds.Set {
		field.Write("timeoutSeconds")
		s.TimeoutSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Probe json value to io.Writer.
func (s IoK8sAPICoreV1Probe) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Probe json value from io.Reader.
func (s *IoK8sAPICoreV1Probe) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Probe from json stream.
func (s *IoK8sAPICoreV1Probe) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "exec":
			// Unsupported kind "pointer" for field "Exec".
			i.Skip()
			return true
		case "failureThreshold":
			s.FailureThreshold.Reset()
			if err := s.FailureThreshold.ReadJSON(i); err != nil {
				i.ReportError("Field FailureThreshold", err.Error())
				return false
			}
			return true
		case "httpGet":
			// Unsupported kind "pointer" for field "HttpGet".
			i.Skip()
			return true
		case "initialDelaySeconds":
			s.InitialDelaySeconds.Reset()
			if err := s.InitialDelaySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field InitialDelaySeconds", err.Error())
				return false
			}
			return true
		case "periodSeconds":
			s.PeriodSeconds.Reset()
			if err := s.PeriodSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field PeriodSeconds", err.Error())
				return false
			}
			return true
		case "successThreshold":
			s.SuccessThreshold.Reset()
			if err := s.SuccessThreshold.ReadJSON(i); err != nil {
				i.ReportError("Field SuccessThreshold", err.Error())
				return false
			}
			return true
		case "tcpSocket":
			// Unsupported kind "pointer" for field "TcpSocket".
			i.Skip()
			return true
		case "terminationGracePeriodSeconds":
			s.TerminationGracePeriodSeconds.Reset()
			if err := s.TerminationGracePeriodSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TerminationGracePeriodSeconds", err.Error())
				return false
			}
			return true
		case "timeoutSeconds":
			s.TimeoutSeconds.Reset()
			if err := s.TimeoutSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TimeoutSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ProjectedVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.DefaultMode.Set {
		field.Write("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Sources".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ProjectedVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ProjectedVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ProjectedVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ProjectedVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ProjectedVolumeSource from json stream.
func (s *IoK8sAPICoreV1ProjectedVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultMode", err.Error())
				return false
			}
			return true
		case "sources":
			// Unsupported kind "pointer" for field "Sources".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1QuobyteVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Group.Set {
		field.Write("group")
		s.Group.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	field.Write("registry")
	j.WriteString(s.Registry)
	if s.Tenant.Set {
		field.Write("tenant")
		s.Tenant.WriteJSON(j)
	}
	if s.User.Set {
		field.Write("user")
		s.User.WriteJSON(j)
	}
	field.Write("volume")
	j.WriteString(s.Volume)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1QuobyteVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1QuobyteVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1QuobyteVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1QuobyteVolumeSource from json stream.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "registry":
			s.Registry = i.ReadString()
			return i.Error == nil
		case "tenant":
			s.Tenant.Reset()
			if err := s.Tenant.ReadJSON(i); err != nil {
				i.ReportError("Field Tenant", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		case "volume":
			s.Volume = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1RBDPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	field.Write("image")
	j.WriteString(s.Image)
	if s.Keyring.Set {
		field.Write("keyring")
		s.Keyring.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Monitors".
	if s.Pool.Set {
		field.Write("pool")
		s.Pool.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	if s.User.Set {
		field.Write("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1RBDPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1RBDPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1RBDPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1RBDPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "image":
			s.Image = i.ReadString()
			return i.Error == nil
		case "keyring":
			s.Keyring.Reset()
			if err := s.Keyring.ReadJSON(i); err != nil {
				i.ReportError("Field Keyring", err.Error())
				return false
			}
			return true
		case "monitors":
			// Unsupported kind "array" for field "Monitors".
			i.Skip()
			return true
		case "pool":
			s.Pool.Reset()
			if err := s.Pool.ReadJSON(i); err != nil {
				i.ReportError("Field Pool", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1RBDVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	field.Write("image")
	j.WriteString(s.Image)
	if s.Keyring.Set {
		field.Write("keyring")
		s.Keyring.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Monitors".
	if s.Pool.Set {
		field.Write("pool")
		s.Pool.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	if s.User.Set {
		field.Write("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1RBDVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1RBDVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1RBDVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1RBDVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1RBDVolumeSource from json stream.
func (s *IoK8sAPICoreV1RBDVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "image":
			s.Image = i.ReadString()
			return i.Error == nil
		case "keyring":
			s.Keyring.Reset()
			if err := s.Keyring.ReadJSON(i); err != nil {
				i.ReportError("Field Keyring", err.Error())
				return false
			}
			return true
		case "monitors":
			// Unsupported kind "array" for field "Monitors".
			i.Skip()
			return true
		case "pool":
			s.Pool.Reset()
			if err := s.Pool.ReadJSON(i); err != nil {
				i.ReportError("Field Pool", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationController) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ReplicationController json value to io.Writer.
func (s IoK8sAPICoreV1ReplicationController) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ReplicationController json value from io.Reader.
func (s *IoK8sAPICoreV1ReplicationController) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ReplicationController from json stream.
func (s *IoK8sAPICoreV1ReplicationController) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ReplicationControllerCondition json value to io.Writer.
func (s IoK8sAPICoreV1ReplicationControllerCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ReplicationControllerCondition json value from io.Reader.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerCondition from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ReplicationControllerList json value to io.Writer.
func (s IoK8sAPICoreV1ReplicationControllerList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ReplicationControllerList json value from io.Reader.
func (s *IoK8sAPICoreV1ReplicationControllerList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerList from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.MinReadySeconds.Set {
		field.Write("minReadySeconds")
		s.MinReadySeconds.WriteJSON(j)
	}
	if s.Replicas.Set {
		field.Write("replicas")
		s.Replicas.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Selector".
	// Unsupported kind "pointer" for field "Template".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ReplicationControllerSpec json value to io.Writer.
func (s IoK8sAPICoreV1ReplicationControllerSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ReplicationControllerSpec json value from io.Reader.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerSpec from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "minReadySeconds":
			s.MinReadySeconds.Reset()
			if err := s.MinReadySeconds.ReadJSON(i); err != nil {
				i.ReportError("Field MinReadySeconds", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas.Reset()
			if err := s.Replicas.ReadJSON(i); err != nil {
				i.ReportError("Field Replicas", err.Error())
				return false
			}
			return true
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		case "template":
			// Unsupported kind "pointer" for field "Template".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ReplicationControllerStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AvailableReplicas.Set {
		field.Write("availableReplicas")
		s.AvailableReplicas.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Conditions".
	if s.FullyLabeledReplicas.Set {
		field.Write("fullyLabeledReplicas")
		s.FullyLabeledReplicas.WriteJSON(j)
	}
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	if s.ReadyReplicas.Set {
		field.Write("readyReplicas")
		s.ReadyReplicas.WriteJSON(j)
	}
	field.Write("replicas")
	j.WriteInt32(s.Replicas)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ReplicationControllerStatus json value to io.Writer.
func (s IoK8sAPICoreV1ReplicationControllerStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ReplicationControllerStatus json value from io.Reader.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ReplicationControllerStatus from json stream.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "availableReplicas":
			s.AvailableReplicas.Reset()
			if err := s.AvailableReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field AvailableReplicas", err.Error())
				return false
			}
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "fullyLabeledReplicas":
			s.FullyLabeledReplicas.Reset()
			if err := s.FullyLabeledReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field FullyLabeledReplicas", err.Error())
				return false
			}
			return true
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "readyReplicas":
			s.ReadyReplicas.Reset()
			if err := s.ReadyReplicas.ReadJSON(i); err != nil {
				i.ReportError("Field ReadyReplicas", err.Error())
				return false
			}
			return true
		case "replicas":
			s.Replicas = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceFieldSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ContainerName.Set {
		field.Write("containerName")
		s.ContainerName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Divisor".
	field.Write("resource")
	j.WriteString(s.Resource)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceFieldSelector json value to io.Writer.
func (s IoK8sAPICoreV1ResourceFieldSelector) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceFieldSelector json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceFieldSelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceFieldSelector from json stream.
func (s *IoK8sAPICoreV1ResourceFieldSelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "containerName":
			s.ContainerName.Reset()
			if err := s.ContainerName.ReadJSON(i); err != nil {
				i.ReportError("Field ContainerName", err.Error())
				return false
			}
			return true
		case "divisor":
			// Unsupported kind "pointer" for field "Divisor".
			i.Skip()
			return true
		case "resource":
			s.Resource = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuota) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceQuota json value to io.Writer.
func (s IoK8sAPICoreV1ResourceQuota) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceQuota json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceQuota) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuota from json stream.
func (s *IoK8sAPICoreV1ResourceQuota) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceQuotaList json value to io.Writer.
func (s IoK8sAPICoreV1ResourceQuotaList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceQuotaList json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceQuotaList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaList from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Hard".
	// Unsupported kind "pointer" for field "ScopeSelector".
	// Unsupported kind "pointer" for field "Scopes".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceQuotaSpec json value to io.Writer.
func (s IoK8sAPICoreV1ResourceQuotaSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceQuotaSpec json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaSpec from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hard":
			// Unsupported kind "pointer" for field "Hard".
			i.Skip()
			return true
		case "scopeSelector":
			// Unsupported kind "pointer" for field "ScopeSelector".
			i.Skip()
			return true
		case "scopes":
			// Unsupported kind "pointer" for field "Scopes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceQuotaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Hard".
	// Unsupported kind "pointer" for field "Used".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceQuotaStatus json value to io.Writer.
func (s IoK8sAPICoreV1ResourceQuotaStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceQuotaStatus json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceQuotaStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceQuotaStatus from json stream.
func (s *IoK8sAPICoreV1ResourceQuotaStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hard":
			// Unsupported kind "pointer" for field "Hard".
			i.Skip()
			return true
		case "used":
			// Unsupported kind "pointer" for field "Used".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ResourceRequirements) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Limits".
	// Unsupported kind "pointer" for field "Requests".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ResourceRequirements json value to io.Writer.
func (s IoK8sAPICoreV1ResourceRequirements) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ResourceRequirements json value from io.Reader.
func (s *IoK8sAPICoreV1ResourceRequirements) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ResourceRequirements from json stream.
func (s *IoK8sAPICoreV1ResourceRequirements) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limits":
			// Unsupported kind "pointer" for field "Limits".
			i.Skip()
			return true
		case "requests":
			// Unsupported kind "pointer" for field "Requests".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SELinuxOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Level.Set {
		field.Write("level")
		s.Level.WriteJSON(j)
	}
	if s.Role.Set {
		field.Write("role")
		s.Role.WriteJSON(j)
	}
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	if s.User.Set {
		field.Write("user")
		s.User.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SELinuxOptions json value to io.Writer.
func (s IoK8sAPICoreV1SELinuxOptions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SELinuxOptions json value from io.Reader.
func (s *IoK8sAPICoreV1SELinuxOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SELinuxOptions from json stream.
func (s *IoK8sAPICoreV1SELinuxOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "level":
			s.Level.Reset()
			if err := s.Level.ReadJSON(i); err != nil {
				i.ReportError("Field Level", err.Error())
				return false
			}
			return true
		case "role":
			s.Role.Reset()
			if err := s.Role.ReadJSON(i); err != nil {
				i.ReportError("Field Role", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(i); err != nil {
				i.ReportError("Field User", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScaleIOPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	field.Write("gateway")
	j.WriteString(s.Gateway)
	if s.ProtectionDomain.Set {
		field.Write("protectionDomain")
		s.ProtectionDomain.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	field.Write("secretRef")
	s.SecretRef.WriteJSON(j)
	if s.SslEnabled.Set {
		field.Write("sslEnabled")
		s.SslEnabled.WriteJSON(j)
	}
	if s.StorageMode.Set {
		field.Write("storageMode")
		s.StorageMode.WriteJSON(j)
	}
	if s.StoragePool.Set {
		field.Write("storagePool")
		s.StoragePool.WriteJSON(j)
	}
	field.Write("system")
	j.WriteString(s.System)
	if s.VolumeName.Set {
		field.Write("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ScaleIOPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ScaleIOPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ScaleIOPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ScaleIOPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "gateway":
			s.Gateway = i.ReadString()
			return i.Error == nil
		case "protectionDomain":
			s.ProtectionDomain.Reset()
			if err := s.ProtectionDomain.ReadJSON(i); err != nil {
				i.ReportError("Field ProtectionDomain", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "sslEnabled":
			s.SslEnabled.Reset()
			if err := s.SslEnabled.ReadJSON(i); err != nil {
				i.ReportError("Field SslEnabled", err.Error())
				return false
			}
			return true
		case "storageMode":
			s.StorageMode.Reset()
			if err := s.StorageMode.ReadJSON(i); err != nil {
				i.ReportError("Field StorageMode", err.Error())
				return false
			}
			return true
		case "storagePool":
			s.StoragePool.Reset()
			if err := s.StoragePool.ReadJSON(i); err != nil {
				i.ReportError("Field StoragePool", err.Error())
				return false
			}
			return true
		case "system":
			s.System = i.ReadString()
			return i.Error == nil
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScaleIOVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	field.Write("gateway")
	j.WriteString(s.Gateway)
	if s.ProtectionDomain.Set {
		field.Write("protectionDomain")
		s.ProtectionDomain.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	field.Write("secretRef")
	s.SecretRef.WriteJSON(j)
	if s.SslEnabled.Set {
		field.Write("sslEnabled")
		s.SslEnabled.WriteJSON(j)
	}
	if s.StorageMode.Set {
		field.Write("storageMode")
		s.StorageMode.WriteJSON(j)
	}
	if s.StoragePool.Set {
		field.Write("storagePool")
		s.StoragePool.WriteJSON(j)
	}
	field.Write("system")
	j.WriteString(s.System)
	if s.VolumeName.Set {
		field.Write("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ScaleIOVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1ScaleIOVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ScaleIOVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ScaleIOVolumeSource from json stream.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "gateway":
			s.Gateway = i.ReadString()
			return i.Error == nil
		case "protectionDomain":
			s.ProtectionDomain.Reset()
			if err := s.ProtectionDomain.ReadJSON(i); err != nil {
				i.ReportError("Field ProtectionDomain", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			if err := s.SecretRef.ReadJSON(i); err != nil {
				i.ReportError("Field SecretRef", err.Error())
				return false
			}
			return true
		case "sslEnabled":
			s.SslEnabled.Reset()
			if err := s.SslEnabled.ReadJSON(i); err != nil {
				i.ReportError("Field SslEnabled", err.Error())
				return false
			}
			return true
		case "storageMode":
			s.StorageMode.Reset()
			if err := s.StorageMode.ReadJSON(i); err != nil {
				i.ReportError("Field StorageMode", err.Error())
				return false
			}
			return true
		case "storagePool":
			s.StoragePool.Reset()
			if err := s.StoragePool.ReadJSON(i); err != nil {
				i.ReportError("Field StoragePool", err.Error())
				return false
			}
			return true
		case "system":
			s.System = i.ReadString()
			return i.Error == nil
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScopeSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "MatchExpressions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ScopeSelector json value to io.Writer.
func (s IoK8sAPICoreV1ScopeSelector) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ScopeSelector json value from io.Reader.
func (s *IoK8sAPICoreV1ScopeSelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ScopeSelector from json stream.
func (s *IoK8sAPICoreV1ScopeSelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "matchExpressions":
			// Unsupported kind "pointer" for field "MatchExpressions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ScopedResourceSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("operator")
	j.WriteString(s.Operator)
	field.Write("scopeName")
	j.WriteString(s.ScopeName)
	// Unsupported kind "pointer" for field "Values".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ScopedResourceSelectorRequirement json value to io.Writer.
func (s IoK8sAPICoreV1ScopedResourceSelectorRequirement) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ScopedResourceSelectorRequirement json value from io.Reader.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ScopedResourceSelectorRequirement from json stream.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "operator":
			s.Operator = i.ReadString()
			return i.Error == nil
		case "scopeName":
			s.ScopeName = i.ReadString()
			return i.Error == nil
		case "values":
			// Unsupported kind "pointer" for field "Values".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SeccompProfile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.LocalhostProfile.Set {
		field.Write("localhostProfile")
		s.LocalhostProfile.WriteJSON(j)
	}
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SeccompProfile json value to io.Writer.
func (s IoK8sAPICoreV1SeccompProfile) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SeccompProfile json value from io.Reader.
func (s *IoK8sAPICoreV1SeccompProfile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SeccompProfile from json stream.
func (s *IoK8sAPICoreV1SeccompProfile) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "localhostProfile":
			s.LocalhostProfile.Reset()
			if err := s.LocalhostProfile.ReadJSON(i); err != nil {
				i.ReportError("Field LocalhostProfile", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Secret) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Data".
	if s.Immutable.Set {
		field.Write("immutable")
		s.Immutable.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "StringData".
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Secret json value to io.Writer.
func (s IoK8sAPICoreV1Secret) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Secret json value from io.Reader.
func (s *IoK8sAPICoreV1Secret) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Secret from json stream.
func (s *IoK8sAPICoreV1Secret) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "data":
			// Unsupported kind "pointer" for field "Data".
			i.Skip()
			return true
		case "immutable":
			s.Immutable.Reset()
			if err := s.Immutable.ReadJSON(i); err != nil {
				i.ReportError("Field Immutable", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "stringData":
			// Unsupported kind "pointer" for field "StringData".
			i.Skip()
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretEnvSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		field.Write("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretEnvSource json value to io.Writer.
func (s IoK8sAPICoreV1SecretEnvSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretEnvSource json value from io.Reader.
func (s *IoK8sAPICoreV1SecretEnvSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretEnvSource from json stream.
func (s *IoK8sAPICoreV1SecretEnvSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretKeySelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("key")
	j.WriteString(s.Key)
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		field.Write("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretKeySelector json value to io.Writer.
func (s IoK8sAPICoreV1SecretKeySelector) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretKeySelector json value from io.Reader.
func (s *IoK8sAPICoreV1SecretKeySelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretKeySelector from json stream.
func (s *IoK8sAPICoreV1SecretKeySelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretList json value to io.Writer.
func (s IoK8sAPICoreV1SecretList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretList json value from io.Reader.
func (s *IoK8sAPICoreV1SecretList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretList from json stream.
func (s *IoK8sAPICoreV1SecretList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Items".
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Optional.Set {
		field.Write("optional")
		s.Optional.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretProjection json value to io.Writer.
func (s IoK8sAPICoreV1SecretProjection) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretProjection json value from io.Reader.
func (s *IoK8sAPICoreV1SecretProjection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretProjection from json stream.
func (s *IoK8sAPICoreV1SecretProjection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "items":
			// Unsupported kind "pointer" for field "Items".
			i.Skip()
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		field.Write("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretReference json value to io.Writer.
func (s IoK8sAPICoreV1SecretReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretReference json value from io.Reader.
func (s *IoK8sAPICoreV1SecretReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretReference from json stream.
func (s *IoK8sAPICoreV1SecretReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecretVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.DefaultMode.Set {
		field.Write("defaultMode")
		s.DefaultMode.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Items".
	if s.Optional.Set {
		field.Write("optional")
		s.Optional.WriteJSON(j)
	}
	if s.SecretName.Set {
		field.Write("secretName")
		s.SecretName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecretVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1SecretVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecretVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1SecretVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecretVolumeSource from json stream.
func (s *IoK8sAPICoreV1SecretVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "defaultMode":
			s.DefaultMode.Reset()
			if err := s.DefaultMode.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultMode", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "pointer" for field "Items".
			i.Skip()
			return true
		case "optional":
			s.Optional.Reset()
			if err := s.Optional.ReadJSON(i); err != nil {
				i.ReportError("Field Optional", err.Error())
				return false
			}
			return true
		case "secretName":
			s.SecretName.Reset()
			if err := s.SecretName.ReadJSON(i); err != nil {
				i.ReportError("Field SecretName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SecurityContext) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AllowPrivilegeEscalation.Set {
		field.Write("allowPrivilegeEscalation")
		s.AllowPrivilegeEscalation.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Capabilities".
	if s.Privileged.Set {
		field.Write("privileged")
		s.Privileged.WriteJSON(j)
	}
	if s.ProcMount.Set {
		field.Write("procMount")
		s.ProcMount.WriteJSON(j)
	}
	if s.ReadOnlyRootFilesystem.Set {
		field.Write("readOnlyRootFilesystem")
		s.ReadOnlyRootFilesystem.WriteJSON(j)
	}
	if s.RunAsGroup.Set {
		field.Write("runAsGroup")
		s.RunAsGroup.WriteJSON(j)
	}
	if s.RunAsNonRoot.Set {
		field.Write("runAsNonRoot")
		s.RunAsNonRoot.WriteJSON(j)
	}
	if s.RunAsUser.Set {
		field.Write("runAsUser")
		s.RunAsUser.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SeLinuxOptions".
	// Unsupported kind "pointer" for field "SeccompProfile".
	// Unsupported kind "pointer" for field "WindowsOptions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SecurityContext json value to io.Writer.
func (s IoK8sAPICoreV1SecurityContext) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SecurityContext json value from io.Reader.
func (s *IoK8sAPICoreV1SecurityContext) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SecurityContext from json stream.
func (s *IoK8sAPICoreV1SecurityContext) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowPrivilegeEscalation":
			s.AllowPrivilegeEscalation.Reset()
			if err := s.AllowPrivilegeEscalation.ReadJSON(i); err != nil {
				i.ReportError("Field AllowPrivilegeEscalation", err.Error())
				return false
			}
			return true
		case "capabilities":
			// Unsupported kind "pointer" for field "Capabilities".
			i.Skip()
			return true
		case "privileged":
			s.Privileged.Reset()
			if err := s.Privileged.ReadJSON(i); err != nil {
				i.ReportError("Field Privileged", err.Error())
				return false
			}
			return true
		case "procMount":
			s.ProcMount.Reset()
			if err := s.ProcMount.ReadJSON(i); err != nil {
				i.ReportError("Field ProcMount", err.Error())
				return false
			}
			return true
		case "readOnlyRootFilesystem":
			s.ReadOnlyRootFilesystem.Reset()
			if err := s.ReadOnlyRootFilesystem.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnlyRootFilesystem", err.Error())
				return false
			}
			return true
		case "runAsGroup":
			s.RunAsGroup.Reset()
			if err := s.RunAsGroup.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsGroup", err.Error())
				return false
			}
			return true
		case "runAsNonRoot":
			s.RunAsNonRoot.Reset()
			if err := s.RunAsNonRoot.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsNonRoot", err.Error())
				return false
			}
			return true
		case "runAsUser":
			s.RunAsUser.Reset()
			if err := s.RunAsUser.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsUser", err.Error())
				return false
			}
			return true
		case "seLinuxOptions":
			// Unsupported kind "pointer" for field "SeLinuxOptions".
			i.Skip()
			return true
		case "seccompProfile":
			// Unsupported kind "pointer" for field "SeccompProfile".
			i.Skip()
			return true
		case "windowsOptions":
			// Unsupported kind "pointer" for field "WindowsOptions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Service) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Service json value to io.Writer.
func (s IoK8sAPICoreV1Service) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Service json value from io.Reader.
func (s *IoK8sAPICoreV1Service) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Service from json stream.
func (s *IoK8sAPICoreV1Service) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccount) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.AutomountServiceAccountToken.Set {
		field.Write("automountServiceAccountToken")
		s.AutomountServiceAccountToken.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "ImagePullSecrets".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Secrets".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceAccount json value to io.Writer.
func (s IoK8sAPICoreV1ServiceAccount) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceAccount json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceAccount) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccount from json stream.
func (s *IoK8sAPICoreV1ServiceAccount) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "automountServiceAccountToken":
			s.AutomountServiceAccountToken.Reset()
			if err := s.AutomountServiceAccountToken.ReadJSON(i); err != nil {
				i.ReportError("Field AutomountServiceAccountToken", err.Error())
				return false
			}
			return true
		case "imagePullSecrets":
			// Unsupported kind "pointer" for field "ImagePullSecrets".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "secrets":
			// Unsupported kind "pointer" for field "Secrets".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccountList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceAccountList json value to io.Writer.
func (s IoK8sAPICoreV1ServiceAccountList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceAccountList json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceAccountList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccountList from json stream.
func (s *IoK8sAPICoreV1ServiceAccountList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceAccountTokenProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Audience.Set {
		field.Write("audience")
		s.Audience.WriteJSON(j)
	}
	if s.ExpirationSeconds.Set {
		field.Write("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	field.Write("path")
	j.WriteString(s.Path)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceAccountTokenProjection json value to io.Writer.
func (s IoK8sAPICoreV1ServiceAccountTokenProjection) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceAccountTokenProjection json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceAccountTokenProjection from json stream.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "audience":
			s.Audience.Reset()
			if err := s.Audience.ReadJSON(i); err != nil {
				i.ReportError("Field Audience", err.Error())
				return false
			}
			return true
		case "expirationSeconds":
			s.ExpirationSeconds.Reset()
			if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ExpirationSeconds", err.Error())
				return false
			}
			return true
		case "path":
			s.Path = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceList json value to io.Writer.
func (s IoK8sAPICoreV1ServiceList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceList json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceList from json stream.
func (s *IoK8sAPICoreV1ServiceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServicePort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AppProtocol.Set {
		field.Write("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.NodePort.Set {
		field.Write("nodePort")
		s.NodePort.WriteJSON(j)
	}
	field.Write("port")
	j.WriteInt32(s.Port)
	if s.Protocol.Set {
		field.Write("protocol")
		s.Protocol.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "TargetPort".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServicePort json value to io.Writer.
func (s IoK8sAPICoreV1ServicePort) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServicePort json value from io.Reader.
func (s *IoK8sAPICoreV1ServicePort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServicePort from json stream.
func (s *IoK8sAPICoreV1ServicePort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				i.ReportError("Field AppProtocol", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "nodePort":
			s.NodePort.Reset()
			if err := s.NodePort.ReadJSON(i); err != nil {
				i.ReportError("Field NodePort", err.Error())
				return false
			}
			return true
		case "port":
			s.Port = i.ReadInt32()
			return i.Error == nil
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		case "targetPort":
			// Unsupported kind "pointer" for field "TargetPort".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AllocateLoadBalancerNodePorts.Set {
		field.Write("allocateLoadBalancerNodePorts")
		s.AllocateLoadBalancerNodePorts.WriteJSON(j)
	}
	if s.ClusterIP.Set {
		field.Write("clusterIP")
		s.ClusterIP.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "ClusterIPs".
	// Unsupported kind "pointer" for field "ExternalIPs".
	if s.ExternalName.Set {
		field.Write("externalName")
		s.ExternalName.WriteJSON(j)
	}
	if s.ExternalTrafficPolicy.Set {
		field.Write("externalTrafficPolicy")
		s.ExternalTrafficPolicy.WriteJSON(j)
	}
	if s.HealthCheckNodePort.Set {
		field.Write("healthCheckNodePort")
		s.HealthCheckNodePort.WriteJSON(j)
	}
	if s.InternalTrafficPolicy.Set {
		field.Write("internalTrafficPolicy")
		s.InternalTrafficPolicy.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "IpFamilies".
	if s.IpFamilyPolicy.Set {
		field.Write("ipFamilyPolicy")
		s.IpFamilyPolicy.WriteJSON(j)
	}
	if s.LoadBalancerClass.Set {
		field.Write("loadBalancerClass")
		s.LoadBalancerClass.WriteJSON(j)
	}
	if s.LoadBalancerIP.Set {
		field.Write("loadBalancerIP")
		s.LoadBalancerIP.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "LoadBalancerSourceRanges".
	// Unsupported kind "pointer" for field "Ports".
	if s.PublishNotReadyAddresses.Set {
		field.Write("publishNotReadyAddresses")
		s.PublishNotReadyAddresses.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Selector".
	if s.SessionAffinity.Set {
		field.Write("sessionAffinity")
		s.SessionAffinity.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SessionAffinityConfig".
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceSpec json value to io.Writer.
func (s IoK8sAPICoreV1ServiceSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceSpec json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceSpec from json stream.
func (s *IoK8sAPICoreV1ServiceSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allocateLoadBalancerNodePorts":
			s.AllocateLoadBalancerNodePorts.Reset()
			if err := s.AllocateLoadBalancerNodePorts.ReadJSON(i); err != nil {
				i.ReportError("Field AllocateLoadBalancerNodePorts", err.Error())
				return false
			}
			return true
		case "clusterIP":
			s.ClusterIP.Reset()
			if err := s.ClusterIP.ReadJSON(i); err != nil {
				i.ReportError("Field ClusterIP", err.Error())
				return false
			}
			return true
		case "clusterIPs":
			// Unsupported kind "pointer" for field "ClusterIPs".
			i.Skip()
			return true
		case "externalIPs":
			// Unsupported kind "pointer" for field "ExternalIPs".
			i.Skip()
			return true
		case "externalName":
			s.ExternalName.Reset()
			if err := s.ExternalName.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalName", err.Error())
				return false
			}
			return true
		case "externalTrafficPolicy":
			s.ExternalTrafficPolicy.Reset()
			if err := s.ExternalTrafficPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ExternalTrafficPolicy", err.Error())
				return false
			}
			return true
		case "healthCheckNodePort":
			s.HealthCheckNodePort.Reset()
			if err := s.HealthCheckNodePort.ReadJSON(i); err != nil {
				i.ReportError("Field HealthCheckNodePort", err.Error())
				return false
			}
			return true
		case "internalTrafficPolicy":
			s.InternalTrafficPolicy.Reset()
			if err := s.InternalTrafficPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field InternalTrafficPolicy", err.Error())
				return false
			}
			return true
		case "ipFamilies":
			// Unsupported kind "pointer" for field "IpFamilies".
			i.Skip()
			return true
		case "ipFamilyPolicy":
			s.IpFamilyPolicy.Reset()
			if err := s.IpFamilyPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field IpFamilyPolicy", err.Error())
				return false
			}
			return true
		case "loadBalancerClass":
			s.LoadBalancerClass.Reset()
			if err := s.LoadBalancerClass.ReadJSON(i); err != nil {
				i.ReportError("Field LoadBalancerClass", err.Error())
				return false
			}
			return true
		case "loadBalancerIP":
			s.LoadBalancerIP.Reset()
			if err := s.LoadBalancerIP.ReadJSON(i); err != nil {
				i.ReportError("Field LoadBalancerIP", err.Error())
				return false
			}
			return true
		case "loadBalancerSourceRanges":
			// Unsupported kind "pointer" for field "LoadBalancerSourceRanges".
			i.Skip()
			return true
		case "ports":
			// Unsupported kind "pointer" for field "Ports".
			i.Skip()
			return true
		case "publishNotReadyAddresses":
			s.PublishNotReadyAddresses.Reset()
			if err := s.PublishNotReadyAddresses.ReadJSON(i); err != nil {
				i.ReportError("Field PublishNotReadyAddresses", err.Error())
				return false
			}
			return true
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		case "sessionAffinity":
			s.SessionAffinity.Reset()
			if err := s.SessionAffinity.ReadJSON(i); err != nil {
				i.ReportError("Field SessionAffinity", err.Error())
				return false
			}
			return true
		case "sessionAffinityConfig":
			// Unsupported kind "pointer" for field "SessionAffinityConfig".
			i.Skip()
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1ServiceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Conditions".
	// Unsupported kind "pointer" for field "LoadBalancer".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1ServiceStatus json value to io.Writer.
func (s IoK8sAPICoreV1ServiceStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1ServiceStatus json value from io.Reader.
func (s *IoK8sAPICoreV1ServiceStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1ServiceStatus from json stream.
func (s *IoK8sAPICoreV1ServiceStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "loadBalancer":
			// Unsupported kind "pointer" for field "LoadBalancer".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1SessionAffinityConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ClientIP".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1SessionAffinityConfig json value to io.Writer.
func (s IoK8sAPICoreV1SessionAffinityConfig) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1SessionAffinityConfig json value from io.Reader.
func (s *IoK8sAPICoreV1SessionAffinityConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1SessionAffinityConfig from json stream.
func (s *IoK8sAPICoreV1SessionAffinityConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "clientIP":
			// Unsupported kind "pointer" for field "ClientIP".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1StorageOSPersistentVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	if s.VolumeName.Set {
		field.Write("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	if s.VolumeNamespace.Set {
		field.Write("volumeNamespace")
		s.VolumeNamespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1StorageOSPersistentVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1StorageOSPersistentVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1StorageOSPersistentVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1StorageOSPersistentVolumeSource from json stream.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeName", err.Error())
				return false
			}
			return true
		case "volumeNamespace":
			s.VolumeNamespace.Reset()
			if err := s.VolumeNamespace.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeNamespace", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1StorageOSVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "SecretRef".
	if s.VolumeName.Set {
		field.Write("volumeName")
		s.VolumeName.WriteJSON(j)
	}
	if s.VolumeNamespace.Set {
		field.Write("volumeNamespace")
		s.VolumeNamespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1StorageOSVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1StorageOSVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1StorageOSVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1StorageOSVolumeSource from json stream.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "secretRef":
			// Unsupported kind "pointer" for field "SecretRef".
			i.Skip()
			return true
		case "volumeName":
			s.VolumeName.Reset()
			if err := s.VolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeName", err.Error())
				return false
			}
			return true
		case "volumeNamespace":
			s.VolumeNamespace.Reset()
			if err := s.VolumeNamespace.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeNamespace", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Sysctl) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("value")
	j.WriteString(s.Value)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Sysctl json value to io.Writer.
func (s IoK8sAPICoreV1Sysctl) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Sysctl json value from io.Reader.
func (s *IoK8sAPICoreV1Sysctl) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Sysctl from json stream.
func (s *IoK8sAPICoreV1Sysctl) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "value":
			s.Value = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TCPSocketAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Host.Set {
		field.Write("host")
		s.Host.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "Port".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1TCPSocketAction json value to io.Writer.
func (s IoK8sAPICoreV1TCPSocketAction) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1TCPSocketAction json value from io.Reader.
func (s *IoK8sAPICoreV1TCPSocketAction) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1TCPSocketAction from json stream.
func (s *IoK8sAPICoreV1TCPSocketAction) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				i.ReportError("Field Host", err.Error())
				return false
			}
			return true
		case "port":
			// Unsupported kind "alias" for field "Port".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Taint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("effect")
	j.WriteString(s.Effect)
	field.Write("key")
	j.WriteString(s.Key)
	// Unsupported kind "pointer" for field "TimeAdded".
	if s.Value.Set {
		field.Write("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Taint json value to io.Writer.
func (s IoK8sAPICoreV1Taint) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Taint json value from io.Reader.
func (s *IoK8sAPICoreV1Taint) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Taint from json stream.
func (s *IoK8sAPICoreV1Taint) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "effect":
			s.Effect = i.ReadString()
			return i.Error == nil
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "timeAdded":
			// Unsupported kind "pointer" for field "TimeAdded".
			i.Skip()
			return true
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Toleration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Effect.Set {
		field.Write("effect")
		s.Effect.WriteJSON(j)
	}
	if s.Key.Set {
		field.Write("key")
		s.Key.WriteJSON(j)
	}
	if s.Operator.Set {
		field.Write("operator")
		s.Operator.WriteJSON(j)
	}
	if s.TolerationSeconds.Set {
		field.Write("tolerationSeconds")
		s.TolerationSeconds.WriteJSON(j)
	}
	if s.Value.Set {
		field.Write("value")
		s.Value.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Toleration json value to io.Writer.
func (s IoK8sAPICoreV1Toleration) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Toleration json value from io.Reader.
func (s *IoK8sAPICoreV1Toleration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Toleration from json stream.
func (s *IoK8sAPICoreV1Toleration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "effect":
			s.Effect.Reset()
			if err := s.Effect.ReadJSON(i); err != nil {
				i.ReportError("Field Effect", err.Error())
				return false
			}
			return true
		case "key":
			s.Key.Reset()
			if err := s.Key.ReadJSON(i); err != nil {
				i.ReportError("Field Key", err.Error())
				return false
			}
			return true
		case "operator":
			s.Operator.Reset()
			if err := s.Operator.ReadJSON(i); err != nil {
				i.ReportError("Field Operator", err.Error())
				return false
			}
			return true
		case "tolerationSeconds":
			s.TolerationSeconds.Reset()
			if err := s.TolerationSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field TolerationSeconds", err.Error())
				return false
			}
			return true
		case "value":
			s.Value.Reset()
			if err := s.Value.ReadJSON(i); err != nil {
				i.ReportError("Field Value", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySelectorLabelRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("key")
	j.WriteString(s.Key)
	// Unsupported kind "array" for field "Values".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1TopologySelectorLabelRequirement json value to io.Writer.
func (s IoK8sAPICoreV1TopologySelectorLabelRequirement) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1TopologySelectorLabelRequirement json value from io.Reader.
func (s *IoK8sAPICoreV1TopologySelectorLabelRequirement) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1TopologySelectorLabelRequirement from json stream.
func (s *IoK8sAPICoreV1TopologySelectorLabelRequirement) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "values":
			// Unsupported kind "array" for field "Values".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySelectorTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "MatchLabelExpressions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1TopologySelectorTerm json value to io.Writer.
func (s IoK8sAPICoreV1TopologySelectorTerm) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1TopologySelectorTerm json value from io.Reader.
func (s *IoK8sAPICoreV1TopologySelectorTerm) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1TopologySelectorTerm from json stream.
func (s *IoK8sAPICoreV1TopologySelectorTerm) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "matchLabelExpressions":
			// Unsupported kind "pointer" for field "MatchLabelExpressions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TopologySpreadConstraint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LabelSelector".
	field.Write("maxSkew")
	j.WriteInt32(s.MaxSkew)
	field.Write("topologyKey")
	j.WriteString(s.TopologyKey)
	field.Write("whenUnsatisfiable")
	j.WriteString(s.WhenUnsatisfiable)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1TopologySpreadConstraint json value to io.Writer.
func (s IoK8sAPICoreV1TopologySpreadConstraint) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1TopologySpreadConstraint json value from io.Reader.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1TopologySpreadConstraint from json stream.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "labelSelector":
			// Unsupported kind "pointer" for field "LabelSelector".
			i.Skip()
			return true
		case "maxSkew":
			s.MaxSkew = i.ReadInt32()
			return i.Error == nil
		case "topologyKey":
			s.TopologyKey = i.ReadString()
			return i.Error == nil
		case "whenUnsatisfiable":
			s.WhenUnsatisfiable = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1TypedLocalObjectReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiGroup.Set {
		field.Write("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	field.Write("kind")
	j.WriteString(s.Kind)
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1TypedLocalObjectReference json value to io.Writer.
func (s IoK8sAPICoreV1TypedLocalObjectReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1TypedLocalObjectReference json value from io.Reader.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1TypedLocalObjectReference from json stream.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroup":
			s.ApiGroup.Reset()
			if err := s.ApiGroup.ReadJSON(i); err != nil {
				i.ReportError("Field ApiGroup", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1Volume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AwsElasticBlockStore".
	// Unsupported kind "pointer" for field "AzureDisk".
	// Unsupported kind "pointer" for field "AzureFile".
	// Unsupported kind "pointer" for field "Cephfs".
	// Unsupported kind "pointer" for field "Cinder".
	// Unsupported kind "pointer" for field "ConfigMap".
	// Unsupported kind "pointer" for field "Csi".
	// Unsupported kind "pointer" for field "DownwardAPI".
	// Unsupported kind "pointer" for field "EmptyDir".
	// Unsupported kind "pointer" for field "Ephemeral".
	// Unsupported kind "pointer" for field "Fc".
	// Unsupported kind "pointer" for field "FlexVolume".
	// Unsupported kind "pointer" for field "Flocker".
	// Unsupported kind "pointer" for field "GcePersistentDisk".
	// Unsupported kind "pointer" for field "GitRepo".
	// Unsupported kind "pointer" for field "Glusterfs".
	// Unsupported kind "pointer" for field "HostPath".
	// Unsupported kind "pointer" for field "Iscsi".
	field.Write("name")
	j.WriteString(s.Name)
	// Unsupported kind "pointer" for field "Nfs".
	// Unsupported kind "pointer" for field "PersistentVolumeClaim".
	// Unsupported kind "pointer" for field "PhotonPersistentDisk".
	// Unsupported kind "pointer" for field "PortworxVolume".
	// Unsupported kind "pointer" for field "Projected".
	// Unsupported kind "pointer" for field "Quobyte".
	// Unsupported kind "pointer" for field "Rbd".
	// Unsupported kind "pointer" for field "ScaleIO".
	// Unsupported kind "pointer" for field "Secret".
	// Unsupported kind "pointer" for field "Storageos".
	// Unsupported kind "pointer" for field "VsphereVolume".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1Volume json value to io.Writer.
func (s IoK8sAPICoreV1Volume) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1Volume json value from io.Reader.
func (s *IoK8sAPICoreV1Volume) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1Volume from json stream.
func (s *IoK8sAPICoreV1Volume) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "awsElasticBlockStore":
			// Unsupported kind "pointer" for field "AwsElasticBlockStore".
			i.Skip()
			return true
		case "azureDisk":
			// Unsupported kind "pointer" for field "AzureDisk".
			i.Skip()
			return true
		case "azureFile":
			// Unsupported kind "pointer" for field "AzureFile".
			i.Skip()
			return true
		case "cephfs":
			// Unsupported kind "pointer" for field "Cephfs".
			i.Skip()
			return true
		case "cinder":
			// Unsupported kind "pointer" for field "Cinder".
			i.Skip()
			return true
		case "configMap":
			// Unsupported kind "pointer" for field "ConfigMap".
			i.Skip()
			return true
		case "csi":
			// Unsupported kind "pointer" for field "Csi".
			i.Skip()
			return true
		case "downwardAPI":
			// Unsupported kind "pointer" for field "DownwardAPI".
			i.Skip()
			return true
		case "emptyDir":
			// Unsupported kind "pointer" for field "EmptyDir".
			i.Skip()
			return true
		case "ephemeral":
			// Unsupported kind "pointer" for field "Ephemeral".
			i.Skip()
			return true
		case "fc":
			// Unsupported kind "pointer" for field "Fc".
			i.Skip()
			return true
		case "flexVolume":
			// Unsupported kind "pointer" for field "FlexVolume".
			i.Skip()
			return true
		case "flocker":
			// Unsupported kind "pointer" for field "Flocker".
			i.Skip()
			return true
		case "gcePersistentDisk":
			// Unsupported kind "pointer" for field "GcePersistentDisk".
			i.Skip()
			return true
		case "gitRepo":
			// Unsupported kind "pointer" for field "GitRepo".
			i.Skip()
			return true
		case "glusterfs":
			// Unsupported kind "pointer" for field "Glusterfs".
			i.Skip()
			return true
		case "hostPath":
			// Unsupported kind "pointer" for field "HostPath".
			i.Skip()
			return true
		case "iscsi":
			// Unsupported kind "pointer" for field "Iscsi".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "nfs":
			// Unsupported kind "pointer" for field "Nfs".
			i.Skip()
			return true
		case "persistentVolumeClaim":
			// Unsupported kind "pointer" for field "PersistentVolumeClaim".
			i.Skip()
			return true
		case "photonPersistentDisk":
			// Unsupported kind "pointer" for field "PhotonPersistentDisk".
			i.Skip()
			return true
		case "portworxVolume":
			// Unsupported kind "pointer" for field "PortworxVolume".
			i.Skip()
			return true
		case "projected":
			// Unsupported kind "pointer" for field "Projected".
			i.Skip()
			return true
		case "quobyte":
			// Unsupported kind "pointer" for field "Quobyte".
			i.Skip()
			return true
		case "rbd":
			// Unsupported kind "pointer" for field "Rbd".
			i.Skip()
			return true
		case "scaleIO":
			// Unsupported kind "pointer" for field "ScaleIO".
			i.Skip()
			return true
		case "secret":
			// Unsupported kind "pointer" for field "Secret".
			i.Skip()
			return true
		case "storageos":
			// Unsupported kind "pointer" for field "Storageos".
			i.Skip()
			return true
		case "vsphereVolume":
			// Unsupported kind "pointer" for field "VsphereVolume".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeDevice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("devicePath")
	j.WriteString(s.DevicePath)
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1VolumeDevice json value to io.Writer.
func (s IoK8sAPICoreV1VolumeDevice) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1VolumeDevice json value from io.Reader.
func (s *IoK8sAPICoreV1VolumeDevice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1VolumeDevice from json stream.
func (s *IoK8sAPICoreV1VolumeDevice) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "devicePath":
			s.DevicePath = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeMount) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("mountPath")
	j.WriteString(s.MountPath)
	if s.MountPropagation.Set {
		field.Write("mountPropagation")
		s.MountPropagation.WriteJSON(j)
	}
	field.Write("name")
	j.WriteString(s.Name)
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	if s.SubPath.Set {
		field.Write("subPath")
		s.SubPath.WriteJSON(j)
	}
	if s.SubPathExpr.Set {
		field.Write("subPathExpr")
		s.SubPathExpr.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1VolumeMount json value to io.Writer.
func (s IoK8sAPICoreV1VolumeMount) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1VolumeMount json value from io.Reader.
func (s *IoK8sAPICoreV1VolumeMount) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1VolumeMount from json stream.
func (s *IoK8sAPICoreV1VolumeMount) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "mountPath":
			s.MountPath = i.ReadString()
			return i.Error == nil
		case "mountPropagation":
			s.MountPropagation.Reset()
			if err := s.MountPropagation.ReadJSON(i); err != nil {
				i.ReportError("Field MountPropagation", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		case "subPath":
			s.SubPath.Reset()
			if err := s.SubPath.ReadJSON(i); err != nil {
				i.ReportError("Field SubPath", err.Error())
				return false
			}
			return true
		case "subPathExpr":
			s.SubPathExpr.Reset()
			if err := s.SubPathExpr.ReadJSON(i); err != nil {
				i.ReportError("Field SubPathExpr", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeNodeAffinity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Required".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1VolumeNodeAffinity json value to io.Writer.
func (s IoK8sAPICoreV1VolumeNodeAffinity) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1VolumeNodeAffinity json value from io.Reader.
func (s *IoK8sAPICoreV1VolumeNodeAffinity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1VolumeNodeAffinity from json stream.
func (s *IoK8sAPICoreV1VolumeNodeAffinity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "required":
			// Unsupported kind "pointer" for field "Required".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VolumeProjection) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ConfigMap".
	// Unsupported kind "pointer" for field "DownwardAPI".
	// Unsupported kind "pointer" for field "Secret".
	// Unsupported kind "pointer" for field "ServiceAccountToken".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1VolumeProjection json value to io.Writer.
func (s IoK8sAPICoreV1VolumeProjection) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1VolumeProjection json value from io.Reader.
func (s *IoK8sAPICoreV1VolumeProjection) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1VolumeProjection from json stream.
func (s *IoK8sAPICoreV1VolumeProjection) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "configMap":
			// Unsupported kind "pointer" for field "ConfigMap".
			i.Skip()
			return true
		case "downwardAPI":
			// Unsupported kind "pointer" for field "DownwardAPI".
			i.Skip()
			return true
		case "secret":
			// Unsupported kind "pointer" for field "Secret".
			i.Skip()
			return true
		case "serviceAccountToken":
			// Unsupported kind "pointer" for field "ServiceAccountToken".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.FsType.Set {
		field.Write("fsType")
		s.FsType.WriteJSON(j)
	}
	if s.StoragePolicyID.Set {
		field.Write("storagePolicyID")
		s.StoragePolicyID.WriteJSON(j)
	}
	if s.StoragePolicyName.Set {
		field.Write("storagePolicyName")
		s.StoragePolicyName.WriteJSON(j)
	}
	field.Write("volumePath")
	j.WriteString(s.VolumePath)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1VsphereVirtualDiskVolumeSource json value to io.Writer.
func (s IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1VsphereVirtualDiskVolumeSource json value from io.Reader.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1VsphereVirtualDiskVolumeSource from json stream.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "fsType":
			s.FsType.Reset()
			if err := s.FsType.ReadJSON(i); err != nil {
				i.ReportError("Field FsType", err.Error())
				return false
			}
			return true
		case "storagePolicyID":
			s.StoragePolicyID.Reset()
			if err := s.StoragePolicyID.ReadJSON(i); err != nil {
				i.ReportError("Field StoragePolicyID", err.Error())
				return false
			}
			return true
		case "storagePolicyName":
			s.StoragePolicyName.Reset()
			if err := s.StoragePolicyName.ReadJSON(i); err != nil {
				i.ReportError("Field StoragePolicyName", err.Error())
				return false
			}
			return true
		case "volumePath":
			s.VolumePath = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1WeightedPodAffinityTerm) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("podAffinityTerm")
	s.PodAffinityTerm.WriteJSON(j)
	field.Write("weight")
	j.WriteInt32(s.Weight)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1WeightedPodAffinityTerm json value to io.Writer.
func (s IoK8sAPICoreV1WeightedPodAffinityTerm) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1WeightedPodAffinityTerm json value from io.Reader.
func (s *IoK8sAPICoreV1WeightedPodAffinityTerm) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1WeightedPodAffinityTerm from json stream.
func (s *IoK8sAPICoreV1WeightedPodAffinityTerm) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "podAffinityTerm":
			if err := s.PodAffinityTerm.ReadJSON(i); err != nil {
				i.ReportError("Field PodAffinityTerm", err.Error())
				return false
			}
			return true
		case "weight":
			s.Weight = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPICoreV1WindowsSecurityContextOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.GmsaCredentialSpec.Set {
		field.Write("gmsaCredentialSpec")
		s.GmsaCredentialSpec.WriteJSON(j)
	}
	if s.GmsaCredentialSpecName.Set {
		field.Write("gmsaCredentialSpecName")
		s.GmsaCredentialSpecName.WriteJSON(j)
	}
	if s.HostProcess.Set {
		field.Write("hostProcess")
		s.HostProcess.WriteJSON(j)
	}
	if s.RunAsUserName.Set {
		field.Write("runAsUserName")
		s.RunAsUserName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPICoreV1WindowsSecurityContextOptions json value to io.Writer.
func (s IoK8sAPICoreV1WindowsSecurityContextOptions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPICoreV1WindowsSecurityContextOptions json value from io.Reader.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPICoreV1WindowsSecurityContextOptions from json stream.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "gmsaCredentialSpec":
			s.GmsaCredentialSpec.Reset()
			if err := s.GmsaCredentialSpec.ReadJSON(i); err != nil {
				i.ReportError("Field GmsaCredentialSpec", err.Error())
				return false
			}
			return true
		case "gmsaCredentialSpecName":
			s.GmsaCredentialSpecName.Reset()
			if err := s.GmsaCredentialSpecName.ReadJSON(i); err != nil {
				i.ReportError("Field GmsaCredentialSpecName", err.Error())
				return false
			}
			return true
		case "hostProcess":
			s.HostProcess.Reset()
			if err := s.HostProcess.ReadJSON(i); err != nil {
				i.ReportError("Field HostProcess", err.Error())
				return false
			}
			return true
		case "runAsUserName":
			s.RunAsUserName.Reset()
			if err := s.RunAsUserName.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsUserName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1Endpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "Addresses".
	// Unsupported kind "pointer" for field "Conditions".
	// Unsupported kind "pointer" for field "DeprecatedTopology".
	// Unsupported kind "pointer" for field "Hints".
	if s.Hostname.Set {
		field.Write("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.NodeName.Set {
		field.Write("nodeName")
		s.NodeName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "TargetRef".
	if s.Zone.Set {
		field.Write("zone")
		s.Zone.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1Endpoint json value to io.Writer.
func (s IoK8sAPIDiscoveryV1Endpoint) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1Endpoint json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1Endpoint) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1Endpoint from json stream.
func (s *IoK8sAPIDiscoveryV1Endpoint) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addresses":
			// Unsupported kind "array" for field "Addresses".
			i.Skip()
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "deprecatedTopology":
			// Unsupported kind "pointer" for field "DeprecatedTopology".
			i.Skip()
			return true
		case "hints":
			// Unsupported kind "pointer" for field "Hints".
			i.Skip()
			return true
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				i.ReportError("Field Hostname", err.Error())
				return false
			}
			return true
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				i.ReportError("Field NodeName", err.Error())
				return false
			}
			return true
		case "targetRef":
			// Unsupported kind "pointer" for field "TargetRef".
			i.Skip()
			return true
		case "zone":
			s.Zone.Reset()
			if err := s.Zone.ReadJSON(i); err != nil {
				i.ReportError("Field Zone", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointConditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Ready.Set {
		field.Write("ready")
		s.Ready.WriteJSON(j)
	}
	if s.Serving.Set {
		field.Write("serving")
		s.Serving.WriteJSON(j)
	}
	if s.Terminating.Set {
		field.Write("terminating")
		s.Terminating.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1EndpointConditions json value to io.Writer.
func (s IoK8sAPIDiscoveryV1EndpointConditions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1EndpointConditions json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointConditions from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ready":
			s.Ready.Reset()
			if err := s.Ready.ReadJSON(i); err != nil {
				i.ReportError("Field Ready", err.Error())
				return false
			}
			return true
		case "serving":
			s.Serving.Reset()
			if err := s.Serving.ReadJSON(i); err != nil {
				i.ReportError("Field Serving", err.Error())
				return false
			}
			return true
		case "terminating":
			s.Terminating.Reset()
			if err := s.Terminating.ReadJSON(i); err != nil {
				i.ReportError("Field Terminating", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointHints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ForZones".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1EndpointHints json value to io.Writer.
func (s IoK8sAPIDiscoveryV1EndpointHints) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1EndpointHints json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1EndpointHints) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointHints from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointHints) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "forZones":
			// Unsupported kind "pointer" for field "ForZones".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AppProtocol.Set {
		field.Write("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Port.Set {
		field.Write("port")
		s.Port.WriteJSON(j)
	}
	if s.Protocol.Set {
		field.Write("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1EndpointPort json value to io.Writer.
func (s IoK8sAPIDiscoveryV1EndpointPort) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1EndpointPort json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1EndpointPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointPort from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				i.ReportError("Field AppProtocol", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				i.ReportError("Field Port", err.Error())
				return false
			}
			return true
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointSlice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("addressType")
	j.WriteString(s.AddressType)
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Endpoints".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Ports".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1EndpointSlice json value to io.Writer.
func (s IoK8sAPIDiscoveryV1EndpointSlice) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1EndpointSlice json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointSlice from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addressType":
			s.AddressType = i.ReadString()
			return i.Error == nil
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "endpoints":
			// Unsupported kind "array" for field "Endpoints".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "ports":
			// Unsupported kind "pointer" for field "Ports".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1EndpointSliceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1EndpointSliceList json value to io.Writer.
func (s IoK8sAPIDiscoveryV1EndpointSliceList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1EndpointSliceList json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1EndpointSliceList from json stream.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1ForZone) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1ForZone json value to io.Writer.
func (s IoK8sAPIDiscoveryV1ForZone) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1ForZone json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1ForZone) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1ForZone from json stream.
func (s *IoK8sAPIDiscoveryV1ForZone) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1Endpoint) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "Addresses".
	// Unsupported kind "pointer" for field "Conditions".
	// Unsupported kind "pointer" for field "Hints".
	if s.Hostname.Set {
		field.Write("hostname")
		s.Hostname.WriteJSON(j)
	}
	if s.NodeName.Set {
		field.Write("nodeName")
		s.NodeName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "TargetRef".
	// Unsupported kind "pointer" for field "Topology".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1Endpoint json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1Endpoint) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1Endpoint json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1Endpoint from json stream.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addresses":
			// Unsupported kind "array" for field "Addresses".
			i.Skip()
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "hints":
			// Unsupported kind "pointer" for field "Hints".
			i.Skip()
			return true
		case "hostname":
			s.Hostname.Reset()
			if err := s.Hostname.ReadJSON(i); err != nil {
				i.ReportError("Field Hostname", err.Error())
				return false
			}
			return true
		case "nodeName":
			s.NodeName.Reset()
			if err := s.NodeName.ReadJSON(i); err != nil {
				i.ReportError("Field NodeName", err.Error())
				return false
			}
			return true
		case "targetRef":
			// Unsupported kind "pointer" for field "TargetRef".
			i.Skip()
			return true
		case "topology":
			// Unsupported kind "pointer" for field "Topology".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointConditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Ready.Set {
		field.Write("ready")
		s.Ready.WriteJSON(j)
	}
	if s.Serving.Set {
		field.Write("serving")
		s.Serving.WriteJSON(j)
	}
	if s.Terminating.Set {
		field.Write("terminating")
		s.Terminating.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1EndpointConditions json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1EndpointConditions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1EndpointConditions json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointConditions from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ready":
			s.Ready.Reset()
			if err := s.Ready.ReadJSON(i); err != nil {
				i.ReportError("Field Ready", err.Error())
				return false
			}
			return true
		case "serving":
			s.Serving.Reset()
			if err := s.Serving.ReadJSON(i); err != nil {
				i.ReportError("Field Serving", err.Error())
				return false
			}
			return true
		case "terminating":
			s.Terminating.Reset()
			if err := s.Terminating.ReadJSON(i); err != nil {
				i.ReportError("Field Terminating", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointHints) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ForZones".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1EndpointHints json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1EndpointHints) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1EndpointHints json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1EndpointHints) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointHints from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointHints) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "forZones":
			// Unsupported kind "pointer" for field "ForZones".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AppProtocol.Set {
		field.Write("appProtocol")
		s.AppProtocol.WriteJSON(j)
	}
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Port.Set {
		field.Write("port")
		s.Port.WriteJSON(j)
	}
	if s.Protocol.Set {
		field.Write("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1EndpointPort json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1EndpointPort) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1EndpointPort json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointPort from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "appProtocol":
			s.AppProtocol.Reset()
			if err := s.AppProtocol.ReadJSON(i); err != nil {
				i.ReportError("Field AppProtocol", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				i.ReportError("Field Port", err.Error())
				return false
			}
			return true
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointSlice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("addressType")
	j.WriteString(s.AddressType)
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Endpoints".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Ports".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1EndpointSlice json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1EndpointSlice) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1EndpointSlice json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointSlice from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "addressType":
			s.AddressType = i.ReadString()
			return i.Error == nil
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "endpoints":
			// Unsupported kind "array" for field "Endpoints".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "ports":
			// Unsupported kind "pointer" for field "Ports".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1EndpointSliceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1EndpointSliceList json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1EndpointSliceList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1EndpointSliceList json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1EndpointSliceList from json stream.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIDiscoveryV1beta1ForZone) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIDiscoveryV1beta1ForZone json value to io.Writer.
func (s IoK8sAPIDiscoveryV1beta1ForZone) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIDiscoveryV1beta1ForZone json value from io.Reader.
func (s *IoK8sAPIDiscoveryV1beta1ForZone) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIDiscoveryV1beta1ForZone from json stream.
func (s *IoK8sAPIDiscoveryV1beta1ForZone) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Action.Set {
		field.Write("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.DeprecatedCount.Set {
		field.Write("deprecatedCount")
		s.DeprecatedCount.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "DeprecatedFirstTimestamp".
	// Unsupported kind "pointer" for field "DeprecatedLastTimestamp".
	// Unsupported kind "pointer" for field "DeprecatedSource".
	// Unsupported kind "alias" for field "EventTime".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	if s.Note.Set {
		field.Write("note")
		s.Note.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Regarding".
	// Unsupported kind "pointer" for field "Related".
	if s.ReportingController.Set {
		field.Write("reportingController")
		s.ReportingController.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		field.Write("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Series".
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1Event json value to io.Writer.
func (s IoK8sAPIEventsV1Event) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1Event json value from io.Reader.
func (s *IoK8sAPIEventsV1Event) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1Event from json stream.
func (s *IoK8sAPIEventsV1Event) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(i); err != nil {
				i.ReportError("Field Action", err.Error())
				return false
			}
			return true
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "deprecatedCount":
			s.DeprecatedCount.Reset()
			if err := s.DeprecatedCount.ReadJSON(i); err != nil {
				i.ReportError("Field DeprecatedCount", err.Error())
				return false
			}
			return true
		case "deprecatedFirstTimestamp":
			// Unsupported kind "pointer" for field "DeprecatedFirstTimestamp".
			i.Skip()
			return true
		case "deprecatedLastTimestamp":
			// Unsupported kind "pointer" for field "DeprecatedLastTimestamp".
			i.Skip()
			return true
		case "deprecatedSource":
			// Unsupported kind "pointer" for field "DeprecatedSource".
			i.Skip()
			return true
		case "eventTime":
			// Unsupported kind "alias" for field "EventTime".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(i); err != nil {
				i.ReportError("Field Note", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "regarding":
			// Unsupported kind "pointer" for field "Regarding".
			i.Skip()
			return true
		case "related":
			// Unsupported kind "pointer" for field "Related".
			i.Skip()
			return true
		case "reportingController":
			s.ReportingController.Reset()
			if err := s.ReportingController.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingController", err.Error())
				return false
			}
			return true
		case "reportingInstance":
			s.ReportingInstance.Reset()
			if err := s.ReportingInstance.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingInstance", err.Error())
				return false
			}
			return true
		case "series":
			// Unsupported kind "pointer" for field "Series".
			i.Skip()
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1EventList json value to io.Writer.
func (s IoK8sAPIEventsV1EventList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1EventList json value from io.Reader.
func (s *IoK8sAPIEventsV1EventList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1EventList from json stream.
func (s *IoK8sAPIEventsV1EventList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("count")
	j.WriteInt32(s.Count)
	// Unsupported kind "alias" for field "LastObservedTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1EventSeries json value to io.Writer.
func (s IoK8sAPIEventsV1EventSeries) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1EventSeries json value from io.Reader.
func (s *IoK8sAPIEventsV1EventSeries) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1EventSeries from json stream.
func (s *IoK8sAPIEventsV1EventSeries) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "count":
			s.Count = i.ReadInt32()
			return i.Error == nil
		case "lastObservedTime":
			// Unsupported kind "alias" for field "LastObservedTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1Event) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Action.Set {
		field.Write("action")
		s.Action.WriteJSON(j)
	}
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.DeprecatedCount.Set {
		field.Write("deprecatedCount")
		s.DeprecatedCount.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "DeprecatedFirstTimestamp".
	// Unsupported kind "pointer" for field "DeprecatedLastTimestamp".
	// Unsupported kind "pointer" for field "DeprecatedSource".
	// Unsupported kind "alias" for field "EventTime".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	if s.Note.Set {
		field.Write("note")
		s.Note.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Regarding".
	// Unsupported kind "pointer" for field "Related".
	if s.ReportingController.Set {
		field.Write("reportingController")
		s.ReportingController.WriteJSON(j)
	}
	if s.ReportingInstance.Set {
		field.Write("reportingInstance")
		s.ReportingInstance.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Series".
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1beta1Event json value to io.Writer.
func (s IoK8sAPIEventsV1beta1Event) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1beta1Event json value from io.Reader.
func (s *IoK8sAPIEventsV1beta1Event) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1beta1Event from json stream.
func (s *IoK8sAPIEventsV1beta1Event) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "action":
			s.Action.Reset()
			if err := s.Action.ReadJSON(i); err != nil {
				i.ReportError("Field Action", err.Error())
				return false
			}
			return true
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "deprecatedCount":
			s.DeprecatedCount.Reset()
			if err := s.DeprecatedCount.ReadJSON(i); err != nil {
				i.ReportError("Field DeprecatedCount", err.Error())
				return false
			}
			return true
		case "deprecatedFirstTimestamp":
			// Unsupported kind "pointer" for field "DeprecatedFirstTimestamp".
			i.Skip()
			return true
		case "deprecatedLastTimestamp":
			// Unsupported kind "pointer" for field "DeprecatedLastTimestamp".
			i.Skip()
			return true
		case "deprecatedSource":
			// Unsupported kind "pointer" for field "DeprecatedSource".
			i.Skip()
			return true
		case "eventTime":
			// Unsupported kind "alias" for field "EventTime".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "note":
			s.Note.Reset()
			if err := s.Note.ReadJSON(i); err != nil {
				i.ReportError("Field Note", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "regarding":
			// Unsupported kind "pointer" for field "Regarding".
			i.Skip()
			return true
		case "related":
			// Unsupported kind "pointer" for field "Related".
			i.Skip()
			return true
		case "reportingController":
			s.ReportingController.Reset()
			if err := s.ReportingController.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingController", err.Error())
				return false
			}
			return true
		case "reportingInstance":
			s.ReportingInstance.Reset()
			if err := s.ReportingInstance.ReadJSON(i); err != nil {
				i.ReportError("Field ReportingInstance", err.Error())
				return false
			}
			return true
		case "series":
			// Unsupported kind "pointer" for field "Series".
			i.Skip()
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1EventList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1beta1EventList json value to io.Writer.
func (s IoK8sAPIEventsV1beta1EventList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1beta1EventList json value from io.Reader.
func (s *IoK8sAPIEventsV1beta1EventList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1beta1EventList from json stream.
func (s *IoK8sAPIEventsV1beta1EventList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIEventsV1beta1EventSeries) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("count")
	j.WriteInt32(s.Count)
	// Unsupported kind "alias" for field "LastObservedTime".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIEventsV1beta1EventSeries json value to io.Writer.
func (s IoK8sAPIEventsV1beta1EventSeries) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIEventsV1beta1EventSeries json value from io.Reader.
func (s *IoK8sAPIEventsV1beta1EventSeries) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIEventsV1beta1EventSeries from json stream.
func (s *IoK8sAPIEventsV1beta1EventSeries) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "count":
			s.Count = i.ReadInt32()
			return i.Error == nil
		case "lastObservedTime":
			// Unsupported kind "alias" for field "LastObservedTime".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchema) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowSchema json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchema) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowSchema json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchema from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		field.Write("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowSchemaList json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowSchemaList json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "DistinguisherMethod".
	if s.MatchingPrecedence.Set {
		field.Write("matchingPrecedence")
		s.MatchingPrecedence.WriteJSON(j)
	}
	field.Write("priorityLevelConfiguration")
	s.PriorityLevelConfiguration.WriteJSON(j)
	// Unsupported kind "pointer" for field "Rules".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "distinguisherMethod":
			// Unsupported kind "pointer" for field "DistinguisherMethod".
			i.Skip()
			return true
		case "matchingPrecedence":
			s.MatchingPrecedence.Reset()
			if err := s.MatchingPrecedence.ReadJSON(i); err != nil {
				i.ReportError("Field MatchingPrecedence", err.Error())
				return false
			}
			return true
		case "priorityLevelConfiguration":
			if err := s.PriorityLevelConfiguration.ReadJSON(i); err != nil {
				i.ReportError("Field PriorityLevelConfiguration", err.Error())
				return false
			}
			return true
		case "rules":
			// Unsupported kind "pointer" for field "Rules".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Conditions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1GroupSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1GroupSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1GroupSubject) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1GroupSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1GroupSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1GroupSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1GroupSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1LimitResponse) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Queuing".
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1LimitResponse json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1LimitResponse) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1LimitResponse json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1LimitResponse) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1LimitResponse from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1LimitResponse) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "queuing":
			// Unsupported kind "pointer" for field "Queuing".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AssuredConcurrencyShares.Set {
		field.Write("assuredConcurrencyShares")
		s.AssuredConcurrencyShares.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "LimitResponse".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "assuredConcurrencyShares":
			s.AssuredConcurrencyShares.Reset()
			if err := s.AssuredConcurrencyShares.ReadJSON(i); err != nil {
				i.ReportError("Field AssuredConcurrencyShares", err.Error())
				return false
			}
			return true
		case "limitResponse":
			// Unsupported kind "pointer" for field "LimitResponse".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "NonResourceURLs".
	// Unsupported kind "array" for field "Verbs".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceURLs":
			// Unsupported kind "array" for field "NonResourceURLs".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "NonResourceRules".
	// Unsupported kind "pointer" for field "ResourceRules".
	// Unsupported kind "array" for field "Subjects".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceRules":
			// Unsupported kind "pointer" for field "NonResourceRules".
			i.Skip()
			return true
		case "resourceRules":
			// Unsupported kind "pointer" for field "ResourceRules".
			i.Skip()
			return true
		case "subjects":
			// Unsupported kind "array" for field "Subjects".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		field.Write("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Limited".
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limited":
			// Unsupported kind "pointer" for field "Limited".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Conditions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.HandSize.Set {
		field.Write("handSize")
		s.HandSize.WriteJSON(j)
	}
	if s.QueueLengthLimit.Set {
		field.Write("queueLengthLimit")
		s.QueueLengthLimit.WriteJSON(j)
	}
	if s.Queues.Set {
		field.Write("queues")
		s.Queues.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1QueuingConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1QueuingConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1QueuingConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "handSize":
			s.HandSize.Reset()
			if err := s.HandSize.ReadJSON(i); err != nil {
				i.ReportError("Field HandSize", err.Error())
				return false
			}
			return true
		case "queueLengthLimit":
			s.QueueLengthLimit.Reset()
			if err := s.QueueLengthLimit.ReadJSON(i); err != nil {
				i.ReportError("Field QueueLengthLimit", err.Error())
				return false
			}
			return true
		case "queues":
			s.Queues.Reset()
			if err := s.Queues.ReadJSON(i); err != nil {
				i.ReportError("Field Queues", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "ApiGroups".
	if s.ClusterScope.Set {
		field.Write("clusterScope")
		s.ClusterScope.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Namespaces".
	// Unsupported kind "array" for field "Resources".
	// Unsupported kind "array" for field "Verbs".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroups":
			// Unsupported kind "array" for field "ApiGroups".
			i.Skip()
			return true
		case "clusterScope":
			s.ClusterScope.Reset()
			if err := s.ClusterScope.ReadJSON(i); err != nil {
				i.ReportError("Field ClusterScope", err.Error())
				return false
			}
			return true
		case "namespaces":
			// Unsupported kind "pointer" for field "Namespaces".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "array" for field "Resources".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("namespace")
	j.WriteString(s.Namespace)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Group".
	field.Write("kind")
	j.WriteString(s.Kind)
	// Unsupported kind "pointer" for field "ServiceAccount".
	// Unsupported kind "pointer" for field "User".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1Subject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1Subject) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1Subject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1Subject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "group":
			// Unsupported kind "pointer" for field "Group".
			i.Skip()
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "serviceAccount":
			// Unsupported kind "pointer" for field "ServiceAccount".
			i.Skip()
			return true
		case "user":
			// Unsupported kind "pointer" for field "User".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta1UserSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta1UserSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta1UserSubject) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta1UserSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta1UserSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta1UserSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta1UserSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchema) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowSchema json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchema) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowSchema json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchema from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		field.Write("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowSchemaList json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowSchemaList json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "DistinguisherMethod".
	if s.MatchingPrecedence.Set {
		field.Write("matchingPrecedence")
		s.MatchingPrecedence.WriteJSON(j)
	}
	field.Write("priorityLevelConfiguration")
	s.PriorityLevelConfiguration.WriteJSON(j)
	// Unsupported kind "pointer" for field "Rules".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "distinguisherMethod":
			// Unsupported kind "pointer" for field "DistinguisherMethod".
			i.Skip()
			return true
		case "matchingPrecedence":
			s.MatchingPrecedence.Reset()
			if err := s.MatchingPrecedence.ReadJSON(i); err != nil {
				i.ReportError("Field MatchingPrecedence", err.Error())
				return false
			}
			return true
		case "priorityLevelConfiguration":
			if err := s.PriorityLevelConfiguration.ReadJSON(i); err != nil {
				i.ReportError("Field PriorityLevelConfiguration", err.Error())
				return false
			}
			return true
		case "rules":
			// Unsupported kind "pointer" for field "Rules".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Conditions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2GroupSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2GroupSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2GroupSubject) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2GroupSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2GroupSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2GroupSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2GroupSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2LimitResponse) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Queuing".
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2LimitResponse json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2LimitResponse) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2LimitResponse json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2LimitResponse) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2LimitResponse from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2LimitResponse) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "queuing":
			// Unsupported kind "pointer" for field "Queuing".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AssuredConcurrencyShares.Set {
		field.Write("assuredConcurrencyShares")
		s.AssuredConcurrencyShares.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "LimitResponse".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "assuredConcurrencyShares":
			s.AssuredConcurrencyShares.Reset()
			if err := s.AssuredConcurrencyShares.ReadJSON(i); err != nil {
				i.ReportError("Field AssuredConcurrencyShares", err.Error())
				return false
			}
			return true
		case "limitResponse":
			// Unsupported kind "pointer" for field "LimitResponse".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "NonResourceURLs".
	// Unsupported kind "array" for field "Verbs".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceURLs":
			// Unsupported kind "array" for field "NonResourceURLs".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "NonResourceRules".
	// Unsupported kind "pointer" for field "ResourceRules".
	// Unsupported kind "array" for field "Subjects".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nonResourceRules":
			// Unsupported kind "pointer" for field "NonResourceRules".
			i.Skip()
			return true
		case "resourceRules":
			// Unsupported kind "pointer" for field "ResourceRules".
			i.Skip()
			return true
		case "subjects":
			// Unsupported kind "array" for field "Subjects".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		field.Write("status")
		s.Status.WriteJSON(j)
	}
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Limited".
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limited":
			// Unsupported kind "pointer" for field "Limited".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Conditions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.HandSize.Set {
		field.Write("handSize")
		s.HandSize.WriteJSON(j)
	}
	if s.QueueLengthLimit.Set {
		field.Write("queueLengthLimit")
		s.QueueLengthLimit.WriteJSON(j)
	}
	if s.Queues.Set {
		field.Write("queues")
		s.Queues.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2QueuingConfiguration json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2QueuingConfiguration json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2QueuingConfiguration from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "handSize":
			s.HandSize.Reset()
			if err := s.HandSize.ReadJSON(i); err != nil {
				i.ReportError("Field HandSize", err.Error())
				return false
			}
			return true
		case "queueLengthLimit":
			s.QueueLengthLimit.Reset()
			if err := s.QueueLengthLimit.ReadJSON(i); err != nil {
				i.ReportError("Field QueueLengthLimit", err.Error())
				return false
			}
			return true
		case "queues":
			s.Queues.Reset()
			if err := s.Queues.ReadJSON(i); err != nil {
				i.ReportError("Field Queues", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "ApiGroups".
	if s.ClusterScope.Set {
		field.Write("clusterScope")
		s.ClusterScope.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Namespaces".
	// Unsupported kind "array" for field "Resources".
	// Unsupported kind "array" for field "Verbs".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroups":
			// Unsupported kind "array" for field "ApiGroups".
			i.Skip()
			return true
		case "clusterScope":
			s.ClusterScope.Reset()
			if err := s.ClusterScope.ReadJSON(i); err != nil {
				i.ReportError("Field ClusterScope", err.Error())
				return false
			}
			return true
		case "namespaces":
			// Unsupported kind "pointer" for field "Namespaces".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "array" for field "Resources".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("namespace")
	j.WriteString(s.Namespace)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Group".
	field.Write("kind")
	j.WriteString(s.Kind)
	// Unsupported kind "pointer" for field "ServiceAccount".
	// Unsupported kind "pointer" for field "User".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2Subject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2Subject) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2Subject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2Subject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "group":
			// Unsupported kind "pointer" for field "Group".
			i.Skip()
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "serviceAccount":
			// Unsupported kind "pointer" for field "ServiceAccount".
			i.Skip()
			return true
		case "user":
			// Unsupported kind "pointer" for field "User".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIFlowcontrolV1beta2UserSubject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIFlowcontrolV1beta2UserSubject json value to io.Writer.
func (s IoK8sAPIFlowcontrolV1beta2UserSubject) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIFlowcontrolV1beta2UserSubject json value from io.Reader.
func (s *IoK8sAPIFlowcontrolV1beta2UserSubject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIFlowcontrolV1beta2UserSubject from json stream.
func (s *IoK8sAPIFlowcontrolV1beta2UserSubject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1HTTPIngressPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("backend")
	s.Backend.WriteJSON(j)
	if s.Path.Set {
		field.Write("path")
		s.Path.WriteJSON(j)
	}
	field.Write("pathType")
	j.WriteString(s.PathType)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1HTTPIngressPath json value to io.Writer.
func (s IoK8sAPINetworkingV1HTTPIngressPath) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1HTTPIngressPath json value from io.Reader.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1HTTPIngressPath from json stream.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "backend":
			if err := s.Backend.ReadJSON(i); err != nil {
				i.ReportError("Field Backend", err.Error())
				return false
			}
			return true
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "pathType":
			s.PathType = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1HTTPIngressRuleValue) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "Paths".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1HTTPIngressRuleValue json value to io.Writer.
func (s IoK8sAPINetworkingV1HTTPIngressRuleValue) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1HTTPIngressRuleValue json value from io.Reader.
func (s *IoK8sAPINetworkingV1HTTPIngressRuleValue) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1HTTPIngressRuleValue from json stream.
func (s *IoK8sAPINetworkingV1HTTPIngressRuleValue) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "paths":
			// Unsupported kind "array" for field "Paths".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IPBlock) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("cidr")
	j.WriteString(s.Cidr)
	// Unsupported kind "pointer" for field "Except".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IPBlock json value to io.Writer.
func (s IoK8sAPINetworkingV1IPBlock) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IPBlock json value from io.Reader.
func (s *IoK8sAPINetworkingV1IPBlock) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IPBlock from json stream.
func (s *IoK8sAPINetworkingV1IPBlock) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cidr":
			s.Cidr = i.ReadString()
			return i.Error == nil
		case "except":
			// Unsupported kind "pointer" for field "Except".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1Ingress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1Ingress json value to io.Writer.
func (s IoK8sAPINetworkingV1Ingress) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1Ingress json value from io.Reader.
func (s *IoK8sAPINetworkingV1Ingress) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1Ingress from json stream.
func (s *IoK8sAPINetworkingV1Ingress) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressBackend) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Resource".
	// Unsupported kind "pointer" for field "Service".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressBackend json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressBackend) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressBackend json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressBackend) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressBackend from json stream.
func (s *IoK8sAPINetworkingV1IngressBackend) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "resource":
			// Unsupported kind "pointer" for field "Resource".
			i.Skip()
			return true
		case "service":
			// Unsupported kind "pointer" for field "Service".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressClass json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressClass) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressClass json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClass from json stream.
func (s *IoK8sAPINetworkingV1IngressClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressClassList json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressClassList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressClassList json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassList from json stream.
func (s *IoK8sAPINetworkingV1IngressClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassParametersReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiGroup.Set {
		field.Write("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	field.Write("kind")
	j.WriteString(s.Kind)
	field.Write("name")
	j.WriteString(s.Name)
	if s.Namespace.Set {
		field.Write("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Scope.Set {
		field.Write("scope")
		s.Scope.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressClassParametersReference json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressClassParametersReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressClassParametersReference json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassParametersReference from json stream.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroup":
			s.ApiGroup.Reset()
			if err := s.ApiGroup.ReadJSON(i); err != nil {
				i.ReportError("Field ApiGroup", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		case "scope":
			s.Scope.Reset()
			if err := s.Scope.ReadJSON(i); err != nil {
				i.ReportError("Field Scope", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressClassSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Controller.Set {
		field.Write("controller")
		s.Controller.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Parameters".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressClassSpec json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressClassSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressClassSpec json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressClassSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressClassSpec from json stream.
func (s *IoK8sAPINetworkingV1IngressClassSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "controller":
			s.Controller.Reset()
			if err := s.Controller.ReadJSON(i); err != nil {
				i.ReportError("Field Controller", err.Error())
				return false
			}
			return true
		case "parameters":
			// Unsupported kind "pointer" for field "Parameters".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressList json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressList json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressList from json stream.
func (s *IoK8sAPINetworkingV1IngressList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "HTTP".
	if s.Host.Set {
		field.Write("host")
		s.Host.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressRule json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressRule) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressRule json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressRule from json stream.
func (s *IoK8sAPINetworkingV1IngressRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "http":
			// Unsupported kind "pointer" for field "HTTP".
			i.Skip()
			return true
		case "host":
			s.Host.Reset()
			if err := s.Host.ReadJSON(i); err != nil {
				i.ReportError("Field Host", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressServiceBackend) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	// Unsupported kind "pointer" for field "Port".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressServiceBackend json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressServiceBackend) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressServiceBackend json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressServiceBackend) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressServiceBackend from json stream.
func (s *IoK8sAPINetworkingV1IngressServiceBackend) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "port":
			// Unsupported kind "pointer" for field "Port".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "DefaultBackend".
	if s.IngressClassName.Set {
		field.Write("ingressClassName")
		s.IngressClassName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Rules".
	// Unsupported kind "pointer" for field "TLS".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressSpec json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressSpec json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressSpec from json stream.
func (s *IoK8sAPINetworkingV1IngressSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "defaultBackend":
			// Unsupported kind "pointer" for field "DefaultBackend".
			i.Skip()
			return true
		case "ingressClassName":
			s.IngressClassName.Reset()
			if err := s.IngressClassName.ReadJSON(i); err != nil {
				i.ReportError("Field IngressClassName", err.Error())
				return false
			}
			return true
		case "rules":
			// Unsupported kind "pointer" for field "Rules".
			i.Skip()
			return true
		case "tls":
			// Unsupported kind "pointer" for field "TLS".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LoadBalancer".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressStatus json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressStatus json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressStatus from json stream.
func (s *IoK8sAPINetworkingV1IngressStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "loadBalancer":
			// Unsupported kind "pointer" for field "LoadBalancer".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1IngressTLS) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Hosts".
	if s.SecretName.Set {
		field.Write("secretName")
		s.SecretName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1IngressTLS json value to io.Writer.
func (s IoK8sAPINetworkingV1IngressTLS) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1IngressTLS json value from io.Reader.
func (s *IoK8sAPINetworkingV1IngressTLS) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1IngressTLS from json stream.
func (s *IoK8sAPINetworkingV1IngressTLS) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "hosts":
			// Unsupported kind "pointer" for field "Hosts".
			i.Skip()
			return true
		case "secretName":
			s.SecretName.Reset()
			if err := s.SecretName.ReadJSON(i); err != nil {
				i.ReportError("Field SecretName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicy json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicy) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicy json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicy from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyEgressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Ports".
	// Unsupported kind "pointer" for field "To".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicyEgressRule json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicyEgressRule) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicyEgressRule json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicyEgressRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyEgressRule from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyEgressRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ports":
			// Unsupported kind "pointer" for field "Ports".
			i.Skip()
			return true
		case "to":
			// Unsupported kind "pointer" for field "To".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyIngressRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "From".
	// Unsupported kind "pointer" for field "Ports".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicyIngressRule json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicyIngressRule) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicyIngressRule json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicyIngressRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyIngressRule from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyIngressRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "from":
			// Unsupported kind "pointer" for field "From".
			i.Skip()
			return true
		case "ports":
			// Unsupported kind "pointer" for field "Ports".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicyList json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicyList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicyList json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyList from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyPeer) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "IpBlock".
	// Unsupported kind "pointer" for field "NamespaceSelector".
	// Unsupported kind "pointer" for field "PodSelector".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicyPeer json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicyPeer) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicyPeer json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyPeer from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ipBlock":
			// Unsupported kind "pointer" for field "IpBlock".
			i.Skip()
			return true
		case "namespaceSelector":
			// Unsupported kind "pointer" for field "NamespaceSelector".
			i.Skip()
			return true
		case "podSelector":
			// Unsupported kind "pointer" for field "PodSelector".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicyPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.EndPort.Set {
		field.Write("endPort")
		s.EndPort.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Port".
	if s.Protocol.Set {
		field.Write("protocol")
		s.Protocol.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicyPort json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicyPort) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicyPort json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicyPort from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "endPort":
			s.EndPort.Reset()
			if err := s.EndPort.ReadJSON(i); err != nil {
				i.ReportError("Field EndPort", err.Error())
				return false
			}
			return true
		case "port":
			// Unsupported kind "pointer" for field "Port".
			i.Skip()
			return true
		case "protocol":
			s.Protocol.Reset()
			if err := s.Protocol.ReadJSON(i); err != nil {
				i.ReportError("Field Protocol", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1NetworkPolicySpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Egress".
	// Unsupported kind "pointer" for field "Ingress".
	field.Write("podSelector")
	s.PodSelector.WriteJSON(j)
	// Unsupported kind "pointer" for field "PolicyTypes".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1NetworkPolicySpec json value to io.Writer.
func (s IoK8sAPINetworkingV1NetworkPolicySpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1NetworkPolicySpec json value from io.Reader.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1NetworkPolicySpec from json stream.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "egress":
			// Unsupported kind "pointer" for field "Egress".
			i.Skip()
			return true
		case "ingress":
			// Unsupported kind "pointer" for field "Ingress".
			i.Skip()
			return true
		case "podSelector":
			if err := s.PodSelector.ReadJSON(i); err != nil {
				i.ReportError("Field PodSelector", err.Error())
				return false
			}
			return true
		case "policyTypes":
			// Unsupported kind "pointer" for field "PolicyTypes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINetworkingV1ServiceBackendPort) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Number.Set {
		field.Write("number")
		s.Number.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINetworkingV1ServiceBackendPort json value to io.Writer.
func (s IoK8sAPINetworkingV1ServiceBackendPort) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINetworkingV1ServiceBackendPort json value from io.Reader.
func (s *IoK8sAPINetworkingV1ServiceBackendPort) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINetworkingV1ServiceBackendPort from json stream.
func (s *IoK8sAPINetworkingV1ServiceBackendPort) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "number":
			s.Number.Reset()
			if err := s.Number.ReadJSON(i); err != nil {
				i.ReportError("Field Number", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "PodFixed".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1Overhead json value to io.Writer.
func (s IoK8sAPINodeV1Overhead) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1Overhead json value from io.Reader.
func (s *IoK8sAPINodeV1Overhead) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1Overhead from json stream.
func (s *IoK8sAPINodeV1Overhead) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "podFixed":
			// Unsupported kind "pointer" for field "PodFixed".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	field.Write("handler")
	j.WriteString(s.Handler)
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Overhead".
	// Unsupported kind "pointer" for field "Scheduling".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1RuntimeClass json value to io.Writer.
func (s IoK8sAPINodeV1RuntimeClass) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1RuntimeClass json value from io.Reader.
func (s *IoK8sAPINodeV1RuntimeClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1RuntimeClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "handler":
			s.Handler = i.ReadString()
			return i.Error == nil
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "overhead":
			// Unsupported kind "pointer" for field "Overhead".
			i.Skip()
			return true
		case "scheduling":
			// Unsupported kind "pointer" for field "Scheduling".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1RuntimeClassList json value to io.Writer.
func (s IoK8sAPINodeV1RuntimeClassList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1RuntimeClassList json value from io.Reader.
func (s *IoK8sAPINodeV1RuntimeClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1RuntimeClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "NodeSelector".
	// Unsupported kind "pointer" for field "Tolerations".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1Scheduling json value to io.Writer.
func (s IoK8sAPINodeV1Scheduling) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1Scheduling json value from io.Reader.
func (s *IoK8sAPINodeV1Scheduling) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1Scheduling from json stream.
func (s *IoK8sAPINodeV1Scheduling) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nodeSelector":
			// Unsupported kind "pointer" for field "NodeSelector".
			i.Skip()
			return true
		case "tolerations":
			// Unsupported kind "pointer" for field "Tolerations".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "PodFixed".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1alpha1Overhead json value to io.Writer.
func (s IoK8sAPINodeV1alpha1Overhead) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1alpha1Overhead json value from io.Reader.
func (s *IoK8sAPINodeV1alpha1Overhead) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1alpha1Overhead from json stream.
func (s *IoK8sAPINodeV1alpha1Overhead) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "podFixed":
			// Unsupported kind "pointer" for field "PodFixed".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1alpha1RuntimeClass json value to io.Writer.
func (s IoK8sAPINodeV1alpha1RuntimeClass) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1alpha1RuntimeClass json value from io.Reader.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1alpha1RuntimeClassList json value to io.Writer.
func (s IoK8sAPINodeV1alpha1RuntimeClassList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1alpha1RuntimeClassList json value from io.Reader.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1RuntimeClassSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Overhead".
	field.Write("runtimeHandler")
	j.WriteString(s.RuntimeHandler)
	// Unsupported kind "pointer" for field "Scheduling".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1alpha1RuntimeClassSpec json value to io.Writer.
func (s IoK8sAPINodeV1alpha1RuntimeClassSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1alpha1RuntimeClassSpec json value from io.Reader.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1alpha1RuntimeClassSpec from json stream.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "overhead":
			// Unsupported kind "pointer" for field "Overhead".
			i.Skip()
			return true
		case "runtimeHandler":
			s.RuntimeHandler = i.ReadString()
			return i.Error == nil
		case "scheduling":
			// Unsupported kind "pointer" for field "Scheduling".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1alpha1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "NodeSelector".
	// Unsupported kind "pointer" for field "Tolerations".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1alpha1Scheduling json value to io.Writer.
func (s IoK8sAPINodeV1alpha1Scheduling) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1alpha1Scheduling json value from io.Reader.
func (s *IoK8sAPINodeV1alpha1Scheduling) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1alpha1Scheduling from json stream.
func (s *IoK8sAPINodeV1alpha1Scheduling) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nodeSelector":
			// Unsupported kind "pointer" for field "NodeSelector".
			i.Skip()
			return true
		case "tolerations":
			// Unsupported kind "pointer" for field "Tolerations".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1Overhead) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "PodFixed".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1beta1Overhead json value to io.Writer.
func (s IoK8sAPINodeV1beta1Overhead) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1beta1Overhead json value from io.Reader.
func (s *IoK8sAPINodeV1beta1Overhead) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1beta1Overhead from json stream.
func (s *IoK8sAPINodeV1beta1Overhead) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "podFixed":
			// Unsupported kind "pointer" for field "PodFixed".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1RuntimeClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	field.Write("handler")
	j.WriteString(s.Handler)
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Overhead".
	// Unsupported kind "pointer" for field "Scheduling".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1beta1RuntimeClass json value to io.Writer.
func (s IoK8sAPINodeV1beta1RuntimeClass) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1beta1RuntimeClass json value from io.Reader.
func (s *IoK8sAPINodeV1beta1RuntimeClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1beta1RuntimeClass from json stream.
func (s *IoK8sAPINodeV1beta1RuntimeClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "handler":
			s.Handler = i.ReadString()
			return i.Error == nil
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "overhead":
			// Unsupported kind "pointer" for field "Overhead".
			i.Skip()
			return true
		case "scheduling":
			// Unsupported kind "pointer" for field "Scheduling".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1RuntimeClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1beta1RuntimeClassList json value to io.Writer.
func (s IoK8sAPINodeV1beta1RuntimeClassList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1beta1RuntimeClassList json value from io.Reader.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1beta1RuntimeClassList from json stream.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPINodeV1beta1Scheduling) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "NodeSelector".
	// Unsupported kind "pointer" for field "Tolerations".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPINodeV1beta1Scheduling json value to io.Writer.
func (s IoK8sAPINodeV1beta1Scheduling) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPINodeV1beta1Scheduling json value from io.Reader.
func (s *IoK8sAPINodeV1beta1Scheduling) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPINodeV1beta1Scheduling from json stream.
func (s *IoK8sAPINodeV1beta1Scheduling) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "nodeSelector":
			// Unsupported kind "pointer" for field "NodeSelector".
			i.Skip()
			return true
		case "tolerations":
			// Unsupported kind "pointer" for field "Tolerations".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1PodDisruptionBudget json value to io.Writer.
func (s IoK8sAPIPolicyV1PodDisruptionBudget) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1PodDisruptionBudget json value from io.Reader.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudget from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1PodDisruptionBudgetList json value to io.Writer.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1PodDisruptionBudgetList json value from io.Reader.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetList from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "MaxUnavailable".
	// Unsupported kind "pointer" for field "MinAvailable".
	// Unsupported kind "pointer" for field "Selector".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1PodDisruptionBudgetSpec json value to io.Writer.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1PodDisruptionBudgetSpec json value from io.Reader.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetSpec from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxUnavailable":
			// Unsupported kind "pointer" for field "MaxUnavailable".
			i.Skip()
			return true
		case "minAvailable":
			// Unsupported kind "pointer" for field "MinAvailable".
			i.Skip()
			return true
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Conditions".
	field.Write("currentHealthy")
	j.WriteInt32(s.CurrentHealthy)
	field.Write("desiredHealthy")
	j.WriteInt32(s.DesiredHealthy)
	// Unsupported kind "pointer" for field "DisruptedPods".
	field.Write("disruptionsAllowed")
	j.WriteInt32(s.DisruptionsAllowed)
	field.Write("expectedPods")
	j.WriteInt32(s.ExpectedPods)
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1PodDisruptionBudgetStatus json value to io.Writer.
func (s IoK8sAPIPolicyV1PodDisruptionBudgetStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1PodDisruptionBudgetStatus json value from io.Reader.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1PodDisruptionBudgetStatus from json stream.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "currentHealthy":
			s.CurrentHealthy = i.ReadInt32()
			return i.Error == nil
		case "desiredHealthy":
			s.DesiredHealthy = i.ReadInt32()
			return i.Error == nil
		case "disruptedPods":
			// Unsupported kind "pointer" for field "DisruptedPods".
			i.Skip()
			return true
		case "disruptionsAllowed":
			s.DisruptionsAllowed = i.ReadInt32()
			return i.Error == nil
		case "expectedPods":
			s.ExpectedPods = i.ReadInt32()
			return i.Error == nil
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedCSIDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1AllowedCSIDriver json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1AllowedCSIDriver) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1AllowedCSIDriver json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1AllowedCSIDriver) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedCSIDriver from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedCSIDriver) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedFlexVolume) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("driver")
	j.WriteString(s.Driver)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1AllowedFlexVolume json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1AllowedFlexVolume) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1AllowedFlexVolume json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1AllowedFlexVolume) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedFlexVolume from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedFlexVolume) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "driver":
			s.Driver = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1AllowedHostPath) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.PathPrefix.Set {
		field.Write("pathPrefix")
		s.PathPrefix.WriteJSON(j)
	}
	if s.ReadOnly.Set {
		field.Write("readOnly")
		s.ReadOnly.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1AllowedHostPath json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1AllowedHostPath) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1AllowedHostPath json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1AllowedHostPath) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1AllowedHostPath from json stream.
func (s *IoK8sAPIPolicyV1beta1AllowedHostPath) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "pathPrefix":
			s.PathPrefix.Reset()
			if err := s.PathPrefix.ReadJSON(i); err != nil {
				i.ReportError("Field PathPrefix", err.Error())
				return false
			}
			return true
		case "readOnly":
			s.ReadOnly.Reset()
			if err := s.ReadOnly.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnly", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Ranges".
	if s.Rule.Set {
		field.Write("rule")
		s.Rule.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1FSGroupStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1FSGroupStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1FSGroupStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ranges":
			// Unsupported kind "pointer" for field "Ranges".
			i.Skip()
			return true
		case "rule":
			s.Rule.Reset()
			if err := s.Rule.ReadJSON(i); err != nil {
				i.ReportError("Field Rule", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1HostPortRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("max")
	j.WriteInt32(s.Max)
	field.Write("min")
	j.WriteInt32(s.Min)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1HostPortRange json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1HostPortRange) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1HostPortRange json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1HostPortRange) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1HostPortRange from json stream.
func (s *IoK8sAPIPolicyV1beta1HostPortRange) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "max":
			s.Max = i.ReadInt32()
			return i.Error == nil
		case "min":
			s.Min = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1IDRange) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("max")
	j.WriteInt64(s.Max)
	field.Write("min")
	j.WriteInt64(s.Min)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1IDRange json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1IDRange) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1IDRange json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1IDRange) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1IDRange from json stream.
func (s *IoK8sAPIPolicyV1beta1IDRange) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "max":
			s.Max = i.ReadInt64()
			return i.Error == nil
		case "min":
			s.Min = i.ReadInt64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudget) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodDisruptionBudget json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudget) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodDisruptionBudget json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudget from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodDisruptionBudgetList json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetList json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetList from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "MaxUnavailable".
	// Unsupported kind "pointer" for field "MinAvailable".
	// Unsupported kind "pointer" for field "Selector".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "maxUnavailable":
			// Unsupported kind "pointer" for field "MaxUnavailable".
			i.Skip()
			return true
		case "minAvailable":
			// Unsupported kind "pointer" for field "MinAvailable".
			i.Skip()
			return true
		case "selector":
			// Unsupported kind "pointer" for field "Selector".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Conditions".
	field.Write("currentHealthy")
	j.WriteInt32(s.CurrentHealthy)
	field.Write("desiredHealthy")
	j.WriteInt32(s.DesiredHealthy)
	// Unsupported kind "pointer" for field "DisruptedPods".
	field.Write("disruptionsAllowed")
	j.WriteInt32(s.DisruptionsAllowed)
	field.Write("expectedPods")
	j.WriteInt32(s.ExpectedPods)
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus from json stream.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "currentHealthy":
			s.CurrentHealthy = i.ReadInt32()
			return i.Error == nil
		case "desiredHealthy":
			s.DesiredHealthy = i.ReadInt32()
			return i.Error == nil
		case "disruptedPods":
			// Unsupported kind "pointer" for field "DisruptedPods".
			i.Skip()
			return true
		case "disruptionsAllowed":
			s.DisruptionsAllowed = i.ReadInt32()
			return i.Error == nil
		case "expectedPods":
			s.ExpectedPods = i.ReadInt32()
			return i.Error == nil
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicy) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodSecurityPolicy json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicy) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodSecurityPolicy json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicy from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicyList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodSecurityPolicyList json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicyList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodSecurityPolicyList json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicyList from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AllowPrivilegeEscalation.Set {
		field.Write("allowPrivilegeEscalation")
		s.AllowPrivilegeEscalation.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "AllowedCSIDrivers".
	// Unsupported kind "pointer" for field "AllowedCapabilities".
	// Unsupported kind "pointer" for field "AllowedFlexVolumes".
	// Unsupported kind "pointer" for field "AllowedHostPaths".
	// Unsupported kind "pointer" for field "AllowedProcMountTypes".
	// Unsupported kind "pointer" for field "AllowedUnsafeSysctls".
	// Unsupported kind "pointer" for field "DefaultAddCapabilities".
	if s.DefaultAllowPrivilegeEscalation.Set {
		field.Write("defaultAllowPrivilegeEscalation")
		s.DefaultAllowPrivilegeEscalation.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "ForbiddenSysctls".
	field.Write("fsGroup")
	s.FsGroup.WriteJSON(j)
	if s.HostIPC.Set {
		field.Write("hostIPC")
		s.HostIPC.WriteJSON(j)
	}
	if s.HostNetwork.Set {
		field.Write("hostNetwork")
		s.HostNetwork.WriteJSON(j)
	}
	if s.HostPID.Set {
		field.Write("hostPID")
		s.HostPID.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "HostPorts".
	if s.Privileged.Set {
		field.Write("privileged")
		s.Privileged.WriteJSON(j)
	}
	if s.ReadOnlyRootFilesystem.Set {
		field.Write("readOnlyRootFilesystem")
		s.ReadOnlyRootFilesystem.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "RequiredDropCapabilities".
	// Unsupported kind "pointer" for field "RunAsGroup".
	field.Write("runAsUser")
	s.RunAsUser.WriteJSON(j)
	// Unsupported kind "pointer" for field "RuntimeClass".
	field.Write("seLinux")
	s.SeLinux.WriteJSON(j)
	field.Write("supplementalGroups")
	s.SupplementalGroups.WriteJSON(j)
	// Unsupported kind "pointer" for field "Volumes".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1PodSecurityPolicySpec json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1PodSecurityPolicySpec json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1PodSecurityPolicySpec from json stream.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowPrivilegeEscalation":
			s.AllowPrivilegeEscalation.Reset()
			if err := s.AllowPrivilegeEscalation.ReadJSON(i); err != nil {
				i.ReportError("Field AllowPrivilegeEscalation", err.Error())
				return false
			}
			return true
		case "allowedCSIDrivers":
			// Unsupported kind "pointer" for field "AllowedCSIDrivers".
			i.Skip()
			return true
		case "allowedCapabilities":
			// Unsupported kind "pointer" for field "AllowedCapabilities".
			i.Skip()
			return true
		case "allowedFlexVolumes":
			// Unsupported kind "pointer" for field "AllowedFlexVolumes".
			i.Skip()
			return true
		case "allowedHostPaths":
			// Unsupported kind "pointer" for field "AllowedHostPaths".
			i.Skip()
			return true
		case "allowedProcMountTypes":
			// Unsupported kind "pointer" for field "AllowedProcMountTypes".
			i.Skip()
			return true
		case "allowedUnsafeSysctls":
			// Unsupported kind "pointer" for field "AllowedUnsafeSysctls".
			i.Skip()
			return true
		case "defaultAddCapabilities":
			// Unsupported kind "pointer" for field "DefaultAddCapabilities".
			i.Skip()
			return true
		case "defaultAllowPrivilegeEscalation":
			s.DefaultAllowPrivilegeEscalation.Reset()
			if err := s.DefaultAllowPrivilegeEscalation.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultAllowPrivilegeEscalation", err.Error())
				return false
			}
			return true
		case "forbiddenSysctls":
			// Unsupported kind "pointer" for field "ForbiddenSysctls".
			i.Skip()
			return true
		case "fsGroup":
			if err := s.FsGroup.ReadJSON(i); err != nil {
				i.ReportError("Field FsGroup", err.Error())
				return false
			}
			return true
		case "hostIPC":
			s.HostIPC.Reset()
			if err := s.HostIPC.ReadJSON(i); err != nil {
				i.ReportError("Field HostIPC", err.Error())
				return false
			}
			return true
		case "hostNetwork":
			s.HostNetwork.Reset()
			if err := s.HostNetwork.ReadJSON(i); err != nil {
				i.ReportError("Field HostNetwork", err.Error())
				return false
			}
			return true
		case "hostPID":
			s.HostPID.Reset()
			if err := s.HostPID.ReadJSON(i); err != nil {
				i.ReportError("Field HostPID", err.Error())
				return false
			}
			return true
		case "hostPorts":
			// Unsupported kind "pointer" for field "HostPorts".
			i.Skip()
			return true
		case "privileged":
			s.Privileged.Reset()
			if err := s.Privileged.ReadJSON(i); err != nil {
				i.ReportError("Field Privileged", err.Error())
				return false
			}
			return true
		case "readOnlyRootFilesystem":
			s.ReadOnlyRootFilesystem.Reset()
			if err := s.ReadOnlyRootFilesystem.ReadJSON(i); err != nil {
				i.ReportError("Field ReadOnlyRootFilesystem", err.Error())
				return false
			}
			return true
		case "requiredDropCapabilities":
			// Unsupported kind "pointer" for field "RequiredDropCapabilities".
			i.Skip()
			return true
		case "runAsGroup":
			// Unsupported kind "pointer" for field "RunAsGroup".
			i.Skip()
			return true
		case "runAsUser":
			if err := s.RunAsUser.ReadJSON(i); err != nil {
				i.ReportError("Field RunAsUser", err.Error())
				return false
			}
			return true
		case "runtimeClass":
			// Unsupported kind "pointer" for field "RuntimeClass".
			i.Skip()
			return true
		case "seLinux":
			if err := s.SeLinux.ReadJSON(i); err != nil {
				i.ReportError("Field SeLinux", err.Error())
				return false
			}
			return true
		case "supplementalGroups":
			if err := s.SupplementalGroups.ReadJSON(i); err != nil {
				i.ReportError("Field SupplementalGroups", err.Error())
				return false
			}
			return true
		case "volumes":
			// Unsupported kind "pointer" for field "Volumes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Ranges".
	field.Write("rule")
	j.WriteString(s.Rule)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ranges":
			// Unsupported kind "pointer" for field "Ranges".
			i.Skip()
			return true
		case "rule":
			s.Rule = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Ranges".
	field.Write("rule")
	j.WriteString(s.Rule)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ranges":
			// Unsupported kind "pointer" for field "Ranges".
			i.Skip()
			return true
		case "rule":
			s.Rule = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "AllowedRuntimeClassNames".
	if s.DefaultRuntimeClassName.Set {
		field.Write("defaultRuntimeClassName")
		s.DefaultRuntimeClassName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowedRuntimeClassNames":
			// Unsupported kind "array" for field "AllowedRuntimeClassNames".
			i.Skip()
			return true
		case "defaultRuntimeClassName":
			s.DefaultRuntimeClassName.Reset()
			if err := s.DefaultRuntimeClassName.ReadJSON(i); err != nil {
				i.ReportError("Field DefaultRuntimeClassName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("rule")
	j.WriteString(s.Rule)
	// Unsupported kind "pointer" for field "SeLinuxOptions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1SELinuxStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1SELinuxStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1SELinuxStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "rule":
			s.Rule = i.ReadString()
			return i.Error == nil
		case "seLinuxOptions":
			// Unsupported kind "pointer" for field "SeLinuxOptions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Ranges".
	if s.Rule.Set {
		field.Write("rule")
		s.Rule.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions json value to io.Writer.
func (s IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions json value from io.Reader.
func (s *IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions from json stream.
func (s *IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ranges":
			// Unsupported kind "pointer" for field "Ranges".
			i.Skip()
			return true
		case "rule":
			s.Rule.Reset()
			if err := s.Rule.ReadJSON(i); err != nil {
				i.ReportError("Field Rule", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1AggregationRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ClusterRoleSelectors".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1AggregationRule json value to io.Writer.
func (s IoK8sAPIRbacV1AggregationRule) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1AggregationRule json value from io.Reader.
func (s *IoK8sAPIRbacV1AggregationRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1AggregationRule from json stream.
func (s *IoK8sAPIRbacV1AggregationRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "clusterRoleSelectors":
			// Unsupported kind "pointer" for field "ClusterRoleSelectors".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRole) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AggregationRule".
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Rules".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1ClusterRole json value to io.Writer.
func (s IoK8sAPIRbacV1ClusterRole) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1ClusterRole json value from io.Reader.
func (s *IoK8sAPIRbacV1ClusterRole) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRole from json stream.
func (s *IoK8sAPIRbacV1ClusterRole) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "aggregationRule":
			// Unsupported kind "pointer" for field "AggregationRule".
			i.Skip()
			return true
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "rules":
			// Unsupported kind "pointer" for field "Rules".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleBinding) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("roleRef")
	s.RoleRef.WriteJSON(j)
	// Unsupported kind "pointer" for field "Subjects".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1ClusterRoleBinding json value to io.Writer.
func (s IoK8sAPIRbacV1ClusterRoleBinding) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1ClusterRoleBinding json value from io.Reader.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleBinding from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "roleRef":
			if err := s.RoleRef.ReadJSON(i); err != nil {
				i.ReportError("Field RoleRef", err.Error())
				return false
			}
			return true
		case "subjects":
			// Unsupported kind "pointer" for field "Subjects".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleBindingList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1ClusterRoleBindingList json value to io.Writer.
func (s IoK8sAPIRbacV1ClusterRoleBindingList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1ClusterRoleBindingList json value from io.Reader.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleBindingList from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1ClusterRoleList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1ClusterRoleList json value to io.Writer.
func (s IoK8sAPIRbacV1ClusterRoleList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1ClusterRoleList json value from io.Reader.
func (s *IoK8sAPIRbacV1ClusterRoleList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1ClusterRoleList from json stream.
func (s *IoK8sAPIRbacV1ClusterRoleList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1PolicyRule) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ApiGroups".
	// Unsupported kind "pointer" for field "NonResourceURLs".
	// Unsupported kind "pointer" for field "ResourceNames".
	// Unsupported kind "pointer" for field "Resources".
	// Unsupported kind "array" for field "Verbs".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1PolicyRule json value to io.Writer.
func (s IoK8sAPIRbacV1PolicyRule) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1PolicyRule json value from io.Reader.
func (s *IoK8sAPIRbacV1PolicyRule) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1PolicyRule from json stream.
func (s *IoK8sAPIRbacV1PolicyRule) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroups":
			// Unsupported kind "pointer" for field "ApiGroups".
			i.Skip()
			return true
		case "nonResourceURLs":
			// Unsupported kind "pointer" for field "NonResourceURLs".
			i.Skip()
			return true
		case "resourceNames":
			// Unsupported kind "pointer" for field "ResourceNames".
			i.Skip()
			return true
		case "resources":
			// Unsupported kind "pointer" for field "Resources".
			i.Skip()
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1Role) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Rules".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1Role json value to io.Writer.
func (s IoK8sAPIRbacV1Role) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1Role json value from io.Reader.
func (s *IoK8sAPIRbacV1Role) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1Role from json stream.
func (s *IoK8sAPIRbacV1Role) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "rules":
			// Unsupported kind "pointer" for field "Rules".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleBinding) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("roleRef")
	s.RoleRef.WriteJSON(j)
	// Unsupported kind "pointer" for field "Subjects".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1RoleBinding json value to io.Writer.
func (s IoK8sAPIRbacV1RoleBinding) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1RoleBinding json value from io.Reader.
func (s *IoK8sAPIRbacV1RoleBinding) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1RoleBinding from json stream.
func (s *IoK8sAPIRbacV1RoleBinding) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "roleRef":
			if err := s.RoleRef.ReadJSON(i); err != nil {
				i.ReportError("Field RoleRef", err.Error())
				return false
			}
			return true
		case "subjects":
			// Unsupported kind "pointer" for field "Subjects".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleBindingList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1RoleBindingList json value to io.Writer.
func (s IoK8sAPIRbacV1RoleBindingList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1RoleBindingList json value from io.Reader.
func (s *IoK8sAPIRbacV1RoleBindingList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1RoleBindingList from json stream.
func (s *IoK8sAPIRbacV1RoleBindingList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1RoleList json value to io.Writer.
func (s IoK8sAPIRbacV1RoleList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1RoleList json value from io.Reader.
func (s *IoK8sAPIRbacV1RoleList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1RoleList from json stream.
func (s *IoK8sAPIRbacV1RoleList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1RoleRef) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("apiGroup")
	j.WriteString(s.ApiGroup)
	field.Write("kind")
	j.WriteString(s.Kind)
	field.Write("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1RoleRef json value to io.Writer.
func (s IoK8sAPIRbacV1RoleRef) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1RoleRef json value from io.Reader.
func (s *IoK8sAPIRbacV1RoleRef) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1RoleRef from json stream.
func (s *IoK8sAPIRbacV1RoleRef) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroup":
			s.ApiGroup = i.ReadString()
			return i.Error == nil
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIRbacV1Subject) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiGroup.Set {
		field.Write("apiGroup")
		s.ApiGroup.WriteJSON(j)
	}
	field.Write("kind")
	j.WriteString(s.Kind)
	field.Write("name")
	j.WriteString(s.Name)
	if s.Namespace.Set {
		field.Write("namespace")
		s.Namespace.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIRbacV1Subject json value to io.Writer.
func (s IoK8sAPIRbacV1Subject) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIRbacV1Subject json value from io.Reader.
func (s *IoK8sAPIRbacV1Subject) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIRbacV1Subject from json stream.
func (s *IoK8sAPIRbacV1Subject) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiGroup":
			s.ApiGroup.Reset()
			if err := s.ApiGroup.ReadJSON(i); err != nil {
				i.ReportError("Field ApiGroup", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPISchedulingV1PriorityClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Description.Set {
		field.Write("description")
		s.Description.WriteJSON(j)
	}
	if s.GlobalDefault.Set {
		field.Write("globalDefault")
		s.GlobalDefault.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	if s.PreemptionPolicy.Set {
		field.Write("preemptionPolicy")
		s.PreemptionPolicy.WriteJSON(j)
	}
	field.Write("value")
	j.WriteInt32(s.Value)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPISchedulingV1PriorityClass json value to io.Writer.
func (s IoK8sAPISchedulingV1PriorityClass) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPISchedulingV1PriorityClass json value from io.Reader.
func (s *IoK8sAPISchedulingV1PriorityClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPISchedulingV1PriorityClass from json stream.
func (s *IoK8sAPISchedulingV1PriorityClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "globalDefault":
			s.GlobalDefault.Reset()
			if err := s.GlobalDefault.ReadJSON(i); err != nil {
				i.ReportError("Field GlobalDefault", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "preemptionPolicy":
			s.PreemptionPolicy.Reset()
			if err := s.PreemptionPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field PreemptionPolicy", err.Error())
				return false
			}
			return true
		case "value":
			s.Value = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPISchedulingV1PriorityClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPISchedulingV1PriorityClassList json value to io.Writer.
func (s IoK8sAPISchedulingV1PriorityClassList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPISchedulingV1PriorityClassList json value from io.Reader.
func (s *IoK8sAPISchedulingV1PriorityClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPISchedulingV1PriorityClassList from json stream.
func (s *IoK8sAPISchedulingV1PriorityClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSIDriver json value to io.Writer.
func (s IoK8sAPIStorageV1CSIDriver) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSIDriver json value from io.Reader.
func (s *IoK8sAPIStorageV1CSIDriver) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriver from json stream.
func (s *IoK8sAPIStorageV1CSIDriver) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriverList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSIDriverList json value to io.Writer.
func (s IoK8sAPIStorageV1CSIDriverList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSIDriverList json value from io.Reader.
func (s *IoK8sAPIStorageV1CSIDriverList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriverList from json stream.
func (s *IoK8sAPIStorageV1CSIDriverList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSIDriverSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AttachRequired.Set {
		field.Write("attachRequired")
		s.AttachRequired.WriteJSON(j)
	}
	if s.FsGroupPolicy.Set {
		field.Write("fsGroupPolicy")
		s.FsGroupPolicy.WriteJSON(j)
	}
	if s.PodInfoOnMount.Set {
		field.Write("podInfoOnMount")
		s.PodInfoOnMount.WriteJSON(j)
	}
	if s.RequiresRepublish.Set {
		field.Write("requiresRepublish")
		s.RequiresRepublish.WriteJSON(j)
	}
	if s.StorageCapacity.Set {
		field.Write("storageCapacity")
		s.StorageCapacity.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "TokenRequests".
	// Unsupported kind "pointer" for field "VolumeLifecycleModes".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSIDriverSpec json value to io.Writer.
func (s IoK8sAPIStorageV1CSIDriverSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSIDriverSpec json value from io.Reader.
func (s *IoK8sAPIStorageV1CSIDriverSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSIDriverSpec from json stream.
func (s *IoK8sAPIStorageV1CSIDriverSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "attachRequired":
			s.AttachRequired.Reset()
			if err := s.AttachRequired.ReadJSON(i); err != nil {
				i.ReportError("Field AttachRequired", err.Error())
				return false
			}
			return true
		case "fsGroupPolicy":
			s.FsGroupPolicy.Reset()
			if err := s.FsGroupPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field FsGroupPolicy", err.Error())
				return false
			}
			return true
		case "podInfoOnMount":
			s.PodInfoOnMount.Reset()
			if err := s.PodInfoOnMount.ReadJSON(i); err != nil {
				i.ReportError("Field PodInfoOnMount", err.Error())
				return false
			}
			return true
		case "requiresRepublish":
			s.RequiresRepublish.Reset()
			if err := s.RequiresRepublish.ReadJSON(i); err != nil {
				i.ReportError("Field RequiresRepublish", err.Error())
				return false
			}
			return true
		case "storageCapacity":
			s.StorageCapacity.Reset()
			if err := s.StorageCapacity.ReadJSON(i); err != nil {
				i.ReportError("Field StorageCapacity", err.Error())
				return false
			}
			return true
		case "tokenRequests":
			// Unsupported kind "pointer" for field "TokenRequests".
			i.Skip()
			return true
		case "volumeLifecycleModes":
			// Unsupported kind "pointer" for field "VolumeLifecycleModes".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINode) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("spec")
	s.Spec.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSINode json value to io.Writer.
func (s IoK8sAPIStorageV1CSINode) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSINode json value from io.Reader.
func (s *IoK8sAPIStorageV1CSINode) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSINode from json stream.
func (s *IoK8sAPIStorageV1CSINode) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeDriver) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Allocatable".
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("nodeID")
	j.WriteString(s.NodeID)
	// Unsupported kind "pointer" for field "TopologyKeys".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSINodeDriver json value to io.Writer.
func (s IoK8sAPIStorageV1CSINodeDriver) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSINodeDriver json value from io.Reader.
func (s *IoK8sAPIStorageV1CSINodeDriver) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeDriver from json stream.
func (s *IoK8sAPIStorageV1CSINodeDriver) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allocatable":
			// Unsupported kind "pointer" for field "Allocatable".
			i.Skip()
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "nodeID":
			s.NodeID = i.ReadString()
			return i.Error == nil
		case "topologyKeys":
			// Unsupported kind "pointer" for field "TopologyKeys".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSINodeList json value to io.Writer.
func (s IoK8sAPIStorageV1CSINodeList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSINodeList json value from io.Reader.
func (s *IoK8sAPIStorageV1CSINodeList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeList from json stream.
func (s *IoK8sAPIStorageV1CSINodeList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1CSINodeSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "array" for field "Drivers".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1CSINodeSpec json value to io.Writer.
func (s IoK8sAPIStorageV1CSINodeSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1CSINodeSpec json value from io.Reader.
func (s *IoK8sAPIStorageV1CSINodeSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1CSINodeSpec from json stream.
func (s *IoK8sAPIStorageV1CSINodeSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "drivers":
			// Unsupported kind "array" for field "Drivers".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1StorageClass) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.AllowVolumeExpansion.Set {
		field.Write("allowVolumeExpansion")
		s.AllowVolumeExpansion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "AllowedTopologies".
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "MountOptions".
	// Unsupported kind "pointer" for field "Parameters".
	field.Write("provisioner")
	j.WriteString(s.Provisioner)
	if s.ReclaimPolicy.Set {
		field.Write("reclaimPolicy")
		s.ReclaimPolicy.WriteJSON(j)
	}
	if s.VolumeBindingMode.Set {
		field.Write("volumeBindingMode")
		s.VolumeBindingMode.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1StorageClass json value to io.Writer.
func (s IoK8sAPIStorageV1StorageClass) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1StorageClass json value from io.Reader.
func (s *IoK8sAPIStorageV1StorageClass) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1StorageClass from json stream.
func (s *IoK8sAPIStorageV1StorageClass) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allowVolumeExpansion":
			s.AllowVolumeExpansion.Reset()
			if err := s.AllowVolumeExpansion.ReadJSON(i); err != nil {
				i.ReportError("Field AllowVolumeExpansion", err.Error())
				return false
			}
			return true
		case "allowedTopologies":
			// Unsupported kind "pointer" for field "AllowedTopologies".
			i.Skip()
			return true
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "mountOptions":
			// Unsupported kind "pointer" for field "MountOptions".
			i.Skip()
			return true
		case "parameters":
			// Unsupported kind "pointer" for field "Parameters".
			i.Skip()
			return true
		case "provisioner":
			s.Provisioner = i.ReadString()
			return i.Error == nil
		case "reclaimPolicy":
			s.ReclaimPolicy.Reset()
			if err := s.ReclaimPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field ReclaimPolicy", err.Error())
				return false
			}
			return true
		case "volumeBindingMode":
			s.VolumeBindingMode.Reset()
			if err := s.VolumeBindingMode.ReadJSON(i); err != nil {
				i.ReportError("Field VolumeBindingMode", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1StorageClassList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1StorageClassList json value to io.Writer.
func (s IoK8sAPIStorageV1StorageClassList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1StorageClassList json value from io.Reader.
func (s *IoK8sAPIStorageV1StorageClassList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1StorageClassList from json stream.
func (s *IoK8sAPIStorageV1StorageClassList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1TokenRequest) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("audience")
	j.WriteString(s.Audience)
	if s.ExpirationSeconds.Set {
		field.Write("expirationSeconds")
		s.ExpirationSeconds.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1TokenRequest json value to io.Writer.
func (s IoK8sAPIStorageV1TokenRequest) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1TokenRequest json value from io.Reader.
func (s *IoK8sAPIStorageV1TokenRequest) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1TokenRequest from json stream.
func (s *IoK8sAPIStorageV1TokenRequest) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "audience":
			s.Audience = i.ReadString()
			return i.Error == nil
		case "expirationSeconds":
			s.ExpirationSeconds.Reset()
			if err := s.ExpirationSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field ExpirationSeconds", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("spec")
	s.Spec.WriteJSON(j)
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeAttachment json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeAttachment) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeAttachment json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeAttachment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachment from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachment) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeAttachmentList json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeAttachmentList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeAttachmentList json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentList from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentSource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "InlineVolumeSpec".
	if s.PersistentVolumeName.Set {
		field.Write("persistentVolumeName")
		s.PersistentVolumeName.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeAttachmentSource json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeAttachmentSource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeAttachmentSource json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeAttachmentSource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentSource from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentSource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "inlineVolumeSpec":
			// Unsupported kind "pointer" for field "InlineVolumeSpec".
			i.Skip()
			return true
		case "persistentVolumeName":
			s.PersistentVolumeName.Reset()
			if err := s.PersistentVolumeName.ReadJSON(i); err != nil {
				i.ReportError("Field PersistentVolumeName", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("attacher")
	j.WriteString(s.Attacher)
	field.Write("nodeName")
	j.WriteString(s.NodeName)
	field.Write("source")
	s.Source.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeAttachmentSpec json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeAttachmentSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeAttachmentSpec json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentSpec from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "attacher":
			s.Attacher = i.ReadString()
			return i.Error == nil
		case "nodeName":
			s.NodeName = i.ReadString()
			return i.Error == nil
		case "source":
			if err := s.Source.ReadJSON(i); err != nil {
				i.ReportError("Field Source", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeAttachmentStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AttachError".
	field.Write("attached")
	j.WriteBool(s.Attached)
	// Unsupported kind "pointer" for field "AttachmentMetadata".
	// Unsupported kind "pointer" for field "DetachError".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeAttachmentStatus json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeAttachmentStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeAttachmentStatus json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeAttachmentStatus from json stream.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "attachError":
			// Unsupported kind "pointer" for field "AttachError".
			i.Skip()
			return true
		case "attached":
			s.Attached = i.ReadBool()
			return i.Error == nil
		case "attachmentMetadata":
			// Unsupported kind "pointer" for field "AttachmentMetadata".
			i.Skip()
			return true
		case "detachError":
			// Unsupported kind "pointer" for field "DetachError".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeError) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Time".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeError json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeError) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeError json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeError) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeError from json stream.
func (s *IoK8sAPIStorageV1VolumeError) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "time":
			// Unsupported kind "pointer" for field "Time".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1VolumeNodeResources) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Count.Set {
		field.Write("count")
		s.Count.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1VolumeNodeResources json value to io.Writer.
func (s IoK8sAPIStorageV1VolumeNodeResources) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1VolumeNodeResources json value from io.Reader.
func (s *IoK8sAPIStorageV1VolumeNodeResources) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1VolumeNodeResources from json stream.
func (s *IoK8sAPIStorageV1VolumeNodeResources) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "count":
			s.Count.Reset()
			if err := s.Count.ReadJSON(i); err != nil {
				i.ReportError("Field Count", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Capacity".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "MaximumVolumeSize".
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "NodeTopology".
	field.Write("storageClassName")
	j.WriteString(s.StorageClassName)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1alpha1CSIStorageCapacity json value to io.Writer.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacity) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1alpha1CSIStorageCapacity json value from io.Reader.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1alpha1CSIStorageCapacity from json stream.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "capacity":
			// Unsupported kind "pointer" for field "Capacity".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "maximumVolumeSize":
			// Unsupported kind "pointer" for field "MaximumVolumeSize".
			i.Skip()
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "nodeTopology":
			// Unsupported kind "pointer" for field "NodeTopology".
			i.Skip()
			return true
		case "storageClassName":
			s.StorageClassName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacityList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1alpha1CSIStorageCapacityList json value to io.Writer.
func (s IoK8sAPIStorageV1alpha1CSIStorageCapacityList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1alpha1CSIStorageCapacityList json value from io.Reader.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1alpha1CSIStorageCapacityList from json stream.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacity) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Capacity".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "MaximumVolumeSize".
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "NodeTopology".
	field.Write("storageClassName")
	j.WriteString(s.StorageClassName)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1beta1CSIStorageCapacity json value to io.Writer.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacity) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1beta1CSIStorageCapacity json value from io.Reader.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1beta1CSIStorageCapacity from json stream.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "capacity":
			// Unsupported kind "pointer" for field "Capacity".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "maximumVolumeSize":
			// Unsupported kind "pointer" for field "MaximumVolumeSize".
			i.Skip()
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "nodeTopology":
			// Unsupported kind "pointer" for field "NodeTopology".
			i.Skip()
			return true
		case "storageClassName":
			s.StorageClassName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacityList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sAPIStorageV1beta1CSIStorageCapacityList json value to io.Writer.
func (s IoK8sAPIStorageV1beta1CSIStorageCapacityList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sAPIStorageV1beta1CSIStorageCapacityList json value from io.Reader.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sAPIStorageV1beta1CSIStorageCapacityList from json stream.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Description.Set {
		field.Write("description")
		s.Description.WriteJSON(j)
	}
	if s.Format.Set {
		field.Write("format")
		s.Format.WriteJSON(j)
	}
	field.Write("jsonPath")
	j.WriteString(s.JsonPath)
	field.Write("name")
	j.WriteString(s.Name)
	if s.Priority.Set {
		field.Write("priority")
		s.Priority.WriteJSON(j)
	}
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "format":
			s.Format.Reset()
			if err := s.Format.ReadJSON(i); err != nil {
				i.ReportError("Field Format", err.Error())
				return false
			}
			return true
		case "jsonPath":
			s.JsonPath = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "priority":
			s.Priority.Reset()
			if err := s.Priority.ReadJSON(i); err != nil {
				i.ReportError("Field Priority", err.Error())
				return false
			}
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("strategy")
	j.WriteString(s.Strategy)
	// Unsupported kind "pointer" for field "Webhook".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "strategy":
			s.Strategy = i.ReadString()
			return i.Error == nil
		case "webhook":
			// Unsupported kind "pointer" for field "Webhook".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	field.Write("spec")
	s.Spec.WriteJSON(j)
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			if err := s.Spec.ReadJSON(i); err != nil {
				i.ReportError("Field Spec", err.Error())
				return false
			}
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Categories".
	field.Write("kind")
	j.WriteString(s.Kind)
	if s.ListKind.Set {
		field.Write("listKind")
		s.ListKind.WriteJSON(j)
	}
	field.Write("plural")
	j.WriteString(s.Plural)
	// Unsupported kind "pointer" for field "ShortNames".
	if s.Singular.Set {
		field.Write("singular")
		s.Singular.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "categories":
			// Unsupported kind "pointer" for field "Categories".
			i.Skip()
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "listKind":
			s.ListKind.Reset()
			if err := s.ListKind.ReadJSON(i); err != nil {
				i.ReportError("Field ListKind", err.Error())
				return false
			}
			return true
		case "plural":
			s.Plural = i.ReadString()
			return i.Error == nil
		case "shortNames":
			// Unsupported kind "pointer" for field "ShortNames".
			i.Skip()
			return true
		case "singular":
			s.Singular.Reset()
			if err := s.Singular.ReadJSON(i); err != nil {
				i.ReportError("Field Singular", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Conversion".
	field.Write("group")
	j.WriteString(s.Group)
	field.Write("names")
	s.Names.WriteJSON(j)
	if s.PreserveUnknownFields.Set {
		field.Write("preserveUnknownFields")
		s.PreserveUnknownFields.WriteJSON(j)
	}
	field.Write("scope")
	j.WriteString(s.Scope)
	// Unsupported kind "array" for field "Versions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conversion":
			// Unsupported kind "pointer" for field "Conversion".
			i.Skip()
			return true
		case "group":
			s.Group = i.ReadString()
			return i.Error == nil
		case "names":
			if err := s.Names.ReadJSON(i); err != nil {
				i.ReportError("Field Names", err.Error())
				return false
			}
			return true
		case "preserveUnknownFields":
			s.PreserveUnknownFields.Reset()
			if err := s.PreserveUnknownFields.ReadJSON(i); err != nil {
				i.ReportError("Field PreserveUnknownFields", err.Error())
				return false
			}
			return true
		case "scope":
			s.Scope = i.ReadString()
			return i.Error == nil
		case "versions":
			// Unsupported kind "array" for field "Versions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AcceptedNames".
	// Unsupported kind "pointer" for field "Conditions".
	// Unsupported kind "pointer" for field "StoredVersions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "acceptedNames":
			// Unsupported kind "pointer" for field "AcceptedNames".
			i.Skip()
			return true
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		case "storedVersions":
			// Unsupported kind "pointer" for field "StoredVersions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AdditionalPrinterColumns".
	if s.Deprecated.Set {
		field.Write("deprecated")
		s.Deprecated.WriteJSON(j)
	}
	if s.DeprecationWarning.Set {
		field.Write("deprecationWarning")
		s.DeprecationWarning.WriteJSON(j)
	}
	field.Write("name")
	j.WriteString(s.Name)
	// Unsupported kind "pointer" for field "Schema".
	field.Write("served")
	j.WriteBool(s.Served)
	field.Write("storage")
	j.WriteBool(s.Storage)
	// Unsupported kind "pointer" for field "Subresources".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "additionalPrinterColumns":
			// Unsupported kind "pointer" for field "AdditionalPrinterColumns".
			i.Skip()
			return true
		case "deprecated":
			s.Deprecated.Reset()
			if err := s.Deprecated.ReadJSON(i); err != nil {
				i.ReportError("Field Deprecated", err.Error())
				return false
			}
			return true
		case "deprecationWarning":
			s.DeprecationWarning.Reset()
			if err := s.DeprecationWarning.ReadJSON(i); err != nil {
				i.ReportError("Field DeprecationWarning", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "schema":
			// Unsupported kind "pointer" for field "Schema".
			i.Skip()
			return true
		case "served":
			s.Served = i.ReadBool()
			return i.Error == nil
		case "storage":
			s.Storage = i.ReadBool()
			return i.Error == nil
		case "subresources":
			// Unsupported kind "pointer" for field "Subresources".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.LabelSelectorPath.Set {
		field.Write("labelSelectorPath")
		s.LabelSelectorPath.WriteJSON(j)
	}
	field.Write("specReplicasPath")
	j.WriteString(s.SpecReplicasPath)
	field.Write("statusReplicasPath")
	j.WriteString(s.StatusReplicasPath)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "labelSelectorPath":
			s.LabelSelectorPath.Reset()
			if err := s.LabelSelectorPath.ReadJSON(i); err != nil {
				i.ReportError("Field LabelSelectorPath", err.Error())
				return false
			}
			return true
		case "specReplicasPath":
			s.SpecReplicasPath = i.ReadString()
			return i.Error == nil
		case "statusReplicasPath":
			s.StatusReplicasPath = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Scale".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "scale":
			// Unsupported kind "pointer" for field "Scale".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "OpenAPIV3Schema".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "openAPIV3Schema":
			// Unsupported kind "pointer" for field "OpenAPIV3Schema".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Description.Set {
		field.Write("description")
		s.Description.WriteJSON(j)
	}
	if s.URL.Set {
		field.Write("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "AdditionalItems".
	// Unsupported kind "pointer" for field "AdditionalProperties".
	// Unsupported kind "pointer" for field "AllOf".
	// Unsupported kind "pointer" for field "AnyOf".
	// Unsupported kind "pointer" for field "Default".
	// Unsupported kind "pointer" for field "Definitions".
	// Unsupported kind "pointer" for field "Dependencies".
	if s.Description.Set {
		field.Write("description")
		s.Description.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Enum".
	// Unsupported kind "pointer" for field "Example".
	if s.ExclusiveMaximum.Set {
		field.Write("exclusiveMaximum")
		s.ExclusiveMaximum.WriteJSON(j)
	}
	if s.ExclusiveMinimum.Set {
		field.Write("exclusiveMinimum")
		s.ExclusiveMinimum.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "ExternalDocs".
	if s.Format.Set {
		field.Write("format")
		s.Format.WriteJSON(j)
	}
	if s.ID.Set {
		field.Write("id")
		s.ID.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Items".
	if s.MaxItems.Set {
		field.Write("maxItems")
		s.MaxItems.WriteJSON(j)
	}
	if s.MaxLength.Set {
		field.Write("maxLength")
		s.MaxLength.WriteJSON(j)
	}
	if s.MaxProperties.Set {
		field.Write("maxProperties")
		s.MaxProperties.WriteJSON(j)
	}
	if s.Maximum.Set {
		field.Write("maximum")
		s.Maximum.WriteJSON(j)
	}
	if s.MinItems.Set {
		field.Write("minItems")
		s.MinItems.WriteJSON(j)
	}
	if s.MinLength.Set {
		field.Write("minLength")
		s.MinLength.WriteJSON(j)
	}
	if s.MinProperties.Set {
		field.Write("minProperties")
		s.MinProperties.WriteJSON(j)
	}
	if s.Minimum.Set {
		field.Write("minimum")
		s.Minimum.WriteJSON(j)
	}
	if s.MultipleOf.Set {
		field.Write("multipleOf")
		s.MultipleOf.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Not".
	if s.Nullable.Set {
		field.Write("nullable")
		s.Nullable.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "OneOf".
	if s.Pattern.Set {
		field.Write("pattern")
		s.Pattern.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "PatternProperties".
	// Unsupported kind "pointer" for field "Properties".
	if s.Ref.Set {
		field.Write("$ref")
		s.Ref.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Required".
	if s.Schema.Set {
		field.Write("$schema")
		s.Schema.WriteJSON(j)
	}
	if s.Title.Set {
		field.Write("title")
		s.Title.WriteJSON(j)
	}
	if s.Type.Set {
		field.Write("type")
		s.Type.WriteJSON(j)
	}
	if s.UniqueItems.Set {
		field.Write("uniqueItems")
		s.UniqueItems.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusEmbeddedMinusResource.Set {
		field.Write("x-kubernetes-embedded-resource")
		s.XMinusKubernetesMinusEmbeddedMinusResource.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusIntMinusOrMinusString.Set {
		field.Write("x-kubernetes-int-or-string")
		s.XMinusKubernetesMinusIntMinusOrMinusString.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "XMinusKubernetesMinusListMinusMapMinusKeys".
	if s.XMinusKubernetesMinusListMinusType.Set {
		field.Write("x-kubernetes-list-type")
		s.XMinusKubernetesMinusListMinusType.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusMapMinusType.Set {
		field.Write("x-kubernetes-map-type")
		s.XMinusKubernetesMinusMapMinusType.WriteJSON(j)
	}
	if s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.Set {
		field.Write("x-kubernetes-preserve-unknown-fields")
		s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "additionalItems":
			// Unsupported kind "pointer" for field "AdditionalItems".
			i.Skip()
			return true
		case "additionalProperties":
			// Unsupported kind "pointer" for field "AdditionalProperties".
			i.Skip()
			return true
		case "allOf":
			// Unsupported kind "pointer" for field "AllOf".
			i.Skip()
			return true
		case "anyOf":
			// Unsupported kind "pointer" for field "AnyOf".
			i.Skip()
			return true
		case "default":
			// Unsupported kind "pointer" for field "Default".
			i.Skip()
			return true
		case "definitions":
			// Unsupported kind "pointer" for field "Definitions".
			i.Skip()
			return true
		case "dependencies":
			// Unsupported kind "pointer" for field "Dependencies".
			i.Skip()
			return true
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		case "enum":
			// Unsupported kind "pointer" for field "Enum".
			i.Skip()
			return true
		case "example":
			// Unsupported kind "pointer" for field "Example".
			i.Skip()
			return true
		case "exclusiveMaximum":
			s.ExclusiveMaximum.Reset()
			if err := s.ExclusiveMaximum.ReadJSON(i); err != nil {
				i.ReportError("Field ExclusiveMaximum", err.Error())
				return false
			}
			return true
		case "exclusiveMinimum":
			s.ExclusiveMinimum.Reset()
			if err := s.ExclusiveMinimum.ReadJSON(i); err != nil {
				i.ReportError("Field ExclusiveMinimum", err.Error())
				return false
			}
			return true
		case "externalDocs":
			// Unsupported kind "pointer" for field "ExternalDocs".
			i.Skip()
			return true
		case "format":
			s.Format.Reset()
			if err := s.Format.ReadJSON(i); err != nil {
				i.ReportError("Field Format", err.Error())
				return false
			}
			return true
		case "id":
			s.ID.Reset()
			if err := s.ID.ReadJSON(i); err != nil {
				i.ReportError("Field ID", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "pointer" for field "Items".
			i.Skip()
			return true
		case "maxItems":
			s.MaxItems.Reset()
			if err := s.MaxItems.ReadJSON(i); err != nil {
				i.ReportError("Field MaxItems", err.Error())
				return false
			}
			return true
		case "maxLength":
			s.MaxLength.Reset()
			if err := s.MaxLength.ReadJSON(i); err != nil {
				i.ReportError("Field MaxLength", err.Error())
				return false
			}
			return true
		case "maxProperties":
			s.MaxProperties.Reset()
			if err := s.MaxProperties.ReadJSON(i); err != nil {
				i.ReportError("Field MaxProperties", err.Error())
				return false
			}
			return true
		case "maximum":
			s.Maximum.Reset()
			if err := s.Maximum.ReadJSON(i); err != nil {
				i.ReportError("Field Maximum", err.Error())
				return false
			}
			return true
		case "minItems":
			s.MinItems.Reset()
			if err := s.MinItems.ReadJSON(i); err != nil {
				i.ReportError("Field MinItems", err.Error())
				return false
			}
			return true
		case "minLength":
			s.MinLength.Reset()
			if err := s.MinLength.ReadJSON(i); err != nil {
				i.ReportError("Field MinLength", err.Error())
				return false
			}
			return true
		case "minProperties":
			s.MinProperties.Reset()
			if err := s.MinProperties.ReadJSON(i); err != nil {
				i.ReportError("Field MinProperties", err.Error())
				return false
			}
			return true
		case "minimum":
			s.Minimum.Reset()
			if err := s.Minimum.ReadJSON(i); err != nil {
				i.ReportError("Field Minimum", err.Error())
				return false
			}
			return true
		case "multipleOf":
			s.MultipleOf.Reset()
			if err := s.MultipleOf.ReadJSON(i); err != nil {
				i.ReportError("Field MultipleOf", err.Error())
				return false
			}
			return true
		case "not":
			// Unsupported kind "pointer" for field "Not".
			i.Skip()
			return true
		case "nullable":
			s.Nullable.Reset()
			if err := s.Nullable.ReadJSON(i); err != nil {
				i.ReportError("Field Nullable", err.Error())
				return false
			}
			return true
		case "oneOf":
			// Unsupported kind "pointer" for field "OneOf".
			i.Skip()
			return true
		case "pattern":
			s.Pattern.Reset()
			if err := s.Pattern.ReadJSON(i); err != nil {
				i.ReportError("Field Pattern", err.Error())
				return false
			}
			return true
		case "patternProperties":
			// Unsupported kind "pointer" for field "PatternProperties".
			i.Skip()
			return true
		case "properties":
			// Unsupported kind "pointer" for field "Properties".
			i.Skip()
			return true
		case "$ref":
			s.Ref.Reset()
			if err := s.Ref.ReadJSON(i); err != nil {
				i.ReportError("Field Ref", err.Error())
				return false
			}
			return true
		case "required":
			// Unsupported kind "pointer" for field "Required".
			i.Skip()
			return true
		case "$schema":
			s.Schema.Reset()
			if err := s.Schema.ReadJSON(i); err != nil {
				i.ReportError("Field Schema", err.Error())
				return false
			}
			return true
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		case "uniqueItems":
			s.UniqueItems.Reset()
			if err := s.UniqueItems.ReadJSON(i); err != nil {
				i.ReportError("Field UniqueItems", err.Error())
				return false
			}
			return true
		case "x-kubernetes-embedded-resource":
			s.XMinusKubernetesMinusEmbeddedMinusResource.Reset()
			if err := s.XMinusKubernetesMinusEmbeddedMinusResource.ReadJSON(i); err != nil {
				i.ReportError("Field XMinusKubernetesMinusEmbeddedMinusResource", err.Error())
				return false
			}
			return true
		case "x-kubernetes-int-or-string":
			s.XMinusKubernetesMinusIntMinusOrMinusString.Reset()
			if err := s.XMinusKubernetesMinusIntMinusOrMinusString.ReadJSON(i); err != nil {
				i.ReportError("Field XMinusKubernetesMinusIntMinusOrMinusString", err.Error())
				return false
			}
			return true
		case "x-kubernetes-list-map-keys":
			// Unsupported kind "pointer" for field "XMinusKubernetesMinusListMinusMapMinusKeys".
			i.Skip()
			return true
		case "x-kubernetes-list-type":
			s.XMinusKubernetesMinusListMinusType.Reset()
			if err := s.XMinusKubernetesMinusListMinusType.ReadJSON(i); err != nil {
				i.ReportError("Field XMinusKubernetesMinusListMinusType", err.Error())
				return false
			}
			return true
		case "x-kubernetes-map-type":
			s.XMinusKubernetesMinusMapMinusType.Reset()
			if err := s.XMinusKubernetesMinusMapMinusType.ReadJSON(i); err != nil {
				i.ReportError("Field XMinusKubernetesMinusMapMinusType", err.Error())
				return false
			}
			return true
		case "x-kubernetes-preserve-unknown-fields":
			s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.Reset()
			if err := s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields.ReadJSON(i); err != nil {
				i.ReportError("Field XMinusKubernetesMinusPreserveMinusUnknownMinusFields", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("namespace")
	j.WriteString(s.Namespace)
	if s.Path.Set {
		field.Write("path")
		s.Path.WriteJSON(j)
	}
	if s.Port.Set {
		field.Write("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespace":
			s.Namespace = i.ReadString()
			return i.Error == nil
		case "path":
			s.Path.Reset()
			if err := s.Path.ReadJSON(i); err != nil {
				i.ReportError("Field Path", err.Error())
				return false
			}
			return true
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				i.ReportError("Field Port", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "CaBundle".
	// Unsupported kind "pointer" for field "Service".
	if s.URL.Set {
		field.Write("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "caBundle":
			// Unsupported kind "pointer" for field "CaBundle".
			i.Skip()
			return true
		case "service":
			// Unsupported kind "pointer" for field "Service".
			i.Skip()
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "ClientConfig".
	// Unsupported kind "array" for field "ConversionReviewVersions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion json value to io.Writer.
func (s IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion json value from io.Reader.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion from json stream.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "clientConfig":
			// Unsupported kind "pointer" for field "ClientConfig".
			i.Skip()
			return true
		case "conversionReviewVersions":
			// Unsupported kind "array" for field "ConversionReviewVersions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIGroup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	field.Write("name")
	j.WriteString(s.Name)
	// Unsupported kind "pointer" for field "PreferredVersion".
	// Unsupported kind "pointer" for field "ServerAddressByClientCIDRs".
	// Unsupported kind "array" for field "Versions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1APIGroup json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1APIGroup) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1APIGroup json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIGroup from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "preferredVersion":
			// Unsupported kind "pointer" for field "PreferredVersion".
			i.Skip()
			return true
		case "serverAddressByClientCIDRs":
			// Unsupported kind "pointer" for field "ServerAddressByClientCIDRs".
			i.Skip()
			return true
		case "versions":
			// Unsupported kind "array" for field "Versions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIGroupList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Groups".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1APIGroupList json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1APIGroupList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1APIGroupList json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIGroupList from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "groups":
			// Unsupported kind "array" for field "Groups".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIResource) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Categories".
	if s.Group.Set {
		field.Write("group")
		s.Group.WriteJSON(j)
	}
	field.Write("kind")
	j.WriteString(s.Kind)
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("namespaced")
	j.WriteBool(s.Namespaced)
	// Unsupported kind "pointer" for field "ShortNames".
	field.Write("singularName")
	j.WriteString(s.SingularName)
	if s.StorageVersionHash.Set {
		field.Write("storageVersionHash")
		s.StorageVersionHash.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Verbs".
	if s.Version.Set {
		field.Write("version")
		s.Version.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1APIResource json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1APIResource) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1APIResource json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIResource from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "categories":
			// Unsupported kind "pointer" for field "Categories".
			i.Skip()
			return true
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "namespaced":
			s.Namespaced = i.ReadBool()
			return i.Error == nil
		case "shortNames":
			// Unsupported kind "pointer" for field "ShortNames".
			i.Skip()
			return true
		case "singularName":
			s.SingularName = i.ReadString()
			return i.Error == nil
		case "storageVersionHash":
			s.StorageVersionHash.Reset()
			if err := s.StorageVersionHash.ReadJSON(i); err != nil {
				i.ReportError("Field StorageVersionHash", err.Error())
				return false
			}
			return true
		case "verbs":
			// Unsupported kind "array" for field "Verbs".
			i.Skip()
			return true
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(i); err != nil {
				i.ReportError("Field Version", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIResourceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	field.Write("groupVersion")
	j.WriteString(s.GroupVersion)
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Resources".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1APIResourceList json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1APIResourceList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1APIResourceList json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIResourceList from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "groupVersion":
			s.GroupVersion = i.ReadString()
			return i.Error == nil
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "resources":
			// Unsupported kind "array" for field "Resources".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1APIVersions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "array" for field "ServerAddressByClientCIDRs".
	// Unsupported kind "array" for field "Versions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1APIVersions json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1APIVersions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1APIVersions json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1APIVersions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "serverAddressByClientCIDRs":
			// Unsupported kind "array" for field "ServerAddressByClientCIDRs".
			i.Skip()
			return true
		case "versions":
			// Unsupported kind "array" for field "Versions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Condition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "alias" for field "LastTransitionTime".
	field.Write("message")
	j.WriteString(s.Message)
	if s.ObservedGeneration.Set {
		field.Write("observedGeneration")
		s.ObservedGeneration.WriteJSON(j)
	}
	field.Write("reason")
	j.WriteString(s.Reason)
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1Condition json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1Condition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1Condition json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Condition from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "alias" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message = i.ReadString()
			return i.Error == nil
		case "observedGeneration":
			s.ObservedGeneration.Reset()
			if err := s.ObservedGeneration.ReadJSON(i); err != nil {
				i.ReportError("Field ObservedGeneration", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason = i.ReadString()
			return i.Error == nil
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1DeleteOptions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "DryRun".
	if s.GracePeriodSeconds.Set {
		field.Write("gracePeriodSeconds")
		s.GracePeriodSeconds.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	if s.OrphanDependents.Set {
		field.Write("orphanDependents")
		s.OrphanDependents.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Preconditions".
	if s.PropagationPolicy.Set {
		field.Write("propagationPolicy")
		s.PropagationPolicy.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1DeleteOptions json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1DeleteOptions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1DeleteOptions json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1DeleteOptions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1DeleteOptions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1DeleteOptions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "dryRun":
			// Unsupported kind "pointer" for field "DryRun".
			i.Skip()
			return true
		case "gracePeriodSeconds":
			s.GracePeriodSeconds.Reset()
			if err := s.GracePeriodSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field GracePeriodSeconds", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "orphanDependents":
			s.OrphanDependents.Reset()
			if err := s.OrphanDependents.ReadJSON(i); err != nil {
				i.ReportError("Field OrphanDependents", err.Error())
				return false
			}
			return true
		case "preconditions":
			// Unsupported kind "pointer" for field "Preconditions".
			i.Skip()
			return true
		case "propagationPolicy":
			s.PropagationPolicy.Reset()
			if err := s.PropagationPolicy.ReadJSON(i); err != nil {
				i.ReportError("Field PropagationPolicy", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("groupVersion")
	j.WriteString(s.GroupVersion)
	field.Write("version")
	j.WriteString(s.Version)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "groupVersion":
			s.GroupVersion = i.ReadString()
			return i.Error == nil
		case "version":
			s.Version = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelector) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "MatchExpressions".
	// Unsupported kind "pointer" for field "MatchLabels".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1LabelSelector json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelector) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1LabelSelector json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelector) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1LabelSelector from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelector) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "matchExpressions":
			// Unsupported kind "pointer" for field "MatchExpressions".
			i.Skip()
			return true
		case "matchLabels":
			// Unsupported kind "pointer" for field "MatchLabels".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("key")
	j.WriteString(s.Key)
	field.Write("operator")
	j.WriteString(s.Operator)
	// Unsupported kind "pointer" for field "Values".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "key":
			s.Key = i.ReadString()
			return i.Error == nil
		case "operator":
			s.Operator = i.ReadString()
			return i.Error == nil
		case "values":
			// Unsupported kind "pointer" for field "Values".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ListMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Continue.Set {
		field.Write("continue")
		s.Continue.WriteJSON(j)
	}
	if s.RemainingItemCount.Set {
		field.Write("remainingItemCount")
		s.RemainingItemCount.WriteJSON(j)
	}
	if s.ResourceVersion.Set {
		field.Write("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.SelfLink.Set {
		field.Write("selfLink")
		s.SelfLink.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1ListMeta json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1ListMeta) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1ListMeta json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ListMeta from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "continue":
			s.Continue.Reset()
			if err := s.Continue.ReadJSON(i); err != nil {
				i.ReportError("Field Continue", err.Error())
				return false
			}
			return true
		case "remainingItemCount":
			s.RemainingItemCount.Reset()
			if err := s.RemainingItemCount.ReadJSON(i); err != nil {
				i.ReportError("Field RemainingItemCount", err.Error())
				return false
			}
			return true
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceVersion", err.Error())
				return false
			}
			return true
		case "selfLink":
			s.SelfLink.Reset()
			if err := s.SelfLink.ReadJSON(i); err != nil {
				i.ReportError("Field SelfLink", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.FieldsType.Set {
		field.Write("fieldsType")
		s.FieldsType.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "FieldsV1".
	if s.Manager.Set {
		field.Write("manager")
		s.Manager.WriteJSON(j)
	}
	if s.Operation.Set {
		field.Write("operation")
		s.Operation.WriteJSON(j)
	}
	if s.Subresource.Set {
		field.Write("subresource")
		s.Subresource.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Time".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "fieldsType":
			s.FieldsType.Reset()
			if err := s.FieldsType.ReadJSON(i); err != nil {
				i.ReportError("Field FieldsType", err.Error())
				return false
			}
			return true
		case "fieldsV1":
			// Unsupported kind "pointer" for field "FieldsV1".
			i.Skip()
			return true
		case "manager":
			s.Manager.Reset()
			if err := s.Manager.ReadJSON(i); err != nil {
				i.ReportError("Field Manager", err.Error())
				return false
			}
			return true
		case "operation":
			s.Operation.Reset()
			if err := s.Operation.ReadJSON(i); err != nil {
				i.ReportError("Field Operation", err.Error())
				return false
			}
			return true
		case "subresource":
			s.Subresource.Reset()
			if err := s.Subresource.ReadJSON(i); err != nil {
				i.ReportError("Field Subresource", err.Error())
				return false
			}
			return true
		case "time":
			// Unsupported kind "pointer" for field "Time".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ObjectMeta) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Annotations".
	if s.ClusterName.Set {
		field.Write("clusterName")
		s.ClusterName.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "CreationTimestamp".
	if s.DeletionGracePeriodSeconds.Set {
		field.Write("deletionGracePeriodSeconds")
		s.DeletionGracePeriodSeconds.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "DeletionTimestamp".
	// Unsupported kind "pointer" for field "Finalizers".
	if s.GenerateName.Set {
		field.Write("generateName")
		s.GenerateName.WriteJSON(j)
	}
	if s.Generation.Set {
		field.Write("generation")
		s.Generation.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Labels".
	// Unsupported kind "pointer" for field "ManagedFields".
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		field.Write("namespace")
		s.Namespace.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "OwnerReferences".
	if s.ResourceVersion.Set {
		field.Write("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.SelfLink.Set {
		field.Write("selfLink")
		s.SelfLink.WriteJSON(j)
	}
	if s.UID.Set {
		field.Write("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1ObjectMeta json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1ObjectMeta) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1ObjectMeta json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ObjectMeta from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "annotations":
			// Unsupported kind "pointer" for field "Annotations".
			i.Skip()
			return true
		case "clusterName":
			s.ClusterName.Reset()
			if err := s.ClusterName.ReadJSON(i); err != nil {
				i.ReportError("Field ClusterName", err.Error())
				return false
			}
			return true
		case "creationTimestamp":
			// Unsupported kind "pointer" for field "CreationTimestamp".
			i.Skip()
			return true
		case "deletionGracePeriodSeconds":
			s.DeletionGracePeriodSeconds.Reset()
			if err := s.DeletionGracePeriodSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field DeletionGracePeriodSeconds", err.Error())
				return false
			}
			return true
		case "deletionTimestamp":
			// Unsupported kind "pointer" for field "DeletionTimestamp".
			i.Skip()
			return true
		case "finalizers":
			// Unsupported kind "pointer" for field "Finalizers".
			i.Skip()
			return true
		case "generateName":
			s.GenerateName.Reset()
			if err := s.GenerateName.ReadJSON(i); err != nil {
				i.ReportError("Field GenerateName", err.Error())
				return false
			}
			return true
		case "generation":
			s.Generation.Reset()
			if err := s.Generation.ReadJSON(i); err != nil {
				i.ReportError("Field Generation", err.Error())
				return false
			}
			return true
		case "labels":
			// Unsupported kind "pointer" for field "Labels".
			i.Skip()
			return true
		case "managedFields":
			// Unsupported kind "pointer" for field "ManagedFields".
			i.Skip()
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		case "ownerReferences":
			// Unsupported kind "pointer" for field "OwnerReferences".
			i.Skip()
			return true
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceVersion", err.Error())
				return false
			}
			return true
		case "selfLink":
			s.SelfLink.Reset()
			if err := s.SelfLink.ReadJSON(i); err != nil {
				i.ReportError("Field SelfLink", err.Error())
				return false
			}
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1OwnerReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("apiVersion")
	j.WriteString(s.ApiVersion)
	if s.BlockOwnerDeletion.Set {
		field.Write("blockOwnerDeletion")
		s.BlockOwnerDeletion.WriteJSON(j)
	}
	if s.Controller.Set {
		field.Write("controller")
		s.Controller.WriteJSON(j)
	}
	field.Write("kind")
	j.WriteString(s.Kind)
	field.Write("name")
	j.WriteString(s.Name)
	field.Write("uid")
	j.WriteString(s.UID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1OwnerReference json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1OwnerReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1OwnerReference json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1OwnerReference from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion = i.ReadString()
			return i.Error == nil
		case "blockOwnerDeletion":
			s.BlockOwnerDeletion.Reset()
			if err := s.BlockOwnerDeletion.ReadJSON(i); err != nil {
				i.ReportError("Field BlockOwnerDeletion", err.Error())
				return false
			}
			return true
		case "controller":
			s.Controller.Reset()
			if err := s.Controller.ReadJSON(i); err != nil {
				i.ReportError("Field Controller", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind = i.ReadString()
			return i.Error == nil
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "uid":
			s.UID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Preconditions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ResourceVersion.Set {
		field.Write("resourceVersion")
		s.ResourceVersion.WriteJSON(j)
	}
	if s.UID.Set {
		field.Write("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1Preconditions json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1Preconditions) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1Preconditions json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1Preconditions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Preconditions from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Preconditions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "resourceVersion":
			s.ResourceVersion.Reset()
			if err := s.ResourceVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ResourceVersion", err.Error())
				return false
			}
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("clientCIDR")
	j.WriteString(s.ClientCIDR)
	field.Write("serverAddress")
	j.WriteString(s.ServerAddress)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "clientCIDR":
			s.ClientCIDR = i.ReadString()
			return i.Error == nil
		case "serverAddress":
			s.ServerAddress = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1Status) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Code.Set {
		field.Write("code")
		s.Code.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Details".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	if s.Status.Set {
		field.Write("status")
		s.Status.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1Status json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1Status) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1Status json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1Status) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1Status from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1Status) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "code":
			s.Code.Reset()
			if err := s.Code.ReadJSON(i); err != nil {
				i.ReportError("Field Code", err.Error())
				return false
			}
			return true
		case "details":
			// Unsupported kind "pointer" for field "Details".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status.Reset()
			if err := s.Status.ReadJSON(i); err != nil {
				i.ReportError("Field Status", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1StatusCause) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Field.Set {
		field.Write("field")
		s.Field.WriteJSON(j)
	}
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1StatusCause json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1StatusCause) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1StatusCause json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1StatusCause) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1StatusCause from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1StatusCause) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "field":
			s.Field.Reset()
			if err := s.Field.ReadJSON(i); err != nil {
				i.ReportError("Field Field", err.Error())
				return false
			}
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1StatusDetails) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Causes".
	if s.Group.Set {
		field.Write("group")
		s.Group.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.RetryAfterSeconds.Set {
		field.Write("retryAfterSeconds")
		s.RetryAfterSeconds.WriteJSON(j)
	}
	if s.UID.Set {
		field.Write("uid")
		s.UID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1StatusDetails json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1StatusDetails) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1StatusDetails json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1StatusDetails) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1StatusDetails from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1StatusDetails) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "causes":
			// Unsupported kind "pointer" for field "Causes".
			i.Skip()
			return true
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "retryAfterSeconds":
			s.RetryAfterSeconds.Reset()
			if err := s.RetryAfterSeconds.ReadJSON(i); err != nil {
				i.ReportError("Field RetryAfterSeconds", err.Error())
				return false
			}
			return true
		case "uid":
			s.UID.Reset()
			if err := s.UID.ReadJSON(i); err != nil {
				i.ReportError("Field UID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgApisMetaV1WatchEvent) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "alias" for field "Object".
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgApisMetaV1WatchEvent json value to io.Writer.
func (s IoK8sApimachineryPkgApisMetaV1WatchEvent) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgApisMetaV1WatchEvent json value from io.Reader.
func (s *IoK8sApimachineryPkgApisMetaV1WatchEvent) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgApisMetaV1WatchEvent from json stream.
func (s *IoK8sApimachineryPkgApisMetaV1WatchEvent) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "object":
			// Unsupported kind "alias" for field "Object".
			i.Skip()
			return true
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sApimachineryPkgVersionInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	field.Write("buildDate")
	j.WriteString(s.BuildDate)
	field.Write("compiler")
	j.WriteString(s.Compiler)
	field.Write("gitCommit")
	j.WriteString(s.GitCommit)
	field.Write("gitTreeState")
	j.WriteString(s.GitTreeState)
	field.Write("gitVersion")
	j.WriteString(s.GitVersion)
	field.Write("goVersion")
	j.WriteString(s.GoVersion)
	field.Write("major")
	j.WriteString(s.Major)
	field.Write("minor")
	j.WriteString(s.Minor)
	field.Write("platform")
	j.WriteString(s.Platform)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sApimachineryPkgVersionInfo json value to io.Writer.
func (s IoK8sApimachineryPkgVersionInfo) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sApimachineryPkgVersionInfo json value from io.Reader.
func (s *IoK8sApimachineryPkgVersionInfo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sApimachineryPkgVersionInfo from json stream.
func (s *IoK8sApimachineryPkgVersionInfo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "buildDate":
			s.BuildDate = i.ReadString()
			return i.Error == nil
		case "compiler":
			s.Compiler = i.ReadString()
			return i.Error == nil
		case "gitCommit":
			s.GitCommit = i.ReadString()
			return i.Error == nil
		case "gitTreeState":
			s.GitTreeState = i.ReadString()
			return i.Error == nil
		case "gitVersion":
			s.GitVersion = i.ReadString()
			return i.Error == nil
		case "goVersion":
			s.GoVersion = i.ReadString()
			return i.Error == nil
		case "major":
			s.Major = i.ReadString()
			return i.Error == nil
		case "minor":
			s.Minor = i.ReadString()
			return i.Error == nil
		case "platform":
			s.Platform = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	// Unsupported kind "pointer" for field "Spec".
	// Unsupported kind "pointer" for field "Status".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1APIService json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIService json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIService from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		case "spec":
			// Unsupported kind "pointer" for field "Spec".
			i.Skip()
			return true
		case "status":
			// Unsupported kind "pointer" for field "Status".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "LastTransitionTime".
	if s.Message.Set {
		field.Write("message")
		s.Message.WriteJSON(j)
	}
	if s.Reason.Set {
		field.Write("reason")
		s.Reason.WriteJSON(j)
	}
	field.Write("status")
	j.WriteString(s.Status)
	field.Write("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "lastTransitionTime":
			// Unsupported kind "pointer" for field "LastTransitionTime".
			i.Skip()
			return true
		case "message":
			s.Message.Reset()
			if err := s.Message.ReadJSON(i); err != nil {
				i.ReportError("Field Message", err.Error())
				return false
			}
			return true
		case "reason":
			s.Reason.Reset()
			if err := s.Reason.ReadJSON(i); err != nil {
				i.ReportError("Field Reason", err.Error())
				return false
			}
			return true
		case "status":
			s.Status = i.ReadString()
			return i.Error == nil
		case "type":
			s.Type = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.ApiVersion.Set {
		field.Write("apiVersion")
		s.ApiVersion.WriteJSON(j)
	}
	// Unsupported kind "array" for field "Items".
	if s.Kind.Set {
		field.Write("kind")
		s.Kind.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Metadata".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "apiVersion":
			s.ApiVersion.Reset()
			if err := s.ApiVersion.ReadJSON(i); err != nil {
				i.ReportError("Field ApiVersion", err.Error())
				return false
			}
			return true
		case "items":
			// Unsupported kind "array" for field "Items".
			i.Skip()
			return true
		case "kind":
			s.Kind.Reset()
			if err := s.Kind.ReadJSON(i); err != nil {
				i.ReportError("Field Kind", err.Error())
				return false
			}
			return true
		case "metadata":
			// Unsupported kind "pointer" for field "Metadata".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "CaBundle".
	if s.Group.Set {
		field.Write("group")
		s.Group.WriteJSON(j)
	}
	field.Write("groupPriorityMinimum")
	j.WriteInt32(s.GroupPriorityMinimum)
	if s.InsecureSkipTLSVerify.Set {
		field.Write("insecureSkipTLSVerify")
		s.InsecureSkipTLSVerify.WriteJSON(j)
	}
	// Unsupported kind "pointer" for field "Service".
	if s.Version.Set {
		field.Write("version")
		s.Version.WriteJSON(j)
	}
	field.Write("versionPriority")
	j.WriteInt32(s.VersionPriority)
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "caBundle":
			// Unsupported kind "pointer" for field "CaBundle".
			i.Skip()
			return true
		case "group":
			s.Group.Reset()
			if err := s.Group.ReadJSON(i); err != nil {
				i.ReportError("Field Group", err.Error())
				return false
			}
			return true
		case "groupPriorityMinimum":
			s.GroupPriorityMinimum = i.ReadInt32()
			return i.Error == nil
		case "insecureSkipTLSVerify":
			s.InsecureSkipTLSVerify.Reset()
			if err := s.InsecureSkipTLSVerify.ReadJSON(i); err != nil {
				i.ReportError("Field InsecureSkipTLSVerify", err.Error())
				return false
			}
			return true
		case "service":
			// Unsupported kind "pointer" for field "Service".
			i.Skip()
			return true
		case "version":
			s.Version.Reset()
			if err := s.Version.ReadJSON(i); err != nil {
				i.ReportError("Field Version", err.Error())
				return false
			}
			return true
		case "versionPriority":
			s.VersionPriority = i.ReadInt32()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	// Unsupported kind "pointer" for field "Conditions".
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "conditions":
			// Unsupported kind "pointer" for field "Conditions".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	field := json.NewFieldWriter(j)
	defer field.Reset()
	if s.Name.Set {
		field.Write("name")
		s.Name.WriteJSON(j)
	}
	if s.Namespace.Set {
		field.Write("namespace")
		s.Namespace.WriteJSON(j)
	}
	if s.Port.Set {
		field.Write("port")
		s.Port.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference json value to io.Writer.
func (s IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) WriteJSONTo(w io.Writer) error {
	j := json.NewStream(w)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference json value from io.Reader.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference from json stream.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(i); err != nil {
				i.ReportError("Field Name", err.Error())
				return false
			}
			return true
		case "namespace":
			s.Namespace.Reset()
			if err := s.Namespace.ReadJSON(i); err != nil {
				i.ReportError("Field Namespace", err.Error())
				return false
			}
			return true
		case "port":
			s.Port.Reset()
			if err := s.Port.ReadJSON(i); err != nil {
				i.ReportError("Field Port", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}
